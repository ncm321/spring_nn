cscope 15 $HOME/niuchunmin/mqtt -q 0000026349 0003507450
	@main.c

14 
	gö˛ude
 "main.h"

	@open_source_lib/cJSON/cJSON-1.7.15/cJSON.c

27 #i‡!
deföed
(
_CRT_SECURE_NO_DEPRECATE
Ë&& deföed(
_MSC_VER
)

28 
	#_CRT_SECURE_NO_DEPRECATE


	)

31 #ifde‡
__GNUC__


32 #¥agm®
GCC
 
visibûôy
 
push
()

34 #i‡
deföed
(
_MSC_VER
)

35 #¥agm®
w¨nög
 (
push
)

37 #¥agm®
w¨nög
 (
dißbÀ
 : 4001)

40 
	~<°rög.h
>

41 
	~<°dio.h
>

42 
	~<m©h.h
>

43 
	~<°dlib.h
>

44 
	~<limôs.h
>

45 
	~<˘y≥.h
>

46 
	~<Êﬂt.h
>

48 #ifde‡
ENABLE_LOCALES


49 
	~<loˇÀ.h
>

52 #i‡
deföed
(
_MSC_VER
)

53 #¥agm®
w¨nög
 (
p›
)

55 #ifde‡
__GNUC__


56 #¥agm®
GCC
 
visibûôy
 
p›


59 
	~"cJSON.h
"

62 #ifde‡
åue


63 #unde‡
åue


65 
	#åue
 ((
cJSON_boﬁ
)1)

	)

67 #ifde‡
Ál£


68 #unde‡
Ál£


70 
	#Ál£
 ((
cJSON_boﬁ
)0)

	)

73 #i‚de‡
isöf


74 
	#isöf
(
d
Ë(
	`i¢™
((d - d)Ë&& !i¢™(d))

	)

76 #i‚de‡
i¢™


77 
	#i¢™
(
d
Ë(d !d)

	)

80 #i‚de‡
NAN


81 #ifde‡
_WIN32


82 
	#NAN
 
	`sqπ
(-1.0)

	)

84 
	#NAN
 0.0/0.0

	)

89 c⁄° *
	mjs⁄
;

90 
size_t
 
	mposôi⁄
;

91 } 
	tîr‹
;

92 
îr‹
 
	gglobÆ_îr‹
 = { 
NULL
, 0 };

94 
	$CJSON_PUBLIC
(c⁄° *Ë
	$cJSON_GëEº‹På
()

96  (c⁄° *Ë(
globÆ_îr‹
.
js⁄
 + globÆ_îr‹.
posôi⁄
);

97 
	}
}

99 
	$CJSON_PUBLIC
(*Ë
	$cJSON_GëSåögVÆue
(c⁄° 
cJSON
 * c⁄° 
ôem
)

101 i‡(!
	`cJSON_IsSåög
(
ôem
))

103  
NULL
;

106  
ôem
->
vÆue°rög
;

107 
	}
}

109 
	$CJSON_PUBLIC
(Ë
	$cJSON_GëNumbîVÆue
(c⁄° 
cJSON
 * c⁄° 
ôem
)

111 i‡(!
	`cJSON_IsNumbî
(
ôem
))

113  (Ë
NAN
;

116  
ôem
->
vÆuedoubÀ
;

117 
	}
}

120 #i‡(
CJSON_VERSION_MAJOR
 !1Ë|| (
CJSON_VERSION_MINOR
 !7Ë|| (
CJSON_VERSION_PATCH
 != 15)

121 #îr‹ 
cJSON
.
h
 
™d
 cJSON.
c
 
have
 
dif„ª¡
 
vîsi⁄s
. 
Make
 
suª
 
th©
 
bŸh
 havê
the
 
ßme
.

124 
	$CJSON_PUBLIC
(c⁄° *Ë
	$cJSON_Vîsi⁄
()

126 
vîsi⁄
[15];

127 
	`•rötf
(
vîsi⁄
, "%i.%i.%i", 
CJSON_VERSION_MAJOR
, 
CJSON_VERSION_MINOR
, 
CJSON_VERSION_PATCH
);

129  
vîsi⁄
;

130 
	}
}

133 
	$ˇ£_ö£nsôive_°rcmp
(c⁄° *
°rög1
, c⁄° *
°rög2
)

135 i‡((
°rög1
 =
NULL
Ë|| (
°rög2
 == NULL))

140 i‡(
°rög1
 =
°rög2
)

145 ; 
	`tﬁowî
(*
°rög1
Ë=tﬁowî(*
°rög2
); ()string1++, string2++)

147 i‡(*
°rög1
 == '\0')

153  
	`tﬁowî
(*
°rög1
Ë-Åﬁowî(*
°rög2
);

154 
	}
}

156 
	söã∫Æ_hooks


158 *(
CJSON_CDECL
 *
	mÆloˇã
)(
size_t
 
	msize
);

159 (
CJSON_CDECL
 *
	mdóŒoˇã
)(*
	mpoöãr
);

160 *(
CJSON_CDECL
 *
	mªÆloˇã
)(*
	mpoöãr
, 
size_t
 
	msize
);

161 } 
	töã∫Æ_hooks
;

163 #i‡
deföed
(
_MSC_VER
)

165 * 
CJSON_CDECL
 
	$öã∫Æ_mÆloc
(
size_t
 
size
)

167  
	`mÆloc
(
size
);

168 
	}
}

169 
CJSON_CDECL
 
	$öã∫Æ_‰ì
(*
poöãr
)

171 
	`‰ì
(
poöãr
);

172 
	}
}

173 * 
CJSON_CDECL
 
	$öã∫Æ_ªÆloc
(*
poöãr
, 
size_t
 
size
)

175  
	`ªÆloc
(
poöãr
, 
size
);

176 
	}
}

178 
	#öã∫Æ_mÆloc
 
mÆloc


	)

179 
	#öã∫Æ_‰ì
 
‰ì


	)

180 
	#öã∫Æ_ªÆloc
 
ªÆloc


	)

184 
	#°©ic_°æí
(
°rög_lôîÆ
Ë((°rög_lôîÆË- (""))

	)

186 
öã∫Æ_hooks
 
	gglobÆ_hooks
 = { 
öã∫Æ_mÆloc
, 
öã∫Æ_‰ì
, 
öã∫Æ_ªÆloc
 };

188 * 
	$cJSON_°rdup
(c⁄° * 
°rög
, c⁄° 
öã∫Æ_hooks
 * c⁄° 
hooks
)

190 
size_t
 
Àngth
 = 0;

191 *
c›y
 = 
NULL
;

193 i‡(
°rög
 =
NULL
)

195  
NULL
;

198 
Àngth
 = 
	`°æí
((c⁄° *)
°rög
) + ("");

199 
c›y
 = (*)
hooks
->
	`Æloˇã
(
Àngth
);

200 i‡(
c›y
 =
NULL
)

202  
NULL
;

204 
	`mem˝y
(
c›y
, 
°rög
, 
Àngth
);

206  
c›y
;

207 
	}
}

209 
	$CJSON_PUBLIC
(Ë
	$cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
)

211 i‡(
hooks
 =
NULL
)

214 
globÆ_hooks
.
Æloˇã
 = 
mÆloc
;

215 
globÆ_hooks
.
dóŒoˇã
 = 
‰ì
;

216 
globÆ_hooks
.
ªÆloˇã
 = 
ªÆloc
;

220 
globÆ_hooks
.
Æloˇã
 = 
mÆloc
;

221 i‡(
hooks
->
mÆloc_‚
 !
NULL
)

223 
globÆ_hooks
.
Æloˇã
 = 
hooks
->
mÆloc_‚
;

226 
globÆ_hooks
.
dóŒoˇã
 = 
‰ì
;

227 i‡(
hooks
->
‰ì_‚
 !
NULL
)

229 
globÆ_hooks
.
dóŒoˇã
 = 
hooks
->
‰ì_‚
;

233 
globÆ_hooks
.
ªÆloˇã
 = 
NULL
;

234 i‡((
globÆ_hooks
.
Æloˇã
 =
mÆloc
Ë&& (globÆ_hooks.
dóŒoˇã
 =
‰ì
))

236 
globÆ_hooks
.
ªÆloˇã
 = 
ªÆloc
;

238 
	}
}

241 
cJSON
 *
	$cJSON_New_Iãm
(c⁄° 
öã∫Æ_hooks
 * c⁄° 
hooks
)

243 
cJSON
* 
node
 = (cJSON*)
hooks
->
	`Æloˇã
((cJSON));

244 i‡(
node
)

246 
	`mem£t
(
node
, '\0', (
cJSON
));

249  
node
;

250 
	}
}

253 
	$CJSON_PUBLIC
(Ë
	$cJSON_Dñëe
(
cJSON
 *
ôem
)

255 
cJSON
 *
√xt
 = 
NULL
;

256 
ôem
 !
NULL
)

258 
√xt
 = 
ôem
->next;

259 i‡(!(
ôem
->
ty≥
 & 
cJSON_IsRe„ªn˚
Ë&& (ôem->
chûd
 !
NULL
))

261 
	`cJSON_Dñëe
(
ôem
->
chûd
);

263 i‡(!(
ôem
->
ty≥
 & 
cJSON_IsRe„ªn˚
Ë&& (ôem->
vÆue°rög
 !
NULL
))

265 
globÆ_hooks
.
	`dóŒoˇã
(
ôem
->
vÆue°rög
);

267 i‡(!(
ôem
->
ty≥
 & 
cJSON_SåögIsC⁄°
Ë&& (ôem->
°rög
 !
NULL
))

269 
globÆ_hooks
.
	`dóŒoˇã
(
ôem
->
°rög
);

271 
globÆ_hooks
.
	`dóŒoˇã
(
ôem
);

272 
ôem
 = 
√xt
;

274 
	}
}

277 
	$gë_decimÆ_poöt
()

279 #ifde‡
ENABLE_LOCALES


280 
lc⁄v
 *lc⁄v = 
	`loˇÀc⁄v
();

281  (Ë
lc⁄v
->
decimÆ_poöt
[0];

285 
	}
}

289 c⁄° *
	mc⁄ã¡
;

290 
size_t
 
	mÀngth
;

291 
size_t
 
	moff£t
;

292 
size_t
 
	mdïth
;

293 
öã∫Æ_hooks
 
	mhooks
;

294 } 
	t∑r£_buf„r
;

297 
	#ˇn_ªad
(
buf„r
, 
size
Ë((buf„∏!
NULL
Ë&& (((buf„r)->
off£t
 + sizeË<(buf„r)->
Àngth
))

	)

299 
	#ˇn_ac˚ss_©_ödex
(
buf„r
, 
ödex
Ë((buf„∏!
NULL
Ë&& (((buf„r)->
off£t
 + indexË< (buf„r)->
Àngth
))

	)

300 
	#ˇ¬Ÿ_ac˚ss_©_ödex
(
buf„r
, 
ödex
Ë(!
	`ˇn_ac˚ss_©_ödex
(buf„r, index))

	)

302 
	#buf„r_©_off£t
(
buf„r
Ë((buf„r)->
c⁄ã¡
 + (buf„r)->
off£t
)

	)

305 
cJSON_boﬁ
 
	$∑r£_numbî
(
cJSON
 * c⁄° 
ôem
, 
∑r£_buf„r
 * c⁄° 
öput_buf„r
)

307 
numbî
 = 0;

308 *
a·î_íd
 = 
NULL
;

309 
numbî_c_°rög
[64];

310 
decimÆ_poöt
 = 
	`gë_decimÆ_poöt
();

311 
size_t
 
i
 = 0;

313 i‡((
öput_buf„r
 =
NULL
Ë|| (öput_buf„r->
c⁄ã¡
 == NULL))

315  
Ál£
;

321 
i
 = 0; (ò< ((
numbî_c_°rög
Ë- 1)Ë&& 
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, i); i++)

323 
	`buf„r_©_off£t
(
öput_buf„r
)[
i
])

339 
numbî_c_°rög
[
i
] = 
	`buf„r_©_off£t
(
öput_buf„r
)[i];

343 
numbî_c_°rög
[
i
] = 
decimÆ_poöt
;

347 
lo›_íd
;

350 
lo›_íd
:

351 
numbî_c_°rög
[
i
] = '\0';

353 
numbî
 = 
	`°πod
((c⁄° *)
numbî_c_°rög
, (**)&
a·î_íd
);

354 i‡(
numbî_c_°rög
 =
a·î_íd
)

356  
Ál£
;

359 
ôem
->
vÆuedoubÀ
 = 
numbî
;

362 i‡(
numbî
 >
INT_MAX
)

364 
ôem
->
vÆueöt
 = 
INT_MAX
;

366 i‡(
numbî
 <()
INT_MIN
)

368 
ôem
->
vÆueöt
 = 
INT_MIN
;

372 
ôem
->
vÆueöt
 = ()
numbî
;

375 
ôem
->
ty≥
 = 
cJSON_Numbî
;

377 
öput_buf„r
->
off£t
 +(
size_t
)(
a·î_íd
 - 
numbî_c_°rög
);

378  
åue
;

379 
	}
}

382 
	$CJSON_PUBLIC
(Ë
	$cJSON_SëNumbîHñ≥r
(
cJSON
 *
obje˘
, 
numbî
)

384 i‡(
numbî
 >
INT_MAX
)

386 
obje˘
->
vÆueöt
 = 
INT_MAX
;

388 i‡(
numbî
 <()
INT_MIN
)

390 
obje˘
->
vÆueöt
 = 
INT_MIN
;

394 
obje˘
->
vÆueöt
 = ()
numbî
;

397  
obje˘
->
vÆuedoubÀ
 = 
numbî
;

398 
	}
}

400 
	$CJSON_PUBLIC
(*Ë
	$cJSON_SëVÆue°rög
(
cJSON
 *
obje˘
, c⁄° *
vÆue°rög
)

402 *
c›y
 = 
NULL
;

404 i‡(!(
obje˘
->
ty≥
 & 
cJSON_Såög
Ë|| (obje˘->ty≥ & 
cJSON_IsRe„ªn˚
))

406  
NULL
;

408 i‡(
	`°æí
(
vÆue°rög
Ë<°æí(
obje˘
->valuestring))

410 
	`°r˝y
(
obje˘
->
vÆue°rög
, valuestring);

411  
obje˘
->
vÆue°rög
;

413 
c›y
 = (*Ë
	`cJSON_°rdup
((c⁄° *)
vÆue°rög
, &
globÆ_hooks
);

414 i‡(
c›y
 =
NULL
)

416  
NULL
;

418 i‡(
obje˘
->
vÆue°rög
 !
NULL
)

420 
	`cJSON_‰ì
(
obje˘
->
vÆue°rög
);

422 
obje˘
->
vÆue°rög
 = 
c›y
;

424  
c›y
;

425 
	}
}

429 *
	mbuf„r
;

430 
size_t
 
	mÀngth
;

431 
size_t
 
	moff£t
;

432 
size_t
 
	mdïth
;

433 
cJSON_boﬁ
 
	mnﬂŒoc
;

434 
cJSON_boﬁ
 
	mf‹m©
;

435 
öã∫Æ_hooks
 
	mhooks
;

436 } 
	t¥ötbuf„r
;

439 * 
	$ísuª
(
¥ötbuf„r
 * c⁄° 
p
, 
size_t
 
√eded
)

441 *
√wbuf„r
 = 
NULL
;

442 
size_t
 
√wsize
 = 0;

444 i‡((
p
 =
NULL
Ë|| (p->
buf„r
 == NULL))

446  
NULL
;

449 i‡((
p
->
Àngth
 > 0Ë&& (p->
off£t
 >=Ö->length))

452  
NULL
;

455 i‡(
√eded
 > 
INT_MAX
)

458  
NULL
;

461 
√eded
 +
p
->
off£t
 + 1;

462 i‡(
√eded
 <
p
->
Àngth
)

464  
p
->
buf„r
 +Ö->
off£t
;

467 i‡(
p
->
nﬂŒoc
) {

468  
NULL
;

472 i‡(
√eded
 > (
INT_MAX
 / 2))

475 i‡(
√eded
 <
INT_MAX
)

477 
√wsize
 = 
INT_MAX
;

481  
NULL
;

486 
√wsize
 = 
√eded
 * 2;

489 i‡(
p
->
hooks
.
ªÆloˇã
 !
NULL
)

492 
√wbuf„r
 = (*)
p
->
hooks
.
	`ªÆloˇã
’->
buf„r
, 
√wsize
);

493 i‡(
√wbuf„r
 =
NULL
)

495 
p
->
hooks
.
	`dóŒoˇã
’->
buf„r
);

496 
p
->
Àngth
 = 0;

497 
p
->
buf„r
 = 
NULL
;

499  
NULL
;

505 
√wbuf„r
 = (*)
p
->
hooks
.
	`Æloˇã
(
√wsize
);

506 i‡(!
√wbuf„r
)

508 
p
->
hooks
.
	`dóŒoˇã
’->
buf„r
);

509 
p
->
Àngth
 = 0;

510 
p
->
buf„r
 = 
NULL
;

512  
NULL
;

515 
	`mem˝y
(
√wbuf„r
, 
p
->
buf„r
,Ö->
off£t
 + 1);

516 
p
->
hooks
.
	`dóŒoˇã
’->
buf„r
);

518 
p
->
Àngth
 = 
√wsize
;

519 
p
->
buf„r
 = 
√wbuf„r
;

521  
√wbuf„r
 + 
p
->
off£t
;

522 
	}
}

525 
	$upd©e_off£t
(
¥ötbuf„r
 * c⁄° 
buf„r
)

527 c⁄° *
buf„r_poöãr
 = 
NULL
;

528 i‡((
buf„r
 =
NULL
) || (buffer->buffer == NULL))

532 
buf„r_poöãr
 = 
buf„r
->buf„∏+ buf„r->
off£t
;

534 
buf„r
->
off£t
 +
	`°æí
((c⁄° *)
buf„r_poöãr
);

535 
	}
}

538 
cJSON_boﬁ
 
	$com∑ª_doubÀ
(
a
, 
b
)

540 
maxVÆ
 = 
	`Ábs
(
a
Ë> fabs(
b
) ? fabs(a) : fabs(b);

541  (
	`Ábs
(
a
 - 
b
Ë<
maxVÆ
 * 
DBL_EPSILON
);

542 
	}
}

545 
cJSON_boﬁ
 
	$¥öt_numbî
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
¥ötbuf„r
 * c⁄° 
ouçut_buf„r
)

547 *
ouçut_poöãr
 = 
NULL
;

548 
d
 = 
ôem
->
vÆuedoubÀ
;

549 
Àngth
 = 0;

550 
size_t
 
i
 = 0;

551 
numbî_buf„r
[26] = {0};

552 
decimÆ_poöt
 = 
	`gë_decimÆ_poöt
();

553 
ã°
 = 0.0;

555 i‡(
ouçut_buf„r
 =
NULL
)

557  
Ál£
;

561 i‡(
	`i¢™
(
d
Ë|| 
	`isöf
(d))

563 
Àngth
 = 
	`•rötf
((*)
numbî_buf„r
, "null");

568 
Àngth
 = 
	`•rötf
((*)
numbî_buf„r
, "%1.15g", 
d
);

571 i‡((
	`ssˇnf
((*)
numbî_buf„r
, "%lg", &
ã°
Ë!1Ë|| !
	`com∑ª_doubÀ
((Èe°, 
d
))

574 
Àngth
 = 
	`•rötf
((*)
numbî_buf„r
, "%1.17g", 
d
);

579 i‡((
Àngth
 < 0Ë|| (Àngth > ()((
numbî_buf„r
) - 1)))

581  
Ál£
;

585 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, (
size_t
)
Àngth
 + (""));

586 i‡(
ouçut_poöãr
 =
NULL
)

588  
Ál£
;

593 
i
 = 0; i < ((
size_t
)
Àngth
); i++)

595 i‡(
numbî_buf„r
[
i
] =
decimÆ_poöt
)

597 
ouçut_poöãr
[
i
] = '.';

601 
ouçut_poöãr
[
i
] = 
numbî_buf„r
[i];

603 
ouçut_poöãr
[
i
] = '\0';

605 
ouçut_buf„r
->
off£t
 +(
size_t
)
Àngth
;

607  
åue
;

608 
	}
}

611 
	$∑r£_hex4
(c⁄° * c⁄° 
öput
)

613 
h
 = 0;

614 
size_t
 
i
 = 0;

616 
i
 = 0; i < 4; i++)

619 i‡((
öput
[
i
] >= '0') && (input[i] <= '9'))

621 
h
 +(Ë
öput
[
i
] - '0';

623 i‡((
öput
[
i
] >= 'A') && (input[i] <= 'F'))

625 
h
 +(Ë10 + 
öput
[
i
] - 'A';

627 i‡((
öput
[
i
] >= 'a') && (input[i] <= 'f'))

629 
h
 +(Ë10 + 
öput
[
i
] - 'a';

636 i‡(
i
 < 3)

639 
h
 = h << 4;

643  
h
;

644 
	}
}

648 
	$utf16_lôîÆ_to_utf8
(c⁄° * c⁄° 
öput_poöãr
, c⁄° * c⁄° 
öput_íd
, **
ouçut_poöãr
)

650 
codïoöt
 = 0;

651 
fú°_code
 = 0;

652 c⁄° *
fú°_£quí˚
 = 
öput_poöãr
;

653 
utf8_Àngth
 = 0;

654 
utf8_posôi⁄
 = 0;

655 
£quí˚_Àngth
 = 0;

656 
fú°_byã_m¨k
 = 0;

658 i‡((
öput_íd
 - 
fú°_£quí˚
) < 6)

661 
Áû
;

665 
fú°_code
 = 
	`∑r£_hex4
(
fú°_£quí˚
 + 2);

668 i‡(((
fú°_code
 >= 0xDC00) && (first_code <= 0xDFFF)))

670 
Áû
;

674 i‡((
fú°_code
 >= 0xD800) && (first_code <= 0xDBFF))

676 c⁄° *
£c⁄d_£quí˚
 = 
fú°_£quí˚
 + 6;

677 
£c⁄d_code
 = 0;

678 
£quí˚_Àngth
 = 12;

680 i‡((
öput_íd
 - 
£c⁄d_£quí˚
) < 6)

683 
Áû
;

686 i‡((
£c⁄d_£quí˚
[0] != '\\') || (second_sequence[1] != 'u'))

689 
Áû
;

693 
£c⁄d_code
 = 
	`∑r£_hex4
(
£c⁄d_£quí˚
 + 2);

695 i‡((
£c⁄d_code
 < 0xDC00) || (second_code > 0xDFFF))

698 
Áû
;

703 
codïoöt
 = 0x10000 + (((
fú°_code
 & 0x3FFË<< 10Ë| (
£c⁄d_code
 & 0x3FF));

707 
£quí˚_Àngth
 = 6;

708 
codïoöt
 = 
fú°_code
;

714 i‡(
codïoöt
 < 0x80)

717 
utf8_Àngth
 = 1;

719 i‡(
codïoöt
 < 0x800)

722 
utf8_Àngth
 = 2;

723 
fú°_byã_m¨k
 = 0xC0;

725 i‡(
codïoöt
 < 0x10000)

728 
utf8_Àngth
 = 3;

729 
fú°_byã_m¨k
 = 0xE0;

731 i‡(
codïoöt
 <= 0x10FFFF)

734 
utf8_Àngth
 = 4;

735 
fú°_byã_m¨k
 = 0xF0;

740 
Áû
;

744 
utf8_posôi⁄
 = ()(
utf8_Àngth
 - 1); utf8_position > 0; utf8_position--)

747 (*
ouçut_poöãr
)[
utf8_posôi⁄
] = ()((
codïoöt
 | 0x80) & 0xBF);

748 
codïoöt
 >>= 6;

751 i‡(
utf8_Àngth
 > 1)

753 (*
ouçut_poöãr
)[0] = ()((
codïoöt
 | 
fú°_byã_m¨k
) & 0xFF);

757 (*
ouçut_poöãr
)[0] = ()(
codïoöt
 & 0x7F);

760 *
ouçut_poöãr
 +
utf8_Àngth
;

762  
£quí˚_Àngth
;

764 
Áû
:

766 
	}
}

769 
cJSON_boﬁ
 
	$∑r£_°rög
(
cJSON
 * c⁄° 
ôem
, 
∑r£_buf„r
 * c⁄° 
öput_buf„r
)

771 c⁄° *
öput_poöãr
 = 
	`buf„r_©_off£t
(
öput_buf„r
) + 1;

772 c⁄° *
öput_íd
 = 
	`buf„r_©_off£t
(
öput_buf„r
) + 1;

773 *
ouçut_poöãr
 = 
NULL
;

774 *
ouçut
 = 
NULL
;

777 i‡(
	`buf„r_©_off£t
(
öput_buf„r
)[0] != '\"')

779 
Áû
;

784 
size_t
 
Æloˇti⁄_Àngth
 = 0;

785 
size_t
 
skù≥d_byãs
 = 0;

786 ((
size_t
)(
öput_íd
 - 
öput_buf„r
->
c⁄ã¡
Ë< i≈ut_buf„r->
Àngth
) && (*input_end != '\"'))

789 i‡(
öput_íd
[0] == '\\')

791 i‡((
size_t
)(
öput_íd
 + 1 - 
öput_buf„r
->
c⁄ã¡
Ë>öput_buf„r->
Àngth
)

794 
Áû
;

796 
skù≥d_byãs
++;

797 
öput_íd
++;

799 
öput_íd
++;

801 i‡(((
size_t
)(
öput_íd
 - 
öput_buf„r
->
c⁄ã¡
Ë>öput_buf„r->
Àngth
) || (*input_end != '\"'))

803 
Áû
;

807 
Æloˇti⁄_Àngth
 = (
size_t
Ë(
öput_íd
 - 
	`buf„r_©_off£t
(
öput_buf„r
)Ë- 
skù≥d_byãs
;

808 
ouçut
 = (*)
öput_buf„r
->
hooks
.
	`Æloˇã
(
Æloˇti⁄_Àngth
 + (""));

809 i‡(
ouçut
 =
NULL
)

811 
Áû
;

815 
ouçut_poöãr
 = 
ouçut
;

817 
öput_poöãr
 < 
öput_íd
)

819 i‡(*
öput_poöãr
 != '\\')

821 *
ouçut_poöãr
++ = *
öput_poöãr
++;

826 
£quí˚_Àngth
 = 2;

827 i‡((
öput_íd
 - 
öput_poöãr
) < 1)

829 
Áû
;

832 
öput_poöãr
[1])

835 *
ouçut_poöãr
++ = '\b';

838 *
ouçut_poöãr
++ = '\f';

841 *
ouçut_poöãr
++ = '\n';

844 *
ouçut_poöãr
++ = '\r';

847 *
ouçut_poöãr
++ = '\t';

852 *
ouçut_poöãr
++ = 
öput_poöãr
[1];

857 
£quí˚_Àngth
 = 
	`utf16_lôîÆ_to_utf8
(
öput_poöãr
, 
öput_íd
, &
ouçut_poöãr
);

858 i‡(
£quí˚_Àngth
 == 0)

861 
Áû
;

866 
Áû
;

868 
öput_poöãr
 +
£quí˚_Àngth
;

873 *
ouçut_poöãr
 = '\0';

875 
ôem
->
ty≥
 = 
cJSON_Såög
;

876 
ôem
->
vÆue°rög
 = (*)
ouçut
;

878 
öput_buf„r
->
off£t
 = (
size_t
Ë(
öput_íd
 - i≈ut_buf„r->
c⁄ã¡
);

879 
öput_buf„r
->
off£t
++;

881  
åue
;

883 
Áû
:

884 i‡(
ouçut
 !
NULL
)

886 
öput_buf„r
->
hooks
.
	`dóŒoˇã
(
ouçut
);

889 i‡(
öput_poöãr
 !
NULL
)

891 
öput_buf„r
->
off£t
 = (
size_t
)(
öput_poöãr
 - i≈ut_buf„r->
c⁄ã¡
);

894  
Ál£
;

895 
	}
}

898 
cJSON_boﬁ
 
	$¥öt_°rög_±r
(c⁄° * c⁄° 
öput
, 
¥ötbuf„r
 * c⁄° 
ouçut_buf„r
)

900 c⁄° *
öput_poöãr
 = 
NULL
;

901 *
ouçut
 = 
NULL
;

902 *
ouçut_poöãr
 = 
NULL
;

903 
size_t
 
ouçut_Àngth
 = 0;

905 
size_t
 
esˇ≥_ch¨a˘îs
 = 0;

907 i‡(
ouçut_buf„r
 =
NULL
)

909  
Ál£
;

913 i‡(
öput
 =
NULL
)

915 
ouçut
 = 
	`ísuª
(
ouçut_buf„r
, ("\"\""));

916 i‡(
ouçut
 =
NULL
)

918  
Ál£
;

920 
	`°r˝y
((*)
ouçut
, "\"\"");

922  
åue
;

926 
öput_poöãr
 = 
öput
; *input_pointer; input_pointer++)

928 *
öput_poöãr
)

938 
esˇ≥_ch¨a˘îs
++;

941 i‡(*
öput_poöãr
 < 32)

944 
esˇ≥_ch¨a˘îs
 += 5;

949 
ouçut_Àngth
 = (
size_t
)(
öput_poöãr
 - 
öput
Ë+ 
esˇ≥_ch¨a˘îs
;

951 
ouçut
 = 
	`ísuª
(
ouçut_buf„r
, 
ouçut_Àngth
 + ("\"\""));

952 i‡(
ouçut
 =
NULL
)

954  
Ál£
;

958 i‡(
esˇ≥_ch¨a˘îs
 == 0)

960 
ouçut
[0] = '\"';

961 
	`mem˝y
(
ouçut
 + 1, 
öput
, 
ouçut_Àngth
);

962 
ouçut
[
ouçut_Àngth
 + 1] = '\"';

963 
ouçut
[
ouçut_Àngth
 + 2] = '\0';

965  
åue
;

968 
ouçut
[0] = '\"';

969 
ouçut_poöãr
 = 
ouçut
 + 1;

971 
öput_poöãr
 = 
öput
; *öput_poöã∏!'\0'; ()öput_poöãr++, 
ouçut_poöãr
++)

973 i‡((*
öput_poöãr
 > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))

976 *
ouçut_poöãr
 = *
öput_poöãr
;

981 *
ouçut_poöãr
++ = '\\';

982 *
öput_poöãr
)

985 *
ouçut_poöãr
 = '\\';

988 *
ouçut_poöãr
 = '\"';

991 *
ouçut_poöãr
 = 'b';

994 *
ouçut_poöãr
 = 'f';

997 *
ouçut_poöãr
 = 'n';

1000 *
ouçut_poöãr
 = 'r';

1003 *
ouçut_poöãr
 = 't';

1007 
	`•rötf
((*)
ouçut_poöãr
, "u%04x", *
öput_poöãr
);

1008 
ouçut_poöãr
 += 4;

1013 
ouçut
[
ouçut_Àngth
 + 1] = '\"';

1014 
ouçut
[
ouçut_Àngth
 + 2] = '\0';

1016  
åue
;

1017 
	}
}

1020 
cJSON_boﬁ
 
	$¥öt_°rög
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
¥ötbuf„r
 * c⁄° 
p
)

1022  
	`¥öt_°rög_±r
((*)
ôem
->
vÆue°rög
, 
p
);

1023 
	}
}

1026 
cJSON_boﬁ
 
∑r£_vÆue
(
cJSON
 * c⁄° 
ôem
, 
∑r£_buf„r
 * c⁄° 
öput_buf„r
);

1027 
cJSON_boﬁ
 
¥öt_vÆue
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
¥ötbuf„r
 * c⁄° 
ouçut_buf„r
);

1028 
cJSON_boﬁ
 
∑r£_¨øy
(
cJSON
 * c⁄° 
ôem
, 
∑r£_buf„r
 * c⁄° 
öput_buf„r
);

1029 
cJSON_boﬁ
 
¥öt_¨øy
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
¥ötbuf„r
 * c⁄° 
ouçut_buf„r
);

1030 
cJSON_boﬁ
 
∑r£_obje˘
(
cJSON
 * c⁄° 
ôem
, 
∑r£_buf„r
 * c⁄° 
öput_buf„r
);

1031 
cJSON_boﬁ
 
¥öt_obje˘
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
¥ötbuf„r
 * c⁄° 
ouçut_buf„r
);

1034 
∑r£_buf„r
 *
	$buf„r_skù_whôe•a˚
(
∑r£_buf„r
 * c⁄° 
buf„r
)

1036 i‡((
buf„r
 =
NULL
Ë|| (buf„r->
c⁄ã¡
 == NULL))

1038  
NULL
;

1041 i‡(
	`ˇ¬Ÿ_ac˚ss_©_ödex
(
buf„r
, 0))

1043  
buf„r
;

1046 
	`ˇn_ac˚ss_©_ödex
(
buf„r
, 0Ë&& (
	`buf„r_©_off£t
(buffer)[0] <= 32))

1048 
buf„r
->
off£t
++;

1051 i‡(
buf„r
->
off£t
 =buf„r->
Àngth
)

1053 
buf„r
->
off£t
--;

1056  
buf„r
;

1057 
	}
}

1060 
∑r£_buf„r
 *
	$skù_utf8_bom
(
∑r£_buf„r
 * c⁄° 
buf„r
)

1062 i‡((
buf„r
 =
NULL
Ë|| (buf„r->
c⁄ã¡
 =NULLË|| (buf„r->
off£t
 != 0))

1064  
NULL
;

1067 i‡(
	`ˇn_ac˚ss_©_ödex
(
buf„r
, 4Ë&& (
	`°∫cmp
((c⁄° *)
	`buf„r_©_off£t
(buffer), "\xEF\xBB\xBF", 3) == 0))

1069 
buf„r
->
off£t
 += 3;

1072  
buf„r
;

1073 
	}
}

1075 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_P¨£WôhO±s
(c⁄° *
vÆue
, c⁄° **
ªtu∫_∑r£_íd
, 
cJSON_boﬁ
 
ªquúe_nuŒ_ãrmö©ed
)

1077 
size_t
 
buf„r_Àngth
;

1079 i‡(
NULL
 =
vÆue
)

1081  
NULL
;

1085 
buf„r_Àngth
 = 
	`°æí
(
vÆue
) + ("");

1087  
	`cJSON_P¨£WôhLígthO±s
(
vÆue
, 
buf„r_Àngth
, 
ªtu∫_∑r£_íd
, 
ªquúe_nuŒ_ãrmö©ed
);

1088 
	}
}

1091 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_P¨£WôhLígthO±s
(c⁄° *
vÆue
, 
size_t
 
buf„r_Àngth
, c⁄° **
ªtu∫_∑r£_íd
, 
cJSON_boﬁ
 
ªquúe_nuŒ_ãrmö©ed
)

1093 
∑r£_buf„r
 
buf„r
 = { 0, 0, 0, 0, { 0, 0, 0 } };

1094 
cJSON
 *
ôem
 = 
NULL
;

1097 
globÆ_îr‹
.
js⁄
 = 
NULL
;

1098 
globÆ_îr‹
.
posôi⁄
 = 0;

1100 i‡(
vÆue
 =
NULL
 || 0 =
buf„r_Àngth
)

1102 
Áû
;

1105 
buf„r
.
c⁄ã¡
 = (c⁄° *)
vÆue
;

1106 
buf„r
.
Àngth
 = 
buf„r_Àngth
;

1107 
buf„r
.
off£t
 = 0;

1108 
buf„r
.
hooks
 = 
globÆ_hooks
;

1110 
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

1111 i‡(
ôem
 =
NULL
)

1113 
Áû
;

1116 i‡(!
	`∑r£_vÆue
(
ôem
, 
	`buf„r_skù_whôe•a˚
(
	`skù_utf8_bom
(&
buf„r
))))

1119 
Áû
;

1123 i‡(
ªquúe_nuŒ_ãrmö©ed
)

1125 
	`buf„r_skù_whôe•a˚
(&
buf„r
);

1126 i‡((
buf„r
.
off£t
 >buf„r.
Àngth
Ë|| 
	`buf„r_©_off£t
(&buffer)[0] != '\0')

1128 
Áû
;

1131 i‡(
ªtu∫_∑r£_íd
)

1133 *
ªtu∫_∑r£_íd
 = (c⁄° *)
	`buf„r_©_off£t
(&
buf„r
);

1136  
ôem
;

1138 
Áû
:

1139 i‡(
ôem
 !
NULL
)

1141 
	`cJSON_Dñëe
(
ôem
);

1144 i‡(
vÆue
 !
NULL
)

1146 
îr‹
 
loˇl_îr‹
;

1147 
loˇl_îr‹
.
js⁄
 = (c⁄° *)
vÆue
;

1148 
loˇl_îr‹
.
posôi⁄
 = 0;

1150 i‡(
buf„r
.
off£t
 < buf„r.
Àngth
)

1152 
loˇl_îr‹
.
posôi⁄
 = 
buf„r
.
off£t
;

1154 i‡(
buf„r
.
Àngth
 > 0)

1156 
loˇl_îr‹
.
posôi⁄
 = 
buf„r
.
Àngth
 - 1;

1159 i‡(
ªtu∫_∑r£_íd
 !
NULL
)

1161 *
ªtu∫_∑r£_íd
 = (c⁄° *)
loˇl_îr‹
.
js⁄
 +Üoˇl_îr‹.
posôi⁄
;

1164 
globÆ_îr‹
 = 
loˇl_îr‹
;

1167  
NULL
;

1168 
	}
}

1171 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_P¨£
(c⁄° *
vÆue
)

1173  
	`cJSON_P¨£WôhO±s
(
vÆue
, 0, 0);

1174 
	}
}

1176 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_P¨£WôhLígth
(c⁄° *
vÆue
, 
size_t
 
buf„r_Àngth
)

1178  
	`cJSON_P¨£WôhLígthO±s
(
vÆue
, 
buf„r_Àngth
, 0, 0);

1179 
	}
}

1181 
	#cjs⁄_mö
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

1183 *
	$¥öt
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
cJSON_boﬁ
 
f‹m©
, c⁄° 
öã∫Æ_hooks
 * c⁄° 
hooks
)

1185 c⁄° 
size_t
 
deÁu…_buf„r_size
 = 256;

1186 
¥ötbuf„r
 
buf„r
[1];

1187 *
¥öãd
 = 
NULL
;

1189 
	`mem£t
(
buf„r
, 0, (buffer));

1192 
buf„r
->buf„∏(*Ë
hooks
->
	`Æloˇã
(
deÁu…_buf„r_size
);

1193 
buf„r
->
Àngth
 = 
deÁu…_buf„r_size
;

1194 
buf„r
->
f‹m©
 = format;

1195 
buf„r
->
hooks
 = *hooks;

1196 i‡(
buf„r
->buf„∏=
NULL
)

1198 
Áû
;

1202 i‡(!
	`¥öt_vÆue
(
ôem
, 
buf„r
))

1204 
Áû
;

1206 
	`upd©e_off£t
(
buf„r
);

1209 i‡(
hooks
->
ªÆloˇã
 !
NULL
)

1211 
¥öãd
 = (*Ë
hooks
->
	`ªÆloˇã
(
buf„r
->buf„r, buf„r->
off£t
 + 1);

1212 i‡(
¥öãd
 =
NULL
) {

1213 
Áû
;

1215 
buf„r
->buf„∏
NULL
;

1219 
¥öãd
 = (*Ë
hooks
->
	`Æloˇã
(
buf„r
->
off£t
 + 1);

1220 i‡(
¥öãd
 =
NULL
)

1222 
Áû
;

1224 
	`mem˝y
(
¥öãd
, 
buf„r
->buf„r, 
	`cjs⁄_mö
(buf„r->
Àngth
, buf„r->
off£t
 + 1));

1225 
¥öãd
[
buf„r
->
off£t
] = '\0';

1228 
hooks
->
	`dóŒoˇã
(
buf„r
->buffer);

1231  
¥öãd
;

1233 
Áû
:

1234 i‡(
buf„r
->buf„∏!
NULL
)

1236 
hooks
->
	`dóŒoˇã
(
buf„r
->buffer);

1239 i‡(
¥öãd
 !
NULL
)

1241 
hooks
->
	`dóŒoˇã
(
¥öãd
);

1244  
NULL
;

1245 
	}
}

1248 
	$CJSON_PUBLIC
(*Ë
	$cJSON_Pröt
(c⁄° 
cJSON
 *
ôem
)

1250  (*)
	`¥öt
(
ôem
, 
åue
, &
globÆ_hooks
);

1251 
	}
}

1253 
	$CJSON_PUBLIC
(*Ë
	$cJSON_PrötUnf‹m©ãd
(c⁄° 
cJSON
 *
ôem
)

1255  (*)
	`¥öt
(
ôem
, 
Ál£
, &
globÆ_hooks
);

1256 
	}
}

1258 
	$CJSON_PUBLIC
(*Ë
	$cJSON_PrötBuf„ªd
(c⁄° 
cJSON
 *
ôem
, 
¥ebuf„r
, 
cJSON_boﬁ
 
fmt
)

1260 
¥ötbuf„r
 
p
 = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };

1262 i‡(
¥ebuf„r
 < 0)

1264  
NULL
;

1267 
p
.
buf„r
 = (*)
globÆ_hooks
.
	`Æloˇã
((
size_t
)
¥ebuf„r
);

1268 i‡(!
p
.
buf„r
)

1270  
NULL
;

1273 
p
.
Àngth
 = (
size_t
)
¥ebuf„r
;

1274 
p
.
off£t
 = 0;

1275 
p
.
nﬂŒoc
 = 
Ál£
;

1276 
p
.
f‹m©
 = 
fmt
;

1277 
p
.
hooks
 = 
globÆ_hooks
;

1279 i‡(!
	`¥öt_vÆue
(
ôem
, &
p
))

1281 
globÆ_hooks
.
	`dóŒoˇã
(
p
.
buf„r
);

1282  
NULL
;

1285  (*)
p
.
buf„r
;

1286 
	}
}

1288 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_PrötPªÆloˇãd
(
cJSON
 *
ôem
, *
buf„r
, c⁄° 
Àngth
, c⁄° 
cJSON_boﬁ
 
f‹m©
)

1290 
¥ötbuf„r
 
p
 = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };

1292 i‡((
Àngth
 < 0Ë|| (
buf„r
 =
NULL
))

1294  
Ál£
;

1297 
p
.
buf„r
 = (*)buffer;

1298 
p
.
Àngth
 = (
size_t
)length;

1299 
p
.
off£t
 = 0;

1300 
p
.
nﬂŒoc
 = 
åue
;

1301 
p
.
f‹m©
 = format;

1302 
p
.
hooks
 = 
globÆ_hooks
;

1304  
	`¥öt_vÆue
(
ôem
, &
p
);

1305 
	}
}

1308 
cJSON_boﬁ
 
	$∑r£_vÆue
(
cJSON
 * c⁄° 
ôem
, 
∑r£_buf„r
 * c⁄° 
öput_buf„r
)

1310 i‡((
öput_buf„r
 =
NULL
Ë|| (öput_buf„r->
c⁄ã¡
 == NULL))

1312  
Ál£
;

1317 i‡(
	`ˇn_ªad
(
öput_buf„r
, 4Ë&& (
	`°∫cmp
((c⁄° *)
	`buf„r_©_off£t
(input_buffer), "null", 4) == 0))

1319 
ôem
->
ty≥
 = 
cJSON_NULL
;

1320 
öput_buf„r
->
off£t
 += 4;

1321  
åue
;

1324 i‡(
	`ˇn_ªad
(
öput_buf„r
, 5Ë&& (
	`°∫cmp
((c⁄° *)
	`buf„r_©_off£t
(input_buffer), "false", 5) == 0))

1326 
ôem
->
ty≥
 = 
cJSON_FÆ£
;

1327 
öput_buf„r
->
off£t
 += 5;

1328  
åue
;

1331 i‡(
	`ˇn_ªad
(
öput_buf„r
, 4Ë&& (
	`°∫cmp
((c⁄° *)
	`buf„r_©_off£t
(input_buffer), "true", 4) == 0))

1333 
ôem
->
ty≥
 = 
cJSON_True
;

1334 
ôem
->
vÆueöt
 = 1;

1335 
öput_buf„r
->
off£t
 += 4;

1336  
åue
;

1339 i‡(
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë&& (
	`buf„r_©_off£t
(input_buffer)[0] == '\"'))

1341  
	`∑r£_°rög
(
ôem
, 
öput_buf„r
);

1344 i‡(
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë&& ((
	`buf„r_©_off£t
(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))

1346  
	`∑r£_numbî
(
ôem
, 
öput_buf„r
);

1349 i‡(
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë&& (
	`buf„r_©_off£t
(input_buffer)[0] == '['))

1351  
	`∑r£_¨øy
(
ôem
, 
öput_buf„r
);

1354 i‡(
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë&& (
	`buf„r_©_off£t
(input_buffer)[0] == '{'))

1356  
	`∑r£_obje˘
(
ôem
, 
öput_buf„r
);

1359  
Ál£
;

1360 
	}
}

1363 
cJSON_boﬁ
 
	$¥öt_vÆue
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
¥ötbuf„r
 * c⁄° 
ouçut_buf„r
)

1365 *
ouçut
 = 
NULL
;

1367 i‡((
ôem
 =
NULL
Ë|| (
ouçut_buf„r
 == NULL))

1369  
Ál£
;

1372 (
ôem
->
ty≥
) & 0xFF)

1374 
cJSON_NULL
:

1375 
ouçut
 = 
	`ísuª
(
ouçut_buf„r
, 5);

1376 i‡(
ouçut
 =
NULL
)

1378  
Ál£
;

1380 
	`°r˝y
((*)
ouçut
, "null");

1381  
åue
;

1383 
cJSON_FÆ£
:

1384 
ouçut
 = 
	`ísuª
(
ouçut_buf„r
, 6);

1385 i‡(
ouçut
 =
NULL
)

1387  
Ál£
;

1389 
	`°r˝y
((*)
ouçut
, "false");

1390  
åue
;

1392 
cJSON_True
:

1393 
ouçut
 = 
	`ísuª
(
ouçut_buf„r
, 5);

1394 i‡(
ouçut
 =
NULL
)

1396  
Ál£
;

1398 
	`°r˝y
((*)
ouçut
, "true");

1399  
åue
;

1401 
cJSON_Numbî
:

1402  
	`¥öt_numbî
(
ôem
, 
ouçut_buf„r
);

1404 
cJSON_Raw
:

1406 
size_t
 
øw_Àngth
 = 0;

1407 i‡(
ôem
->
vÆue°rög
 =
NULL
)

1409  
Ál£
;

1412 
øw_Àngth
 = 
	`°æí
(
ôem
->
vÆue°rög
) + ("");

1413 
ouçut
 = 
	`ísuª
(
ouçut_buf„r
, 
øw_Àngth
);

1414 i‡(
ouçut
 =
NULL
)

1416  
Ál£
;

1418 
	`mem˝y
(
ouçut
, 
ôem
->
vÆue°rög
, 
øw_Àngth
);

1419  
åue
;

1422 
cJSON_Såög
:

1423  
	`¥öt_°rög
(
ôem
, 
ouçut_buf„r
);

1425 
cJSON_Aºay
:

1426  
	`¥öt_¨øy
(
ôem
, 
ouçut_buf„r
);

1428 
cJSON_Obje˘
:

1429  
	`¥öt_obje˘
(
ôem
, 
ouçut_buf„r
);

1432  
Ál£
;

1434 
	}
}

1437 
cJSON_boﬁ
 
	$∑r£_¨øy
(
cJSON
 * c⁄° 
ôem
, 
∑r£_buf„r
 * c⁄° 
öput_buf„r
)

1439 
cJSON
 *
hód
 = 
NULL
;

1440 
cJSON
 *
cuºít_ôem
 = 
NULL
;

1442 i‡(
öput_buf„r
->
dïth
 >
CJSON_NESTING_LIMIT
)

1444  
Ál£
;

1446 
öput_buf„r
->
dïth
++;

1448 i‡(
	`buf„r_©_off£t
(
öput_buf„r
)[0] != '[')

1451 
Áû
;

1454 
öput_buf„r
->
off£t
++;

1455 
	`buf„r_skù_whôe•a˚
(
öput_buf„r
);

1456 i‡(
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë&& (
	`buf„r_©_off£t
(input_buffer)[0] == ']'))

1459 
suc˚ss
;

1463 i‡(
	`ˇ¬Ÿ_ac˚ss_©_ödex
(
öput_buf„r
, 0))

1465 
öput_buf„r
->
off£t
--;

1466 
Áû
;

1470 
öput_buf„r
->
off£t
--;

1475 
cJSON
 *
√w_ôem
 = 
	`cJSON_New_Iãm
(&(
öput_buf„r
->
hooks
));

1476 i‡(
√w_ôem
 =
NULL
)

1478 
Áû
;

1482 i‡(
hód
 =
NULL
)

1485 
cuºít_ôem
 = 
hód
 = 
√w_ôem
;

1490 
cuºít_ôem
->
√xt
 = 
√w_ôem
;

1491 
√w_ôem
->
¥ev
 = 
cuºít_ôem
;

1492 
cuºít_ôem
 = 
√w_ôem
;

1496 
öput_buf„r
->
off£t
++;

1497 
	`buf„r_skù_whôe•a˚
(
öput_buf„r
);

1498 i‡(!
	`∑r£_vÆue
(
cuºít_ôem
, 
öput_buf„r
))

1500 
Áû
;

1502 
	`buf„r_skù_whôe•a˚
(
öput_buf„r
);

1504 
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë&& (
	`buf„r_©_off£t
(input_buffer)[0] == ','));

1506 i‡(
	`ˇ¬Ÿ_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë|| 
	`buf„r_©_off£t
(input_buffer)[0] != ']')

1508 
Áû
;

1511 
suc˚ss
:

1512 
öput_buf„r
->
dïth
--;

1514 i‡(
hód
 !
NULL
) {

1515 
hód
->
¥ev
 = 
cuºít_ôem
;

1518 
ôem
->
ty≥
 = 
cJSON_Aºay
;

1519 
ôem
->
chûd
 = 
hód
;

1521 
öput_buf„r
->
off£t
++;

1523  
åue
;

1525 
Áû
:

1526 i‡(
hód
 !
NULL
)

1528 
	`cJSON_Dñëe
(
hód
);

1531  
Ál£
;

1532 
	}
}

1535 
cJSON_boﬁ
 
	$¥öt_¨øy
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
¥ötbuf„r
 * c⁄° 
ouçut_buf„r
)

1537 *
ouçut_poöãr
 = 
NULL
;

1538 
size_t
 
Àngth
 = 0;

1539 
cJSON
 *
cuºít_ñemít
 = 
ôem
->
chûd
;

1541 i‡(
ouçut_buf„r
 =
NULL
)

1543  
Ál£
;

1548 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, 1);

1549 i‡(
ouçut_poöãr
 =
NULL
)

1551  
Ál£
;

1554 *
ouçut_poöãr
 = '[';

1555 
ouçut_buf„r
->
off£t
++;

1556 
ouçut_buf„r
->
dïth
++;

1558 
cuºít_ñemít
 !
NULL
)

1560 i‡(!
	`¥öt_vÆue
(
cuºít_ñemít
, 
ouçut_buf„r
))

1562  
Ál£
;

1564 
	`upd©e_off£t
(
ouçut_buf„r
);

1565 i‡(
cuºít_ñemít
->
√xt
)

1567 
Àngth
 = (
size_t
Ë(
ouçut_buf„r
->
f‹m©
 ? 2 : 1);

1568 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, 
Àngth
 + 1);

1569 i‡(
ouçut_poöãr
 =
NULL
)

1571  
Ál£
;

1573 *
ouçut_poöãr
++ = ',';

1574 if(
ouçut_buf„r
->
f‹m©
)

1576 *
ouçut_poöãr
++ = ' ';

1578 *
ouçut_poöãr
 = '\0';

1579 
ouçut_buf„r
->
off£t
 +
Àngth
;

1581 
cuºít_ñemít
 = cuºít_ñemít->
√xt
;

1584 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, 2);

1585 i‡(
ouçut_poöãr
 =
NULL
)

1587  
Ál£
;

1589 *
ouçut_poöãr
++ = ']';

1590 *
ouçut_poöãr
 = '\0';

1591 
ouçut_buf„r
->
dïth
--;

1593  
åue
;

1594 
	}
}

1597 
cJSON_boﬁ
 
	$∑r£_obje˘
(
cJSON
 * c⁄° 
ôem
, 
∑r£_buf„r
 * c⁄° 
öput_buf„r
)

1599 
cJSON
 *
hód
 = 
NULL
;

1600 
cJSON
 *
cuºít_ôem
 = 
NULL
;

1602 i‡(
öput_buf„r
->
dïth
 >
CJSON_NESTING_LIMIT
)

1604  
Ál£
;

1606 
öput_buf„r
->
dïth
++;

1608 i‡(
	`ˇ¬Ÿ_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë|| (
	`buf„r_©_off£t
(input_buffer)[0] != '{'))

1610 
Áû
;

1613 
öput_buf„r
->
off£t
++;

1614 
	`buf„r_skù_whôe•a˚
(
öput_buf„r
);

1615 i‡(
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë&& (
	`buf„r_©_off£t
(input_buffer)[0] == '}'))

1617 
suc˚ss
;

1621 i‡(
	`ˇ¬Ÿ_ac˚ss_©_ödex
(
öput_buf„r
, 0))

1623 
öput_buf„r
->
off£t
--;

1624 
Áû
;

1628 
öput_buf„r
->
off£t
--;

1633 
cJSON
 *
√w_ôem
 = 
	`cJSON_New_Iãm
(&(
öput_buf„r
->
hooks
));

1634 i‡(
√w_ôem
 =
NULL
)

1636 
Áû
;

1640 i‡(
hód
 =
NULL
)

1643 
cuºít_ôem
 = 
hód
 = 
√w_ôem
;

1648 
cuºít_ôem
->
√xt
 = 
√w_ôem
;

1649 
√w_ôem
->
¥ev
 = 
cuºít_ôem
;

1650 
cuºít_ôem
 = 
√w_ôem
;

1654 
öput_buf„r
->
off£t
++;

1655 
	`buf„r_skù_whôe•a˚
(
öput_buf„r
);

1656 i‡(!
	`∑r£_°rög
(
cuºít_ôem
, 
öput_buf„r
))

1658 
Áû
;

1660 
	`buf„r_skù_whôe•a˚
(
öput_buf„r
);

1663 
cuºít_ôem
->
°rög
 = cuºít_ôem->
vÆue°rög
;

1664 
cuºít_ôem
->
vÆue°rög
 = 
NULL
;

1666 i‡(
	`ˇ¬Ÿ_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë|| (
	`buf„r_©_off£t
(input_buffer)[0] != ':'))

1668 
Áû
;

1672 
öput_buf„r
->
off£t
++;

1673 
	`buf„r_skù_whôe•a˚
(
öput_buf„r
);

1674 i‡(!
	`∑r£_vÆue
(
cuºít_ôem
, 
öput_buf„r
))

1676 
Áû
;

1678 
	`buf„r_skù_whôe•a˚
(
öput_buf„r
);

1680 
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë&& (
	`buf„r_©_off£t
(input_buffer)[0] == ','));

1682 i‡(
	`ˇ¬Ÿ_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë|| (
	`buf„r_©_off£t
(input_buffer)[0] != '}'))

1684 
Áû
;

1687 
suc˚ss
:

1688 
öput_buf„r
->
dïth
--;

1690 i‡(
hód
 !
NULL
) {

1691 
hód
->
¥ev
 = 
cuºít_ôem
;

1694 
ôem
->
ty≥
 = 
cJSON_Obje˘
;

1695 
ôem
->
chûd
 = 
hód
;

1697 
öput_buf„r
->
off£t
++;

1698  
åue
;

1700 
Áû
:

1701 i‡(
hód
 !
NULL
)

1703 
	`cJSON_Dñëe
(
hód
);

1706  
Ál£
;

1707 
	}
}

1710 
cJSON_boﬁ
 
	$¥öt_obje˘
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
¥ötbuf„r
 * c⁄° 
ouçut_buf„r
)

1712 *
ouçut_poöãr
 = 
NULL
;

1713 
size_t
 
Àngth
 = 0;

1714 
cJSON
 *
cuºít_ôem
 = 
ôem
->
chûd
;

1716 i‡(
ouçut_buf„r
 =
NULL
)

1718  
Ál£
;

1722 
Àngth
 = (
size_t
Ë(
ouçut_buf„r
->
f‹m©
 ? 2 : 1);

1723 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, 
Àngth
 + 1);

1724 i‡(
ouçut_poöãr
 =
NULL
)

1726  
Ál£
;

1729 *
ouçut_poöãr
++ = '{';

1730 
ouçut_buf„r
->
dïth
++;

1731 i‡(
ouçut_buf„r
->
f‹m©
)

1733 *
ouçut_poöãr
++ = '\n';

1735 
ouçut_buf„r
->
off£t
 +
Àngth
;

1737 
cuºít_ôem
)

1739 i‡(
ouçut_buf„r
->
f‹m©
)

1741 
size_t
 
i
;

1742 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, ouçut_buf„r->
dïth
);

1743 i‡(
ouçut_poöãr
 =
NULL
)

1745  
Ál£
;

1747 
i
 = 0; i < 
ouçut_buf„r
->
dïth
; i++)

1749 *
ouçut_poöãr
++ = '\t';

1751 
ouçut_buf„r
->
off£t
 +ouçut_buf„r->
dïth
;

1755 i‡(!
	`¥öt_°rög_±r
((*)
cuºít_ôem
->
°rög
, 
ouçut_buf„r
))

1757  
Ál£
;

1759 
	`upd©e_off£t
(
ouçut_buf„r
);

1761 
Àngth
 = (
size_t
Ë(
ouçut_buf„r
->
f‹m©
 ? 2 : 1);

1762 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, 
Àngth
);

1763 i‡(
ouçut_poöãr
 =
NULL
)

1765  
Ál£
;

1767 *
ouçut_poöãr
++ = ':';

1768 i‡(
ouçut_buf„r
->
f‹m©
)

1770 *
ouçut_poöãr
++ = '\t';

1772 
ouçut_buf„r
->
off£t
 +
Àngth
;

1775 i‡(!
	`¥öt_vÆue
(
cuºít_ôem
, 
ouçut_buf„r
))

1777  
Ál£
;

1779 
	`upd©e_off£t
(
ouçut_buf„r
);

1782 
Àngth
 = ((
size_t
)(
ouçut_buf„r
->
f‹m©
 ? 1 : 0Ë+ (size_t)(
cuºít_ôem
->
√xt
 ? 1 : 0));

1783 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, 
Àngth
 + 1);

1784 i‡(
ouçut_poöãr
 =
NULL
)

1786  
Ál£
;

1788 i‡(
cuºít_ôem
->
√xt
)

1790 *
ouçut_poöãr
++ = ',';

1793 i‡(
ouçut_buf„r
->
f‹m©
)

1795 *
ouçut_poöãr
++ = '\n';

1797 *
ouçut_poöãr
 = '\0';

1798 
ouçut_buf„r
->
off£t
 +
Àngth
;

1800 
cuºít_ôem
 = cuºít_ôem->
√xt
;

1803 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, ouçut_buf„r->
f‹m©
 ? (ouçut_buf„r->
dïth
 + 1) : 2);

1804 i‡(
ouçut_poöãr
 =
NULL
)

1806  
Ál£
;

1808 i‡(
ouçut_buf„r
->
f‹m©
)

1810 
size_t
 
i
;

1811 
i
 = 0; i < (
ouçut_buf„r
->
dïth
 - 1); i++)

1813 *
ouçut_poöãr
++ = '\t';

1816 *
ouçut_poöãr
++ = '}';

1817 *
ouçut_poöãr
 = '\0';

1818 
ouçut_buf„r
->
dïth
--;

1820  
åue
;

1821 
	}
}

1824 
	$CJSON_PUBLIC
(Ë
	$cJSON_GëAºaySize
(c⁄° 
cJSON
 *
¨øy
)

1826 
cJSON
 *
chûd
 = 
NULL
;

1827 
size_t
 
size
 = 0;

1829 i‡(
¨øy
 =
NULL
)

1834 
chûd
 = 
¨øy
->child;

1836 
chûd
 !
NULL
)

1838 
size
++;

1839 
chûd
 = chûd->
√xt
;

1844  ()
size
;

1845 
	}
}

1847 
cJSON
* 
	$gë_¨øy_ôem
(c⁄° 
cJSON
 *
¨øy
, 
size_t
 
ödex
)

1849 
cJSON
 *
cuºít_chûd
 = 
NULL
;

1851 i‡(
¨øy
 =
NULL
)

1853  
NULL
;

1856 
cuºít_chûd
 = 
¨øy
->
chûd
;

1857 (
cuºít_chûd
 !
NULL
Ë&& (
ödex
 > 0))

1859 
ödex
--;

1860 
cuºít_chûd
 = cuºít_chûd->
√xt
;

1863  
cuºít_chûd
;

1864 
	}
}

1866 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_GëAºayIãm
(c⁄° 
cJSON
 *
¨øy
, 
ödex
)

1868 i‡(
ödex
 < 0)

1870  
NULL
;

1873  
	`gë_¨øy_ôem
(
¨øy
, (
size_t
)
ödex
);

1874 
	}
}

1876 
cJSON
 *
	$gë_obje˘_ôem
(c⁄° 
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

1878 
cJSON
 *
cuºít_ñemít
 = 
NULL
;

1880 i‡((
obje˘
 =
NULL
Ë|| (
«me
 == NULL))

1882  
NULL
;

1885 
cuºít_ñemít
 = 
obje˘
->
chûd
;

1886 i‡(
ˇ£_£nsôive
)

1888 (
cuºít_ñemít
 !
NULL
Ë&& (cuºít_ñemít->
°rög
 !NULLË&& (
	`°rcmp
(
«me
, current_element->string) != 0))

1890 
cuºít_ñemít
 = cuºít_ñemít->
√xt
;

1895 (
cuºít_ñemít
 !
NULL
Ë&& (
	`ˇ£_ö£nsôive_°rcmp
((c⁄° *)
«me
, (c⁄° *)(cuºít_ñemít->
°rög
)) != 0))

1897 
cuºít_ñemít
 = cuºít_ñemít->
√xt
;

1901 i‡((
cuºít_ñemít
 =
NULL
Ë|| (cuºít_ñemít->
°rög
 == NULL)) {

1902  
NULL
;

1905  
cuºít_ñemít
;

1906 
	}
}

1908 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_GëObje˘Iãm
(c⁄° 
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
°rög
)

1910  
	`gë_obje˘_ôem
(
obje˘
, 
°rög
, 
Ál£
);

1911 
	}
}

1913 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_GëObje˘IãmCa£Sísôive
(c⁄° 
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
°rög
)

1915  
	`gë_obje˘_ôem
(
obje˘
, 
°rög
, 
åue
);

1916 
	}
}

1918 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_HasObje˘Iãm
(c⁄° 
cJSON
 *
obje˘
, c⁄° *
°rög
)

1920  
	`cJSON_GëObje˘Iãm
(
obje˘
, 
°rög
) ? 1 : 0;

1921 
	}
}

1924 
	$suffix_obje˘
(
cJSON
 *
¥ev
, cJSON *
ôem
)

1926 
¥ev
->
√xt
 = 
ôem
;

1927 
ôem
->
¥ev
 =Örev;

1928 
	}
}

1931 
cJSON
 *
	$¸óã_ª„ªn˚
(c⁄° 
cJSON
 *
ôem
, c⁄° 
öã∫Æ_hooks
 * c⁄° 
hooks
)

1933 
cJSON
 *
ª„ªn˚
 = 
NULL
;

1934 i‡(
ôem
 =
NULL
)

1936  
NULL
;

1939 
ª„ªn˚
 = 
	`cJSON_New_Iãm
(
hooks
);

1940 i‡(
ª„ªn˚
 =
NULL
)

1942  
NULL
;

1945 
	`mem˝y
(
ª„ªn˚
, 
ôem
, (
cJSON
));

1946 
ª„ªn˚
->
°rög
 = 
NULL
;

1947 
ª„ªn˚
->
ty≥
 |
cJSON_IsRe„ªn˚
;

1948 
ª„ªn˚
->
√xt
 =Ñe„ªn˚->
¥ev
 = 
NULL
;

1949  
ª„ªn˚
;

1950 
	}
}

1952 
cJSON_boﬁ
 
	$add_ôem_to_¨øy
(
cJSON
 *
¨øy
, cJSON *
ôem
)

1954 
cJSON
 *
chûd
 = 
NULL
;

1956 i‡((
ôem
 =
NULL
Ë|| (
¨øy
 == NULL) || (array == item))

1958  
Ál£
;

1961 
chûd
 = 
¨øy
->child;

1965 i‡(
chûd
 =
NULL
)

1968 
¨øy
->
chûd
 = 
ôem
;

1969 
ôem
->
¥ev
 = item;

1970 
ôem
->
√xt
 = 
NULL
;

1975 i‡(
chûd
->
¥ev
)

1977 
	`suffix_obje˘
(
chûd
->
¥ev
, 
ôem
);

1978 
¨øy
->
chûd
->
¥ev
 = 
ôem
;

1982  
åue
;

1983 
	}
}

1986 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
)

1988  
	`add_ôem_to_¨øy
(
¨øy
, 
ôem
);

1989 
	}
}

1991 #i‡
deföed
(
__˛™g__
Ë|| (deföed(
__GNUC__
Ë&& ((__GNUC__ > 4Ë|| ((__GNUC__ =4Ë&& (
__GNUC_MINOR__
 > 5))))

1992 #¥agm®
GCC
 
dügno°ic
 
push


1994 #ifde‡
__GNUC__


1995 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wcast-qual"

1998 * 
	$ˇ°_away_c⁄°
(c⁄° * 
°rög
)

2000  (*)
°rög
;

2001 
	}
}

2002 #i‡
deföed
(
__˛™g__
Ë|| (deföed(
__GNUC__
Ë&& ((__GNUC__ > 4Ë|| ((__GNUC__ =4Ë&& (
__GNUC_MINOR__
 > 5))))

2003 #¥agm®
GCC
 
dügno°ic
 
p›


2007 
cJSON_boﬁ
 
	$add_ôem_to_obje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
°rög
, cJSON * c⁄° 
ôem
, c⁄° 
öã∫Æ_hooks
 * c⁄° 
hooks
, c⁄° 
cJSON_boﬁ
 
c⁄°™t_key
)

2009 *
√w_key
 = 
NULL
;

2010 
√w_ty≥
 = 
cJSON_InvÆid
;

2012 i‡((
obje˘
 =
NULL
Ë|| (
°rög
 =NULLË|| (
ôem
 == NULL) || (object == item))

2014  
Ál£
;

2017 i‡(
c⁄°™t_key
)

2019 
√w_key
 = (*)
	`ˇ°_away_c⁄°
(
°rög
);

2020 
√w_ty≥
 = 
ôem
->
ty≥
 | 
cJSON_SåögIsC⁄°
;

2024 
√w_key
 = (*)
	`cJSON_°rdup
((c⁄° *)
°rög
, 
hooks
);

2025 i‡(
√w_key
 =
NULL
)

2027  
Ál£
;

2030 
√w_ty≥
 = 
ôem
->
ty≥
 & ~
cJSON_SåögIsC⁄°
;

2033 i‡(!(
ôem
->
ty≥
 & 
cJSON_SåögIsC⁄°
Ë&& (ôem->
°rög
 !
NULL
))

2035 
hooks
->
	`dóŒoˇã
(
ôem
->
°rög
);

2038 
ôem
->
°rög
 = 
√w_key
;

2039 
ôem
->
ty≥
 = 
√w_ty≥
;

2041  
	`add_ôem_to_¨øy
(
obje˘
, 
ôem
);

2042 
	}
}

2044 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
)

2046  
	`add_ôem_to_obje˘
(
obje˘
, 
°rög
, 
ôem
, &
globÆ_hooks
, 
Ál£
);

2047 
	}
}

2050 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_AddIãmToObje˘CS
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
)

2052  
	`add_ôem_to_obje˘
(
obje˘
, 
°rög
, 
ôem
, &
globÆ_hooks
, 
åue
);

2053 
	}
}

2055 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
)

2057 i‡(
¨øy
 =
NULL
)

2059  
Ál£
;

2062  
	`add_ôem_to_¨øy
(
¨øy
, 
	`¸óã_ª„ªn˚
(
ôem
, &
globÆ_hooks
));

2063 
	}
}

2065 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
)

2067 i‡((
obje˘
 =
NULL
Ë|| (
°rög
 == NULL))

2069  
Ál£
;

2072  
	`add_ôem_to_obje˘
(
obje˘
, 
°rög
, 
	`¸óã_ª„ªn˚
(
ôem
, &
globÆ_hooks
), &globÆ_hooks, 
Ál£
);

2073 
	}
}

2075 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddNuŒToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
)

2077 
cJSON
 *
nuŒ
 = 
	`cJSON_Cª©eNuŒ
();

2078 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
nuŒ
, &
globÆ_hooks
, 
Ál£
))

2080  
nuŒ
;

2083 
	`cJSON_Dñëe
(
nuŒ
);

2084  
NULL
;

2085 
	}
}

2087 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddTrueToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
)

2089 
cJSON
 *
åue_ôem
 = 
	`cJSON_Cª©eTrue
();

2090 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
åue_ôem
, &
globÆ_hooks
, 
Ál£
))

2092  
åue_ôem
;

2095 
	`cJSON_Dñëe
(
åue_ôem
);

2096  
NULL
;

2097 
	}
}

2099 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddFÆ£ToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
)

2101 
cJSON
 *
Ál£_ôem
 = 
	`cJSON_Cª©eFÆ£
();

2102 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
Ál£_ôem
, &
globÆ_hooks
, 
Ál£
))

2104  
Ál£_ôem
;

2107 
	`cJSON_Dñëe
(
Ál£_ôem
);

2108  
NULL
;

2109 
	}
}

2111 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddBoﬁToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° 
cJSON_boﬁ
 
boﬁón
)

2113 
cJSON
 *
boﬁ_ôem
 = 
	`cJSON_Cª©eBoﬁ
(
boﬁón
);

2114 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
boﬁ_ôem
, &
globÆ_hooks
, 
Ál£
))

2116  
boﬁ_ôem
;

2119 
	`cJSON_Dñëe
(
boﬁ_ôem
);

2120  
NULL
;

2121 
	}
}

2123 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddNumbîToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° 
numbî
)

2125 
cJSON
 *
numbî_ôem
 = 
	`cJSON_Cª©eNumbî
(
numbî
);

2126 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
numbî_ôem
, &
globÆ_hooks
, 
Ál£
))

2128  
numbî_ôem
;

2131 
	`cJSON_Dñëe
(
numbî_ôem
);

2132  
NULL
;

2133 
	}
}

2135 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddSåögToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° * c⁄° 
°rög
)

2137 
cJSON
 *
°rög_ôem
 = 
	`cJSON_Cª©eSåög
(
°rög
);

2138 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
°rög_ôem
, &
globÆ_hooks
, 
Ál£
))

2140  
°rög_ôem
;

2143 
	`cJSON_Dñëe
(
°rög_ôem
);

2144  
NULL
;

2145 
	}
}

2147 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddRawToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° * c⁄° 
øw
)

2149 
cJSON
 *
øw_ôem
 = 
	`cJSON_Cª©eRaw
(
øw
);

2150 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
øw_ôem
, &
globÆ_hooks
, 
Ál£
))

2152  
øw_ôem
;

2155 
	`cJSON_Dñëe
(
øw_ôem
);

2156  
NULL
;

2157 
	}
}

2159 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddObje˘ToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
)

2161 
cJSON
 *
obje˘_ôem
 = 
	`cJSON_Cª©eObje˘
();

2162 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
obje˘_ôem
, &
globÆ_hooks
, 
Ál£
))

2164  
obje˘_ôem
;

2167 
	`cJSON_Dñëe
(
obje˘_ôem
);

2168  
NULL
;

2169 
	}
}

2171 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddAºayToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
)

2173 
cJSON
 *
¨øy
 = 
	`cJSON_Cª©eAºay
();

2174 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
¨øy
, &
globÆ_hooks
, 
Ál£
))

2176  
¨øy
;

2179 
	`cJSON_Dñëe
(
¨øy
);

2180  
NULL
;

2181 
	}
}

2183 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_DëachIãmVüPoöãr
(
cJSON
 *
∑ª¡
, cJSON * c⁄° 
ôem
)

2185 i‡((
∑ª¡
 =
NULL
Ë|| (
ôem
 == NULL))

2187  
NULL
;

2190 i‡(
ôem
 !
∑ª¡
->
chûd
)

2193 
ôem
->
¥ev
->
√xt
 = item->next;

2195 i‡(
ôem
->
√xt
 !
NULL
)

2198 
ôem
->
√xt
->
¥ev
 = item->prev;

2201 i‡(
ôem
 =
∑ª¡
->
chûd
)

2204 
∑ª¡
->
chûd
 = 
ôem
->
√xt
;

2206 i‡(
ôem
->
√xt
 =
NULL
)

2209 
∑ª¡
->
chûd
->
¥ev
 = 
ôem
->prev;

2213 
ôem
->
¥ev
 = 
NULL
;

2214 
ôem
->
√xt
 = 
NULL
;

2216  
ôem
;

2217 
	}
}

2219 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_DëachIãmFromAºay
(
cJSON
 *
¨øy
, 
which
)

2221 i‡(
which
 < 0)

2223  
NULL
;

2226  
	`cJSON_DëachIãmVüPoöãr
(
¨øy
, 
	`gë_¨øy_ôem
◊ºay, (
size_t
)
which
));

2227 
	}
}

2229 
	$CJSON_PUBLIC
(Ë
	$cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
, 
which
)

2231 
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromAºay
(
¨øy
, 
which
));

2232 
	}
}

2234 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_DëachIãmFromObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
)

2236 
cJSON
 *
to_dëach
 = 
	`cJSON_GëObje˘Iãm
(
obje˘
, 
°rög
);

2238  
	`cJSON_DëachIãmVüPoöãr
(
obje˘
, 
to_dëach
);

2239 
	}
}

2241 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_DëachIãmFromObje˘Ca£Sísôive
(
cJSON
 *
obje˘
, c⁄° *
°rög
)

2243 
cJSON
 *
to_dëach
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
obje˘
, 
°rög
);

2245  
	`cJSON_DëachIãmVüPoöãr
(
obje˘
, 
to_dëach
);

2246 
	}
}

2248 
	$CJSON_PUBLIC
(Ë
	$cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
)

2250 
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromObje˘
(
obje˘
, 
°rög
));

2251 
	}
}

2253 
	$CJSON_PUBLIC
(Ë
	$cJSON_DñëeIãmFromObje˘Ca£Sísôive
(
cJSON
 *
obje˘
, c⁄° *
°rög
)

2255 
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromObje˘Ca£Sísôive
(
obje˘
, 
°rög
));

2256 
	}
}

2259 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_In£πIãmInAºay
(
cJSON
 *
¨øy
, 
which
, cJSON *
√wôem
)

2261 
cJSON
 *
a·î_ö£πed
 = 
NULL
;

2263 i‡(
which
 < 0)

2265  
Ál£
;

2268 
a·î_ö£πed
 = 
	`gë_¨øy_ôem
(
¨øy
, (
size_t
)
which
);

2269 i‡(
a·î_ö£πed
 =
NULL
)

2271  
	`add_ôem_to_¨øy
(
¨øy
, 
√wôem
);

2274 
√wôem
->
√xt
 = 
a·î_ö£πed
;

2275 
√wôem
->
¥ev
 = 
a·î_ö£πed
->prev;

2276 
a·î_ö£πed
->
¥ev
 = 
√wôem
;

2277 i‡(
a·î_ö£πed
 =
¨øy
->
chûd
)

2279 
¨øy
->
chûd
 = 
√wôem
;

2283 
√wôem
->
¥ev
->
√xt
 =Çewitem;

2285  
åue
;

2286 
	}
}

2288 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_Rïœ˚IãmVüPoöãr
(
cJSON
 * c⁄° 
∑ª¡
, cJSON * c⁄° 
ôem
, cJSON * 
ª∂a˚mít
)

2290 i‡((
∑ª¡
 =
NULL
Ë|| (
ª∂a˚mít
 =NULLË|| (
ôem
 == NULL))

2292  
Ál£
;

2295 i‡(
ª∂a˚mít
 =
ôem
)

2297  
åue
;

2300 
ª∂a˚mít
->
√xt
 = 
ôem
->next;

2301 
ª∂a˚mít
->
¥ev
 = 
ôem
->prev;

2303 i‡(
ª∂a˚mít
->
√xt
 !
NULL
)

2305 
ª∂a˚mít
->
√xt
->
¥ev
 =Ñeplacement;

2307 i‡(
∑ª¡
->
chûd
 =
ôem
)

2309 i‡(
∑ª¡
->
chûd
->
¥ev
 ==Öarent->child)

2311 
ª∂a˚mít
->
¥ev
 =Ñeplacement;

2313 
∑ª¡
->
chûd
 = 
ª∂a˚mít
;

2320 i‡(
ª∂a˚mít
->
¥ev
 !
NULL
)

2322 
ª∂a˚mít
->
¥ev
->
√xt
 =Ñeplacement;

2324 i‡(
ª∂a˚mít
->
√xt
 =
NULL
)

2326 
∑ª¡
->
chûd
->
¥ev
 = 
ª∂a˚mít
;

2330 
ôem
->
√xt
 = 
NULL
;

2331 
ôem
->
¥ev
 = 
NULL
;

2332 
	`cJSON_Dñëe
(
ôem
);

2334  
åue
;

2335 
	}
}

2337 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
, 
which
, cJSON *
√wôem
)

2339 i‡(
which
 < 0)

2341  
Ál£
;

2344  
	`cJSON_Rïœ˚IãmVüPoöãr
(
¨øy
, 
	`gë_¨øy_ôem
◊ºay, (
size_t
)
which
), 
√wôem
);

2345 
	}
}

2347 
cJSON_boﬁ
 
	$ª∂a˚_ôem_ö_obje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ª∂a˚mít
, 
cJSON_boﬁ
 
ˇ£_£nsôive
)

2349 i‡((
ª∂a˚mít
 =
NULL
Ë|| (
°rög
 == NULL))

2351  
Ál£
;

2355 i‡(!(
ª∂a˚mít
->
ty≥
 & 
cJSON_SåögIsC⁄°
Ë&& (ª∂a˚mít->
°rög
 !
NULL
))

2357 
	`cJSON_‰ì
(
ª∂a˚mít
->
°rög
);

2359 
ª∂a˚mít
->
°rög
 = (*)
	`cJSON_°rdup
((c⁄° *)°rög, &
globÆ_hooks
);

2360 
ª∂a˚mít
->
ty≥
 &~
cJSON_SåögIsC⁄°
;

2362  
	`cJSON_Rïœ˚IãmVüPoöãr
(
obje˘
, 
	`gë_obje˘_ôem
(obje˘, 
°rög
, 
ˇ£_£nsôive
), 
ª∂a˚mít
);

2363 
	}
}

2365 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
√wôem
)

2367  
	`ª∂a˚_ôem_ö_obje˘
(
obje˘
, 
°rög
, 
√wôem
, 
Ál£
);

2368 
	}
}

2370 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_Rïœ˚IãmInObje˘Ca£Sísôive
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
√wôem
)

2372  
	`ª∂a˚_ôem_ö_obje˘
(
obje˘
, 
°rög
, 
√wôem
, 
åue
);

2373 
	}
}

2376 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eNuŒ
()

2378 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2379 if(
ôem
)

2381 
ôem
->
ty≥
 = 
cJSON_NULL
;

2384  
ôem
;

2385 
	}
}

2387 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eTrue
()

2389 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2390 if(
ôem
)

2392 
ôem
->
ty≥
 = 
cJSON_True
;

2395  
ôem
;

2396 
	}
}

2398 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eFÆ£
()

2400 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2401 if(
ôem
)

2403 
ôem
->
ty≥
 = 
cJSON_FÆ£
;

2406  
ôem
;

2407 
	}
}

2409 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eBoﬁ
(
cJSON_boﬁ
 
boﬁón
)

2411 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2412 if(
ôem
)

2414 
ôem
->
ty≥
 = 
boﬁón
 ? 
cJSON_True
 : 
cJSON_FÆ£
;

2417  
ôem
;

2418 
	}
}

2420 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eNumbî
(
num
)

2422 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2423 if(
ôem
)

2425 
ôem
->
ty≥
 = 
cJSON_Numbî
;

2426 
ôem
->
vÆuedoubÀ
 = 
num
;

2429 i‡(
num
 >
INT_MAX
)

2431 
ôem
->
vÆueöt
 = 
INT_MAX
;

2433 i‡(
num
 <()
INT_MIN
)

2435 
ôem
->
vÆueöt
 = 
INT_MIN
;

2439 
ôem
->
vÆueöt
 = ()
num
;

2443  
ôem
;

2444 
	}
}

2446 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eSåög
(c⁄° *
°rög
)

2448 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2449 if(
ôem
)

2451 
ôem
->
ty≥
 = 
cJSON_Såög
;

2452 
ôem
->
vÆue°rög
 = (*)
	`cJSON_°rdup
((c⁄° *)
°rög
, &
globÆ_hooks
);

2453 if(!
ôem
->
vÆue°rög
)

2455 
	`cJSON_Dñëe
(
ôem
);

2456  
NULL
;

2460  
ôem
;

2461 
	}
}

2463 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eSåögRe„ªn˚
(c⁄° *
°rög
)

2465 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2466 i‡(
ôem
 !
NULL
)

2468 
ôem
->
ty≥
 = 
cJSON_Såög
 | 
cJSON_IsRe„ªn˚
;

2469 
ôem
->
vÆue°rög
 = (*)
	`ˇ°_away_c⁄°
(
°rög
);

2472  
ôem
;

2473 
	}
}

2475 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eObje˘Re„ªn˚
(c⁄° 
cJSON
 *
chûd
)

2477 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2478 i‡(
ôem
 !
NULL
) {

2479 
ôem
->
ty≥
 = 
cJSON_Obje˘
 | 
cJSON_IsRe„ªn˚
;

2480 
ôem
->
chûd
 = (
cJSON
*)
	`ˇ°_away_c⁄°
(child);

2483  
ôem
;

2484 
	}
}

2486 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eAºayRe„ªn˚
(c⁄° 
cJSON
 *
chûd
) {

2487 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2488 i‡(
ôem
 !
NULL
) {

2489 
ôem
->
ty≥
 = 
cJSON_Aºay
 | 
cJSON_IsRe„ªn˚
;

2490 
ôem
->
chûd
 = (
cJSON
*)
	`ˇ°_away_c⁄°
(child);

2493  
ôem
;

2494 
	}
}

2496 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eRaw
(c⁄° *
øw
)

2498 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2499 if(
ôem
)

2501 
ôem
->
ty≥
 = 
cJSON_Raw
;

2502 
ôem
->
vÆue°rög
 = (*)
	`cJSON_°rdup
((c⁄° *)
øw
, &
globÆ_hooks
);

2503 if(!
ôem
->
vÆue°rög
)

2505 
	`cJSON_Dñëe
(
ôem
);

2506  
NULL
;

2510  
ôem
;

2511 
	}
}

2513 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eAºay
()

2515 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2516 if(
ôem
)

2518 
ôem
->
ty≥
=
cJSON_Aºay
;

2521  
ôem
;

2522 
	}
}

2524 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eObje˘
()

2526 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2527 i‡(
ôem
)

2529 
ôem
->
ty≥
 = 
cJSON_Obje˘
;

2532  
ôem
;

2533 
	}
}

2536 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
, 
cou¡
)

2538 
size_t
 
i
 = 0;

2539 
cJSON
 *
n
 = 
NULL
;

2540 
cJSON
 *
p
 = 
NULL
;

2541 
cJSON
 *
a
 = 
NULL
;

2543 i‡((
cou¡
 < 0Ë|| (
numbîs
 =
NULL
))

2545  
NULL
;

2548 
a
 = 
	`cJSON_Cª©eAºay
();

2550 
i
 = 0; 
a
 && (ò< (
size_t
)
cou¡
); i++)

2552 
n
 = 
	`cJSON_Cª©eNumbî
(
numbîs
[
i
]);

2553 i‡(!
n
)

2555 
	`cJSON_Dñëe
(
a
);

2556  
NULL
;

2558 if(!
i
)

2560 
a
->
chûd
 = 
n
;

2564 
	`suffix_obje˘
(
p
, 
n
);

2566 
p
 = 
n
;

2569 i‡(
a
 &&á->
chûd
) {

2570 
a
->
chûd
->
¥ev
 = 
n
;

2573  
a
;

2574 
	}
}

2576 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
, 
cou¡
)

2578 
size_t
 
i
 = 0;

2579 
cJSON
 *
n
 = 
NULL
;

2580 
cJSON
 *
p
 = 
NULL
;

2581 
cJSON
 *
a
 = 
NULL
;

2583 i‡((
cou¡
 < 0Ë|| (
numbîs
 =
NULL
))

2585  
NULL
;

2588 
a
 = 
	`cJSON_Cª©eAºay
();

2590 
i
 = 0; 
a
 && (ò< (
size_t
)
cou¡
); i++)

2592 
n
 = 
	`cJSON_Cª©eNumbî
(()
numbîs
[
i
]);

2593 if(!
n
)

2595 
	`cJSON_Dñëe
(
a
);

2596  
NULL
;

2598 if(!
i
)

2600 
a
->
chûd
 = 
n
;

2604 
	`suffix_obje˘
(
p
, 
n
);

2606 
p
 = 
n
;

2609 i‡(
a
 &&á->
chûd
) {

2610 
a
->
chûd
->
¥ev
 = 
n
;

2613  
a
;

2614 
	}
}

2616 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
, 
cou¡
)

2618 
size_t
 
i
 = 0;

2619 
cJSON
 *
n
 = 
NULL
;

2620 
cJSON
 *
p
 = 
NULL
;

2621 
cJSON
 *
a
 = 
NULL
;

2623 i‡((
cou¡
 < 0Ë|| (
numbîs
 =
NULL
))

2625  
NULL
;

2628 
a
 = 
	`cJSON_Cª©eAºay
();

2630 
i
 = 0; 
a
 && (ò< (
size_t
)
cou¡
); i++)

2632 
n
 = 
	`cJSON_Cª©eNumbî
(
numbîs
[
i
]);

2633 if(!
n
)

2635 
	`cJSON_Dñëe
(
a
);

2636  
NULL
;

2638 if(!
i
)

2640 
a
->
chûd
 = 
n
;

2644 
	`suffix_obje˘
(
p
, 
n
);

2646 
p
 = 
n
;

2649 i‡(
a
 &&á->
chûd
) {

2650 
a
->
chûd
->
¥ev
 = 
n
;

2653  
a
;

2654 
	}
}

2656 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eSåögAºay
(c⁄° *c⁄° *
°rögs
, 
cou¡
)

2658 
size_t
 
i
 = 0;

2659 
cJSON
 *
n
 = 
NULL
;

2660 
cJSON
 *
p
 = 
NULL
;

2661 
cJSON
 *
a
 = 
NULL
;

2663 i‡((
cou¡
 < 0Ë|| (
°rögs
 =
NULL
))

2665  
NULL
;

2668 
a
 = 
	`cJSON_Cª©eAºay
();

2670 
i
 = 0; 
a
 && (ò< (
size_t
)
cou¡
); i++)

2672 
n
 = 
	`cJSON_Cª©eSåög
(
°rögs
[
i
]);

2673 if(!
n
)

2675 
	`cJSON_Dñëe
(
a
);

2676  
NULL
;

2678 if(!
i
)

2680 
a
->
chûd
 = 
n
;

2684 
	`suffix_obje˘
(
p
,
n
);

2686 
p
 = 
n
;

2689 i‡(
a
 &&á->
chûd
) {

2690 
a
->
chûd
->
¥ev
 = 
n
;

2693  
a
;

2694 
	}
}

2697 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Du∂iˇã
(c⁄° 
cJSON
 *
ôem
, 
cJSON_boﬁ
 
ªcur£
)

2699 
cJSON
 *
√wôem
 = 
NULL
;

2700 
cJSON
 *
chûd
 = 
NULL
;

2701 
cJSON
 *
√xt
 = 
NULL
;

2702 
cJSON
 *
√wchûd
 = 
NULL
;

2705 i‡(!
ôem
)

2707 
Áû
;

2710 
√wôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2711 i‡(!
√wôem
)

2713 
Áû
;

2716 
√wôem
->
ty≥
 = 
ôem
->ty≥ & (~
cJSON_IsRe„ªn˚
);

2717 
√wôem
->
vÆueöt
 = 
ôem
->valueint;

2718 
√wôem
->
vÆuedoubÀ
 = 
ôem
->valuedouble;

2719 i‡(
ôem
->
vÆue°rög
)

2721 
√wôem
->
vÆue°rög
 = (*)
	`cJSON_°rdup
((*)
ôem
->vÆue°rög, &
globÆ_hooks
);

2722 i‡(!
√wôem
->
vÆue°rög
)

2724 
Áû
;

2727 i‡(
ôem
->
°rög
)

2729 
√wôem
->
°rög
 = (
ôem
->
ty≥
&
cJSON_SåögIsC⁄°
Ë? iãm->°rög : (*)
	`cJSON_°rdup
((*)ôem->°rög, &
globÆ_hooks
);

2730 i‡(!
√wôem
->
°rög
)

2732 
Áû
;

2736 i‡(!
ªcur£
)

2738  
√wôem
;

2741 
chûd
 = 
ôem
->child;

2742 
chûd
 !
NULL
)

2744 
√wchûd
 = 
	`cJSON_Du∂iˇã
(
chûd
, 
åue
);

2745 i‡(!
√wchûd
)

2747 
Áû
;

2749 i‡(
√xt
 !
NULL
)

2752 
√xt
->√xà
√wchûd
;

2753 
√wchûd
->
¥ev
 = 
√xt
;

2754 
√xt
 = 
√wchûd
;

2759 
√wôem
->
chûd
 = 
√wchûd
;

2760 
√xt
 = 
√wchûd
;

2762 
chûd
 = chûd->
√xt
;

2764 i‡(
√wôem
 &&Çewôem->
chûd
)

2766 
√wôem
->
chûd
->
¥ev
 = 
√wchûd
;

2769  
√wôem
;

2771 
Áû
:

2772 i‡(
√wôem
 !
NULL
)

2774 
	`cJSON_Dñëe
(
√wôem
);

2777  
NULL
;

2778 
	}
}

2780 
	$skù_⁄ñöe_commít
(**
öput
)

2782 *
öput
 +
	`°©ic_°æí
("//");

2784 ; (*
öput
)[0] != '\0'; ++(*input))

2786 i‡((*
öput
)[0] == '\n') {

2787 *
öput
 +
	`°©ic_°æí
("\n");

2791 
	}
}

2793 
	$skù_mu…ûöe_commít
(**
öput
)

2795 *
öput
 +
	`°©ic_°æí
("/*");

2797 ; (*
öput
)[0] != '\0'; ++(*input))

2799 i‡(((*
öput
)[0] == '*') && ((*input)[1] == '/'))

2801 *
öput
 +
	`°©ic_°æí
("*/");

2805 
	}
}

2807 
	$möify_°rög
(**
öput
, **
ouçut
) {

2808 (*
ouçut
)[0] = (*
öput
)[0];

2809 *
öput
 +
	`°©ic_°æí
("\"");

2810 *
ouçut
 +
	`°©ic_°æí
("\"");

2813 ; (*
öput
)[0] !'\0'; ()++(*öput), ++(*
ouçut
)) {

2814 (*
ouçut
)[0] = (*
öput
)[0];

2816 i‡((*
öput
)[0] == '\"') {

2817 (*
ouçut
)[0] = '\"';

2818 *
öput
 +
	`°©ic_°æí
("\"");

2819 *
ouçut
 +
	`°©ic_°æí
("\"");

2821 } i‡(((*
öput
)[0] == '\\') && ((*input)[1] == '\"')) {

2822 (*
ouçut
)[1] = (*
öput
)[1];

2823 *
öput
 +
	`°©ic_°æí
("\"");

2824 *
ouçut
 +
	`°©ic_°æí
("\"");

2827 
	}
}

2829 
	$CJSON_PUBLIC
(Ë
	$cJSON_Möify
(*
js⁄
)

2831 *
öto
 = 
js⁄
;

2833 i‡(
js⁄
 =
NULL
)

2838 
js⁄
[0] != '\0')

2840 
js⁄
[0])

2846 
js⁄
++;

2850 i‡(
js⁄
[1] == '/')

2852 
	`skù_⁄ñöe_commít
(&
js⁄
);

2854 i‡(
js⁄
[1] == '*')

2856 
	`skù_mu…ûöe_commít
(&
js⁄
);

2858 
js⁄
++;

2863 
	`möify_°rög
(&
js⁄
, (**)&
öto
);

2867 
öto
[0] = 
js⁄
[0];

2868 
js⁄
++;

2869 
öto
++;

2874 *
öto
 = '\0';

2875 
	}
}

2877 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsInvÆid
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2879 i‡(
ôem
 =
NULL
)

2881  
Ál£
;

2884  (
ôem
->
ty≥
 & 0xFFË=
cJSON_InvÆid
;

2885 
	}
}

2887 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsFÆ£
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2889 i‡(
ôem
 =
NULL
)

2891  
Ál£
;

2894  (
ôem
->
ty≥
 & 0xFFË=
cJSON_FÆ£
;

2895 
	}
}

2897 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsTrue
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2899 i‡(
ôem
 =
NULL
)

2901  
Ál£
;

2904  (
ôem
->
ty≥
 & 0xffË=
cJSON_True
;

2905 
	}
}

2908 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsBoﬁ
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2910 i‡(
ôem
 =
NULL
)

2912  
Ál£
;

2915  (
ôem
->
ty≥
 & (
cJSON_True
 | 
cJSON_FÆ£
)) != 0;

2916 
	}
}

2917 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsNuŒ
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2919 i‡(
ôem
 =
NULL
)

2921  
Ál£
;

2924  (
ôem
->
ty≥
 & 0xFFË=
cJSON_NULL
;

2925 
	}
}

2927 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsNumbî
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2929 i‡(
ôem
 =
NULL
)

2931  
Ál£
;

2934  (
ôem
->
ty≥
 & 0xFFË=
cJSON_Numbî
;

2935 
	}
}

2937 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsSåög
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2939 i‡(
ôem
 =
NULL
)

2941  
Ál£
;

2944  (
ôem
->
ty≥
 & 0xFFË=
cJSON_Såög
;

2945 
	}
}

2947 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsAºay
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2949 i‡(
ôem
 =
NULL
)

2951  
Ál£
;

2954  (
ôem
->
ty≥
 & 0xFFË=
cJSON_Aºay
;

2955 
	}
}

2957 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsObje˘
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2959 i‡(
ôem
 =
NULL
)

2961  
Ál£
;

2964  (
ôem
->
ty≥
 & 0xFFË=
cJSON_Obje˘
;

2965 
	}
}

2967 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsRaw
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2969 i‡(
ôem
 =
NULL
)

2971  
Ál£
;

2974  (
ôem
->
ty≥
 & 0xFFË=
cJSON_Raw
;

2975 
	}
}

2977 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_Com∑ª
(c⁄° 
cJSON
 * c⁄° 
a
, c⁄° cJSON * c⁄° 
b
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

2979 i‡((
a
 =
NULL
Ë|| (
b
 =NULLË|| (◊->
ty≥
 & 0xFF) != (b->type & 0xFF)))

2981  
Ál£
;

2985 
a
->
ty≥
 & 0xFF)

2987 
cJSON_FÆ£
:

2988 
cJSON_True
:

2989 
cJSON_NULL
:

2990 
cJSON_Numbî
:

2991 
cJSON_Såög
:

2992 
cJSON_Raw
:

2993 
cJSON_Aºay
:

2994 
cJSON_Obje˘
:

2998  
Ál£
;

3002 i‡(
a
 =
b
)

3004  
åue
;

3007 
a
->
ty≥
 & 0xFF)

3010 
cJSON_FÆ£
:

3011 
cJSON_True
:

3012 
cJSON_NULL
:

3013  
åue
;

3015 
cJSON_Numbî
:

3016 i‡(
	`com∑ª_doubÀ
(
a
->
vÆuedoubÀ
, 
b
->valuedouble))

3018  
åue
;

3020  
Ál£
;

3022 
cJSON_Såög
:

3023 
cJSON_Raw
:

3024 i‡((
a
->
vÆue°rög
 =
NULL
Ë|| (
b
->valuestring == NULL))

3026  
Ál£
;

3028 i‡(
	`°rcmp
(
a
->
vÆue°rög
, 
b
->valuestring) == 0)

3030  
åue
;

3033  
Ál£
;

3035 
cJSON_Aºay
:

3037 
cJSON
 *
a_ñemít
 = 
a
->
chûd
;

3038 
cJSON
 *
b_ñemít
 = 
b
->
chûd
;

3040 ; (
a_ñemít
 !
NULL
Ë&& (
b_ñemít
 != NULL);)

3042 i‡(!
	`cJSON_Com∑ª
(
a_ñemít
, 
b_ñemít
, 
ˇ£_£nsôive
))

3044  
Ál£
;

3047 
a_ñemít
 =á_ñemít->
√xt
;

3048 
b_ñemít
 = b_ñemít->
√xt
;

3052 i‡(
a_ñemít
 !
b_ñemít
) {

3053  
Ál£
;

3056  
åue
;

3059 
cJSON_Obje˘
:

3061 
cJSON
 *
a_ñemít
 = 
NULL
;

3062 
cJSON
 *
b_ñemít
 = 
NULL
;

3063 
	`cJSON_AºayF‹Each
(
a_ñemít
, 
a
)

3066 
b_ñemít
 = 
	`gë_obje˘_ôem
(
b
, 
a_ñemít
->
°rög
, 
ˇ£_£nsôive
);

3067 i‡(
b_ñemít
 =
NULL
)

3069  
Ál£
;

3072 i‡(!
	`cJSON_Com∑ª
(
a_ñemít
, 
b_ñemít
, 
ˇ£_£nsôive
))

3074  
Ál£
;

3080 
	`cJSON_AºayF‹Each
(
b_ñemít
, 
b
)

3082 
a_ñemít
 = 
	`gë_obje˘_ôem
(
a
, 
b_ñemít
->
°rög
, 
ˇ£_£nsôive
);

3083 i‡(
a_ñemít
 =
NULL
)

3085  
Ál£
;

3088 i‡(!
	`cJSON_Com∑ª
(
b_ñemít
, 
a_ñemít
, 
ˇ£_£nsôive
))

3090  
Ál£
;

3094  
åue
;

3098  
Ál£
;

3100 
	}
}

3102 
	$CJSON_PUBLIC
(*Ë
	$cJSON_mÆloc
(
size_t
 
size
)

3104  
globÆ_hooks
.
	`Æloˇã
(
size
);

3105 
	}
}

3107 
	$CJSON_PUBLIC
(Ë
	$cJSON_‰ì
(*
obje˘
)

3109 
globÆ_hooks
.
	`dóŒoˇã
(
obje˘
);

3110 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/cJSON.h

23 #i‚de‡
cJSON__h


24 
	#cJSON__h


	)

26 #ifde‡
__˝lu•lus


31 #i‡!
deföed
(
__WINDOWS__
Ë&& (deföed(
WIN32
Ë|| deföed(
WIN64
Ë|| deföed(
_MSC_VER
Ë|| deföed(
_WIN32
))

32 
	#__WINDOWS__


	)

35 #ifde‡
__WINDOWS__


55 
	#CJSON_CDECL
 
__cde˛


	)

56 
	#CJSON_STDCALL
 
__°dˇŒ


	)

59 #i‡!
deföed
(
CJSON_HIDE_SYMBOLS
Ë&& !deföed(
CJSON_IMPORT_SYMBOLS
Ë&& !deföed(
CJSON_EXPORT_SYMBOLS
)

60 
	#CJSON_EXPORT_SYMBOLS


	)

63 #i‡
deföed
(
CJSON_HIDE_SYMBOLS
)

64 
	#CJSON_PUBLIC
(
ty≥
Ëty≥ 
CJSON_STDCALL


	)

65 #ñi‡
deföed
(
CJSON_EXPORT_SYMBOLS
)

66 
	#CJSON_PUBLIC
(
ty≥
Ë
	`__de˛•ec
(
dŒexp‹t
Ëty≥ 
CJSON_STDCALL


	)

67 #ñi‡
deföed
(
CJSON_IMPORT_SYMBOLS
)

68 
	#CJSON_PUBLIC
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ëty≥ 
CJSON_STDCALL


	)

71 
	#CJSON_CDECL


	)

72 
	#CJSON_STDCALL


	)

74 #i‡(
deföed
(
__GNUC__
Ë|| deföed(
__SUNPRO_CC
Ë|| deföed (
__SUNPRO_C
)Ë&& deföed(
CJSON_API_VISIBILITY
)

75 
	#CJSON_PUBLIC
(
ty≥
Ë
	`__©åibuã__
((
	`visibûôy
("deÁu…"))Ë
	)
type

77 
	#CJSON_PUBLIC
(
ty≥
Ë
	)
type

82 
	#CJSON_VERSION_MAJOR
 1

	)

83 
	#CJSON_VERSION_MINOR
 7

	)

84 
	#CJSON_VERSION_PATCH
 15

	)

86 
	~<°ddef.h
>

89 
	#cJSON_InvÆid
 (0)

	)

90 
	#cJSON_FÆ£
 (1 << 0)

	)

91 
	#cJSON_True
 (1 << 1)

	)

92 
	#cJSON_NULL
 (1 << 2)

	)

93 
	#cJSON_Numbî
 (1 << 3)

	)

94 
	#cJSON_Såög
 (1 << 4)

	)

95 
	#cJSON_Aºay
 (1 << 5)

	)

96 
	#cJSON_Obje˘
 (1 << 6)

	)

97 
	#cJSON_Raw
 (1 << 7Ë

	)

99 
	#cJSON_IsRe„ªn˚
 256

	)

100 
	#cJSON_SåögIsC⁄°
 512

	)

103 
	scJSON


106 
cJSON
 *
√xt
;

107 
cJSON
 *
¥ev
;

109 
cJSON
 *
chûd
;

112 
ty≥
;

115 *
vÆue°rög
;

117 
vÆueöt
;

119 
vÆuedoubÀ
;

122 *
°rög
;

123 } 
	tcJSON
;

125 
	scJSON_Hooks


128 *(
CJSON_CDECL
 *
mÆloc_‚
)(
size_t
 
sz
);

129 (
CJSON_CDECL
 *
‰ì_‚
)(*
±r
);

130 } 
	tcJSON_Hooks
;

132 
	tcJSON_boﬁ
;

136 #i‚de‡
CJSON_NESTING_LIMIT


137 
	#CJSON_NESTING_LIMIT
 1000

	)

141 
CJSON_PUBLIC
(c⁄° *Ë
cJSON_Vîsi⁄
();

144 
CJSON_PUBLIC
(Ë
cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
);

148 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_P¨£
(c⁄° *
vÆue
);

149 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_P¨£WôhLígth
(c⁄° *
vÆue
, 
size_t
 
buf„r_Àngth
);

152 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_P¨£WôhO±s
(c⁄° *
vÆue
, c⁄° **
ªtu∫_∑r£_íd
, 
cJSON_boﬁ
 
ªquúe_nuŒ_ãrmö©ed
);

153 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_P¨£WôhLígthO±s
(c⁄° *
vÆue
, 
size_t
 
buf„r_Àngth
, c⁄° **
ªtu∫_∑r£_íd
, 
cJSON_boﬁ
 
ªquúe_nuŒ_ãrmö©ed
);

156 
CJSON_PUBLIC
(*Ë
cJSON_Pröt
(c⁄° 
cJSON
 *
ôem
);

158 
CJSON_PUBLIC
(*Ë
cJSON_PrötUnf‹m©ãd
(c⁄° 
cJSON
 *
ôem
);

160 
CJSON_PUBLIC
(*Ë
cJSON_PrötBuf„ªd
(c⁄° 
cJSON
 *
ôem
, 
¥ebuf„r
, 
cJSON_boﬁ
 
fmt
);

163 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_PrötPªÆloˇãd
(
cJSON
 *
ôem
, *
buf„r
, c⁄° 
Àngth
, c⁄° cJSON_boﬁ 
f‹m©
);

165 
CJSON_PUBLIC
(Ë
cJSON_Dñëe
(
cJSON
 *
ôem
);

168 
CJSON_PUBLIC
(Ë
cJSON_GëAºaySize
(c⁄° 
cJSON
 *
¨øy
);

170 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_GëAºayIãm
(c⁄° cJSON *
¨øy
, 
ödex
);

172 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_GëObje˘Iãm
(c⁄° cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
°rög
);

173 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_GëObje˘IãmCa£Sísôive
(c⁄° cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
°rög
);

174 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_HasObje˘Iãm
(c⁄° 
cJSON
 *
obje˘
, c⁄° *
°rög
);

176 
CJSON_PUBLIC
(c⁄° *Ë
cJSON_GëEº‹På
();

179 
CJSON_PUBLIC
(*Ë
cJSON_GëSåögVÆue
(c⁄° 
cJSON
 * c⁄° 
ôem
);

180 
CJSON_PUBLIC
(Ë
cJSON_GëNumbîVÆue
(c⁄° 
cJSON
 * c⁄° 
ôem
);

183 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsInvÆid
(c⁄° 
cJSON
 * c⁄° 
ôem
);

184 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsFÆ£
(c⁄° 
cJSON
 * c⁄° 
ôem
);

185 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsTrue
(c⁄° 
cJSON
 * c⁄° 
ôem
);

186 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsBoﬁ
(c⁄° 
cJSON
 * c⁄° 
ôem
);

187 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsNuŒ
(c⁄° 
cJSON
 * c⁄° 
ôem
);

188 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsNumbî
(c⁄° 
cJSON
 * c⁄° 
ôem
);

189 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsSåög
(c⁄° 
cJSON
 * c⁄° 
ôem
);

190 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsAºay
(c⁄° 
cJSON
 * c⁄° 
ôem
);

191 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsObje˘
(c⁄° 
cJSON
 * c⁄° 
ôem
);

192 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsRaw
(c⁄° 
cJSON
 * c⁄° 
ôem
);

195 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eNuŒ
();

196 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eTrue
();

197 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eFÆ£
();

198 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eBoﬁ
(
cJSON_boﬁ
 
boﬁón
);

199 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eNumbî
(
num
);

200 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eSåög
(c⁄° *
°rög
);

202 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eRaw
(c⁄° *
øw
);

203 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eAºay
();

204 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eObje˘
();

208 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eSåögRe„ªn˚
(c⁄° *
°rög
);

211 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eObje˘Re„ªn˚
(c⁄° cJSON *
chûd
);

212 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eAºayRe„ªn˚
(c⁄° cJSON *
chûd
);

216 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
, 
cou¡
);

217 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
, 
cou¡
);

218 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
, 
cou¡
);

219 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eSåögAºay
(c⁄° *c⁄° *
°rögs
, 
cou¡
);

222 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

223 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
);

227 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmToObje˘CS
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
);

229 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

230 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
);

233 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_DëachIãmVüPoöãr
(cJSON *
∑ª¡
, cJSON * c⁄° 
ôem
);

234 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_DëachIãmFromAºay
(cJSON *
¨øy
, 
which
);

235 
CJSON_PUBLIC
(Ë
cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
, 
which
);

236 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_DëachIãmFromObje˘
(cJSON *
obje˘
, c⁄° *
°rög
);

237 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_DëachIãmFromObje˘Ca£Sísôive
(cJSON *
obje˘
, c⁄° *
°rög
);

238 
CJSON_PUBLIC
(Ë
cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
);

239 
CJSON_PUBLIC
(Ë
cJSON_DñëeIãmFromObje˘Ca£Sísôive
(
cJSON
 *
obje˘
, c⁄° *
°rög
);

242 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_In£πIãmInAºay
(
cJSON
 *
¨øy
, 
which
, cJSON *
√wôem
);

243 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Rïœ˚IãmVüPoöãr
(
cJSON
 * c⁄° 
∑ª¡
, cJSON * c⁄° 
ôem
, cJSON * 
ª∂a˚mít
);

244 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
, 
which
, cJSON *
√wôem
);

245 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
);

246 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Rïœ˚IãmInObje˘Ca£Sísôive
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
);

249 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Du∂iˇã
(c⁄° cJSON *
ôem
, 
cJSON_boﬁ
 
ªcur£
);

255 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Com∑ª
(c⁄° 
cJSON
 * c⁄° 
a
, c⁄° cJSON * c⁄° 
b
, c⁄° cJSON_boﬁ 
ˇ£_£nsôive
);

260 
CJSON_PUBLIC
(Ë
cJSON_Möify
(*
js⁄
);

264 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddNuŒToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

265 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddTrueToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

266 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddFÆ£ToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

267 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddBoﬁToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° 
cJSON_boﬁ
 
boﬁón
);

268 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddNumbîToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° 
numbî
);

269 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddSåögToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° * c⁄° 
°rög
);

270 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddRawToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° * c⁄° 
øw
);

271 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddObje˘ToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

272 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddAºayToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

275 
	#cJSON_SëI¡VÆue
(
obje˘
, 
numbî
Ë((obje˘Ë? (obje˘)->
vÆueöt
 = (obje˘)->
vÆuedoubÀ
 = (numbîË: (numbî))

	)

277 
CJSON_PUBLIC
(Ë
cJSON_SëNumbîHñ≥r
(
cJSON
 *
obje˘
, 
numbî
);

278 
	#cJSON_SëNumbîVÆue
(
obje˘
, 
numbî
Ë((obje˘ !
NULL
Ë? 
	`cJSON_SëNumbîHñ≥r
(obje˘, (ÍumbîË: (numbî))

	)

280 
CJSON_PUBLIC
(*Ë
cJSON_SëVÆue°rög
(
cJSON
 *
obje˘
, c⁄° *
vÆue°rög
);

283 
	#cJSON_AºayF‹Each
(
ñemít
, 
¨øy
Ëñemíà◊ºay !
NULL
Ë? (¨øy)->
chûd
 : NULL;ÉÀmíà!NULL;ÉÀmíàñemít->
√xt
)

	)

286 
CJSON_PUBLIC
(*Ë
cJSON_mÆloc
(
size_t
 
size
);

287 
CJSON_PUBLIC
(Ë
cJSON_‰ì
(*
obje˘
);

289 #ifde‡
__˝lu•lus


	@open_source_lib/cJSON/cJSON-1.7.15/cJSON_Utils.c

24 #i‡!
deföed
(
_CRT_SECURE_NO_DEPRECATE
Ë&& deföed(
_MSC_VER
)

25 
	#_CRT_SECURE_NO_DEPRECATE


	)

28 #ifde‡
__GNUCC__


29 #¥agm®
GCC
 
visibûôy
 
push
()

31 #i‡
deföed
(
_MSC_VER
)

32 #¥agm®
w¨nög
 (
push
)

34 #¥agm®
w¨nög
 (
dißbÀ
 : 4001)

37 
	~<˘y≥.h
>

38 
	~<°rög.h
>

39 
	~<°dlib.h
>

40 
	~<°dio.h
>

41 
	~<limôs.h
>

42 
	~<m©h.h
>

43 
	~<Êﬂt.h
>

44 
	~<m©h.h
>

46 #i‡
deföed
(
_MSC_VER
)

47 #¥agm®
w¨nög
 (
p›
)

49 #ifde‡
__GNUCC__


50 #¥agm®
GCC
 
visibûôy
 
p›


53 
	~"cJSON_Utûs.h
"

56 #ifde‡
åue


57 #unde‡
åue


59 
	#åue
 ((
cJSON_boﬁ
)1)

	)

61 #ifde‡
Ál£


62 #unde‡
Ál£


64 
	#Ál£
 ((
cJSON_boﬁ
)0)

	)

66 * 
	$cJSONUtûs_°rdup
(c⁄° * c⁄° 
°rög
)

68 
size_t
 
Àngth
 = 0;

69 *
c›y
 = 
NULL
;

71 
Àngth
 = 
	`°æí
((c⁄° *)
°rög
) + ("");

72 
c›y
 = (*Ë
	`cJSON_mÆloc
(
Àngth
);

73 i‡(
c›y
 =
NULL
)

75  
NULL
;

77 
	`mem˝y
(
c›y
, 
°rög
, 
Àngth
);

79  
c›y
;

80 
	}
}

83 
	$com∑ª_°rögs
(c⁄° *
°rög1
, c⁄° *
°rög2
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

85 i‡((
°rög1
 =
NULL
Ë|| (
°rög2
 == NULL))

90 i‡(
°rög1
 =
°rög2
)

95 i‡(
ˇ£_£nsôive
)

97  
	`°rcmp
((c⁄° *)
°rög1
, (c⁄° *)
°rög2
);

100 ; 
	`tﬁowî
(*
°rög1
Ë=tﬁowî(*
°rög2
); ()string1++, string2++)

102 i‡(*
°rög1
 == '\0')

108  
	`tﬁowî
(*
°rög1
Ë-Åﬁowî(*
°rög2
);

109 
	}
}

112 
cJSON_boﬁ
 
	$com∑ª_doubÀ
(
a
, 
b
)

114 
maxVÆ
 = 
	`Ábs
(
a
Ë> fabs(
b
) ? fabs(a) : fabs(b);

115  (
	`Ábs
(
a
 - 
b
Ë<
maxVÆ
 * 
DBL_EPSILON
);

116 
	}
}

120 
cJSON_boﬁ
 
	$com∑ª_poöãrs
(c⁄° *
«me
, c⁄° *
poöãr
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

122 i‡((
«me
 =
NULL
Ë|| (
poöãr
 == NULL))

124  
Ál£
;

127 ; (*
«me
 !'\0'Ë&& (*
poöãr
 != '\0') && (*pointer != '/'); ()name++,Öointer++)

129 i‡(*
poöãr
 == '~')

132 i‡(((
poöãr
[1] !'0'Ë|| (*
«me
 != '~')) && ((pointer[1] != '1') || (*name != '/')))

135  
Ál£
;

139 
poöãr
++;

142 i‡((!
ˇ£_£nsôive
 && (
	`tﬁowî
(*
«me
Ë!tﬁowî(*
poöãr
))) || (case_sensitive && (*name != *pointer)))

144  
Ál£
;

147 i‡(((*
poöãr
 !0Ë&& (*poöã∏!'/')Ë!(*
«me
 != 0))

150  
Ál£
;;

153  
åue
;

154 
	}
}

157 
size_t
 
	$poöãr_ícoded_Àngth
(c⁄° *
°rög
)

159 
size_t
 
Àngth
;

160 
Àngth
 = 0; *
°rög
 != '\0'; ()string++,Üength++)

163 i‡((*
°rög
 == '~') || (*string == '/'))

165 
Àngth
++;

169  
Àngth
;

170 
	}
}

173 
	$ícode_°rög_as_poöãr
(*
de°ö©i⁄
, c⁄° *
sour˚
)

175 ; 
sour˚
[0] !'\0'; ()sour˚++, 
de°ö©i⁄
++)

177 i‡(
sour˚
[0] == '/')

179 
de°ö©i⁄
[0] = '~';

180 
de°ö©i⁄
[1] = '1';

181 
de°ö©i⁄
++;

183 i‡(
sour˚
[0] == '~')

185 
de°ö©i⁄
[0] = '~';

186 
de°ö©i⁄
[1] = '0';

187 
de°ö©i⁄
++;

191 
de°ö©i⁄
[0] = 
sour˚
[0];

195 
de°ö©i⁄
[0] = '\0';

196 
	}
}

198 
	$CJSON_PUBLIC
(*Ë
	$cJSONUtûs_FödPoöãrFromObje˘To
(c⁄° 
cJSON
 * c⁄° 
obje˘
, c⁄° cJSON * c⁄° 
èrgë
)

200 
size_t
 
chûd_ödex
 = 0;

201 
cJSON
 *
cuºít_chûd
 = 0;

203 i‡((
obje˘
 =
NULL
Ë|| (
èrgë
 == NULL))

205  
NULL
;

208 i‡(
obje˘
 =
èrgë
)

211  (*)
	`cJSONUtûs_°rdup
((const *)"");

215 
cuºít_chûd
 = 
obje˘
->
chûd
; cuºít_chûd !
NULL
; ()(cuºít_chûd = cuºít_chûd->
√xt
), 
chûd_ödex
++)

217 *
èrgë_poöãr
 = (*)
	`cJSONUtûs_FödPoöãrFromObje˘To
(
cuºít_chûd
, 
èrgë
);

219 i‡(
èrgë_poöãr
 !
NULL
)

221 i‡(
	`cJSON_IsAºay
(
obje˘
))

224 *
fuŒ_poöãr
 = (*)
	`cJSON_mÆloc
(
	`°æí
((*)
èrgë_poöãr
) + 20 + ("/"));

228 i‡(
chûd_ödex
 > 
ULONG_MAX
)

230 
	`cJSON_‰ì
(
èrgë_poöãr
);

231 
	`cJSON_‰ì
(
fuŒ_poöãr
);

232  
NULL
;

234 
	`•rötf
((*)
fuŒ_poöãr
, "/%lu%s", ()
chûd_ödex
, 
èrgë_poöãr
);

235 
	`cJSON_‰ì
(
èrgë_poöãr
);

237  (*)
fuŒ_poöãr
;

240 i‡(
	`cJSON_IsObje˘
(
obje˘
))

242 *
fuŒ_poöãr
 = (*)
	`cJSON_mÆloc
(
	`°æí
((*)
èrgë_poöãr
Ë+ 
	`poöãr_ícoded_Àngth
((*)
cuºít_chûd
->
°rög
) + 2);

243 
fuŒ_poöãr
[0] = '/';

244 
	`ícode_°rög_as_poöãr
(
fuŒ_poöãr
 + 1, (*)
cuºít_chûd
->
°rög
);

245 
	`°rˇt
((*)
fuŒ_poöãr
, (*)
èrgë_poöãr
);

246 
	`cJSON_‰ì
(
èrgë_poöãr
);

248  (*)
fuŒ_poöãr
;

252 
	`cJSON_‰ì
(
èrgë_poöãr
);

253  
NULL
;

258  
NULL
;

259 
	}
}

262 
cJSON
 *
	$gë_¨øy_ôem
(c⁄° 
cJSON
 *
¨øy
, 
size_t
 
ôem
)

264 
cJSON
 *
chûd
 = 
¨øy
 ?áºay->chûd : 
NULL
;

265 (
chûd
 !
NULL
Ë&& (
ôem
 > 0))

267 
ôem
--;

268 
chûd
 = chûd->
√xt
;

271  
chûd
;

272 
	}
}

274 
cJSON_boﬁ
 
	$decode_¨øy_ödex_‰om_poöãr
(c⁄° * c⁄° 
poöãr
, 
size_t
 * c⁄° 
ödex
)

276 
size_t
 
∑r£d_ödex
 = 0;

277 
size_t
 
posôi⁄
 = 0;

279 i‡((
poöãr
[0] == '0') && ((pointer[1] != '\0') && (pointer[1] != '/')))

285 
posôi⁄
 = 0; (
poöãr
[position] >= '0') && (pointer[0] <= '9');Öosition++)

287 
∑r£d_ödex
 = (10 *Ö¨£d_ödexË+ (
size_t
)(
poöãr
[
posôi⁄
] - '0');

291 i‡((
poöãr
[
posôi⁄
] != '\0') && (pointer[position] != '/'))

296 *
ödex
 = 
∑r£d_ödex
;

299 
	}
}

301 
cJSON
 *
	$gë_ôem_‰om_poöãr
(
cJSON
 * c⁄° 
obje˘
, c⁄° * 
poöãr
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

303 
cJSON
 *
cuºít_ñemít
 = 
obje˘
;

305 i‡(
poöãr
 =
NULL
)

307  
NULL
;

311 (
poöãr
[0] ='/'Ë&& (
cuºít_ñemít
 !
NULL
))

313 
poöãr
++;

314 i‡(
	`cJSON_IsAºay
(
cuºít_ñemít
))

316 
size_t
 
ödex
 = 0;

317 i‡(!
	`decode_¨øy_ödex_‰om_poöãr
((c⁄° *)
poöãr
, &
ödex
))

319  
NULL
;

322 
cuºít_ñemít
 = 
	`gë_¨øy_ôem
(cuºít_ñemít, 
ödex
);

324 i‡(
	`cJSON_IsObje˘
(
cuºít_ñemít
))

326 
cuºít_ñemít
 = cuºít_ñemít->
chûd
;

328 (
cuºít_ñemít
 !
NULL
Ë&& !
	`com∑ª_poöãrs
((*)cuºít_ñemít->
°rög
, (c⁄° *)
poöãr
, 
ˇ£_£nsôive
))

330 
cuºít_ñemít
 = cuºít_ñemít->
√xt
;

335  
NULL
;

339 (
poöãr
[0] != '\0') && (pointer[0] != '/'))

341 
poöãr
++;

345  
cuºít_ñemít
;

346 
	}
}

348 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSONUtûs_GëPoöãr
(
cJSON
 * c⁄° 
obje˘
, c⁄° *
poöãr
)

350  
	`gë_ôem_‰om_poöãr
(
obje˘
, 
poöãr
, 
Ál£
);

351 
	}
}

353 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSONUtûs_GëPoöãrCa£Sísôive
(
cJSON
 * c⁄° 
obje˘
, c⁄° *
poöãr
)

355  
	`gë_ôem_‰om_poöãr
(
obje˘
, 
poöãr
, 
åue
);

356 
	}
}

359 
	$decode_poöãr_ö∂a˚
(*
°rög
)

361 *
decoded_°rög
 = 
°rög
;

363 i‡(
°rög
 =
NULL
) {

367 ; *
°rög
; ()
decoded_°rög
++, string++)

369 i‡(
°rög
[0] == '~')

371 i‡(
°rög
[1] == '0')

373 
decoded_°rög
[0] = '~';

375 i‡(
°rög
[1] == '1')

377 
decoded_°rög
[1] = '/';

385 
°rög
++;

389 
decoded_°rög
[0] = '\0';

390 
	}
}

393 
cJSON
 *
	$dëach_ôem_‰om_¨øy
(
cJSON
 *
¨øy
, 
size_t
 
which
)

395 
cJSON
 *
c
 = 
¨øy
->
chûd
;

396 
c
 && (
which
 > 0))

398 
c
 = c->
√xt
;

399 
which
--;

401 i‡(!
c
)

404  
NULL
;

406 i‡(
c
 !
¨øy
->
chûd
)

409 
c
->
¥ev
->
√xt
 = c->next;

411 i‡(
c
->
√xt
)

413 
c
->
√xt
->
¥ev
 = c->prev;

415 i‡(
c
 =
¨øy
->
chûd
)

417 
¨øy
->
chûd
 = 
c
->
√xt
;

419 i‡(
c
->
√xt
 =
NULL
)

421 
¨øy
->
chûd
->
¥ev
 = 
c
->prev;

424 
c
->
¥ev
 = c->
√xt
 = 
NULL
;

426  
c
;

427 
	}
}

430 
cJSON
 *
	$dëach_∑th
(
cJSON
 *
obje˘
, c⁄° *
∑th
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

432 *
∑ª¡_poöãr
 = 
NULL
;

433 *
chûd_poöãr
 = 
NULL
;

434 
cJSON
 *
∑ª¡
 = 
NULL
;

435 
cJSON
 *
dëached_ôem
 = 
NULL
;

438 
∑ª¡_poöãr
 = 
	`cJSONUtûs_°rdup
(
∑th
);

439 i‡(
∑ª¡_poöãr
 =
NULL
) {

440 
˛ónup
;

443 
chûd_poöãr
 = (*)
	`°ºchr
((*)
∑ª¡_poöãr
, '/');

444 i‡(
chûd_poöãr
 =
NULL
)

446 
˛ónup
;

449 
chûd_poöãr
[0] = '\0';

450 
chûd_poöãr
++;

452 
∑ª¡
 = 
	`gë_ôem_‰om_poöãr
(
obje˘
, (*)
∑ª¡_poöãr
, 
ˇ£_£nsôive
);

453 
	`decode_poöãr_ö∂a˚
(
chûd_poöãr
);

455 i‡(
	`cJSON_IsAºay
(
∑ª¡
))

457 
size_t
 
ödex
 = 0;

458 i‡(!
	`decode_¨øy_ödex_‰om_poöãr
(
chûd_poöãr
, &
ödex
))

460 
˛ónup
;

462 
dëached_ôem
 = 
	`dëach_ôem_‰om_¨øy
(
∑ª¡
, 
ödex
);

464 i‡(
	`cJSON_IsObje˘
(
∑ª¡
))

466 
dëached_ôem
 = 
	`cJSON_DëachIãmFromObje˘
(
∑ª¡
, (*)
chûd_poöãr
);

471 
˛ónup
;

474 
˛ónup
:

475 i‡(
∑ª¡_poöãr
 !
NULL
)

477 
	`cJSON_‰ì
(
∑ª¡_poöãr
);

480  
dëached_ôem
;

481 
	}
}

484 
cJSON
 *
	$s‹t_li°
(
cJSON
 *
li°
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

486 
cJSON
 *
fú°
 = 
li°
;

487 
cJSON
 *
£c⁄d
 = 
li°
;

488 
cJSON
 *
cuºít_ôem
 = 
li°
;

489 
cJSON
 *
ªsu…
 = 
li°
;

490 
cJSON
 *
ªsu…_èû
 = 
NULL
;

492 i‡((
li°
 =
NULL
Ë|| (li°->
√xt
 == NULL))

495  
ªsu…
;

498 (
cuºít_ôem
 !
NULL
Ë&& (cuºít_ôem->
√xt
 !NULLË&& (
	`com∑ª_°rögs
((*)cuºít_ôem->
°rög
, (*)cuºít_ôem->√xt->°rög, 
ˇ£_£nsôive
) < 0))

501 
cuºít_ôem
 = cuºít_ôem->
√xt
;

503 i‡((
cuºít_ôem
 =
NULL
Ë|| (cuºít_ôem->
√xt
 == NULL))

506  
ªsu…
;

510 
cuºít_ôem
 = 
li°
;

511 
cuºít_ôem
 !
NULL
)

514 
£c⁄d
 = sec⁄d->
√xt
;

515 
cuºít_ôem
 = cuºít_ôem->
√xt
;

517 i‡(
cuºít_ôem
 !
NULL
)

519 
cuºít_ôem
 = cuºít_ôem->
√xt
;

522 i‡((
£c⁄d
 !
NULL
Ë&& (£c⁄d->
¥ev
 != NULL))

525 
£c⁄d
->
¥ev
->
√xt
 = 
NULL
;

526 
£c⁄d
->
¥ev
 = 
NULL
;

530 
fú°
 = 
	`s‹t_li°
(fú°, 
ˇ£_£nsôive
);

531 
£c⁄d
 = 
	`s‹t_li°
(£c⁄d, 
ˇ£_£nsôive
);

532 
ªsu…
 = 
NULL
;

535 (
fú°
 !
NULL
Ë&& (
£c⁄d
 != NULL))

537 
cJSON
 *
smÆÀr
 = 
NULL
;

538 i‡(
	`com∑ª_°rögs
((*)
fú°
->
°rög
, (*)
£c⁄d
->°rög, 
ˇ£_£nsôive
) < 0)

540 
smÆÀr
 = 
fú°
;

544 
smÆÀr
 = 
£c⁄d
;

547 i‡(
ªsu…
 =
NULL
)

550 
ªsu…_èû
 = 
smÆÀr
;

551 
ªsu…
 = 
smÆÀr
;

556 
ªsu…_èû
->
√xt
 = 
smÆÀr
;

557 
smÆÀr
->
¥ev
 = 
ªsu…_èû
;

558 
ªsu…_èû
 = 
smÆÀr
;

561 i‡(
fú°
 =
smÆÀr
)

563 
fú°
 = fú°->
√xt
;

567 
£c⁄d
 = sec⁄d->
√xt
;

571 i‡(
fú°
 !
NULL
)

574 i‡(
ªsu…
 =
NULL
)

576  
fú°
;

578 
ªsu…_èû
->
√xt
 = 
fú°
;

579 
fú°
->
¥ev
 = 
ªsu…_èû
;

581 i‡(
£c⁄d
 !
NULL
)

584 i‡(
ªsu…
 =
NULL
)

586  
£c⁄d
;

588 
ªsu…_èû
->
√xt
 = 
£c⁄d
;

589 
£c⁄d
->
¥ev
 = 
ªsu…_èû
;

592  
ªsu…
;

593 
	}
}

595 
	$s‹t_obje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

597 i‡(
obje˘
 =
NULL
)

601 
obje˘
->
chûd
 = 
	`s‹t_li°
(obje˘->chûd, 
ˇ£_£nsôive
);

602 
	}
}

604 
cJSON_boﬁ
 
	$com∑ª_js⁄
(
cJSON
 *
a
, cJSON *
b
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

606 i‡((
a
 =
NULL
Ë|| (
b
 =NULLË|| (◊->
ty≥
 & 0xFF) != (b->type & 0xFF)))

609  
Ál£
;

611 
a
->
ty≥
 & 0xFF)

613 
cJSON_Numbî
:

615 i‡((
a
->
vÆueöt
 !
b
->vÆueötË|| (!
	`com∑ª_doubÀ
◊->
vÆuedoubÀ
, b->valuedouble)))

617  
Ál£
;

621  
åue
;

624 
cJSON_Såög
:

626 i‡(
	`°rcmp
(
a
->
vÆue°rög
, 
b
->valuestring) != 0)

628  
Ál£
;

632  
åue
;

635 
cJSON_Aºay
:

636 ()(
a
 =á->
chûd
), 
b
 = b->chûd; (®!
NULL
Ë&& (b !NULL); ()◊ =á->
√xt
), b = b->next)

638 
cJSON_boﬁ
 
idítiˇl
 = 
	`com∑ª_js⁄
(
a
, 
b
, 
ˇ£_£nsôive
);

639 i‡(!
idítiˇl
)

641  
Ál£
;

646 i‡((
a
 !
NULL
Ë|| (
b
 != NULL))

648  
Ál£
;

652  
åue
;

655 
cJSON_Obje˘
:

656 
	`s‹t_obje˘
(
a
, 
ˇ£_£nsôive
);

657 
	`s‹t_obje˘
(
b
, 
ˇ£_£nsôive
);

658 ()(
a
 =á->
chûd
), 
b
 = b->chûd; (®!
NULL
Ë&& (b !NULL); ()◊ =á->
√xt
), b = b->next)

660 
cJSON_boﬁ
 
idítiˇl
 = 
Ál£
;

662 i‡(
	`com∑ª_°rögs
((*)
a
->
°rög
, (*)
b
->°rög, 
ˇ£_£nsôive
))

665  
Ál£
;

667 
idítiˇl
 = 
	`com∑ª_js⁄
(
a
, 
b
, 
ˇ£_£nsôive
);

668 i‡(!
idítiˇl
)

670  
Ál£
;

675 i‡((
a
 !
NULL
Ë|| (
b
 != NULL))

677  
Ál£
;

681  
åue
;

689  
åue
;

690 
	}
}

693 
cJSON_boﬁ
 
	$ö£π_ôem_ö_¨øy
(
cJSON
 *
¨øy
, 
size_t
 
which
, cJSON *
√wôem
)

695 
cJSON
 *
chûd
 = 
¨øy
->child;

696 
chûd
 && (
which
 > 0))

698 
chûd
 = chûd->
√xt
;

699 
which
--;

701 i‡(
which
 > 0)

706 i‡(
chûd
 =
NULL
)

708 
	`cJSON_AddIãmToAºay
(
¨øy
, 
√wôem
);

713 
√wôem
->
√xt
 = 
chûd
;

714 
√wôem
->
¥ev
 = 
chûd
->prev;

715 
chûd
->
¥ev
 = 
√wôem
;

718 i‡(
chûd
 =
¨øy
->child)

720 
¨øy
->
chûd
 = 
√wôem
;

724 
√wôem
->
¥ev
->
√xt
 =Çewitem;

728 
	}
}

730 
cJSON
 *
	$gë_obje˘_ôem
(c⁄° 
cJSON
 * c⁄° 
obje˘
, c⁄° * 
«me
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

732 i‡(
ˇ£_£nsôive
)

734  
	`cJSON_GëObje˘IãmCa£Sísôive
(
obje˘
, 
«me
);

737  
	`cJSON_GëObje˘Iãm
(
obje˘
, 
«me
);

738 
	}
}

740 
	e∑tch_›î©i⁄
 { 
	mINVALID
, 
	mADD
, 
	mREMOVE
, 
	mREPLACE
, 
	mMOVE
, 
	mCOPY
, 
	mTEST
 };

742 
∑tch_›î©i⁄
 
	$decode_∑tch_›î©i⁄
(c⁄° 
cJSON
 * c⁄° 
∑tch
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

744 
cJSON
 *
›î©i⁄
 = 
	`gë_obje˘_ôem
(
∑tch
, "›", 
ˇ£_£nsôive
);

745 i‡(!
	`cJSON_IsSåög
(
›î©i⁄
))

747  
INVALID
;

750 i‡(
	`°rcmp
(
›î©i⁄
->
vÆue°rög
, "add") == 0)

752  
ADD
;

755 i‡(
	`°rcmp
(
›î©i⁄
->
vÆue°rög
, "remove") == 0)

757  
REMOVE
;

760 i‡(
	`°rcmp
(
›î©i⁄
->
vÆue°rög
, "replace") == 0)

762  
REPLACE
;

765 i‡(
	`°rcmp
(
›î©i⁄
->
vÆue°rög
, "move") == 0)

767  
MOVE
;

770 i‡(
	`°rcmp
(
›î©i⁄
->
vÆue°rög
, "copy") == 0)

772  
COPY
;

775 i‡(
	`°rcmp
(
›î©i⁄
->
vÆue°rög
, "test") == 0)

777  
TEST
;

780  
INVALID
;

781 
	}
}

784 
	$ovîwrôe_ôem
(
cJSON
 * c⁄° 
roŸ
, c⁄° cJSON 
ª∂a˚mít
)

786 i‡(
roŸ
 =
NULL
)

791 i‡(
roŸ
->
°rög
 !
NULL
)

793 
	`cJSON_‰ì
(
roŸ
->
°rög
);

795 i‡(
roŸ
->
vÆue°rög
 !
NULL
)

797 
	`cJSON_‰ì
(
roŸ
->
vÆue°rög
);

799 i‡(
roŸ
->
chûd
 !
NULL
)

801 
	`cJSON_Dñëe
(
roŸ
->
chûd
);

804 
	`mem˝y
(
roŸ
, &
ª∂a˚mít
, (
cJSON
));

805 
	}
}

807 
	$≠∂y_∑tch
(
cJSON
 *
obje˘
, c⁄° cJSON *
∑tch
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

809 
cJSON
 *
∑th
 = 
NULL
;

810 
cJSON
 *
vÆue
 = 
NULL
;

811 
cJSON
 *
∑ª¡
 = 
NULL
;

812 
∑tch_›î©i⁄
 
›code
 = 
INVALID
;

813 *
∑ª¡_poöãr
 = 
NULL
;

814 *
chûd_poöãr
 = 
NULL
;

815 
°©us
 = 0;

817 
∑th
 = 
	`gë_obje˘_ôem
(
∑tch
, "∑th", 
ˇ£_£nsôive
);

818 i‡(!
	`cJSON_IsSåög
(
∑th
))

821 
°©us
 = 2;

822 
˛ónup
;

825 
›code
 = 
	`decode_∑tch_›î©i⁄
(
∑tch
, 
ˇ£_£nsôive
);

826 i‡(
›code
 =
INVALID
)

828 
°©us
 = 3;

829 
˛ónup
;

831 i‡(
›code
 =
TEST
)

834 
°©us
 = !
	`com∑ª_js⁄
(
	`gë_ôem_‰om_poöãr
(
obje˘
, 
∑th
->
vÆue°rög
, 
ˇ£_£nsôive
), 
	`gë_obje˘_ôem
(
∑tch
, "value", case_sensitive), case_sensitive);

835 
˛ónup
;

839 i‡(
∑th
->
vÆue°rög
[0] == '\0')

841 i‡(
›code
 =
REMOVE
)

843 c⁄° 
cJSON
 
övÆid
 = { 
NULL
, NULL, NULL, 
cJSON_InvÆid
, NULL, 0, 0, NULL};

845 
	`ovîwrôe_ôem
(
obje˘
, 
övÆid
);

847 
°©us
 = 0;

848 
˛ónup
;

851 i‡((
›code
 =
REPLACE
Ë|| (›codê=
ADD
))

853 
vÆue
 = 
	`gë_obje˘_ôem
(
∑tch
, "vÆue", 
ˇ£_£nsôive
);

854 i‡(
vÆue
 =
NULL
)

857 
°©us
 = 7;

858 
˛ónup
;

861 
vÆue
 = 
	`cJSON_Du∂iˇã
(value, 1);

862 i‡(
vÆue
 =
NULL
)

865 
°©us
 = 8;

866 
˛ónup
;

869 
	`ovîwrôe_ôem
(
obje˘
, *
vÆue
);

872 
	`cJSON_‰ì
(
vÆue
);

873 
vÆue
 = 
NULL
;

876 i‡(
obje˘
->
°rög
 !
NULL
)

878 
	`cJSON_‰ì
(
obje˘
->
°rög
);

879 
obje˘
->
°rög
 = 
NULL
;

882 
°©us
 = 0;

883 
˛ónup
;

887 i‡((
›code
 =
REMOVE
Ë|| (›codê=
REPLACE
))

890 
cJSON
 *
ﬁd_ôem
 = 
	`dëach_∑th
(
obje˘
, (*)
∑th
->
vÆue°rög
, 
ˇ£_£nsôive
);

891 i‡(
ﬁd_ôem
 =
NULL
)

893 
°©us
 = 13;

894 
˛ónup
;

896 
	`cJSON_Dñëe
(
ﬁd_ôem
);

897 i‡(
›code
 =
REMOVE
)

900 
°©us
 = 0;

901 
˛ónup
;

906 i‡((
›code
 =
MOVE
Ë|| (›codê=
COPY
))

908 
cJSON
 *
‰om
 = 
	`gë_obje˘_ôem
(
∑tch
, "‰om", 
ˇ£_£nsôive
);

909 i‡(
‰om
 =
NULL
)

912 
°©us
 = 4;

913 
˛ónup
;

916 i‡(
›code
 =
MOVE
)

918 
vÆue
 = 
	`dëach_∑th
(
obje˘
, (*)
‰om
->
vÆue°rög
, 
ˇ£_£nsôive
);

920 i‡(
›code
 =
COPY
)

922 
vÆue
 = 
	`gë_ôem_‰om_poöãr
(
obje˘
, 
‰om
->
vÆue°rög
, 
ˇ£_£nsôive
);

924 i‡(
vÆue
 =
NULL
)

927 
°©us
 = 5;

928 
˛ónup
;

930 i‡(
›code
 =
COPY
)

932 
vÆue
 = 
	`cJSON_Du∂iˇã
(value, 1);

934 i‡(
vÆue
 =
NULL
)

937 
°©us
 = 6;

938 
˛ónup
;

943 
vÆue
 = 
	`gë_obje˘_ôem
(
∑tch
, "vÆue", 
ˇ£_£nsôive
);

944 i‡(
vÆue
 =
NULL
)

947 
°©us
 = 7;

948 
˛ónup
;

950 
vÆue
 = 
	`cJSON_Du∂iˇã
(value, 1);

951 i‡(
vÆue
 =
NULL
)

954 
°©us
 = 8;

955 
˛ónup
;

962 
∑ª¡_poöãr
 = 
	`cJSONUtûs_°rdup
((*)
∑th
->
vÆue°rög
);

963 i‡(
∑ª¡_poöãr
) {

964 
chûd_poöãr
 = (*)
	`°ºchr
((*)
∑ª¡_poöãr
, '/');

966 i‡(
chûd_poöãr
 !
NULL
)

968 
chûd_poöãr
[0] = '\0';

969 
chûd_poöãr
++;

971 
∑ª¡
 = 
	`gë_ôem_‰om_poöãr
(
obje˘
, (*)
∑ª¡_poöãr
, 
ˇ£_£nsôive
);

972 
	`decode_poöãr_ö∂a˚
(
chûd_poöãr
);

975 i‡((
∑ª¡
 =
NULL
Ë|| (
chûd_poöãr
 == NULL))

978 
°©us
 = 9;

979 
˛ónup
;

981 i‡(
	`cJSON_IsAºay
(
∑ª¡
))

983 i‡(
	`°rcmp
((*)
chûd_poöãr
, "-") == 0)

985 
	`cJSON_AddIãmToAºay
(
∑ª¡
, 
vÆue
);

986 
vÆue
 = 
NULL
;

990 
size_t
 
ödex
 = 0;

991 i‡(!
	`decode_¨øy_ödex_‰om_poöãr
(
chûd_poöãr
, &
ödex
))

993 
°©us
 = 11;

994 
˛ónup
;

997 i‡(!
	`ö£π_ôem_ö_¨øy
(
∑ª¡
, 
ödex
, 
vÆue
))

999 
°©us
 = 10;

1000 
˛ónup
;

1002 
vÆue
 = 
NULL
;

1005 i‡(
	`cJSON_IsObje˘
(
∑ª¡
))

1007 i‡(
ˇ£_£nsôive
)

1009 
	`cJSON_DñëeIãmFromObje˘Ca£Sísôive
(
∑ª¡
, (*)
chûd_poöãr
);

1013 
	`cJSON_DñëeIãmFromObje˘
(
∑ª¡
, (*)
chûd_poöãr
);

1015 
	`cJSON_AddIãmToObje˘
(
∑ª¡
, (*)
chûd_poöãr
, 
vÆue
);

1016 
vÆue
 = 
NULL
;

1021 
°©us
 = 9;

1022 
˛ónup
;

1025 
˛ónup
:

1026 i‡(
vÆue
 !
NULL
)

1028 
	`cJSON_Dñëe
(
vÆue
);

1030 i‡(
∑ª¡_poöãr
 !
NULL
)

1032 
	`cJSON_‰ì
(
∑ª¡_poöãr
);

1035  
°©us
;

1036 
	}
}

1038 
	$CJSON_PUBLIC
(Ë
	$cJSONUtûs_AµlyP©ches
(
cJSON
 * c⁄° 
obje˘
, c⁄° cJSON * c⁄° 
∑tches
)

1040 c⁄° 
cJSON
 *
cuºít_∑tch
 = 
NULL
;

1041 
°©us
 = 0;

1043 i‡(!
	`cJSON_IsAºay
(
∑tches
))

1049 i‡(
∑tches
 !
NULL
)

1051 
cuºít_∑tch
 = 
∑tches
->
chûd
;

1054 
cuºít_∑tch
 !
NULL
)

1056 
°©us
 = 
	`≠∂y_∑tch
(
obje˘
, 
cuºít_∑tch
, 
Ál£
);

1057 i‡(
°©us
 != 0)

1059  
°©us
;

1061 
cuºít_∑tch
 = cuºít_∑tch->
√xt
;

1065 
	}
}

1067 
	$CJSON_PUBLIC
(Ë
	$cJSONUtûs_AµlyP©chesCa£Sísôive
(
cJSON
 * c⁄° 
obje˘
, c⁄° cJSON * c⁄° 
∑tches
)

1069 c⁄° 
cJSON
 *
cuºít_∑tch
 = 
NULL
;

1070 
°©us
 = 0;

1072 i‡(!
	`cJSON_IsAºay
(
∑tches
))

1078 i‡(
∑tches
 !
NULL
)

1080 
cuºít_∑tch
 = 
∑tches
->
chûd
;

1083 
cuºít_∑tch
 !
NULL
)

1085 
°©us
 = 
	`≠∂y_∑tch
(
obje˘
, 
cuºít_∑tch
, 
åue
);

1086 i‡(
°©us
 != 0)

1088  
°©us
;

1090 
cuºít_∑tch
 = cuºít_∑tch->
√xt
;

1094 
	}
}

1096 
	$compo£_∑tch
(
cJSON
 * c⁄° 
∑tches
, c⁄° * c⁄° 
›î©i⁄
, c⁄° * c⁄° 
∑th
, c⁄° *
suffix
, c⁄° cJSON * c⁄° 
vÆue
)

1098 
cJSON
 *
∑tch
 = 
NULL
;

1100 i‡((
∑tches
 =
NULL
Ë|| (
›î©i⁄
 =NULLË|| (
∑th
 == NULL))

1105 
∑tch
 = 
	`cJSON_Cª©eObje˘
();

1106 i‡(
∑tch
 =
NULL
)

1110 
	`cJSON_AddIãmToObje˘
(
∑tch
, "›", 
	`cJSON_Cª©eSåög
((c⁄° *)
›î©i⁄
));

1112 i‡(
suffix
 =
NULL
)

1114 
	`cJSON_AddIãmToObje˘
(
∑tch
, "∑th", 
	`cJSON_Cª©eSåög
((c⁄° *)
∑th
));

1118 
size_t
 
suffix_Àngth
 = 
	`poöãr_ícoded_Àngth
(
suffix
);

1119 
size_t
 
∑th_Àngth
 = 
	`°æí
((c⁄° *)
∑th
);

1120 *
fuŒ_∑th
 = (*)
	`cJSON_mÆloc
(
∑th_Àngth
 + 
suffix_Àngth
 + ("/"));

1122 
	`•rötf
((*)
fuŒ_∑th
, "%s/", (c⁄° *)
∑th
);

1123 
	`ícode_°rög_as_poöãr
(
fuŒ_∑th
 + 
∑th_Àngth
 + 1, 
suffix
);

1125 
	`cJSON_AddIãmToObje˘
(
∑tch
, "∑th", 
	`cJSON_Cª©eSåög
((c⁄° *)
fuŒ_∑th
));

1126 
	`cJSON_‰ì
(
fuŒ_∑th
);

1129 i‡(
vÆue
 !
NULL
)

1131 
	`cJSON_AddIãmToObje˘
(
∑tch
, "vÆue", 
	`cJSON_Du∂iˇã
(
vÆue
, 1));

1133 
	`cJSON_AddIãmToAºay
(
∑tches
, 
∑tch
);

1134 
	}
}

1136 
	$CJSON_PUBLIC
(Ë
	$cJSONUtûs_AddP©chToAºay
(
cJSON
 * c⁄° 
¨øy
, c⁄° * c⁄° 
›î©i⁄
, c⁄° * c⁄° 
∑th
, c⁄° cJSON * c⁄° 
vÆue
)

1138 
	`compo£_∑tch
(
¨øy
, (c⁄° *)
›î©i⁄
, (c⁄° *)
∑th
, 
NULL
, 
vÆue
);

1139 
	}
}

1141 
	$¸óã_∑tches
(
cJSON
 * c⁄° 
∑tches
, c⁄° * c⁄° 
∑th
, cJSON * c⁄° 
‰om
, cJSON * c⁄° 
to
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

1143 i‡((
‰om
 =
NULL
Ë|| (
to
 == NULL))

1148 i‡((
‰om
->
ty≥
 & 0xFFË!(
to
->type & 0xFF))

1150 
	`compo£_∑tch
(
∑tches
, (c⁄° *)"ª∂a˚", 
∑th
, 0, 
to
);

1154 
‰om
->
ty≥
 & 0xFF)

1156 
cJSON_Numbî
:

1157 i‡((
‰om
->
vÆueöt
 !
to
->vÆueötË|| !
	`com∑ª_doubÀ
(‰om->
vÆuedoubÀ
,Åo->valuedouble))

1159 
	`compo£_∑tch
(
∑tches
, (c⁄° *)"ª∂a˚", 
∑th
, 
NULL
, 
to
);

1163 
cJSON_Såög
:

1164 i‡(
	`°rcmp
(
‰om
->
vÆue°rög
, 
to
->valuestring) != 0)

1166 
	`compo£_∑tch
(
∑tches
, (c⁄° *)"ª∂a˚", 
∑th
, 
NULL
, 
to
);

1170 
cJSON_Aºay
:

1172 
size_t
 
ödex
 = 0;

1173 
cJSON
 *
‰om_chûd
 = 
‰om
->
chûd
;

1174 
cJSON
 *
to_chûd
 = 
to
->
chûd
;

1175 *
√w_∑th
 = (*)
	`cJSON_mÆloc
(
	`°æí
((c⁄° *)
∑th
) + 20 + ("/"));

1178 
ödex
 = 0; (
‰om_chûd
 !
NULL
Ë&& (
to_chûd
 !NULL); ()(‰om_chûd = from_chûd->
√xt
), ()(to_child =Åo_child->next), index++)

1183 i‡(
ödex
 > 
ULONG_MAX
)

1185 
	`cJSON_‰ì
(
√w_∑th
);

1188 
	`•rötf
((*)
√w_∑th
, "%s/%lu", 
∑th
, ()
ödex
);

1189 
	`¸óã_∑tches
(
∑tches
, 
√w_∑th
, 
‰om_chûd
, 
to_chûd
, 
ˇ£_£nsôive
);

1193 ; (
‰om_chûd
 !
NULL
); ()(‰om_chûd = from_chûd->
√xt
))

1198 i‡(
ödex
 > 
ULONG_MAX
)

1200 
	`cJSON_‰ì
(
√w_∑th
);

1203 
	`•rötf
((*)
√w_∑th
, "%lu", ()
ödex
);

1204 
	`compo£_∑tch
(
∑tches
, (c⁄° *)"ªmove", 
∑th
, 
√w_∑th
, 
NULL
);

1207 ; (
to_chûd
 !
NULL
); ()—o_chûd =Åo_chûd->
√xt
), 
ödex
++)

1209 
	`compo£_∑tch
(
∑tches
, (c⁄° *)"add", 
∑th
, (c⁄° *)"-", 
to_chûd
);

1211 
	`cJSON_‰ì
(
√w_∑th
);

1215 
cJSON_Obje˘
:

1217 
cJSON
 *
‰om_chûd
 = 
NULL
;

1218 
cJSON
 *
to_chûd
 = 
NULL
;

1219 
	`s‹t_obje˘
(
‰om
, 
ˇ£_£nsôive
);

1220 
	`s‹t_obje˘
(
to
, 
ˇ£_£nsôive
);

1222 
‰om_chûd
 = 
‰om
->
chûd
;

1223 
to_chûd
 = 
to
->
chûd
;

1225 (
‰om_chûd
 !
NULL
Ë|| (
to_chûd
 != NULL))

1227 
diff
;

1228 i‡(
‰om_chûd
 =
NULL
)

1230 
diff
 = 1;

1232 i‡(
to_chûd
 =
NULL
)

1234 
diff
 = -1;

1238 
diff
 = 
	`com∑ª_°rögs
((*)
‰om_chûd
->
°rög
, (*)
to_chûd
->°rög, 
ˇ£_£nsôive
);

1241 i‡(
diff
 == 0)

1244 
size_t
 
∑th_Àngth
 = 
	`°æí
((c⁄° *)
∑th
);

1245 
size_t
 
‰om_chûd_«me_Àngth
 = 
	`poöãr_ícoded_Àngth
((*)
‰om_chûd
->
°rög
);

1246 *
√w_∑th
 = (*)
	`cJSON_mÆloc
(
∑th_Àngth
 + 
‰om_chûd_«me_Àngth
 + ("/"));

1248 
	`•rötf
((*)
√w_∑th
, "%s/", 
∑th
);

1249 
	`ícode_°rög_as_poöãr
(
√w_∑th
 + 
∑th_Àngth
 + 1, (*)
‰om_chûd
->
°rög
);

1252 
	`¸óã_∑tches
(
∑tches
, 
√w_∑th
, 
‰om_chûd
, 
to_chûd
, 
ˇ£_£nsôive
);

1253 
	`cJSON_‰ì
(
√w_∑th
);

1255 
‰om_chûd
 = from_chûd->
√xt
;

1256 
to_chûd
 =Åo_chûd->
√xt
;

1258 i‡(
diff
 < 0)

1261 
	`compo£_∑tch
(
∑tches
, (c⁄° *)"ªmove", 
∑th
, (*)
‰om_chûd
->
°rög
, 
NULL
);

1263 
‰om_chûd
 = from_chûd->
√xt
;

1268 
	`compo£_∑tch
(
∑tches
, (c⁄° *)"add", 
∑th
, (*)
to_chûd
->
°rög
,Åo_child);

1270 
to_chûd
 =Åo_chûd->
√xt
;

1279 
	}
}

1281 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSONUtûs_Gíî©eP©ches
(
cJSON
 * c⁄° 
‰om
, cJSON * c⁄° 
to
)

1283 
cJSON
 *
∑tches
 = 
NULL
;

1285 i‡((
‰om
 =
NULL
Ë|| (
to
 == NULL))

1287  
NULL
;

1290 
∑tches
 = 
	`cJSON_Cª©eAºay
();

1291 
	`¸óã_∑tches
(
∑tches
, (c⁄° *)"", 
‰om
, 
to
, 
Ál£
);

1293  
∑tches
;

1294 
	}
}

1296 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSONUtûs_Gíî©eP©chesCa£Sísôive
(
cJSON
 * c⁄° 
‰om
, cJSON * c⁄° 
to
)

1298 
cJSON
 *
∑tches
 = 
NULL
;

1300 i‡((
‰om
 =
NULL
Ë|| (
to
 == NULL))

1302  
NULL
;

1305 
∑tches
 = 
	`cJSON_Cª©eAºay
();

1306 
	`¸óã_∑tches
(
∑tches
, (c⁄° *)"", 
‰om
, 
to
, 
åue
);

1308  
∑tches
;

1309 
	}
}

1311 
	$CJSON_PUBLIC
(Ë
	$cJSONUtûs_S‹tObje˘
(
cJSON
 * c⁄° 
obje˘
)

1313 
	`s‹t_obje˘
(
obje˘
, 
Ál£
);

1314 
	}
}

1316 
	$CJSON_PUBLIC
(Ë
	$cJSONUtûs_S‹tObje˘Ca£Sísôive
(
cJSON
 * c⁄° 
obje˘
)

1318 
	`s‹t_obje˘
(
obje˘
, 
åue
);

1319 
	}
}

1321 
cJSON
 *
	$mîge_∑tch
(
cJSON
 *
èrgë
, c⁄° cJSON * c⁄° 
∑tch
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

1323 
cJSON
 *
∑tch_chûd
 = 
NULL
;

1325 i‡(!
	`cJSON_IsObje˘
(
∑tch
))

1328 
	`cJSON_Dñëe
(
èrgë
);

1329  
	`cJSON_Du∂iˇã
(
∑tch
, 1);

1332 i‡(!
	`cJSON_IsObje˘
(
èrgë
))

1334 
	`cJSON_Dñëe
(
èrgë
);

1335 
èrgë
 = 
	`cJSON_Cª©eObje˘
();

1338 
∑tch_chûd
 = 
∑tch
->
chûd
;

1339 
∑tch_chûd
 !
NULL
)

1341 i‡(
	`cJSON_IsNuŒ
(
∑tch_chûd
))

1344 i‡(
ˇ£_£nsôive
)

1346 
	`cJSON_DñëeIãmFromObje˘Ca£Sísôive
(
èrgë
, 
∑tch_chûd
->
°rög
);

1350 
	`cJSON_DñëeIãmFromObje˘
(
èrgë
, 
∑tch_chûd
->
°rög
);

1355 
cJSON
 *
ª∂a˚_me
 = 
NULL
;

1356 
cJSON
 *
ª∂a˚mít
 = 
NULL
;

1358 i‡(
ˇ£_£nsôive
)

1360 
ª∂a˚_me
 = 
	`cJSON_DëachIãmFromObje˘Ca£Sísôive
(
èrgë
, 
∑tch_chûd
->
°rög
);

1364 
ª∂a˚_me
 = 
	`cJSON_DëachIãmFromObje˘
(
èrgë
, 
∑tch_chûd
->
°rög
);

1367 
ª∂a˚mít
 = 
	`mîge_∑tch
(
ª∂a˚_me
, 
∑tch_chûd
, 
ˇ£_£nsôive
);

1368 i‡(
ª∂a˚mít
 =
NULL
)

1370  
NULL
;

1373 
	`cJSON_AddIãmToObje˘
(
èrgë
, 
∑tch_chûd
->
°rög
, 
ª∂a˚mít
);

1375 
∑tch_chûd
 =Ö©ch_chûd->
√xt
;

1377  
èrgë
;

1378 
	}
}

1380 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSONUtûs_MîgeP©ch
(
cJSON
 *
èrgë
, c⁄° cJSON * c⁄° 
∑tch
)

1382  
	`mîge_∑tch
(
èrgë
, 
∑tch
, 
Ál£
);

1383 
	}
}

1385 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSONUtûs_MîgeP©chCa£Sísôive
(
cJSON
 *
èrgë
, c⁄° cJSON * c⁄° 
∑tch
)

1387  
	`mîge_∑tch
(
èrgë
, 
∑tch
, 
åue
);

1388 
	}
}

1390 
cJSON
 *
	$gíî©e_mîge_∑tch
(
cJSON
 * c⁄° 
‰om
, cJSON * c⁄° 
to
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

1392 
cJSON
 *
‰om_chûd
 = 
NULL
;

1393 
cJSON
 *
to_chûd
 = 
NULL
;

1394 
cJSON
 *
∑tch
 = 
NULL
;

1395 i‡(
to
 =
NULL
)

1398  
	`cJSON_Cª©eNuŒ
();

1400 i‡(!
	`cJSON_IsObje˘
(
to
Ë|| !cJSON_IsObje˘(
‰om
))

1402  
	`cJSON_Du∂iˇã
(
to
, 1);

1405 
	`s‹t_obje˘
(
‰om
, 
ˇ£_£nsôive
);

1406 
	`s‹t_obje˘
(
to
, 
ˇ£_£nsôive
);

1408 
‰om_chûd
 = 
‰om
->
chûd
;

1409 
to_chûd
 = 
to
->
chûd
;

1410 
∑tch
 = 
	`cJSON_Cª©eObje˘
();

1411 i‡(
∑tch
 =
NULL
)

1413  
NULL
;

1415 
‰om_chûd
 || 
to_chûd
)

1417 
diff
;

1418 i‡(
‰om_chûd
 !
NULL
)

1420 i‡(
to_chûd
 !
NULL
)

1422 
diff
 = 
	`°rcmp
(
‰om_chûd
->
°rög
, 
to_chûd
->string);

1426 
diff
 = -1;

1431 
diff
 = 1;

1434 i‡(
diff
 < 0)

1437 
	`cJSON_AddIãmToObje˘
(
∑tch
, 
‰om_chûd
->
°rög
, 
	`cJSON_Cª©eNuŒ
());

1439 
‰om_chûd
 = from_chûd->
√xt
;

1441 i‡(
diff
 > 0)

1444 
	`cJSON_AddIãmToObje˘
(
∑tch
, 
to_chûd
->
°rög
, 
	`cJSON_Du∂iˇã
(to_child, 1));

1446 
to_chûd
 =Åo_chûd->
√xt
;

1451 i‡(!
	`com∑ª_js⁄
(
‰om_chûd
, 
to_chûd
, 
ˇ£_£nsôive
))

1454 
	`cJSON_AddIãmToObje˘
(
∑tch
, 
to_chûd
->
°rög
, 
	`cJSONUtûs_Gíî©eMîgeP©ch
(
‰om_chûd
,Åo_child));

1458 
‰om_chûd
 = from_chûd->
√xt
;

1459 
to_chûd
 =Åo_chûd->
√xt
;

1462 i‡(
∑tch
->
chûd
 =
NULL
)

1465 
	`cJSON_Dñëe
(
∑tch
);

1466  
NULL
;

1469  
∑tch
;

1470 
	}
}

1472 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSONUtûs_Gíî©eMîgeP©ch
(
cJSON
 * c⁄° 
‰om
, cJSON * c⁄° 
to
)

1474  
	`gíî©e_mîge_∑tch
(
‰om
, 
to
, 
Ál£
);

1475 
	}
}

1477 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSONUtûs_Gíî©eMîgeP©chCa£Sísôive
(
cJSON
 * c⁄° 
‰om
, cJSON * c⁄° 
to
)

1479  
	`gíî©e_mîge_∑tch
(
‰om
, 
to
, 
åue
);

1480 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/cJSON_Utils.h

23 #i‚de‡
cJSON_Utûs__h


24 
	#cJSON_Utûs__h


	)

26 #ifde‡
__˝lu•lus


31 
	~"cJSON.h
"

34 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSONUtûs_GëPoöãr
(cJSON * c⁄° 
obje˘
, c⁄° *
poöãr
);

35 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSONUtûs_GëPoöãrCa£Sísôive
(cJSON * c⁄° 
obje˘
, c⁄° *
poöãr
);

39 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSONUtûs_Gíî©eP©ches
(cJSON * c⁄° 
‰om
, cJSON * c⁄° 
to
);

40 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSONUtûs_Gíî©eP©chesCa£Sísôive
(cJSON * c⁄° 
‰om
, cJSON * c⁄° 
to
);

42 
CJSON_PUBLIC
(Ë
cJSONUtûs_AddP©chToAºay
(
cJSON
 * c⁄° 
¨øy
, c⁄° * c⁄° 
›î©i⁄
, c⁄° * c⁄° 
∑th
, c⁄° cJSON * c⁄° 
vÆue
);

44 
CJSON_PUBLIC
(Ë
cJSONUtûs_AµlyP©ches
(
cJSON
 * c⁄° 
obje˘
, c⁄° cJSON * c⁄° 
∑tches
);

45 
CJSON_PUBLIC
(Ë
cJSONUtûs_AµlyP©chesCa£Sísôive
(
cJSON
 * c⁄° 
obje˘
, c⁄° cJSON * c⁄° 
∑tches
);

70 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSONUtûs_MîgeP©ch
(cJSON *
èrgë
, c⁄° cJSON * c⁄° 
∑tch
);

71 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSONUtûs_MîgeP©chCa£Sísôive
(cJSON *
èrgë
, c⁄° cJSON * c⁄° 
∑tch
);

74 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSONUtûs_Gíî©eMîgeP©ch
(cJSON * c⁄° 
‰om
, cJSON * c⁄° 
to
);

75 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSONUtûs_Gíî©eMîgeP©chCa£Sísôive
(cJSON * c⁄° 
‰om
, cJSON * c⁄° 
to
);

78 
CJSON_PUBLIC
(*Ë
cJSONUtûs_FödPoöãrFromObje˘To
(c⁄° 
cJSON
 * c⁄° 
obje˘
, c⁄° cJSON * c⁄° 
èrgë
);

81 
CJSON_PUBLIC
(Ë
cJSONUtûs_S‹tObje˘
(
cJSON
 * c⁄° 
obje˘
);

82 
CJSON_PUBLIC
(Ë
cJSONUtûs_S‹tObje˘Ca£Sísôive
(
cJSON
 * c⁄° 
obje˘
);

84 #ifde‡
__˝lu•lus


	@open_source_lib/cJSON/cJSON-1.7.15/fuzzing/afl.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"../cJSON.h
"

29 *
	$ªad_fûe
(c⁄° *
fûíame
)

31 
FILE
 *
fûe
 = 
NULL
;

32 
Àngth
 = 0;

33 *
c⁄ã¡
 = 
NULL
;

34 
size_t
 
ªad_ch¨s
 = 0;

37 
fûe
 = 
	`f›í
(
fûíame
, "rb");

38 i‡(
fûe
 =
NULL
)

40 
˛ónup
;

44 i‡(
	`f£ek
(
fûe
, 0, 
SEEK_END
) != 0)

46 
˛ónup
;

48 
Àngth
 = 
	`·ñl
(
fûe
);

49 i‡(
Àngth
 < 0)

51 
˛ónup
;

53 i‡(
	`f£ek
(
fûe
, 0, 
SEEK_SET
) != 0)

55 
˛ónup
;

59 
c⁄ã¡
 = (*)
	`mÆloc
((
size_t
)
Àngth
 + (""));

60 i‡(
c⁄ã¡
 =
NULL
)

62 
˛ónup
;

66 
ªad_ch¨s
 = 
	`‰ód
(
c⁄ã¡
, (), (
size_t
)
Àngth
, 
fûe
);

67 i‡(()
ªad_ch¨s
 !
Àngth
)

69 
	`‰ì
(
c⁄ã¡
);

70 
c⁄ã¡
 = 
NULL
;

71 
˛ónup
;

73 
c⁄ã¡
[
ªad_ch¨s
] = '\0';

76 
˛ónup
:

77 i‡(
fûe
 !
NULL
)

79 
	`f˛o£
(
fûe
);

82  
c⁄ã¡
;

83 
	}
}

85 
	$maö
(
¨gc
, ** 
¨gv
)

87 c⁄° *
fûíame
 = 
NULL
;

88 
cJSON
 *
ôem
 = 
NULL
;

89 *
js⁄
 = 
NULL
;

90 
°©us
 = 
EXIT_FAILURE
;

91 *
¥öãd_js⁄
 = 
NULL
;

93 i‡((
¨gc
 < 2) || (argc > 3))

95 
	`¥ötf
("Usage:\n");

96 
	`¥ötf
("%†öput_fûê[íabÀ_¥ötög]\n", 
¨gv
[0]);

97 
	`¥ötf
("\t input_file: file containingÅheÅest data\n");

98 
	`¥ötf
("\tÉnable_printing:ÖrintáfterÖarsing, 'yes' or 'no', defaultsÅo 'no'\n");

99 
˛ónup
;

102 
fûíame
 = 
¨gv
[1];

104 #i‡
__AFL_HAVE_MANUAL_CONTROL


105 
	`__AFL_LOOP
(1000))

108 
°©us
 = 
EXIT_SUCCESS
;

110 
js⁄
 = 
	`ªad_fûe
(
fûíame
);

111 i‡((
js⁄
 =
NULL
) || (json[0] == '\0') || (json[1] == '\0'))

113 
°©us
 = 
EXIT_FAILURE
;

114 
˛ónup
;

116 
ôem
 = 
	`cJSON_P¨£
(
js⁄
 + 2);

117 i‡(
ôem
 =
NULL
)

119 
˛ónup
;

122 i‡((
¨gc
 =3Ë&& (
	`°∫cmp
(
¨gv
[2], "yes", 3) == 0))

124 
do_f‹m©
 = 0;

125 i‡(
js⁄
[1] == 'f')

127 
do_f‹m©
 = 1;

130 i‡(
js⁄
[0] == 'b')

133 
¥öãd_js⁄
 = 
	`cJSON_PrötBuf„ªd
(
ôem
, 1, 
do_f‹m©
);

138 i‡(
do_f‹m©
)

140 
¥öãd_js⁄
 = 
	`cJSON_Pröt
(
ôem
);

144 
¥öãd_js⁄
 = 
	`cJSON_PrötUnf‹m©ãd
(
ôem
);

147 i‡(
¥öãd_js⁄
 =
NULL
)

149 
°©us
 = 
EXIT_FAILURE
;

150 
˛ónup
;

152 
	`¥ötf
("%s\n", 
¥öãd_js⁄
);

155 
˛ónup
:

156 i‡(
ôem
 !
NULL
)

158 
	`cJSON_Dñëe
(
ôem
);

159 
ôem
 = 
NULL
;

161 i‡(
js⁄
 !
NULL
)

163 
	`‰ì
(
js⁄
);

164 
js⁄
 = 
NULL
;

166 i‡(
¥öãd_js⁄
 !
NULL
)

168 
	`‰ì
(
¥öãd_js⁄
);

169 
¥öãd_js⁄
 = 
NULL
;

171 #i‡
__AFL_HAVE_MANUAL_CONTROL


175  
°©us
;

176 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/fuzzing/cjson_read_fuzzer.c

1 
	~<°dlib.h
>

2 
	~<°döt.h
>

3 
	~<°rög.h
>

5 #ifde‡
__˝lu•lus


9 
	~"../cJSON.h
"

11 
LLVMFuzzîTe°O√I≈ut
(c⁄° 
uöt8_t
* 
d©a
, 
size_t
 
size
);

13 
LLVMFuzzîTe°O√I≈ut
(c⁄° 
uöt8_t
* 
d©a
, 
size_t
 
size
)

15 
cJSON
 *
js⁄
;

16 
size_t
 
off£t
 = 4;

17 *
c›õd
;

18 *
¥öãd_js⁄
 = 
NULL
;

19 
möify
, 
ªquúe_ãrmö©i⁄
, 
f‹m©ãd
, 
buf„ªd
;

22 if(
size
 <
off£t
)  0;

23 if(
d©a
[
size
-1] != '\0')  0;

24 if(
d©a
[0] != '1' && data[0] != '0')  0;

25 if(
d©a
[1] != '1' && data[1] != '0')  0;

26 if(
d©a
[2] != '1' && data[2] != '0')  0;

27 if(
d©a
[3] != '1' && data[3] != '0')  0;

29 
möify
 = 
d©a
[0] == '1' ? 1 : 0;

30 
ªquúe_ãrmö©i⁄
 = 
d©a
[1] == '1' ? 1 : 0;

31 
f‹m©ãd
 = 
d©a
[2] == '1' ? 1 : 0;

32 
buf„ªd
 = 
d©a
[3] == '1' ? 1 : 0;

34 
js⁄
 = 
cJSON_P¨£WôhO±s
((c⁄° *)
d©a
 + 
off£t
, 
NULL
, 
ªquúe_ãrmö©i⁄
);

36 if(
js⁄
 =
NULL
)  0;

38 if(
buf„ªd
)

40 
¥öãd_js⁄
 = 
cJSON_PrötBuf„ªd
(
js⁄
, 1, 
f‹m©ãd
);

45 if(
f‹m©ãd
)

47 
¥öãd_js⁄
 = 
cJSON_Pröt
(
js⁄
);

51 
¥öãd_js⁄
 = 
cJSON_PrötUnf‹m©ãd
(
js⁄
);

55 if(
¥öãd_js⁄
 !
NULL
Ë
‰ì
(printed_json);

57 if(
möify
)

59 
c›õd
 = (*)
mÆloc
(
size
);

60 if(
c›õd
 =
NULL
)  0;

62 
mem˝y
(
c›õd
, 
d©a
, 
size
);

64 
cJSON_Möify
((*)
c›õd
 + 
off£t
);

66 
‰ì
(
c›õd
);

69 
cJSON_Dñëe
(
js⁄
);

74 #ifde‡
__˝lu•lus


	@open_source_lib/cJSON/cJSON-1.7.15/fuzzing/fuzz_main.c

1 
	~<°döt.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

5 
LLVMFuzzîTe°O√I≈ut
(c⁄° 
uöt8_t
* 
d©a
, 
size_t
 
size
);

9 
	$maö
(
¨gc
, **
¨gv
)

11 
FILE
 *
f
;

12 *
buf
 = 
NULL
;

13 
siz_buf
;

15 if(
¨gc
 < 2)

17 
	`Ârötf
(
°dîr
, "no input file\n");

18 
îr
;

21 
f
 = 
	`f›í
(
¨gv
[1], "rb");

22 if(
f
 =
NULL
)

24 
	`Ârötf
(
°dîr
, "îr‹ o≥nög i≈uàfûê%s\n", 
¨gv
[1]);

25 
îr
;

28 
	`f£ek
(
f
, 0, 
SEEK_END
);

30 
siz_buf
 = 
	`·ñl
(
f
);

31 
	`ªwöd
(
f
);

33 if(
siz_buf
 < 1Ë
îr
;

35 
buf
 = (*)
	`mÆloc
((
size_t
)
siz_buf
);

36 if(
buf
 =
NULL
)

38 
	`Ârötf
(
°dîr
, "malloc() failed\n");

39 
îr
;

42 if(
	`‰ód
(
buf
, (
size_t
)
siz_buf
, 1, 
f
) != 1)

44 
	`Ârötf
(
°dîr
, "fread() failed\n");

45 
îr
;

48 ()
	`LLVMFuzzîTe°O√I≈ut
((
uöt8_t
*)
buf
, (
size_t
)
siz_buf
);

50 
îr
:

51 
	`‰ì
(
buf
);

54 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~"cJSON.h
"

29 
	sªc‹d


31 c⁄° *
	m¥ecisi⁄
;

32 
	mœt
;

33 
	ml⁄
;

34 c⁄° *
	maddªss
;

35 c⁄° *
	mcôy
;

36 c⁄° *
	m°©e
;

37 c⁄° *
	mzù
;

38 c⁄° *
	mcou¡ry
;

43 
	$¥öt_¥óŒoˇãd
(
cJSON
 *
roŸ
)

46 *
out
 = 
NULL
;

47 *
buf
 = 
NULL
;

48 *
buf_Áû
 = 
NULL
;

49 
size_t
 
Àn
 = 0;

50 
size_t
 
Àn_Áû
 = 0;

53 
out
 = 
	`cJSON_Pröt
(
roŸ
);

57 
Àn
 = 
	`°æí
(
out
) + 5;

58 
buf
 = (*)
	`mÆloc
(
Àn
);

59 i‡(
buf
 =
NULL
)

61 
	`¥ötf
("FailedÅoállocate memory.\n");

62 
	`exô
(1);

66 
Àn_Áû
 = 
	`°æí
(
out
);

67 
buf_Áû
 = (*)
	`mÆloc
(
Àn_Áû
);

68 i‡(
buf_Áû
 =
NULL
)

70 
	`¥ötf
("FailedÅoállocate memory.\n");

71 
	`exô
(1);

75 i‡(!
	`cJSON_PrötPªÆloˇãd
(
roŸ
, 
buf
, ()
Àn
, 1)) {

76 
	`¥ötf
("cJSON_PrintPreallocated failed!\n");

77 i‡(
	`°rcmp
(
out
, 
buf
) != 0) {

78 
	`¥ötf
("cJSON_PrintPreallocatedÇotÅhe sameás cJSON_Print!\n");

79 
	`¥ötf
("cJSON_Pröàªsu…:\n%s\n", 
out
);

80 
	`¥ötf
("cJSON_PrötPªÆloˇãdÑesu…:\n%s\n", 
buf
);

82 
	`‰ì
(
out
);

83 
	`‰ì
(
buf_Áû
);

84 
	`‰ì
(
buf
);

89 
	`¥ötf
("%s\n", 
buf
);

92 i‡(
	`cJSON_PrötPªÆloˇãd
(
roŸ
, 
buf_Áû
, ()
Àn_Áû
, 1)) {

93 
	`¥ötf
("cJSON_PrintPreallocated failedÅo showÉrror with insufficient memory!\n");

94 
	`¥ötf
("cJSON_Pröàªsu…:\n%s\n", 
out
);

95 
	`¥ötf
("cJSON_PrötPªÆloˇãdÑesu…:\n%s\n", 
buf_Áû
);

96 
	`‰ì
(
out
);

97 
	`‰ì
(
buf_Áû
);

98 
	`‰ì
(
buf
);

102 
	`‰ì
(
out
);

103 
	`‰ì
(
buf_Áû
);

104 
	`‰ì
(
buf
);

106 
	}
}

109 
	$¸óã_obje˘s
()

112 
cJSON
 *
roŸ
 = 
NULL
;

113 
cJSON
 *
fmt
 = 
NULL
;

114 
cJSON
 *
img
 = 
NULL
;

115 
cJSON
 *
thm
 = 
NULL
;

116 
cJSON
 *
Êd
 = 
NULL
;

117 
i
 = 0;

120 c⁄° *
°rögs
[7] =

131 
numbîs
[3][3] =

138 
ids
[4] = { 116, 943, 234, 38793 };

140 
ªc‹d
 
fõlds
[2] =

163 vﬁ©ûê
zîo
 = 0.0;

168 
roŸ
 = 
	`cJSON_Cª©eObje˘
();

169 
	`cJSON_AddIãmToObje˘
(
roŸ
, "«me", 
	`cJSON_Cª©eSåög
("Jack (\"Bee\") Nimble"));

170 
	`cJSON_AddIãmToObje˘
(
roŸ
, "f‹m©", 
fmt
 = 
	`cJSON_Cª©eObje˘
());

171 
	`cJSON_AddSåögToObje˘
(
fmt
, "type", "rect");

172 
	`cJSON_AddNumbîToObje˘
(
fmt
, "width", 1920);

173 
	`cJSON_AddNumbîToObje˘
(
fmt
, "height", 1080);

174 
	`cJSON_AddFÆ£ToObje˘
 (
fmt
, "interlace");

175 
	`cJSON_AddNumbîToObje˘
(
fmt
, "frameÑate", 24);

178 i‡(
	`¥öt_¥óŒoˇãd
(
roŸ
) != 0) {

179 
	`cJSON_Dñëe
(
roŸ
);

180 
	`exô
(
EXIT_FAILURE
);

182 
	`cJSON_Dñëe
(
roŸ
);

185 
roŸ
 = 
	`cJSON_Cª©eSåögAºay
(
°rögs
, 7);

187 i‡(
	`¥öt_¥óŒoˇãd
(
roŸ
) != 0) {

188 
	`cJSON_Dñëe
(
roŸ
);

189 
	`exô
(
EXIT_FAILURE
);

191 
	`cJSON_Dñëe
(
roŸ
);

194 
roŸ
 = 
	`cJSON_Cª©eAºay
();

195 
i
 = 0; i < 3; i++)

197 
	`cJSON_AddIãmToAºay
(
roŸ
, 
	`cJSON_Cª©eI¡Aºay
(
numbîs
[
i
], 3));

202 i‡(
	`¥öt_¥óŒoˇãd
(
roŸ
) != 0) {

203 
	`cJSON_Dñëe
(
roŸ
);

204 
	`exô
(
EXIT_FAILURE
);

206 
	`cJSON_Dñëe
(
roŸ
);

209 
roŸ
 = 
	`cJSON_Cª©eObje˘
();

210 
	`cJSON_AddIãmToObje˘
(
roŸ
, "Image", 
img
 = 
	`cJSON_Cª©eObje˘
());

211 
	`cJSON_AddNumbîToObje˘
(
img
, "Width", 800);

212 
	`cJSON_AddNumbîToObje˘
(
img
, "Height", 600);

213 
	`cJSON_AddSåögToObje˘
(
img
, "Title", "View from 15th Floor");

214 
	`cJSON_AddIãmToObje˘
(
img
, "Thumb«û", 
thm
 = 
	`cJSON_Cª©eObje˘
());

215 
	`cJSON_AddSåögToObje˘
(
thm
, "Url", "http:/*www.example.com/image/481989943");

216 
	`cJSON_AddNumbîToObje˘
(
thm
, "Height", 125);

217 
	`cJSON_AddSåögToObje˘
(
thm
, "Width", "100");

218 
	`cJSON_AddIãmToObje˘
(
img
, "IDs", 
	`cJSON_Cª©eI¡Aºay
(
ids
, 4));

220 i‡(
	`¥öt_¥óŒoˇãd
(
roŸ
) != 0) {

221 
	`cJSON_Dñëe
(
roŸ
);

222 
	`exô
(
EXIT_FAILURE
);

224 
	`cJSON_Dñëe
(
roŸ
);

227 
roŸ
 = 
	`cJSON_Cª©eAºay
();

228 
i
 = 0; i < 2; i++)

230 
	`cJSON_AddIãmToAºay
(
roŸ
, 
Êd
 = 
	`cJSON_Cª©eObje˘
());

231 
	`cJSON_AddSåögToObje˘
(
Êd
, "¥ecisi⁄", 
fõlds
[
i
].
¥ecisi⁄
);

232 
	`cJSON_AddNumbîToObje˘
(
Êd
, "L©ôude", 
fõlds
[
i
].
œt
);

233 
	`cJSON_AddNumbîToObje˘
(
Êd
, "L⁄gôude", 
fõlds
[
i
].
l⁄
);

234 
	`cJSON_AddSåögToObje˘
(
Êd
, "Addªss", 
fõlds
[
i
].
addªss
);

235 
	`cJSON_AddSåögToObje˘
(
Êd
, "Côy", 
fõlds
[
i
].
côy
);

236 
	`cJSON_AddSåögToObje˘
(
Êd
, "Sèã", 
fõlds
[
i
].
°©e
);

237 
	`cJSON_AddSåögToObje˘
(
Êd
, "Zù", 
fõlds
[
i
].
zù
);

238 
	`cJSON_AddSåögToObje˘
(
Êd
, "Cou¡ry", 
fõlds
[
i
].
cou¡ry
);

243 i‡(
	`¥öt_¥óŒoˇãd
(
roŸ
) != 0) {

244 
	`cJSON_Dñëe
(
roŸ
);

245 
	`exô
(
EXIT_FAILURE
);

247 
	`cJSON_Dñëe
(
roŸ
);

249 
roŸ
 = 
	`cJSON_Cª©eObje˘
();

250 
	`cJSON_AddNumbîToObje˘
(
roŸ
, "numbî", 1.0 / 
zîo
);

252 i‡(
	`¥öt_¥óŒoˇãd
(
roŸ
) != 0) {

253 
	`cJSON_Dñëe
(
roŸ
);

254 
	`exô
(
EXIT_FAILURE
);

256 
	`cJSON_Dñëe
(
roŸ
);

257 
	}
}

259 
CJSON_CDECL
 
	$maö
()

262 
	`¥ötf
("Vîsi⁄: %s\n", 
	`cJSON_Vîsi⁄
());

265 
	`¸óã_obje˘s
();

268 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/cjson_add.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

28 
	~"unôy/§c/unôy.h
"

29 
	~"comm⁄.h
"

31 * 
CJSON_CDECL
 
	$Áûög_mÆloc
(
size_t
 
size
)

33 ()
size
;

34  
NULL
;

35 
	}
}

38 
CJSON_CDECL
 
	$n‹mÆ_‰ì
(*
poöãr
)

40 
	`‰ì
(
poöãr
);

41 
	}
}

43 
cJSON_Hooks
 
	gÁûög_hooks
 = {

44 
Áûög_mÆloc
,

45 
n‹mÆ_‰ì


48 
	$cjs⁄_add_nuŒ_should_add_nuŒ
()

50 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

51 
cJSON
 *
nuŒ
 = 
NULL
;

53 
	`cJSON_AddNuŒToObje˘
(
roŸ
, "null");

55 
	`TEST_ASSERT_NOT_NULL
(
nuŒ
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
roŸ
, "null"));

56 
	`TEST_ASSERT_EQUAL_INT
(
nuŒ
->
ty≥
, 
cJSON_NULL
);

58 
	`cJSON_Dñëe
(
roŸ
);

59 
	}
}

61 
	$cjs⁄_add_nuŒ_should_Áû_wôh_nuŒ_poöãrs
()

63 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

65 
	`TEST_ASSERT_NULL
(
	`cJSON_AddNuŒToObje˘
(
NULL
, "null"));

66 
	`TEST_ASSERT_NULL
(
	`cJSON_AddNuŒToObje˘
(
roŸ
, 
NULL
));

68 
	`cJSON_Dñëe
(
roŸ
);

69 
	}
}

71 
	$cjs⁄_add_nuŒ_should_Áû_⁄_Æloˇti⁄_Áûuª
()

73 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

75 
	`cJSON_InôHooks
(&
Áûög_hooks
);

77 
	`TEST_ASSERT_NULL
(
	`cJSON_AddNuŒToObje˘
(
roŸ
, "null"));

79 
	`cJSON_InôHooks
(
NULL
);

81 
	`cJSON_Dñëe
(
roŸ
);

82 
	}
}

84 
	$cjs⁄_add_åue_should_add_åue
()

86 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

87 
cJSON
 *
åue_ôem
 = 
NULL
;

89 
	`cJSON_AddTrueToObje˘
(
roŸ
, "true");

91 
	`TEST_ASSERT_NOT_NULL
(
åue_ôem
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
roŸ
, "true"));

92 
	`TEST_ASSERT_EQUAL_INT
(
åue_ôem
->
ty≥
, 
cJSON_True
);

94 
	`cJSON_Dñëe
(
roŸ
);

95 
	}
}

97 
	$cjs⁄_add_åue_should_Áû_wôh_nuŒ_poöãrs
()

99 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

101 
	`TEST_ASSERT_NULL
(
	`cJSON_AddTrueToObje˘
(
NULL
, "true"));

102 
	`TEST_ASSERT_NULL
(
	`cJSON_AddTrueToObje˘
(
roŸ
, 
NULL
));

104 
	`cJSON_Dñëe
(
roŸ
);

105 
	}
}

107 
	$cjs⁄_add_åue_should_Áû_⁄_Æloˇti⁄_Áûuª
()

109 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

111 
	`cJSON_InôHooks
(&
Áûög_hooks
);

113 
	`TEST_ASSERT_NULL
(
	`cJSON_AddTrueToObje˘
(
roŸ
, "true"));

115 
	`cJSON_InôHooks
(
NULL
);

117 
	`cJSON_Dñëe
(
roŸ
);

118 
	}
}

120 
	$cjs⁄_¸óã_öt_¨øy_should_Áû_⁄_Æloˇti⁄_Áûuª
()

122 
numbîs
[] = {1, 2, 3};

124 
	`cJSON_InôHooks
(&
Áûög_hooks
);

126 
	`TEST_ASSERT_NULL
(
	`cJSON_Cª©eI¡Aºay
(
numbîs
, 3));

128 
	`cJSON_InôHooks
(
NULL
);

129 
	}
}

131 
	$cjs⁄_¸óã_Êﬂt_¨øy_should_Áû_⁄_Æloˇti⁄_Áûuª
()

133 
numbîs
[] = {1.0f, 2.0f, 3.0f};

135 
	`cJSON_InôHooks
(&
Áûög_hooks
);

137 
	`TEST_ASSERT_NULL
(
	`cJSON_Cª©eFlﬂtAºay
(
numbîs
, 3));

139 
	`cJSON_InôHooks
(
NULL
);

140 
	}
}

142 
	$cjs⁄_¸óã_doubÀ_¨øy_should_Áû_⁄_Æloˇti⁄_Áûuª
()

144 
numbîs
[] = {1.0, 2.0, 3.0};

146 
	`cJSON_InôHooks
(&
Áûög_hooks
);

148 
	`TEST_ASSERT_NULL
(
	`cJSON_Cª©eDoubÀAºay
(
numbîs
, 3));

150 
	`cJSON_InôHooks
(
NULL
);

151 
	}
}

153 
	$cjs⁄_¸óã_°rög_¨øy_should_Áû_⁄_Æloˇti⁄_Áûuª
()

155 c⁄° * 
°rögs
[] = {"1", "2", "3"};

157 
	`cJSON_InôHooks
(&
Áûög_hooks
);

159 
	`TEST_ASSERT_NULL
(
	`cJSON_Cª©eSåögAºay
(
°rögs
, 3));

161 
	`cJSON_InôHooks
(
NULL
);

162 
	}
}

164 
	$cjs⁄_add_Ál£_should_add_Ál£
()

166 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

167 
cJSON
 *
Ál£_ôem
 = 
NULL
;

169 
	`cJSON_AddFÆ£ToObje˘
(
roŸ
, "false");

171 
	`TEST_ASSERT_NOT_NULL
(
Ál£_ôem
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
roŸ
, "false"));

172 
	`TEST_ASSERT_EQUAL_INT
(
Ál£_ôem
->
ty≥
, 
cJSON_FÆ£
);

174 
	`cJSON_Dñëe
(
roŸ
);

175 
	}
}

177 
	$cjs⁄_add_Ál£_should_Áû_wôh_nuŒ_poöãrs
()

179 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

181 
	`TEST_ASSERT_NULL
(
	`cJSON_AddFÆ£ToObje˘
(
NULL
, "false"));

182 
	`TEST_ASSERT_NULL
(
	`cJSON_AddFÆ£ToObje˘
(
roŸ
, 
NULL
));

184 
	`cJSON_Dñëe
(
roŸ
);

185 
	}
}

187 
	$cjs⁄_add_Ál£_should_Áû_⁄_Æloˇti⁄_Áûuª
()

189 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

191 
	`cJSON_InôHooks
(&
Áûög_hooks
);

193 
	`TEST_ASSERT_NULL
(
	`cJSON_AddFÆ£ToObje˘
(
roŸ
, "false"));

195 
	`cJSON_InôHooks
(
NULL
);

197 
	`cJSON_Dñëe
(
roŸ
);

198 
	}
}

200 
	$cjs⁄_add_boﬁ_should_add_boﬁ
()

202 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

203 
cJSON
 *
åue_ôem
 = 
NULL
;

204 
cJSON
 *
Ál£_ôem
 = 
NULL
;

207 
	`cJSON_AddBoﬁToObje˘
(
roŸ
, "åue", 
åue
);

208 
	`TEST_ASSERT_NOT_NULL
(
åue_ôem
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
roŸ
, "true"));

209 
	`TEST_ASSERT_EQUAL_INT
(
åue_ôem
->
ty≥
, 
cJSON_True
);

212 
	`cJSON_AddBoﬁToObje˘
(
roŸ
, "Ál£", 
Ál£
);

213 
	`TEST_ASSERT_NOT_NULL
(
Ál£_ôem
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
roŸ
, "false"));

214 
	`TEST_ASSERT_EQUAL_INT
(
Ál£_ôem
->
ty≥
, 
cJSON_FÆ£
);

216 
	`cJSON_Dñëe
(
roŸ
);

217 
	}
}

219 
	$cjs⁄_add_boﬁ_should_Áû_wôh_nuŒ_poöãrs
()

221 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

223 
	`TEST_ASSERT_NULL
(
	`cJSON_AddBoﬁToObje˘
(
NULL
, "Ál£", 
Ál£
));

224 
	`TEST_ASSERT_NULL
(
	`cJSON_AddBoﬁToObje˘
(
roŸ
, 
NULL
, 
Ál£
));

226 
	`cJSON_Dñëe
(
roŸ
);

227 
	}
}

229 
	$cjs⁄_add_boﬁ_should_Áû_⁄_Æloˇti⁄_Áûuª
()

231 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

233 
	`cJSON_InôHooks
(&
Áûög_hooks
);

235 
	`TEST_ASSERT_NULL
(
	`cJSON_AddBoﬁToObje˘
(
roŸ
, "Ál£", 
Ál£
));

237 
	`cJSON_InôHooks
(
NULL
);

239 
	`cJSON_Dñëe
(
roŸ
);

240 
	}
}

242 
	$cjs⁄_add_numbî_should_add_numbî
()

244 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

245 
cJSON
 *
numbî
 = 
NULL
;

247 
	`cJSON_AddNumbîToObje˘
(
roŸ
, "number", 42);

249 
	`TEST_ASSERT_NOT_NULL
(
numbî
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
roŸ
, "number"));

251 
	`TEST_ASSERT_EQUAL_INT
(
numbî
->
ty≥
, 
cJSON_Numbî
);

252 
	`TEST_ASSERT_EQUAL_DOUBLE
(
numbî
->
vÆuedoubÀ
, 42);

253 
	`TEST_ASSERT_EQUAL_INT
(
numbî
->
vÆueöt
, 42);

255 
	`cJSON_Dñëe
(
roŸ
);

256 
	}
}

258 
	$cjs⁄_add_numbî_should_Áû_wôh_nuŒ_poöãrs
()

260 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

262 
	`TEST_ASSERT_NULL
(
	`cJSON_AddNumbîToObje˘
(
NULL
, "number", 42));

263 
	`TEST_ASSERT_NULL
(
	`cJSON_AddNumbîToObje˘
(
roŸ
, 
NULL
, 42));

265 
	`cJSON_Dñëe
(
roŸ
);

266 
	}
}

268 
	$cjs⁄_add_numbî_should_Áû_⁄_Æloˇti⁄_Áûuª
()

270 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

272 
	`cJSON_InôHooks
(&
Áûög_hooks
);

274 
	`TEST_ASSERT_NULL
(
	`cJSON_AddNumbîToObje˘
(
roŸ
, "number", 42));

276 
	`cJSON_InôHooks
(
NULL
);

278 
	`cJSON_Dñëe
(
roŸ
);

279 
	}
}

281 
	$cjs⁄_add_°rög_should_add_°rög
()

283 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

284 
cJSON
 *
°rög
 = 
NULL
;

286 
	`cJSON_AddSåögToObje˘
(
roŸ
, "string", "Hello World!");

288 
	`TEST_ASSERT_NOT_NULL
(
°rög
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
roŸ
, "string"));

289 
	`TEST_ASSERT_EQUAL_INT
(
°rög
->
ty≥
, 
cJSON_Såög
);

290 
	`TEST_ASSERT_EQUAL_STRING
(
°rög
->
vÆue°rög
, "Hello World!");

292 
	`cJSON_Dñëe
(
roŸ
);

293 
	}
}

295 
	$cjs⁄_add_°rög_should_Áû_wôh_nuŒ_poöãrs
()

297 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

299 
	`TEST_ASSERT_NULL
(
	`cJSON_AddSåögToObje˘
(
NULL
, "string", "string"));

300 
	`TEST_ASSERT_NULL
(
	`cJSON_AddSåögToObje˘
(
roŸ
, 
NULL
, "string"));

302 
	`cJSON_Dñëe
(
roŸ
);

303 
	}
}

305 
	$cjs⁄_add_°rög_should_Áû_⁄_Æloˇti⁄_Áûuª
()

307 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

309 
	`cJSON_InôHooks
(&
Áûög_hooks
);

311 
	`TEST_ASSERT_NULL
(
	`cJSON_AddSåögToObje˘
(
roŸ
, "string", "string"));

313 
	`cJSON_InôHooks
(
NULL
);

315 
	`cJSON_Dñëe
(
roŸ
);

316 
	}
}

318 
	$cjs⁄_add_øw_should_add_øw
()

320 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

321 
cJSON
 *
øw
 = 
NULL
;

323 
	`cJSON_AddRawToObje˘
(
roŸ
, "raw", "{}");

325 
	`TEST_ASSERT_NOT_NULL
(
øw
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
roŸ
, "raw"));

326 
	`TEST_ASSERT_EQUAL_INT
(
øw
->
ty≥
, 
cJSON_Raw
);

327 
	`TEST_ASSERT_EQUAL_STRING
(
øw
->
vÆue°rög
, "{}");

329 
	`cJSON_Dñëe
(
roŸ
);

330 
	}
}

332 
	$cjs⁄_add_øw_should_Áû_wôh_nuŒ_poöãrs
()

334 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

336 
	`TEST_ASSERT_NULL
(
	`cJSON_AddRawToObje˘
(
NULL
, "raw", "{}"));

337 
	`TEST_ASSERT_NULL
(
	`cJSON_AddRawToObje˘
(
roŸ
, 
NULL
, "{}"));

339 
	`cJSON_Dñëe
(
roŸ
);

340 
	}
}

342 
	$cjs⁄_add_øw_should_Áû_⁄_Æloˇti⁄_Áûuª
()

344 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

346 
	`cJSON_InôHooks
(&
Áûög_hooks
);

348 
	`TEST_ASSERT_NULL
(
	`cJSON_AddRawToObje˘
(
roŸ
, "raw", "{}"));

350 
	`cJSON_InôHooks
(
NULL
);

352 
	`cJSON_Dñëe
(
roŸ
);

353 
	}
}

355 
	$cJSON_add_obje˘_should_add_obje˘
()

357 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

358 
cJSON
 *
obje˘
 = 
NULL
;

360 
	`cJSON_AddObje˘ToObje˘
(
roŸ
, "object");

361 
	`TEST_ASSERT_NOT_NULL
(
obje˘
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
roŸ
, "object"));

362 
	`TEST_ASSERT_EQUAL_INT
(
obje˘
->
ty≥
, 
cJSON_Obje˘
);

364 
	`cJSON_Dñëe
(
roŸ
);

365 
	}
}

367 
	$cjs⁄_add_obje˘_should_Áû_wôh_nuŒ_poöãrs
()

369 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

371 
	`TEST_ASSERT_NULL
(
	`cJSON_AddObje˘ToObje˘
(
NULL
, "object"));

372 
	`TEST_ASSERT_NULL
(
	`cJSON_AddObje˘ToObje˘
(
roŸ
, 
NULL
));

374 
	`cJSON_Dñëe
(
roŸ
);

375 
	}
}

377 
	$cjs⁄_add_obje˘_should_Áû_⁄_Æloˇti⁄_Áûuª
()

379 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

381 
	`cJSON_InôHooks
(&
Áûög_hooks
);

383 
	`TEST_ASSERT_NULL
(
	`cJSON_AddObje˘ToObje˘
(
roŸ
, "object"));

385 
	`cJSON_InôHooks
(
NULL
);

387 
	`cJSON_Dñëe
(
roŸ
);

388 
	}
}

390 
	$cJSON_add_¨øy_should_add_¨øy
()

392 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

393 
cJSON
 *
¨øy
 = 
NULL
;

395 
	`cJSON_AddAºayToObje˘
(
roŸ
, "array");

396 
	`TEST_ASSERT_NOT_NULL
(
¨øy
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
roŸ
, "array"));

397 
	`TEST_ASSERT_EQUAL_INT
(
¨øy
->
ty≥
, 
cJSON_Aºay
);

399 
	`cJSON_Dñëe
(
roŸ
);

400 
	}
}

402 
	$cjs⁄_add_¨øy_should_Áû_wôh_nuŒ_poöãrs
()

404 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

406 
	`TEST_ASSERT_NULL
(
	`cJSON_AddAºayToObje˘
(
NULL
, "array"));

407 
	`TEST_ASSERT_NULL
(
	`cJSON_AddAºayToObje˘
(
roŸ
, 
NULL
));

409 
	`cJSON_Dñëe
(
roŸ
);

410 
	}
}

412 
	$cjs⁄_add_¨øy_should_Áû_⁄_Æloˇti⁄_Áûuª
()

414 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

416 
	`cJSON_InôHooks
(&
Áûög_hooks
);

418 
	`TEST_ASSERT_NULL
(
	`cJSON_AddAºayToObje˘
(
roŸ
, "array"));

420 
	`cJSON_InôHooks
(
NULL
);

422 
	`cJSON_Dñëe
(
roŸ
);

423 
	}
}

425 
CJSON_CDECL
 
	$maö
()

427 
	`UNITY_BEGIN
();

429 
	`RUN_TEST
(
cjs⁄_add_nuŒ_should_add_nuŒ
);

430 
	`RUN_TEST
(
cjs⁄_add_nuŒ_should_Áû_wôh_nuŒ_poöãrs
);

431 
	`RUN_TEST
(
cjs⁄_add_nuŒ_should_Áû_⁄_Æloˇti⁄_Áûuª
);

433 
	`RUN_TEST
(
cjs⁄_add_åue_should_add_åue
);

434 
	`RUN_TEST
(
cjs⁄_add_åue_should_Áû_wôh_nuŒ_poöãrs
);

435 
	`RUN_TEST
(
cjs⁄_add_åue_should_Áû_⁄_Æloˇti⁄_Áûuª
);

437 
	`RUN_TEST
(
cjs⁄_¸óã_öt_¨øy_should_Áû_⁄_Æloˇti⁄_Áûuª
);

438 
	`RUN_TEST
(
cjs⁄_¸óã_Êﬂt_¨øy_should_Áû_⁄_Æloˇti⁄_Áûuª
);

439 
	`RUN_TEST
(
cjs⁄_¸óã_doubÀ_¨øy_should_Áû_⁄_Æloˇti⁄_Áûuª
);

440 
	`RUN_TEST
(
cjs⁄_¸óã_°rög_¨øy_should_Áû_⁄_Æloˇti⁄_Áûuª
);

442 
	`RUN_TEST
(
cjs⁄_add_Ál£_should_add_Ál£
);

443 
	`RUN_TEST
(
cjs⁄_add_Ál£_should_Áû_wôh_nuŒ_poöãrs
);

444 
	`RUN_TEST
(
cjs⁄_add_Ál£_should_Áû_⁄_Æloˇti⁄_Áûuª
);

446 
	`RUN_TEST
(
cjs⁄_add_boﬁ_should_add_boﬁ
);

447 
	`RUN_TEST
(
cjs⁄_add_boﬁ_should_Áû_wôh_nuŒ_poöãrs
);

448 
	`RUN_TEST
(
cjs⁄_add_boﬁ_should_Áû_⁄_Æloˇti⁄_Áûuª
);

450 
	`RUN_TEST
(
cjs⁄_add_numbî_should_add_numbî
);

451 
	`RUN_TEST
(
cjs⁄_add_numbî_should_Áû_wôh_nuŒ_poöãrs
);

452 
	`RUN_TEST
(
cjs⁄_add_numbî_should_Áû_⁄_Æloˇti⁄_Áûuª
);

454 
	`RUN_TEST
(
cjs⁄_add_°rög_should_add_°rög
);

455 
	`RUN_TEST
(
cjs⁄_add_°rög_should_Áû_wôh_nuŒ_poöãrs
);

456 
	`RUN_TEST
(
cjs⁄_add_°rög_should_Áû_⁄_Æloˇti⁄_Áûuª
);

458 
	`RUN_TEST
(
cjs⁄_add_øw_should_add_øw
);

459 
	`RUN_TEST
(
cjs⁄_add_øw_should_Áû_wôh_nuŒ_poöãrs
);

460 
	`RUN_TEST
(
cjs⁄_add_øw_should_Áû_⁄_Æloˇti⁄_Áûuª
);

462 
	`RUN_TEST
(
cJSON_add_obje˘_should_add_obje˘
);

463 
	`RUN_TEST
(
cjs⁄_add_obje˘_should_Áû_wôh_nuŒ_poöãrs
);

464 
	`RUN_TEST
(
cjs⁄_add_obje˘_should_Áû_⁄_Æloˇti⁄_Áûuª
);

466 
	`RUN_TEST
(
cJSON_add_¨øy_should_add_¨øy
);

467 
	`RUN_TEST
(
cjs⁄_add_¨øy_should_Áû_wôh_nuŒ_poöãrs
);

468 
	`RUN_TEST
(
cjs⁄_add_¨øy_should_Áû_⁄_Æloˇti⁄_Áûuª
);

470  
	`UNITY_END
();

471 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/common.h

23 #i‚de‡
CJSON_TESTS_COMMON_H


24 
	#CJSON_TESTS_COMMON_H


	)

26 
	~"../cJSON.c
"

28 
ª£t
(
cJSON
 *
ôem
);

29 
	$ª£t
(
cJSON
 *
ôem
) {

30 i‡((
ôem
 !
NULL
Ë&& (ôem->
chûd
 != NULL))

32 
	`cJSON_Dñëe
(
ôem
->
chûd
);

34 i‡((
ôem
->
vÆue°rög
 !
NULL
Ë&& !(ôem->
ty≥
 & 
cJSON_IsRe„ªn˚
))

36 
globÆ_hooks
.
	`dóŒoˇã
(
ôem
->
vÆue°rög
);

38 i‡((
ôem
->
°rög
 !
NULL
Ë&& !(ôem->
ty≥
 & 
cJSON_SåögIsC⁄°
))

40 
globÆ_hooks
.
	`dóŒoˇã
(
ôem
->
°rög
);

43 
	`mem£t
(
ôem
, 0, (
cJSON
));

44 
	}
}

46 * 
ªad_fûe
(c⁄° *
fûíame
);

47 * 
	$ªad_fûe
(c⁄° *
fûíame
) {

48 
FILE
 *
fûe
 = 
NULL
;

49 
Àngth
 = 0;

50 *
c⁄ã¡
 = 
NULL
;

51 
size_t
 
ªad_ch¨s
 = 0;

54 
fûe
 = 
	`f›í
(
fûíame
, "rb");

55 i‡(
fûe
 =
NULL
)

57 
˛ónup
;

61 i‡(
	`f£ek
(
fûe
, 0, 
SEEK_END
) != 0)

63 
˛ónup
;

65 
Àngth
 = 
	`·ñl
(
fûe
);

66 i‡(
Àngth
 < 0)

68 
˛ónup
;

70 i‡(
	`f£ek
(
fûe
, 0, 
SEEK_SET
) != 0)

72 
˛ónup
;

76 
c⁄ã¡
 = (*)
	`mÆloc
((
size_t
)
Àngth
 + (""));

77 i‡(
c⁄ã¡
 =
NULL
)

79 
˛ónup
;

83 
ªad_ch¨s
 = 
	`‰ód
(
c⁄ã¡
, (), (
size_t
)
Àngth
, 
fûe
);

84 i‡(()
ªad_ch¨s
 !
Àngth
)

86 
	`‰ì
(
c⁄ã¡
);

87 
c⁄ã¡
 = 
NULL
;

88 
˛ónup
;

90 
c⁄ã¡
[
ªad_ch¨s
] = '\0';

93 
˛ónup
:

94 i‡(
fûe
 !
NULL
)

96 
	`f˛o£
(
fûe
);

99  
c⁄ã¡
;

100 
	}
}

103 
	#as£π_has_ty≥
(
ôem
, 
ôem_ty≥
Ë
	`TEST_ASSERT_BITS_MESSAGE
(0xFF, iãm_ty≥, iãm->
ty≥
, "Iãm d€¢'àhavêex≥˘edÅy≥.")

	)

104 
	#as£π_has_no_ª„ªn˚
(
ôem
Ë
	`TEST_ASSERT_BITS_MESSAGE
(
cJSON_IsRe„ªn˚
, 0, iãm->
ty≥
, "Iãm shouldÇŸ havê®°rögá†ª„ªn˚.")

	)

105 
	#as£π_has_no_c⁄°_°rög
(
ôem
Ë
	`TEST_ASSERT_BITS_MESSAGE
(
cJSON_SåögIsC⁄°
, 0, iãm->
ty≥
, "Iãm shouldÇŸ havê®c⁄° såög.")

	)

106 
	#as£π_has_vÆue°rög
(
ôem
Ë
	`TEST_ASSERT_NOT_NULL_MESSAGE
(ôem->
vÆue°rög
, "VÆue°rög i†NULL.")

	)

107 
	#as£π_has_no_vÆue°rög
(
ôem
Ë
	`TEST_ASSERT_NULL_MESSAGE
(ôem->
vÆue°rög
, "VÆue°rög i†nŸ NULL.")

	)

108 
	#as£π_has_°rög
(
ôem
Ë
	`TEST_ASSERT_NOT_NULL_MESSAGE
(ôem->
°rög
, "Såög i†NULL")

	)

109 
	#as£π_has_no_°rög
(
ôem
Ë
	`TEST_ASSERT_NULL_MESSAGE
(ôem->
°rög
, "Såög i†nŸ NULL.")

	)

110 
	#as£π_nŸ_ö_li°
(
ôem
) \

111 
	`TEST_ASSERT_NULL_MESSAGE
(
ôem
->
√xt
, "LinkedÜistÇextÖointer isÇot NULL.");\

112 
	`TEST_ASSERT_NULL_MESSAGE
(
ôem
->
¥ev
, "LökedÜi°Öªviou†poöã∏i†nŸ NULL.")

	)

113 
	#as£π_has_chûd
(
ôem
Ë
	`TEST_ASSERT_NOT_NULL_MESSAGE
(ôem->
chûd
, "Iãm d€¢'àhavê®chûd.")

	)

114 
	#as£π_has_no_chûd
(
ôem
Ë
	`TEST_ASSERT_NULL_MESSAGE
(ôem->
chûd
, "Iãm ha†®chûd.")

	)

115 
	#as£π_is_övÆid
(
ôem
) \

116 
	`as£π_has_ty≥
(
ôem
, 
cJSON_InvÆid
);\

117 
	`as£π_nŸ_ö_li°
(
ôem
);\

118 
	`as£π_has_no_chûd
(
ôem
);\

119 
	`as£π_has_no_°rög
(
ôem
);\

120 
	`as£π_has_no_vÆue°rög
(
ôem
)

	)

	@open_source_lib/cJSON/cJSON-1.7.15/tests/compare_tests.c

23 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

24 
	~"unôy/§c/unôy.h
"

25 
	~"comm⁄.h
"

27 
cJSON_boﬁ
 
	$com∑ª_‰om_°rög
(c⁄° * c⁄° 
a
, c⁄° * c⁄° 
b
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

29 
cJSON
 *
a_js⁄
 = 
NULL
;

30 
cJSON
 *
b_js⁄
 = 
NULL
;

31 
cJSON_boﬁ
 
ªsu…
 = 
Ál£
;

33 
a_js⁄
 = 
	`cJSON_P¨£
(
a
);

34 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
a_js⁄
, "FailedÅoÖarseá.");

35 
b_js⁄
 = 
	`cJSON_P¨£
(
b
);

36 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
b_js⁄
, "FailedÅoÖarse b.");

38 
ªsu…
 = 
	`cJSON_Com∑ª
(
a_js⁄
, 
b_js⁄
, 
ˇ£_£nsôive
);

40 
	`cJSON_Dñëe
(
a_js⁄
);

41 
	`cJSON_Dñëe
(
b_js⁄
);

43  
ªsu…
;

44 
	}
}

46 
	$cjs⁄_com∑ª_should_com∑ª_nuŒ_poöãr_as_nŸ_equÆ
()

48 
	`TEST_ASSERT_FALSE
(
	`cJSON_Com∑ª
(
NULL
, NULL, 
åue
));

49 
	`TEST_ASSERT_FALSE
(
	`cJSON_Com∑ª
(
NULL
, NULL, 
Ál£
));

50 
	}
}

52 
	$cjs⁄_com∑ª_should_com∑ª_övÆid_as_nŸ_equÆ
()

54 
cJSON
 
övÆid
[1];

55 
	`mem£t
(
övÆid
, '\0', (invalid));

57 
	`TEST_ASSERT_FALSE
(
	`cJSON_Com∑ª
(
övÆid
, invÆid, 
Ál£
));

58 
	`TEST_ASSERT_FALSE
(
	`cJSON_Com∑ª
(
övÆid
, invÆid, 
åue
));

59 
	}
}

61 
	$cjs⁄_com∑ª_should_com∑ª_numbîs
()

63 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("1", "1", 
åue
));

64 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("1", "1", 
Ál£
));

65 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("0.0001", "0.0001", 
åue
));

66 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("0.0001", "0.0001", 
Ál£
));

67 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("1E100", "10E99", 
Ál£
));

69 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
("0.5E-100", "0.5E-101", 
Ál£
));

71 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
("1", "2", 
åue
));

72 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
("1", "2", 
Ál£
));

73 
	}
}

75 
	$cjs⁄_com∑ª_should_com∑ª_boﬁóns
()

78 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("åue", "åue", 
åue
));

79 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("åue", "åue", 
Ál£
));

82 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("Ál£", "Ál£", 
åue
));

83 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("Ál£", "Ál£", 
Ál£
));

86 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
("åue", "Ál£", 
åue
));

87 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
("åue", "Ál£", 
Ál£
));

88 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
("Ál£", "åue", 
åue
));

89 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
("Ál£", "åue", 
Ál£
));

90 
	}
}

92 
	$cjs⁄_com∑ª_should_com∑ª_nuŒ
()

94 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("nuŒ", "nuŒ", 
åue
));

95 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("nuŒ", "nuŒ", 
Ál£
));

97 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
("nuŒ", "åue", 
åue
));

98 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
("nuŒ", "åue", 
Ál£
));

99 
	}
}

101 
	$cjs⁄_com∑ª_should_nŸ_ac˚±_övÆid_ty≥s
()

103 
cJSON
 
övÆid
[1];

104 
	`mem£t
(
övÆid
, '\0', (invalid));

106 
övÆid
->
ty≥
 = 
cJSON_Numbî
 | 
cJSON_Såög
;

108 
	`TEST_ASSERT_FALSE
(
	`cJSON_Com∑ª
(
övÆid
, invÆid, 
åue
));

109 
	`TEST_ASSERT_FALSE
(
	`cJSON_Com∑ª
(
övÆid
, invÆid, 
Ál£
));

110 
	}
}

112 
	$cjs⁄_com∑ª_should_com∑ª_°rögs
()

114 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("\"abcdefg\"", "\"abcdefg\"", 
åue
));

115 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("\"abcdefg\"", "\"abcdefg\"", 
Ál£
));

117 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
("\"ABCDEFG\"", "\"abcdefg\"", 
åue
));

118 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
("\"ABCDEFG\"", "\"abcdefg\"", 
Ál£
));

119 
	}
}

121 
	$cjs⁄_com∑ª_should_com∑ª_øw
()

123 
cJSON
 *
øw1
 = 
NULL
;

124 
cJSON
 *
øw2
 = 
NULL
;

126 
øw1
 = 
	`cJSON_P¨£
("\"[true, false]\"");

127 
	`TEST_ASSERT_NOT_NULL
(
øw1
);

128 
øw2
 = 
	`cJSON_P¨£
("\"[true, false]\"");

129 
	`TEST_ASSERT_NOT_NULL
(
øw2
);

131 
øw1
->
ty≥
 = 
cJSON_Raw
;

132 
øw2
->
ty≥
 = 
cJSON_Raw
;

134 
	`TEST_ASSERT_TRUE
(
	`cJSON_Com∑ª
(
øw1
, 
øw2
, 
åue
));

135 
	`TEST_ASSERT_TRUE
(
	`cJSON_Com∑ª
(
øw1
, 
øw2
, 
Ál£
));

137 
	`cJSON_Dñëe
(
øw1
);

138 
	`cJSON_Dñëe
(
øw2
);

139 
	}
}

141 
	$cjs⁄_com∑ª_should_com∑ª_¨øys
()

143 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("[]", "[]", 
åue
));

144 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("[]", "[]", 
Ál£
));

146 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("[Ál£,åue,nuŒ,42,\"°rög\",[],{}]", "[Ál£,Årue,ÇuŒ, 42, \"°rög\", [], {}]", 
åue
));

147 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("[Ál£,åue,nuŒ,42,\"°rög\",[],{}]", "[Ál£,Årue,ÇuŒ, 42, \"°rög\", [], {}]", 
Ál£
));

149 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("[[[1], 2]]", "[[[1], 2]]", 
åue
));

150 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("[[[1], 2]]", "[[[1], 2]]", 
Ál£
));

152 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
("[åue,nuŒ,42,\"°rög\",[],{}]", "[Ál£,Årue,ÇuŒ, 42, \"°rög\", [], {}]", 
åue
));

153 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
("[åue,nuŒ,42,\"°rög\",[],{}]", "[Ál£,Årue,ÇuŒ, 42, \"°rög\", [], {}]", 
Ál£
));

156 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
("[1,2,3]", "[1,2]", 
åue
));

157 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
("[1,2,3]", "[1,2]", 
Ál£
));

158 
	}
}

160 
	$cjs⁄_com∑ª_should_com∑ª_obje˘s
()

162 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("{}", "{}", 
åue
));

163 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
("{}", "{}", 
Ál£
));

165 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
(

168 
åue
));

169 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
(

172 
åue
));

173 
	`TEST_ASSERT_TRUE
(
	`com∑ª_‰om_°rög
(

176 
Ál£
));

177 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
(

180 
Ál£
));

182 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
(

185 
åue
))

186 
	`TEST_ASSERT_FALSE
(
	`com∑ª_‰om_°rög
(

189 
Ál£
))

190 
	}
}

192 
CJSON_CDECL
 
	$maö
()

194 
	`UNITY_BEGIN
();

196 
	`RUN_TEST
(
cjs⁄_com∑ª_should_com∑ª_nuŒ_poöãr_as_nŸ_equÆ
);

197 
	`RUN_TEST
(
cjs⁄_com∑ª_should_com∑ª_övÆid_as_nŸ_equÆ
);

198 
	`RUN_TEST
(
cjs⁄_com∑ª_should_com∑ª_numbîs
);

199 
	`RUN_TEST
(
cjs⁄_com∑ª_should_com∑ª_boﬁóns
);

200 
	`RUN_TEST
(
cjs⁄_com∑ª_should_com∑ª_nuŒ
);

201 
	`RUN_TEST
(
cjs⁄_com∑ª_should_nŸ_ac˚±_övÆid_ty≥s
);

202 
	`RUN_TEST
(
cjs⁄_com∑ª_should_com∑ª_°rögs
);

203 
	`RUN_TEST
(
cjs⁄_com∑ª_should_com∑ª_øw
);

204 
	`RUN_TEST
(
cjs⁄_com∑ª_should_com∑ª_¨øys
);

205 
	`RUN_TEST
(
cjs⁄_com∑ª_should_com∑ª_obje˘s
);

207  
	`UNITY_END
();

208 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/json_patch_tests.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

28 
	~"unôy/§c/unôy.h
"

29 
	~"comm⁄.h
"

30 
	~"../cJSON_Utûs.h
"

32 
cJSON
 *
	$∑r£_ã°_fûe
(c⁄° * c⁄° 
fûíame
)

34 *
fûe
 = 
NULL
;

35 
cJSON
 *
js⁄
 = 
NULL
;

37 
fûe
 = 
	`ªad_fûe
(
fûíame
);

38 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
fûe
, "FailedÅoÑead file.");

40 
js⁄
 = 
	`cJSON_P¨£
(
fûe
);

41 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
js⁄
, "FailedÅoÖarseÅest json.");

42 
	`TEST_ASSERT_TRUE_MESSAGE
(
	`cJSON_IsAºay
(
js⁄
), "Json isÇotánárray.");

44 
	`‰ì
(
fûe
);

46  
js⁄
;

47 
	}
}

49 
cJSON_boﬁ
 
	$ã°_≠∂y_∑tch
(c⁄° 
cJSON
 * c⁄° 
ã°
)

51 
cJSON
 *
doc
 = 
NULL
;

52 
cJSON
 *
∑tch
 = 
NULL
;

53 
cJSON
 *
ex≥˘ed
 = 
NULL
;

54 
cJSON
 *
îr‹_ñemít
 = 
NULL
;

55 
cJSON
 *
commít
 = 
NULL
;

56 
cJSON
 *
dißbÀd
 = 
NULL
;

58 
cJSON
 *
obje˘
 = 
NULL
;

59 
cJSON_boﬁ
 
suc˚ssful
 = 
Ál£
;

62 
commít
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
ã°
, "comment");

63 i‡(
	`cJSON_IsSåög
(
commít
))

65 
	`¥ötf
("Te°ög \"%s\"\n", 
commít
->
vÆue°rög
);

69 
	`¥ötf
("Testing unknown\n");

72 
dißbÀd
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
ã°
, "disabled");

73 i‡(
	`cJSON_IsTrue
(
dißbÀd
))

75 
	`¥ötf
("SKIPPED\n");

76  
åue
;

79 
doc
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
ã°
, "doc");

80 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
doc
, "No \"doc\" inÅheÅest.");

81 
∑tch
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
ã°
, "patch");

82 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
∑tch
, "No \"patch\"inÅheÅest.");

84 
obje˘
 = 
	`cJSON_Du∂iˇã
(
doc
, 
åue
);

85 
	`TEST_ASSERT_NOT_NULL
(
obje˘
);

87 
ex≥˘ed
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
ã°
, "expected");

88 
îr‹_ñemít
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
ã°
, "error");

89 i‡(
îr‹_ñemít
 !
NULL
)

92 
	`TEST_ASSERT_TRUE_MESSAGE
(0 !
	`cJSONUtûs_AµlyP©chesCa£Sísôive
(
obje˘
, 
∑tch
), "Test didn't failás it's supposedÅo.");

94 
suc˚ssful
 = 
åue
;

99 
	`TEST_ASSERT_EQUAL_INT_MESSAGE
(0, 
	`cJSONUtûs_AµlyP©chesCa£Sísôive
(
obje˘
, 
∑tch
), "FailedÅoápplyÖatches.");

100 
suc˚ssful
 = 
åue
;

102 i‡(
ex≥˘ed
 !
NULL
)

104 
suc˚ssful
 = 
	`cJSON_Com∑ª
(
obje˘
, 
ex≥˘ed
, 
åue
);

108 
	`cJSON_Dñëe
(
obje˘
);

110 i‡(
suc˚ssful
)

112 
	`¥ötf
("OK\n");

116 
	`¥ötf
("FAILED\n");

119  
suc˚ssful
;

120 
	}
}

122 
cJSON_boﬁ
 
	$ã°_gíî©e_ã°
(
cJSON
 *
ã°
)

124 
cJSON
 *
doc
 = 
NULL
;

125 
cJSON
 *
∑tch
 = 
NULL
;

126 
cJSON
 *
ex≥˘ed
 = 
NULL
;

127 
cJSON
 *
dißbÀd
 = 
NULL
;

129 
cJSON
 *
obje˘
 = 
NULL
;

130 
cJSON_boﬁ
 
suc˚ssful
 = 
Ál£
;

132 *
¥öãd_∑tch
 = 
NULL
;

134 
dißbÀd
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
ã°
, "disabled");

135 i‡(
	`cJSON_IsTrue
(
dißbÀd
))

137 
	`¥ötf
("SKIPPED\n");

138  
åue
;

141 
doc
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
ã°
, "doc");

142 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
doc
, "No \"doc\" inÅheÅest.");

145 
obje˘
 = 
	`cJSON_Du∂iˇã
(
doc
, 
åue
);

146 
	`TEST_ASSERT_NOT_NULL
(
obje˘
);

148 
ex≥˘ed
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
ã°
, "expected");

149 i‡(
ex≥˘ed
 =
NULL
)

151 
	`cJSON_Dñëe
(
obje˘
);

153  
åue
;

156 
∑tch
 = 
	`cJSONUtûs_Gíî©eP©chesCa£Sísôive
(
doc
, 
ex≥˘ed
);

157 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
∑tch
, "FailedÅo generateÖatches.");

159 
¥öãd_∑tch
 = 
	`cJSON_Pröt
(
∑tch
);

160 
	`¥ötf
("%s\n", 
¥öãd_∑tch
);

161 
	`‰ì
(
¥öãd_∑tch
);

164 
	`TEST_ASSERT_EQUAL_INT_MESSAGE
(0, 
	`cJSONUtûs_AµlyP©chesCa£Sísôive
(
obje˘
, 
∑tch
), "FailedÅoápply generatedÖatch.");

166 
suc˚ssful
 = 
	`cJSON_Com∑ª
(
obje˘
, 
ex≥˘ed
, 
åue
);

168 
	`cJSON_Dñëe
(
∑tch
);

169 
	`cJSON_Dñëe
(
obje˘
);

171 i‡(
suc˚ssful
)

173 
	`¥ötf
("generatedÖatch: OK\n");

177 
	`¥ötf
("generatedÖatch: FAILED\n");

180  
suc˚ssful
;

181 
	}
}

183 
	$cjs⁄_utûs_should_∑ss_js⁄_∑tch_ã°_ã°s
()

185 
cJSON
 *
ã°s
 = 
	`∑r£_ã°_fûe
("json-patch-tests/tests.json");

186 
cJSON
 *
ã°
 = 
NULL
;

188 
cJSON_boﬁ
 
Áûed
 = 
Ál£
;

189 
	`cJSON_AºayF‹Each
(
ã°
, 
ã°s
)

191 
Áûed
 |!
	`ã°_≠∂y_∑tch
(
ã°
);

192 
Áûed
 |!
	`ã°_gíî©e_ã°
(
ã°
);

195 
	`cJSON_Dñëe
(
ã°s
);

197 
	`TEST_ASSERT_FALSE_MESSAGE
(
Áûed
, "SomeÅests failed.");

198 
	}
}

200 
	$cjs⁄_utûs_should_∑ss_js⁄_∑tch_ã°_•ec_ã°s
()

202 
cJSON
 *
ã°s
 = 
	`∑r£_ã°_fûe
("json-patch-tests/spec_tests.json");

203 
cJSON
 *
ã°
 = 
NULL
;

205 
cJSON_boﬁ
 
Áûed
 = 
Ál£
;

206 
	`cJSON_AºayF‹Each
(
ã°
, 
ã°s
)

208 
Áûed
 |!
	`ã°_≠∂y_∑tch
(
ã°
);

209 
Áûed
 |!
	`ã°_gíî©e_ã°
(
ã°
);

212 
	`cJSON_Dñëe
(
ã°s
);

214 
	`TEST_ASSERT_FALSE_MESSAGE
(
Áûed
, "SomeÅests failed.");

215 
	}
}

217 
	$cjs⁄_utûs_should_∑ss_js⁄_∑tch_ã°_cjs⁄_utûs_ã°s
()

219 
cJSON
 *
ã°s
 = 
	`∑r£_ã°_fûe
("json-patch-tests/cjson-utils-tests.json");

220 
cJSON
 *
ã°
 = 
NULL
;

222 
cJSON_boﬁ
 
Áûed
 = 
Ál£
;

223 
	`cJSON_AºayF‹Each
(
ã°
, 
ã°s
)

225 
Áûed
 |!
	`ã°_≠∂y_∑tch
(
ã°
);

226 
Áûed
 |!
	`ã°_gíî©e_ã°
(
ã°
);

229 
	`cJSON_Dñëe
(
ã°s
);

231 
	`TEST_ASSERT_FALSE_MESSAGE
(
Áûed
, "SomeÅests failed.");

232 
	}
}

234 
	$maö
()

236 
	`UNITY_BEGIN
();

238 
	`RUN_TEST
(
cjs⁄_utûs_should_∑ss_js⁄_∑tch_ã°_ã°s
);

239 
	`RUN_TEST
(
cjs⁄_utûs_should_∑ss_js⁄_∑tch_ã°_•ec_ã°s
);

240 
	`RUN_TEST
(
cjs⁄_utûs_should_∑ss_js⁄_∑tch_ã°_cjs⁄_utûs_ã°s
);

242  
	`UNITY_END
();

243 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/minify_tests.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

28 
	~"unôy/§c/unôy.h
"

29 
	~"comm⁄.h
"

32 
	$cjs⁄_möify_should_nŸ_ovîÊow_buf„r
()

34 
un˛o£d_mu…ûöe_commít
[] = "/* bla";

35 
≥ndög_esˇ≥
[] = "\"\\";

37 
	`cJSON_Möify
(
un˛o£d_mu…ûöe_commít
);

38 
	`TEST_ASSERT_EQUAL_STRING
("", 
un˛o£d_mu…ûöe_commít
);

40 
	`cJSON_Möify
(
≥ndög_esˇ≥
);

41 
	`TEST_ASSERT_EQUAL_STRING
("\"\\", 
≥ndög_esˇ≥
);

42 
	}
}

44 
	$cjs⁄_möify_should_ªmove_sögÀ_löe_commíts
()

46 c⁄° 
to_möify
[] = "{//Åhis is {} \"some kind\" of [] comment /*, don't you see\n}";

48 * 
möifõd
 = (*Ë
	`mÆloc
((
to_möify
));

49 
	`TEST_ASSERT_NOT_NULL
(
möifõd
);

50 
	`°r˝y
(
möifõd
, 
to_möify
);

52 
	`cJSON_Möify
(
möifõd
);

53 
	`TEST_ASSERT_EQUAL_STRING
("{}", 
möifõd
);

55 
	`‰ì
(
möifõd
);

56 
	}
}

58 
	$cjs⁄_möify_should_ªmove_•a˚s
()

60 c⁄° 
to_möify
[] = "{ \"key\":\ttrue\r\n }";

62 * 
möifõd
 = (*Ë
	`mÆloc
((
to_möify
));

63 
	`TEST_ASSERT_NOT_NULL
(
möifõd
);

64 
	`°r˝y
(
möifõd
, 
to_möify
);

66 
	`cJSON_Möify
(
möifõd
);

67 
	`TEST_ASSERT_EQUAL_STRING
("{\"key\":åue}", 
möifõd
);

69 
	`‰ì
(
möifõd
);

70 
	}
}

72 
	$cjs⁄_möify_should_ªmove_mu…ûöe_commíts
()

74 c⁄° 
to_möify
[] = "{/*Åhis is\ná /* multi\n //line \n {comment \"\\\" */}";

76 * 
möifõd
 = (*Ë
	`mÆloc
((
to_möify
));

77 
	`TEST_ASSERT_NOT_NULL
(
möifõd
);

78 
	`°r˝y
(
möifõd
, 
to_möify
);

80 
	`cJSON_Möify
(
möifõd
);

81 
	`TEST_ASSERT_EQUAL_STRING
("{}", 
möifõd
);

83 
	`‰ì
(
möifõd
);

84 
	}
}

86 
	$cjs⁄_möify_should_nŸ_modify_°rögs
()

88 c⁄° 
to_möify
[] = "\"this isá string \\\" \\t bla\"";

90 * 
möifõd
 = (*Ë
	`mÆloc
((
to_möify
));

91 
	`TEST_ASSERT_NOT_NULL
(
möifõd
);

92 
	`°r˝y
(
möifõd
, 
to_möify
);

94 
	`cJSON_Möify
(
möifõd
);

95 
	`TEST_ASSERT_EQUAL_STRING
(
to_möify
, 
möifõd
);

97 
	`‰ì
(
möifõd
);

98 
	}
}

100 
	$cjs⁄_möify_should_möify_js⁄
() {

101 c⁄° 
to_möify
[] =

124 c⁄° * 
möifõd
 =

146 *
buf„r
 = (*Ë
	`mÆloc
((
to_möify
));

147 
	`°r˝y
(
buf„r
, 
to_möify
);

149 
	`cJSON_Möify
(
buf„r
);

150 
	`TEST_ASSERT_EQUAL_STRING
(
möifõd
, 
buf„r
);

152 
	`‰ì
(
buf„r
);

153 
	}
}

155 
	$cjs⁄_möify_should_nŸ_lo›_öföôñy
() {

156 
°rög
[] = { '8', ' ', '/', ' ', '5', '\n', '\0' };

158 
	`cJSON_Möify
(
°rög
);

159 
	}
}

161 
CJSON_CDECL
 
	$maö
()

163 
	`UNITY_BEGIN
();

165 
	`RUN_TEST
(
cjs⁄_möify_should_nŸ_ovîÊow_buf„r
);

166 
	`RUN_TEST
(
cjs⁄_möify_should_möify_js⁄
);

167 
	`RUN_TEST
(
cjs⁄_möify_should_ªmove_sögÀ_löe_commíts
);

168 
	`RUN_TEST
(
cjs⁄_möify_should_ªmove_mu…ûöe_commíts
);

169 
	`RUN_TEST
(
cjs⁄_möify_should_ªmove_•a˚s
);

170 
	`RUN_TEST
(
cjs⁄_möify_should_nŸ_modify_°rögs
);

171 
	`RUN_TEST
(
cjs⁄_möify_should_nŸ_lo›_öföôñy
);

173  
	`UNITY_END
();

174 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/misc_tests.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

28 
	~"unôy/§c/unôy.h
"

29 
	~"comm⁄.h
"

32 
	$cjs⁄_¨øy_f‹óch_should_lo›_ovî_¨øys
()

34 
cJSON
 
¨øy
[1];

35 
cJSON
 
ñemíts
[10];

36 
cJSON
 *
ñemít_poöãr
 = 
NULL
;

37 
size_t
 
i
 = 0;

39 
	`mem£t
(
¨øy
, 0, (array));

40 
	`mem£t
(
ñemíts
, 0, (elements));

43 
¨øy
[0].
chûd
 = &
ñemíts
[0];

44 
ñemíts
[0].
¥ev
 = 
NULL
;

45 
ñemíts
[9].
√xt
 = 
NULL
;

46 
i
 = 0; i < 9; i++)

48 
ñemíts
[
i
].
√xt
 = &elements[i + 1];

49 
ñemíts
[
i
 + 1].
¥ev
 = &elements[i];

52 
i
 = 0;

53 
	`cJSON_AºayF‹Each
(
ñemít_poöãr
, 
¨øy
)

55 
	`TEST_ASSERT_TRUE_MESSAGE
(
ñemít_poöãr
 =&
ñemíts
[
i
], "Not iterating overárrayÖroperly");

56 
i
++;

58 
	}
}

60 
	$cjs⁄_¨øy_f‹óch_should_nŸ_dîe„ªn˚_nuŒ_poöãr
()

62 
cJSON
 *
¨øy
 = 
NULL
;

63 
cJSON
 *
ñemít
 = 
NULL
;

64 
	`cJSON_AºayF‹Each
(
ñemít
, 
¨øy
);

65 
	}
}

67 
	$cjs⁄_gë_obje˘_ôem_should_gë_obje˘_ôems
()

69 
cJSON
 *
ôem
 = 
NULL
;

70 
cJSON
 *
found
 = 
NULL
;

72 
ôem
 = 
	`cJSON_P¨£
("{\"one\":1, \"Two\":2, \"tHree\":3}");

74 
found
 = 
	`cJSON_GëObje˘Iãm
(
NULL
, "test");

75 
	`TEST_ASSERT_NULL_MESSAGE
(
found
, "FailedÅo fail on NULLÖointer.");

77 
found
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, 
NULL
);

78 
	`TEST_ASSERT_NULL_MESSAGE
(
found
, "FailedÅo fail on NULL string.");

81 
found
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "one");

82 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
found
, "FailedÅo find first item.");

83 
	`TEST_ASSERT_EQUAL_DOUBLE
(
found
->
vÆuedoubÀ
, 1);

85 
found
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "tWo");

86 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
found
, "FailedÅo find first item.");

87 
	`TEST_ASSERT_EQUAL_DOUBLE
(
found
->
vÆuedoubÀ
, 2);

89 
found
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "three");

90 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
found
, "FailedÅo find item.");

91 
	`TEST_ASSERT_EQUAL_DOUBLE
(
found
->
vÆuedoubÀ
, 3);

93 
found
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "four");

94 
	`TEST_ASSERT_NULL_MESSAGE
(
found
, "ShouldÇot find somethingÅhat isn'tÅhere.");

96 
	`cJSON_Dñëe
(
ôem
);

97 
	}
}

99 
	$cjs⁄_gë_obje˘_ôem_ˇ£_£nsôive_should_gë_obje˘_ôems
()

101 
cJSON
 *
ôem
 = 
NULL
;

102 
cJSON
 *
found
 = 
NULL
;

104 
ôem
 = 
	`cJSON_P¨£
("{\"one\":1, \"Two\":2, \"tHree\":3}");

106 
found
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
NULL
, "test");

107 
	`TEST_ASSERT_NULL_MESSAGE
(
found
, "FailedÅo fail on NULLÖointer.");

109 
found
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
ôem
, 
NULL
);

110 
	`TEST_ASSERT_NULL_MESSAGE
(
found
, "FailedÅo fail on NULL string.");

112 
found
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
ôem
, "one");

113 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
found
, "FailedÅo find first item.");

114 
	`TEST_ASSERT_EQUAL_DOUBLE
(
found
->
vÆuedoubÀ
, 1);

116 
found
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
ôem
, "Two");

117 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
found
, "FailedÅo find first item.");

118 
	`TEST_ASSERT_EQUAL_DOUBLE
(
found
->
vÆuedoubÀ
, 2);

120 
found
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
ôem
, "tHree");

121 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
found
, "FailedÅo find item.");

122 
	`TEST_ASSERT_EQUAL_DOUBLE
(
found
->
vÆuedoubÀ
, 3);

124 
found
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
ôem
, "One");

125 
	`TEST_ASSERT_NULL_MESSAGE
(
found
, "ShouldÇot find somethingÅhat isn'tÅhere.");

127 
	`cJSON_Dñëe
(
ôem
);

128 
	}
}

130 
	$cjs⁄_gë_obje˘_ôem_should_nŸ_¸ash_wôh_¨øy
() {

131 
cJSON
 *
¨øy
 = 
NULL
;

132 
cJSON
 *
found
 = 
NULL
;

133 
¨øy
 = 
	`cJSON_P¨£
("[1]");

135 
found
 = 
	`cJSON_GëObje˘Iãm
(
¨øy
, "name");

136 
	`TEST_ASSERT_NULL
(
found
);

138 
	`cJSON_Dñëe
(
¨øy
);

139 
	}
}

141 
	$cjs⁄_gë_obje˘_ôem_ˇ£_£nsôive_should_nŸ_¸ash_wôh_¨øy
() {

142 
cJSON
 *
¨øy
 = 
NULL
;

143 
cJSON
 *
found
 = 
NULL
;

144 
¨øy
 = 
	`cJSON_P¨£
("[1]");

146 
found
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
¨øy
, "name");

147 
	`TEST_ASSERT_NULL
(
found
);

149 
	`cJSON_Dñëe
(
¨øy
);

150 
	}
}

152 
	$ty≥check_fun˘i⁄s_should_check_ty≥
()

154 
cJSON
 
övÆid
[1];

155 
cJSON
 
ôem
[1];

156 
övÆid
->
ty≥
 = 
cJSON_InvÆid
;

157 
övÆid
->
ty≥
 |
cJSON_SåögIsC⁄°
;

158 
ôem
->
ty≥
 = 
cJSON_FÆ£
;

159 
ôem
->
ty≥
 |
cJSON_SåögIsC⁄°
;

161 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsInvÆid
(
NULL
));

162 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsInvÆid
(
ôem
));

163 
	`TEST_ASSERT_TRUE
(
	`cJSON_IsInvÆid
(
övÆid
));

165 
ôem
->
ty≥
 = 
cJSON_FÆ£
 | 
cJSON_SåögIsC⁄°
;

166 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsFÆ£
(
NULL
));

167 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsFÆ£
(
övÆid
));

168 
	`TEST_ASSERT_TRUE
(
	`cJSON_IsFÆ£
(
ôem
));

169 
	`TEST_ASSERT_TRUE
(
	`cJSON_IsBoﬁ
(
ôem
));

171 
ôem
->
ty≥
 = 
cJSON_True
 | 
cJSON_SåögIsC⁄°
;

172 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsTrue
(
NULL
));

173 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsTrue
(
övÆid
));

174 
	`TEST_ASSERT_TRUE
(
	`cJSON_IsTrue
(
ôem
));

175 
	`TEST_ASSERT_TRUE
(
	`cJSON_IsBoﬁ
(
ôem
));

177 
ôem
->
ty≥
 = 
cJSON_NULL
 | 
cJSON_SåögIsC⁄°
;

178 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsNuŒ
(
NULL
));

179 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsNuŒ
(
övÆid
));

180 
	`TEST_ASSERT_TRUE
(
	`cJSON_IsNuŒ
(
ôem
));

182 
ôem
->
ty≥
 = 
cJSON_Numbî
 | 
cJSON_SåögIsC⁄°
;

183 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsNumbî
(
NULL
));

184 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsNumbî
(
övÆid
));

185 
	`TEST_ASSERT_TRUE
(
	`cJSON_IsNumbî
(
ôem
));

187 
ôem
->
ty≥
 = 
cJSON_Såög
 | 
cJSON_SåögIsC⁄°
;

188 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsSåög
(
NULL
));

189 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsSåög
(
övÆid
));

190 
	`TEST_ASSERT_TRUE
(
	`cJSON_IsSåög
(
ôem
));

192 
ôem
->
ty≥
 = 
cJSON_Aºay
 | 
cJSON_SåögIsC⁄°
;

193 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsAºay
(
NULL
));

194 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsAºay
(
övÆid
));

195 
	`TEST_ASSERT_TRUE
(
	`cJSON_IsAºay
(
ôem
));

197 
ôem
->
ty≥
 = 
cJSON_Obje˘
 | 
cJSON_SåögIsC⁄°
;

198 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsObje˘
(
NULL
));

199 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsObje˘
(
övÆid
));

200 
	`TEST_ASSERT_TRUE
(
	`cJSON_IsObje˘
(
ôem
));

202 
ôem
->
ty≥
 = 
cJSON_Raw
 | 
cJSON_SåögIsC⁄°
;

203 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsRaw
(
NULL
));

204 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsRaw
(
övÆid
));

205 
	`TEST_ASSERT_TRUE
(
	`cJSON_IsRaw
(
ôem
));

206 
	}
}

208 
	$cjs⁄_should_nŸ_∑r£_to_dì∂y_√°ed_js⁄s
()

210 
dìp_js⁄
[
CJSON_NESTING_LIMIT
 + 1];

211 
size_t
 
posôi⁄
 = 0;

213 
posôi⁄
 = 0;Öosôi⁄ < (
dìp_js⁄
);Öosition++)

215 
dìp_js⁄
[
posôi⁄
] = '[';

217 
dìp_js⁄
[(deep_json) - 1] = '\0';

219 
	`TEST_ASSERT_NULL_MESSAGE
(
	`cJSON_P¨£
(
dìp_js⁄
), "To deep JSONs shouldÇot beÖarsed.");

220 
	}
}

222 
	$cjs⁄_£t_numbî_vÆue_should_£t_numbîs
()

224 
cJSON
 
numbî
[1] = {{
NULL
, NULL, NULL, 
cJSON_Numbî
, NULL, 0, 0, NULL}};

226 
	`cJSON_SëNumbîVÆue
(
numbî
, 1.5);

227 
	`TEST_ASSERT_EQUAL
(1, 
numbî
->
vÆueöt
);

228 
	`TEST_ASSERT_EQUAL_DOUBLE
(1.5, 
numbî
->
vÆuedoubÀ
);

230 
	`cJSON_SëNumbîVÆue
(
numbî
, -1.5);

231 
	`TEST_ASSERT_EQUAL
(-1, 
numbî
->
vÆueöt
);

232 
	`TEST_ASSERT_EQUAL_DOUBLE
(-1.5, 
numbî
->
vÆuedoubÀ
);

234 
	`cJSON_SëNumbîVÆue
(
numbî
, 1 + ()
INT_MAX
);

235 
	`TEST_ASSERT_EQUAL
(
INT_MAX
, 
numbî
->
vÆueöt
);

236 
	`TEST_ASSERT_EQUAL_DOUBLE
(1 + ()
INT_MAX
, 
numbî
->
vÆuedoubÀ
);

238 
	`cJSON_SëNumbîVÆue
(
numbî
, -1 + ()
INT_MIN
);

239 
	`TEST_ASSERT_EQUAL
(
INT_MIN
, 
numbî
->
vÆueöt
);

240 
	`TEST_ASSERT_EQUAL_DOUBLE
(-1 + ()
INT_MIN
, 
numbî
->
vÆuedoubÀ
);

241 
	}
}

243 
	$cjs⁄_dëach_ôem_vü_poöãr_should_dëach_ôems
()

245 
cJSON
 
li°
[4];

246 
cJSON
 
∑ª¡
[1];

248 
	`mem£t
(
li°
, '\0', (list));

251 
li°
[0].
√xt
 = &(list[1]);

252 
li°
[1].
√xt
 = &(list[2]);

253 
li°
[2].
√xt
 = &(list[3]);

255 
li°
[3].
¥ev
 = &(list[2]);

256 
li°
[2].
¥ev
 = &(list[1]);

257 
li°
[1].
¥ev
 = &(list[0]);

258 
li°
[0].
¥ev
 = &(list[3]);

260 
∑ª¡
->
chûd
 = &
li°
[0];

263 
	`TEST_ASSERT_TRUE_MESSAGE
(
	`cJSON_DëachIãmVüPoöãr
(
∑ª¡
, &(
li°
[1])) == &(list[1]), "FailedÅo detach inÅhe middle.");

264 
	`TEST_ASSERT_TRUE_MESSAGE
((
li°
[1].
¥ev
 =
NULL
Ë&& (li°[1].
√xt
 == NULL), "Didn't setÖointers of detached itemÅo NULL.");

265 
	`TEST_ASSERT_TRUE
((
li°
[0].
√xt
 =&÷i°[2])Ë&& (li°[2].
¥ev
 == &(list[0])));

268 
	`TEST_ASSERT_TRUE_MESSAGE
(
	`cJSON_DëachIãmVüPoöãr
(
∑ª¡
, &(
li°
[0])) == &(list[0]), "FailedÅo detach beginning.");

269 
	`TEST_ASSERT_TRUE_MESSAGE
((
li°
[0].
¥ev
 =
NULL
Ë&& (li°[0].
√xt
 == NULL), "Didn't setÖointers of detached itemÅo NULL.");

270 
	`TEST_ASSERT_TRUE_MESSAGE
((
li°
[2].
¥ev
 =&÷i°[3])Ë&& (
∑ª¡
->
chûd
 == &(list[2])), "Didn't setÅheÇew beginning.");

273 
	`TEST_ASSERT_TRUE_MESSAGE
(
	`cJSON_DëachIãmVüPoöãr
(
∑ª¡
, &(
li°
[3])) == &(list[3]), "FailedÅo detachÉnd.");

274 
	`TEST_ASSERT_TRUE_MESSAGE
((
li°
[3].
¥ev
 =
NULL
Ë&& (li°[3].
√xt
 == NULL), "Didn't setÖointers of detached itemÅo NULL.");

275 
	`TEST_ASSERT_TRUE_MESSAGE
((
li°
[2].
√xt
 =
NULL
Ë&& (
∑ª¡
->
chûd
 == &(list[2])), "Didn't setÅheÇewÉnd");

278 
	`TEST_ASSERT_TRUE_MESSAGE
(
	`cJSON_DëachIãmVüPoöãr
(
∑ª¡
, &
li°
[2]) == &list[2], "FailedÅo detach single item.");

279 
	`TEST_ASSERT_TRUE_MESSAGE
((
li°
[2].
¥ev
 =
NULL
Ë&& (li°[2].
√xt
 == NULL), "Didn't setÖointers of detached itemÅo NULL.");

280 
	`TEST_ASSERT_NULL_MESSAGE
(
∑ª¡
->
chûd
, "Child ofÅheÖarent wasn't setÅo NULL.");

281 
	}
}

283 
	$cjs⁄_ª∂a˚_ôem_vü_poöãr_should_ª∂a˚_ôems
()

285 
cJSON
 
ª∂a˚míts
[3];

286 
cJSON
 *
begönög
 = 
NULL
;

287 
cJSON
 *
middÀ
 = 
NULL
;

288 
cJSON
 *
íd
 = 
NULL
;

289 
cJSON
 *
¨øy
 = 
NULL
;

291 
begönög
 = 
	`cJSON_Cª©eNuŒ
();

292 
	`TEST_ASSERT_NOT_NULL
(
begönög
);

293 
middÀ
 = 
	`cJSON_Cª©eNuŒ
();

294 
	`TEST_ASSERT_NOT_NULL
(
middÀ
);

295 
íd
 = 
	`cJSON_Cª©eNuŒ
();

296 
	`TEST_ASSERT_NOT_NULL
(
íd
);

298 
¨øy
 = 
	`cJSON_Cª©eAºay
();

299 
	`TEST_ASSERT_NOT_NULL
(
¨øy
);

301 
	`cJSON_AddIãmToAºay
(
¨øy
, 
begönög
);

302 
	`cJSON_AddIãmToAºay
(
¨øy
, 
middÀ
);

303 
	`cJSON_AddIãmToAºay
(
¨øy
, 
íd
);

306 
	`mem£t
(
ª∂a˚míts
, '\0', (replacements));

309 
	`TEST_ASSERT_TRUE
(
	`cJSON_Rïœ˚IãmVüPoöãr
(
¨øy
, 
begönög
, &(
ª∂a˚míts
[0])));

310 
	`TEST_ASSERT_TRUE
(
ª∂a˚míts
[0].
¥ev
 =
íd
);

311 
	`TEST_ASSERT_TRUE
(
ª∂a˚míts
[0].
√xt
 =
middÀ
);

312 
	`TEST_ASSERT_TRUE
(
middÀ
->
¥ev
 =&(
ª∂a˚míts
[0]));

313 
	`TEST_ASSERT_TRUE
(
¨øy
->
chûd
 =&(
ª∂a˚míts
[0]));

316 
	`TEST_ASSERT_TRUE
(
	`cJSON_Rïœ˚IãmVüPoöãr
(
¨øy
, 
middÀ
, &(
ª∂a˚míts
[1])));

317 
	`TEST_ASSERT_TRUE
(
ª∂a˚míts
[1].
¥ev
 == &(replacements[0]));

318 
	`TEST_ASSERT_TRUE
(
ª∂a˚míts
[1].
√xt
 =
íd
);

319 
	`TEST_ASSERT_TRUE
(
íd
->
¥ev
 =&(
ª∂a˚míts
[1]));

322 
	`TEST_ASSERT_TRUE
(
	`cJSON_Rïœ˚IãmVüPoöãr
(
¨øy
, 
íd
, &(
ª∂a˚míts
[2])));

323 
	`TEST_ASSERT_TRUE
(
ª∂a˚míts
[2].
¥ev
 == &(replacements[1]));

324 
	`TEST_ASSERT_NULL
(
ª∂a˚míts
[2].
√xt
);

325 
	`TEST_ASSERT_TRUE
(
ª∂a˚míts
[1].
√xt
 == &(replacements[2]));

327 
	`cJSON_‰ì
(
¨øy
);

328 
	}
}

330 
	$cjs⁄_ª∂a˚_ôem_ö_obje˘_should_¥e£rve_«me
()

332 
cJSON
 
roŸ
[1] = {{ 
NULL
, NULL, NULL, 0, NULL, 0, 0, NULL }};

333 
cJSON
 *
chûd
 = 
NULL
;

334 
cJSON
 *
ª∂a˚mít
 = 
NULL
;

335 
cJSON_boﬁ
 
Êag
 = 
Ál£
;

337 
chûd
 = 
	`cJSON_Cª©eNumbî
(1);

338 
	`TEST_ASSERT_NOT_NULL
(
chûd
);

339 
ª∂a˚mít
 = 
	`cJSON_Cª©eNumbî
(2);

340 
	`TEST_ASSERT_NOT_NULL
(
ª∂a˚mít
);

342 
Êag
 = 
	`cJSON_AddIãmToObje˘
(
roŸ
, "chûd", 
chûd
);

343 
	`TEST_ASSERT_TRUE_MESSAGE
(
Êag
, "add itemÅo object failed");

344 
	`cJSON_Rïœ˚IãmInObje˘
(
roŸ
, "chûd", 
ª∂a˚mít
);

346 
	`TEST_ASSERT_TRUE
(
roŸ
->
chûd
 =
ª∂a˚mít
);

347 
	`TEST_ASSERT_EQUAL_STRING
("chûd", 
ª∂a˚mít
->
°rög
);

349 
	`cJSON_Dñëe
(
ª∂a˚mít
);

350 
	}
}

352 
	$cjs⁄_fun˘i⁄s_should_nŸ_¸ash_wôh_nuŒ_poöãrs
()

354 
buf„r
[10];

355 
cJSON
 *
ôem
 = 
	`cJSON_Cª©eSåög
("item");

357 
	`cJSON_InôHooks
(
NULL
);

358 
	`TEST_ASSERT_NULL
(
	`cJSON_P¨£
(
NULL
));

359 
	`TEST_ASSERT_NULL
(
	`cJSON_P¨£WôhO±s
(
NULL
, NULL, 
åue
));

360 
	`TEST_ASSERT_NULL
(
	`cJSON_Pröt
(
NULL
));

361 
	`TEST_ASSERT_NULL
(
	`cJSON_PrötUnf‹m©ãd
(
NULL
));

362 
	`TEST_ASSERT_NULL
(
	`cJSON_PrötBuf„ªd
(
NULL
, 10, 
åue
));

363 
	`TEST_ASSERT_FALSE
(
	`cJSON_PrötPªÆloˇãd
(
NULL
, 
buf„r
, (buf„r), 
åue
));

364 
	`TEST_ASSERT_FALSE
(
	`cJSON_PrötPªÆloˇãd
(
ôem
, 
NULL
, 1, 
åue
));

365 
	`cJSON_Dñëe
(
NULL
);

366 
	`cJSON_GëAºaySize
(
NULL
);

367 
	`TEST_ASSERT_NULL
(
	`cJSON_GëAºayIãm
(
NULL
, 0));

368 
	`TEST_ASSERT_NULL
(
	`cJSON_GëObje˘Iãm
(
NULL
, "item"));

369 
	`TEST_ASSERT_NULL
(
	`cJSON_GëObje˘Iãm
(
ôem
, 
NULL
));

370 
	`TEST_ASSERT_NULL
(
	`cJSON_GëObje˘IãmCa£Sísôive
(
NULL
, "item"));

371 
	`TEST_ASSERT_NULL
(
	`cJSON_GëObje˘IãmCa£Sísôive
(
ôem
, 
NULL
));

372 
	`TEST_ASSERT_FALSE
(
	`cJSON_HasObje˘Iãm
(
NULL
, "item"));

373 
	`TEST_ASSERT_FALSE
(
	`cJSON_HasObje˘Iãm
(
ôem
, 
NULL
));

374 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsInvÆid
(
NULL
));

375 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsFÆ£
(
NULL
));

376 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsTrue
(
NULL
));

377 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsBoﬁ
(
NULL
));

378 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsNuŒ
(
NULL
));

379 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsNumbî
(
NULL
));

380 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsSåög
(
NULL
));

381 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsAºay
(
NULL
));

382 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsObje˘
(
NULL
));

383 
	`TEST_ASSERT_FALSE
(
	`cJSON_IsRaw
(
NULL
));

384 
	`TEST_ASSERT_NULL
(
	`cJSON_Cª©eSåög
(
NULL
));

385 
	`TEST_ASSERT_NULL
(
	`cJSON_Cª©eRaw
(
NULL
));

386 
	`TEST_ASSERT_NULL
(
	`cJSON_Cª©eI¡Aºay
(
NULL
, 10));

387 
	`TEST_ASSERT_NULL
(
	`cJSON_Cª©eFlﬂtAºay
(
NULL
, 10));

388 
	`TEST_ASSERT_NULL
(
	`cJSON_Cª©eDoubÀAºay
(
NULL
, 10));

389 
	`TEST_ASSERT_NULL
(
	`cJSON_Cª©eSåögAºay
(
NULL
, 10));

390 
	`cJSON_AddIãmToAºay
(
NULL
, 
ôem
);

391 
	`cJSON_AddIãmToAºay
(
ôem
, 
NULL
);

392 
	`cJSON_AddIãmToObje˘
(
ôem
, "ôem", 
NULL
);

393 
	`cJSON_AddIãmToObje˘
(
ôem
, 
NULL
, item);

394 
	`cJSON_AddIãmToObje˘
(
NULL
, "ôem", 
ôem
);

395 
	`cJSON_AddIãmToObje˘CS
(
ôem
, "ôem", 
NULL
);

396 
	`cJSON_AddIãmToObje˘CS
(
ôem
, 
NULL
, item);

397 
	`cJSON_AddIãmToObje˘CS
(
NULL
, "ôem", 
ôem
);

398 
	`cJSON_AddIãmRe„ªn˚ToAºay
(
NULL
, 
ôem
);

399 
	`cJSON_AddIãmRe„ªn˚ToAºay
(
ôem
, 
NULL
);

400 
	`cJSON_AddIãmRe„ªn˚ToObje˘
(
ôem
, "ôem", 
NULL
);

401 
	`cJSON_AddIãmRe„ªn˚ToObje˘
(
ôem
, 
NULL
, item);

402 
	`cJSON_AddIãmRe„ªn˚ToObje˘
(
NULL
, "ôem", 
ôem
);

403 
	`TEST_ASSERT_NULL
(
	`cJSON_DëachIãmVüPoöãr
(
NULL
, 
ôem
));

404 
	`TEST_ASSERT_NULL
(
	`cJSON_DëachIãmVüPoöãr
(
ôem
, 
NULL
));

405 
	`TEST_ASSERT_NULL
(
	`cJSON_DëachIãmFromAºay
(
NULL
, 0));

406 
	`cJSON_DñëeIãmFromAºay
(
NULL
, 0);

407 
	`TEST_ASSERT_NULL
(
	`cJSON_DëachIãmFromObje˘
(
NULL
, "item"));

408 
	`TEST_ASSERT_NULL
(
	`cJSON_DëachIãmFromObje˘
(
ôem
, 
NULL
));

409 
	`TEST_ASSERT_NULL
(
	`cJSON_DëachIãmFromObje˘Ca£Sísôive
(
NULL
, "item"));

410 
	`TEST_ASSERT_NULL
(
	`cJSON_DëachIãmFromObje˘Ca£Sísôive
(
ôem
, 
NULL
));

411 
	`cJSON_DñëeIãmFromObje˘
(
NULL
, "item");

412 
	`cJSON_DñëeIãmFromObje˘
(
ôem
, 
NULL
);

413 
	`cJSON_DñëeIãmFromObje˘Ca£Sísôive
(
NULL
, "item");

414 
	`cJSON_DñëeIãmFromObje˘Ca£Sísôive
(
ôem
, 
NULL
);

415 
	`TEST_ASSERT_FALSE
(
	`cJSON_In£πIãmInAºay
(
NULL
, 0, 
ôem
));

416 
	`TEST_ASSERT_FALSE
(
	`cJSON_In£πIãmInAºay
(
ôem
, 0, 
NULL
));

417 
	`TEST_ASSERT_FALSE
(
	`cJSON_Rïœ˚IãmVüPoöãr
(
NULL
, 
ôem
, item));

418 
	`TEST_ASSERT_FALSE
(
	`cJSON_Rïœ˚IãmVüPoöãr
(
ôem
, 
NULL
, item));

419 
	`TEST_ASSERT_FALSE
(
	`cJSON_Rïœ˚IãmVüPoöãr
(
ôem
, iãm, 
NULL
));

420 
	`TEST_ASSERT_FALSE
(
	`cJSON_Rïœ˚IãmInAºay
(
ôem
, 0, 
NULL
));

421 
	`TEST_ASSERT_FALSE
(
	`cJSON_Rïœ˚IãmInAºay
(
NULL
, 0, 
ôem
));

422 
	`TEST_ASSERT_FALSE
(
	`cJSON_Rïœ˚IãmInObje˘
(
NULL
, "ôem", 
ôem
));

423 
	`TEST_ASSERT_FALSE
(
	`cJSON_Rïœ˚IãmInObje˘
(
ôem
, 
NULL
, item));

424 
	`TEST_ASSERT_FALSE
(
	`cJSON_Rïœ˚IãmInObje˘
(
ôem
, "ôem", 
NULL
));

425 
	`TEST_ASSERT_FALSE
(
	`cJSON_Rïœ˚IãmInObje˘Ca£Sísôive
(
NULL
, "ôem", 
ôem
));

426 
	`TEST_ASSERT_FALSE
(
	`cJSON_Rïœ˚IãmInObje˘Ca£Sísôive
(
ôem
, 
NULL
, item));

427 
	`TEST_ASSERT_FALSE
(
	`cJSON_Rïœ˚IãmInObje˘Ca£Sísôive
(
ôem
, "ôem", 
NULL
));

428 
	`TEST_ASSERT_NULL
(
	`cJSON_Du∂iˇã
(
NULL
, 
åue
));

429 
	`TEST_ASSERT_FALSE
(
	`cJSON_Com∑ª
(
ôem
, 
NULL
, 
Ál£
));

430 
	`TEST_ASSERT_FALSE
(
	`cJSON_Com∑ª
(
NULL
, 
ôem
, 
Ál£
));

431 
	`cJSON_Möify
(
NULL
);

435 
	`cJSON_Dñëe
(
ôem
);

436 
	}
}

438 * 
CJSON_CDECL
 
	$Áûög_ªÆloc
(*
poöãr
, 
size_t
 
size
)

440 ()
size
;

441 ()
poöãr
;

442  
NULL
;

443 
	}
}

445 
	$ísuª_should_Áû_⁄_Áûed_ªÆloc
()

447 
¥ötbuf„r
 
buf„r
 = {
NULL
, 10, 0, 0, 
Ál£
, fÆ£, {&
mÆloc
, &
‰ì
, &
Áûög_ªÆloc
}};

448 
buf„r
.buf„∏(*)
	`mÆloc
(100);

449 
	`TEST_ASSERT_NOT_NULL
(
buf„r
.buffer);

451 
	`TEST_ASSERT_NULL_MESSAGE
(
	`ísuª
(&
buf„r
, 200), "Ensure didn't fail with failingÑealloc.");

452 
	}
}

454 
	$skù_utf8_bom_should_skù_bom
()

456 c⁄° 
°rög
[] = "\xEF\xBB\xBF{}";

457 
∑r£_buf„r
 
buf„r
 = { 0, 0, 0, 0, { 0, 0, 0 } };

458 
buf„r
.
c⁄ã¡
 = 
°rög
;

459 
buf„r
.
Àngth
 = (
°rög
);

460 
buf„r
.
hooks
 = 
globÆ_hooks
;

462 
	`TEST_ASSERT_TRUE
(
	`skù_utf8_bom
(&
buf„r
) == &buffer);

463 
	`TEST_ASSERT_EQUAL_UINT
(3U, ()
buf„r
.
off£t
);

464 
	}
}

466 
	$skù_utf8_bom_should_nŸ_skù_bom_if_nŸ_©_begönög
()

468 c⁄° 
°rög
[] = " \xEF\xBB\xBF{}";

469 
∑r£_buf„r
 
buf„r
 = { 0, 0, 0, 0, { 0, 0, 0 } };

470 
buf„r
.
c⁄ã¡
 = 
°rög
;

471 
buf„r
.
Àngth
 = (
°rög
);

472 
buf„r
.
hooks
 = 
globÆ_hooks
;

473 
buf„r
.
off£t
 = 1;

475 
	`TEST_ASSERT_NULL
(
	`skù_utf8_bom
(&
buf„r
));

476 
	}
}

478 
	$cjs⁄_gë_°rög_vÆue_should_gë_a_°rög
()

480 
cJSON
 *
°rög
 = 
	`cJSON_Cª©eSåög
("test");

481 
cJSON
 *
numbî
 = 
	`cJSON_Cª©eNumbî
(1);

483 
	`TEST_ASSERT_TRUE
(
	`cJSON_GëSåögVÆue
(
°rög
Ë=°rög->
vÆue°rög
);

484 
	`TEST_ASSERT_NULL
(
	`cJSON_GëSåögVÆue
(
numbî
));

485 
	`TEST_ASSERT_NULL
(
	`cJSON_GëSåögVÆue
(
NULL
));

487 
	`cJSON_Dñëe
(
numbî
);

488 
	`cJSON_Dñëe
(
°rög
);

489 
	}
}

491 
	$cjs⁄_gë_numbî_vÆue_should_gë_a_numbî
()

493 
cJSON
 *
°rög
 = 
	`cJSON_Cª©eSåög
("test");

494 
cJSON
 *
numbî
 = 
	`cJSON_Cª©eNumbî
(1);

496 
	`TEST_ASSERT_EQUAL_DOUBLE
(
	`cJSON_GëNumbîVÆue
(
numbî
),Çumbî->
vÆuedoubÀ
);

497 
	`TEST_ASSERT_DOUBLE_IS_NAN
(
	`cJSON_GëNumbîVÆue
(
°rög
));

498 
	`TEST_ASSERT_DOUBLE_IS_NAN
(
	`cJSON_GëNumbîVÆue
(
NULL
));

500 
	`cJSON_Dñëe
(
numbî
);

501 
	`cJSON_Dñëe
(
°rög
);

502 
	}
}

504 
	$cjs⁄_¸óã_°rög_ª„ªn˚_should_¸óã_a_°rög_ª„ªn˚
() {

505 c⁄° *
°rög
 = "Iámá string!";

507 
cJSON
 *
°rög_ª„ªn˚
 = 
	`cJSON_Cª©eSåögRe„ªn˚
(
°rög
);

508 
	`TEST_ASSERT_TRUE
(
°rög_ª„ªn˚
->
vÆue°rög
 =
°rög
);

509 
	`TEST_ASSERT_EQUAL_INT
(
cJSON_IsRe„ªn˚
 | 
cJSON_Såög
, 
°rög_ª„ªn˚
->
ty≥
);

511 
	`cJSON_Dñëe
(
°rög_ª„ªn˚
);

512 
	}
}

514 
	$cjs⁄_¸óã_obje˘_ª„ªn˚_should_¸óã_™_obje˘_ª„ªn˚
() {

515 
cJSON
 *
numbî_ª„ªn˚
 = 
NULL
;

516 
cJSON
 *
numbî_obje˘
 = 
	`cJSON_Cª©eObje˘
();

517 
cJSON
 *
numbî
 = 
	`cJSON_Cª©eNumbî
(42);

518 c⁄° 
key
[] = "number";

520 
	`TEST_ASSERT_TRUE
(
	`cJSON_IsNumbî
(
numbî
));

521 
	`TEST_ASSERT_TRUE
(
	`cJSON_IsObje˘
(
numbî_obje˘
));

522 
	`cJSON_AddIãmToObje˘CS
(
numbî_obje˘
, 
key
, 
numbî
);

524 
numbî_ª„ªn˚
 = 
	`cJSON_Cª©eObje˘Re„ªn˚
(
numbî
);

525 
	`TEST_ASSERT_TRUE
(
numbî_ª„ªn˚
->
chûd
 =
numbî
);

526 
	`TEST_ASSERT_EQUAL_INT
(
cJSON_Obje˘
 | 
cJSON_IsRe„ªn˚
, 
numbî_ª„ªn˚
->
ty≥
);

528 
	`cJSON_Dñëe
(
numbî_obje˘
);

529 
	`cJSON_Dñëe
(
numbî_ª„ªn˚
);

530 
	}
}

532 
	$cjs⁄_¸óã_¨øy_ª„ªn˚_should_¸óã_™_¨øy_ª„ªn˚
() {

533 
cJSON
 *
numbî_ª„ªn˚
 = 
NULL
;

534 
cJSON
 *
numbî_¨øy
 = 
	`cJSON_Cª©eAºay
();

535 
cJSON
 *
numbî
 = 
	`cJSON_Cª©eNumbî
(42);

537 
	`TEST_ASSERT_TRUE
(
	`cJSON_IsNumbî
(
numbî
));

538 
	`TEST_ASSERT_TRUE
(
	`cJSON_IsAºay
(
numbî_¨øy
));

539 
	`cJSON_AddIãmToAºay
(
numbî_¨øy
, 
numbî
);

541 
numbî_ª„ªn˚
 = 
	`cJSON_Cª©eAºayRe„ªn˚
(
numbî
);

542 
	`TEST_ASSERT_TRUE
(
numbî_ª„ªn˚
->
chûd
 =
numbî
);

543 
	`TEST_ASSERT_EQUAL_INT
(
cJSON_Aºay
 | 
cJSON_IsRe„ªn˚
, 
numbî_ª„ªn˚
->
ty≥
);

545 
	`cJSON_Dñëe
(
numbî_¨øy
);

546 
	`cJSON_Dñëe
(
numbî_ª„ªn˚
);

547 
	}
}

549 
	$cjs⁄_add_ôem_to_obje˘_‹_¨øy_should_nŸ_add_ô£lf
()

551 
cJSON
 *
obje˘
 = 
	`cJSON_Cª©eObje˘
();

552 
cJSON
 *
¨øy
 = 
	`cJSON_Cª©eAºay
();

553 
cJSON_boﬁ
 
Êag
 = 
Ál£
;

555 
Êag
 = 
	`cJSON_AddIãmToObje˘
(
obje˘
, "key", object);

556 
	`TEST_ASSERT_FALSE_MESSAGE
(
Êag
, "addán objectÅo itself should fail");

558 
Êag
 = 
	`cJSON_AddIãmToAºay
(
¨øy
,árray);

559 
	`TEST_ASSERT_FALSE_MESSAGE
(
Êag
, "addánárrayÅo itself should fail");

561 
	`cJSON_Dñëe
(
obje˘
);

562 
	`cJSON_Dñëe
(
¨øy
);

563 
	}
}

565 
	$cjs⁄_add_ôem_to_obje˘_should_nŸ_u£_a·î_‰ì_whí_°rög_is_Æü£d
()

567 
cJSON
 *
obje˘
 = 
	`cJSON_Cª©eObje˘
();

568 
cJSON
 *
numbî
 = 
	`cJSON_Cª©eNumbî
(42);

569 *
«me
 = (*)
	`cJSON_°rdup
((c⁄° *)"numbî", &
globÆ_hooks
);

571 
	`TEST_ASSERT_NOT_NULL
(
obje˘
);

572 
	`TEST_ASSERT_NOT_NULL
(
numbî
);

573 
	`TEST_ASSERT_NOT_NULL
(
«me
);

575 
numbî
->
°rög
 = 
«me
;

579 
	`cJSON_AddIãmToObje˘
(
obje˘
, 
numbî
->
°rög
,Çumber);

581 
	`cJSON_Dñëe
(
obje˘
);

582 
	}
}

584 
	$cjs⁄_dñëe_ôem_‰om_¨øy_should_nŸ_brokí_li°_°ru˘uª
()

586 c⁄° 
ex≥˘ed_js⁄1
[] = "{\"rd\":[{\"a\":\"123\"}]}";

587 c⁄° 
ex≥˘ed_js⁄2
[] = "{\"rd\":[{\"a\":\"123\"},{\"b\":\"456\"}]}";

588 c⁄° 
ex≥˘ed_js⁄3
[] = "{\"rd\":[{\"b\":\"456\"}]}";

589 *
°r1
 = 
NULL
;

590 *
°r2
 = 
NULL
;

591 *
°r3
 = 
NULL
;

593 
cJSON
 *
roŸ
 = 
	`cJSON_P¨£
("{}");

595 
cJSON
 *
¨øy
 = 
	`cJSON_AddAºayToObje˘
(
roŸ
, "rd");

596 
cJSON
 *
ôem1
 = 
	`cJSON_P¨£
("{\"a\":\"123\"}");

597 
cJSON
 *
ôem2
 = 
	`cJSON_P¨£
("{\"b\":\"456\"}");

599 
	`cJSON_AddIãmToAºay
(
¨øy
, 
ôem1
);

600 
°r1
 = 
	`cJSON_PrötUnf‹m©ãd
(
roŸ
);

601 
	`TEST_ASSERT_EQUAL_STRING
(
ex≥˘ed_js⁄1
, 
°r1
);

602 
	`‰ì
(
°r1
);

604 
	`cJSON_AddIãmToAºay
(
¨øy
, 
ôem2
);

605 
°r2
 = 
	`cJSON_PrötUnf‹m©ãd
(
roŸ
);

606 
	`TEST_ASSERT_EQUAL_STRING
(
ex≥˘ed_js⁄2
, 
°r2
);

607 
	`‰ì
(
°r2
);

610 
	`cJSON_DñëeIãmFromAºay
(
¨øy
, 0);

611 
°r3
 = 
	`cJSON_PrötUnf‹m©ãd
(
roŸ
);

612 
	`TEST_ASSERT_EQUAL_STRING
(
ex≥˘ed_js⁄3
, 
°r3
);

613 
	`‰ì
(
°r3
);

615 
	`cJSON_Dñëe
(
roŸ
);

616 
	}
}

618 
	$cjs⁄_£t_vÆue°rög_to_obje˘_should_nŸ_Àak_mem‹y
()

620 
cJSON
 *
roŸ
 = 
	`cJSON_P¨£
("{}");

621 c⁄° *
°rögvÆue
 = "valuestring could be changed safely";

622 c⁄° *
ª„ªn˚_vÆue°rög
 = "reference item should be freed by yourself";

623 c⁄° *
sh‹t_vÆue°rög
 = "shorter valuestring";

624 c⁄° *
l⁄g_vÆue°rög
 = "new valuestring which muchÜongerÅhanÖrevious should be changed safely";

625 
cJSON
 *
ôem1
 = 
	`cJSON_Cª©eSåög
(
°rögvÆue
);

626 
cJSON
 *
ôem2
 = 
	`cJSON_Cª©eSåögRe„ªn˚
(
ª„ªn˚_vÆue°rög
);

627 *
±r1
 = 
NULL
;

628 *
ªtu∫_vÆue
 = 
NULL
;

630 
	`cJSON_AddIãmToObje˘
(
roŸ
, "⁄e", 
ôem1
);

631 
	`cJSON_AddIãmToObje˘
(
roŸ
, "two", 
ôem2
);

633 
±r1
 = 
ôem1
->
vÆue°rög
;

634 
ªtu∫_vÆue
 = 
	`cJSON_SëVÆue°rög
(
	`cJSON_GëObje˘Iãm
(
roŸ
, "⁄e"), 
sh‹t_vÆue°rög
);

635 
	`TEST_ASSERT_NOT_NULL
(
ªtu∫_vÆue
);

636 
	`TEST_ASSERT_EQUAL_PTR_MESSAGE
(
±r1
, 
ªtu∫_vÆue
, "new valuestring shorterÅhan old shouldÇotÑeallocate memory");

637 
	`TEST_ASSERT_EQUAL_STRING
(
sh‹t_vÆue°rög
, 
	`cJSON_GëObje˘Iãm
(
roŸ
, "⁄e")->
vÆue°rög
);

640 
±r1
 = 
ôem1
->
vÆue°rög
;

641 
ªtu∫_vÆue
 = 
	`cJSON_SëVÆue°rög
(
	`cJSON_GëObje˘Iãm
(
roŸ
, "⁄e"), 
l⁄g_vÆue°rög
);

642 
	`TEST_ASSERT_NOT_NULL
(
ªtu∫_vÆue
);

643 
	`TEST_ASSERT_NOT_EQUAL_MESSAGE
(
±r1
, 
ªtu∫_vÆue
, "new valuestringÜongerÅhan old shouldÑeallocate memory")

644 
	`TEST_ASSERT_EQUAL_STRING
(
l⁄g_vÆue°rög
, 
	`cJSON_GëObje˘Iãm
(
roŸ
, "⁄e")->
vÆue°rög
);

646 
ªtu∫_vÆue
 = 
	`cJSON_SëVÆue°rög
(
	`cJSON_GëObje˘Iãm
(
roŸ
, "two"), 
l⁄g_vÆue°rög
);

647 
	`TEST_ASSERT_NULL_MESSAGE
(
ªtu∫_vÆue
, "valuestring ofÑeference object shouldÇot be changed");

648 
	`TEST_ASSERT_EQUAL_STRING
(
ª„ªn˚_vÆue°rög
, 
	`cJSON_GëObje˘Iãm
(
roŸ
, "two")->
vÆue°rög
);

650 
	`cJSON_Dñëe
(
roŸ
);

651 
	}
}

653 
CJSON_CDECL
 
	$maö
()

655 
	`UNITY_BEGIN
();

657 
	`RUN_TEST
(
cjs⁄_¨øy_f‹óch_should_lo›_ovî_¨øys
);

658 
	`RUN_TEST
(
cjs⁄_¨øy_f‹óch_should_nŸ_dîe„ªn˚_nuŒ_poöãr
);

659 
	`RUN_TEST
(
cjs⁄_gë_obje˘_ôem_should_gë_obje˘_ôems
);

660 
	`RUN_TEST
(
cjs⁄_gë_obje˘_ôem_ˇ£_£nsôive_should_gë_obje˘_ôems
);

661 
	`RUN_TEST
(
cjs⁄_gë_obje˘_ôem_should_nŸ_¸ash_wôh_¨øy
);

662 
	`RUN_TEST
(
cjs⁄_gë_obje˘_ôem_ˇ£_£nsôive_should_nŸ_¸ash_wôh_¨øy
);

663 
	`RUN_TEST
(
ty≥check_fun˘i⁄s_should_check_ty≥
);

664 
	`RUN_TEST
(
cjs⁄_should_nŸ_∑r£_to_dì∂y_√°ed_js⁄s
);

665 
	`RUN_TEST
(
cjs⁄_£t_numbî_vÆue_should_£t_numbîs
);

666 
	`RUN_TEST
(
cjs⁄_dëach_ôem_vü_poöãr_should_dëach_ôems
);

667 
	`RUN_TEST
(
cjs⁄_ª∂a˚_ôem_vü_poöãr_should_ª∂a˚_ôems
);

668 
	`RUN_TEST
(
cjs⁄_ª∂a˚_ôem_ö_obje˘_should_¥e£rve_«me
);

669 
	`RUN_TEST
(
cjs⁄_fun˘i⁄s_should_nŸ_¸ash_wôh_nuŒ_poöãrs
);

670 
	`RUN_TEST
(
ísuª_should_Áû_⁄_Áûed_ªÆloc
);

671 
	`RUN_TEST
(
skù_utf8_bom_should_skù_bom
);

672 
	`RUN_TEST
(
skù_utf8_bom_should_nŸ_skù_bom_if_nŸ_©_begönög
);

673 
	`RUN_TEST
(
cjs⁄_gë_°rög_vÆue_should_gë_a_°rög
);

674 
	`RUN_TEST
(
cjs⁄_gë_numbî_vÆue_should_gë_a_numbî
);

675 
	`RUN_TEST
(
cjs⁄_¸óã_°rög_ª„ªn˚_should_¸óã_a_°rög_ª„ªn˚
);

676 
	`RUN_TEST
(
cjs⁄_¸óã_obje˘_ª„ªn˚_should_¸óã_™_obje˘_ª„ªn˚
);

677 
	`RUN_TEST
(
cjs⁄_¸óã_¨øy_ª„ªn˚_should_¸óã_™_¨øy_ª„ªn˚
);

678 
	`RUN_TEST
(
cjs⁄_add_ôem_to_obje˘_‹_¨øy_should_nŸ_add_ô£lf
);

679 
	`RUN_TEST
(
cjs⁄_add_ôem_to_obje˘_should_nŸ_u£_a·î_‰ì_whí_°rög_is_Æü£d
);

680 
	`RUN_TEST
(
cjs⁄_dñëe_ôem_‰om_¨øy_should_nŸ_brokí_li°_°ru˘uª
);

681 
	`RUN_TEST
(
cjs⁄_£t_vÆue°rög_to_obje˘_should_nŸ_Àak_mem‹y
);

683  
	`UNITY_END
();

684 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/misc_utils_tests.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

28 
	~"unôy/§c/unôy.h
"

29 
	~"comm⁄.h
"

30 
	~"../cJSON_Utûs.h
"

32 
	$cjs⁄_utûs_fun˘i⁄s_should¡_¸ash_wôh_nuŒ_poöãrs
()

34 
cJSON
 *
ôem
 = 
	`cJSON_Cª©eSåög
("item");

35 
	`TEST_ASSERT_NOT_NULL
(
ôem
);

37 
	`TEST_ASSERT_NULL
(
	`cJSONUtûs_GëPoöãr
(
ôem
, 
NULL
));

38 
	`TEST_ASSERT_NULL
(
	`cJSONUtûs_GëPoöãr
(
NULL
, "pointer"));

39 
	`TEST_ASSERT_NULL
(
	`cJSONUtûs_GëPoöãrCa£Sísôive
(
NULL
, "pointer"));

40 
	`TEST_ASSERT_NULL
(
	`cJSONUtûs_GëPoöãrCa£Sísôive
(
ôem
, 
NULL
));

41 
	`TEST_ASSERT_NULL
(
	`cJSONUtûs_Gíî©eP©ches
(
ôem
, 
NULL
));

42 
	`TEST_ASSERT_NULL
(
	`cJSONUtûs_Gíî©eP©ches
(
NULL
, 
ôem
));

43 
	`TEST_ASSERT_NULL
(
	`cJSONUtûs_Gíî©eP©chesCa£Sísôive
(
ôem
, 
NULL
));

44 
	`TEST_ASSERT_NULL
(
	`cJSONUtûs_Gíî©eP©chesCa£Sísôive
(
NULL
, 
ôem
));

45 
	`cJSONUtûs_AddP©chToAºay
(
ôem
, "∑th", "add", 
NULL
);

46 
	`cJSONUtûs_AddP©chToAºay
(
ôem
, "∑th", 
NULL
, item);

47 
	`cJSONUtûs_AddP©chToAºay
(
ôem
, 
NULL
, "add", item);

48 
	`cJSONUtûs_AddP©chToAºay
(
NULL
, "∑th", "add", 
ôem
);

49 
	`cJSONUtûs_AµlyP©ches
(
ôem
, 
NULL
);

50 
	`cJSONUtûs_AµlyP©ches
(
NULL
, 
ôem
);

51 
	`cJSONUtûs_AµlyP©chesCa£Sísôive
(
ôem
, 
NULL
);

52 
	`cJSONUtûs_AµlyP©chesCa£Sísôive
(
NULL
, 
ôem
);

53 
	`TEST_ASSERT_NULL
(
	`cJSONUtûs_MîgeP©ch
(
ôem
, 
NULL
));

54 
ôem
 = 
	`cJSON_Cª©eSåög
("item");

55 
	`TEST_ASSERT_NULL
(
	`cJSONUtûs_MîgeP©chCa£Sísôive
(
ôem
, 
NULL
));

56 
ôem
 = 
	`cJSON_Cª©eSåög
("item");

65 
	`TEST_ASSERT_NULL
(
	`cJSONUtûs_FödPoöãrFromObje˘To
(
ôem
, 
NULL
));

66 
	`TEST_ASSERT_NULL
(
	`cJSONUtûs_FödPoöãrFromObje˘To
(
NULL
, 
ôem
));

67 
	`cJSONUtûs_S‹tObje˘
(
NULL
);

68 
	`cJSONUtûs_S‹tObje˘Ca£Sísôive
(
NULL
);

70 
	`cJSON_Dñëe
(
ôem
);

71 
	}
}

73 
	$maö
()

75 
	`UNITY_BEGIN
();

77 
	`RUN_TEST
(
cjs⁄_utûs_fun˘i⁄s_should¡_¸ash_wôh_nuŒ_poöãrs
);

79  
	`UNITY_END
();

80 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/old_utils_tests.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

28 
	~"unôy/§c/unôy.h
"

29 
	~"comm⁄.h
"

30 
	~"../cJSON_Utûs.h
"

33 c⁄° *
	gmîges
[15][3] =

52 
	$js⁄_poöãr_ã°s
()

54 
cJSON
 *
roŸ
 = 
NULL
;

55 c⁄° *
js⁄
=

69 
roŸ
 = 
	`cJSON_P¨£
(
js⁄
);

71 
	`TEST_ASSERT_EQUAL_PTR
(
	`cJSONUtûs_GëPoöãr
(
roŸ
, ""),Ñoot);

72 
	`TEST_ASSERT_EQUAL_PTR
(
	`cJSONUtûs_GëPoöãr
(
roŸ
, "/foo"), 
	`cJSON_GëObje˘Iãm
(root, "foo"));

73 
	`TEST_ASSERT_EQUAL_PTR
(
	`cJSONUtûs_GëPoöãr
(
roŸ
, "/foo/0"), 
	`cJSON_GëObje˘Iãm
‘oŸ, "foo")->
chûd
);

74 
	`TEST_ASSERT_EQUAL_PTR
(
	`cJSONUtûs_GëPoöãr
(
roŸ
, "/foo/0"), 
	`cJSON_GëObje˘Iãm
‘oŸ, "foo")->
chûd
);

75 
	`TEST_ASSERT_EQUAL_PTR
(
	`cJSONUtûs_GëPoöãr
(
roŸ
, "/"), 
	`cJSON_GëObje˘Iãm
(root, ""));

76 
	`TEST_ASSERT_EQUAL_PTR
(
	`cJSONUtûs_GëPoöãr
(
roŸ
, "/a~1b"), 
	`cJSON_GëObje˘Iãm
(root, "a/b"));

77 
	`TEST_ASSERT_EQUAL_PTR
(
	`cJSONUtûs_GëPoöãr
(
roŸ
, "/c%d"), 
	`cJSON_GëObje˘Iãm
(root, "c%d"));

78 
	`TEST_ASSERT_EQUAL_PTR
(
	`cJSONUtûs_GëPoöãr
(
roŸ
, "/c^f"), 
	`cJSON_GëObje˘Iãm
(root, "c^f"));

79 
	`TEST_ASSERT_EQUAL_PTR
(
	`cJSONUtûs_GëPoöãr
(
roŸ
, "/c|f"), 
	`cJSON_GëObje˘Iãm
(root, "c|f"));

80 
	`TEST_ASSERT_EQUAL_PTR
(
	`cJSONUtûs_GëPoöãr
(
roŸ
, "/i\\j"), 
	`cJSON_GëObje˘Iãm
(root, "i\\j"));

81 
	`TEST_ASSERT_EQUAL_PTR
(
	`cJSONUtûs_GëPoöãr
(
roŸ
, "/k\"l"), 
	`cJSON_GëObje˘Iãm
(root, "k\"l"));

82 
	`TEST_ASSERT_EQUAL_PTR
(
	`cJSONUtûs_GëPoöãr
(
roŸ
, "/ "), 
	`cJSON_GëObje˘Iãm
(root, " "));

83 
	`TEST_ASSERT_EQUAL_PTR
(
	`cJSONUtûs_GëPoöãr
(
roŸ
, "/m~0n"), 
	`cJSON_GëObje˘Iãm
(root, "m~n"));

85 
	`cJSON_Dñëe
(
roŸ
);

86 
	}
}

88 
	$misc_ã°s
()

91 
numbîs
[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

92 
cJSON
 *
obje˘
 = 
NULL
;

93 
cJSON
 *
obje˘1
 = 
NULL
;

94 
cJSON
 *
obje˘2
 = 
NULL
;

95 
cJSON
 *
obje˘3
 = 
NULL
;

96 
cJSON
 *
obje˘4
 = 
NULL
;

97 
cJSON
 *
nums
 = 
NULL
;

98 
cJSON
 *
num6
 = 
NULL
;

99 *
poöãr
 = 
NULL
;

101 
	`¥ötf
("JSON Pointer construct\n");

102 
obje˘
 = 
	`cJSON_Cª©eObje˘
();

103 
nums
 = 
	`cJSON_Cª©eI¡Aºay
(
numbîs
, 10);

104 
num6
 = 
	`cJSON_GëAºayIãm
(
nums
, 6);

105 
	`cJSON_AddIãmToObje˘
(
obje˘
, "numbîs", 
nums
);

107 
poöãr
 = 
	`cJSONUtûs_FödPoöãrFromObje˘To
(
obje˘
, 
num6
);

108 
	`TEST_ASSERT_EQUAL_STRING
("/numbîs/6", 
poöãr
);

109 
	`‰ì
(
poöãr
);

111 
poöãr
 = 
	`cJSONUtûs_FödPoöãrFromObje˘To
(
obje˘
, 
nums
);

112 
	`TEST_ASSERT_EQUAL_STRING
("/numbîs", 
poöãr
);

113 
	`‰ì
(
poöãr
);

115 
poöãr
 = 
	`cJSONUtûs_FödPoöãrFromObje˘To
(
obje˘
, object);

116 
	`TEST_ASSERT_EQUAL_STRING
("", 
poöãr
);

117 
	`‰ì
(
poöãr
);

119 
obje˘1
 = 
	`cJSON_Cª©eObje˘
();

120 
obje˘2
 = 
	`cJSON_Cª©eSåög
("m~n");

121 
	`cJSON_AddIãmToObje˘
(
obje˘1
, "m~n", 
obje˘2
);

122 
poöãr
 = 
	`cJSONUtûs_FödPoöãrFromObje˘To
(
obje˘1
, 
obje˘2
);

123 
	`TEST_ASSERT_EQUAL_STRING
("/m~0n",
poöãr
);

124 
	`‰ì
(
poöãr
);

126 
obje˘3
 = 
	`cJSON_Cª©eObje˘
();

127 
obje˘4
 = 
	`cJSON_Cª©eSåög
("m/n");

128 
	`cJSON_AddIãmToObje˘
(
obje˘3
, "m/n", 
obje˘4
);

129 
poöãr
 = 
	`cJSONUtûs_FödPoöãrFromObje˘To
(
obje˘3
, 
obje˘4
);

130 
	`TEST_ASSERT_EQUAL_STRING
("/m~1n",
poöãr
);

131 
	`‰ì
(
poöãr
);

133 
	`cJSON_Dñëe
(
obje˘
);

134 
	`cJSON_Dñëe
(
obje˘1
);

135 
	`cJSON_Dñëe
(
obje˘3
);

136 
	}
}

138 
	$s‹t_ã°s
()

141 c⁄° *
øndom
 = "QWERTYUIOPASDFGHJKLZXCVBNM";

142 
buf
[2] = {'\0', '\0'};

143 
cJSON
 *
s‹tme
 = 
NULL
;

144 
size_t
 
i
 = 0;

145 
cJSON
 *
cuºít_ñemít
 = 
NULL
;

148 
s‹tme
 = 
	`cJSON_Cª©eObje˘
();

149 
i
 = 0; i < 26; i++)

151 
buf
[0] = 
øndom
[
i
];

152 
	`cJSON_AddIãmToObje˘
(
s‹tme
, 
buf
, 
	`cJSON_Cª©eNumbî
(1));

155 
	`cJSONUtûs_S‹tObje˘
(
s‹tme
);

158 
cuºít_ñemít
 = 
s‹tme
->
chûd
->
√xt
;

159 
i
 = 1; (ò< 26Ë&& (
cuºít_ñemít
 !
NULL
Ë&& (cuºít_ñemít->
¥ev
 != NULL); i++)

161 
	`TEST_ASSERT_TRUE
(
cuºít_ñemít
->
°rög
[0] >cuºít_ñemít->
¥ev
->string[0]);

162 
cuºít_ñemít
 = cuºít_ñemít->
√xt
;

165 
	`cJSON_Dñëe
(
s‹tme
);

166 
	}
}

168 
	$mîge_ã°s
()

170 
size_t
 
i
 = 0;

171 *
∑tchãxt
 = 
NULL
;

172 *
a·î
 = 
NULL
;

175 
	`¥ötf
("JSON Merge PatchÅests\n");

176 
i
 = 0; i < 15; i++)

178 
cJSON
 *
obje˘_to_be_mîged
 = 
	`cJSON_P¨£
(
mîges
[
i
][0]);

179 
cJSON
 *
∑tch
 = 
	`cJSON_P¨£
(
mîges
[
i
][1]);

180 
∑tchãxt
 = 
	`cJSON_PrötUnf‹m©ãd
(
∑tch
);

181 
obje˘_to_be_mîged
 = 
	`cJSONUtûs_MîgeP©ch
(obje˘_to_be_mîged, 
∑tch
);

182 
a·î
 = 
	`cJSON_PrötUnf‹m©ãd
(
obje˘_to_be_mîged
);

183 
	`TEST_ASSERT_EQUAL_STRING
(
mîges
[
i
][2], 
a·î
);

185 
	`‰ì
(
∑tchãxt
);

186 
	`‰ì
(
a·î
);

187 
	`cJSON_Dñëe
(
obje˘_to_be_mîged
);

188 
	`cJSON_Dñëe
(
∑tch
);

190 
	}
}

192 
	$gíî©e_mîge_ã°s
()

194 
size_t
 
i
 = 0;

195 *
∑tchedãxt
 = 
NULL
;

198 
i
 = 0; i < 15; i++)

200 
cJSON
 *
‰om
 = 
	`cJSON_P¨£
(
mîges
[
i
][0]);

201 
cJSON
 *
to
 = 
	`cJSON_P¨£
(
mîges
[
i
][2]);

202 
cJSON
 *
∑tch
 = 
	`cJSONUtûs_Gíî©eMîgeP©ch
(
‰om
,
to
);

203 
‰om
 = 
	`cJSONUtûs_MîgeP©ch
(‰om,
∑tch
);

204 
∑tchedãxt
 = 
	`cJSON_PrötUnf‹m©ãd
(
‰om
);

205 
	`TEST_ASSERT_EQUAL_STRING
(
mîges
[
i
][2], 
∑tchedãxt
);

207 
	`cJSON_Dñëe
(
‰om
);

208 
	`cJSON_Dñëe
(
to
);

209 
	`cJSON_Dñëe
(
∑tch
);

210 
	`‰ì
(
∑tchedãxt
);

212 
	}
}

214 
	$maö
()

216 
	`UNITY_BEGIN
();

218 
	`RUN_TEST
(
js⁄_poöãr_ã°s
);

219 
	`RUN_TEST
(
misc_ã°s
);

220 
	`RUN_TEST
(
s‹t_ã°s
);

221 
	`RUN_TEST
(
mîge_ã°s
);

222 
	`RUN_TEST
(
gíî©e_mîge_ã°s
);

224  
	`UNITY_END
();

225 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/parse_array.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

28 
	~"unôy/§c/unôy.h
"

29 
	~"comm⁄.h
"

31 
cJSON
 
	gôem
[1];

33 
	$as£π_is_¨øy
(
cJSON
 *
¨øy_ôem
)

35 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
¨øy_ôem
, "Item is NULL.");

37 
	`as£π_nŸ_ö_li°
(
¨øy_ôem
);

38 
	`as£π_has_ty≥
(
¨øy_ôem
, 
cJSON_Aºay
);

39 
	`as£π_has_no_ª„ªn˚
(
¨øy_ôem
);

40 
	`as£π_has_no_c⁄°_°rög
(
¨øy_ôem
);

41 
	`as£π_has_no_vÆue°rög
(
¨øy_ôem
);

42 
	`as£π_has_no_°rög
(
¨øy_ôem
);

43 
	}
}

45 
	$as£π_nŸ_¨øy
(c⁄° *
js⁄
)

47 
∑r£_buf„r
 
buf„r
 = { 0, 0, 0, 0, { 0, 0, 0 } };

48 
buf„r
.
c⁄ã¡
 = (c⁄° *)
js⁄
;

49 
buf„r
.
Àngth
 = 
	`°æí
(
js⁄
) + ("");

50 
buf„r
.
hooks
 = 
globÆ_hooks
;

52 
	`TEST_ASSERT_FALSE
(
	`∑r£_¨øy
(
ôem
, &
buf„r
));

53 
	`as£π_is_övÆid
(
ôem
);

54 
	}
}

56 
	$as£π_∑r£_¨øy
(c⁄° *
js⁄
)

58 
∑r£_buf„r
 
buf„r
 = { 0, 0, 0, 0, { 0, 0, 0 } };

59 
buf„r
.
c⁄ã¡
 = (c⁄° *)
js⁄
;

60 
buf„r
.
Àngth
 = 
	`°æí
(
js⁄
) + ("");

61 
buf„r
.
hooks
 = 
globÆ_hooks
;

63 
	`TEST_ASSERT_TRUE
(
	`∑r£_¨øy
(
ôem
, &
buf„r
));

64 
	`as£π_is_¨øy
(
ôem
);

65 
	}
}

67 
	$∑r£_¨øy_should_∑r£_em±y_¨øys
()

69 
	`as£π_∑r£_¨øy
("[]");

70 
	`as£π_has_no_chûd
(
ôem
);

72 
	`as£π_∑r£_¨øy
("[\n\t]");

73 
	`as£π_has_no_chûd
(
ôem
);

74 
	}
}

77 
	$∑r£_¨øy_should_∑r£_¨øys_wôh_⁄e_ñemít
()

80 
	`as£π_∑r£_¨øy
("[1]");

81 
	`as£π_has_chûd
(
ôem
);

82 
	`as£π_has_ty≥
(
ôem
->
chûd
, 
cJSON_Numbî
);

83 
	`ª£t
(
ôem
);

85 
	`as£π_∑r£_¨øy
("[\"hello!\"]");

86 
	`as£π_has_chûd
(
ôem
);

87 
	`as£π_has_ty≥
(
ôem
->
chûd
, 
cJSON_Såög
);

88 
	`TEST_ASSERT_EQUAL_STRING
("hñlo!", 
ôem
->
chûd
->
vÆue°rög
);

89 
	`ª£t
(
ôem
);

91 
	`as£π_∑r£_¨øy
("[[]]");

92 
	`as£π_has_chûd
(
ôem
);

93 
	`TEST_ASSERT_NOT_NULL
(
ôem
->
chûd
);

94 
	`as£π_has_ty≥
(
ôem
->
chûd
, 
cJSON_Aºay
);

95 
	`as£π_has_no_chûd
(
ôem
->
chûd
);

96 
	`ª£t
(
ôem
);

98 
	`as£π_∑r£_¨øy
("[null]");

99 
	`as£π_has_chûd
(
ôem
);

100 
	`as£π_has_ty≥
(
ôem
->
chûd
, 
cJSON_NULL
);

101 
	`ª£t
(
ôem
);

102 
	}
}

104 
	$∑r£_¨øy_should_∑r£_¨øys_wôh_mu…ùÀ_ñemíts
()

106 
	`as£π_∑r£_¨øy
("[1\t,\n2, 3]");

107 
	`as£π_has_chûd
(
ôem
);

108 
	`TEST_ASSERT_NOT_NULL
(
ôem
->
chûd
->
√xt
);

109 
	`TEST_ASSERT_NOT_NULL
(
ôem
->
chûd
->
√xt
->next);

110 
	`TEST_ASSERT_NULL
(
ôem
->
chûd
->
√xt
->next->next);

111 
	`as£π_has_ty≥
(
ôem
->
chûd
, 
cJSON_Numbî
);

112 
	`as£π_has_ty≥
(
ôem
->
chûd
->
√xt
, 
cJSON_Numbî
);

113 
	`as£π_has_ty≥
(
ôem
->
chûd
->
√xt
->√xt, 
cJSON_Numbî
);

114 
	`ª£t
(
ôem
);

117 
size_t
 
i
 = 0;

118 
cJSON
 *
node
 = 
NULL
;

119 
ex≥˘ed_ty≥s
[7] =

121 
cJSON_Numbî
,

122 
cJSON_NULL
,

123 
cJSON_True
,

124 
cJSON_FÆ£
,

125 
cJSON_Aºay
,

126 
cJSON_Såög
,

127 
cJSON_Obje˘


129 
	`as£π_∑r£_¨øy
("[1,Çull,Årue, false, [], \"hello\", {}]");

131 
node
 = 
ôem
->
chûd
;

133 
i
 = 0;

134 (
i
 < ((
ex≥˘ed_ty≥s
)/()))

135 && (
node
 !
NULL
);

136 ()
i
++, 
node
 =Çode->
√xt
)

138 
	`TEST_ASSERT_BITS
(0xFF, 
ex≥˘ed_ty≥s
[
i
], 
node
->
ty≥
);

140 
	`TEST_ASSERT_EQUAL_INT
(
i
, 7);

141 
	`ª£t
(
ôem
);

143 
	}
}

145 
	$∑r£_¨øy_should_nŸ_∑r£_n⁄_¨øys
()

147 
	`as£π_nŸ_¨øy
("");

148 
	`as£π_nŸ_¨øy
("[");

149 
	`as£π_nŸ_¨øy
("]");

150 
	`as£π_nŸ_¨øy
("{\"hello\":[]}");

151 
	`as£π_nŸ_¨øy
("42");

152 
	`as£π_nŸ_¨øy
("3.14");

153 
	`as£π_nŸ_¨øy
("\"[]hello world!\n\"");

154 
	}
}

156 
CJSON_CDECL
 
	$maö
()

159 
	`mem£t
(
ôem
, 0, (
cJSON
));

161 
	`UNITY_BEGIN
();

162 
	`RUN_TEST
(
∑r£_¨øy_should_∑r£_em±y_¨øys
);

163 
	`RUN_TEST
(
∑r£_¨øy_should_∑r£_¨øys_wôh_⁄e_ñemít
);

164 
	`RUN_TEST
(
∑r£_¨øy_should_∑r£_¨øys_wôh_mu…ùÀ_ñemíts
);

165 
	`RUN_TEST
(
∑r£_¨øy_should_nŸ_∑r£_n⁄_¨øys
);

166  
	`UNITY_END
();

167 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/parse_examples.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

28 
	~"unôy/§c/unôy.h
"

29 
	~"comm⁄.h
"

31 
cJSON
 *
	$∑r£_fûe
(c⁄° *
fûíame
)

33 
cJSON
 *
∑r£d
 = 
NULL
;

34 *
c⁄ã¡
 = 
	`ªad_fûe
(
fûíame
);

36 
∑r£d
 = 
	`cJSON_P¨£
(
c⁄ã¡
);

38 i‡(
c⁄ã¡
 !
NULL
)

40 
	`‰ì
(
c⁄ã¡
);

43  
∑r£d
;

44 
	}
}

46 
	$do_ã°
(c⁄° *
ã°_«me
)

48 *
ex≥˘ed
 = 
NULL
;

49 *
a˘uÆ
 = 
NULL
;

50 
cJSON
 *
åì
 = 
NULL
;

52 
size_t
 
ã°_«me_Àngth
 = 0;

54 *
ã°_∑th
 = 
NULL
;

56 *
ex≥˘ed_∑th
 = 
NULL
;

58 
ã°_«me_Àngth
 = 
	`°æí
(
ã°_«me
);

61 
	#TEST_DIR_PATH
 "öputs/"

	)

62 
ã°_∑th
 = (*)
	`mÆloc
((
TEST_DIR_PATH
Ë+ 
ã°_«me_Àngth
);

63 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
ã°_∑th
, "FailedÅoállocateÅest_path buffer.");

64 
ex≥˘ed_∑th
 = (*)
	`mÆloc
((
TEST_DIR_PATH
Ë+ 
ã°_«me_Àngth
 + (".expected"));

65 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
ex≥˘ed_∑th
, "FailedÅoállocateÉxpected_path buffer.");

68 
	`•rötf
(
ã°_∑th
, 
TEST_DIR_PATH
"%s", 
ã°_«me
);

69 
	`•rötf
(
ex≥˘ed_∑th
, 
TEST_DIR_PATH
"%s.ex≥˘ed", 
ã°_«me
);

72 
ex≥˘ed
 = 
	`ªad_fûe
(
ex≥˘ed_∑th
);

73 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
ex≥˘ed
, "FailedÅoÑeadÉxpected output.");

76 
åì
 = 
	`∑r£_fûe
(
ã°_∑th
);

77 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
åì
, "FailedÅoÑead ofÖarseÅest.");

80 
a˘uÆ
 = 
	`cJSON_Pröt
(
åì
);

81 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
a˘uÆ
, "FailedÅoÖrintÅree backÅo JSON.");

84 
	`TEST_ASSERT_EQUAL_STRING
(
ex≥˘ed
, 
a˘uÆ
);

87 i‡(
ex≥˘ed
 !
NULL
)

89 
	`‰ì
(
ex≥˘ed
);

91 i‡(
åì
 !
NULL
)

93 
	`cJSON_Dñëe
(
åì
);

95 i‡(
a˘uÆ
 !
NULL
)

97 
	`‰ì
(
a˘uÆ
);

99 i‡(
ã°_∑th
 !
NULL
)

101 
	`‰ì
(
ã°_∑th
);

103 i‡(
ex≥˘ed_∑th
 !
NULL
)

105 
	`‰ì
(
ex≥˘ed_∑th
);

107 
	}
}

109 
	$fûe_ã°1_should_be_∑r£d_™d_¥öãd
()

111 
	`do_ã°
("test1");

112 
	}
}

114 
	$fûe_ã°2_should_be_∑r£d_™d_¥öãd
()

116 
	`do_ã°
("test2");

117 
	}
}

119 
	$fûe_ã°3_should_be_∑r£d_™d_¥öãd
()

121 
	`do_ã°
("test3");

122 
	}
}

124 
	$fûe_ã°4_should_be_∑r£d_™d_¥öãd
()

126 
	`do_ã°
("test4");

127 
	}
}

129 
	$fûe_ã°5_should_be_∑r£d_™d_¥öãd
()

131 
	`do_ã°
("test5");

132 
	}
}

134 
	$fûe_ã°6_should_nŸ_be_∑r£d
()

136 *
ã°6
 = 
NULL
;

137 
cJSON
 *
åì
 = 
NULL
;

139 
ã°6
 = 
	`ªad_fûe
("inputs/test6");

140 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
ã°6
, "FailedÅoÑeadÅest6 data.");

142 
åì
 = 
	`cJSON_P¨£
(
ã°6
);

143 
	`TEST_ASSERT_NULL_MESSAGE
(
åì
, "Should failÅoÖarse what isÇot JSON.");

145 
	`TEST_ASSERT_EQUAL_PTR_MESSAGE
(
ã°6
, 
	`cJSON_GëEº‹På
(), "ErrorÖointer is incorrect.");

147 i‡(
ã°6
 !
NULL
)

149 
	`‰ì
(
ã°6
);

151 i‡(
åì
 !
NULL
)

153 
	`cJSON_Dñëe
(
åì
);

155 
	}
}

157 
	$fûe_ã°7_should_be_∑r£d_™d_¥öãd
()

159 
	`do_ã°
("test7");

160 
	}
}

162 
	$fûe_ã°8_should_be_∑r£d_™d_¥öãd
()

164 
	`do_ã°
("test8");

165 
	}
}

167 
	$fûe_ã°9_should_be_∑r£d_™d_¥öãd
()

169 
	`do_ã°
("test9");

170 
	}
}

172 
	$fûe_ã°10_should_be_∑r£d_™d_¥öãd
()

174 
	`do_ã°
("test10");

175 
	}
}

177 
	$fûe_ã°11_should_be_∑r£d_™d_¥öãd
()

179 
	`do_ã°
("test11");

180 
	}
}

182 
	$ã°12_should_nŸ_be_∑r£d
()

184 c⁄° *
ã°12
 = "{ \"name\": ";

185 
cJSON
 *
åì
 = 
NULL
;

187 
åì
 = 
	`cJSON_P¨£
(
ã°12
);

188 
	`TEST_ASSERT_NULL_MESSAGE
(
åì
, "Should failÅoÖarse incomplete JSON.");

190 
	`TEST_ASSERT_EQUAL_PTR_MESSAGE
(
ã°12
 + 
	`°æí
—e°12), 
	`cJSON_GëEº‹På
(), "ErrorÖointer is incorrect.");

192 i‡(
åì
 !
NULL
)

194 
	`cJSON_Dñëe
(
åì
);

196 
	}
}

198 
	$ã°13_should_be_∑r£d_wôhout_nuŒ_ãrmö©i⁄
()

200 
cJSON
 *
åì
 = 
NULL
;

201 c⁄° 
ã°_13
[] = "{" \

215 
ã°_13_wo_nuŒ
[(
ã°_13
) - 1];

216 
	`mem˝y
(
ã°_13_wo_nuŒ
, 
ã°_13
, (test_13) - 1);

218 
åì
 = 
	`cJSON_P¨£WôhLígth
(
ã°_13_wo_nuŒ
, (
ã°_13
) - 1);

219 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
åì
, "FailedÅoÖarse valid json.");

221 i‡(
åì
 !
NULL
)

223 
	`cJSON_Dñëe
(
åì
);

225 
	}
}

227 
	$ã°14_should_nŸ_be_∑r£d
()

229 
cJSON
 *
åì
 = 
NULL
;

230 c⁄° 
ã°_14
[] = "{" \

244 
åì
 = 
	`cJSON_P¨£WôhLígth
(
ã°_14
, (test_14) - 2);

245 
	`TEST_ASSERT_NULL_MESSAGE
(
åì
, "ShouldÇot continueáfter buffer_length isÑeached.");

247 i‡(
åì
 !
NULL
)

249 
	`cJSON_Dñëe
(
åì
);

251 
	}
}

253 
CJSON_CDECL
 
	$maö
()

255 
	`UNITY_BEGIN
();

256 
	`RUN_TEST
(
fûe_ã°1_should_be_∑r£d_™d_¥öãd
);

257 
	`RUN_TEST
(
fûe_ã°2_should_be_∑r£d_™d_¥öãd
);

258 
	`RUN_TEST
(
fûe_ã°3_should_be_∑r£d_™d_¥öãd
);

259 
	`RUN_TEST
(
fûe_ã°4_should_be_∑r£d_™d_¥öãd
);

260 
	`RUN_TEST
(
fûe_ã°5_should_be_∑r£d_™d_¥öãd
);

261 
	`RUN_TEST
(
fûe_ã°6_should_nŸ_be_∑r£d
);

262 
	`RUN_TEST
(
fûe_ã°7_should_be_∑r£d_™d_¥öãd
);

263 
	`RUN_TEST
(
fûe_ã°8_should_be_∑r£d_™d_¥öãd
);

264 
	`RUN_TEST
(
fûe_ã°9_should_be_∑r£d_™d_¥öãd
);

265 
	`RUN_TEST
(
fûe_ã°10_should_be_∑r£d_™d_¥öãd
);

266 
	`RUN_TEST
(
fûe_ã°11_should_be_∑r£d_™d_¥öãd
);

267 
	`RUN_TEST
(
ã°12_should_nŸ_be_∑r£d
);

268 
	`RUN_TEST
(
ã°13_should_be_∑r£d_wôhout_nuŒ_ãrmö©i⁄
);

269 
	`RUN_TEST
(
ã°14_should_nŸ_be_∑r£d
);

270  
	`UNITY_END
();

271 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/parse_hex4.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

28 
	~"unôy/§c/unôy.h
"

29 
	~"comm⁄.h
"

31 
	$∑r£_hex4_should_∑r£_Æl_combö©i⁄s
()

33 
numbî
 = 0;

34 
digôs_lowî
[6];

35 
digôs_uµî
[6];

37 
numbî
 = 0;Çumber <= 0xFFFF;Çumber++)

39 
	`TEST_ASSERT_EQUAL_INT_MESSAGE
(4, 
	`•rötf
((*)
digôs_lowî
, "%.4x", 
numbî
), "sprintf failed.");

40 
	`TEST_ASSERT_EQUAL_INT_MESSAGE
(4, 
	`•rötf
((*)
digôs_uµî
, "%.4X", 
numbî
), "sprintf failed.");

42 
	`TEST_ASSERT_EQUAL_INT_MESSAGE
(
numbî
, 
	`∑r£_hex4
(
digôs_lowî
), "FailedÅoÖarseÜowercase digits.");

43 
	`TEST_ASSERT_EQUAL_INT_MESSAGE
(
numbî
, 
	`∑r£_hex4
(
digôs_uµî
), "FailedÅoÖarse uppercase digits.");

45 
	}
}

47 
	$∑r£_hex4_should_∑r£_mixed_ˇ£
()

49 
	`TEST_ASSERT_EQUAL_INT
(0xBEEF, 
	`∑r£_hex4
((const *)"beef"));

50 
	`TEST_ASSERT_EQUAL_INT
(0xBEEF, 
	`∑r£_hex4
((const *)"beeF"));

51 
	`TEST_ASSERT_EQUAL_INT
(0xBEEF, 
	`∑r£_hex4
((const *)"beEf"));

52 
	`TEST_ASSERT_EQUAL_INT
(0xBEEF, 
	`∑r£_hex4
((const *)"beEF"));

53 
	`TEST_ASSERT_EQUAL_INT
(0xBEEF, 
	`∑r£_hex4
((const *)"bEef"));

54 
	`TEST_ASSERT_EQUAL_INT
(0xBEEF, 
	`∑r£_hex4
((const *)"bEeF"));

55 
	`TEST_ASSERT_EQUAL_INT
(0xBEEF, 
	`∑r£_hex4
((const *)"bEEf"));

56 
	`TEST_ASSERT_EQUAL_INT
(0xBEEF, 
	`∑r£_hex4
((const *)"bEEF"));

57 
	`TEST_ASSERT_EQUAL_INT
(0xBEEF, 
	`∑r£_hex4
((const *)"Beef"));

58 
	`TEST_ASSERT_EQUAL_INT
(0xBEEF, 
	`∑r£_hex4
((const *)"BeeF"));

59 
	`TEST_ASSERT_EQUAL_INT
(0xBEEF, 
	`∑r£_hex4
((const *)"BeEf"));

60 
	`TEST_ASSERT_EQUAL_INT
(0xBEEF, 
	`∑r£_hex4
((const *)"BeEF"));

61 
	`TEST_ASSERT_EQUAL_INT
(0xBEEF, 
	`∑r£_hex4
((const *)"BEef"));

62 
	`TEST_ASSERT_EQUAL_INT
(0xBEEF, 
	`∑r£_hex4
((const *)"BEeF"));

63 
	`TEST_ASSERT_EQUAL_INT
(0xBEEF, 
	`∑r£_hex4
((const *)"BEEf"));

64 
	`TEST_ASSERT_EQUAL_INT
(0xBEEF, 
	`∑r£_hex4
((const *)"BEEF"));

65 
	}
}

67 
CJSON_CDECL
 
	$maö
()

69 
	`UNITY_BEGIN
();

70 
	`RUN_TEST
(
∑r£_hex4_should_∑r£_Æl_combö©i⁄s
);

71 
	`RUN_TEST
(
∑r£_hex4_should_∑r£_mixed_ˇ£
);

72  
	`UNITY_END
();

73 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/parse_number.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

28 
	~"unôy/§c/unôy.h
"

29 
	~"comm⁄.h
"

31 
cJSON
 
	gôem
[1];

33 
	$as£π_is_numbî
(
cJSON
 *
numbî_ôem
)

35 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
numbî_ôem
, "Item is NULL.");

37 
	`as£π_nŸ_ö_li°
(
numbî_ôem
);

38 
	`as£π_has_no_chûd
(
numbî_ôem
);

39 
	`as£π_has_ty≥
(
numbî_ôem
, 
cJSON_Numbî
);

40 
	`as£π_has_no_ª„ªn˚
(
numbî_ôem
);

41 
	`as£π_has_no_c⁄°_°rög
(
numbî_ôem
);

42 
	`as£π_has_no_vÆue°rög
(
numbî_ôem
);

43 
	`as£π_has_no_°rög
(
numbî_ôem
);

44 
	}
}

46 
	$as£π_∑r£_numbî
(c⁄° *
°rög
, 
öãgî
, 
ªÆ
)

48 
∑r£_buf„r
 
buf„r
 = { 0, 0, 0, 0, { 0, 0, 0 } };

49 
buf„r
.
c⁄ã¡
 = (c⁄° *)
°rög
;

50 
buf„r
.
Àngth
 = 
	`°æí
(
°rög
) + ("");

52 
	`TEST_ASSERT_TRUE
(
	`∑r£_numbî
(
ôem
, &
buf„r
));

53 
	`as£π_is_numbî
(
ôem
);

54 
	`TEST_ASSERT_EQUAL_INT
(
öãgî
, 
ôem
->
vÆueöt
);

55 
	`TEST_ASSERT_EQUAL_DOUBLE
(
ªÆ
, 
ôem
->
vÆuedoubÀ
);

56 
	}
}

58 
	$∑r£_numbî_should_∑r£_zîo
()

60 
	`as£π_∑r£_numbî
("0", 0, 0);

61 
	`as£π_∑r£_numbî
("0.0", 0, 0.0);

62 
	`as£π_∑r£_numbî
("-0", 0, -0.0);

63 
	}
}

65 
	$∑r£_numbî_should_∑r£_√g©ive_öãgîs
()

67 
	`as£π_∑r£_numbî
("-1", -1, -1);

68 
	`as£π_∑r£_numbî
("-32768", -32768, -32768.0);

69 
	`as£π_∑r£_numbî
("-2147483648", ()-2147483648.0, -2147483648.0);

70 
	}
}

72 
	$∑r£_numbî_should_∑r£_posôive_öãgîs
()

74 
	`as£π_∑r£_numbî
("1", 1, 1);

75 
	`as£π_∑r£_numbî
("32767", 32767, 32767.0);

76 
	`as£π_∑r£_numbî
("2147483647", ()2147483647.0, 2147483647.0);

77 
	}
}

79 
	$∑r£_numbî_should_∑r£_posôive_ªÆs
()

81 
	`as£π_∑r£_numbî
("0.001", 0, 0.001);

82 
	`as£π_∑r£_numbî
("10e-10", 0, 10e-10);

83 
	`as£π_∑r£_numbî
("10E-10", 0, 10e-10);

84 
	`as£π_∑r£_numbî
("10e10", 
INT_MAX
, 10e10);

85 
	`as£π_∑r£_numbî
("123e+127", 
INT_MAX
, 123e127);

86 
	`as£π_∑r£_numbî
("123e-128", 0, 123e-128);

87 
	}
}

89 
	$∑r£_numbî_should_∑r£_√g©ive_ªÆs
()

91 
	`as£π_∑r£_numbî
("-0.001", 0, -0.001);

92 
	`as£π_∑r£_numbî
("-10e-10", 0, -10e-10);

93 
	`as£π_∑r£_numbî
("-10E-10", 0, -10e-10);

94 
	`as£π_∑r£_numbî
("-10e20", 
INT_MIN
, -10e20);

95 
	`as£π_∑r£_numbî
("-123e+127", 
INT_MIN
, -123e127);

96 
	`as£π_∑r£_numbî
("-123e-128", 0, -123e-128);

97 
	}
}

99 
CJSON_CDECL
 
	$maö
()

102 
	`mem£t
(
ôem
, 0, (
cJSON
));

103 
	`UNITY_BEGIN
();

104 
	`RUN_TEST
(
∑r£_numbî_should_∑r£_zîo
);

105 
	`RUN_TEST
(
∑r£_numbî_should_∑r£_√g©ive_öãgîs
);

106 
	`RUN_TEST
(
∑r£_numbî_should_∑r£_posôive_öãgîs
);

107 
	`RUN_TEST
(
∑r£_numbî_should_∑r£_posôive_ªÆs
);

108 
	`RUN_TEST
(
∑r£_numbî_should_∑r£_√g©ive_ªÆs
);

109  
	`UNITY_END
();

110 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/parse_object.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

28 
	~"unôy/§c/unôy.h
"

29 
	~"comm⁄.h
"

31 
cJSON
 
	gôem
[1];

33 
	$as£π_is_obje˘
(
cJSON
 *
obje˘_ôem
)

35 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
obje˘_ôem
, "Item is NULL.");

37 
	`as£π_nŸ_ö_li°
(
obje˘_ôem
);

38 
	`as£π_has_ty≥
(
obje˘_ôem
, 
cJSON_Obje˘
);

39 
	`as£π_has_no_ª„ªn˚
(
obje˘_ôem
);

40 
	`as£π_has_no_c⁄°_°rög
(
obje˘_ôem
);

41 
	`as£π_has_no_vÆue°rög
(
obje˘_ôem
);

42 
	`as£π_has_no_°rög
(
obje˘_ôem
);

43 
	}
}

45 
	$as£π_is_chûd
(
cJSON
 *
chûd_ôem
, c⁄° *
«me
, 
ty≥
)

47 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
chûd_ôem
, "Child item is NULL.");

48 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
chûd_ôem
->
°rög
, "Child item doesn't haveáÇame.");

49 
	`TEST_ASSERT_EQUAL_STRING_MESSAGE
(
«me
, 
chûd_ôem
->
°rög
, "Child item hasÅhe wrongÇame.");

50 
	`TEST_ASSERT_BITS
(0xFF, 
ty≥
, 
chûd_ôem
->type);

51 
	}
}

53 
	$as£π_nŸ_obje˘
(c⁄° *
js⁄
)

55 
∑r£_buf„r
 
∑r£buf„r
 = { 0, 0, 0, 0, { 0, 0, 0 } };

56 
∑r£buf„r
.
c⁄ã¡
 = (c⁄° *)
js⁄
;

57 
∑r£buf„r
.
Àngth
 = 
	`°æí
(
js⁄
) + ("");

58 
∑r£buf„r
.
hooks
 = 
globÆ_hooks
;

60 
	`TEST_ASSERT_FALSE
(
	`∑r£_obje˘
(
ôem
, &
∑r£buf„r
));

61 
	`as£π_is_övÆid
(
ôem
);

62 
	`ª£t
(
ôem
);

63 
	}
}

65 
	$as£π_∑r£_obje˘
(c⁄° *
js⁄
)

67 
∑r£_buf„r
 
∑r£buf„r
 = { 0, 0, 0, 0, { 0, 0, 0 } };

68 
∑r£buf„r
.
c⁄ã¡
 = (c⁄° *)
js⁄
;

69 
∑r£buf„r
.
Àngth
 = 
	`°æí
(
js⁄
) + ("");

70 
∑r£buf„r
.
hooks
 = 
globÆ_hooks
;

72 
	`TEST_ASSERT_TRUE
(
	`∑r£_obje˘
(
ôem
, &
∑r£buf„r
));

73 
	`as£π_is_obje˘
(
ôem
);

74 
	}
}

76 
	$∑r£_obje˘_should_∑r£_em±y_obje˘s
()

78 
	`as£π_∑r£_obje˘
("{}");

79 
	`as£π_has_no_chûd
(
ôem
);

80 
	`ª£t
(
ôem
);

82 
	`as£π_∑r£_obje˘
("{\n\t}");

83 
	`as£π_has_no_chûd
(
ôem
);

84 
	`ª£t
(
ôem
);

85 
	}
}

87 
	$∑r£_obje˘_should_∑r£_obje˘s_wôh_⁄e_ñemít
()

90 
	`as£π_∑r£_obje˘
("{\"one\":1}");

91 
	`as£π_is_chûd
(
ôem
->
chûd
, "⁄e", 
cJSON_Numbî
);

92 
	`ª£t
(
ôem
);

94 
	`as£π_∑r£_obje˘
("{\"hello\":\"world!\"}");

95 
	`as£π_is_chûd
(
ôem
->
chûd
, "hñlo", 
cJSON_Såög
);

96 
	`ª£t
(
ôem
);

98 
	`as£π_∑r£_obje˘
("{\"array\":[]}");

99 
	`as£π_is_chûd
(
ôem
->
chûd
, "¨øy", 
cJSON_Aºay
);

100 
	`ª£t
(
ôem
);

102 
	`as£π_∑r£_obje˘
("{\"null\":null}");

103 
	`as£π_is_chûd
(
ôem
->
chûd
, "nuŒ", 
cJSON_NULL
);

104 
	`ª£t
(
ôem
);

105 
	}
}

107 
	$∑r£_obje˘_should_∑r£_obje˘s_wôh_mu…ùÀ_ñemíts
()

109 
	`as£π_∑r£_obje˘
("{\"one\":1\t,\t\"two\"\n:2, \"three\":3}");

110 
	`as£π_is_chûd
(
ôem
->
chûd
, "⁄e", 
cJSON_Numbî
);

111 
	`as£π_is_chûd
(
ôem
->
chûd
->
√xt
, "two", 
cJSON_Numbî
);

112 
	`as£π_is_chûd
(
ôem
->
chûd
->
√xt
->√xt, "thªe", 
cJSON_Numbî
);

113 
	`ª£t
(
ôem
);

116 
size_t
 
i
 = 0;

117 
cJSON
 *
node
 = 
NULL
;

118 
ex≥˘ed_ty≥s
[7] =

120 
cJSON_Numbî
,

121 
cJSON_NULL
,

122 
cJSON_True
,

123 
cJSON_FÆ£
,

124 
cJSON_Aºay
,

125 
cJSON_Såög
,

126 
cJSON_Obje˘


128 c⁄° *
ex≥˘ed_«mes
[7] =

138 
	`as£π_∑r£_obje˘
("{\"one\":1, \"NULL\":null, \"TRUE\":true, \"FALSE\":false, \"array\":[], \"world\":\"hello\", \"object\":{}}");

140 
node
 = 
ôem
->
chûd
;

142 
i
 = 0;

143 (
i
 < ((
ex≥˘ed_ty≥s
)/()))

144 && (
node
 !
NULL
);

145 ()
i
++, 
node
 =Çode->
√xt
)

147 
	`as£π_is_chûd
(
node
, 
ex≥˘ed_«mes
[
i
], 
ex≥˘ed_ty≥s
[i]);

149 
	`TEST_ASSERT_EQUAL_INT
(
i
, 7);

150 
	`ª£t
(
ôem
);

152 
	}
}

154 
	$∑r£_obje˘_should_nŸ_∑r£_n⁄_obje˘s
()

156 
	`as£π_nŸ_obje˘
("");

157 
	`as£π_nŸ_obje˘
("{");

158 
	`as£π_nŸ_obje˘
("}");

159 
	`as£π_nŸ_obje˘
("[\"hello\",{}]");

160 
	`as£π_nŸ_obje˘
("42");

161 
	`as£π_nŸ_obje˘
("3.14");

162 
	`as£π_nŸ_obje˘
("\"{}hello world!\n\"");

163 
	}
}

165 
CJSON_CDECL
 
	$maö
()

168 
	`mem£t
(
ôem
, 0, (
cJSON
));

170 
	`UNITY_BEGIN
();

171 
	`RUN_TEST
(
∑r£_obje˘_should_∑r£_em±y_obje˘s
);

172 
	`RUN_TEST
(
∑r£_obje˘_should_nŸ_∑r£_n⁄_obje˘s
);

173 
	`RUN_TEST
(
∑r£_obje˘_should_∑r£_obje˘s_wôh_mu…ùÀ_ñemíts
);

174 
	`RUN_TEST
(
∑r£_obje˘_should_∑r£_obje˘s_wôh_⁄e_ñemít
);

175  
	`UNITY_END
();

176 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/parse_string.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

28 
	~"unôy/§c/unôy.h
"

29 
	~"comm⁄.h
"

31 
cJSON
 
	gôem
[1];

33 
	$as£π_is_°rög
(
cJSON
 *
°rög_ôem
)

35 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
°rög_ôem
, "Item is NULL.");

37 
	`as£π_nŸ_ö_li°
(
°rög_ôem
);

38 
	`as£π_has_no_chûd
(
°rög_ôem
);

39 
	`as£π_has_ty≥
(
°rög_ôem
, 
cJSON_Såög
);

40 
	`as£π_has_no_ª„ªn˚
(
°rög_ôem
);

41 
	`as£π_has_no_c⁄°_°rög
(
°rög_ôem
);

42 
	`as£π_has_vÆue°rög
(
°rög_ôem
);

43 
	`as£π_has_no_°rög
(
°rög_ôem
);

44 
	}
}

46 
	$as£π_∑r£_°rög
(c⁄° *
°rög
, c⁄° *
ex≥˘ed
)

48 
∑r£_buf„r
 
buf„r
 = { 0, 0, 0, 0, { 0, 0, 0 } };

49 
buf„r
.
c⁄ã¡
 = (c⁄° *)
°rög
;

50 
buf„r
.
Àngth
 = 
	`°æí
(
°rög
) + ("");

51 
buf„r
.
hooks
 = 
globÆ_hooks
;

53 
	`TEST_ASSERT_TRUE_MESSAGE
(
	`∑r£_°rög
(
ôem
, &
buf„r
), "Couldn'tÖarse string.");

54 
	`as£π_is_°rög
(
ôem
);

55 
	`TEST_ASSERT_EQUAL_STRING_MESSAGE
(
ex≥˘ed
, 
ôem
->
vÆue°rög
, "TheÖarsedÑesult isn'tásÉxpected.");

56 
globÆ_hooks
.
	`dóŒoˇã
(
ôem
->
vÆue°rög
);

57 
ôem
->
vÆue°rög
 = 
NULL
;

58 
	}
}

60 
	$as£π_nŸ_∑r£_°rög
(c⁄° * c⁄° 
°rög
)

62 
∑r£_buf„r
 
buf„r
 = { 0, 0, 0, 0, { 0, 0, 0 } };

63 
buf„r
.
c⁄ã¡
 = (c⁄° *)
°rög
;

64 
buf„r
.
Àngth
 = 
	`°æí
(
°rög
) + ("");

65 
buf„r
.
hooks
 = 
globÆ_hooks
;

67 
	`TEST_ASSERT_FALSE_MESSAGE
(
	`∑r£_°rög
(
ôem
, &
buf„r
), "Malformed string shouldÇot beáccepted.");

68 
	`as£π_is_övÆid
(
ôem
);

69 
	}
}

73 
	$∑r£_°rög_should_∑r£_°rögs
()

75 
	`as£π_∑r£_°rög
("\"\"", "");

76 
	`as£π_∑r£_°rög
(

79 
	`as£π_∑r£_°rög
(

82 
	`ª£t
(
ôem
);

83 
	`as£π_∑r£_°rög
("\"\b\f\n\r\t\"", "\b\f\n\r\t");

84 
	`ª£t
(
ôem
);

85 
	}
}

87 
	$∑r£_°rög_should_∑r£_utf16_suºog©e_∑ús
()

89 
	`as£π_∑r£_°rög
("\"\\uD83D\\udc31\"", "üê±");

90 
	`ª£t
(
ôem
);

91 
	}
}

93 
	$∑r£_°rög_should_nŸ_∑r£_n⁄_°rögs
()

95 
	`as£π_nŸ_∑r£_°rög
("this\" isÇotá string\"");

96 
	`ª£t
(
ôem
);

97 
	`as£π_nŸ_∑r£_°rög
("");

98 
	`ª£t
(
ôem
);

99 
	}
}

101 
	$∑r£_°rög_should_nŸ_∑r£_övÆid_back¶ash
()

103 
	`as£π_nŸ_∑r£_°rög
("Abcdef\\123");

104 
	`ª£t
(
ôem
);

105 
	`as£π_nŸ_∑r£_°rög
("Abcdef\\e23");

106 
	`ª£t
(
ôem
);

107 
	}
}

109 
	$∑r£_°rög_should_nŸ_ovîÊow_wôh_˛osög_back¶ash
()

111 
	`as£π_nŸ_∑r£_°rög
("\"000000000000000000\\");

112 
	`ª£t
(
ôem
);

113 
	}
}

115 
	$∑r£_°rög_should_∑r£_bug_94
()

117 c⁄° 
°rög
[] = "\"~!@\\\\#$%^&*()\\\\\\\\-\\\\+{}[]:\\\\;\\\\\\\"\\\\<\\\\>?/.,DC=ad,DC=com\"";

118 
	`as£π_∑r£_°rög
(
°rög
, "~!@\\#$%^&*()\\\\-\\+{}[]:\\;\\\"\\<\\>?/.,DC=ad,DC=com");

119 
	`ª£t
(
ôem
);

120 
	}
}

122 
CJSON_CDECL
 
	$maö
()

125 
	`mem£t
(
ôem
, 0, (
cJSON
));

127 
	`UNITY_BEGIN
();

128 
	`RUN_TEST
(
∑r£_°rög_should_∑r£_°rögs
);

129 
	`RUN_TEST
(
∑r£_°rög_should_∑r£_utf16_suºog©e_∑ús
);

130 
	`RUN_TEST
(
∑r£_°rög_should_nŸ_∑r£_n⁄_°rögs
);

131 
	`RUN_TEST
(
∑r£_°rög_should_nŸ_∑r£_övÆid_back¶ash
);

132 
	`RUN_TEST
(
∑r£_°rög_should_∑r£_bug_94
);

133 
	`RUN_TEST
(
∑r£_°rög_should_nŸ_ovîÊow_wôh_˛osög_back¶ash
);

134  
	`UNITY_END
();

135 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/parse_value.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

28 
	~"unôy/§c/unôy.h
"

29 
	~"comm⁄.h
"

31 
cJSON
 
	gôem
[1];

33 
	$as£π_is_vÆue
(
cJSON
 *
vÆue_ôem
, 
ty≥
)

35 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
vÆue_ôem
, "Item is NULL.");

37 
	`as£π_nŸ_ö_li°
(
vÆue_ôem
);

38 
	`as£π_has_ty≥
(
vÆue_ôem
, 
ty≥
);

39 
	`as£π_has_no_ª„ªn˚
(
vÆue_ôem
);

40 
	`as£π_has_no_c⁄°_°rög
(
vÆue_ôem
);

41 
	`as£π_has_no_°rög
(
vÆue_ôem
);

42 
	}
}

44 
	$as£π_∑r£_vÆue
(c⁄° *
°rög
, 
ty≥
)

46 
∑r£_buf„r
 
buf„r
 = { 0, 0, 0, 0, { 0, 0, 0 } };

47 
buf„r
.
c⁄ã¡
 = (c⁄° *Ë
°rög
;

48 
buf„r
.
Àngth
 = 
	`°æí
(
°rög
) + ("");

49 
buf„r
.
hooks
 = 
globÆ_hooks
;

51 
	`TEST_ASSERT_TRUE
(
	`∑r£_vÆue
(
ôem
, &
buf„r
));

52 
	`as£π_is_vÆue
(
ôem
, 
ty≥
);

53 
	}
}

55 
	$∑r£_vÆue_should_∑r£_nuŒ
()

57 
	`as£π_∑r£_vÆue
("nuŒ", 
cJSON_NULL
);

58 
	`ª£t
(
ôem
);

59 
	}
}

61 
	$∑r£_vÆue_should_∑r£_åue
()

63 
	`as£π_∑r£_vÆue
("åue", 
cJSON_True
);

64 
	`ª£t
(
ôem
);

65 
	}
}

67 
	$∑r£_vÆue_should_∑r£_Ál£
()

69 
	`as£π_∑r£_vÆue
("Ál£", 
cJSON_FÆ£
);

70 
	`ª£t
(
ôem
);

71 
	}
}

73 
	$∑r£_vÆue_should_∑r£_numbî
()

75 
	`as£π_∑r£_vÆue
("1.5", 
cJSON_Numbî
);

76 
	`ª£t
(
ôem
);

77 
	}
}

79 
	$∑r£_vÆue_should_∑r£_°rög
()

81 
	`as£π_∑r£_vÆue
("\"\"", 
cJSON_Såög
);

82 
	`ª£t
(
ôem
);

83 
	`as£π_∑r£_vÆue
("\"hñlo\"", 
cJSON_Såög
);

84 
	`ª£t
(
ôem
);

85 
	}
}

87 
	$∑r£_vÆue_should_∑r£_¨øy
()

89 
	`as£π_∑r£_vÆue
("[]", 
cJSON_Aºay
);

90 
	`ª£t
(
ôem
);

91 
	}
}

93 
	$∑r£_vÆue_should_∑r£_obje˘
()

95 
	`as£π_∑r£_vÆue
("{}", 
cJSON_Obje˘
);

96 
	`ª£t
(
ôem
);

97 
	}
}

99 
CJSON_CDECL
 
	$maö
()

102 
	`mem£t
(
ôem
, 0, (
cJSON
));

103 
	`UNITY_BEGIN
();

104 
	`RUN_TEST
(
∑r£_vÆue_should_∑r£_nuŒ
);

105 
	`RUN_TEST
(
∑r£_vÆue_should_∑r£_åue
);

106 
	`RUN_TEST
(
∑r£_vÆue_should_∑r£_Ál£
);

107 
	`RUN_TEST
(
∑r£_vÆue_should_∑r£_numbî
);

108 
	`RUN_TEST
(
∑r£_vÆue_should_∑r£_°rög
);

109 
	`RUN_TEST
(
∑r£_vÆue_should_∑r£_¨øy
);

110 
	`RUN_TEST
(
∑r£_vÆue_should_∑r£_obje˘
);

111  
	`UNITY_END
();

112 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/parse_with_opts.c

23 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

24 
	~"unôy/§c/unôy.h
"

25 
	~"comm⁄.h
"

27 
	$∑r£_wôh_›ts_should_h™dÀ_nuŒ
()

29 c⁄° *
îr‹_poöãr
 = 
NULL
;

30 
cJSON
 *
ôem
 = 
NULL
;

31 
	`TEST_ASSERT_NULL_MESSAGE
(
	`cJSON_P¨£WôhO±s
(
NULL
, &
îr‹_poöãr
, 
Ál£
), "FailedÅo handle NULL input.");

32 
ôem
 = 
	`cJSON_P¨£WôhO±s
("{}", 
NULL
, 
Ál£
);

33 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
ôem
, "FailedÅo handle NULLÉrrorÖointer.");

34 
	`cJSON_Dñëe
(
ôem
);

35 
	`TEST_ASSERT_NULL_MESSAGE
(
	`cJSON_P¨£WôhO±s
(
NULL
, NULL, 
Ál£
), "FailedÅo handle both NULL.");

36 
	`TEST_ASSERT_NULL_MESSAGE
(
	`cJSON_P¨£WôhO±s
("{", 
NULL
, 
Ál£
), "FailedÅo handle NULLÉrrorÖointer withÖarseÉrror.");

37 
	}
}

39 
	$∑r£_wôh_›ts_should_h™dÀ_em±y_°rögs
()

41 c⁄° 
em±y_°rög
[] = "";

42 c⁄° *
îr‹_poöãr
 = 
NULL
;

44 
	`TEST_ASSERT_NULL
(
	`cJSON_P¨£WôhO±s
(
em±y_°rög
, 
NULL
, 
Ál£
));

45 
	`TEST_ASSERT_EQUAL_PTR
(
em±y_°rög
, 
	`cJSON_GëEº‹På
());

47 
	`TEST_ASSERT_NULL
(
	`cJSON_P¨£WôhO±s
(
em±y_°rög
, &
îr‹_poöãr
, 
Ál£
));

48 
	`TEST_ASSERT_EQUAL_PTR
(
em±y_°rög
, 
îr‹_poöãr
);

49 
	`TEST_ASSERT_EQUAL_PTR
(
em±y_°rög
, 
	`cJSON_GëEº‹På
());

50 
	}
}

52 
	$∑r£_wôh_›ts_should_h™dÀ_öcom∂ëe_js⁄
()

54 c⁄° 
js⁄
[] = "{ \"name\": ";

55 c⁄° *
∑r£_íd
 = 
NULL
;

57 
	`TEST_ASSERT_NULL
(
	`cJSON_P¨£WôhO±s
(
js⁄
, &
∑r£_íd
, 
Ál£
));

58 
	`TEST_ASSERT_EQUAL_PTR
(
js⁄
 + 
	`°æí
(js⁄), 
∑r£_íd
);

59 
	`TEST_ASSERT_EQUAL_PTR
(
js⁄
 + 
	`°æí
(js⁄), 
	`cJSON_GëEº‹På
());

60 
	}
}

62 
	$∑r£_wôh_›ts_should_ªquúe_nuŒ_if_ªque°ed
()

64 
cJSON
 *
ôem
 = 
	`cJSON_P¨£WôhO±s
("{}", 
NULL
, 
åue
);

65 
	`TEST_ASSERT_NOT_NULL
(
ôem
);

66 
	`cJSON_Dñëe
(
ôem
);

67 
ôem
 = 
	`cJSON_P¨£WôhO±s
("{} \n", 
NULL
, 
åue
);

68 
	`TEST_ASSERT_NOT_NULL
(
ôem
);

69 
	`cJSON_Dñëe
(
ôem
);

70 
	`TEST_ASSERT_NULL
(
	`cJSON_P¨£WôhO±s
("{}x", 
NULL
, 
åue
));

71 
	}
}

73 
	$∑r£_wôh_›ts_should_ªtu∫_∑r£_íd
()

75 c⁄° 
js⁄
[] = "[]Émptyárray XD";

76 c⁄° *
∑r£_íd
 = 
NULL
;

78 
cJSON
 *
ôem
 = 
	`cJSON_P¨£WôhO±s
(
js⁄
, &
∑r£_íd
, 
Ál£
);

79 
	`TEST_ASSERT_NOT_NULL
(
ôem
);

80 
	`TEST_ASSERT_EQUAL_PTR
(
js⁄
 + 2, 
∑r£_íd
);

81 
	`cJSON_Dñëe
(
ôem
);

82 
	}
}

84 
	$∑r£_wôh_›ts_should_∑r£_utf8_bom
()

86 
cJSON
 *
wôh_bom
 = 
NULL
;

87 
cJSON
 *
wôhout_bom
 = 
NULL
;

89 
wôh_bom
 = 
	`cJSON_P¨£WôhO±s
("\xEF\xBB\xBF{}", 
NULL
, 
åue
);

90 
	`TEST_ASSERT_NOT_NULL
(
wôh_bom
);

91 
wôhout_bom
 = 
	`cJSON_P¨£WôhO±s
("{}", 
NULL
, 
åue
);

92 
	`TEST_ASSERT_NOT_NULL
(
wôh_bom
);

94 
	`TEST_ASSERT_TRUE
(
	`cJSON_Com∑ª
(
wôh_bom
, 
wôhout_bom
, 
åue
));

96 
	`cJSON_Dñëe
(
wôh_bom
);

97 
	`cJSON_Dñëe
(
wôhout_bom
);

98 
	}
}

100 
CJSON_CDECL
 
	$maö
()

102 
	`UNITY_BEGIN
();

104 
	`RUN_TEST
(
∑r£_wôh_›ts_should_h™dÀ_nuŒ
);

105 
	`RUN_TEST
(
∑r£_wôh_›ts_should_h™dÀ_em±y_°rögs
);

106 
	`RUN_TEST
(
∑r£_wôh_›ts_should_h™dÀ_öcom∂ëe_js⁄
);

107 
	`RUN_TEST
(
∑r£_wôh_›ts_should_ªquúe_nuŒ_if_ªque°ed
);

108 
	`RUN_TEST
(
∑r£_wôh_›ts_should_ªtu∫_∑r£_íd
);

109 
	`RUN_TEST
(
∑r£_wôh_›ts_should_∑r£_utf8_bom
);

111  
	`UNITY_END
();

112 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/print_array.c

23 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

24 
	~"unôy/§c/unôy.h
"

25 
	~"comm⁄.h
"

27 
	$as£π_¥öt_¨øy
(c⁄° * c⁄° 
ex≥˘ed
, c⁄° * c⁄° 
öput
)

29 
¥öãd_unf‹m©ãd
[1024];

30 
¥öãd_f‹m©ãd
[1024];

32 
cJSON
 
ôem
[1];

34 
¥ötbuf„r
 
f‹m©ãd_buf„r
 = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };

35 
¥ötbuf„r
 
unf‹m©ãd_buf„r
 = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };

37 
∑r£_buf„r
 
∑r£buf„r
 = { 0, 0, 0, 0, { 0, 0, 0 } };

38 
∑r£buf„r
.
c⁄ã¡
 = (c⁄° *)
öput
;

39 
∑r£buf„r
.
Àngth
 = 
	`°æí
(
öput
) + ("");

40 
∑r£buf„r
.
hooks
 = 
globÆ_hooks
;

43 
f‹m©ãd_buf„r
.
buf„r
 = 
¥öãd_f‹m©ãd
;

44 
f‹m©ãd_buf„r
.
Àngth
 = (
¥öãd_f‹m©ãd
);

45 
f‹m©ãd_buf„r
.
off£t
 = 0;

46 
f‹m©ãd_buf„r
.
nﬂŒoc
 = 
åue
;

47 
f‹m©ãd_buf„r
.
hooks
 = 
globÆ_hooks
;

50 
unf‹m©ãd_buf„r
.
buf„r
 = 
¥öãd_unf‹m©ãd
;

51 
unf‹m©ãd_buf„r
.
Àngth
 = (
¥öãd_unf‹m©ãd
);

52 
unf‹m©ãd_buf„r
.
off£t
 = 0;

53 
unf‹m©ãd_buf„r
.
nﬂŒoc
 = 
åue
;

54 
unf‹m©ãd_buf„r
.
hooks
 = 
globÆ_hooks
;

56 
	`mem£t
(
ôem
, 0, (item));

57 
	`TEST_ASSERT_TRUE_MESSAGE
(
	`∑r£_¨øy
(
ôem
, &
∑r£buf„r
), "FailedÅoÖarseárray.");

59 
unf‹m©ãd_buf„r
.
f‹m©
 = 
Ál£
;

60 
	`TEST_ASSERT_TRUE_MESSAGE
(
	`¥öt_¨øy
(
ôem
, &
unf‹m©ãd_buf„r
), "FailedÅoÖrint unformatted string.");

61 
	`TEST_ASSERT_EQUAL_STRING_MESSAGE
(
öput
, 
¥öãd_unf‹m©ãd
, "Unformattedárray isÇot correct.");

63 
f‹m©ãd_buf„r
.
f‹m©
 = 
åue
;

64 
	`TEST_ASSERT_TRUE_MESSAGE
(
	`¥öt_¨øy
(
ôem
, &
f‹m©ãd_buf„r
), "FailedÅoÖrint formatted string.");

65 
	`TEST_ASSERT_EQUAL_STRING_MESSAGE
(
ex≥˘ed
, 
¥öãd_f‹m©ãd
, "Formattedárray isÇot correct.");

67 
	`ª£t
(
ôem
);

68 
	}
}

70 
	$¥öt_¨øy_should_¥öt_em±y_¨øys
()

72 
	`as£π_¥öt_¨øy
("[]", "[]");

73 
	}
}

75 
	$¥öt_¨øy_should_¥öt_¨øys_wôh_⁄e_ñemít
()

78 
	`as£π_¥öt_¨øy
("[1]", "[1]");

79 
	`as£π_¥öt_¨øy
("[\"hello!\"]", "[\"hello!\"]");

80 
	`as£π_¥öt_¨øy
("[[]]", "[[]]");

81 
	`as£π_¥öt_¨øy
("[null]", "[null]");

82 
	}
}

84 
	$¥öt_¨øy_should_¥öt_¨øys_wôh_mu…ùÀ_ñemíts
()

86 
	`as£π_¥öt_¨øy
("[1, 2, 3]", "[1,2,3]");

87 
	`as£π_¥öt_¨øy
("[1,Çull,Årue, false, [], \"hello\", {\n\t}]", "[1,null,true,false,[],\"hello\",{}]");

88 
	}
}

90 
CJSON_CDECL
 
	$maö
()

93 
	`UNITY_BEGIN
();

95 
	`RUN_TEST
(
¥öt_¨øy_should_¥öt_em±y_¨øys
);

96 
	`RUN_TEST
(
¥öt_¨øy_should_¥öt_¨øys_wôh_⁄e_ñemít
);

97 
	`RUN_TEST
(
¥öt_¨øy_should_¥öt_¨øys_wôh_mu…ùÀ_ñemíts
);

99  
	`UNITY_END
();

100 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/print_number.c

23 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

24 
	~"unôy/§c/unôy.h
"

25 
	~"comm⁄.h
"

27 
	$as£π_¥öt_numbî
(c⁄° *
ex≥˘ed
, 
öput
)

29 
¥öãd
[1024];

30 
√w_buf„r
[26];

31 
i
 = 0;

32 
cJSON
 
ôem
[1];

33 
¥ötbuf„r
 
buf„r
 = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };

34 
buf„r
.buf„∏
¥öãd
;

35 
buf„r
.
Àngth
 = (
¥öãd
);

36 
buf„r
.
off£t
 = 0;

37 
buf„r
.
nﬂŒoc
 = 
åue
;

38 
buf„r
.
hooks
 = 
globÆ_hooks
;

39 
buf„r
.buf„∏
√w_buf„r
;

41 
	`mem£t
(
ôem
, 0, (item));

42 
	`mem£t
(
√w_buf„r
, 0, (new_buffer));

43 
	`cJSON_SëNumbîVÆue
(
ôem
, 
öput
);

44 
	`TEST_ASSERT_TRUE_MESSAGE
(
	`¥öt_numbî
(
ôem
, &
buf„r
), "FailedÅoÖrintÇumber.");

48 
i
 = 0;ò<(
√w_buf„r
);i++)

50 if(
i
 >3 && 
√w_buf„r
[i] =='0')

52 if((
√w_buf„r
[
i
-3] =='e' &&Çew_buffer[i-2] == '-' &&Çew_buffer[i] =='0') ||(new_buffer[i-2] =='e' &&Çew_buffer[i-1] =='+'))

54 
√w_buf„r
[
i
] !='\0')

56 
√w_buf„r
[
i
] =Çew_buffer[i+1];

57 
i
++;

62 
	`TEST_ASSERT_EQUAL_STRING_MESSAGE
(
ex≥˘ed
, 
buf„r
.buffer, "PrintedÇumber isÇotásÉxpected.");

63 
	}
}

65 
	$¥öt_numbî_should_¥öt_zîo
()

67 
	`as£π_¥öt_numbî
("0", 0);

68 
	}
}

70 
	$¥öt_numbî_should_¥öt_√g©ive_öãgîs
()

72 
	`as£π_¥öt_numbî
("-1", -1.0);

73 
	`as£π_¥öt_numbî
("-32768", -32768.0);

74 
	`as£π_¥öt_numbî
("-2147483648", -2147483648.0);

75 
	}
}

77 
	$¥öt_numbî_should_¥öt_posôive_öãgîs
()

79 
	`as£π_¥öt_numbî
("1", 1.0);

80 
	`as£π_¥öt_numbî
("32767", 32767.0);

81 
	`as£π_¥öt_numbî
("2147483647", 2147483647.0);

82 
	}
}

84 
	$¥öt_numbî_should_¥öt_posôive_ªÆs
()

86 
	`as£π_¥öt_numbî
("0.123", 0.123);

87 
	`as£π_¥öt_numbî
("1e-09", 10e-10);

88 
	`as£π_¥öt_numbî
("1000000000000", 10e11);

89 
	`as£π_¥öt_numbî
("1.23e+129", 123e+127);

90 
	`as£π_¥öt_numbî
("1.23e-126", 123e-128);

91 
	`as£π_¥öt_numbî
("3.1415926535897931", 3.1415926535897931);

92 
	}
}

94 
	$¥öt_numbî_should_¥öt_√g©ive_ªÆs
()

96 
	`as£π_¥öt_numbî
("-0.0123", -0.0123);

97 
	`as£π_¥öt_numbî
("-1e-09", -10e-10);

98 
	`as£π_¥öt_numbî
("-1e+21", -10e20);

99 
	`as£π_¥öt_numbî
("-1.23e+129", -123e+127);

100 
	`as£π_¥öt_numbî
("-1.23e-126", -123e-128);

101 
	}
}

103 
	$¥öt_numbî_should_¥öt_n⁄_numbî
()

105 
	`TEST_IGNORE
();

110 
	}
}

112 
CJSON_CDECL
 
	$maö
()

115 
	`UNITY_BEGIN
();

117 
	`RUN_TEST
(
¥öt_numbî_should_¥öt_zîo
);

118 
	`RUN_TEST
(
¥öt_numbî_should_¥öt_√g©ive_öãgîs
);

119 
	`RUN_TEST
(
¥öt_numbî_should_¥öt_posôive_öãgîs
);

120 
	`RUN_TEST
(
¥öt_numbî_should_¥öt_posôive_ªÆs
);

121 
	`RUN_TEST
(
¥öt_numbî_should_¥öt_√g©ive_ªÆs
);

122 
	`RUN_TEST
(
¥öt_numbî_should_¥öt_n⁄_numbî
);

124  
	`UNITY_END
();

125 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/print_object.c

23 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

24 
	~"unôy/§c/unôy.h
"

25 
	~"comm⁄.h
"

27 
	$as£π_¥öt_obje˘
(c⁄° * c⁄° 
ex≥˘ed
, c⁄° * c⁄° 
öput
)

29 
¥öãd_unf‹m©ãd
[1024];

30 
¥öãd_f‹m©ãd
[1024];

32 
cJSON
 
ôem
[1];

34 
¥ötbuf„r
 
f‹m©ãd_buf„r
 = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };

35 
¥ötbuf„r
 
unf‹m©ãd_buf„r
 = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };

36 
∑r£_buf„r
 
∑r£buf„r
 = { 0, 0, 0, 0, { 0, 0, 0 } };

39 
∑r£buf„r
.
c⁄ã¡
 = (c⁄° *)
öput
;

40 
∑r£buf„r
.
Àngth
 = 
	`°æí
(
öput
) + ("");

41 
∑r£buf„r
.
hooks
 = 
globÆ_hooks
;

44 
f‹m©ãd_buf„r
.
buf„r
 = 
¥öãd_f‹m©ãd
;

45 
f‹m©ãd_buf„r
.
Àngth
 = (
¥öãd_f‹m©ãd
);

46 
f‹m©ãd_buf„r
.
off£t
 = 0;

47 
f‹m©ãd_buf„r
.
nﬂŒoc
 = 
åue
;

48 
f‹m©ãd_buf„r
.
hooks
 = 
globÆ_hooks
;

51 
unf‹m©ãd_buf„r
.
buf„r
 = 
¥öãd_unf‹m©ãd
;

52 
unf‹m©ãd_buf„r
.
Àngth
 = (
¥öãd_unf‹m©ãd
);

53 
unf‹m©ãd_buf„r
.
off£t
 = 0;

54 
unf‹m©ãd_buf„r
.
nﬂŒoc
 = 
åue
;

55 
unf‹m©ãd_buf„r
.
hooks
 = 
globÆ_hooks
;

57 
	`mem£t
(
ôem
, 0, (item));

58 
	`TEST_ASSERT_TRUE_MESSAGE
(
	`∑r£_obje˘
(
ôem
, &
∑r£buf„r
), "FailedÅoÖarse object.");

60 
unf‹m©ãd_buf„r
.
f‹m©
 = 
Ál£
;

61 
	`TEST_ASSERT_TRUE_MESSAGE
(
	`¥öt_obje˘
(
ôem
, &
unf‹m©ãd_buf„r
), "FailedÅoÖrint unformatted string.");

62 
	`TEST_ASSERT_EQUAL_STRING_MESSAGE
(
öput
, 
¥öãd_unf‹m©ãd
, "Unformatted object isÇot correct.");

64 
f‹m©ãd_buf„r
.
f‹m©
 = 
åue
;

65 
	`TEST_ASSERT_TRUE_MESSAGE
(
	`¥öt_obje˘
(
ôem
, &
f‹m©ãd_buf„r
), "FailedÅoÖrint formatted string.");

66 
	`TEST_ASSERT_EQUAL_STRING_MESSAGE
(
ex≥˘ed
, 
¥öãd_f‹m©ãd
, "Formatted ojbect isÇot correct.");

68 
	`ª£t
(
ôem
);

69 
	}
}

71 
	$¥öt_obje˘_should_¥öt_em±y_obje˘s
()

73 
	`as£π_¥öt_obje˘
("{\n}", "{}");

74 
	}
}

76 
	$¥öt_obje˘_should_¥öt_obje˘s_wôh_⁄e_ñemít
()

79 
	`as£π_¥öt_obje˘
("{\n\t\"one\":\t1\n}", "{\"one\":1}");

80 
	`as£π_¥öt_obje˘
("{\n\t\"hello\":\t\"world!\"\n}", "{\"hello\":\"world!\"}");

81 
	`as£π_¥öt_obje˘
("{\n\t\"array\":\t[]\n}", "{\"array\":[]}");

82 
	`as£π_¥öt_obje˘
("{\n\t\"null\":\tnull\n}", "{\"null\":null}");

83 
	}
}

85 
	$¥öt_obje˘_should_¥öt_obje˘s_wôh_mu…ùÀ_ñemíts
()

87 
	`as£π_¥öt_obje˘
("{\n\t\"one\":\t1,\n\t\"two\":\t2,\n\t\"three\":\t3\n}", "{\"one\":1,\"two\":2,\"three\":3}");

88 
	`as£π_¥öt_obje˘
("{\n\t\"one\":\t1,\n\t\"NULL\":\tnull,\n\t\"TRUE\":\ttrue,\n\t\"FALSE\":\tfalse,\n\t\"array\":\t[],\n\t\"world\":\t\"hello\",\n\t\"object\":\t{\n\t}\n}", "{\"one\":1,\"NULL\":null,\"TRUE\":true,\"FALSE\":false,\"array\":[],\"world\":\"hello\",\"object\":{}}");

89 
	}
}

91 
CJSON_CDECL
 
	$maö
()

94 
	`UNITY_BEGIN
();

96 
	`RUN_TEST
(
¥öt_obje˘_should_¥öt_em±y_obje˘s
);

97 
	`RUN_TEST
(
¥öt_obje˘_should_¥öt_obje˘s_wôh_⁄e_ñemít
);

98 
	`RUN_TEST
(
¥öt_obje˘_should_¥öt_obje˘s_wôh_mu…ùÀ_ñemíts
);

100  
	`UNITY_END
();

101 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/print_string.c

23 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

24 
	~"unôy/§c/unôy.h
"

25 
	~"comm⁄.h
"

27 
	$as£π_¥öt_°rög
(c⁄° *
ex≥˘ed
, c⁄° *
öput
)

29 
¥öãd
[1024];

30 
¥ötbuf„r
 
buf„r
 = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };

31 
buf„r
.buf„∏
¥öãd
;

32 
buf„r
.
Àngth
 = (
¥öãd
);

33 
buf„r
.
off£t
 = 0;

34 
buf„r
.
nﬂŒoc
 = 
åue
;

35 
buf„r
.
hooks
 = 
globÆ_hooks
;

37 
	`TEST_ASSERT_TRUE_MESSAGE
(
	`¥öt_°rög_±r
((c⁄° *)
öput
, &
buf„r
), "FailedÅoÖrint string.");

38 
	`TEST_ASSERT_EQUAL_STRING_MESSAGE
(
ex≥˘ed
, 
¥öãd
, "TheÖrinted string isn'tásÉxpected.");

39 
	}
}

41 
	$¥öt_°rög_should_¥öt_em±y_°rögs
()

43 
	`as£π_¥öt_°rög
("\"\"", "");

44 
	`as£π_¥öt_°rög
("\"\"", 
NULL
);

45 
	}
}

47 
	$¥öt_°rög_should_¥öt_ascii
()

49 
ascii
[0x7F];

50 
size_t
 
i
 = 1;

53 
i
 = 1; i < 0x7F; i++)

55 
ascii
[
i
-1] = ()i;

57 
ascii
[0x7F-1] = '\0';

59 
	`as£π_¥öt_°rög
("\"\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\"",

60 
ascii
);

61 
	}
}

63 
	$¥öt_°rög_should_¥öt_utf8
()

65 
	`as£π_¥öt_°rög
("\"√ºÁå´ÊÖï\"", "√ºÁå´ÊÖï");

66 
	}
}

68 
CJSON_CDECL
 
	$maö
()

71 
	`UNITY_BEGIN
();

73 
	`RUN_TEST
(
¥öt_°rög_should_¥öt_em±y_°rögs
);

74 
	`RUN_TEST
(
¥öt_°rög_should_¥öt_ascii
);

75 
	`RUN_TEST
(
¥öt_°rög_should_¥öt_utf8
);

77  
	`UNITY_END
();

78 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/print_value.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

28 
	~"unôy/§c/unôy.h
"

29 
	~"comm⁄.h
"

31 
	$as£π_¥öt_vÆue
(c⁄° *
öput
)

33 
¥öãd
[1024];

34 
cJSON
 
ôem
[1];

35 
¥ötbuf„r
 
buf„r
 = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };

36 
∑r£_buf„r
 
∑r£buf„r
 = { 0, 0, 0, 0, { 0, 0, 0 } };

37 
buf„r
.buf„∏
¥öãd
;

38 
buf„r
.
Àngth
 = (
¥öãd
);

39 
buf„r
.
off£t
 = 0;

40 
buf„r
.
nﬂŒoc
 = 
åue
;

41 
buf„r
.
hooks
 = 
globÆ_hooks
;

43 
∑r£buf„r
.
c⁄ã¡
 = (c⁄° *)
öput
;

44 
∑r£buf„r
.
Àngth
 = 
	`°æí
(
öput
) + ("");

45 
∑r£buf„r
.
hooks
 = 
globÆ_hooks
;

47 
	`mem£t
(
ôem
, 0, (item));

49 
	`TEST_ASSERT_TRUE_MESSAGE
(
	`∑r£_vÆue
(
ôem
, &
∑r£buf„r
), "FailedÅoÖarse value.");

51 
	`TEST_ASSERT_TRUE_MESSAGE
(
	`¥öt_vÆue
(
ôem
, &
buf„r
), "FailedÅoÖrint value.");

52 
	`TEST_ASSERT_EQUAL_STRING_MESSAGE
(
öput
, 
buf„r
.buffer, "Printed value isÇotásÉxpected.");

54 
	`ª£t
(
ôem
);

55 
	}
}

57 
	$¥öt_vÆue_should_¥öt_nuŒ
()

59 
	`as£π_¥öt_vÆue
("null");

60 
	}
}

62 
	$¥öt_vÆue_should_¥öt_åue
()

64 
	`as£π_¥öt_vÆue
("true");

65 
	}
}

67 
	$¥öt_vÆue_should_¥öt_Ál£
()

69 
	`as£π_¥öt_vÆue
("false");

70 
	}
}

72 
	$¥öt_vÆue_should_¥öt_numbî
()

74 
	`as£π_¥öt_vÆue
("1.5");

75 
	}
}

77 
	$¥öt_vÆue_should_¥öt_°rög
()

79 
	`as£π_¥öt_vÆue
("\"\"");

80 
	`as£π_¥öt_vÆue
("\"hello\"");

81 
	}
}

83 
	$¥öt_vÆue_should_¥öt_¨øy
()

85 
	`as£π_¥öt_vÆue
("[]");

86 
	}
}

88 
	$¥öt_vÆue_should_¥öt_obje˘
()

90 
	`as£π_¥öt_vÆue
("{}");

91 
	}
}

93 
CJSON_CDECL
 
	$maö
()

96 
	`UNITY_BEGIN
();

98 
	`RUN_TEST
(
¥öt_vÆue_should_¥öt_nuŒ
);

99 
	`RUN_TEST
(
¥öt_vÆue_should_¥öt_åue
);

100 
	`RUN_TEST
(
¥öt_vÆue_should_¥öt_Ál£
);

101 
	`RUN_TEST
(
¥öt_vÆue_should_¥öt_numbî
);

102 
	`RUN_TEST
(
¥öt_vÆue_should_¥öt_°rög
);

103 
	`RUN_TEST
(
¥öt_vÆue_should_¥öt_¨øy
);

104 
	`RUN_TEST
(
¥öt_vÆue_should_¥öt_obje˘
);

106  
	`UNITY_END
();

107 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/readme_examples.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"unôy/exam∂es/unôy_c⁄fig.h
"

28 
	~"unôy/§c/unôy.h
"

29 
	~"comm⁄.h
"

31 c⁄° *
	gjs⁄
 = "{\n\
\t\"name\":\t\"Awesome 4K\",\n\
\t\"resolutions\":\t[{\n\
\t\t\t\"width\":\t1280,\n\
\t\t\t\"height\":\t720\n\
\t\t}, {\n\
\t\t\t\"width\":\t1920,\n\
\t\t\t\"height\":\t1080\n\
\t\t}, {\n\
\t\t\t\"width\":\t3840,\n\
\t\t\t\"height\":\t2160\n\
\t\t}]\n\
}";

45 * 
	$¸óã_m⁄ô‹
()

47 c⁄° 
ªsﬁuti⁄_numbîs
[3][2] = {

52 *
°rög
 = 
NULL
;

53 
cJSON
 *
«me
 = 
NULL
;

54 
cJSON
 *
ªsﬁuti⁄s
 = 
NULL
;

55 
cJSON
 *
ªsﬁuti⁄
 = 
NULL
;

56 
cJSON
 *
width
 = 
NULL
;

57 
cJSON
 *
height
 = 
NULL
;

58 
size_t
 
ödex
 = 0;

60 
cJSON
 *
m⁄ô‹
 = 
	`cJSON_Cª©eObje˘
();

61 i‡(
m⁄ô‹
 =
NULL
)

63 
íd
;

66 
«me
 = 
	`cJSON_Cª©eSåög
("Awesome 4K");

67 i‡(
«me
 =
NULL
)

69 
íd
;

73 
	`cJSON_AddIãmToObje˘
(
m⁄ô‹
, "«me", 
«me
);

75 
ªsﬁuti⁄s
 = 
	`cJSON_Cª©eAºay
();

76 i‡(
ªsﬁuti⁄s
 =
NULL
)

78 
íd
;

80 
	`cJSON_AddIãmToObje˘
(
m⁄ô‹
, "ªsﬁuti⁄s", 
ªsﬁuti⁄s
);

82 
ödex
 = 0; index < ((
ªsﬁuti⁄_numbîs
) / (2 * ())); ++index)

84 
ªsﬁuti⁄
 = 
	`cJSON_Cª©eObje˘
();

85 i‡(
ªsﬁuti⁄
 =
NULL
)

87 
íd
;

89 
	`cJSON_AddIãmToAºay
(
ªsﬁuti⁄s
, 
ªsﬁuti⁄
);

91 
width
 = 
	`cJSON_Cª©eNumbî
(
ªsﬁuti⁄_numbîs
[
ödex
][0]);

92 i‡(
width
 =
NULL
)

94 
íd
;

96 
	`cJSON_AddIãmToObje˘
(
ªsﬁuti⁄
, "width", 
width
);

98 
height
 = 
	`cJSON_Cª©eNumbî
(
ªsﬁuti⁄_numbîs
[
ödex
][1]);

99 i‡(
height
 =
NULL
)

101 
íd
;

103 
	`cJSON_AddIãmToObje˘
(
ªsﬁuti⁄
, "height", 
height
);

106 
°rög
 = 
	`cJSON_Pröt
(
m⁄ô‹
);

107 i‡(
°rög
 =
NULL
)

109 
	`Ârötf
(
°dîr
, "FailedÅoÖrint monitor.\n");

112 
íd
:

113 
	`cJSON_Dñëe
(
m⁄ô‹
);

114  
°rög
;

115 
	}
}

117 *
	$¸óã_m⁄ô‹_wôh_hñ≥rs
()

119 c⁄° 
ªsﬁuti⁄_numbîs
[3][2] = {

124 *
°rög
 = 
NULL
;

125 
cJSON
 *
ªsﬁuti⁄s
 = 
NULL
;

126 
size_t
 
ödex
 = 0;

128 
cJSON
 *
m⁄ô‹
 = 
	`cJSON_Cª©eObje˘
();

130 i‡(
	`cJSON_AddSåögToObje˘
(
m⁄ô‹
, "«me", "Awesomê4K"Ë=
NULL
)

132 
íd
;

135 
ªsﬁuti⁄s
 = 
	`cJSON_AddAºayToObje˘
(
m⁄ô‹
, "resolutions");

136 i‡(
ªsﬁuti⁄s
 =
NULL
)

138 
íd
;

141 
ödex
 = 0; index < ((
ªsﬁuti⁄_numbîs
) / (2 * ())); ++index)

143 
cJSON
 *
ªsﬁuti⁄
 = 
	`cJSON_Cª©eObje˘
();

145 i‡(
	`cJSON_AddNumbîToObje˘
(
ªsﬁuti⁄
, "width", 
ªsﬁuti⁄_numbîs
[
ödex
][0]Ë=
NULL
)

147 
íd
;

150 if(
	`cJSON_AddNumbîToObje˘
(
ªsﬁuti⁄
, "height", 
ªsﬁuti⁄_numbîs
[
ödex
][1]Ë=
NULL
)

152 
íd
;

155 
	`cJSON_AddIãmToAºay
(
ªsﬁuti⁄s
, 
ªsﬁuti⁄
);

158 
°rög
 = 
	`cJSON_Pröt
(
m⁄ô‹
);

159 i‡(
°rög
 =
NULL
) {

160 
	`Ârötf
(
°dîr
, "FailedÅoÖrint monitor.\n");

163 
íd
:

164 
	`cJSON_Dñëe
(
m⁄ô‹
);

165  
°rög
;

166 
	}
}

169 
	$suµ‹ts_fuŒ_hd
(c⁄° * c⁄° 
m⁄ô‹
)

171 c⁄° 
cJSON
 *
ªsﬁuti⁄
 = 
NULL
;

172 c⁄° 
cJSON
 *
ªsﬁuti⁄s
 = 
NULL
;

173 c⁄° 
cJSON
 *
«me
 = 
NULL
;

174 
°©us
 = 0;

175 
cJSON
 *
m⁄ô‹_js⁄
 = 
	`cJSON_P¨£
(
m⁄ô‹
);

176 i‡(
m⁄ô‹_js⁄
 =
NULL
)

178 c⁄° *
îr‹_±r
 = 
	`cJSON_GëEº‹På
();

179 i‡(
îr‹_±r
 !
NULL
)

181 
	`Ârötf
(
°dîr
, "Eº‹ bef‹e: %s\n", 
îr‹_±r
);

183 
°©us
 = 0;

184 
íd
;

187 
«me
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
m⁄ô‹_js⁄
, "name");

188 i‡(
	`cJSON_IsSåög
(
«me
Ë&& («me->
vÆue°rög
 !
NULL
))

190 
	`¥ötf
("Checkög m⁄ô‹ \"%s\"\n", 
«me
->
vÆue°rög
);

193 
ªsﬁuti⁄s
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
m⁄ô‹_js⁄
, "resolutions");

194 
	`cJSON_AºayF‹Each
(
ªsﬁuti⁄
, 
ªsﬁuti⁄s
)

196 
cJSON
 *
width
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
ªsﬁuti⁄
, "width");

197 
cJSON
 *
height
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
ªsﬁuti⁄
, "height");

199 i‡(!
	`cJSON_IsNumbî
(
width
Ë|| !cJSON_IsNumbî(
height
))

201 
°©us
 = 0;

202 
íd
;

205 i‡(
	`com∑ª_doubÀ
(
width
->
vÆuedoubÀ
, 1920Ë&& com∑ª_doubÀ(
height
->valuedouble, 1080))

207 
°©us
 = 1;

208 
íd
;

212 
íd
:

213 
	`cJSON_Dñëe
(
m⁄ô‹_js⁄
);

214  
°©us
;

215 
	}
}

217 
	$¸óã_m⁄ô‹_should_¸óã_a_m⁄ô‹
()

219 *
m⁄ô‹
 = 
	`¸óã_m⁄ô‹
();

221 
	`TEST_ASSERT_EQUAL_STRING
(
m⁄ô‹
, 
js⁄
);

223 
	`‰ì
(
m⁄ô‹
);

224 
	}
}

226 
	$¸óã_m⁄ô‹_wôh_hñ≥rs_should_¸óã_a_m⁄ô‹
()

228 *
m⁄ô‹
 = 
	`¸óã_m⁄ô‹_wôh_hñ≥rs
();

230 
	`TEST_ASSERT_EQUAL_STRING
(
js⁄
, 
m⁄ô‹
);

232 
	`‰ì
(
m⁄ô‹
);

233 
	}
}

235 
	$suµ‹ts_fuŒ_hd_should_check_f‹_fuŒ_hd_suµ‹t
()

237 c⁄° *
m⁄ô‹_wôhout_hd
 = "{\n\
\t\t\"name\": \"lame monitor\",\n\
\t\t\"resolutions\":\t[{\n\
\t\t\t\"width\":\t640,\n\
\t\t\t\"height\":\t480\n\
\t\t}]\n\
}";

245 
	`TEST_ASSERT
(
	`suµ‹ts_fuŒ_hd
(
js⁄
));

246 
	`TEST_ASSERT_FALSE
(
	`suµ‹ts_fuŒ_hd
(
m⁄ô‹_wôhout_hd
));

247 
	}
}

249 
CJSON_CDECL
 
	$maö
()

251 
	`UNITY_BEGIN
();

253 
	`RUN_TEST
(
¸óã_m⁄ô‹_should_¸óã_a_m⁄ô‹
);

254 
	`RUN_TEST
(
¸óã_m⁄ô‹_wôh_hñ≥rs_should_¸óã_a_m⁄ô‹
);

255 
	`RUN_TEST
(
suµ‹ts_fuŒ_hd_should_check_f‹_fuŒ_hd_suµ‹t
);

257  
	`UNITY_END
();

258 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_1/src/ProductionCode.c

2 
	~"Produ˘i⁄Code.h
"

4 
	gCou¡î
 = 0;

5 
	gNumbîsToFöd
[9] = { 0, 34, 55, 66, 32, 11, 1, 77, 888 };

11 
	$FödFun˘i⁄_WhichIsBrokí
(
NumbîToFöd
)

13 
i
 = 0;

14 
i
 <= 8)

15 
i
++;

16 i‡(
NumbîsToFöd
[
i
] =
NumbîToFöd
)

17  
i
;

19 
	}
}

21 
	$Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
()

23  
Cou¡î
;

24 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_1/src/ProductionCode.h

2 
FödFun˘i⁄_WhichIsBrokí
(
NumbîToFöd
);

3 
Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
();

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_1/src/ProductionCode2.c

2 
	~"Produ˘i⁄Code2.h
"

4 * 
	$ThisFun˘i⁄HasNŸBìnTe°ed
(
Po‹
, * 
LôéeFun˘i⁄
)

6 ()
Po‹
;

7 ()
LôéeFun˘i⁄
;

11 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_1/src/ProductionCode2.h

2 * 
ThisFun˘i⁄HasNŸBìnTe°ed
(
Po‹
, * 
LôéeFun˘i⁄
);

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_1/test/TestProductionCode.c

2 
	~"Produ˘i⁄Code.h
"

3 
	~"unôy.h
"

8 
Cou¡î
;

10 
	$£tUp
()

13 
Cou¡î
 = 0x5a5a;

14 
	}
}

16 
	$ã¨Down
()

18 
	}
}

20 
	$ã°_FödFun˘i⁄_WhichIsBrokí_ShouldRëu∫ZîoIfIãmIsNŸInLi°_WhichW‹ksEvíInOurBrokíCode
()

23 
	`TEST_ASSERT_EQUAL
(0, 
	`FödFun˘i⁄_WhichIsBrokí
(78));

24 
	`TEST_ASSERT_EQUAL
(0, 
	`FödFun˘i⁄_WhichIsBrokí
(1));

25 
	`TEST_ASSERT_EQUAL
(0, 
	`FödFun˘i⁄_WhichIsBrokí
(33));

26 
	`TEST_ASSERT_EQUAL
(0, 
	`FödFun˘i⁄_WhichIsBrokí
(999));

27 
	`TEST_ASSERT_EQUAL
(0, 
	`FödFun˘i⁄_WhichIsBrokí
(-1));

28 
	}
}

30 
	$ã°_FödFun˘i⁄_WhichIsBrokí_ShouldRëu∫TheIndexF‹IãmsInLi°_WhichWûlFaûBeˇu£OurFun˘i⁄UndîTe°IsBrokí
()

33 
	`TEST_ASSERT_EQUAL
(1, 
	`FödFun˘i⁄_WhichIsBrokí
(34));

38 
	`TEST_ASSERT_EQUAL
(8, 
	`FödFun˘i⁄_WhichIsBrokí
(8888));

39 
	}
}

41 
	$ã°_Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫TheCuºítCou¡îVÆue
()

44 
	`TEST_ASSERT_EQUAL_HEX
(0x5a5a, 
	`Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
());

47 
Cou¡î
 = 0x1234;

48 
	`TEST_ASSERT_EQUAL_HEX
(0x1234, 
	`Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
());

49 
	}
}

51 
	$ã°_Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫TheCuºítCou¡îVÆueAgaö
()

54 
	`TEST_ASSERT_EQUAL_HEX
(0x5a5a, 
	`Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
());

55 
	}
}

57 
	$ã°_Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫CuºítCou¡î_ButFaûsBeˇu£ThisTe°IsA˘uÆlyFœwed
()

61 
	`TEST_ASSERT_EQUAL_HEX
(0x1234, 
	`Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
());

62 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_1/test/TestProductionCode2.c

2 
	~"Produ˘i⁄Code2.h
"

3 
	~"unôy.h
"

10 
	$£tUp
()

12 
	}
}

14 
	$ã¨Down
()

16 
	}
}

18 
	$ã°_Ign‹edTe°
()

20 
	`TEST_IGNORE_MESSAGE
("This Test Was Ignored On Purpose");

21 
	}
}

23 
	$ã°_AnŸhîIgn‹edTe°
()

25 
	`TEST_IGNORE_MESSAGE
("These Can Be Useful For Leaving Yourself Notes On What You Need To Do Yet");

26 
	}
}

28 
	$ã°_ThisFun˘i⁄HasNŸBìnTe°ed_NìdsToBeIm∂emíãd
()

30 
	`TEST_IGNORE
();

31 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_1/test/test_runners/TestProductionCode2_Runner.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 i‡(
	`TEST_PROTECT
()) \

11 
	`£tUp
(); \

12 
	`Te°Func
(); \

14 i‡(
	`TEST_PROTECT
()) \

16 
	`ã¨Down
(); \

18 
	`UnôyC⁄˛udeTe°
(); \

19 }

	)

22 
	~"unôy.h
"

23 
	~<£tjmp.h
>

24 
	~<°dio.h
>

25 
	~"Produ˘i⁄Code2.h
"

28 
£tUp
();

29 
ã¨Down
();

30 
ã°_Ign‹edTe°
();

31 
ã°_AnŸhîIgn‹edTe°
();

32 
ã°_ThisFun˘i⁄HasNŸBìnTe°ed_NìdsToBeIm∂emíãd
();

36 
ª£tTe°
();

37 
	$ª£tTe°
()

39 
	`ã¨Down
();

40 
	`£tUp
();

41 
	}
}

45 
	$maö
()

47 
	`UnôyBegö
("test/TestProductionCode2.c");

48 
	`RUN_TEST
(
ã°_Ign‹edTe°
, 18);

49 
	`RUN_TEST
(
ã°_AnŸhîIgn‹edTe°
, 23);

50 
	`RUN_TEST
(
ã°_ThisFun˘i⁄HasNŸBìnTe°ed_NìdsToBeIm∂emíãd
, 28);

52  (
	`UnôyEnd
());

53 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_1/test/test_runners/TestProductionCode_Runner.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 i‡(
	`TEST_PROTECT
()) \

11 
	`£tUp
(); \

12 
	`Te°Func
(); \

14 i‡(
	`TEST_PROTECT
()) \

16 
	`ã¨Down
(); \

18 
	`UnôyC⁄˛udeTe°
(); \

19 }

	)

22 
	~"unôy.h
"

23 
	~<£tjmp.h
>

24 
	~<°dio.h
>

25 
	~"Produ˘i⁄Code.h
"

28 
£tUp
();

29 
ã¨Down
();

30 
ã°_FödFun˘i⁄_WhichIsBrokí_ShouldRëu∫ZîoIfIãmIsNŸInLi°_WhichW‹ksEvíInOurBrokíCode
();

31 
ã°_FödFun˘i⁄_WhichIsBrokí_ShouldRëu∫TheIndexF‹IãmsInLi°_WhichWûlFaûBeˇu£OurFun˘i⁄UndîTe°IsBrokí
();

32 
ã°_Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫TheCuºítCou¡îVÆue
();

33 
ã°_Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫TheCuºítCou¡îVÆueAgaö
();

34 
ã°_Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫CuºítCou¡î_ButFaûsBeˇu£ThisTe°IsA˘uÆlyFœwed
();

38 
ª£tTe°
();

39 
	$ª£tTe°
()

41 
	`ã¨Down
();

42 
	`£tUp
();

43 
	}
}

47 
	$maö
()

49 
	`UnôyBegö
("test/TestProductionCode.c");

50 
	`RUN_TEST
(
ã°_FödFun˘i⁄_WhichIsBrokí_ShouldRëu∫ZîoIfIãmIsNŸInLi°_WhichW‹ksEvíInOurBrokíCode
, 20);

51 
	`RUN_TEST
(
ã°_FödFun˘i⁄_WhichIsBrokí_ShouldRëu∫TheIndexF‹IãmsInLi°_WhichWûlFaûBeˇu£OurFun˘i⁄UndîTe°IsBrokí
, 30);

52 
	`RUN_TEST
(
ã°_Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫TheCuºítCou¡îVÆue
, 41);

53 
	`RUN_TEST
(
ã°_Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫TheCuºítCou¡îVÆueAgaö
, 51);

54 
	`RUN_TEST
(
ã°_Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫CuºítCou¡î_ButFaûsBeˇu£ThisTe°IsA˘uÆlyFœwed
, 57);

56  (
	`UnôyEnd
());

57 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/src/ProductionCode.c

2 
	~"Produ˘i⁄Code.h
"

4 
	gCou¡î
 = 0;

5 
	gNumbîsToFöd
[9] = { 0, 34, 55, 66, 32, 11, 1, 77, 888 };

11 
	$FödFun˘i⁄_WhichIsBrokí
(
NumbîToFöd
)

13 
i
 = 0;

14 
i
 <= 8)

15 
i
++;

16 i‡(
NumbîsToFöd
[
i
] =
NumbîToFöd
)

17  
i
;

19 
	}
}

21 
	$Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
()

23  
Cou¡î
;

24 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/src/ProductionCode.h

2 
FödFun˘i⁄_WhichIsBrokí
(
NumbîToFöd
);

3 
Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
();

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/src/ProductionCode2.c

2 
	~"Produ˘i⁄Code2.h
"

4 * 
	$ThisFun˘i⁄HasNŸBìnTe°ed
(
Po‹
, * 
LôéeFun˘i⁄
)

6 ()
Po‹
;

7 ()
LôéeFun˘i⁄
;

11 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/src/ProductionCode2.h

2 * 
ThisFun˘i⁄HasNŸBìnTe°ed
(
Po‹
, * 
LôéeFun˘i⁄
);

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/test/TestProductionCode.c

1 
	~"Produ˘i⁄Code.h
"

2 
	~"unôy.h
"

3 
	~"unôy_fixtuª.h
"

5 
TEST_GROUP
(
Produ˘i⁄Code
);

10 
Cou¡î
;

12 
	$TEST_SETUP
(
Produ˘i⁄Code
)

15 
Cou¡î
 = 0x5a5a;

16 
	}
}

18 
	$TEST_TEAR_DOWN
(
Produ˘i⁄Code
)

20 
	}
}

22 
	$TEST
(
Produ˘i⁄Code
, 
FödFun˘i⁄_WhichIsBrokí_ShouldRëu∫ZîoIfIãmIsNŸInLi°_WhichW‹ksEvíInOurBrokíCode
)

25 
	`TEST_ASSERT_EQUAL
(0, 
	`FödFun˘i⁄_WhichIsBrokí
(78));

26 
	`TEST_ASSERT_EQUAL
(0, 
	`FödFun˘i⁄_WhichIsBrokí
(1));

27 
	`TEST_ASSERT_EQUAL
(0, 
	`FödFun˘i⁄_WhichIsBrokí
(33));

28 
	`TEST_ASSERT_EQUAL
(0, 
	`FödFun˘i⁄_WhichIsBrokí
(999));

29 
	`TEST_ASSERT_EQUAL
(0, 
	`FödFun˘i⁄_WhichIsBrokí
(-1));

30 
	}
}

32 
	$TEST
(
Produ˘i⁄Code
, 
FödFun˘i⁄_WhichIsBrokí_ShouldRëu∫TheIndexF‹IãmsInLi°_WhichWûlFaûBeˇu£OurFun˘i⁄UndîTe°IsBrokí
)

35 
	`TEST_ASSERT_EQUAL
(1, 
	`FödFun˘i⁄_WhichIsBrokí
(34));

40 
	`TEST_ASSERT_EQUAL
(8, 
	`FödFun˘i⁄_WhichIsBrokí
(8888));

41 
	}
}

43 
	$TEST
(
Produ˘i⁄Code
, 
Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫TheCuºítCou¡îVÆue
)

46 
	`TEST_ASSERT_EQUAL_HEX
(0x5a5a, 
	`Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
());

49 
Cou¡î
 = 0x1234;

50 
	`TEST_ASSERT_EQUAL_HEX
(0x1234, 
	`Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
());

51 
	}
}

53 
	$TEST
(
Produ˘i⁄Code
, 
Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫TheCuºítCou¡îVÆueAgaö
)

56 
	`TEST_ASSERT_EQUAL_HEX
(0x5a5a, 
	`Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
());

57 
	}
}

59 
	$TEST
(
Produ˘i⁄Code
, 
Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫CuºítCou¡î_ButFaûsBeˇu£ThisTe°IsA˘uÆlyFœwed
)

63 
	`TEST_ASSERT_EQUAL_HEX
(0x1234, 
	`Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
());

64 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/test/TestProductionCode2.c

1 
	~"Produ˘i⁄Code2.h
"

2 
	~"unôy.h
"

3 
	~"unôy_fixtuª.h
"

5 
TEST_GROUP
(
Produ˘i⁄Code2
);

12 
	$TEST_SETUP
(
Produ˘i⁄Code2
)

14 
	}
}

16 
	$TEST_TEAR_DOWN
(
Produ˘i⁄Code2
)

18 
	}
}

20 
	$TEST
(
Produ˘i⁄Code2
, 
Ign‹edTe°
)

22 
	`TEST_IGNORE_MESSAGE
("This Test Was Ignored On Purpose");

23 
	}
}

25 
	$TEST
(
Produ˘i⁄Code2
, 
AnŸhîIgn‹edTe°
)

27 
	`TEST_IGNORE_MESSAGE
("These Can Be Useful For Leaving Yourself Notes On What You Need To Do Yet");

28 
	}
}

30 
	$TEST
(
Produ˘i⁄Code2
, 
ThisFun˘i⁄HasNŸBìnTe°ed_NìdsToBeIm∂emíãd
)

32 
	`TEST_IGNORE
();

33 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/test/test_runners/TestProductionCode2_Runner.c

1 
	~"unôy.h
"

2 
	~"unôy_fixtuª.h
"

4 
	$TEST_GROUP_RUNNER
(
Produ˘i⁄Code2
)

6 
	`RUN_TEST_CASE
(
Produ˘i⁄Code2
, 
Ign‹edTe°
);

7 
	`RUN_TEST_CASE
(
Produ˘i⁄Code2
, 
AnŸhîIgn‹edTe°
);

8 
	`RUN_TEST_CASE
(
Produ˘i⁄Code2
, 
ThisFun˘i⁄HasNŸBìnTe°ed_NìdsToBeIm∂emíãd
);

9 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/test/test_runners/TestProductionCode_Runner.c

1 
	~"unôy.h
"

2 
	~"unôy_fixtuª.h
"

4 
	$TEST_GROUP_RUNNER
(
Produ˘i⁄Code
)

6 
	`RUN_TEST_CASE
(
Produ˘i⁄Code
, 
FödFun˘i⁄_WhichIsBrokí_ShouldRëu∫ZîoIfIãmIsNŸInLi°_WhichW‹ksEvíInOurBrokíCode
);

7 
	`RUN_TEST_CASE
(
Produ˘i⁄Code
, 
FödFun˘i⁄_WhichIsBrokí_ShouldRëu∫TheIndexF‹IãmsInLi°_WhichWûlFaûBeˇu£OurFun˘i⁄UndîTe°IsBrokí
);

8 
	`RUN_TEST_CASE
(
Produ˘i⁄Code
, 
Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫TheCuºítCou¡îVÆue
);

9 
	`RUN_TEST_CASE
(
Produ˘i⁄Code
, 
Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫TheCuºítCou¡îVÆueAgaö
);

10 
	`RUN_TEST_CASE
(
Produ˘i⁄Code
, 
Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫CuºítCou¡î_ButFaûsBeˇu£ThisTe°IsA˘uÆlyFœwed
);

11 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/test/test_runners/all_tests.c

1 
	~"unôy_fixtuª.h
"

3 
	$RunAŒTe°s
()

5 
	`RUN_TEST_GROUP
(
Produ˘i⁄Code
);

6 
	`RUN_TEST_GROUP
(
Produ˘i⁄Code2
);

7 
	}
}

9 
	$maö
(
¨gc
, c⁄° * 
¨gv
[])

11  
	`UnôyMaö
(
¨gc
, 
¨gv
, 
RunAŒTe°s
);

12 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_3/helper/UnityHelper.c

1 
	~"unôy.h
"

2 
	~"UnôyHñ≥r.h
"

3 
	~<°dio.h
>

4 
	~<°rög.h
>

6 
	$As£πEquÆExam∂eSåu˘
(c⁄° 
EXAMPLE_STRUCT_T
 
ex≥˘ed
, c⁄° EXAMPLE_STRUCT_T 
a˘uÆ
, c⁄° 
löe
)

8 
	`UNITY_TEST_ASSERT_EQUAL_INT
(
ex≥˘ed
.
x
, 
a˘uÆ
.x, 
löe
, "Example Struct Failed For Field x");

9 
	`UNITY_TEST_ASSERT_EQUAL_INT
(
ex≥˘ed
.
y
, 
a˘uÆ
.y, 
löe
, "Example Struct Failed For Field y");

10 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_3/helper/UnityHelper.h

1 #i‚de‡
_TESTHELPER_H


2 
	#_TESTHELPER_H


	)

4 
	~"Ty≥s.h
"

6 
As£πEquÆExam∂eSåu˘
(c⁄° 
EXAMPLE_STRUCT_T
 
ex≥˘ed
, c⁄° EXAMPLE_STRUCT_T 
a˘uÆ
, c⁄° 
löe
);

8 
	#UNITY_TEST_ASSERT_EQUAL_EXAMPLE_STRUCT_T
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`As£πEquÆExam∂eSåu˘
”x≥˘ed,á˘uÆ,Üöe);

	)

10 
	#TEST_ASSERT_EQUAL_EXAMPLE_STRUCT_T
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_EXAMPLE_STRUCT_T
”x≥˘ed,á˘uÆ, 
__LINE__
, 
NULL
);

	)

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_3/src/ProductionCode.c

2 
	~"Produ˘i⁄Code.h
"

4 
	gCou¡î
 = 0;

5 
	gNumbîsToFöd
[9] = { 0, 34, 55, 66, 32, 11, 1, 77, 888 };

11 
	$FödFun˘i⁄_WhichIsBrokí
(
NumbîToFöd
)

13 
i
 = 0;

14 
i
 <= 8)

15 
i
++;

16 i‡(
NumbîsToFöd
[
i
] =
NumbîToFöd
)

17  
i
;

19 
	}
}

21 
	$Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
()

23  
Cou¡î
;

24 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_3/src/ProductionCode.h

2 
FödFun˘i⁄_WhichIsBrokí
(
NumbîToFöd
);

3 
Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
();

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_3/src/ProductionCode2.c

2 
	~"Produ˘i⁄Code2.h
"

4 * 
	$ThisFun˘i⁄HasNŸBìnTe°ed
(
Po‹
, * 
LôéeFun˘i⁄
)

6 ()
Po‹
;

7 ()
LôéeFun˘i⁄
;

11 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_3/src/ProductionCode2.h

2 * 
ThisFun˘i⁄HasNŸBìnTe°ed
(
Po‹
, * 
LôéeFun˘i⁄
);

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_3/test/TestProductionCode.c

2 
	~"Produ˘i⁄Code.h
"

3 
	~"unôy.h
"

8 
Cou¡î
;

10 
	$£tUp
()

13 
Cou¡î
 = 0x5a5a;

14 
	}
}

16 
	$ã¨Down
()

18 
	}
}

20 
	$ã°_FödFun˘i⁄_WhichIsBrokí_ShouldRëu∫ZîoIfIãmIsNŸInLi°_WhichW‹ksEvíInOurBrokíCode
()

23 
	`TEST_ASSERT_EQUAL
(0, 
	`FödFun˘i⁄_WhichIsBrokí
(78));

24 
	`TEST_ASSERT_EQUAL
(0, 
	`FödFun˘i⁄_WhichIsBrokí
(1));

25 
	`TEST_ASSERT_EQUAL
(0, 
	`FödFun˘i⁄_WhichIsBrokí
(33));

26 
	`TEST_ASSERT_EQUAL
(0, 
	`FödFun˘i⁄_WhichIsBrokí
(999));

27 
	`TEST_ASSERT_EQUAL
(0, 
	`FödFun˘i⁄_WhichIsBrokí
(-1));

28 
	}
}

30 
	$ã°_FödFun˘i⁄_WhichIsBrokí_ShouldRëu∫TheIndexF‹IãmsInLi°_WhichWûlFaûBeˇu£OurFun˘i⁄UndîTe°IsBrokí
()

33 
	`TEST_ASSERT_EQUAL
(1, 
	`FödFun˘i⁄_WhichIsBrokí
(34));

38 
	`TEST_ASSERT_EQUAL
(8, 
	`FödFun˘i⁄_WhichIsBrokí
(8888));

39 
	}
}

41 
	$ã°_Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫TheCuºítCou¡îVÆue
()

44 
	`TEST_ASSERT_EQUAL_HEX
(0x5a5a, 
	`Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
());

47 
Cou¡î
 = 0x1234;

48 
	`TEST_ASSERT_EQUAL_HEX
(0x1234, 
	`Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
());

49 
	}
}

51 
	$ã°_Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫TheCuºítCou¡îVÆueAgaö
()

54 
	`TEST_ASSERT_EQUAL_HEX
(0x5a5a, 
	`Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
());

55 
	}
}

57 
	$ã°_Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ_ShouldRëu∫CuºítCou¡î_ButFaûsBeˇu£ThisTe°IsA˘uÆlyFœwed
()

61 
	`TEST_ASSERT_EQUAL_HEX
(0x1234, 
	`Fun˘i⁄WhichRëu∫sLoˇlV¨übÀ
());

62 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_3/test/TestProductionCode2.c

2 
	~"Produ˘i⁄Code2.h
"

3 
	~"unôy.h
"

10 
	$£tUp
()

12 
	}
}

14 
	$ã¨Down
()

16 
	}
}

18 
	$ã°_Ign‹edTe°
()

20 
	`TEST_IGNORE_MESSAGE
("This Test Was Ignored On Purpose");

21 
	}
}

23 
	$ã°_AnŸhîIgn‹edTe°
()

25 
	`TEST_IGNORE_MESSAGE
("These Can Be Useful For Leaving Yourself Notes On What You Need To Do Yet");

26 
	}
}

28 
	$ã°_ThisFun˘i⁄HasNŸBìnTe°ed_NìdsToBeIm∂emíãd
()

30 
	`TEST_IGNORE
();

31 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/unity_config.h

37 #i‚de‡
UNITY_CONFIG_H


38 
	#UNITY_CONFIG_H


	)

124 
	#UNITY_INCLUDE_DOUBLE


	)

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/src/unity_fixture.c

8 
	~"unôy_fixtuª.h
"

9 
	~"unôy_öã∫Æs.h
"

10 
	~<°rög.h
>

12 
UNITY_FIXTURE_T
 
	gUnôyFixtuª
;

18 #i‡!
deföed
(
UNITY_WEAK_ATTRIBUTE
Ë&& !deföed(
UNITY_WEAK_PRAGMA
)

19 
	$£tUp
(Ë{ 
	}
}

20 
	$ã¨Down
(Ë{ 
	}
}

23 
	$™noun˚Te°Run
(
runNumbî
)

25 
	`UnôyPröt
("UnityÅestÑun ");

26 
	`UnôyPrötNumbîUnsig√d
(
runNumbî
+1);

27 
	`UnôyPröt
(" of ");

28 
	`UnôyPrötNumbîUnsig√d
(
UnôyFixtuª
.
RïótCou¡
);

29 
	`UNITY_PRINT_EOL
();

30 
	}
}

32 
	$UnôyMaö
(
¨gc
, c⁄° * 
¨gv
[], (*
runAŒTe°s
)())

34 
ªsu…
 = 
	`UnôyGëComm™dLöeO±i⁄s
(
¨gc
, 
¨gv
);

35 
r
;

36 i‡(
ªsu…
 != 0)

37  
ªsu…
;

39 
r
 = 0;Ñ < 
UnôyFixtuª
.
RïótCou¡
;Ñ++)

41 
	`UnôyBegö
(
¨gv
[0]);

42 
	`™noun˚Te°Run
(
r
);

43 
	`runAŒTe°s
();

44 i‡(!
UnôyFixtuª
.
Vîbo£
Ë
	`UNITY_PRINT_EOL
();

45 
	`UnôyEnd
();

48  ()
Unôy
.
Te°Faûuªs
;

49 
	}
}

51 
	$£À˘ed
(c⁄° * 
fûãr
, c⁄° * 
«me
)

53 i‡(
fûãr
 == 0)

55  
	`°r°r
(
«me
, 
fûãr
) ? 1 : 0;

56 
	}
}

58 
	$ã°Sñe˘ed
(c⁄° * 
ã°
)

60  
	`£À˘ed
(
UnôyFixtuª
.
NameFûãr
, 
ã°
);

61 
	}
}

63 
	$groupSñe˘ed
(c⁄° * 
group
)

65  
	`£À˘ed
(
UnôyFixtuª
.
GroupFûãr
, 
group
);

66 
	}
}

68 
	$UnôyTe°Ru¬î
(
unôyfun˘i⁄
* 
£tup
,

69 
unôyfun˘i⁄
* 
ã°Body
,

70 
unôyfun˘i⁄
* 
ã¨down
,

71 c⁄° * 
¥öèbÀName
,

72 c⁄° * 
group
,

73 c⁄° * 
«me
,

74 c⁄° * 
fûe
,

75 
löe
)

77 i‡(
	`ã°Sñe˘ed
(
«me
Ë&& 
	`groupSñe˘ed
(
group
))

79 
Unôy
.
Te°Fûe
 = 
fûe
;

80 
Unôy
.
CuºítTe°Name
 = 
¥öèbÀName
;

81 
Unôy
.
CuºítTe°LöeNumbî
 = 
löe
;

82 i‡(!
UnôyFixtuª
.
Vîbo£
)

83 
	`UNITY_OUTPUT_CHAR
('.');

86 
	`UnôyPröt
(
¥öèbÀName
);

87 #i‚de‡
UNITY_REPEAT_TEST_NAME


88 
Unôy
.
CuºítTe°Name
 = 
NULL
;

92 
Unôy
.
NumbîOfTe°s
++;

93 
	`UnôyMÆloc_SèπTe°
();

94 
	`UnôyPoöãr_Inô
();

96 i‡(
	`TEST_PROTECT
())

98 
	`£tup
();

99 
	`ã°Body
();

101 i‡(
	`TEST_PROTECT
())

103 
	`ã¨down
();

105 i‡(
	`TEST_PROTECT
())

107 
	`UnôyPoöãr_UndoAŒSës
();

108 i‡(!
Unôy
.
CuºítTe°Faûed
)

109 
	`UnôyMÆloc_EndTe°
();

111 
	`UnôyC⁄˛udeFixtuªTe°
();

113 
	}
}

115 
	$UnôyIgn‹eTe°
(c⁄° * 
¥öèbÀName
, c⁄° * 
group
, c⁄° * 
«me
)

117 i‡(
	`ã°Sñe˘ed
(
«me
Ë&& 
	`groupSñe˘ed
(
group
))

119 
Unôy
.
NumbîOfTe°s
++;

120 
Unôy
.
Te°Ign‹es
++;

121 i‡(!
UnôyFixtuª
.
Vîbo£
)

122 
	`UNITY_OUTPUT_CHAR
('!');

125 
	`UnôyPröt
(
¥öèbÀName
);

126 
	`UNITY_PRINT_EOL
();

129 
	}
}

134 
	#MALLOC_DONT_FAIL
 -1

	)

135 
	gmÆloc_cou¡
;

136 
	gmÆloc_Áû_cou¡down
 = 
MALLOC_DONT_FAIL
;

138 
	$UnôyMÆloc_SèπTe°
()

140 
mÆloc_cou¡
 = 0;

141 
mÆloc_Áû_cou¡down
 = 
MALLOC_DONT_FAIL
;

142 
	}
}

144 
	$UnôyMÆloc_EndTe°
()

146 
mÆloc_Áû_cou¡down
 = 
MALLOC_DONT_FAIL
;

147 i‡(
mÆloc_cou¡
 != 0)

149 
	`UNITY_TEST_FAIL
(
Unôy
.
CuºítTe°LöeNumbî
, "ThisÅestÜeaks!");

151 
	}
}

153 
	$UnôyMÆloc_MakeMÆlocFaûA·îCou¡
(
cou¡down
)

155 
mÆloc_Áû_cou¡down
 = 
cou¡down
;

156 
	}
}

160 #unde‡
mÆloc


161 #unde‡
‰ì


162 #unde‡
ˇŒoc


163 #unde‡
ªÆloc


165 #ifde‡
UNITY_EXCLUDE_STDLIB_MALLOC


166 
	gunôy_hóp
[
UNITY_INTERNAL_HEAP_SIZE_BYTES
];

167 
size_t
 
	ghóp_ödex
;

169 
	~<°dlib.h
>

172 
	sGu¨dByãs


174 
size_t
 
	msize
;

175 
size_t
 
	mgu¨d_•a˚
;

176 } 
	tGu¨d
;

179 c⁄° 
	gíd
[] = "END";

181 * 
	$unôy_mÆloc
(
size_t
 
size
)

183 * 
mem
;

184 
Gu¨d
* 
gu¨d
;

185 
size_t
 
tŸÆ_size
 = 
size
 + (
Gu¨d
Ë+ (
íd
);

187 i‡(
mÆloc_Áû_cou¡down
 !
MALLOC_DONT_FAIL
)

189 i‡(
mÆloc_Áû_cou¡down
 == 0)

190  
NULL
;

191 
mÆloc_Áû_cou¡down
--;

194 i‡(
size
 =0Ë 
NULL
;

195 #ifde‡
UNITY_EXCLUDE_STDLIB_MALLOC


196 i‡(
hóp_ödex
 + 
tŸÆ_size
 > 
UNITY_INTERNAL_HEAP_SIZE_BYTES
)

198 
gu¨d
 = 
NULL
;

202 
gu¨d
 = (
Gu¨d
*)&
unôy_hóp
[
hóp_ödex
];

203 
hóp_ödex
 +
tŸÆ_size
;

206 
gu¨d
 = (
Gu¨d
*)
	`UNITY_FIXTURE_MALLOC
(
tŸÆ_size
);

208 i‡(
gu¨d
 =
NULL
)  NULL;

209 
mÆloc_cou¡
++;

210 
gu¨d
->
size
 = size;

211 
gu¨d
->
gu¨d_•a˚
 = 0;

212 
mem
 = (*)&(
gu¨d
[1]);

213 
	`mem˝y
(&
mem
[
size
], 
íd
, (end));

215  (*)
mem
;

216 
	}
}

218 
	$isOvîrun
(* 
mem
)

220 
Gu¨d
* 
gu¨d
 = (Gu¨d*)
mem
;

221 * 
memAsCh¨
 = (*)
mem
;

222 
gu¨d
--;

224  
gu¨d
->
gu¨d_•a˚
 !0 || 
	`°rcmp
(&
memAsCh¨
[gu¨d->
size
], 
íd
) != 0;

225 
	}
}

227 
	$ªÀa£_mem‹y
(* 
mem
)

229 
Gu¨d
* 
gu¨d
 = (Gu¨d*)
mem
;

230 
gu¨d
--;

232 
mÆloc_cou¡
--;

233 #ifde‡
UNITY_EXCLUDE_STDLIB_MALLOC


234 i‡(
mem
 =
unôy_hóp
 + 
hóp_ödex
 - 
gu¨d
->
size
 - (
íd
))

236 
hóp_ödex
 -(
gu¨d
->
size
 + (
Gu¨d
Ë+ (
íd
));

239 
	`UNITY_FIXTURE_FREE
(
gu¨d
);

241 
	}
}

243 
	$unôy_‰ì
(* 
mem
)

245 
ovîrun
;

247 i‡(
mem
 =
NULL
)

252 
ovîrun
 = 
	`isOvîrun
(
mem
);

253 
	`ªÀa£_mem‹y
(
mem
);

254 i‡(
ovîrun
)

256 
	`UNITY_TEST_FAIL
(
Unôy
.
CuºítTe°LöeNumbî
, "Buffer overrun detected during free()");

258 
	}
}

260 * 
	$unôy_ˇŒoc
(
size_t
 
num
, size_à
size
)

262 * 
mem
 = 
	`unôy_mÆloc
(
num
 * 
size
);

263 i‡(
mem
 =
NULL
)  NULL;

264 
	`mem£t
(
mem
, 0, 
num
 * 
size
);

265  
mem
;

266 
	}
}

268 * 
	$unôy_ªÆloc
(* 
ﬁdMem
, 
size_t
 
size
)

270 
Gu¨d
* 
gu¨d
 = (Gu¨d*)
ﬁdMem
;

271 * 
√wMem
;

273 i‡(
ﬁdMem
 =
NULL
Ë 
	`unôy_mÆloc
(
size
);

275 
gu¨d
--;

276 i‡(
	`isOvîrun
(
ﬁdMem
))

278 
	`ªÀa£_mem‹y
(
ﬁdMem
);

279 
	`UNITY_TEST_FAIL
(
Unôy
.
CuºítTe°LöeNumbî
, "Buffer overrun detected duringÑealloc()");

282 i‡(
size
 == 0)

284 
	`ªÀa£_mem‹y
(
ﬁdMem
);

285  
NULL
;

288 i‡(
gu¨d
->
size
 >sizeË 
ﬁdMem
;

290 #ifde‡
UNITY_EXCLUDE_STDLIB_MALLOC


291 i‡(
ﬁdMem
 =
unôy_hóp
 + 
hóp_ödex
 - 
gu¨d
->
size
 - (
íd
) &&

292 
hóp_ödex
 + 
size
 - 
gu¨d
->sizê<
UNITY_INTERNAL_HEAP_SIZE_BYTES
)

294 
	`ªÀa£_mem‹y
(
ﬁdMem
);

295  
	`unôy_mÆloc
(
size
);

298 
√wMem
 = 
	`unôy_mÆloc
(
size
);

299 i‡(
√wMem
 =
NULL
)  NULL;

300 
	`mem˝y
(
√wMem
, 
ﬁdMem
, 
gu¨d
->
size
);

301 
	`ªÀa£_mem‹y
(
ﬁdMem
);

302  
√wMem
;

303 
	}
}

308 
	sPoöãrPaú


310 ** 
	mpoöãr
;

311 * 
	mﬁd_vÆue
;

314 
PoöãrPaú
 
	gpoöãr_°‹e
[
UNITY_MAX_POINTERS
];

315 
	gpoöãr_ödex
 = 0;

317 
	$UnôyPoöãr_Inô
()

319 
poöãr_ödex
 = 0;

320 
	}
}

322 
	$UnôyPoöãr_Së
(** 
poöãr
, * 
√wVÆue
, 
UNITY_LINE_TYPE
 
löe
)

324 i‡(
poöãr_ödex
 >
UNITY_MAX_POINTERS
)

326 
	`UNITY_TEST_FAIL
(
löe
, "Too manyÖointers set");

330 
poöãr_°‹e
[
poöãr_ödex
].
poöãr
 =Öointer;

331 
poöãr_°‹e
[
poöãr_ödex
].
ﬁd_vÆue
 = *
poöãr
;

332 *
poöãr
 = 
√wVÆue
;

333 
poöãr_ödex
++;

335 
	}
}

337 
	$UnôyPoöãr_UndoAŒSës
()

339 
poöãr_ödex
 > 0)

341 
poöãr_ödex
--;

342 *(
poöãr_°‹e
[
poöãr_ödex
].
poöãr
) =

343 
poöãr_°‹e
[
poöãr_ödex
].
ﬁd_vÆue
;

345 
	}
}

347 
	$UnôyGëComm™dLöeO±i⁄s
(
¨gc
, c⁄° * 
¨gv
[])

349 
i
;

350 
UnôyFixtuª
.
Vîbo£
 = 0;

351 
UnôyFixtuª
.
GroupFûãr
 = 0;

352 
UnôyFixtuª
.
NameFûãr
 = 0;

353 
UnôyFixtuª
.
RïótCou¡
 = 1;

355 i‡(
¨gc
 == 1)

358 
i
 = 1; i < 
¨gc
; )

360 i‡(
	`°rcmp
(
¨gv
[
i
], "-v") == 0)

362 
UnôyFixtuª
.
Vîbo£
 = 1;

363 
i
++;

365 i‡(
	`°rcmp
(
¨gv
[
i
], "-g") == 0)

367 
i
++;

368 i‡(
i
 >
¨gc
)

370 
UnôyFixtuª
.
GroupFûãr
 = 
¨gv
[
i
];

371 
i
++;

373 i‡(
	`°rcmp
(
¨gv
[
i
], "-n") == 0)

375 
i
++;

376 i‡(
i
 >
¨gc
)

378 
UnôyFixtuª
.
NameFûãr
 = 
¨gv
[
i
];

379 
i
++;

381 i‡(
	`°rcmp
(
¨gv
[
i
], "-r") == 0)

383 
UnôyFixtuª
.
RïótCou¡
 = 2;

384 
i
++;

385 i‡(
i
 < 
¨gc
)

387 i‡(*(
¨gv
[
i
]) >= '0' && *(argv[i]) <= '9')

389 
digô
 = 0;

390 
UnôyFixtuª
.
RïótCou¡
 = 0;

391 
¨gv
[
i
][
digô
] >= '0' &&árgv[i][digit] <= '9')

393 
UnôyFixtuª
.
RïótCou¡
 *= 10;

394 
UnôyFixtuª
.
RïótCou¡
 +()
¨gv
[
i
][
digô
++] - '0';

396 
i
++;

403 
i
++;

407 
	}
}

409 
	$UnôyC⁄˛udeFixtuªTe°
()

411 i‡(
Unôy
.
CuºítTe°Ign‹ed
)

413 
Unôy
.
Te°Ign‹es
++;

414 
	`UNITY_PRINT_EOL
();

416 i‡(!
Unôy
.
CuºítTe°Faûed
)

418 i‡(
UnôyFixtuª
.
Vîbo£
)

420 
	`UnôyPröt
(" PASS");

421 
	`UNITY_PRINT_EOL
();

426 
Unôy
.
Te°Faûuªs
++;

427 
	`UNITY_PRINT_EOL
();

430 
Unôy
.
CuºítTe°Faûed
 = 0;

431 
Unôy
.
CuºítTe°Ign‹ed
 = 0;

432 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/src/unity_fixture.h

8 #i‚de‡
UNITY_FIXTURE_H_


9 
	#UNITY_FIXTURE_H_


	)

11 
	~"unôy.h
"

12 
	~"unôy_öã∫Æs.h
"

13 
	~"unôy_fixtuª_mÆloc_ovîrides.h
"

14 
	~"unôy_fixtuª_öã∫Æs.h
"

16 
UnôyMaö
(
¨gc
, c⁄° * 
¨gv
[], (*
runAŒTe°s
)());

19 
	#TEST_GROUP
(
group
)\

20 c⁄° * 
TEST_GROUP_
##
group
 = #group

	)

22 
	#TEST_SETUP
(
group
Ë
TEST_
##group##
	`_SETUP
();\

23 
TEST_
##
group
##
	`_SETUP
()

	)

25 
	#TEST_TEAR_DOWN
(
group
Ë
TEST_
##group##
	`_TEAR_DOWN
();\

26 
TEST_
##
group
##
	`_TEAR_DOWN
()

	)

29 
	#TEST
(
group
, 
«me
) \

30 
TEST_
##
group
##
_
##
«me
##
	`_
();\

31 
TEST_
##
group
##
_
##
«me
##
	`_run
();\

32 
TEST_
##
group
##
_
##
«me
##
	`_run
()\

34 
	`UnôyTe°Ru¬î
(
TEST_
##
group
##
_SETUP
,\

35 
TEST_
##
group
##
_
##
«me
##_,\

36 
TEST_
##
group
##
_TEAR_DOWN
,\

38 
TEST_GROUP_
##
group
, #name,\

39 
__FILE__
, 
__LINE__
);\

40 
	}
}\

41 
TEST_
##
group
##
_
##
«me
##
	`_
()

	)

43 
	#IGNORE_TEST
(
group
, 
«me
) \

44 
TEST_
##
group
##
_
##
«me
##
	`_
();\

45 
TEST_
##
group
##
_
##
«me
##
	`_run
();\

46 
TEST_
##
group
##
_
##
«me
##
	`_run
()\

48 
	`UnôyIgn‹eTe°
("IGNORE_TEST(" #grou∞", " #«mê")", 
TEST_GROUP_
##
group
, #name);\

50 
TEST_
##
group
##
_
##
«me
##
	`_
()

	)

53 
	#RUN_TEST_CASE
(
group
, 
«me
) \

54 { 
TEST_
##
group
##
_
##
«me
##
	`_run
();\

55 
TEST_
##
group
##
_
##
«me
##
	`_run
(); }

	)

58 
	#TEST_GROUP_RUNNER
(
group
)\

59 
TEST_
##
group
##
	`_GROUP_RUNNER
();\

60 
TEST_
##
group
##
	`_GROUP_RUNNER
()

	)

63 
	#RUN_TEST_GROUP
(
group
)\

64 { 
TEST_
##
group
##
	`_GROUP_RUNNER
();\

65 
TEST_
##
group
##
	`_GROUP_RUNNER
(); }

	)

68 #i‚de‡
UNITY_EXCLUDE_CPPUTEST_ASSERTS


70 
	#UT_PTR_SET
(
±r
, 
√wPoöãrVÆue
Ë
	`UnôyPoöãr_Së
((**)&’å), (*)“ewPoöãrVÆue), 
__LINE__
)

	)

71 
	#TEST_ASSERT_POINTERS_EQUAL
(
ex≥˘ed
, 
a˘uÆ
Ë
	`TEST_ASSERT_EQUAL_PTR
(”x≥˘ed), (a˘uÆ))

	)

72 
	#TEST_ASSERT_BYTES_EQUAL
(
ex≥˘ed
, 
a˘uÆ
Ë
	`TEST_ASSERT_EQUAL_HEX8
(0xf‡& (ex≥˘ed), 0xf‡& (a˘uÆ))

	)

73 
	#FAIL
(
mesßge
Ë
	`TEST_FAIL_MESSAGE
((mesßge))

	)

74 
	#CHECK
(
c⁄dôi⁄
Ë
	`TEST_ASSERT_TRUE
((c⁄dôi⁄))

	)

75 
	#LONGS_EQUAL
(
ex≥˘ed
, 
a˘uÆ
Ë
	`TEST_ASSERT_EQUAL_INT
(”x≥˘ed), (a˘uÆ))

	)

76 
	#STRCMP_EQUAL
(
ex≥˘ed
, 
a˘uÆ
Ë
	`TEST_ASSERT_EQUAL_STRING
(”x≥˘ed), (a˘uÆ))

	)

77 
	#DOUBLES_EQUAL
(
ex≥˘ed
, 
a˘uÆ
, 
dñè
Ë
	`TEST_ASSERT_DOUBLE_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ))

	)

81 
UnôyMÆloc_MakeMÆlocFaûA·îCou¡
(
cou¡
);

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/src/unity_fixture_internals.h

8 #i‚de‡
UNITY_FIXTURE_INTERNALS_H_


9 
	#UNITY_FIXTURE_INTERNALS_H_


	)

11 #ifde‡
__˝lu•lus


16 
	sUNITY_FIXTURE_T


18 
Vîbo£
;

19 
RïótCou¡
;

20 c⁄° * 
NameFûãr
;

21 c⁄° * 
GroupFûãr
;

23 
UNITY_FIXTURE_T
 
UnôyFixtuª
;

25 
	tunôyfun˘i⁄
();

26 
UnôyTe°Ru¬î
(
unôyfun˘i⁄
* 
£tup
,

27 
unôyfun˘i⁄
* 
body
,

28 
unôyfun˘i⁄
* 
ã¨down
,

29 c⁄° * 
¥öèbÀName
,

30 c⁄° * 
group
,

31 c⁄° * 
«me
,

32 c⁄° * 
fûe
, 
löe
);

34 
UnôyIgn‹eTe°
(c⁄° * 
¥öèbÀName
, c⁄° * 
group
, c⁄° * 
«me
);

35 
UnôyMÆloc_SèπTe°
();

36 
UnôyMÆloc_EndTe°
();

37 
UnôyGëComm™dLöeO±i⁄s
(
¨gc
, c⁄° * 
¨gv
[]);

38 
UnôyC⁄˛udeFixtuªTe°
();

40 
UnôyPoöãr_Së
(** 
±r
, * 
√wVÆue
, 
UNITY_LINE_TYPE
 
löe
);

41 
UnôyPoöãr_UndoAŒSës
();

42 
UnôyPoöãr_Inô
();

43 #i‚de‡
UNITY_MAX_POINTERS


44 
	#UNITY_MAX_POINTERS
 5

	)

47 #ifde‡
__˝lu•lus


	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/src/unity_fixture_malloc_overrides.h

8 #i‚de‡
UNITY_FIXTURE_MALLOC_OVERRIDES_H_


9 
	#UNITY_FIXTURE_MALLOC_OVERRIDES_H_


	)

11 
	~<°ddef.h
>

13 #ifde‡
UNITY_EXCLUDE_STDLIB_MALLOC


19 #i‚de‡
UNITY_INTERNAL_HEAP_SIZE_BYTES


20 
	#UNITY_INTERNAL_HEAP_SIZE_BYTES
 256

	)

28 #i‡!
deföed
(
UNITY_FIXTURE_MALLOC
Ë|| !deföed(
UNITY_FIXTURE_FREE
)

29 
	~<°dlib.h
>

30 
	#UNITY_FIXTURE_MALLOC
(
size
Ë
	`mÆloc
(size)

	)

31 
	#UNITY_FIXTURE_FREE
(
±r
Ë
	`‰ì
’å)

	)

33 * 
UNITY_FIXTURE_MALLOC
(
size_t
 
size
);

34 
UNITY_FIXTURE_FREE
(* 
±r
);

37 
	#mÆloc
 
unôy_mÆloc


	)

38 
	#ˇŒoc
 
unôy_ˇŒoc


	)

39 
	#ªÆloc
 
unôy_ªÆloc


	)

40 
	#‰ì
 
unôy_‰ì


	)

42 * 
unôy_mÆloc
(
size_t
 
size
);

43 * 
unôy_ˇŒoc
(
size_t
 
num
, size_à
size
);

44 * 
unôy_ªÆloc
(* 
ﬁdMem
, 
size_t
 
size
);

45 
unôy_‰ì
(* 
mem
);

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/test/main/AllTests.c

8 
	~"unôy_fixtuª.h
"

10 
	$runAŒTe°s
()

12 
	`RUN_TEST_GROUP
(
UnôyFixtuª
);

13 
	`RUN_TEST_GROUP
(
UnôyComm™dO±i⁄s
);

14 
	`RUN_TEST_GROUP
(
LókDëe˘i⁄
);

15 
	`RUN_TEST_GROUP
(
I¡î«lMÆloc
);

16 
	}
}

18 
	$maö
(
¨gc
, c⁄° * 
¨gv
[])

20  
	`UnôyMaö
(
¨gc
, 
¨gv
, 
runAŒTe°s
);

21 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/test/template_fixture_tests.c

8 
	~"unôy_fixtuª.h
"

10 
	gd©a
 = -1;

12 
TEST_GROUP
(
mygroup
);

14 
	$TEST_SETUP
(
mygroup
)

16 
d©a
 = 0;

17 
	}
}

19 
	$TEST_TEAR_DOWN
(
mygroup
)

21 
d©a
 = -1;

22 
	}
}

24 
	$TEST
(
mygroup
, 
ã°1
)

26 
	`TEST_ASSERT_EQUAL_INT
(0, 
d©a
);

27 
	}
}

29 
	$TEST
(
mygroup
, 
ã°2
)

31 
	`TEST_ASSERT_EQUAL_INT
(0, 
d©a
);

32 
d©a
 = 5;

33 
	}
}

35 
	$TEST
(
mygroup
, 
ã°3
)

37 
d©a
 = 7;

38 
	`TEST_ASSERT_EQUAL_INT
(7, 
d©a
);

39 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/test/unity_fixture_Test.c

8 
	~"unôy_fixtuª.h
"

9 
	~"unôy_ouçut_Spy.h
"

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
TEST_GROUP
(
UnôyFixtuª
);

15 
	$TEST_SETUP
(
UnôyFixtuª
)

17 
	}
}

19 
	$TEST_TEAR_DOWN
(
UnôyFixtuª
)

21 
	}
}

23 * 
	gpoöãr1
 = 0;

24 * 
	gpoöãr2
 = (*)2;

25 * 
	gpoöãr3
 = (*)3;

26 
	göt1
;

27 
	göt2
;

28 
	göt3
;

29 
	göt4
;

31 
	$TEST
(
UnôyFixtuª
, 
PoöãrSëtög
)

33 
	`TEST_ASSERT_POINTERS_EQUAL
(
poöãr1
, 0);

34 
	`UT_PTR_SET
(
poöãr1
, &
öt1
);

35 
	`UT_PTR_SET
(
poöãr2
, &
öt2
);

36 
	`UT_PTR_SET
(
poöãr3
, &
öt3
);

37 
	`TEST_ASSERT_POINTERS_EQUAL
(
poöãr1
, &
öt1
);

38 
	`TEST_ASSERT_POINTERS_EQUAL
(
poöãr2
, &
öt2
);

39 
	`TEST_ASSERT_POINTERS_EQUAL
(
poöãr3
, &
öt3
);

40 
	`UT_PTR_SET
(
poöãr1
, &
öt4
);

41 
	`UnôyPoöãr_UndoAŒSës
();

42 
	`TEST_ASSERT_POINTERS_EQUAL
(
poöãr1
, 0);

43 
	`TEST_ASSERT_POINTERS_EQUAL
(
poöãr2
, (*)2);

44 
	`TEST_ASSERT_POINTERS_EQUAL
(
poöãr3
, (*)3);

45 
	}
}

47 
	$TEST
(
UnôyFixtuª
, 
F‹˚MÆlocFaû
)

49 * 
m
;

50 * 
mÁûs
;

51 
	`UnôyMÆloc_MakeMÆlocFaûA·îCou¡
(1);

52 
m
 = 
	`mÆloc
(10);

53 
	`CHECK
(
m
);

54 
mÁûs
 = 
	`mÆloc
(10);

55 
	`TEST_ASSERT_POINTERS_EQUAL
(0, 
mÁûs
);

56 
	`‰ì
(
m
);

57 
	}
}

59 
	$TEST
(
UnôyFixtuª
, 
RóŒocSmÆÀrIsUnch™ged
)

61 * 
m1
 = 
	`mÆloc
(10);

62 * 
m2
 = 
	`ªÆloc
(
m1
, 5);

63 
	`TEST_ASSERT_POINTERS_EQUAL
(
m1
, 
m2
);

64 
	`‰ì
(
m2
);

65 
	}
}

67 
	$TEST
(
UnôyFixtuª
, 
RóŒocSameIsUnch™ged
)

69 * 
m1
 = 
	`mÆloc
(10);

70 * 
m2
 = 
	`ªÆloc
(
m1
, 10);

71 
	`TEST_ASSERT_POINTERS_EQUAL
(
m1
, 
m2
);

72 
	`‰ì
(
m2
);

73 
	}
}

75 
	$TEST
(
UnôyFixtuª
, 
RóŒocL¨gîNìded
)

77 * 
m1
 = 
	`mÆloc
(10);

78 * 
m2
;

79 
	`CHECK
(
m1
);

80 
	`°r˝y
((*)
m1
, "123456789");

81 
m2
 = 
	`ªÆloc
(
m1
, 15);

83 
	`STRCMP_EQUAL
("123456789", 
m2
);

84 
	`‰ì
(
m2
);

85 
	}
}

87 
	$TEST
(
UnôyFixtuª
, 
RóŒocNuŒPoöãrIsLikeMÆloc
)

89 * 
m
 = 
	`ªÆloc
(0, 15);

90 
	`CHECK
(
m
 != 0);

91 
	`‰ì
(
m
);

92 
	}
}

94 
	$TEST
(
UnôyFixtuª
, 
RóŒocSizeZîoFªesMemAndRëu∫sNuŒPoöãr
)

96 * 
m1
 = 
	`mÆloc
(10);

97 * 
m2
 = 
	`ªÆloc
(
m1
, 0);

98 
	`TEST_ASSERT_POINTERS_EQUAL
(0, 
m2
);

99 
	}
}

101 
	$TEST
(
UnôyFixtuª
, 
CÆlocFûlsWôhZîo
)

103 * 
m
 = 
	`ˇŒoc
(3, ());

104 * 
s
 = (*)
m
;

105 
	`CHECK
(
m
);

106 
	`TEST_ASSERT_BYTES_EQUAL
(0, 
s
[0]);

107 
	`TEST_ASSERT_BYTES_EQUAL
(0, 
s
[1]);

108 
	`TEST_ASSERT_BYTES_EQUAL
(0, 
s
[2]);

109 
	`‰ì
(
m
);

110 
	}
}

112 *
	gp1
;

113 *
	gp2
;

115 
	$TEST
(
UnôyFixtuª
, 
PoöãrSë
)

117 
c1
;

118 
c2
;

119 
√wC1
;

120 
√wC2
;

121 
p1
 = &
c1
;

122 
p2
 = &
c2
;

124 
	`UnôyPoöãr_Inô
();

125 
	`UT_PTR_SET
(
p1
, &
√wC1
);

126 
	`UT_PTR_SET
(
p2
, &
√wC2
);

127 
	`TEST_ASSERT_POINTERS_EQUAL
(&
√wC1
, 
p1
);

128 
	`TEST_ASSERT_POINTERS_EQUAL
(&
√wC2
, 
p2
);

129 
	`UnôyPoöãr_UndoAŒSës
();

130 
	`TEST_ASSERT_POINTERS_EQUAL
(&
c1
, 
p1
);

131 
	`TEST_ASSERT_POINTERS_EQUAL
(&
c2
, 
p2
);

132 
	}
}

134 
	$TEST
(
UnôyFixtuª
, 
FªeNULLSa„ty
)

136 
	`‰ì
(
NULL
);

137 
	}
}

139 
	$TEST
(
UnôyFixtuª
, 
C⁄˛udeTe°In¸emítsFaûCou¡
)

141 
UNITY_UINT
 
ßvedFaûs
 = 
Unôy
.
Te°Faûuªs
;

142 
UNITY_UINT
 
ßvedIgn‹es
 = 
Unôy
.
Te°Ign‹es
;

143 
	`UnôyOuçutCh¨Spy_E«bÀ
(1);

144 
Unôy
.
CuºítTe°Faûed
 = 1;

145 
	`UnôyC⁄˛udeFixtuªTe°
();

146 
Unôy
.
CuºítTe°Ign‹ed
 = 1;

147 
	`UnôyC⁄˛udeFixtuªTe°
();

148 
	`UnôyOuçutCh¨Spy_E«bÀ
(0);

149 
	`TEST_ASSERT_EQUAL
(
ßvedFaûs
 + 1, 
Unôy
.
Te°Faûuªs
);

150 
	`TEST_ASSERT_EQUAL
(
ßvedIgn‹es
 + 1, 
Unôy
.
Te°Ign‹es
);

151 
Unôy
.
Te°Faûuªs
 = 
ßvedFaûs
;

152 
Unôy
.
Te°Ign‹es
 = 
ßvedIgn‹es
;

153 
	}
}

157 
TEST_GROUP
(
UnôyComm™dO±i⁄s
);

159 
	gßvedVîbo£
;

160 
	gßvedRïót
;

161 c⁄° * 
	gßvedName
;

162 c⁄° * 
	gßvedGroup
;

164 
	$TEST_SETUP
(
UnôyComm™dO±i⁄s
)

166 
ßvedVîbo£
 = 
UnôyFixtuª
.
Vîbo£
;

167 
ßvedRïót
 = 
UnôyFixtuª
.
RïótCou¡
;

168 
ßvedName
 = 
UnôyFixtuª
.
NameFûãr
;

169 
ßvedGroup
 = 
UnôyFixtuª
.
GroupFûãr
;

170 
	}
}

172 
	$TEST_TEAR_DOWN
(
UnôyComm™dO±i⁄s
)

174 
UnôyFixtuª
.
Vîbo£
 = 
ßvedVîbo£
;

175 
UnôyFixtuª
.
RïótCou¡

ßvedRïót
;

176 
UnôyFixtuª
.
NameFûãr
 = 
ßvedName
;

177 
UnôyFixtuª
.
GroupFûãr
 = 
ßvedGroup
;

178 
	}
}

181 c⁄° * 
	gnoO±i⁄s
[] = {

185 
	$TEST
(
UnôyComm™dO±i⁄s
, 
DeÁu…O±i⁄s
)

187 
	`UnôyGëComm™dLöeO±i⁄s
(1, 
noO±i⁄s
);

188 
	`TEST_ASSERT_EQUAL
(0, 
UnôyFixtuª
.
Vîbo£
);

189 
	`TEST_ASSERT_POINTERS_EQUAL
(0, 
UnôyFixtuª
.
GroupFûãr
);

190 
	`TEST_ASSERT_POINTERS_EQUAL
(0, 
UnôyFixtuª
.
NameFûãr
);

191 
	`TEST_ASSERT_EQUAL
(1, 
UnôyFixtuª
.
RïótCou¡
);

192 
	}
}

194 c⁄° * 
	gvîbo£
[] = {

199 
	$TEST
(
UnôyComm™dO±i⁄s
, 
O±i⁄Vîbo£
)

201 
	`TEST_ASSERT_EQUAL
(0, 
	`UnôyGëComm™dLöeO±i⁄s
(2, 
vîbo£
));

202 
	`TEST_ASSERT_EQUAL
(1, 
UnôyFixtuª
.
Vîbo£
);

203 
	}
}

205 c⁄° * 
	ggroup
[] = {

210 
	$TEST
(
UnôyComm™dO±i⁄s
, 
O±i⁄Sñe˘Te°ByGroup
)

212 
	`TEST_ASSERT_EQUAL
(0, 
	`UnôyGëComm™dLöeO±i⁄s
(3, 
group
));

213 
	`STRCMP_EQUAL
("grou≤ame", 
UnôyFixtuª
.
GroupFûãr
);

214 
	}
}

216 c⁄° * 
	g«me
[] = {

221 
	$TEST
(
UnôyComm™dO±i⁄s
, 
O±i⁄Sñe˘Te°ByName
)

223 
	`TEST_ASSERT_EQUAL
(0, 
	`UnôyGëComm™dLöeO±i⁄s
(3, 
«me
));

224 
	`STRCMP_EQUAL
("ã°«me", 
UnôyFixtuª
.
NameFûãr
);

225 
	}
}

227 c⁄° * 
	gª≥©
[] = {

232 
	$TEST
(
UnôyComm™dO±i⁄s
, 
O±i⁄Sñe˘RïótTe°sDeÁu…Cou¡
)

234 
	`TEST_ASSERT_EQUAL
(0, 
	`UnôyGëComm™dLöeO±i⁄s
(2, 
ª≥©
));

235 
	`TEST_ASSERT_EQUAL
(2, 
UnôyFixtuª
.
RïótCou¡
);

236 
	}
}

238 
	$TEST
(
UnôyComm™dO±i⁄s
, 
O±i⁄Sñe˘RïótTe°sS≥cificCou¡
)

240 
	`TEST_ASSERT_EQUAL
(0, 
	`UnôyGëComm™dLöeO±i⁄s
(3, 
ª≥©
));

241 
	`TEST_ASSERT_EQUAL
(99, 
UnôyFixtuª
.
RïótCou¡
);

242 
	}
}

244 c⁄° * 
	gmu…ùÀ
[] = {

252 
	$TEST
(
UnôyComm™dO±i⁄s
, 
Mu…ùÀO±i⁄s
)

254 
	`TEST_ASSERT_EQUAL
(0, 
	`UnôyGëComm™dLöeO±i⁄s
(8, 
mu…ùÀ
));

255 
	`TEST_ASSERT_EQUAL
(1, 
UnôyFixtuª
.
Vîbo£
);

256 
	`STRCMP_EQUAL
("grou≤ame", 
UnôyFixtuª
.
GroupFûãr
);

257 
	`STRCMP_EQUAL
("ã°«me", 
UnôyFixtuª
.
NameFûãr
);

258 
	`TEST_ASSERT_EQUAL
(98, 
UnôyFixtuª
.
RïótCou¡
);

259 
	}
}

261 c⁄° * 
	gdashRNŸLa°
[] = {

269 
	$TEST
(
UnôyComm™dO±i⁄s
, 
Mu…ùÀO±i⁄sDashRNŸLa°AndNoVÆueS≥cifõd
)

271 
	`TEST_ASSERT_EQUAL
(0, 
	`UnôyGëComm™dLöeO±i⁄s
(7, 
dashRNŸLa°
));

272 
	`TEST_ASSERT_EQUAL
(1, 
UnôyFixtuª
.
Vîbo£
);

273 
	`STRCMP_EQUAL
("gggg", 
UnôyFixtuª
.
GroupFûãr
);

274 
	`STRCMP_EQUAL
("ââ", 
UnôyFixtuª
.
NameFûãr
);

275 
	`TEST_ASSERT_EQUAL
(2, 
UnôyFixtuª
.
RïótCou¡
);

276 
	}
}

278 c⁄° * 
	gunknownComm™d
[] = {

286 
	$TEST
(
UnôyComm™dO±i⁄s
, 
UnknownComm™dIsIgn‹ed
)

288 
	`TEST_ASSERT_EQUAL
(0, 
	`UnôyGëComm™dLöeO±i⁄s
(9, 
unknownComm™d
));

289 
	`TEST_ASSERT_EQUAL
(1, 
UnôyFixtuª
.
Vîbo£
);

290 
	`STRCMP_EQUAL
("grou≤ame", 
UnôyFixtuª
.
GroupFûãr
);

291 
	`STRCMP_EQUAL
("ã°«me", 
UnôyFixtuª
.
NameFûãr
);

292 
	`TEST_ASSERT_EQUAL
(98, 
UnôyFixtuª
.
RïótCou¡
);

293 
	}
}

295 
	$TEST
(
UnôyComm™dO±i⁄s
, 
GroupOrNameFûãrWôhoutSåögFaûs
)

297 
	`TEST_ASSERT_EQUAL
(1, 
	`UnôyGëComm™dLöeO±i⁄s
(3, 
unknownComm™d
));

298 
	`TEST_ASSERT_EQUAL
(1, 
	`UnôyGëComm™dLöeO±i⁄s
(5, 
unknownComm™d
));

299 
	`TEST_ASSERT_EQUAL
(1, 
	`UnôyMaö
(3, 
unknownComm™d
, 
NULL
));

300 
	}
}

302 
	$TEST
(
UnôyComm™dO±i⁄s
, 
GroupFûãrRóŒyFûãrs
)

304 
UNITY_UINT
 
ßved
 = 
Unôy
.
NumbîOfTe°s
;

305 
	`TEST_ASSERT_EQUAL
(0, 
	`UnôyGëComm™dLöeO±i⁄s
(4, 
unknownComm™d
));

306 
	`UnôyIgn‹eTe°
(
NULL
, "non-matching", NULL);

307 
	`TEST_ASSERT_EQUAL
(
ßved
, 
Unôy
.
NumbîOfTe°s
);

308 
	}
}

310 
	$IGNORE_TEST
(
UnôyComm™dO±i⁄s
, 
Te°ShouldBeIgn‹ed
)

312 
	`TEST_FAIL_MESSAGE
("ThisÅest shouldÇotÑun!");

313 
	}
}

317 
TEST_GROUP
(
LókDëe˘i⁄
);

319 
	$TEST_SETUP
(
LókDëe˘i⁄
)

321 #ifde‡
UNITY_EXCLUDE_STDLIB_MALLOC


322 
	`UnôyOuçutCh¨Spy_Cª©e
(200);

324 
	`UnôyOuçutCh¨Spy_Cª©e
(1000);

326 
	}
}

328 
	$TEST_TEAR_DOWN
(
LókDëe˘i⁄
)

330 
	`UnôyOuçutCh¨Spy_De°roy
();

331 
	}
}

333 
	#EXPECT_ABORT_BEGIN
 \

335 
jmp_buf
 
Te°Ab‹tFøme
; \

336 
	`mem˝y
(
Te°Ab‹tFøme
, 
Unôy
.
Ab‹tFøme
, (
jmp_buf
)); \

337 i‡(
	`TEST_PROTECT
()) \

338 {

	)

340 
	#EXPECT_ABORT_END
 \

342 
	`mem˝y
(
Unôy
.
Ab‹tFøme
, 
Te°Ab‹tFøme
, (
jmp_buf
)); \

343 }

	)

346 #ifde‡
__STDC_VERSION__


348 #i‡
__STDC_VERSION__
 >= 199901L

349 
	#USING_SPY_AS
(
a
Ë
	`EXPAND_AND_USE_2ND
(
	`ASSIGN_VALUE
◊), 0)

	)

350 
	#ASSIGN_VALUE
(
a
Ë
VAL_
##
	)
a

351 
	#VAL_UnôyOuçutCh¨Spy_OuçutCh¨
 0, 1

	)

352 
	#EXPAND_AND_USE_2ND
(
a
, 
b
Ë
	`SECOND_PARAM
◊, b, 
throwaway
)

	)

353 
	#SECOND_PARAM
(
a
, 
b
, ...Ë
	)
b

354 #i‡
USING_SPY_AS
(
UNITY_OUTPUT_CHAR
)

355 
	#USING_OUTPUT_SPY


	)

360 
	#UnôyOuçutCh¨Spy_OuçutCh¨
 42

	)

361 #i‡
UNITY_OUTPUT_CHAR
 =
UnôyOuçutCh¨Spy_OuçutCh¨


362 
	#USING_OUTPUT_SPY


	)

364 #unde‡
UnôyOuçutCh¨Spy_OuçutCh¨


367 
	$TEST
(
LókDëe˘i⁄
, 
Dëe˘sLók
)

369 #i‚de‡
USING_OUTPUT_SPY


370 
	`TEST_IGNORE_MESSAGE
("Build with '-D UNITY_OUTPUT_CHAR=UnityOutputCharSpy_OutputChar'ÅoÉnableÅests");

372 * 
m
 = 
	`mÆloc
(10);

373 
	`TEST_ASSERT_NOT_NULL
(
m
);

374 
	`UnôyOuçutCh¨Spy_E«bÀ
(1);

375 
EXPECT_ABORT_BEGIN


376 
	`UnôyMÆloc_EndTe°
();

377 
EXPECT_ABORT_END


378 
	`UnôyOuçutCh¨Spy_E«bÀ
(0);

379 
Unôy
.
CuºítTe°Faûed
 = 0;

380 
	`CHECK
(
	`°r°r
(
	`UnôyOuçutCh¨Spy_Gë
(), "ThisÅestÜeaks!"));

381 
	`‰ì
(
m
);

383 
	}
}

385 
	$TEST
(
LókDëe˘i⁄
, 
Buf„rOvîrunFoundDurögFªe
)

387 #i‚de‡
USING_OUTPUT_SPY


388 
	`TEST_IGNORE
();

390 * 
m
 = 
	`mÆloc
(10);

391 * 
s
 = (*)
m
;

392 
	`TEST_ASSERT_NOT_NULL
(
m
);

393 
s
[10] = ()0xFF;

394 
	`UnôyOuçutCh¨Spy_E«bÀ
(1);

395 
EXPECT_ABORT_BEGIN


396 
	`‰ì
(
m
);

397 
EXPECT_ABORT_END


398 
	`UnôyOuçutCh¨Spy_E«bÀ
(0);

399 
Unôy
.
CuºítTe°Faûed
 = 0;

400 
	`CHECK
(
	`°r°r
(
	`UnôyOuçutCh¨Spy_Gë
(), "Buffer overrun detected during free()"));

402 
	}
}

404 
	$TEST
(
LókDëe˘i⁄
, 
Buf„rOvîrunFoundDurögRóŒoc
)

406 #i‚de‡
USING_OUTPUT_SPY


407 
	`TEST_IGNORE
();

409 * 
m
 = 
	`mÆloc
(10);

410 * 
s
 = (*)
m
;

411 
	`TEST_ASSERT_NOT_NULL
(
m
);

412 
s
[10] = ()0xFF;

413 
	`UnôyOuçutCh¨Spy_E«bÀ
(1);

414 
EXPECT_ABORT_BEGIN


415 
m
 = 
	`ªÆloc
(m, 100);

416 
EXPECT_ABORT_END


417 
	`UnôyOuçutCh¨Spy_E«bÀ
(0);

418 
Unôy
.
CuºítTe°Faûed
 = 0;

419 
	`CHECK
(
	`°r°r
(
	`UnôyOuçutCh¨Spy_Gë
(), "Buffer overrun detected duringÑealloc()"));

421 
	}
}

423 
	$TEST
(
LókDëe˘i⁄
, 
Buf„rGu¨dWrôeFoundDurögFªe
)

425 #i‚de‡
USING_OUTPUT_SPY


426 
	`TEST_IGNORE
();

428 * 
m
 = 
	`mÆloc
(10);

429 * 
s
 = (*)
m
;

430 
	`TEST_ASSERT_NOT_NULL
(
m
);

431 
s
[-1] = ()0x00;

432 
s
[-2] = ()0x01;

433 
	`UnôyOuçutCh¨Spy_E«bÀ
(1);

434 
EXPECT_ABORT_BEGIN


435 
	`‰ì
(
m
);

436 
EXPECT_ABORT_END


437 
	`UnôyOuçutCh¨Spy_E«bÀ
(0);

438 
Unôy
.
CuºítTe°Faûed
 = 0;

439 
	`CHECK
(
	`°r°r
(
	`UnôyOuçutCh¨Spy_Gë
(), "Buffer overrun detected during free()"));

441 
	}
}

443 
	$TEST
(
LókDëe˘i⁄
, 
Buf„rGu¨dWrôeFoundDurögRóŒoc
)

445 #i‚de‡
USING_OUTPUT_SPY


446 
	`TEST_IGNORE
();

448 * 
m
 = 
	`mÆloc
(10);

449 * 
s
 = (*)
m
;

450 
	`TEST_ASSERT_NOT_NULL
(
m
);

451 
s
[-1] = ()0x0A;

452 
	`UnôyOuçutCh¨Spy_E«bÀ
(1);

453 
EXPECT_ABORT_BEGIN


454 
m
 = 
	`ªÆloc
(m, 100);

455 
EXPECT_ABORT_END


456 
	`UnôyOuçutCh¨Spy_E«bÀ
(0);

457 
Unôy
.
CuºítTe°Faûed
 = 0;

458 
	`CHECK
(
	`°r°r
(
	`UnôyOuçutCh¨Spy_Gë
(), "Buffer overrun detected duringÑealloc()"));

460 
	}
}

462 
	$TEST
(
LókDëe˘i⁄
, 
PoöãrSëtögMax
)

464 #i‚de‡
USING_OUTPUT_SPY


465 
	`TEST_IGNORE
();

467 
i
;

468 
i
 = 0; i < 
UNITY_MAX_POINTERS
; i++Ë
	`UT_PTR_SET
(
poöãr1
, &
öt1
);

469 
	`UnôyOuçutCh¨Spy_E«bÀ
(1);

470 
EXPECT_ABORT_BEGIN


471 
	`UT_PTR_SET
(
poöãr1
, &
öt1
);

472 
EXPECT_ABORT_END


473 
	`UnôyOuçutCh¨Spy_E«bÀ
(0);

474 
Unôy
.
CuºítTe°Faûed
 = 0;

475 
	`CHECK
(
	`°r°r
(
	`UnôyOuçutCh¨Spy_Gë
(), "Too manyÖointers set"));

477 
	}
}

481 
TEST_GROUP
(
I¡î«lMÆloc
);

482 
	#TEST_ASSERT_MEMORY_ALL_FREE_LIFO_ORDER
(
fú°_mem_±r
, 
±r
) \

483 
±r
 = 
	`mÆloc
(10); 
	`‰ì
(ptr); \

484 
	`TEST_ASSERT_EQUAL_PTR_MESSAGE
(
fú°_mem_±r
, 
±r
, "Mem‹y wa†°ønded, fªêö LIFO ordî");

	)

487 
	$TEST_SETUP
(
I¡î«lMÆloc
Ë{ 
	}
}

488 
	$TEST_TEAR_DOWN
(
I¡î«lMÆloc
Ë{ 
	}
}

490 
	$TEST
(
I¡î«lMÆloc
, 
MÆlocPa°Buf„rFaûs
)

492 #ifde‡
UNITY_EXCLUDE_STDLIB_MALLOC


493 * 
m
 = 
	`mÆloc
(
UNITY_INTERNAL_HEAP_SIZE_BYTES
/2 + 1);

494 * 
n
 = 
	`mÆloc
(
UNITY_INTERNAL_HEAP_SIZE_BYTES
/2);

495 
	`‰ì
(
m
);

496 
	`TEST_ASSERT_NOT_NULL
(
m
);

497 
	`TEST_ASSERT_NULL
(
n
);

498 
	`TEST_ASSERT_MEMORY_ALL_FREE_LIFO_ORDER
(
m
, 
n
);

500 
	}
}

502 
	$TEST
(
I¡î«lMÆloc
, 
CÆlocPa°Buf„rFaûs
)

504 #ifde‡
UNITY_EXCLUDE_STDLIB_MALLOC


505 * 
m
 = 
	`ˇŒoc
(1, 
UNITY_INTERNAL_HEAP_SIZE_BYTES
/2 + 1);

506 * 
n
 = 
	`ˇŒoc
(1, 
UNITY_INTERNAL_HEAP_SIZE_BYTES
/2);

507 
	`‰ì
(
m
);

508 
	`TEST_ASSERT_NOT_NULL
(
m
);

509 
	`TEST_ASSERT_NULL
(
n
);

510 
	`TEST_ASSERT_MEMORY_ALL_FREE_LIFO_ORDER
(
m
, 
n
);

512 
	}
}

514 
	$TEST
(
I¡î«lMÆloc
, 
MÆlocThíRóŒocGrowsMem‹yInPœ˚
)

516 #ifde‡
UNITY_EXCLUDE_STDLIB_MALLOC


517 * 
m
 = 
	`mÆloc
(
UNITY_INTERNAL_HEAP_SIZE_BYTES
/2 + 1);

518 * 
n
 = 
	`ªÆloc
(
m
, 
UNITY_INTERNAL_HEAP_SIZE_BYTES
/2 + 9);

519 
	`‰ì
(
n
);

520 
	`TEST_ASSERT_NOT_NULL
(
m
);

521 
	`TEST_ASSERT_EQUAL
(
m
, 
n
);

522 
	`TEST_ASSERT_MEMORY_ALL_FREE_LIFO_ORDER
(
m
, 
n
);

524 
	}
}

526 
	$TEST
(
I¡î«lMÆloc
, 
RóŒocFaûD€sNŸFªeMem
)

528 #ifde‡
UNITY_EXCLUDE_STDLIB_MALLOC


529 * 
m
 = 
	`mÆloc
(
UNITY_INTERNAL_HEAP_SIZE_BYTES
/2);

530 * 
n1
 = 
	`mÆloc
(10);

531 * 
out_of_mem
 = 
	`ªÆloc
(
n1
, 
UNITY_INTERNAL_HEAP_SIZE_BYTES
/2 + 1);

532 * 
n2
 = 
	`mÆloc
(10);

534 
	`‰ì
(
n2
);

535 i‡(
out_of_mem
 =
NULL
Ë
	`‰ì
(
n1
);

536 
	`‰ì
(
m
);

538 
	`TEST_ASSERT_NOT_NULL
(
m
);

539 
	`TEST_ASSERT_NULL
(
out_of_mem
);

540 
	`TEST_ASSERT_NOT_EQUAL
(
n2
, 
n1
);

541 
	`TEST_ASSERT_MEMORY_ALL_FREE_LIFO_ORDER
(
m
, 
n2
);

543 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/test/unity_fixture_TestRunner.c

8 
	~"unôy_fixtuª.h
"

10 
	$TEST_GROUP_RUNNER
(
UnôyFixtuª
)

12 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
PoöãrSëtög
);

13 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
F‹˚MÆlocFaû
);

14 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
RóŒocSmÆÀrIsUnch™ged
);

15 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
RóŒocSameIsUnch™ged
);

16 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
RóŒocL¨gîNìded
);

17 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
RóŒocNuŒPoöãrIsLikeMÆloc
);

18 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
RóŒocSizeZîoFªesMemAndRëu∫sNuŒPoöãr
);

19 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
CÆlocFûlsWôhZîo
);

20 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
PoöãrSë
);

21 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
FªeNULLSa„ty
);

22 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
C⁄˛udeTe°In¸emítsFaûCou¡
);

23 
	}
}

25 
	$TEST_GROUP_RUNNER
(
UnôyComm™dO±i⁄s
)

27 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
DeÁu…O±i⁄s
);

28 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
O±i⁄Vîbo£
);

29 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
O±i⁄Sñe˘Te°ByGroup
);

30 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
O±i⁄Sñe˘Te°ByName
);

31 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
O±i⁄Sñe˘RïótTe°sDeÁu…Cou¡
);

32 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
O±i⁄Sñe˘RïótTe°sS≥cificCou¡
);

33 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
Mu…ùÀO±i⁄s
);

34 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
Mu…ùÀO±i⁄sDashRNŸLa°AndNoVÆueS≥cifõd
);

35 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
UnknownComm™dIsIgn‹ed
);

36 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
GroupOrNameFûãrWôhoutSåögFaûs
);

37 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
GroupFûãrRóŒyFûãrs
);

38 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
Te°ShouldBeIgn‹ed
);

39 
	}
}

41 
	$TEST_GROUP_RUNNER
(
LókDëe˘i⁄
)

43 
	`RUN_TEST_CASE
(
LókDëe˘i⁄
, 
Dëe˘sLók
);

44 
	`RUN_TEST_CASE
(
LókDëe˘i⁄
, 
Buf„rOvîrunFoundDurögFªe
);

45 
	`RUN_TEST_CASE
(
LókDëe˘i⁄
, 
Buf„rOvîrunFoundDurögRóŒoc
);

46 
	`RUN_TEST_CASE
(
LókDëe˘i⁄
, 
Buf„rGu¨dWrôeFoundDurögFªe
);

47 
	`RUN_TEST_CASE
(
LókDëe˘i⁄
, 
Buf„rGu¨dWrôeFoundDurögRóŒoc
);

48 
	`RUN_TEST_CASE
(
LókDëe˘i⁄
, 
PoöãrSëtögMax
);

49 
	}
}

51 
	$TEST_GROUP_RUNNER
(
I¡î«lMÆloc
)

53 
	`RUN_TEST_CASE
(
I¡î«lMÆloc
, 
MÆlocPa°Buf„rFaûs
);

54 
	`RUN_TEST_CASE
(
I¡î«lMÆloc
, 
CÆlocPa°Buf„rFaûs
);

55 
	`RUN_TEST_CASE
(
I¡î«lMÆloc
, 
MÆlocThíRóŒocGrowsMem‹yInPœ˚
);

56 
	`RUN_TEST_CASE
(
I¡î«lMÆloc
, 
RóŒocFaûD€sNŸFªeMem
);

57 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/test/unity_output_Spy.c

9 
	~"unôy_ouçut_Spy.h
"

10 
	~"unôy_fixtuª.h
"

12 
	~<°dio.h
>

13 
	~<°rög.h
>

15 
	gsize
;

16 
	gcou¡
;

17 * 
	gbuf„r
;

18 
	g•y_íabÀ
;

20 
	$UnôyOuçutCh¨Spy_Cª©e
(
s
)

22 
size
 = (
s
 > 0) ? s : 0;

23 
cou¡
 = 0;

24 
•y_íabÀ
 = 0;

25 
buf„r
 = 
	`mÆloc
((
size_t
)
size
);

26 
	`TEST_ASSERT_NOT_NULL_MESSAGE
(
buf„r
, "I¡î«»mÆlo¯Áûed i¿Spy Cª©e():" 
__FILE__
);

27 
	`mem£t
(
buf„r
, 0, (
size_t
)
size
);

28 
	}
}

30 
	$UnôyOuçutCh¨Spy_De°roy
()

32 
size
 = 0;

33 
	`‰ì
(
buf„r
);

34 
	}
}

36 
	$UnôyOuçutCh¨Spy_OuçutCh¨
(
c
)

38 i‡(
•y_íabÀ
)

40 i‡(
cou¡
 < (
size
-1))

41 
buf„r
[
cou¡
++] = ()
c
;

45 
	`putch¨
(
c
);

47 
	}
}

49 c⁄° * 
	$UnôyOuçutCh¨Spy_Gë
()

51  
buf„r
;

52 
	}
}

54 
	$UnôyOuçutCh¨Spy_E«bÀ
(
íabÀ
)

56 
•y_íabÀ
 = 
íabÀ
;

57 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/test/unity_output_Spy.h

8 #i‚de‡
D_unôy_ouçut_Spy_H


9 
	#D_unôy_ouçut_Spy_H


	)

11 
UnôyOuçutCh¨Spy_Cª©e
(
s
);

12 
UnôyOuçutCh¨Spy_De°roy
();

13 
UnôyOuçutCh¨Spy_OuçutCh¨
(
c
);

14 c⁄° * 
UnôyOuçutCh¨Spy_Gë
();

15 
UnôyOuçutCh¨Spy_E«bÀ
(
íabÀ
);

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/src/unity.c

7 
	#UNITY_INCLUDE_SETUP_STUBS


	)

8 
	~"unôy.h
"

9 
	~<°ddef.h
>

12 #ifde‡
UNITY_OMIT_OUTPUT_CHAR_HEADER_DECLARATION


13 
UNITY_OUTPUT_CHAR
();

17 
	#UNITY_FAIL_AND_BAIL
 { 
Unôy
.
CuºítTe°Faûed
 = 1; 
	`TEST_ABORT
(); }

	)

18 
	#UNITY_IGNORE_AND_BAIL
 { 
Unôy
.
CuºítTe°Ign‹ed
 = 1; 
	`TEST_ABORT
(); }

	)

19 
	#RETURN_IF_FAIL_OR_IGNORE
 i‡(
Unôy
.
CuºítTe°Faûed
 || Unôy.
CuºítTe°Ign‹ed
Ë

	)

21 
UNITY_STORAGE_T
 
	gUnôy
;

23 #ifde‡
UNITY_OUTPUT_COLOR


24 c⁄° 
	gUnôySåOk
[] = "\033[42mOK\033[00m";

25 c⁄° 
	gUnôySåPass
[] = "\033[42mPASS\033[00m";

26 c⁄° 
	gUnôySåFaû
[] = "\033[41mFAIL\033[00m";

27 c⁄° 
	gUnôySåIgn‹e
[] = "\033[43mIGNORE\033[00m";

29 c⁄° 
	gUnôySåOk
[] = "OK";

30 c⁄° 
	gUnôySåPass
[] = "PASS";

31 c⁄° 
	gUnôySåFaû
[] = "FAIL";

32 c⁄° 
	gUnôySåIgn‹e
[] = "IGNORE";

34 c⁄° 
	gUnôySåNuŒ
[] = "NULL";

35 c⁄° 
	gUnôySåS∑˚r
[] = ". ";

36 c⁄° 
	gUnôySåEx≥˘ed
[] = " Expected ";

37 c⁄° 
	gUnôySåWas
[] = " Was ";

38 c⁄° 
	gUnôySåGt
[] = "Åo be greaterÅhan ";

39 c⁄° 
	gUnôySåLt
[] = "Åo beÜessÅhan ";

40 c⁄° 
	gUnôySåOrEquÆ
[] = "orÉqualÅo ";

41 c⁄° 
	gUnôySåEÀmít
[] = " Element ";

42 c⁄° 
	gUnôySåByã
[] = " Byte ";

43 c⁄° 
	gUnôySåMem‹y
[] = " Memory Mismatch.";

44 c⁄° 
	gUnôySåDñè
[] = " Values Not Within Delta ";

45 c⁄° 
	gUnôySåPoöéess
[] = " You Asked Me To Compare Nothing, Which Was Pointless.";

46 c⁄° 
	gUnôySåNuŒPoöãrF‹Ex≥˘ed
[] = " ExpectedÖointerÅo be NULL";

47 c⁄° 
	gUnôySåNuŒPoöãrF‹A˘uÆ
[] = " ActualÖointer was NULL";

48 #i‚de‡
UNITY_EXCLUDE_FLOAT


49 c⁄° 
	gUnôySåNŸ
[] = "Not ";

50 c⁄° 
	gUnôySåInf
[] = "Infinity";

51 c⁄° 
	gUnôySåNegInf
[] = "Negative Infinity";

52 c⁄° 
	gUnôySåNaN
[] = "NaN";

53 c⁄° 
	gUnôySåDë
[] = "Determinate";

54 c⁄° 
	gUnôySåInvÆidFlﬂtTøô
[] = "Invalid Float Trait";

56 c⁄° 
	gUnôySåEºFlﬂt
[] = "Unity Floating Point Disabled";

57 c⁄° 
	gUnôySåEºDoubÀ
[] = "Unity Double Precision Disabled";

58 c⁄° 
	gUnôySåEº64
[] = "Unity 64-bit Support Disabled";

59 c⁄° 
	gUnôySåBªakî
[] = "-----------------------";

60 c⁄° 
	gUnôySåResu…sTe°s
[] = " Tests ";

61 c⁄° 
	gUnôySåResu…sFaûuªs
[] = " Failures ";

62 c⁄° 
	gUnôySåResu…sIgn‹ed
[] = " Ignored ";

63 c⁄° 
	gUnôySåDëaû1Name
[] = 
UNITY_DETAIL1_NAME
 " ";

64 c⁄° 
	gUnôySåDëaû2Name
[] = " " 
UNITY_DETAIL2_NAME
 " ";

70 
	$UnôyPröt
(c⁄° * 
°rög
)

72 c⁄° * 
pch
 = 
°rög
;

74 i‡(
pch
 !
NULL
)

76 *
pch
)

79 i‡((*
pch
 <= 126) && (*pch >= 32))

81 
	`UNITY_OUTPUT_CHAR
(*
pch
);

84 i‡(*
pch
 == 13)

86 
	`UNITY_OUTPUT_CHAR
('\\');

87 
	`UNITY_OUTPUT_CHAR
('r');

90 i‡(*
pch
 == 10)

92 
	`UNITY_OUTPUT_CHAR
('\\');

93 
	`UNITY_OUTPUT_CHAR
('n');

95 #ifde‡
UNITY_OUTPUT_COLOR


97 i‡(*
pch
 == 27 && *(pch + 1) == '[')

99 *
pch
 && *pch != 'm')

101 
	`UNITY_OUTPUT_CHAR
(*
pch
);

102 
pch
++;

104 
	`UNITY_OUTPUT_CHAR
('m');

110 
	`UNITY_OUTPUT_CHAR
('\\');

111 
	`UNITY_OUTPUT_CHAR
('x');

112 
	`UnôyPrötNumbîHex
((
UNITY_UINT
)*
pch
, 2);

114 
pch
++;

117 
	}
}

119 
	$UnôyPrötLí
(c⁄° * 
°rög
, c⁄° 
UNITY_UINT32
 
Àngth
)

121 c⁄° * 
pch
 = 
°rög
;

123 i‡(
pch
 !
NULL
)

125 *
pch
 && (
UNITY_UINT32
)’ch - 
°rög
Ë< 
Àngth
)

128 i‡((*
pch
 <= 126) && (*pch >= 32))

130 
	`UNITY_OUTPUT_CHAR
(*
pch
);

133 i‡(*
pch
 == 13)

135 
	`UNITY_OUTPUT_CHAR
('\\');

136 
	`UNITY_OUTPUT_CHAR
('r');

139 i‡(*
pch
 == 10)

141 
	`UNITY_OUTPUT_CHAR
('\\');

142 
	`UNITY_OUTPUT_CHAR
('n');

147 
	`UNITY_OUTPUT_CHAR
('\\');

148 
	`UNITY_OUTPUT_CHAR
('x');

149 
	`UnôyPrötNumbîHex
((
UNITY_UINT
)*
pch
, 2);

151 
pch
++;

154 
	}
}

157 
	$UnôyPrötNumbîByStyÀ
(c⁄° 
UNITY_INT
 
numbî
, c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
)

159 i‡((
°yÀ
 & 
UNITY_DISPLAY_RANGE_INT
) == UNITY_DISPLAY_RANGE_INT)

161 
	`UnôyPrötNumbî
(
numbî
);

163 i‡((
°yÀ
 & 
UNITY_DISPLAY_RANGE_UINT
) == UNITY_DISPLAY_RANGE_UINT)

165 
	`UnôyPrötNumbîUnsig√d
((
UNITY_UINT
)
numbî
);

169 
	`UNITY_OUTPUT_CHAR
('0');

170 
	`UNITY_OUTPUT_CHAR
('x');

171 
	`UnôyPrötNumbîHex
((
UNITY_UINT
)
numbî
, ()((
°yÀ
 & 0xF) * 2));

173 
	}
}

176 
	$UnôyPrötNumbî
(c⁄° 
UNITY_INT
 
numbî_to_¥öt
)

178 
UNITY_UINT
 
numbî
 = (UNITY_UINT)
numbî_to_¥öt
;

180 i‡(
numbî_to_¥öt
 < 0)

183 
	`UNITY_OUTPUT_CHAR
('-');

184 
numbî
 = (
UNITY_UINT
)(-
numbî_to_¥öt
);

186 
	`UnôyPrötNumbîUnsig√d
(
numbî
);

187 
	}
}

191 
	$UnôyPrötNumbîUnsig√d
(c⁄° 
UNITY_UINT
 
numbî
)

193 
UNITY_UINT
 
divis‹
 = 1;

196 
numbî
 / 
divis‹
 > 9)

198 
divis‹
 *= 10;

204 
	`UNITY_OUTPUT_CHAR
(()('0' + (
numbî
 / 
divis‹
 % 10)));

205 
divis‹
 /= 10;

206 } 
divis‹
 > 0);

207 
	}
}

210 
	$UnôyPrötNumbîHex
(c⁄° 
UNITY_UINT
 
numbî
, c⁄° 
nibbÀs_to_¥öt
)

212 
nibbÀ
;

213 
nibbÀs
 = 
nibbÀs_to_¥öt
;

214 i‡(()
nibbÀs
 > (2 * (
numbî
)))

215 
nibbÀs
 = 2 * (
numbî
);

217 
nibbÀs
 > 0)

219 
nibbÀs
--;

220 
nibbÀ
 = ()(
numbî
 >> (
nibbÀs
 * 4)) & 0x0F;

221 i‡(
nibbÀ
 <= 9)

223 
	`UNITY_OUTPUT_CHAR
(()('0' + 
nibbÀ
));

227 
	`UNITY_OUTPUT_CHAR
(()('A' - 10 + 
nibbÀ
));

230 
	}
}

233 
	$UnôyPrötMask
(c⁄° 
UNITY_UINT
 
mask
, c⁄° UNITY_UINT 
numbî
)

235 
UNITY_UINT
 
cuºít_bô
 = (UNITY_UINT)1 << (
UNITY_INT_WIDTH
 - 1);

236 
UNITY_INT32
 
i
;

238 
i
 = 0; i < 
UNITY_INT_WIDTH
; i++)

240 i‡(
cuºít_bô
 & 
mask
)

242 i‡(
cuºít_bô
 & 
numbî
)

244 
	`UNITY_OUTPUT_CHAR
('1');

248 
	`UNITY_OUTPUT_CHAR
('0');

253 
	`UNITY_OUTPUT_CHAR
('X');

255 
cuºít_bô
 = current_bit >> 1;

257 
	}
}

260 #i‚de‡
UNITY_EXCLUDE_FLOAT_PRINT


266 
	$UnôyPrötFlﬂt
(c⁄° 
UNITY_DOUBLE
 
öput_numbî
)

268 
UNITY_DOUBLE
 
numbî
 = 
öput_numbî
;

271 i‡(
numbî
 < ()0.0f || (number == ()0.0f && ()1.0f /Çumber < ()0.0f))

273 
	`UNITY_OUTPUT_CHAR
('-');

274 
numbî
 = -number;

278 i‡(
numbî
 =()0.0fË
	`UnôyPröt
("0");

279 i‡(
	`i¢™
(
numbî
)Ë
	`UnôyPröt
("nan");

280 i‡(
	`isöf
(
numbî
)Ë
	`UnôyPröt
("inf");

283 
exp⁄ít
 = 0;

284 
decimÆs
, 
digôs
;

285 
UNITY_INT32
 
n
;

286 
buf
[16];

289 
numbî
 < ()(100000.0‡/ 1e6f)Ë{Çumbî *()1e6f; 
exp⁄ít
 -= 6; }

290 
numbî
 < ()100000.0fË{Çumbî *()10.0f; 
exp⁄ít
--; }

291 
numbî
 > ()(1000000.0‡* 1e6f)Ë{Çumbî /()1e6f; 
exp⁄ít
 += 6; }

292 
numbî
 > ()1000000.0fË{Çumbî /()10.0f; 
exp⁄ít
++; }

295 
n
 = ((
UNITY_INT32
)(
numbî
 +Çumber) + 1) / 2;

296 i‡(
n
 > 999999)

298 
n
 = 100000;

299 
exp⁄ít
++;

303 
decimÆs
 = (
exp⁄ít
 <= 0 &&Éxponent >= -9) ? -exponent : 5;

304 
exp⁄ít
 +
decimÆs
;

307 
decimÆs
 > 0 && 
n
 % 10 == 0)

309 
n
 /= 10;

310 
decimÆs
--;

314 
digôs
 = 0;

315 
n
 !0 || 
digôs
 < 
decimÆs
 + 1)

317 
buf
[
digôs
++] = ()('0' + 
n
 % 10);

318 
n
 /= 10;

320 
digôs
 > 0)

322 if(
digôs
 =
decimÆs
Ë
	`UNITY_OUTPUT_CHAR
('.');

323 
	`UNITY_OUTPUT_CHAR
(
buf
[--
digôs
]);

327 i‡(
exp⁄ít
 != 0)

329 
	`UNITY_OUTPUT_CHAR
('e');

331 if(
exp⁄ít
 < 0)

333 
	`UNITY_OUTPUT_CHAR
('-');

334 
exp⁄ít
 = -exponent;

338 
	`UNITY_OUTPUT_CHAR
('+');

341 
digôs
 = 0;

342 
exp⁄ít
 !0 || 
digôs
 < 2)

344 
buf
[
digôs
++] = ()('0' + 
exp⁄ít
 % 10);

345 
exp⁄ít
 /= 10;

347 
digôs
 > 0)

349 
	`UNITY_OUTPUT_CHAR
(
buf
[--
digôs
]);

353 
	}
}

357 
	$UnôyTe°Resu…sBegö
(c⁄° * 
fûe
, c⁄° 
UNITY_LINE_TYPE
 
löe
)

359 
	`UnôyPröt
(
fûe
);

360 
	`UNITY_OUTPUT_CHAR
(':');

361 
	`UnôyPrötNumbî
((
UNITY_INT
)
löe
);

362 
	`UNITY_OUTPUT_CHAR
(':');

363 
	`UnôyPröt
(
Unôy
.
CuºítTe°Name
);

364 
	`UNITY_OUTPUT_CHAR
(':');

365 
	}
}

368 
	$UnôyTe°Resu…sFaûBegö
(c⁄° 
UNITY_LINE_TYPE
 
löe
)

370 
	`UnôyTe°Resu…sBegö
(
Unôy
.
Te°Fûe
, 
löe
);

371 
	`UnôyPröt
(
UnôySåFaû
);

372 
	`UNITY_OUTPUT_CHAR
(':');

373 
	}
}

376 
	$UnôyC⁄˛udeTe°
()

378 i‡(
Unôy
.
CuºítTe°Ign‹ed
)

380 
Unôy
.
Te°Ign‹es
++;

382 i‡(!
Unôy
.
CuºítTe°Faûed
)

384 
	`UnôyTe°Resu…sBegö
(
Unôy
.
Te°Fûe
, Unôy.
CuºítTe°LöeNumbî
);

385 
	`UnôyPröt
(
UnôySåPass
);

389 
Unôy
.
Te°Faûuªs
++;

392 
Unôy
.
CuºítTe°Faûed
 = 0;

393 
Unôy
.
CuºítTe°Ign‹ed
 = 0;

394 
	`UNITY_PRINT_EOL
();

395 
	`UNITY_FLUSH_CALL
();

396 
	}
}

399 
	$UnôyAddMsgIfS≥cifõd
(c⁄° * 
msg
)

401 i‡(
msg
)

403 
	`UnôyPröt
(
UnôySåS∑˚r
);

404 #i‚de‡
UNITY_EXCLUDE_DETAILS


405 i‡(
Unôy
.
CuºítDëaû1
)

407 
	`UnôyPröt
(
UnôySåDëaû1Name
);

408 
	`UnôyPröt
(
Unôy
.
CuºítDëaû1
);

409 i‡(
Unôy
.
CuºítDëaû2
)

411 
	`UnôyPröt
(
UnôySåDëaû2Name
);

412 
	`UnôyPröt
(
Unôy
.
CuºítDëaû2
);

414 
	`UnôyPröt
(
UnôySåS∑˚r
);

417 
	`UnôyPröt
(
msg
);

419 
	}
}

422 
	$UnôyPrötEx≥˘edAndA˘uÆSåögs
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
)

424 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

425 i‡(
ex≥˘ed
 !
NULL
)

427 
	`UNITY_OUTPUT_CHAR
('\'');

428 
	`UnôyPröt
(
ex≥˘ed
);

429 
	`UNITY_OUTPUT_CHAR
('\'');

433 
	`UnôyPröt
(
UnôySåNuŒ
);

435 
	`UnôyPröt
(
UnôySåWas
);

436 i‡(
a˘uÆ
 !
NULL
)

438 
	`UNITY_OUTPUT_CHAR
('\'');

439 
	`UnôyPröt
(
a˘uÆ
);

440 
	`UNITY_OUTPUT_CHAR
('\'');

444 
	`UnôyPröt
(
UnôySåNuŒ
);

446 
	}
}

449 
	$UnôyPrötEx≥˘edAndA˘uÆSåögsLí
(c⁄° * 
ex≥˘ed
,

450 c⁄° * 
a˘uÆ
,

451 c⁄° 
UNITY_UINT32
 
Àngth
)

453 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

454 i‡(
ex≥˘ed
 !
NULL
)

456 
	`UNITY_OUTPUT_CHAR
('\'');

457 
	`UnôyPrötLí
(
ex≥˘ed
, 
Àngth
);

458 
	`UNITY_OUTPUT_CHAR
('\'');

462 
	`UnôyPröt
(
UnôySåNuŒ
);

464 
	`UnôyPröt
(
UnôySåWas
);

465 i‡(
a˘uÆ
 !
NULL
)

467 
	`UNITY_OUTPUT_CHAR
('\'');

468 
	`UnôyPrötLí
(
a˘uÆ
, 
Àngth
);

469 
	`UNITY_OUTPUT_CHAR
('\'');

473 
	`UnôyPröt
(
UnôySåNuŒ
);

475 
	}
}

481 
	$UnôyIsO√AºayNuŒ
(
UNITY_INTERNAL_PTR
 
ex≥˘ed
,

482 
UNITY_INTERNAL_PTR
 
a˘uÆ
,

483 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

484 c⁄° * 
msg
)

486 i‡(
ex≥˘ed
 =
a˘uÆ
)  0;

489 i‡(
ex≥˘ed
 =
NULL
)

491 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

492 
	`UnôyPröt
(
UnôySåNuŒPoöãrF‹Ex≥˘ed
);

493 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

498 i‡(
a˘uÆ
 =
NULL
)

500 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

501 
	`UnôyPröt
(
UnôySåNuŒPoöãrF‹A˘uÆ
);

502 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

507 
	}
}

513 
	$UnôyAs£πBôs
(c⁄° 
UNITY_INT
 
mask
,

514 c⁄° 
UNITY_INT
 
ex≥˘ed
,

515 c⁄° 
UNITY_INT
 
a˘uÆ
,

516 c⁄° * 
msg
,

517 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
)

519 
RETURN_IF_FAIL_OR_IGNORE
;

521 i‡((
mask
 & 
ex≥˘ed
Ë!(mask & 
a˘uÆ
))

523 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

524 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

525 
	`UnôyPrötMask
((
UNITY_UINT
)
mask
, (UNITY_UINT)
ex≥˘ed
);

526 
	`UnôyPröt
(
UnôySåWas
);

527 
	`UnôyPrötMask
((
UNITY_UINT
)
mask
, (UNITY_UINT)
a˘uÆ
);

528 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

529 
UNITY_FAIL_AND_BAIL
;

531 
	}
}

534 
	$UnôyAs£πEquÆNumbî
(c⁄° 
UNITY_INT
 
ex≥˘ed
,

535 c⁄° 
UNITY_INT
 
a˘uÆ
,

536 c⁄° * 
msg
,

537 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

538 c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
)

540 
RETURN_IF_FAIL_OR_IGNORE
;

542 i‡(
ex≥˘ed
 !
a˘uÆ
)

544 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

545 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

546 
	`UnôyPrötNumbîByStyÀ
(
ex≥˘ed
, 
°yÀ
);

547 
	`UnôyPröt
(
UnôySåWas
);

548 
	`UnôyPrötNumbîByStyÀ
(
a˘uÆ
, 
°yÀ
);

549 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

550 
UNITY_FAIL_AND_BAIL
;

552 
	}
}

555 
	$UnôyAs£πGª©îOrLessOrEquÆNumbî
(c⁄° 
UNITY_INT
 
thªshﬁd
,

556 c⁄° 
UNITY_INT
 
a˘uÆ
,

557 c⁄° 
UNITY_COMPARISON_T
 
com∑ª
,

558 c⁄° *
msg
,

559 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

560 c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
)

562 
Áûed
 = 0;

563 
RETURN_IF_FAIL_OR_IGNORE
;

565 i‡(
thªshﬁd
 =
a˘uÆ
 && 
com∑ª
 & 
UNITY_EQUAL_TO
) ;

566 i‡(
thªshﬁd
 =
a˘uÆ
Ë
Áûed
 = 1;

568 i‡((
°yÀ
 & 
UNITY_DISPLAY_RANGE_INT
) == UNITY_DISPLAY_RANGE_INT)

570 i‡(
a˘uÆ
 > 
thªshﬁd
 && 
com∑ª
 & 
UNITY_SMALLER_THAN
Ë
Áûed
 = 1;

571 i‡(
a˘uÆ
 < 
thªshﬁd
 && 
com∑ª
 & 
UNITY_GREATER_THAN
Ë
Áûed
 = 1;

575 i‡((
UNITY_UINT
)
a˘uÆ
 > (UNITY_UINT)
thªshﬁd
 && 
com∑ª
 & 
UNITY_SMALLER_THAN
Ë
Áûed
 = 1;

576 i‡((
UNITY_UINT
)
a˘uÆ
 < (UNITY_UINT)
thªshﬁd
 && 
com∑ª
 & 
UNITY_GREATER_THAN
Ë
Áûed
 = 1;

579 i‡(
Áûed
)

581 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

582 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

583 
	`UnôyPrötNumbîByStyÀ
(
a˘uÆ
, 
°yÀ
);

584 i‡(
com∑ª
 & 
UNITY_GREATER_THAN
Ë
	`UnôyPröt
(
UnôySåGt
);

585 i‡(
com∑ª
 & 
UNITY_SMALLER_THAN
Ë
	`UnôyPröt
(
UnôySåLt
);

586 i‡(
com∑ª
 & 
UNITY_EQUAL_TO
Ë
	`UnôyPröt
(
UnôySåOrEquÆ
);

587 
	`UnôyPrötNumbîByStyÀ
(
thªshﬁd
, 
°yÀ
);

588 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

589 
UNITY_FAIL_AND_BAIL
;

591 
	}
}

593 
	#UnôyPrötPoöéessAndBaû
() \

595 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
); \

596 
	`UnôyPröt
(
UnôySåPoöéess
); \

597 
	`UnôyAddMsgIfS≥cifõd
(
msg
); \

598 
UNITY_FAIL_AND_BAIL
; }

	)

601 
	$UnôyAs£πEquÆI¡Aºay
(
UNITY_INTERNAL_PTR
 
ex≥˘ed
,

602 
UNITY_INTERNAL_PTR
 
a˘uÆ
,

603 c⁄° 
UNITY_UINT32
 
num_ñemíts
,

604 c⁄° * 
msg
,

605 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

606 c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
,

607 c⁄° 
UNITY_FLAGS_T
 
Êags
)

609 
UNITY_UINT32
 
ñemíts
 = 
num_ñemíts
;

610 
Àngth
 = 
°yÀ
 & 0xF;

612 
RETURN_IF_FAIL_OR_IGNORE
;

614 i‡(
num_ñemíts
 == 0)

616 
	`UnôyPrötPoöéessAndBaû
();

619 i‡(
ex≥˘ed
 =
a˘uÆ
) ;

620 i‡(
	`UnôyIsO√AºayNuŒ
(
ex≥˘ed
, 
a˘uÆ
, 
löeNumbî
, 
msg
))

621 
UNITY_FAIL_AND_BAIL
;

623 
ñemíts
--)

625 
UNITY_INT
 
ex≥˘_vÆ
;

626 
UNITY_INT
 
a˘uÆ_vÆ
;

627 
Àngth
)

630 
ex≥˘_vÆ
 = *(
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_INT8
*)
ex≥˘ed
;

631 
a˘uÆ_vÆ
 = *(
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_INT8
*)
a˘uÆ
;

634 
ex≥˘_vÆ
 = *(
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_INT16
*)
ex≥˘ed
;

635 
a˘uÆ_vÆ
 = *(
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_INT16
*)
a˘uÆ
;

637 #ifde‡
UNITY_SUPPORT_64


639 
ex≥˘_vÆ
 = *(
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_INT64
*)
ex≥˘ed
;

640 
a˘uÆ_vÆ
 = *(
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_INT64
*)
a˘uÆ
;

644 
ex≥˘_vÆ
 = *(
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_INT32
*)
ex≥˘ed
;

645 
a˘uÆ_vÆ
 = *(
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_INT32
*)
a˘uÆ
;

646 
Àngth
 = 4;

650 i‡(
ex≥˘_vÆ
 !
a˘uÆ_vÆ
)

652 i‡(
°yÀ
 & 
UNITY_DISPLAY_RANGE_UINT
 && 
Àngth
 < (
ex≥˘_vÆ
))

654 
UNITY_INT
 
mask
 = 1;

655 
mask
 = (mask << 8 * 
Àngth
) - 1;

656 
ex≥˘_vÆ
 &
mask
;

657 
a˘uÆ_vÆ
 &
mask
;

659 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

660 
	`UnôyPröt
(
UnôySåEÀmít
);

661 
	`UnôyPrötNumbîUnsig√d
(
num_ñemíts
 - 
ñemíts
 - 1);

662 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

663 
	`UnôyPrötNumbîByStyÀ
(
ex≥˘_vÆ
, 
°yÀ
);

664 
	`UnôyPröt
(
UnôySåWas
);

665 
	`UnôyPrötNumbîByStyÀ
(
a˘uÆ_vÆ
, 
°yÀ
);

666 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

667 
UNITY_FAIL_AND_BAIL
;

669 i‡(
Êags
 =
UNITY_ARRAY_TO_ARRAY
)

671 
ex≥˘ed
 = (
UNITY_INTERNAL_PTR
)(
Àngth
 + (const *)expected);

673 
a˘uÆ
 = (
UNITY_INTERNAL_PTR
)(
Àngth
 + (const *)actual);

675 
	}
}

678 #i‚de‡
UNITY_EXCLUDE_FLOAT


680 
	#UNITY_FLOAT_OR_DOUBLE_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
diff
) \

681 i‡(
	`isöf
(
ex≥˘ed
Ë&& isöf(
a˘uÆ
) && ((expected < 0) == (actual < 0)))  1; \

682 i‡(
UNITY_NAN_CHECK
)  1; \

683 
diff
 = 
a˘uÆ
 - 
ex≥˘ed
; \

684 i‡(
diff
 < 0) diff = -diff; \

685 i‡(
dñè
 < 0) delta = -delta; \

686  !(
	`i¢™
(
diff
Ë|| 
	`isöf
(diffË|| (dif‡> 
dñè
))

	)

688 #i‚de‡
UNITY_NAN_NOT_EQUAL_NAN


689 
	#UNITY_NAN_CHECK
 
	`i¢™
(
ex≥˘ed
Ë&& i¢™(
a˘uÆ
)

	)

691 
	#UNITY_NAN_CHECK
 0

	)

694 #i‚de‡
UNITY_EXCLUDE_FLOAT_PRINT


695 
	#UNITY_PRINT_EXPECTED_AND_ACTUAL_FLOAT
(
ex≥˘ed
, 
a˘uÆ
) \

697 
	`UnôyPröt
(
UnôySåEx≥˘ed
); \

698 
	`UnôyPrötFlﬂt
(
ex≥˘ed
); \

699 
	`UnôyPröt
(
UnôySåWas
); \

700 
	`UnôyPrötFlﬂt
(
a˘uÆ
); }

	)

702 
	#UNITY_PRINT_EXPECTED_AND_ACTUAL_FLOAT
(
ex≥˘ed
, 
a˘uÆ
) \

703 
	`UnôyPröt
(
UnôySåDñè
)

	)

706 
	$UnôyFlﬂtsWôhö
(
UNITY_FLOAT
 
dñè
, UNITY_FLOAT 
ex≥˘ed
, UNITY_FLOAT 
a˘uÆ
)

708 
UNITY_FLOAT
 
diff
;

709 
	`UNITY_FLOAT_OR_DOUBLE_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
diff
);

710 
	}
}

712 
	$UnôyAs£πEquÆFlﬂtAºay
(
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_FLOAT
* 
ex≥˘ed
,

713 
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_FLOAT
* 
a˘uÆ
,

714 c⁄° 
UNITY_UINT32
 
num_ñemíts
,

715 c⁄° * 
msg
,

716 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

717 c⁄° 
UNITY_FLAGS_T
 
Êags
)

719 
UNITY_UINT32
 
ñemíts
 = 
num_ñemíts
;

720 
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_FLOAT
* 
±r_ex≥˘ed
 = 
ex≥˘ed
;

721 
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_FLOAT
* 
±r_a˘uÆ
 = 
a˘uÆ
;

723 
RETURN_IF_FAIL_OR_IGNORE
;

725 i‡(
ñemíts
 == 0)

727 
	`UnôyPrötPoöéessAndBaû
();

730 i‡(
ex≥˘ed
 =
a˘uÆ
) ;

731 i‡(
	`UnôyIsO√AºayNuŒ
((
UNITY_INTERNAL_PTR
)
ex≥˘ed
, (UNITY_INTERNAL_PTR)
a˘uÆ
, 
löeNumbî
, 
msg
))

732 
UNITY_FAIL_AND_BAIL
;

734 
ñemíts
--)

736 i‡(!
	`UnôyFlﬂtsWôhö
(*
±r_ex≥˘ed
 * 
UNITY_FLOAT_PRECISION
, *±r_ex≥˘ed, *
±r_a˘uÆ
))

738 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

739 
	`UnôyPröt
(
UnôySåEÀmít
);

740 
	`UnôyPrötNumbîUnsig√d
(
num_ñemíts
 - 
ñemíts
 - 1);

741 
	`UNITY_PRINT_EXPECTED_AND_ACTUAL_FLOAT
((
UNITY_DOUBLE
)*
±r_ex≥˘ed
, (UNITY_DOUBLE)*
±r_a˘uÆ
);

742 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

743 
UNITY_FAIL_AND_BAIL
;

745 i‡(
Êags
 =
UNITY_ARRAY_TO_ARRAY
)

747 
±r_ex≥˘ed
++;

749 
±r_a˘uÆ
++;

751 
	}
}

754 
	$UnôyAs£πFlﬂtsWôhö
(c⁄° 
UNITY_FLOAT
 
dñè
,

755 c⁄° 
UNITY_FLOAT
 
ex≥˘ed
,

756 c⁄° 
UNITY_FLOAT
 
a˘uÆ
,

757 c⁄° * 
msg
,

758 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
)

760 
RETURN_IF_FAIL_OR_IGNORE
;

763 i‡(!
	`UnôyFlﬂtsWôhö
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
))

765 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

766 
	`UNITY_PRINT_EXPECTED_AND_ACTUAL_FLOAT
((
UNITY_DOUBLE
)
ex≥˘ed
, (UNITY_DOUBLE)
a˘uÆ
);

767 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

768 
UNITY_FAIL_AND_BAIL
;

770 
	}
}

773 
	$UnôyAs£πFlﬂtS≥cül
(c⁄° 
UNITY_FLOAT
 
a˘uÆ
,

774 c⁄° * 
msg
,

775 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

776 c⁄° 
UNITY_FLOAT_TRAIT_T
 
°yÀ
)

778 c⁄° * 
åaô_«mes
[] = {
UnôySåInf
, 
UnôySåNegInf
, 
UnôySåNaN
, 
UnôySåDë
};

779 
UNITY_INT
 
should_be_åaô
 = ((UNITY_INT)
°yÀ
 & 1);

780 
UNITY_INT
 
is_åaô
 = !
should_be_åaô
;

781 
UNITY_INT
 
åaô_ödex
 = (UNITY_INT)(
°yÀ
 >> 1);

783 
RETURN_IF_FAIL_OR_IGNORE
;

785 
°yÀ
)

787 
UNITY_FLOAT_IS_INF
:

788 
UNITY_FLOAT_IS_NOT_INF
:

789 
is_åaô
 = 
	`isöf
(
a˘uÆ
) && (actual > 0);

791 
UNITY_FLOAT_IS_NEG_INF
:

792 
UNITY_FLOAT_IS_NOT_NEG_INF
:

793 
is_åaô
 = 
	`isöf
(
a˘uÆ
) && (actual < 0);

796 
UNITY_FLOAT_IS_NAN
:

797 
UNITY_FLOAT_IS_NOT_NAN
:

798 
is_åaô
 = 
	`i¢™
(
a˘uÆ
) ? 1 : 0;

801 
UNITY_FLOAT_IS_DET
:

802 
UNITY_FLOAT_IS_NOT_DET
:

803 
is_åaô
 = !
	`isöf
(
a˘uÆ
Ë&& !
	`i¢™
(actual);

807 
åaô_ödex
 = 0;

808 
åaô_«mes
[0] = 
UnôySåInvÆidFlﬂtTøô
;

812 i‡(
is_åaô
 !
should_be_åaô
)

814 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

815 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

816 i‡(!
should_be_åaô
)

817 
	`UnôyPröt
(
UnôySåNŸ
);

818 
	`UnôyPröt
(
åaô_«mes
[
åaô_ödex
]);

819 
	`UnôyPröt
(
UnôySåWas
);

820 #i‚de‡
UNITY_EXCLUDE_FLOAT_PRINT


821 
	`UnôyPrötFlﬂt
((
UNITY_DOUBLE
)
a˘uÆ
);

823 i‡(
should_be_åaô
)

824 
	`UnôyPröt
(
UnôySåNŸ
);

825 
	`UnôyPröt
(
åaô_«mes
[
åaô_ödex
]);

827 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

828 
UNITY_FAIL_AND_BAIL
;

830 
	}
}

835 #i‚de‡
UNITY_EXCLUDE_DOUBLE


836 
	$UnôyDoubÀsWôhö
(
UNITY_DOUBLE
 
dñè
, UNITY_DOUBLE 
ex≥˘ed
, UNITY_DOUBLE 
a˘uÆ
)

838 
UNITY_DOUBLE
 
diff
;

839 
	`UNITY_FLOAT_OR_DOUBLE_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
diff
);

840 
	}
}

842 
	$UnôyAs£πEquÆDoubÀAºay
(
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_DOUBLE
* 
ex≥˘ed
,

843 
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_DOUBLE
* 
a˘uÆ
,

844 c⁄° 
UNITY_UINT32
 
num_ñemíts
,

845 c⁄° * 
msg
,

846 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

847 c⁄° 
UNITY_FLAGS_T
 
Êags
)

849 
UNITY_UINT32
 
ñemíts
 = 
num_ñemíts
;

850 
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_DOUBLE
* 
±r_ex≥˘ed
 = 
ex≥˘ed
;

851 
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_DOUBLE
* 
±r_a˘uÆ
 = 
a˘uÆ
;

853 
RETURN_IF_FAIL_OR_IGNORE
;

855 i‡(
ñemíts
 == 0)

857 
	`UnôyPrötPoöéessAndBaû
();

860 i‡(
ex≥˘ed
 =
a˘uÆ
) ;

861 i‡(
	`UnôyIsO√AºayNuŒ
((
UNITY_INTERNAL_PTR
)
ex≥˘ed
, (UNITY_INTERNAL_PTR)
a˘uÆ
, 
löeNumbî
, 
msg
))

862 
UNITY_FAIL_AND_BAIL
;

864 
ñemíts
--)

866 i‡(!
	`UnôyDoubÀsWôhö
(*
±r_ex≥˘ed
 * 
UNITY_DOUBLE_PRECISION
, *±r_ex≥˘ed, *
±r_a˘uÆ
))

868 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

869 
	`UnôyPröt
(
UnôySåEÀmít
);

870 
	`UnôyPrötNumbîUnsig√d
(
num_ñemíts
 - 
ñemíts
 - 1);

871 
	`UNITY_PRINT_EXPECTED_AND_ACTUAL_FLOAT
(*
±r_ex≥˘ed
, *
±r_a˘uÆ
);

872 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

873 
UNITY_FAIL_AND_BAIL
;

875 i‡(
Êags
 =
UNITY_ARRAY_TO_ARRAY
)

877 
±r_ex≥˘ed
++;

879 
±r_a˘uÆ
++;

881 
	}
}

884 
	$UnôyAs£πDoubÀsWôhö
(c⁄° 
UNITY_DOUBLE
 
dñè
,

885 c⁄° 
UNITY_DOUBLE
 
ex≥˘ed
,

886 c⁄° 
UNITY_DOUBLE
 
a˘uÆ
,

887 c⁄° * 
msg
,

888 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
)

890 
RETURN_IF_FAIL_OR_IGNORE
;

892 i‡(!
	`UnôyDoubÀsWôhö
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
))

894 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

895 
	`UNITY_PRINT_EXPECTED_AND_ACTUAL_FLOAT
(
ex≥˘ed
, 
a˘uÆ
);

896 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

897 
UNITY_FAIL_AND_BAIL
;

899 
	}
}

903 
	$UnôyAs£πDoubÀS≥cül
(c⁄° 
UNITY_DOUBLE
 
a˘uÆ
,

904 c⁄° * 
msg
,

905 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

906 c⁄° 
UNITY_FLOAT_TRAIT_T
 
°yÀ
)

908 c⁄° * 
åaô_«mes
[] = {
UnôySåInf
, 
UnôySåNegInf
, 
UnôySåNaN
, 
UnôySåDë
};

909 
UNITY_INT
 
should_be_åaô
 = ((UNITY_INT)
°yÀ
 & 1);

910 
UNITY_INT
 
is_åaô
 = !
should_be_åaô
;

911 
UNITY_INT
 
åaô_ödex
 = (UNITY_INT)(
°yÀ
 >> 1);

913 
RETURN_IF_FAIL_OR_IGNORE
;

915 
°yÀ
)

917 
UNITY_FLOAT_IS_INF
:

918 
UNITY_FLOAT_IS_NOT_INF
:

919 
is_åaô
 = 
	`isöf
(
a˘uÆ
) && (actual > 0);

921 
UNITY_FLOAT_IS_NEG_INF
:

922 
UNITY_FLOAT_IS_NOT_NEG_INF
:

923 
is_åaô
 = 
	`isöf
(
a˘uÆ
) && (actual < 0);

926 
UNITY_FLOAT_IS_NAN
:

927 
UNITY_FLOAT_IS_NOT_NAN
:

928 
is_åaô
 = 
	`i¢™
(
a˘uÆ
) ? 1 : 0;

931 
UNITY_FLOAT_IS_DET
:

932 
UNITY_FLOAT_IS_NOT_DET
:

933 
is_åaô
 = !
	`isöf
(
a˘uÆ
Ë&& !
	`i¢™
(actual);

937 
åaô_ödex
 = 0;

938 
åaô_«mes
[0] = 
UnôySåInvÆidFlﬂtTøô
;

942 i‡(
is_åaô
 !
should_be_åaô
)

944 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

945 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

946 i‡(!
should_be_åaô
)

947 
	`UnôyPröt
(
UnôySåNŸ
);

948 
	`UnôyPröt
(
åaô_«mes
[
åaô_ödex
]);

949 
	`UnôyPröt
(
UnôySåWas
);

950 #i‚de‡
UNITY_EXCLUDE_FLOAT_PRINT


951 
	`UnôyPrötFlﬂt
(
a˘uÆ
);

953 i‡(
should_be_åaô
)

954 
	`UnôyPröt
(
UnôySåNŸ
);

955 
	`UnôyPröt
(
åaô_«mes
[
åaô_ödex
]);

957 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

958 
UNITY_FAIL_AND_BAIL
;

960 
	}
}

965 
	$UnôyAs£πNumbîsWôhö
(c⁄° 
UNITY_UINT
 
dñè
,

966 c⁄° 
UNITY_INT
 
ex≥˘ed
,

967 c⁄° 
UNITY_INT
 
a˘uÆ
,

968 c⁄° * 
msg
,

969 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

970 c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
)

972 
RETURN_IF_FAIL_OR_IGNORE
;

974 i‡((
°yÀ
 & 
UNITY_DISPLAY_RANGE_INT
) == UNITY_DISPLAY_RANGE_INT)

976 i‡(
a˘uÆ
 > 
ex≥˘ed
)

977 
Unôy
.
CuºítTe°Faûed
 = (
UNITY_UINT
)((UNITY_UINT)(
a˘uÆ
 - 
ex≥˘ed
Ë> 
dñè
);

979 
Unôy
.
CuºítTe°Faûed
 = (
UNITY_UINT
)((UNITY_UINT)(
ex≥˘ed
 - 
a˘uÆ
Ë> 
dñè
);

983 i‡((
UNITY_UINT
)
a˘uÆ
 > (UNITY_UINT)
ex≥˘ed
)

984 
Unôy
.
CuºítTe°Faûed
 = (
UNITY_UINT
)((UNITY_UINT)(
a˘uÆ
 - 
ex≥˘ed
Ë> 
dñè
);

986 
Unôy
.
CuºítTe°Faûed
 = (
UNITY_UINT
)((UNITY_UINT)(
ex≥˘ed
 - 
a˘uÆ
Ë> 
dñè
);

989 i‡(
Unôy
.
CuºítTe°Faûed
)

991 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

992 
	`UnôyPröt
(
UnôySåDñè
);

993 
	`UnôyPrötNumbîByStyÀ
((
UNITY_INT
)
dñè
, 
°yÀ
);

994 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

995 
	`UnôyPrötNumbîByStyÀ
(
ex≥˘ed
, 
°yÀ
);

996 
	`UnôyPröt
(
UnôySåWas
);

997 
	`UnôyPrötNumbîByStyÀ
(
a˘uÆ
, 
°yÀ
);

998 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

999 
UNITY_FAIL_AND_BAIL
;

1001 
	}
}

1004 
	$UnôyAs£πEquÆSåög
(c⁄° * 
ex≥˘ed
,

1005 c⁄° * 
a˘uÆ
,

1006 c⁄° * 
msg
,

1007 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
)

1009 
UNITY_UINT32
 
i
;

1011 
RETURN_IF_FAIL_OR_IGNORE
;

1014 i‡(
ex≥˘ed
 && 
a˘uÆ
)

1016 
i
 = 0; 
ex≥˘ed
[i] || 
a˘uÆ
[i]; i++)

1018 i‡(
ex≥˘ed
[
i
] !
a˘uÆ
[i])

1020 
Unôy
.
CuºítTe°Faûed
 = 1;

1027 i‡(
ex≥˘ed
 !
a˘uÆ
)

1029 
Unôy
.
CuºítTe°Faûed
 = 1;

1033 i‡(
Unôy
.
CuºítTe°Faûed
)

1035 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

1036 
	`UnôyPrötEx≥˘edAndA˘uÆSåögs
(
ex≥˘ed
, 
a˘uÆ
);

1037 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

1038 
UNITY_FAIL_AND_BAIL
;

1040 
	}
}

1043 
	$UnôyAs£πEquÆSåögLí
(c⁄° * 
ex≥˘ed
,

1044 c⁄° * 
a˘uÆ
,

1045 c⁄° 
UNITY_UINT32
 
Àngth
,

1046 c⁄° * 
msg
,

1047 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
)

1049 
UNITY_UINT32
 
i
;

1051 
RETURN_IF_FAIL_OR_IGNORE
;

1054 i‡(
ex≥˘ed
 && 
a˘uÆ
)

1056 
i
 = 0; (ò< 
Àngth
Ë&& (
ex≥˘ed
[i] || 
a˘uÆ
[i]); i++)

1058 i‡(
ex≥˘ed
[
i
] !
a˘uÆ
[i])

1060 
Unôy
.
CuºítTe°Faûed
 = 1;

1067 i‡(
ex≥˘ed
 !
a˘uÆ
)

1069 
Unôy
.
CuºítTe°Faûed
 = 1;

1073 i‡(
Unôy
.
CuºítTe°Faûed
)

1075 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

1076 
	`UnôyPrötEx≥˘edAndA˘uÆSåögsLí
(
ex≥˘ed
, 
a˘uÆ
, 
Àngth
);

1077 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

1078 
UNITY_FAIL_AND_BAIL
;

1080 
	}
}

1083 
	$UnôyAs£πEquÆSåögAºay
(
UNITY_INTERNAL_PTR
 
ex≥˘ed
,

1084 c⁄° ** 
a˘uÆ
,

1085 c⁄° 
UNITY_UINT32
 
num_ñemíts
,

1086 c⁄° * 
msg
,

1087 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

1088 c⁄° 
UNITY_FLAGS_T
 
Êags
)

1090 
UNITY_UINT32
 
i
 = 0;

1091 
UNITY_UINT32
 
j
 = 0;

1092 c⁄° * 
expd
 = 
NULL
;

1093 c⁄° * 
a˘
 = 
NULL
;

1095 
RETURN_IF_FAIL_OR_IGNORE
;

1098 i‡(
num_ñemíts
 == 0)

1100 
	`UnôyPrötPoöéessAndBaû
();

1103 i‡((c⁄° *)
ex≥˘ed
 =(c⁄° *)
a˘uÆ
)

1108 i‡(
	`UnôyIsO√AºayNuŒ
((
UNITY_INTERNAL_PTR
)
ex≥˘ed
, (UNITY_INTERNAL_PTR)
a˘uÆ
, 
löeNumbî
, 
msg
))

1110 
UNITY_FAIL_AND_BAIL
;

1113 i‡(
Êags
 !
UNITY_ARRAY_TO_ARRAY
)

1115 
expd
 = (c⁄° *)
ex≥˘ed
;

1120 
a˘
 = 
a˘uÆ
[
j
];

1121 i‡(
Êags
 =
UNITY_ARRAY_TO_ARRAY
)

1123 
expd
 = ((c⁄° * c⁄°*)
ex≥˘ed
)[
j
];

1127 i‡(
expd
 && 
a˘
)

1129 
i
 = 0; 
expd
[i] || 
a˘
[i]; i++)

1131 i‡(
expd
[
i
] !
a˘
[i])

1133 
Unôy
.
CuºítTe°Faûed
 = 1;

1140 i‡(
expd
 !
a˘
)

1142 
Unôy
.
CuºítTe°Faûed
 = 1;

1146 i‡(
Unôy
.
CuºítTe°Faûed
)

1148 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

1149 i‡(
num_ñemíts
 > 1)

1151 
	`UnôyPröt
(
UnôySåEÀmít
);

1152 
	`UnôyPrötNumbîUnsig√d
(
j
);

1154 
	`UnôyPrötEx≥˘edAndA˘uÆSåögs
(
expd
, 
a˘
);

1155 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

1156 
UNITY_FAIL_AND_BAIL
;

1158 } ++
j
 < 
num_ñemíts
);

1159 
	}
}

1162 
	$UnôyAs£πEquÆMem‹y
(
UNITY_INTERNAL_PTR
 
ex≥˘ed
,

1163 
UNITY_INTERNAL_PTR
 
a˘uÆ
,

1164 c⁄° 
UNITY_UINT32
 
Àngth
,

1165 c⁄° 
UNITY_UINT32
 
num_ñemíts
,

1166 c⁄° * 
msg
,

1167 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

1168 c⁄° 
UNITY_FLAGS_T
 
Êags
)

1170 
UNITY_PTR_ATTRIBUTE
 c⁄° * 
±r_exp
 = (UNITY_PTR_ATTRIBUTE c⁄° *)
ex≥˘ed
;

1171 
UNITY_PTR_ATTRIBUTE
 c⁄° * 
±r_a˘
 = (UNITY_PTR_ATTRIBUTE c⁄° *)
a˘uÆ
;

1172 
UNITY_UINT32
 
ñemíts
 = 
num_ñemíts
;

1173 
UNITY_UINT32
 
byãs
;

1175 
RETURN_IF_FAIL_OR_IGNORE
;

1177 i‡((
ñemíts
 =0Ë|| (
Àngth
 == 0))

1179 
	`UnôyPrötPoöéessAndBaû
();

1182 i‡(
ex≥˘ed
 =
a˘uÆ
) ;

1183 i‡(
	`UnôyIsO√AºayNuŒ
(
ex≥˘ed
, 
a˘uÆ
, 
löeNumbî
, 
msg
))

1184 
UNITY_FAIL_AND_BAIL
;

1186 
ñemíts
--)

1188 
byãs
 = 
Àngth
;

1189 
byãs
--)

1191 i‡(*
±r_exp
 !*
±r_a˘
)

1193 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

1194 
	`UnôyPröt
(
UnôySåMem‹y
);

1195 i‡(
num_ñemíts
 > 1)

1197 
	`UnôyPröt
(
UnôySåEÀmít
);

1198 
	`UnôyPrötNumbîUnsig√d
(
num_ñemíts
 - 
ñemíts
 - 1);

1200 
	`UnôyPröt
(
UnôySåByã
);

1201 
	`UnôyPrötNumbîUnsig√d
(
Àngth
 - 
byãs
 - 1);

1202 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

1203 
	`UnôyPrötNumbîByStyÀ
(*
±r_exp
, 
UNITY_DISPLAY_STYLE_HEX8
);

1204 
	`UnôyPröt
(
UnôySåWas
);

1205 
	`UnôyPrötNumbîByStyÀ
(*
±r_a˘
, 
UNITY_DISPLAY_STYLE_HEX8
);

1206 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

1207 
UNITY_FAIL_AND_BAIL
;

1209 
±r_exp
++;

1210 
±r_a˘
++;

1212 i‡(
Êags
 =
UNITY_ARRAY_TO_VAL
)

1214 
±r_exp
 = (
UNITY_PTR_ATTRIBUTE
 c⁄° *)
ex≥˘ed
;

1217 
	}
}

1223 
UNITY_INT8
 
	mi8
;

1224 
UNITY_INT16
 
	mi16
;

1225 
UNITY_INT32
 
	mi32
;

1226 #ifde‡
UNITY_SUPPORT_64


1227 
UNITY_INT64
 
	mi64
;

1229 #i‚de‡
UNITY_EXCLUDE_FLOAT


1230 
	mf
;

1232 #i‚de‡
UNITY_EXCLUDE_DOUBLE


1233 
	md
;

1235 } 
	gUnôyQuickCom∑ª
;

1237 
UNITY_INTERNAL_PTR
 
	$UnôyNumToPå
(c⁄° 
UNITY_INT
 
num
, c⁄° 
UNITY_UINT8
 
size
)

1239 
size
)

1242 
UnôyQuickCom∑ª
.
i8
 = (
UNITY_INT8
)
num
;

1243  (
UNITY_INTERNAL_PTR
)(&
UnôyQuickCom∑ª
.
i8
);

1246 
UnôyQuickCom∑ª
.
i16
 = (
UNITY_INT16
)
num
;

1247  (
UNITY_INTERNAL_PTR
)(&
UnôyQuickCom∑ª
.
i16
);

1249 #ifde‡
UNITY_SUPPORT_64


1251 
UnôyQuickCom∑ª
.
i64
 = (
UNITY_INT64
)
num
;

1252  (
UNITY_INTERNAL_PTR
)(&
UnôyQuickCom∑ª
.
i64
);

1255 
UnôyQuickCom∑ª
.
i32
 = (
UNITY_INT32
)
num
;

1256  (
UNITY_INTERNAL_PTR
)(&
UnôyQuickCom∑ª
.
i32
);

1258 
	}
}

1260 #i‚de‡
UNITY_EXCLUDE_FLOAT


1261 
UNITY_INTERNAL_PTR
 
	$UnôyFlﬂtToPå
(c⁄° 
num
)

1263 
UnôyQuickCom∑ª
.
f
 = 
num
;

1264  (
UNITY_INTERNAL_PTR
)(&
UnôyQuickCom∑ª
.
f
);

1265 
	}
}

1268 #i‚de‡
UNITY_EXCLUDE_DOUBLE


1269 
UNITY_INTERNAL_PTR
 
	$UnôyDoubÀToPå
(c⁄° 
num
)

1271 
UnôyQuickCom∑ª
.
d
 = 
num
;

1272  (
UNITY_INTERNAL_PTR
)(&
UnôyQuickCom∑ª
.
d
);

1273 
	}
}

1280 
	$UnôyFaû
(c⁄° * 
msg
, c⁄° 
UNITY_LINE_TYPE
 
löe
)

1282 
RETURN_IF_FAIL_OR_IGNORE
;

1284 
	`UnôyTe°Resu…sBegö
(
Unôy
.
Te°Fûe
, 
löe
);

1285 
	`UnôyPröt
(
UnôySåFaû
);

1286 i‡(
msg
 !
NULL
)

1288 
	`UNITY_OUTPUT_CHAR
(':');

1290 #i‚de‡
UNITY_EXCLUDE_DETAILS


1291 i‡(
Unôy
.
CuºítDëaû1
)

1293 
	`UnôyPröt
(
UnôySåDëaû1Name
);

1294 
	`UnôyPröt
(
Unôy
.
CuºítDëaû1
);

1295 i‡(
Unôy
.
CuºítDëaû2
)

1297 
	`UnôyPröt
(
UnôySåDëaû2Name
);

1298 
	`UnôyPröt
(
Unôy
.
CuºítDëaû2
);

1300 
	`UnôyPröt
(
UnôySåS∑˚r
);

1303 i‡(
msg
[0] != ' ')

1305 
	`UNITY_OUTPUT_CHAR
(' ');

1307 
	`UnôyPröt
(
msg
);

1310 
UNITY_FAIL_AND_BAIL
;

1311 
	}
}

1314 
	$UnôyIgn‹e
(c⁄° * 
msg
, c⁄° 
UNITY_LINE_TYPE
 
löe
)

1316 
RETURN_IF_FAIL_OR_IGNORE
;

1318 
	`UnôyTe°Resu…sBegö
(
Unôy
.
Te°Fûe
, 
löe
);

1319 
	`UnôyPröt
(
UnôySåIgn‹e
);

1320 i‡(
msg
 !
NULL
)

1322 
	`UNITY_OUTPUT_CHAR
(':');

1323 
	`UNITY_OUTPUT_CHAR
(' ');

1324 
	`UnôyPröt
(
msg
);

1326 
UNITY_IGNORE_AND_BAIL
;

1327 
	}
}

1330 
	$UnôyDeÁu…Te°Run
(
UnôyTe°Fun˘i⁄
 
Func
, c⁄° * 
FuncName
, c⁄° 
FuncLöeNum
)

1332 
Unôy
.
CuºítTe°Name
 = 
FuncName
;

1333 
Unôy
.
CuºítTe°LöeNumbî
 = (
UNITY_LINE_TYPE
)
FuncLöeNum
;

1334 
Unôy
.
NumbîOfTe°s
++;

1335 
	`UNITY_CLR_DETAILS
();

1336 i‡(
	`TEST_PROTECT
())

1338 
	`£tUp
();

1339 
	`Func
();

1341 i‡(
	`TEST_PROTECT
())

1343 
	`ã¨Down
();

1345 
	`UnôyC⁄˛udeTe°
();

1346 
	}
}

1349 
	$UnôyBegö
(c⁄° * 
fûíame
)

1351 
Unôy
.
Te°Fûe
 = 
fûíame
;

1352 
Unôy
.
CuºítTe°Name
 = 
NULL
;

1353 
Unôy
.
CuºítTe°LöeNumbî
 = 0;

1354 
Unôy
.
NumbîOfTe°s
 = 0;

1355 
Unôy
.
Te°Faûuªs
 = 0;

1356 
Unôy
.
Te°Ign‹es
 = 0;

1357 
Unôy
.
CuºítTe°Faûed
 = 0;

1358 
Unôy
.
CuºítTe°Ign‹ed
 = 0;

1360 
	`UNITY_CLR_DETAILS
();

1361 
	`UNITY_OUTPUT_START
();

1362 
	}
}

1365 
	$UnôyEnd
()

1367 
	`UNITY_PRINT_EOL
();

1368 
	`UnôyPröt
(
UnôySåBªakî
);

1369 
	`UNITY_PRINT_EOL
();

1370 
	`UnôyPrötNumbî
((
UNITY_INT
)(
Unôy
.
NumbîOfTe°s
));

1371 
	`UnôyPröt
(
UnôySåResu…sTe°s
);

1372 
	`UnôyPrötNumbî
((
UNITY_INT
)(
Unôy
.
Te°Faûuªs
));

1373 
	`UnôyPröt
(
UnôySåResu…sFaûuªs
);

1374 
	`UnôyPrötNumbî
((
UNITY_INT
)(
Unôy
.
Te°Ign‹es
));

1375 
	`UnôyPröt
(
UnôySåResu…sIgn‹ed
);

1376 
	`UNITY_PRINT_EOL
();

1377 i‡(
Unôy
.
Te°Faûuªs
 == 0U)

1379 
	`UnôyPröt
(
UnôySåOk
);

1383 
	`UnôyPröt
(
UnôySåFaû
);

1384 #ifde‡
UNITY_DIFFERENTIATE_FINAL_FAIL


1385 
	`UNITY_OUTPUT_CHAR
('E'); UNITY_OUTPUT_CHAR('D');

1388 
	`UNITY_PRINT_EOL
();

1389 
	`UNITY_FLUSH_CALL
();

1390 
	`UNITY_OUTPUT_COMPLETE
();

1391  ()(
Unôy
.
Te°Faûuªs
);

1392 
	}
}

1397 #ifde‡
UNITY_USE_COMMAND_LINE_ARGS


1399 * 
	gUnôyO±i⁄In˛udeNamed
 = 
NULL
;

1400 * 
	gUnôyO±i⁄Ex˛udeNamed
 = 
NULL
;

1401 
	gUnôyVîbosôy
 = 1;

1403 
	$UnôyP¨£O±i⁄s
(
¨gc
, ** 
¨gv
)

1405 
UnôyO±i⁄In˛udeNamed
 = 
NULL
;

1406 
UnôyO±i⁄Ex˛udeNamed
 = 
NULL
;

1408 
i
 = 1; i < 
¨gc
; i++)

1410 i‡(
¨gv
[
i
][0] == '-')

1412 
¨gv
[
i
][1])

1418 i‡(
¨gv
[
i
][2] == '=')

1419 
UnôyO±i⁄In˛udeNamed
 = &
¨gv
[
i
][3];

1420 i‡(++
i
 < 
¨gc
)

1421 
UnôyO±i⁄In˛udeNamed
 = 
¨gv
[
i
];

1424 
	`UnôyPröt
("ERROR: No Test StringÅo Include Matches For");

1425 
	`UNITY_PRINT_EOL
();

1430 
UnôyVîbosôy
 = 0;

1433 
UnôyVîbosôy
 = 2;

1436 i‡(
¨gv
[
i
][2] == '=')

1437 
UnôyO±i⁄Ex˛udeNamed
 = &
¨gv
[
i
][3];

1438 i‡(++
i
 < 
¨gc
)

1439 
UnôyO±i⁄Ex˛udeNamed
 = 
¨gv
[
i
];

1442 
	`UnôyPröt
("ERROR: No Test StringÅo Exclude Matches For");

1443 
	`UNITY_PRINT_EOL
();

1448 
	`UnôyPröt
("ERROR: Unknown Option ");

1449 
	`UNITY_OUTPUT_CHAR
(
¨gv
[
i
][1]);

1450 
	`UNITY_PRINT_EOL
();

1457 
	}
}

1459 
	$IsSåögInBiggîSåög
(c⁄° * 
l⁄g°rög
, c⁄° * 
sh‹t°rög
)

1461 c⁄° * 
Õå
 = 
l⁄g°rög
;

1462 c⁄° * 
•å
 = 
sh‹t°rög
;

1463 c⁄° * 
 ext
 = 
Õå
;

1465 i‡(*
•å
 == '*')

1468 *
Õå
)

1470 
 ext
 = 
Õå
 + 1;

1473 *
Õå
 && *
•å
 && (*lptr == *sptr))

1475 
Õå
++;

1476 
•å
++;

1479 i‡(*
•å
 == '*')

1481 i‡(*
•å
 == ',')

1483 i‡(*
•å
 == '"')

1485 i‡(*
•å
 == '\'')

1487 i‡(*
•å
 == ':')

1489 i‡(*
•å
 == 0)

1494 
Õå
 = 
 ext
;

1495 
•å
 = 
sh‹t°rög
;

1498 
	}
}

1500 
	$UnôySåögArgumítM©ches
(c⁄° * 
°r
)

1502 
ªtvÆ
;

1503 c⁄° * 
±r1
;

1504 c⁄° * 
±r2
;

1505 c⁄° * 
±rf
;

1508 
±r1
 = 
°r
;

1509 
±r1
[0] != 0)

1511 i‡((
±r1
[0] == '"') || (ptr1[0] == '\''))

1512 
±r1
++;

1515 
±r2
 = 
±r1
;

1516 
±rf
 = 0;

1519 
±r2
++;

1520 i‡((
±r2
[0] == ':') && (ptr2[1] != 0) && (ptr2[0] != '\'') && (ptr2[0] != '"') && (ptr2[0] != ','))

1521 
±rf
 = &
±r2
[1];

1522 } (
±r2
[0] != 0) && (ptr2[0] != '\'') && (ptr2[0] != '"') && (ptr2[0] != ','));

1523 (
±r2
[0] != 0) && ((ptr2[0] == ':') || (ptr2[0] == '\'') || (ptr2[0] == '"') || (ptr2[0] == ',')))

1524 
±r2
++;

1527 
ªtvÆ
 = 
	`IsSåögInBiggîSåög
(
Unôy
.
Te°Fûe
, 
±r1
);

1528 i‡(
ªtvÆ
 == 1)

1529  
ªtvÆ
;

1532 i‡((
ªtvÆ
 =2Ë&& (
±rf
 != 0))

1534 i‡(
	`IsSåögInBiggîSåög
(
Unôy
.
CuºítTe°Name
, 
±rf
))

1539 i‡(
	`IsSåögInBiggîSåög
(
Unôy
.
CuºítTe°Name
, 
±r1
) == 1)

1542 
±r1
 = 
±r2
;

1547 
	}
}

1549 
	$UnôyTe°M©ches
()

1552 
ªtvÆ
;

1553 i‡(
UnôyO±i⁄In˛udeNamed
)

1555 
ªtvÆ
 = 
	`UnôySåögArgumítM©ches
(
UnôyO±i⁄In˛udeNamed
);

1558 
ªtvÆ
 = 1;

1561 i‡(
UnôyO±i⁄Ex˛udeNamed
)

1563 i‡(
	`UnôySåögArgumítM©ches
(
UnôyO±i⁄Ex˛udeNamed
))

1564 
ªtvÆ
 = 0;

1566  
ªtvÆ
;

1567 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/src/unity.h

7 #i‚de‡
UNITY_FRAMEWORK_H


8 
	#UNITY_FRAMEWORK_H


	)

9 
	#UNITY


	)

11 #ifde‡
__˝lu•lus


16 
	~"unôy_öã∫Æs.h
"

23 
£tUp
();

24 
ã¨Down
();

29 
suôeSëUp
();

30 
suôeTórDown
(
num_Áûuªs
);

37 #ifde‡
UNITY_INCLUDE_SETUP_STUBS


38 #ifde‡
UNITY_WEAK_ATTRIBUTE


39 
UNITY_WEAK_ATTRIBUTE
 
£tUp
() { }

40 
UNITY_WEAK_ATTRIBUTE
 
ã¨Down
() { }

41 
UNITY_WEAK_ATTRIBUTE
 
suôeSëUp
() { }

42 
UNITY_WEAK_ATTRIBUTE
 
suôeTórDown
(
num_Áûuªs
) { Çum_failures; }

43 #ñi‡
deföed
(
UNITY_WEAK_PRAGMA
)

44 #¥agm®
wók
 
£tUp


45 
£tUp
() { }

46 #¥agm®
wók
 
ã¨Down


47 
ã¨Down
() { }

48 #¥agm®
wók
 
suôeSëUp


49 
suôeSëUp
() { }

50 #¥agm®
wók
 
suôeTórDown


51 
suôeTórDown
(
num_Áûuªs
) { Çum_failures; }

101 
	#TEST_FAIL_MESSAGE
(
mesßge
Ë
	`UNITY_TEST_FAIL
(
__LINE__
, (mesßge))

	)

102 
	#TEST_FAIL
(Ë
	`UNITY_TEST_FAIL
(
__LINE__
, 
NULL
)

	)

103 
	#TEST_IGNORE_MESSAGE
(
mesßge
Ë
	`UNITY_TEST_IGNORE
(
__LINE__
, (mesßge))

	)

104 
	#TEST_IGNORE
(Ë
	`UNITY_TEST_IGNORE
(
__LINE__
, 
NULL
)

	)

105 
	#TEST_ONLY
()

	)

109 
	#TEST_PASS
(Ë
	`TEST_ABORT
()

	)

113 
	#TEST_FILE
(
a
)

	)

120 
	#TEST_ASSERT
(
c⁄dôi⁄
Ë
	`UNITY_TEST_ASSERT
–(c⁄dôi⁄), 
__LINE__
, " Ex¥essi⁄ EvÆu©ed TÿFALSE")

	)

121 
	#TEST_ASSERT_TRUE
(
c⁄dôi⁄
Ë
	`UNITY_TEST_ASSERT
–(c⁄dôi⁄), 
__LINE__
, " Ex≥˘ed TRUE Wa†FALSE")

	)

122 
	#TEST_ASSERT_UNLESS
(
c⁄dôi⁄
Ë
	`UNITY_TEST_ASSERT
–!(c⁄dôi⁄), 
__LINE__
, " Ex¥essi⁄ EvÆu©ed TÿTRUE")

	)

123 
	#TEST_ASSERT_FALSE
(
c⁄dôi⁄
Ë
	`UNITY_TEST_ASSERT
–!(c⁄dôi⁄), 
__LINE__
, " Ex≥˘ed FALSE Wa†TRUE")

	)

124 
	#TEST_ASSERT_NULL
(
poöãr
Ë
	`UNITY_TEST_ASSERT_NULL
–’oöãr), 
__LINE__
, " Ex≥˘ed NULL")

	)

125 
	#TEST_ASSERT_NOT_NULL
(
poöãr
Ë
	`UNITY_TEST_ASSERT_NOT_NULL
(’oöãr), 
__LINE__
, " Ex≥˘ed N⁄-NULL")

	)

128 
	#TEST_ASSERT_EQUAL_INT
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

129 
	#TEST_ASSERT_EQUAL_INT8
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT8
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

130 
	#TEST_ASSERT_EQUAL_INT16
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT16
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

131 
	#TEST_ASSERT_EQUAL_INT32
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT32
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

132 
	#TEST_ASSERT_EQUAL_INT64
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT64
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

133 
	#TEST_ASSERT_EQUAL
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

134 
	#TEST_ASSERT_NOT_EQUAL
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT
((”x≥˘edË!◊˘uÆ)), 
__LINE__
, " Ex≥˘ed NŸ-EquÆ")

	)

135 
	#TEST_ASSERT_EQUAL_UINT
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT
–”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

136 
	#TEST_ASSERT_EQUAL_UINT8
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT8
–”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

137 
	#TEST_ASSERT_EQUAL_UINT16
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT16
–”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

138 
	#TEST_ASSERT_EQUAL_UINT32
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT32
–”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

139 
	#TEST_ASSERT_EQUAL_UINT64
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT64
–”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

140 
	#TEST_ASSERT_EQUAL_HEX
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX32
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

141 
	#TEST_ASSERT_EQUAL_HEX8
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX8
–”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

142 
	#TEST_ASSERT_EQUAL_HEX16
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX16
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

143 
	#TEST_ASSERT_EQUAL_HEX32
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX32
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

144 
	#TEST_ASSERT_EQUAL_HEX64
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX64
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

145 
	#TEST_ASSERT_BITS
(
mask
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_BITS
((mask), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

146 
	#TEST_ASSERT_BITS_HIGH
(
mask
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_BITS
((mask), (
UNITY_UINT32
)(-1), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

147 
	#TEST_ASSERT_BITS_LOW
(
mask
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_BITS
((mask), (
UNITY_UINT32
)(0), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

148 
	#TEST_ASSERT_BIT_HIGH
(
bô
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_BITS
(((
UNITY_UINT32
)1 << (bô)), (UNITY_UINT32)(-1), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

149 
	#TEST_ASSERT_BIT_LOW
(
bô
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_BITS
(((
UNITY_UINT32
)1 << (bô)), (UNITY_UINT32)(0), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

152 
	#TEST_ASSERT_GREATER_THAN
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_INT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

153 
	#TEST_ASSERT_GREATER_THAN_INT
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_INT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

154 
	#TEST_ASSERT_GREATER_THAN_INT8
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_INT8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

155 
	#TEST_ASSERT_GREATER_THAN_INT16
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_INT16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

156 
	#TEST_ASSERT_GREATER_THAN_INT32
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_INT32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

157 
	#TEST_ASSERT_GREATER_THAN_INT64
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_INT64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

158 
	#TEST_ASSERT_GREATER_THAN_UINT
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_UINT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

159 
	#TEST_ASSERT_GREATER_THAN_UINT8
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_UINT8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

160 
	#TEST_ASSERT_GREATER_THAN_UINT16
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_UINT16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

161 
	#TEST_ASSERT_GREATER_THAN_UINT32
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_UINT32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

162 
	#TEST_ASSERT_GREATER_THAN_UINT64
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_UINT64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

163 
	#TEST_ASSERT_GREATER_THAN_HEX8
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_HEX8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

164 
	#TEST_ASSERT_GREATER_THAN_HEX16
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_HEX16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

165 
	#TEST_ASSERT_GREATER_THAN_HEX32
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_HEX32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

166 
	#TEST_ASSERT_GREATER_THAN_HEX64
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_HEX64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

168 
	#TEST_ASSERT_LESS_THAN
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_INT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

169 
	#TEST_ASSERT_LESS_THAN_INT
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_INT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

170 
	#TEST_ASSERT_LESS_THAN_INT8
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_INT8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

171 
	#TEST_ASSERT_LESS_THAN_INT16
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_INT16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

172 
	#TEST_ASSERT_LESS_THAN_INT32
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_INT32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

173 
	#TEST_ASSERT_LESS_THAN_INT64
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_INT64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

174 
	#TEST_ASSERT_LESS_THAN_UINT
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_UINT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

175 
	#TEST_ASSERT_LESS_THAN_UINT8
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_UINT8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

176 
	#TEST_ASSERT_LESS_THAN_UINT16
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_UINT16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

177 
	#TEST_ASSERT_LESS_THAN_UINT32
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_UINT32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

178 
	#TEST_ASSERT_LESS_THAN_UINT64
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_UINT64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

179 
	#TEST_ASSERT_LESS_THAN_HEX8
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_HEX8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

180 
	#TEST_ASSERT_LESS_THAN_HEX16
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_HEX16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

181 
	#TEST_ASSERT_LESS_THAN_HEX32
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_HEX32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

182 
	#TEST_ASSERT_LESS_THAN_HEX64
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_HEX64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

184 
	#TEST_ASSERT_GREATER_OR_EQUAL
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

185 
	#TEST_ASSERT_GREATER_OR_EQUAL_INT
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

186 
	#TEST_ASSERT_GREATER_OR_EQUAL_INT8
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

187 
	#TEST_ASSERT_GREATER_OR_EQUAL_INT16
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

188 
	#TEST_ASSERT_GREATER_OR_EQUAL_INT32
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

189 
	#TEST_ASSERT_GREATER_OR_EQUAL_INT64
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

190 
	#TEST_ASSERT_GREATER_OR_EQUAL_UINT
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

191 
	#TEST_ASSERT_GREATER_OR_EQUAL_UINT8
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

192 
	#TEST_ASSERT_GREATER_OR_EQUAL_UINT16
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

193 
	#TEST_ASSERT_GREATER_OR_EQUAL_UINT32
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

194 
	#TEST_ASSERT_GREATER_OR_EQUAL_UINT64
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

195 
	#TEST_ASSERT_GREATER_OR_EQUAL_HEX8
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

196 
	#TEST_ASSERT_GREATER_OR_EQUAL_HEX16
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

197 
	#TEST_ASSERT_GREATER_OR_EQUAL_HEX32
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

198 
	#TEST_ASSERT_GREATER_OR_EQUAL_HEX64
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

200 
	#TEST_ASSERT_LESS_OR_EQUAL
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

201 
	#TEST_ASSERT_LESS_OR_EQUAL_INT
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

202 
	#TEST_ASSERT_LESS_OR_EQUAL_INT8
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

203 
	#TEST_ASSERT_LESS_OR_EQUAL_INT16
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

204 
	#TEST_ASSERT_LESS_OR_EQUAL_INT32
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

205 
	#TEST_ASSERT_LESS_OR_EQUAL_INT64
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

206 
	#TEST_ASSERT_LESS_OR_EQUAL_UINT
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

207 
	#TEST_ASSERT_LESS_OR_EQUAL_UINT8
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

208 
	#TEST_ASSERT_LESS_OR_EQUAL_UINT16
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

209 
	#TEST_ASSERT_LESS_OR_EQUAL_UINT32
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

210 
	#TEST_ASSERT_LESS_OR_EQUAL_UINT64
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

211 
	#TEST_ASSERT_LESS_OR_EQUAL_HEX8
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

212 
	#TEST_ASSERT_LESS_OR_EQUAL_HEX16
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

213 
	#TEST_ASSERT_LESS_OR_EQUAL_HEX32
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

214 
	#TEST_ASSERT_LESS_OR_EQUAL_HEX64
(
thªshﬁd
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

217 
	#TEST_ASSERT_INT_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_INT_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

218 
	#TEST_ASSERT_INT8_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_INT8_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

219 
	#TEST_ASSERT_INT16_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_INT16_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

220 
	#TEST_ASSERT_INT32_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_INT32_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

221 
	#TEST_ASSERT_INT64_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_INT64_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

222 
	#TEST_ASSERT_UINT_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_UINT_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

223 
	#TEST_ASSERT_UINT8_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_UINT8_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

224 
	#TEST_ASSERT_UINT16_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_UINT16_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

225 
	#TEST_ASSERT_UINT32_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_UINT32_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

226 
	#TEST_ASSERT_UINT64_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_UINT64_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

227 
	#TEST_ASSERT_HEX_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_HEX32_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

228 
	#TEST_ASSERT_HEX8_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_HEX8_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

229 
	#TEST_ASSERT_HEX16_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_HEX16_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

230 
	#TEST_ASSERT_HEX32_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_HEX32_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

231 
	#TEST_ASSERT_HEX64_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_HEX64_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

234 
	#TEST_ASSERT_EQUAL_PTR
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_PTR
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

235 
	#TEST_ASSERT_EQUAL_STRING
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_STRING
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

236 
	#TEST_ASSERT_EQUAL_STRING_LEN
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
Ë
	`UNITY_TEST_ASSERT_EQUAL_STRING_LEN
(”x≥˘ed), (a˘uÆ), (Àn), 
__LINE__
, 
NULL
)

	)

237 
	#TEST_ASSERT_EQUAL_MEMORY
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
Ë
	`UNITY_TEST_ASSERT_EQUAL_MEMORY
(”x≥˘ed), (a˘uÆ), (Àn), 
__LINE__
, 
NULL
)

	)

240 
	#TEST_ASSERT_EQUAL_INT_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

241 
	#TEST_ASSERT_EQUAL_INT8_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT8_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

242 
	#TEST_ASSERT_EQUAL_INT16_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT16_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

243 
	#TEST_ASSERT_EQUAL_INT32_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT32_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

244 
	#TEST_ASSERT_EQUAL_INT64_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT64_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

245 
	#TEST_ASSERT_EQUAL_UINT_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

246 
	#TEST_ASSERT_EQUAL_UINT8_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT8_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

247 
	#TEST_ASSERT_EQUAL_UINT16_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT16_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

248 
	#TEST_ASSERT_EQUAL_UINT32_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT32_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

249 
	#TEST_ASSERT_EQUAL_UINT64_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT64_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

250 
	#TEST_ASSERT_EQUAL_HEX_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

251 
	#TEST_ASSERT_EQUAL_HEX8_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX8_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

252 
	#TEST_ASSERT_EQUAL_HEX16_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX16_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

253 
	#TEST_ASSERT_EQUAL_HEX32_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

254 
	#TEST_ASSERT_EQUAL_HEX64_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX64_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

255 
	#TEST_ASSERT_EQUAL_PTR_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_PTR_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

256 
	#TEST_ASSERT_EQUAL_STRING_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_STRING_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

257 
	#TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_MEMORY_ARRAY
(”x≥˘ed), (a˘uÆ), (Àn), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

260 
	#TEST_ASSERT_EACH_EQUAL_INT
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_INT
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

261 
	#TEST_ASSERT_EACH_EQUAL_INT8
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_INT8
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

262 
	#TEST_ASSERT_EACH_EQUAL_INT16
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_INT16
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

263 
	#TEST_ASSERT_EACH_EQUAL_INT32
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_INT32
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

264 
	#TEST_ASSERT_EACH_EQUAL_INT64
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_INT64
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

265 
	#TEST_ASSERT_EACH_EQUAL_UINT
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_UINT
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

266 
	#TEST_ASSERT_EACH_EQUAL_UINT8
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_UINT8
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

267 
	#TEST_ASSERT_EACH_EQUAL_UINT16
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_UINT16
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

268 
	#TEST_ASSERT_EACH_EQUAL_UINT32
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_UINT32
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

269 
	#TEST_ASSERT_EACH_EQUAL_UINT64
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_UINT64
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

270 
	#TEST_ASSERT_EACH_EQUAL_HEX
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_HEX32
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

271 
	#TEST_ASSERT_EACH_EQUAL_HEX8
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_HEX8
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

272 
	#TEST_ASSERT_EACH_EQUAL_HEX16
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_HEX16
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

273 
	#TEST_ASSERT_EACH_EQUAL_HEX32
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_HEX32
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

274 
	#TEST_ASSERT_EACH_EQUAL_HEX64
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_HEX64
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

275 
	#TEST_ASSERT_EACH_EQUAL_PTR
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_PTR
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

276 
	#TEST_ASSERT_EACH_EQUAL_STRING
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_STRING
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

277 
	#TEST_ASSERT_EACH_EQUAL_MEMORY
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_MEMORY
(”x≥˘ed), (a˘uÆ), (Àn), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

280 
	#TEST_ASSERT_FLOAT_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_FLOAT_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

281 
	#TEST_ASSERT_EQUAL_FLOAT
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_FLOAT
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

282 
	#TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_FLOAT_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

283 
	#TEST_ASSERT_EACH_EQUAL_FLOAT
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_FLOAT
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

284 
	#TEST_ASSERT_FLOAT_IS_INF
(
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_FLOAT_IS_INF
(◊˘uÆ), 
__LINE__
, 
NULL
)

	)

285 
	#TEST_ASSERT_FLOAT_IS_NEG_INF
(
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_FLOAT_IS_NEG_INF
(◊˘uÆ), 
__LINE__
, 
NULL
)

	)

286 
	#TEST_ASSERT_FLOAT_IS_NAN
(
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_FLOAT_IS_NAN
(◊˘uÆ), 
__LINE__
, 
NULL
)

	)

287 
	#TEST_ASSERT_FLOAT_IS_DETERMINATE
(
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_FLOAT_IS_DETERMINATE
(◊˘uÆ), 
__LINE__
, 
NULL
)

	)

288 
	#TEST_ASSERT_FLOAT_IS_NOT_INF
(
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_FLOAT_IS_NOT_INF
(◊˘uÆ), 
__LINE__
, 
NULL
)

	)

289 
	#TEST_ASSERT_FLOAT_IS_NOT_NEG_INF
(
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_FLOAT_IS_NOT_NEG_INF
(◊˘uÆ), 
__LINE__
, 
NULL
)

	)

290 
	#TEST_ASSERT_FLOAT_IS_NOT_NAN
(
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_FLOAT_IS_NOT_NAN
(◊˘uÆ), 
__LINE__
, 
NULL
)

	)

291 
	#TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE
(
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE
(◊˘uÆ), 
__LINE__
, 
NULL
)

	)

294 
	#TEST_ASSERT_DOUBLE_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_DOUBLE_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

295 
	#TEST_ASSERT_EQUAL_DOUBLE
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_DOUBLE
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

296 
	#TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

297 
	#TEST_ASSERT_EACH_EQUAL_DOUBLE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_DOUBLE
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, 
NULL
)

	)

298 
	#TEST_ASSERT_DOUBLE_IS_INF
(
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_DOUBLE_IS_INF
(◊˘uÆ), 
__LINE__
, 
NULL
)

	)

299 
	#TEST_ASSERT_DOUBLE_IS_NEG_INF
(
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_DOUBLE_IS_NEG_INF
(◊˘uÆ), 
__LINE__
, 
NULL
)

	)

300 
	#TEST_ASSERT_DOUBLE_IS_NAN
(
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_DOUBLE_IS_NAN
(◊˘uÆ), 
__LINE__
, 
NULL
)

	)

301 
	#TEST_ASSERT_DOUBLE_IS_DETERMINATE
(
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_DOUBLE_IS_DETERMINATE
(◊˘uÆ), 
__LINE__
, 
NULL
)

	)

302 
	#TEST_ASSERT_DOUBLE_IS_NOT_INF
(
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_DOUBLE_IS_NOT_INF
(◊˘uÆ), 
__LINE__
, 
NULL
)

	)

303 
	#TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF
(
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF
(◊˘uÆ), 
__LINE__
, 
NULL
)

	)

304 
	#TEST_ASSERT_DOUBLE_IS_NOT_NAN
(
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_DOUBLE_IS_NOT_NAN
(◊˘uÆ), 
__LINE__
, 
NULL
)

	)

305 
	#TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE
(
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE
(◊˘uÆ), 
__LINE__
, 
NULL
)

	)

312 
	#TEST_ASSERT_MESSAGE
(
c⁄dôi⁄
, 
mesßge
Ë
	`UNITY_TEST_ASSERT
–(c⁄dôi⁄), 
__LINE__
, (mesßge))

	)

313 
	#TEST_ASSERT_TRUE_MESSAGE
(
c⁄dôi⁄
, 
mesßge
Ë
	`UNITY_TEST_ASSERT
–(c⁄dôi⁄), 
__LINE__
, (mesßge))

	)

314 
	#TEST_ASSERT_UNLESS_MESSAGE
(
c⁄dôi⁄
, 
mesßge
Ë
	`UNITY_TEST_ASSERT
–!(c⁄dôi⁄), 
__LINE__
, (mesßge))

	)

315 
	#TEST_ASSERT_FALSE_MESSAGE
(
c⁄dôi⁄
, 
mesßge
Ë
	`UNITY_TEST_ASSERT
–!(c⁄dôi⁄), 
__LINE__
, (mesßge))

	)

316 
	#TEST_ASSERT_NULL_MESSAGE
(
poöãr
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_NULL
–’oöãr), 
__LINE__
, (mesßge))

	)

317 
	#TEST_ASSERT_NOT_NULL_MESSAGE
(
poöãr
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_NOT_NULL
(’oöãr), 
__LINE__
, (mesßge))

	)

320 
	#TEST_ASSERT_EQUAL_INT_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT
(”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

321 
	#TEST_ASSERT_EQUAL_INT8_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT8
(”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

322 
	#TEST_ASSERT_EQUAL_INT16_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT16
(”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

323 
	#TEST_ASSERT_EQUAL_INT32_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT32
(”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

324 
	#TEST_ASSERT_EQUAL_INT64_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT64
(”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

325 
	#TEST_ASSERT_EQUAL_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT
(”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

326 
	#TEST_ASSERT_NOT_EQUAL_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT
((”x≥˘edË!◊˘uÆ)), 
__LINE__
, (mesßge))

	)

327 
	#TEST_ASSERT_EQUAL_UINT_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT
–”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

328 
	#TEST_ASSERT_EQUAL_UINT8_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT8
–”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

329 
	#TEST_ASSERT_EQUAL_UINT16_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT16
–”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

330 
	#TEST_ASSERT_EQUAL_UINT32_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT32
–”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

331 
	#TEST_ASSERT_EQUAL_UINT64_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT64
–”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

332 
	#TEST_ASSERT_EQUAL_HEX_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX32
(”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

333 
	#TEST_ASSERT_EQUAL_HEX8_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX8
–”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

334 
	#TEST_ASSERT_EQUAL_HEX16_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX16
(”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

335 
	#TEST_ASSERT_EQUAL_HEX32_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX32
(”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

336 
	#TEST_ASSERT_EQUAL_HEX64_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX64
(”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

337 
	#TEST_ASSERT_BITS_MESSAGE
(
mask
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_BITS
((mask), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

338 
	#TEST_ASSERT_BITS_HIGH_MESSAGE
(
mask
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_BITS
((mask), (
UNITY_UINT32
)(-1), (a˘uÆ), 
__LINE__
, (mesßge))

	)

339 
	#TEST_ASSERT_BITS_LOW_MESSAGE
(
mask
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_BITS
((mask), (
UNITY_UINT32
)(0), (a˘uÆ), 
__LINE__
, (mesßge))

	)

340 
	#TEST_ASSERT_BIT_HIGH_MESSAGE
(
bô
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_BITS
(((
UNITY_UINT32
)1 << (bô)), (UNITY_UINT32)(-1), (a˘uÆ), 
__LINE__
, (mesßge))

	)

341 
	#TEST_ASSERT_BIT_LOW_MESSAGE
(
bô
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_BITS
(((
UNITY_UINT32
)1 << (bô)), (UNITY_UINT32)(0), (a˘uÆ), 
__LINE__
, (mesßge))

	)

344 
	#TEST_ASSERT_GREATER_THAN_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_INT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

345 
	#TEST_ASSERT_GREATER_THAN_INT_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_INT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

346 
	#TEST_ASSERT_GREATER_THAN_INT8_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_INT8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

347 
	#TEST_ASSERT_GREATER_THAN_INT16_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_INT16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

348 
	#TEST_ASSERT_GREATER_THAN_INT32_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_INT32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

349 
	#TEST_ASSERT_GREATER_THAN_INT64_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_INT64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

350 
	#TEST_ASSERT_GREATER_THAN_UINT_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_UINT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

351 
	#TEST_ASSERT_GREATER_THAN_UINT8_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_UINT8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

352 
	#TEST_ASSERT_GREATER_THAN_UINT16_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_UINT16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

353 
	#TEST_ASSERT_GREATER_THAN_UINT32_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_UINT32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

354 
	#TEST_ASSERT_GREATER_THAN_UINT64_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_UINT64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

355 
	#TEST_ASSERT_GREATER_THAN_HEX8_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_HEX8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

356 
	#TEST_ASSERT_GREATER_THAN_HEX16_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_HEX16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

357 
	#TEST_ASSERT_GREATER_THAN_HEX32_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_HEX32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

358 
	#TEST_ASSERT_GREATER_THAN_HEX64_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_THAN_HEX64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

360 
	#TEST_ASSERT_LESS_THAN_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_INT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

361 
	#TEST_ASSERT_LESS_THAN_INT_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_INT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

362 
	#TEST_ASSERT_LESS_THAN_INT8_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_INT8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

363 
	#TEST_ASSERT_LESS_THAN_INT16_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_INT16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

364 
	#TEST_ASSERT_LESS_THAN_INT32_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_INT32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

365 
	#TEST_ASSERT_LESS_THAN_INT64_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_INT64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

366 
	#TEST_ASSERT_LESS_THAN_UINT_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_UINT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

367 
	#TEST_ASSERT_LESS_THAN_UINT8_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_UINT8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

368 
	#TEST_ASSERT_LESS_THAN_UINT16_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_UINT16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

369 
	#TEST_ASSERT_LESS_THAN_UINT32_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_UINT32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

370 
	#TEST_ASSERT_LESS_THAN_UINT64_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_UINT64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

371 
	#TEST_ASSERT_LESS_THAN_HEX8_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_HEX8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

372 
	#TEST_ASSERT_LESS_THAN_HEX16_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_HEX16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

373 
	#TEST_ASSERT_LESS_THAN_HEX32_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_HEX32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

374 
	#TEST_ASSERT_LESS_THAN_HEX64_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_HEX64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

376 
	#TEST_ASSERT_GREATER_OR_EQUAL_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

377 
	#TEST_ASSERT_GREATER_OR_EQUAL_INT_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

378 
	#TEST_ASSERT_GREATER_OR_EQUAL_INT8_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

379 
	#TEST_ASSERT_GREATER_OR_EQUAL_INT16_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

380 
	#TEST_ASSERT_GREATER_OR_EQUAL_INT32_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

381 
	#TEST_ASSERT_GREATER_OR_EQUAL_INT64_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

382 
	#TEST_ASSERT_GREATER_OR_EQUAL_UINT_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

383 
	#TEST_ASSERT_GREATER_OR_EQUAL_UINT8_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

384 
	#TEST_ASSERT_GREATER_OR_EQUAL_UINT16_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

385 
	#TEST_ASSERT_GREATER_OR_EQUAL_UINT32_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

386 
	#TEST_ASSERT_GREATER_OR_EQUAL_UINT64_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

387 
	#TEST_ASSERT_GREATER_OR_EQUAL_HEX8_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

388 
	#TEST_ASSERT_GREATER_OR_EQUAL_HEX16_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

389 
	#TEST_ASSERT_GREATER_OR_EQUAL_HEX32_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

390 
	#TEST_ASSERT_GREATER_OR_EQUAL_HEX64_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

392 
	#TEST_ASSERT_LESS_OR_EQUAL_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

393 
	#TEST_ASSERT_LESS_OR_EQUAL_INT_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

394 
	#TEST_ASSERT_LESS_OR_EQUAL_INT8_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

395 
	#TEST_ASSERT_LESS_OR_EQUAL_INT16_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

396 
	#TEST_ASSERT_LESS_OR_EQUAL_INT32_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

397 
	#TEST_ASSERT_LESS_OR_EQUAL_INT64_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

398 
	#TEST_ASSERT_LESS_OR_EQUAL_UINT_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

399 
	#TEST_ASSERT_LESS_OR_EQUAL_UINT8_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

400 
	#TEST_ASSERT_LESS_OR_EQUAL_UINT16_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

401 
	#TEST_ASSERT_LESS_OR_EQUAL_UINT32_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

402 
	#TEST_ASSERT_LESS_OR_EQUAL_UINT64_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

403 
	#TEST_ASSERT_LESS_OR_EQUAL_HEX8_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX8
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

404 
	#TEST_ASSERT_LESS_OR_EQUAL_HEX16_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX16
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

405 
	#TEST_ASSERT_LESS_OR_EQUAL_HEX32_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_HEX32
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

406 
	#TEST_ASSERT_LESS_OR_EQUAL_HEX64_MESSAGE
(
thªshﬁd
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_SMALLER_THAN_HEX64
(—hªshﬁd), (a˘uÆ), 
__LINE__
, (mesßge))

	)

409 
	#TEST_ASSERT_INT_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_INT_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

410 
	#TEST_ASSERT_INT8_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_INT8_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

411 
	#TEST_ASSERT_INT16_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_INT16_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

412 
	#TEST_ASSERT_INT32_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_INT32_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

413 
	#TEST_ASSERT_INT64_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_INT64_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

414 
	#TEST_ASSERT_UINT_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_UINT_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

415 
	#TEST_ASSERT_UINT8_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_UINT8_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

416 
	#TEST_ASSERT_UINT16_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_UINT16_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

417 
	#TEST_ASSERT_UINT32_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_UINT32_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

418 
	#TEST_ASSERT_UINT64_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_UINT64_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

419 
	#TEST_ASSERT_HEX_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_HEX32_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

420 
	#TEST_ASSERT_HEX8_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_HEX8_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

421 
	#TEST_ASSERT_HEX16_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_HEX16_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

422 
	#TEST_ASSERT_HEX32_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_HEX32_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

423 
	#TEST_ASSERT_HEX64_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_HEX64_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

426 
	#TEST_ASSERT_EQUAL_PTR_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_PTR
(”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

427 
	#TEST_ASSERT_EQUAL_STRING_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_STRING
(”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

428 
	#TEST_ASSERT_EQUAL_STRING_LEN_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_STRING_LEN
(”x≥˘ed), (a˘uÆ), (Àn), 
__LINE__
, (mesßge))

	)

429 
	#TEST_ASSERT_EQUAL_MEMORY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_MEMORY
(”x≥˘ed), (a˘uÆ), (Àn), 
__LINE__
, (mesßge))

	)

432 
	#TEST_ASSERT_EQUAL_INT_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

433 
	#TEST_ASSERT_EQUAL_INT8_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT8_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

434 
	#TEST_ASSERT_EQUAL_INT16_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT16_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

435 
	#TEST_ASSERT_EQUAL_INT32_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT32_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

436 
	#TEST_ASSERT_EQUAL_INT64_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT64_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

437 
	#TEST_ASSERT_EQUAL_UINT_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

438 
	#TEST_ASSERT_EQUAL_UINT8_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT8_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

439 
	#TEST_ASSERT_EQUAL_UINT16_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT16_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

440 
	#TEST_ASSERT_EQUAL_UINT32_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT32_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

441 
	#TEST_ASSERT_EQUAL_UINT64_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT64_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

442 
	#TEST_ASSERT_EQUAL_HEX_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

443 
	#TEST_ASSERT_EQUAL_HEX8_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX8_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

444 
	#TEST_ASSERT_EQUAL_HEX16_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX16_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

445 
	#TEST_ASSERT_EQUAL_HEX32_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

446 
	#TEST_ASSERT_EQUAL_HEX64_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX64_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

447 
	#TEST_ASSERT_EQUAL_PTR_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_PTR_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

448 
	#TEST_ASSERT_EQUAL_STRING_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_STRING_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

449 
	#TEST_ASSERT_EQUAL_MEMORY_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_MEMORY_ARRAY
(”x≥˘ed), (a˘uÆ), (Àn), (num_ñemíts), 
__LINE__
, (mesßge))

	)

452 
	#TEST_ASSERT_EACH_EQUAL_INT_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_INT
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

453 
	#TEST_ASSERT_EACH_EQUAL_INT8_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_INT8
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

454 
	#TEST_ASSERT_EACH_EQUAL_INT16_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_INT16
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

455 
	#TEST_ASSERT_EACH_EQUAL_INT32_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_INT32
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

456 
	#TEST_ASSERT_EACH_EQUAL_INT64_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_INT64
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

457 
	#TEST_ASSERT_EACH_EQUAL_UINT_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_UINT
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

458 
	#TEST_ASSERT_EACH_EQUAL_UINT8_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_UINT8
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

459 
	#TEST_ASSERT_EACH_EQUAL_UINT16_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_UINT16
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

460 
	#TEST_ASSERT_EACH_EQUAL_UINT32_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_UINT32
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

461 
	#TEST_ASSERT_EACH_EQUAL_UINT64_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_UINT64
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

462 
	#TEST_ASSERT_EACH_EQUAL_HEX_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_HEX32
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

463 
	#TEST_ASSERT_EACH_EQUAL_HEX8_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_HEX8
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

464 
	#TEST_ASSERT_EACH_EQUAL_HEX16_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_HEX16
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

465 
	#TEST_ASSERT_EACH_EQUAL_HEX32_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_HEX32
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

466 
	#TEST_ASSERT_EACH_EQUAL_HEX64_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_HEX64
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

467 
	#TEST_ASSERT_EACH_EQUAL_PTR_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_PTR
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

468 
	#TEST_ASSERT_EACH_EQUAL_STRING_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_STRING
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

469 
	#TEST_ASSERT_EACH_EQUAL_MEMORY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_MEMORY
(”x≥˘ed), (a˘uÆ), (Àn), (num_ñemíts), 
__LINE__
, (mesßge))

	)

472 
	#TEST_ASSERT_FLOAT_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_FLOAT_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

473 
	#TEST_ASSERT_EQUAL_FLOAT_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_FLOAT
(”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

474 
	#TEST_ASSERT_EQUAL_FLOAT_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_FLOAT_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

475 
	#TEST_ASSERT_EACH_EQUAL_FLOAT_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_FLOAT
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

476 
	#TEST_ASSERT_FLOAT_IS_INF_MESSAGE
(
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_FLOAT_IS_INF
(◊˘uÆ), 
__LINE__
, (mesßge))

	)

477 
	#TEST_ASSERT_FLOAT_IS_NEG_INF_MESSAGE
(
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_FLOAT_IS_NEG_INF
(◊˘uÆ), 
__LINE__
, (mesßge))

	)

478 
	#TEST_ASSERT_FLOAT_IS_NAN_MESSAGE
(
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_FLOAT_IS_NAN
(◊˘uÆ), 
__LINE__
, (mesßge))

	)

479 
	#TEST_ASSERT_FLOAT_IS_DETERMINATE_MESSAGE
(
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_FLOAT_IS_DETERMINATE
(◊˘uÆ), 
__LINE__
, (mesßge))

	)

480 
	#TEST_ASSERT_FLOAT_IS_NOT_INF_MESSAGE
(
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_FLOAT_IS_NOT_INF
(◊˘uÆ), 
__LINE__
, (mesßge))

	)

481 
	#TEST_ASSERT_FLOAT_IS_NOT_NEG_INF_MESSAGE
(
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_FLOAT_IS_NOT_NEG_INF
(◊˘uÆ), 
__LINE__
, (mesßge))

	)

482 
	#TEST_ASSERT_FLOAT_IS_NOT_NAN_MESSAGE
(
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_FLOAT_IS_NOT_NAN
(◊˘uÆ), 
__LINE__
, (mesßge))

	)

483 
	#TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE_MESSAGE
(
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE
(◊˘uÆ), 
__LINE__
, (mesßge))

	)

486 
	#TEST_ASSERT_DOUBLE_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_DOUBLE_WITHIN
((dñè), (ex≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

487 
	#TEST_ASSERT_EQUAL_DOUBLE_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_DOUBLE
(”x≥˘ed), (a˘uÆ), 
__LINE__
, (mesßge))

	)

488 
	#TEST_ASSERT_EQUAL_DOUBLE_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

489 
	#TEST_ASSERT_EACH_EQUAL_DOUBLE_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EACH_EQUAL_DOUBLE
(”x≥˘ed), (a˘uÆ), (num_ñemíts), 
__LINE__
, (mesßge))

	)

490 
	#TEST_ASSERT_DOUBLE_IS_INF_MESSAGE
(
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_DOUBLE_IS_INF
(◊˘uÆ), 
__LINE__
, (mesßge))

	)

491 
	#TEST_ASSERT_DOUBLE_IS_NEG_INF_MESSAGE
(
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_DOUBLE_IS_NEG_INF
(◊˘uÆ), 
__LINE__
, (mesßge))

	)

492 
	#TEST_ASSERT_DOUBLE_IS_NAN_MESSAGE
(
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_DOUBLE_IS_NAN
(◊˘uÆ), 
__LINE__
, (mesßge))

	)

493 
	#TEST_ASSERT_DOUBLE_IS_DETERMINATE_MESSAGE
(
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_DOUBLE_IS_DETERMINATE
(◊˘uÆ), 
__LINE__
, (mesßge))

	)

494 
	#TEST_ASSERT_DOUBLE_IS_NOT_INF_MESSAGE
(
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_DOUBLE_IS_NOT_INF
(◊˘uÆ), 
__LINE__
, (mesßge))

	)

495 
	#TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF_MESSAGE
(
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF
(◊˘uÆ), 
__LINE__
, (mesßge))

	)

496 
	#TEST_ASSERT_DOUBLE_IS_NOT_NAN_MESSAGE
(
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_DOUBLE_IS_NOT_NAN
(◊˘uÆ), 
__LINE__
, (mesßge))

	)

497 
	#TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE_MESSAGE
(
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE
(◊˘uÆ), 
__LINE__
, (mesßge))

	)

500 #ifde‡
__˝lu•lus


	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/src/unity_internals.h

7 #i‚de‡
UNITY_INTERNALS_H


8 
	#UNITY_INTERNALS_H


	)

10 
	~"../exam∂es/unôy_c⁄fig.h
"

12 #i‚de‡
UNITY_EXCLUDE_SETJMP_H


13 
	~<£tjmp.h
>

16 #i‚de‡
UNITY_EXCLUDE_MATH_H


17 
	~<m©h.h
>

25 #i‚de‡
UNITY_EXCLUDE_STDINT_H


26 
	~<°döt.h
>

29 #i‚de‡
UNITY_EXCLUDE_LIMITS_H


30 
	~<limôs.h
>

41 #i‚de‡
UNITY_INT_WIDTH


42 #ifde‡
UINT_MAX


43 #i‡(
UINT_MAX
 == 0xFFFF)

44 
	#UNITY_INT_WIDTH
 (16)

	)

45 #ñi‡(
UINT_MAX
 == 0xFFFFFFFF)

46 
	#UNITY_INT_WIDTH
 (32)

	)

47 #ñi‡(
UINT_MAX
 == 0xFFFFFFFFFFFFFFFF)

48 
	#UNITY_INT_WIDTH
 (64)

	)

51 
	#UNITY_INT_WIDTH
 (32)

	)

56 #i‚de‡
UNITY_LONG_WIDTH


57 #ifde‡
ULONG_MAX


58 #i‡(
ULONG_MAX
 == 0xFFFF)

59 
	#UNITY_LONG_WIDTH
 (16)

	)

60 #ñi‡(
ULONG_MAX
 == 0xFFFFFFFF)

61 
	#UNITY_LONG_WIDTH
 (32)

	)

62 #ñi‡(
ULONG_MAX
 == 0xFFFFFFFFFFFFFFFF)

63 
	#UNITY_LONG_WIDTH
 (64)

	)

66 
	#UNITY_LONG_WIDTH
 (32)

	)

71 #i‚de‡
UNITY_POINTER_WIDTH


72 #ifde‡
UINTPTR_MAX


73 #i‡(
UINTPTR_MAX
 <= 0xFFFF)

74 
	#UNITY_POINTER_WIDTH
 (16)

	)

75 #ñi‡(
UINTPTR_MAX
 <= 0xFFFFFFFF)

76 
	#UNITY_POINTER_WIDTH
 (32)

	)

77 #ñi‡(
UINTPTR_MAX
 <= 0xFFFFFFFFFFFFFFFF)

78 
	#UNITY_POINTER_WIDTH
 (64)

	)

81 
	#UNITY_POINTER_WIDTH
 
UNITY_LONG_WIDTH


	)

89 #i‡(
UNITY_INT_WIDTH
 == 32)

90 
	tUNITY_UINT8
;

91 
	tUNITY_UINT16
;

92 
	tUNITY_UINT32
;

93 sig√d 
	tUNITY_INT8
;

94 sig√d 
	tUNITY_INT16
;

95 sig√d 
	tUNITY_INT32
;

96 #ñi‡(
UNITY_INT_WIDTH
 == 16)

97 
	tUNITY_UINT8
;

98 
	tUNITY_UINT16
;

99 
	tUNITY_UINT32
;

100 sig√d 
	tUNITY_INT8
;

101 sig√d 
	tUNITY_INT16
;

102 sig√d 
	tUNITY_INT32
;

104 #îr‹ 
InvÆid
 
UNITY_INT_WIDTH
 
•ecifõd
! (16 
‹
 32 
¨e
 
suµ‹ãd
)

111 #i‚de‡
UNITY_SUPPORT_64


112 #i‡
UNITY_LONG_WIDTH
 =64 || 
UNITY_POINTER_WIDTH
 == 64

113 
	#UNITY_SUPPORT_64


	)

117 #i‚de‡
UNITY_SUPPORT_64


119 
UNITY_UINT32
 
	tUNITY_UINT
;

120 
UNITY_INT32
 
	tUNITY_INT
;

124 #i‡(
UNITY_LONG_WIDTH
 == 32)

125 
	tUNITY_UINT64
;

126 sig√d 
	tUNITY_INT64
;

127 #ñi‡(
UNITY_LONG_WIDTH
 == 64)

128 
	tUNITY_UINT64
;

129 sig√d 
	tUNITY_INT64
;

131 #îr‹ 
InvÆid
 
UNITY_LONG_WIDTH
 
•ecifõd
! (32 
‹
 64 
¨e
 
suµ‹ãd
)

133 
UNITY_UINT64
 
	tUNITY_UINT
;

134 
UNITY_INT64
 
	tUNITY_INT
;

142 #i‡(
UNITY_POINTER_WIDTH
 == 32)

143 
	#UNITY_PTR_TO_INT
 
UNITY_INT32


	)

144 
	#UNITY_DISPLAY_STYLE_POINTER
 
UNITY_DISPLAY_STYLE_HEX32


	)

145 #ñi‡(
UNITY_POINTER_WIDTH
 == 64)

146 
	#UNITY_PTR_TO_INT
 
UNITY_INT64


	)

147 
	#UNITY_DISPLAY_STYLE_POINTER
 
UNITY_DISPLAY_STYLE_HEX64


	)

148 #ñi‡(
UNITY_POINTER_WIDTH
 == 16)

149 
	#UNITY_PTR_TO_INT
 
UNITY_INT16


	)

150 
	#UNITY_DISPLAY_STYLE_POINTER
 
UNITY_DISPLAY_STYLE_HEX16


	)

152 #îr‹ 
InvÆid
 
UNITY_POINTER_WIDTH
 
•ecifõd
! (16, 32 
‹
 64 
¨e
 
suµ‹ãd
)

155 #i‚de‡
UNITY_PTR_ATTRIBUTE


156 
	#UNITY_PTR_ATTRIBUTE


	)

159 #i‚de‡
UNITY_INTERNAL_PTR


160 
	#UNITY_INTERNAL_PTR
 
UNITY_PTR_ATTRIBUTE
 c⁄° *

	)

167 #ifde‡
UNITY_EXCLUDE_FLOAT


170 #i‚de‡
UNITY_EXCLUDE_DOUBLE


171 
	#UNITY_EXCLUDE_DOUBLE


	)

173 #i‚de‡
UNITY_EXCLUDE_FLOAT_PRINT


174 
	#UNITY_EXCLUDE_FLOAT_PRINT


	)

180 #i‚de‡
UNITY_FLOAT_PRECISION


181 
	#UNITY_FLOAT_PRECISION
 (0.00001f)

	)

183 #i‚de‡
UNITY_FLOAT_TYPE


184 
	#UNITY_FLOAT_TYPE
 

	)

186 
UNITY_FLOAT_TYPE
 
	tUNITY_FLOAT
;

189 #i‚de‡
isöf


191 
	#isöf
(
n
Ë(
	`i¢™
(“Ë- (n)Ë&& !i¢™“))

	)

194 #i‚de‡
i¢™


197 
	#i¢™
(
n
Ë(“ !nË? 1 : 0)

	)

207 #i‡
deföed
(
UNITY_EXCLUDE_DOUBLE
Ë|| !deföed(
UNITY_INCLUDE_DOUBLE
)

210 #i‚de‡
UNITY_EXCLUDE_DOUBLE


211 
	#UNITY_EXCLUDE_DOUBLE


	)

213 #unde‡
UNITY_INCLUDE_DOUBLE


216 #i‚de‡
UNITY_EXCLUDE_FLOAT


217 #i‚de‡
UNITY_DOUBLE_TYPE


218 
	#UNITY_DOUBLE_TYPE
 

	)

220 
UNITY_FLOAT
 
	tUNITY_DOUBLE
;

227 #i‚de‡
UNITY_DOUBLE_PRECISION


228 
	#UNITY_DOUBLE_PRECISION
 (1e-12)

	)

231 #i‚de‡
UNITY_DOUBLE_TYPE


232 
	#UNITY_DOUBLE_TYPE
 

	)

234 
UNITY_DOUBLE_TYPE
 
	tUNITY_DOUBLE
;

241 #i‚de‡
UNITY_OUTPUT_CHAR


243 
	~<°dio.h
>

244 
	#UNITY_OUTPUT_CHAR
(
a
Ë()
	`putch¨
◊)

	)

247 #ifde‡
UNITY_OUTPUT_CHAR_HEADER_DECLARATION


248 
UNITY_OUTPUT_CHAR_HEADER_DECLARATION
;

252 #i‚de‡
UNITY_OUTPUT_FLUSH


253 #ifde‡
UNITY_USE_FLUSH_STDOUT


255 
	~<°dio.h
>

256 
	#UNITY_OUTPUT_FLUSH
(Ë()
	`fÊush
(
°dout
)

	)

259 
	#UNITY_OUTPUT_FLUSH
()

	)

263 #ifde‡
UNITY_OUTPUT_FLUSH_HEADER_DECLARATION


264 
UNITY_OMIT_OUTPUT_FLUSH_HEADER_DECLARATION
;

268 #i‚de‡
UNITY_OUTPUT_FLUSH


269 
	#UNITY_FLUSH_CALL
()

	)

271 
	#UNITY_FLUSH_CALL
(Ë
	`UNITY_OUTPUT_FLUSH
()

	)

274 #i‚de‡
UNITY_PRINT_EOL


275 
	#UNITY_PRINT_EOL
(Ë
	`UNITY_OUTPUT_CHAR
('\n')

	)

278 #i‚de‡
UNITY_OUTPUT_START


279 
	#UNITY_OUTPUT_START
()

	)

282 #i‚de‡
UNITY_OUTPUT_COMPLETE


283 
	#UNITY_OUTPUT_COMPLETE
()

	)

290 #i‚de‡
UNITY_LINE_TYPE


291 
	#UNITY_LINE_TYPE
 
UNITY_UINT


	)

294 #i‚de‡
UNITY_COUNTER_TYPE


295 
	#UNITY_COUNTER_TYPE
 
UNITY_UINT


	)

301 #i‡!
deföed
(
UNITY_WEAK_ATTRIBUTE
Ë&& !deföed(
UNITY_WEAK_PRAGMA
)

302 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__ghs__
)

303 #i‡!(
deföed
(
__WIN32__
Ë&& deföed(
__˛™g__
)Ë&& !deföed(
__TMS470__
)

304 
	#UNITY_WEAK_ATTRIBUTE
 
	`__©åibuã__
((
wók
))

	)

309 #ifde‡
UNITY_NO_WEAK


310 #unde‡
UNITY_WEAK_ATTRIBUTE


311 #unde‡
UNITY_WEAK_PRAGMA


319 (*
	tUnôyTe°Fun˘i⁄
)();

321 
	#UNITY_DISPLAY_RANGE_INT
 (0x10)

	)

322 
	#UNITY_DISPLAY_RANGE_UINT
 (0x20)

	)

323 
	#UNITY_DISPLAY_RANGE_HEX
 (0x40)

	)

327 
UNITY_DISPLAY_STYLE_INT
 = ()+ 
UNITY_DISPLAY_RANGE_INT
,

328 
UNITY_DISPLAY_STYLE_INT8
 = 1 + 
UNITY_DISPLAY_RANGE_INT
,

329 
UNITY_DISPLAY_STYLE_INT16
 = 2 + 
UNITY_DISPLAY_RANGE_INT
,

330 
UNITY_DISPLAY_STYLE_INT32
 = 4 + 
UNITY_DISPLAY_RANGE_INT
,

331 #ifde‡
UNITY_SUPPORT_64


332 
UNITY_DISPLAY_STYLE_INT64
 = 8 + 
UNITY_DISPLAY_RANGE_INT
,

335 
UNITY_DISPLAY_STYLE_UINT
 = (Ë+ 
UNITY_DISPLAY_RANGE_UINT
,

336 
UNITY_DISPLAY_STYLE_UINT8
 = 1 + 
UNITY_DISPLAY_RANGE_UINT
,

337 
UNITY_DISPLAY_STYLE_UINT16
 = 2 + 
UNITY_DISPLAY_RANGE_UINT
,

338 
UNITY_DISPLAY_STYLE_UINT32
 = 4 + 
UNITY_DISPLAY_RANGE_UINT
,

339 #ifde‡
UNITY_SUPPORT_64


340 
UNITY_DISPLAY_STYLE_UINT64
 = 8 + 
UNITY_DISPLAY_RANGE_UINT
,

343 
UNITY_DISPLAY_STYLE_HEX8
 = 1 + 
UNITY_DISPLAY_RANGE_HEX
,

344 
UNITY_DISPLAY_STYLE_HEX16
 = 2 + 
UNITY_DISPLAY_RANGE_HEX
,

345 
UNITY_DISPLAY_STYLE_HEX32
 = 4 + 
UNITY_DISPLAY_RANGE_HEX
,

346 #ifde‡
UNITY_SUPPORT_64


347 
UNITY_DISPLAY_STYLE_HEX64
 = 8 + 
UNITY_DISPLAY_RANGE_HEX
,

350 
UNITY_DISPLAY_STYLE_UNKNOWN


351 } 
	tUNITY_DISPLAY_STYLE_T
;

355 
UNITY_EQUAL_TO
 = 1,

356 
UNITY_GREATER_THAN
 = 2,

357 
UNITY_GREATER_OR_EQUAL
 = 2 + 
UNITY_EQUAL_TO
,

358 
UNITY_SMALLER_THAN
 = 4,

359 
UNITY_SMALLER_OR_EQUAL
 = 4 + 
UNITY_EQUAL_TO


360 } 
	tUNITY_COMPARISON_T
;

362 #i‚de‡
UNITY_EXCLUDE_FLOAT


363 
	eUNITY_FLOAT_TRAIT


365 
UNITY_FLOAT_IS_NOT_INF
 = 0,

366 
UNITY_FLOAT_IS_INF
,

367 
UNITY_FLOAT_IS_NOT_NEG_INF
,

368 
UNITY_FLOAT_IS_NEG_INF
,

369 
UNITY_FLOAT_IS_NOT_NAN
,

370 
UNITY_FLOAT_IS_NAN
,

371 
UNITY_FLOAT_IS_NOT_DET
,

372 
UNITY_FLOAT_IS_DET
,

373 
UNITY_FLOAT_INVALID_TRAIT


374 } 
	tUNITY_FLOAT_TRAIT_T
;

379 
UNITY_ARRAY_TO_VAL
 = 0,

380 
UNITY_ARRAY_TO_ARRAY


381 } 
	tUNITY_FLAGS_T
;

383 
	sUNITY_STORAGE_T


385 c⁄° * 
Te°Fûe
;

386 c⁄° * 
CuºítTe°Name
;

387 #i‚de‡
UNITY_EXCLUDE_DETAILS


388 c⁄° * 
CuºítDëaû1
;

389 c⁄° * 
CuºítDëaû2
;

391 
UNITY_LINE_TYPE
 
CuºítTe°LöeNumbî
;

392 
UNITY_COUNTER_TYPE
 
NumbîOfTe°s
;

393 
UNITY_COUNTER_TYPE
 
Te°Faûuªs
;

394 
UNITY_COUNTER_TYPE
 
Te°Ign‹es
;

395 
UNITY_COUNTER_TYPE
 
CuºítTe°Faûed
;

396 
UNITY_COUNTER_TYPE
 
CuºítTe°Ign‹ed
;

397 #i‚de‡
UNITY_EXCLUDE_SETJMP_H


398 
jmp_buf
 
Ab‹tFøme
;

402 
UNITY_STORAGE_T
 
Unôy
;

408 
	`UnôyBegö
(c⁄° * 
fûíame
);

409 
	`UnôyEnd
();

410 
	`UnôyC⁄˛udeTe°
();

411 
	`UnôyDeÁu…Te°Run
(
UnôyTe°Fun˘i⁄
 
Func
, c⁄° * 
FuncName
, c⁄° 
FuncLöeNum
);

417 #ifde‡
UNITY_EXCLUDE_DETAILS


418 
	#UNITY_CLR_DETAILS
()

	)

419 
	#UNITY_SET_DETAIL
(
d1
)

	)

420 
	#UNITY_SET_DETAILS
(
d1
,
d2
)

	)

422 
	#UNITY_CLR_DETAILS
(Ë{ 
Unôy
.
CuºítDëaû1
 = 0; Unôy.
CuºítDëaû2
 = 0; 
	}

	)
}

423 
	#UNITY_SET_DETAIL
(
d1
Ë{ 
Unôy
.
CuºítDëaû1
 = d1; Unôy.
CuºítDëaû2
 = 0; }

	)

424 
	#UNITY_SET_DETAILS
(
d1
,
d2
Ë{ 
Unôy
.
CuºítDëaû1
 = d1; Unôy.
CuºítDëaû2
 = d2; }

	)

426 #i‚de‡
UNITY_DETAIL1_NAME


427 
	#UNITY_DETAIL1_NAME
 "Fun˘i⁄"

	)

430 #i‚de‡
UNITY_DETAIL2_NAME


431 
	#UNITY_DETAIL2_NAME
 "Argumít"

	)

439 
UnôyPröt
(c⁄° * 
°rög
);

440 
UnôyPrötLí
(c⁄° * 
°rög
, c⁄° 
UNITY_UINT32
 
Àngth
);

441 
UnôyPrötMask
(c⁄° 
UNITY_UINT
 
mask
, c⁄° UNITY_UINT 
numbî
);

442 
UnôyPrötNumbîByStyÀ
(c⁄° 
UNITY_INT
 
numbî
, c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
);

443 
UnôyPrötNumbî
(c⁄° 
UNITY_INT
 
numbî
);

444 
UnôyPrötNumbîUnsig√d
(c⁄° 
UNITY_UINT
 
numbî
);

445 
UnôyPrötNumbîHex
(c⁄° 
UNITY_UINT
 
numbî
, c⁄° 
nibbÀs
);

447 #i‚de‡
UNITY_EXCLUDE_FLOAT_PRINT


448 
UnôyPrötFlﬂt
(c⁄° 
UNITY_DOUBLE
 
öput_numbî
);

459 
UnôyAs£πEquÆNumbî
(c⁄° 
UNITY_INT
 
ex≥˘ed
,

460 c⁄° 
UNITY_INT
 
a˘uÆ
,

461 c⁄° * 
msg
,

462 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

463 c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
);

465 
UnôyAs£πGª©îOrLessOrEquÆNumbî
(c⁄° 
UNITY_INT
 
thªshﬁd
,

466 c⁄° 
UNITY_INT
 
a˘uÆ
,

467 c⁄° 
UNITY_COMPARISON_T
 
com∑ª
,

468 c⁄° *
msg
,

469 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

470 c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
);

472 
UnôyAs£πEquÆI¡Aºay
(
UNITY_INTERNAL_PTR
 
ex≥˘ed
,

473 
UNITY_INTERNAL_PTR
 
a˘uÆ
,

474 c⁄° 
UNITY_UINT32
 
num_ñemíts
,

475 c⁄° * 
msg
,

476 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

477 c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
,

478 c⁄° 
UNITY_FLAGS_T
 
Êags
);

480 
UnôyAs£πBôs
(c⁄° 
UNITY_INT
 
mask
,

481 c⁄° 
UNITY_INT
 
ex≥˘ed
,

482 c⁄° 
UNITY_INT
 
a˘uÆ
,

483 c⁄° * 
msg
,

484 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
);

486 
UnôyAs£πEquÆSåög
(c⁄° * 
ex≥˘ed
,

487 c⁄° * 
a˘uÆ
,

488 c⁄° * 
msg
,

489 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
);

491 
UnôyAs£πEquÆSåögLí
(c⁄° * 
ex≥˘ed
,

492 c⁄° * 
a˘uÆ
,

493 c⁄° 
UNITY_UINT32
 
Àngth
,

494 c⁄° * 
msg
,

495 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
);

497 
UnôyAs£πEquÆSåögAºay
–
UNITY_INTERNAL_PTR
 
ex≥˘ed
,

498 c⁄° ** 
a˘uÆ
,

499 c⁄° 
UNITY_UINT32
 
num_ñemíts
,

500 c⁄° * 
msg
,

501 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

502 c⁄° 
UNITY_FLAGS_T
 
Êags
);

504 
UnôyAs£πEquÆMem‹y
–
UNITY_INTERNAL_PTR
 
ex≥˘ed
,

505 
UNITY_INTERNAL_PTR
 
a˘uÆ
,

506 c⁄° 
UNITY_UINT32
 
Àngth
,

507 c⁄° 
UNITY_UINT32
 
num_ñemíts
,

508 c⁄° * 
msg
,

509 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

510 c⁄° 
UNITY_FLAGS_T
 
Êags
);

512 
UnôyAs£πNumbîsWôhö
(c⁄° 
UNITY_UINT
 
dñè
,

513 c⁄° 
UNITY_INT
 
ex≥˘ed
,

514 c⁄° 
UNITY_INT
 
a˘uÆ
,

515 c⁄° * 
msg
,

516 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

517 c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
);

519 
UnôyFaû
(c⁄° * 
mesßge
, c⁄° 
UNITY_LINE_TYPE
 
löe
);

521 
UnôyIgn‹e
(c⁄° * 
mesßge
, c⁄° 
UNITY_LINE_TYPE
 
löe
);

523 #i‚de‡
UNITY_EXCLUDE_FLOAT


524 
UnôyAs£πFlﬂtsWôhö
(c⁄° 
UNITY_FLOAT
 
dñè
,

525 c⁄° 
UNITY_FLOAT
 
ex≥˘ed
,

526 c⁄° 
UNITY_FLOAT
 
a˘uÆ
,

527 c⁄° * 
msg
,

528 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
);

530 
UnôyAs£πEquÆFlﬂtAºay
(
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_FLOAT
* 
ex≥˘ed
,

531 
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_FLOAT
* 
a˘uÆ
,

532 c⁄° 
UNITY_UINT32
 
num_ñemíts
,

533 c⁄° * 
msg
,

534 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

535 c⁄° 
UNITY_FLAGS_T
 
Êags
);

537 
UnôyAs£πFlﬂtS≥cül
(c⁄° 
UNITY_FLOAT
 
a˘uÆ
,

538 c⁄° * 
msg
,

539 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

540 c⁄° 
UNITY_FLOAT_TRAIT_T
 
°yÀ
);

543 #i‚de‡
UNITY_EXCLUDE_DOUBLE


544 
UnôyAs£πDoubÀsWôhö
(c⁄° 
UNITY_DOUBLE
 
dñè
,

545 c⁄° 
UNITY_DOUBLE
 
ex≥˘ed
,

546 c⁄° 
UNITY_DOUBLE
 
a˘uÆ
,

547 c⁄° * 
msg
,

548 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
);

550 
UnôyAs£πEquÆDoubÀAºay
(
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_DOUBLE
* 
ex≥˘ed
,

551 
UNITY_PTR_ATTRIBUTE
 c⁄° 
UNITY_DOUBLE
* 
a˘uÆ
,

552 c⁄° 
UNITY_UINT32
 
num_ñemíts
,

553 c⁄° * 
msg
,

554 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

555 c⁄° 
UNITY_FLAGS_T
 
Êags
);

557 
UnôyAs£πDoubÀS≥cül
(c⁄° 
UNITY_DOUBLE
 
a˘uÆ
,

558 c⁄° * 
msg
,

559 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

560 c⁄° 
UNITY_FLOAT_TRAIT_T
 
°yÀ
);

567 
UNITY_INTERNAL_PTR
 
UnôyNumToPå
(c⁄° 
UNITY_INT
 
num
, c⁄° 
UNITY_UINT8
 
size
);

568 #i‚de‡
UNITY_EXCLUDE_FLOAT


569 
UNITY_INTERNAL_PTR
 
UnôyFlﬂtToPå
(c⁄° 
num
);

571 #i‚de‡
UNITY_EXCLUDE_DOUBLE


572 
UNITY_INTERNAL_PTR
 
UnôyDoubÀToPå
(c⁄° 
num
);

579 c⁄° 
UnôySåEºFlﬂt
[];

580 c⁄° 
UnôySåEºDoubÀ
[];

581 c⁄° 
UnôySåEº64
[];

587 #i‚de‡
UNITY_EXCLUDE_SETJMP_H


588 
	#TEST_PROTECT
(Ë(
	`£tjmp
(
Unôy
.
Ab‹tFøme
Ë=0)

	)

589 
	#TEST_ABORT
(Ë
	`l⁄gjmp
(
Unôy
.
Ab‹tFøme
, 1)

	)

591 
	#TEST_PROTECT
(Ë1

	)

592 
	#TEST_ABORT
(Ë

	)

596 #i‚de‡
RUN_TEST


597 #ifde‡
__STDC_VERSION__


598 #i‡
__STDC_VERSION__
 >= 199901L

599 
	#RUN_TEST
(...Ë
	`UnôyDeÁu…Te°Run
(
	`RUN_TEST_FIRST
(
__VA_ARGS__
), 
	`RUN_TEST_SECOND
(__VA_ARGS__))

	)

600 
	#RUN_TEST_FIRST
(...Ë
	`RUN_TEST_FIRST_HELPER
(
__VA_ARGS__
, 
throwaway
)

	)

601 
	#RUN_TEST_FIRST_HELPER
(
fú°
, ...Ë(fú°), #fú°

	)

602 
	#RUN_TEST_SECOND
(...Ë
	`RUN_TEST_SECOND_HELPER
(
__VA_ARGS__
, 
__LINE__
, 
throwaway
)

	)

603 
	#RUN_TEST_SECOND_HELPER
(
fú°
, 
£c⁄d
, ...Ë(£c⁄d)

	)

609 #i‚de‡
RUN_TEST


610 #ifde‡
CMOCK


611 
	#RUN_TEST
(
func
, 
num
Ë
	`UnôyDeÁu…Te°Run
(func, #func,Çum)

	)

613 
	#RUN_TEST
(
func
Ë
	`UnôyDeÁu…Te°Run
(func, #func, 
__LINE__
)

	)

617 
	#TEST_LINE_NUM
 (
Unôy
.
CuºítTe°LöeNumbî
)

	)

618 
	#TEST_IS_IGNORED
 (
Unôy
.
CuºítTe°Ign‹ed
)

	)

619 
	#UNITY_NEW_TEST
(
a
) \

620 
Unôy
.
CuºítTe°Name
 = (
a
); \

621 
Unôy
.
CuºítTe°LöeNumbî
 = (
UNITY_LINE_TYPE
)(
__LINE__
); \

622 
Unôy
.
NumbîOfTe°s
++;

	)

624 #i‚de‡
UNITY_BEGIN


625 
	#UNITY_BEGIN
(Ë
	`UnôyBegö
(
__FILE__
)

	)

628 #i‚de‡
UNITY_END


629 
	#UNITY_END
(Ë
	`UnôyEnd
()

	)

636 #ifde‡
UNITY_USE_COMMAND_LINE_ARGS


637 
UnôyP¨£O±i⁄s
(
¨gc
, ** 
¨gv
);

638 
UnôyTe°M©ches
();

645 
	#UNITY_TEST_FAIL
(
löe
, 
mesßge
Ë
	`UnôyFaû
–(mesßge), (
UNITY_LINE_TYPE
)÷öe))

	)

646 
	#UNITY_TEST_IGNORE
(
löe
, 
mesßge
Ë
	`UnôyIgn‹e
–(mesßge), (
UNITY_LINE_TYPE
)÷öe))

	)

652 
	#UNITY_TEST_ASSERT
(
c⁄dôi⁄
, 
löe
, 
mesßge
Ëi‡(c⁄dôi⁄Ë{} {
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), (mesßge));}

	)

653 
	#UNITY_TEST_ASSERT_NULL
(
poöãr
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_ASSERT
((’oöãrË=
NULL
), (
UNITY_LINE_TYPE
)÷öe), (mesßge))

	)

654 
	#UNITY_TEST_ASSERT_NOT_NULL
(
poöãr
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_ASSERT
((’oöãrË!
NULL
), (
UNITY_LINE_TYPE
)÷öe), (mesßge))

	)

656 
	#UNITY_TEST_ASSERT_EQUAL_INT
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
UNITY_INT
)”x≥˘ed), (UNITY_INT)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT
)

	)

657 
	#UNITY_TEST_ASSERT_EQUAL_INT8
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
UNITY_INT
)(
UNITY_INT8
 )”x≥˘ed), (UNITY_INT)(UNITY_INT8 )◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT8
)

	)

658 
	#UNITY_TEST_ASSERT_EQUAL_INT16
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
UNITY_INT
)(
UNITY_INT16
)”x≥˘ed), (UNITY_INT)(UNITY_INT16)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT16
)

	)

659 
	#UNITY_TEST_ASSERT_EQUAL_INT32
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
UNITY_INT
)(
UNITY_INT32
)”x≥˘ed), (UNITY_INT)(UNITY_INT32)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT32
)

	)

660 
	#UNITY_TEST_ASSERT_EQUAL_UINT
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
UNITY_INT
)”x≥˘ed), (UNITY_INT)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT
)

	)

661 
	#UNITY_TEST_ASSERT_EQUAL_UINT8
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT8
 )”x≥˘ed), (UNITY_INT)(UNITY_UINT8 )◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT8
)

	)

662 
	#UNITY_TEST_ASSERT_EQUAL_UINT16
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT16
)”x≥˘ed), (UNITY_INT)(UNITY_UINT16)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT16
)

	)

663 
	#UNITY_TEST_ASSERT_EQUAL_UINT32
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT32
)”x≥˘ed), (UNITY_INT)(UNITY_UINT32)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT32
)

	)

664 
	#UNITY_TEST_ASSERT_EQUAL_HEX8
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
UNITY_INT
)(
UNITY_INT8
 )”x≥˘ed), (UNITY_INT)(UNITY_INT8 )◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX8
)

	)

665 
	#UNITY_TEST_ASSERT_EQUAL_HEX16
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
UNITY_INT
)(
UNITY_INT16
)”x≥˘ed), (UNITY_INT)(UNITY_INT16)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX16
)

	)

666 
	#UNITY_TEST_ASSERT_EQUAL_HEX32
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
UNITY_INT
)(
UNITY_INT32
)”x≥˘ed), (UNITY_INT)(UNITY_INT32)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX32
)

	)

667 
	#UNITY_TEST_ASSERT_BITS
(
mask
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πBôs
((
UNITY_INT
)(mask), (UNITY_INT)”x≥˘ed), (UNITY_INT)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe))

	)

669 
	#UNITY_TEST_ASSERT_GREATER_THAN_INT
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_GREATER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT
)

	)

670 
	#UNITY_TEST_ASSERT_GREATER_THAN_INT8
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_INT8
 )—hªshﬁd), (UNITY_INT)(UNITY_INT8 )◊˘uÆ), 
UNITY_GREATER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT8
)

	)

671 
	#UNITY_TEST_ASSERT_GREATER_THAN_INT16
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_INT16
)—hªshﬁd), (UNITY_INT)(UNITY_INT16)◊˘uÆ), 
UNITY_GREATER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT16
)

	)

672 
	#UNITY_TEST_ASSERT_GREATER_THAN_INT32
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_INT32
)—hªshﬁd), (UNITY_INT)(UNITY_INT32)◊˘uÆ), 
UNITY_GREATER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT32
)

	)

673 
	#UNITY_TEST_ASSERT_GREATER_THAN_UINT
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_GREATER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT
)

	)

674 
	#UNITY_TEST_ASSERT_GREATER_THAN_UINT8
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT8
 )—hªshﬁd), (UNITY_INT)(UNITY_UINT8 )◊˘uÆ), 
UNITY_GREATER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT8
)

	)

675 
	#UNITY_TEST_ASSERT_GREATER_THAN_UINT16
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT16
)—hªshﬁd), (UNITY_INT)(UNITY_UINT16)◊˘uÆ), 
UNITY_GREATER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT16
)

	)

676 
	#UNITY_TEST_ASSERT_GREATER_THAN_UINT32
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT32
)—hªshﬁd), (UNITY_INT)(UNITY_UINT32)◊˘uÆ), 
UNITY_GREATER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT32
)

	)

677 
	#UNITY_TEST_ASSERT_GREATER_THAN_HEX8
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT8
 )—hªshﬁd), (UNITY_INT)(UNITY_UINT8 )◊˘uÆ), 
UNITY_GREATER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX8
)

	)

678 
	#UNITY_TEST_ASSERT_GREATER_THAN_HEX16
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT16
)—hªshﬁd), (UNITY_INT)(UNITY_UINT16)◊˘uÆ), 
UNITY_GREATER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX16
)

	)

679 
	#UNITY_TEST_ASSERT_GREATER_THAN_HEX32
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT32
)—hªshﬁd), (UNITY_INT)(UNITY_UINT32)◊˘uÆ), 
UNITY_GREATER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX32
)

	)

681 
	#UNITY_TEST_ASSERT_SMALLER_THAN_INT
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_SMALLER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT
)

	)

682 
	#UNITY_TEST_ASSERT_SMALLER_THAN_INT8
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_INT8
 )—hªshﬁd), (UNITY_INT)(UNITY_INT8 )◊˘uÆ), 
UNITY_SMALLER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT8
)

	)

683 
	#UNITY_TEST_ASSERT_SMALLER_THAN_INT16
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_INT16
)—hªshﬁd), (UNITY_INT)(UNITY_INT16)◊˘uÆ), 
UNITY_SMALLER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT16
)

	)

684 
	#UNITY_TEST_ASSERT_SMALLER_THAN_INT32
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_INT32
)—hªshﬁd), (UNITY_INT)(UNITY_INT32)◊˘uÆ), 
UNITY_SMALLER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT32
)

	)

685 
	#UNITY_TEST_ASSERT_SMALLER_THAN_UINT
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_SMALLER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT
)

	)

686 
	#UNITY_TEST_ASSERT_SMALLER_THAN_UINT8
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT8
 )—hªshﬁd), (UNITY_INT)(UNITY_UINT8 )◊˘uÆ), 
UNITY_SMALLER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT8
)

	)

687 
	#UNITY_TEST_ASSERT_SMALLER_THAN_UINT16
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT16
)—hªshﬁd), (UNITY_INT)(UNITY_UINT16)◊˘uÆ), 
UNITY_SMALLER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT16
)

	)

688 
	#UNITY_TEST_ASSERT_SMALLER_THAN_UINT32
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT32
)—hªshﬁd), (UNITY_INT)(UNITY_UINT32)◊˘uÆ), 
UNITY_SMALLER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT32
)

	)

689 
	#UNITY_TEST_ASSERT_SMALLER_THAN_HEX8
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT8
 )—hªshﬁd), (UNITY_INT)(UNITY_UINT8 )◊˘uÆ), 
UNITY_SMALLER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX8
)

	)

690 
	#UNITY_TEST_ASSERT_SMALLER_THAN_HEX16
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT16
)—hªshﬁd), (UNITY_INT)(UNITY_UINT16)◊˘uÆ), 
UNITY_SMALLER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX16
)

	)

691 
	#UNITY_TEST_ASSERT_SMALLER_THAN_HEX32
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT32
)—hªshﬁd), (UNITY_INT)(UNITY_UINT32)◊˘uÆ), 
UNITY_SMALLER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX32
)

	)

693 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_GREATER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT
)

	)

694 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT8
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_INT8
 )—hªshﬁd), (UNITY_INT)(UNITY_INT8 )◊˘uÆ), 
UNITY_GREATER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT8
)

	)

695 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT16
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_INT16
)—hªshﬁd), (UNITY_INT)(UNITY_INT16)◊˘uÆ), 
UNITY_GREATER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT16
)

	)

696 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT32
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_INT32
)—hªshﬁd), (UNITY_INT)(UNITY_INT32)◊˘uÆ), 
UNITY_GREATER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT32
)

	)

697 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_GREATER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT
)

	)

698 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT8
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT8
 )—hªshﬁd), (UNITY_INT)(UNITY_UINT8 )◊˘uÆ), 
UNITY_GREATER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT8
)

	)

699 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT16
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT16
)—hªshﬁd), (UNITY_INT)(UNITY_UINT16)◊˘uÆ), 
UNITY_GREATER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT16
)

	)

700 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT32
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT32
)—hªshﬁd), (UNITY_INT)(UNITY_UINT32)◊˘uÆ), 
UNITY_GREATER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT32
)

	)

701 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX8
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT8
 )—hªshﬁd), (UNITY_INT)(UNITY_UINT8 )◊˘uÆ), 
UNITY_GREATER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX8
)

	)

702 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX16
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT16
)—hªshﬁd), (UNITY_INT)(UNITY_UINT16)◊˘uÆ), 
UNITY_GREATER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX16
)

	)

703 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX32
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT32
)—hªshﬁd), (UNITY_INT)(UNITY_UINT32)◊˘uÆ), 
UNITY_GREATER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX32
)

	)

705 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_SMALLER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT
)

	)

706 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT8
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_INT8
 )—hªshﬁd), (UNITY_INT)(UNITY_INT8 )◊˘uÆ), 
UNITY_SMALLER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT8
)

	)

707 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT16
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_INT16
)—hªshﬁd), (UNITY_INT)(UNITY_INT16)◊˘uÆ), 
UNITY_SMALLER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT16
)

	)

708 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT32
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_INT32
)—hªshﬁd), (UNITY_INT)(UNITY_INT32)◊˘uÆ), 
UNITY_SMALLER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT32
)

	)

709 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_SMALLER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT
)

	)

710 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT8
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT8
 )—hªshﬁd), (UNITY_INT)(UNITY_UINT8 )◊˘uÆ), 
UNITY_SMALLER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT8
)

	)

711 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT16
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT16
)—hªshﬁd), (UNITY_INT)(UNITY_UINT16)◊˘uÆ), 
UNITY_SMALLER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT16
)

	)

712 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT32
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT32
)—hªshﬁd), (UNITY_INT)(UNITY_UINT32)◊˘uÆ), 
UNITY_SMALLER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT32
)

	)

713 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX8
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT8
 )—hªshﬁd), (UNITY_INT)(UNITY_UINT8 )◊˘uÆ), 
UNITY_SMALLER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX8
)

	)

714 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX16
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT16
)—hªshﬁd), (UNITY_INT)(UNITY_UINT16)◊˘uÆ), 
UNITY_SMALLER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX16
)

	)

715 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX32
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)(
UNITY_UINT32
)—hªshﬁd), (UNITY_INT)(UNITY_UINT32)◊˘uÆ), 
UNITY_SMALLER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX32
)

	)

717 
	#UNITY_TEST_ASSERT_INT_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((dñè), (
UNITY_INT
)”x≥˘ed), (UNITY_INT)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT
)

	)

718 
	#UNITY_TEST_ASSERT_INT8_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((
UNITY_UINT8
 )(dñè), (
UNITY_INT
)(
UNITY_INT8
 )”x≥˘ed), (UNITY_INT)(UNITY_INT8 )◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT8
)

	)

719 
	#UNITY_TEST_ASSERT_INT16_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((
UNITY_UINT16
)(dñè), (
UNITY_INT
)(
UNITY_INT16
)”x≥˘ed), (UNITY_INT)(UNITY_INT16)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT16
)

	)

720 
	#UNITY_TEST_ASSERT_INT32_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((
UNITY_UINT32
)(dñè), (
UNITY_INT
)(
UNITY_INT32
)”x≥˘ed), (UNITY_INT)(UNITY_INT32)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT32
)

	)

721 
	#UNITY_TEST_ASSERT_UINT_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((dñè), (
UNITY_INT
)”x≥˘ed), (UNITY_INT)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT
)

	)

722 
	#UNITY_TEST_ASSERT_UINT8_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((
UNITY_UINT8
 )(dñè), (
UNITY_INT
)(
UNITY_UINT
)(UNITY_UINT8 )”x≥˘ed), (UNITY_INT)(UNITY_UINT)(UNITY_UINT8 )◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT8
)

	)

723 
	#UNITY_TEST_ASSERT_UINT16_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((
UNITY_UINT16
)(dñè), (
UNITY_INT
)(
UNITY_UINT
)(UNITY_UINT16)”x≥˘ed), (UNITY_INT)(UNITY_UINT)(UNITY_UINT16)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT16
)

	)

724 
	#UNITY_TEST_ASSERT_UINT32_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((
UNITY_UINT32
)(dñè), (
UNITY_INT
)(
UNITY_UINT
)(UNITY_UINT32)”x≥˘ed), (UNITY_INT)(UNITY_UINT)(UNITY_UINT32)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT32
)

	)

725 
	#UNITY_TEST_ASSERT_HEX8_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((
UNITY_UINT8
 )(dñè), (
UNITY_INT
)(
UNITY_UINT
)(UNITY_UINT8 )”x≥˘ed), (UNITY_INT)(UNITY_UINT)(UNITY_UINT8 )◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX8
)

	)

726 
	#UNITY_TEST_ASSERT_HEX16_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((
UNITY_UINT16
)(dñè), (
UNITY_INT
)(
UNITY_UINT
)(UNITY_UINT16)”x≥˘ed), (UNITY_INT)(UNITY_UINT)(UNITY_UINT16)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX16
)

	)

727 
	#UNITY_TEST_ASSERT_HEX32_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((
UNITY_UINT32
)(dñè), (
UNITY_INT
)(
UNITY_UINT
)(UNITY_UINT32)”x≥˘ed), (UNITY_INT)(UNITY_UINT)(UNITY_UINT32)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX32
)

	)

729 
	#UNITY_TEST_ASSERT_EQUAL_PTR
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
UNITY_PTR_TO_INT
)”x≥˘ed), (UNITY_PTR_TO_INT)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_POINTER
)

	)

730 
	#UNITY_TEST_ASSERT_EQUAL_STRING
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆSåög
((c⁄° *)”x≥˘ed), (c⁄° *)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe))

	)

731 
	#UNITY_TEST_ASSERT_EQUAL_STRING_LEN
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆSåögLí
((c⁄° *)”x≥˘ed), (c⁄° *)◊˘uÆ), (
UNITY_UINT32
)÷í), (mesßge), (
UNITY_LINE_TYPE
)÷öe))

	)

732 
	#UNITY_TEST_ASSERT_EQUAL_MEMORY
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆMem‹y
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)÷í), 1, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_ARRAY_TO_ARRAY
)

	)

734 
	#UNITY_TEST_ASSERT_EQUAL_INT_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT
, 
UNITY_ARRAY_TO_ARRAY
)

	)

735 
	#UNITY_TEST_ASSERT_EQUAL_INT8_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT8
, 
UNITY_ARRAY_TO_ARRAY
)

	)

736 
	#UNITY_TEST_ASSERT_EQUAL_INT16_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT16
, 
UNITY_ARRAY_TO_ARRAY
)

	)

737 
	#UNITY_TEST_ASSERT_EQUAL_INT32_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT32
, 
UNITY_ARRAY_TO_ARRAY
)

	)

738 
	#UNITY_TEST_ASSERT_EQUAL_UINT_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT
, 
UNITY_ARRAY_TO_ARRAY
)

	)

739 
	#UNITY_TEST_ASSERT_EQUAL_UINT8_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT8
, 
UNITY_ARRAY_TO_ARRAY
)

	)

740 
	#UNITY_TEST_ASSERT_EQUAL_UINT16_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT16
, 
UNITY_ARRAY_TO_ARRAY
)

	)

741 
	#UNITY_TEST_ASSERT_EQUAL_UINT32_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT32
, 
UNITY_ARRAY_TO_ARRAY
)

	)

742 
	#UNITY_TEST_ASSERT_EQUAL_HEX8_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX8
, 
UNITY_ARRAY_TO_ARRAY
)

	)

743 
	#UNITY_TEST_ASSERT_EQUAL_HEX16_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX16
, 
UNITY_ARRAY_TO_ARRAY
)

	)

744 
	#UNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX32
, 
UNITY_ARRAY_TO_ARRAY
)

	)

745 
	#UNITY_TEST_ASSERT_EQUAL_PTR_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_POINTER
, 
UNITY_ARRAY_TO_ARRAY
)

	)

746 
	#UNITY_TEST_ASSERT_EQUAL_STRING_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆSåögAºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (c⁄° **)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_ARRAY_TO_ARRAY
)

	)

747 
	#UNITY_TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆMem‹y
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)÷í), (UNITY_UINT32)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_ARRAY_TO_ARRAY
)

	)

749 
	#UNITY_TEST_ASSERT_EACH_EQUAL_INT
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
(
	`UnôyNumToPå
((
UNITY_INT
Ëex≥˘ed, ()), (
UNITY_INTERNAL_PTR
)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT
, 
UNITY_ARRAY_TO_VAL
)

	)

750 
	#UNITY_TEST_ASSERT_EACH_EQUAL_INT8
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
(
	`UnôyNumToPå
((
UNITY_INT
)(
UNITY_INT8
 )ex≥˘ed, 1), (
UNITY_INTERNAL_PTR
)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT8
, 
UNITY_ARRAY_TO_VAL
)

	)

751 
	#UNITY_TEST_ASSERT_EACH_EQUAL_INT16
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
(
	`UnôyNumToPå
((
UNITY_INT
)(
UNITY_INT16
 )ex≥˘ed, 2), (
UNITY_INTERNAL_PTR
)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT16
, 
UNITY_ARRAY_TO_VAL
)

	)

752 
	#UNITY_TEST_ASSERT_EACH_EQUAL_INT32
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
(
	`UnôyNumToPå
((
UNITY_INT
)(
UNITY_INT32
 )ex≥˘ed, 4), (
UNITY_INTERNAL_PTR
)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT32
, 
UNITY_ARRAY_TO_VAL
)

	)

753 
	#UNITY_TEST_ASSERT_EACH_EQUAL_UINT
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
(
	`UnôyNumToPå
((
UNITY_INT
Ëex≥˘ed, ()), (
UNITY_INTERNAL_PTR
)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT
, 
UNITY_ARRAY_TO_VAL
)

	)

754 
	#UNITY_TEST_ASSERT_EACH_EQUAL_UINT8
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
(
	`UnôyNumToPå
((
UNITY_INT
)(
UNITY_UINT8
 )ex≥˘ed, 1), (
UNITY_INTERNAL_PTR
)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT8
, 
UNITY_ARRAY_TO_VAL
)

	)

755 
	#UNITY_TEST_ASSERT_EACH_EQUAL_UINT16
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
(
	`UnôyNumToPå
((
UNITY_INT
)(
UNITY_UINT16
Îx≥˘ed, 2), (
UNITY_INTERNAL_PTR
)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT16
, 
UNITY_ARRAY_TO_VAL
)

	)

756 
	#UNITY_TEST_ASSERT_EACH_EQUAL_UINT32
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
(
	`UnôyNumToPå
((
UNITY_INT
)(
UNITY_UINT32
Îx≥˘ed, 4), (
UNITY_INTERNAL_PTR
)◊˘uÆ), (UNITY_UINT32)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT32
, 
UNITY_ARRAY_TO_VAL
)

	)

757 
	#UNITY_TEST_ASSERT_EACH_EQUAL_HEX8
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
(
	`UnôyNumToPå
((
UNITY_INT
)(
UNITY_INT8
 )ex≥˘ed, 1), (
UNITY_INTERNAL_PTR
)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX8
, 
UNITY_ARRAY_TO_VAL
)

	)

758 
	#UNITY_TEST_ASSERT_EACH_EQUAL_HEX16
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
(
	`UnôyNumToPå
((
UNITY_INT
)(
UNITY_INT16
 )ex≥˘ed, 2), (
UNITY_INTERNAL_PTR
)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX16
, 
UNITY_ARRAY_TO_VAL
)

	)

759 
	#UNITY_TEST_ASSERT_EACH_EQUAL_HEX32
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
(
	`UnôyNumToPå
((
UNITY_INT
)(
UNITY_INT32
 )ex≥˘ed, 4), (
UNITY_INTERNAL_PTR
)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX32
, 
UNITY_ARRAY_TO_VAL
)

	)

760 
	#UNITY_TEST_ASSERT_EACH_EQUAL_PTR
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
(
	`UnôyNumToPå
((
UNITY_PTR_TO_INT
Ëex≥˘ed, (*)), (
UNITY_INTERNAL_PTR
)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_POINTER
, 
UNITY_ARRAY_TO_VAL
)

	)

761 
	#UNITY_TEST_ASSERT_EACH_EQUAL_STRING
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆSåögAºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (c⁄° **)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_ARRAY_TO_VAL
)

	)

762 
	#UNITY_TEST_ASSERT_EACH_EQUAL_MEMORY
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆMem‹y
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)÷í), (UNITY_UINT32)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_ARRAY_TO_VAL
)

	)

764 #ifde‡
UNITY_SUPPORT_64


765 
	#UNITY_TEST_ASSERT_EQUAL_INT64
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
UNITY_INT
)”x≥˘ed), (UNITY_INT)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT64
)

	)

766 
	#UNITY_TEST_ASSERT_EQUAL_UINT64
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
UNITY_INT
)”x≥˘ed), (UNITY_INT)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT64
)

	)

767 
	#UNITY_TEST_ASSERT_EQUAL_HEX64
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
UNITY_INT
)”x≥˘ed), (UNITY_INT)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX64
)

	)

768 
	#UNITY_TEST_ASSERT_EQUAL_INT64_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT64
, 
UNITY_ARRAY_TO_ARRAY
)

	)

769 
	#UNITY_TEST_ASSERT_EQUAL_UINT64_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT64
, 
UNITY_ARRAY_TO_ARRAY
)

	)

770 
	#UNITY_TEST_ASSERT_EQUAL_HEX64_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((
UNITY_INTERNAL_PTR
)”x≥˘ed), (UNITY_INTERNAL_PTR)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX64
, 
UNITY_ARRAY_TO_ARRAY
)

	)

771 
	#UNITY_TEST_ASSERT_EACH_EQUAL_INT64
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
(
	`UnôyNumToPå
((
UNITY_INT
)(
UNITY_INT64
Îx≥˘ed, 8), (
UNITY_INTERNAL_PTR
)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT64
, 
UNITY_ARRAY_TO_VAL
)

	)

772 
	#UNITY_TEST_ASSERT_EACH_EQUAL_UINT64
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
(
	`UnôyNumToPå
((
UNITY_INT
)(
UNITY_UINT64
Îx≥˘ed, 8), (
UNITY_INTERNAL_PTR
)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT64
, 
UNITY_ARRAY_TO_VAL
)

	)

773 
	#UNITY_TEST_ASSERT_EACH_EQUAL_HEX64
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
(
	`UnôyNumToPå
((
UNITY_INT
)(
UNITY_INT64
Îx≥˘ed, 8), (
UNITY_INTERNAL_PTR
)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX64
, 
UNITY_ARRAY_TO_VAL
)

	)

774 
	#UNITY_TEST_ASSERT_INT64_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((dñè), (
UNITY_INT
)”x≥˘ed), (UNITY_INT)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT64
)

	)

775 
	#UNITY_TEST_ASSERT_UINT64_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((dñè), (
UNITY_INT
)”x≥˘ed), (UNITY_INT)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT64
)

	)

776 
	#UNITY_TEST_ASSERT_HEX64_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((dñè), (
UNITY_INT
)”x≥˘ed), (UNITY_INT)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX64
)

	)

777 
	#UNITY_TEST_ASSERT_GREATER_THAN_INT64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_GREATER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT64
)

	)

778 
	#UNITY_TEST_ASSERT_GREATER_THAN_UINT64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_GREATER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT64
)

	)

779 
	#UNITY_TEST_ASSERT_GREATER_THAN_HEX64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_GREATER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX64
)

	)

780 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_GREATER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT64
)

	)

781 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_GREATER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT64
)

	)

782 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_GREATER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX64
)

	)

783 
	#UNITY_TEST_ASSERT_SMALLER_THAN_INT64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_SMALLER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT64
)

	)

784 
	#UNITY_TEST_ASSERT_SMALLER_THAN_UINT64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_SMALLER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT64
)

	)

785 
	#UNITY_TEST_ASSERT_SMALLER_THAN_HEX64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_SMALLER_THAN
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX64
)

	)

786 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_SMALLER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_INT64
)

	)

787 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_SMALLER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_UINT64
)

	)

788 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πGª©îOrLessOrEquÆNumbî
((
UNITY_INT
)—hªshﬁd), (UNITY_INT)◊˘uÆ), 
UNITY_SMALLER_OR_EQUAL
, (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_DISPLAY_STYLE_HEX64
)

	)

790 
	#UNITY_TEST_ASSERT_EQUAL_INT64
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

791 
	#UNITY_TEST_ASSERT_EQUAL_UINT64
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

792 
	#UNITY_TEST_ASSERT_EQUAL_HEX64
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

793 
	#UNITY_TEST_ASSERT_EQUAL_INT64_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

794 
	#UNITY_TEST_ASSERT_EQUAL_UINT64_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

795 
	#UNITY_TEST_ASSERT_EQUAL_HEX64_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

796 
	#UNITY_TEST_ASSERT_INT64_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

797 
	#UNITY_TEST_ASSERT_UINT64_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

798 
	#UNITY_TEST_ASSERT_HEX64_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

799 
	#UNITY_TEST_ASSERT_GREATER_THAN_INT64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

800 
	#UNITY_TEST_ASSERT_GREATER_THAN_UINT64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

801 
	#UNITY_TEST_ASSERT_GREATER_THAN_HEX64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

802 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

803 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

804 
	#UNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

805 
	#UNITY_TEST_ASSERT_SMALLER_THAN_INT64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

806 
	#UNITY_TEST_ASSERT_SMALLER_THAN_UINT64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

807 
	#UNITY_TEST_ASSERT_SMALLER_THAN_HEX64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

808 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

809 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

810 
	#UNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX64
(
thªshﬁd
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEº64
)

	)

813 #ifde‡
UNITY_EXCLUDE_FLOAT


814 
	#UNITY_TEST_ASSERT_FLOAT_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºFlﬂt
)

	)

815 
	#UNITY_TEST_ASSERT_EQUAL_FLOAT
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºFlﬂt
)

	)

816 
	#UNITY_TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºFlﬂt
)

	)

817 
	#UNITY_TEST_ASSERT_EACH_EQUAL_FLOAT
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºFlﬂt
)

	)

818 
	#UNITY_TEST_ASSERT_FLOAT_IS_INF
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºFlﬂt
)

	)

819 
	#UNITY_TEST_ASSERT_FLOAT_IS_NEG_INF
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºFlﬂt
)

	)

820 
	#UNITY_TEST_ASSERT_FLOAT_IS_NAN
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºFlﬂt
)

	)

821 
	#UNITY_TEST_ASSERT_FLOAT_IS_DETERMINATE
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºFlﬂt
)

	)

822 
	#UNITY_TEST_ASSERT_FLOAT_IS_NOT_INF
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºFlﬂt
)

	)

823 
	#UNITY_TEST_ASSERT_FLOAT_IS_NOT_NEG_INF
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºFlﬂt
)

	)

824 
	#UNITY_TEST_ASSERT_FLOAT_IS_NOT_NAN
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºFlﬂt
)

	)

825 
	#UNITY_TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºFlﬂt
)

	)

827 
	#UNITY_TEST_ASSERT_FLOAT_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πFlﬂtsWôhö
((
UNITY_FLOAT
)(dñè), (UNITY_FLOAT)”x≥˘ed), (UNITY_FLOAT)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe))

	)

828 
	#UNITY_TEST_ASSERT_EQUAL_FLOAT
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_FLOAT_WITHIN
((
UNITY_FLOAT
)”x≥˘edË* (UNITY_FLOAT)
UNITY_FLOAT_PRECISION
, (UNITY_FLOAT)”x≥˘ed), (UNITY_FLOAT)◊˘uÆ), (
UNITY_LINE_TYPE
)÷öe), (mesßge))

	)

829 
	#UNITY_TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆFlﬂtAºay
((
UNITY_FLOAT
*)”x≥˘ed), (UNITY_FLOAT*)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_ARRAY_TO_ARRAY
)

	)

830 
	#UNITY_TEST_ASSERT_EACH_EQUAL_FLOAT
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆFlﬂtAºay
(
	`UnôyFlﬂtToPå
”x≥˘ed), (
UNITY_FLOAT
*)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_ARRAY_TO_VAL
)

	)

831 
	#UNITY_TEST_ASSERT_FLOAT_IS_INF
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πFlﬂtS≥cül
((
UNITY_FLOAT
)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_FLOAT_IS_INF
)

	)

832 
	#UNITY_TEST_ASSERT_FLOAT_IS_NEG_INF
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πFlﬂtS≥cül
((
UNITY_FLOAT
)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_FLOAT_IS_NEG_INF
)

	)

833 
	#UNITY_TEST_ASSERT_FLOAT_IS_NAN
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πFlﬂtS≥cül
((
UNITY_FLOAT
)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_FLOAT_IS_NAN
)

	)

834 
	#UNITY_TEST_ASSERT_FLOAT_IS_DETERMINATE
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πFlﬂtS≥cül
((
UNITY_FLOAT
)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_FLOAT_IS_DET
)

	)

835 
	#UNITY_TEST_ASSERT_FLOAT_IS_NOT_INF
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πFlﬂtS≥cül
((
UNITY_FLOAT
)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_FLOAT_IS_NOT_INF
)

	)

836 
	#UNITY_TEST_ASSERT_FLOAT_IS_NOT_NEG_INF
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πFlﬂtS≥cül
((
UNITY_FLOAT
)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_FLOAT_IS_NOT_NEG_INF
)

	)

837 
	#UNITY_TEST_ASSERT_FLOAT_IS_NOT_NAN
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πFlﬂtS≥cül
((
UNITY_FLOAT
)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_FLOAT_IS_NOT_NAN
)

	)

838 
	#UNITY_TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πFlﬂtS≥cül
((
UNITY_FLOAT
)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_FLOAT_IS_NOT_DET
)

	)

841 #ifde‡
UNITY_EXCLUDE_DOUBLE


842 
	#UNITY_TEST_ASSERT_DOUBLE_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºDoubÀ
)

	)

843 
	#UNITY_TEST_ASSERT_EQUAL_DOUBLE
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºDoubÀ
)

	)

844 
	#UNITY_TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºDoubÀ
)

	)

845 
	#UNITY_TEST_ASSERT_EACH_EQUAL_DOUBLE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºDoubÀ
)

	)

846 
	#UNITY_TEST_ASSERT_DOUBLE_IS_INF
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºDoubÀ
)

	)

847 
	#UNITY_TEST_ASSERT_DOUBLE_IS_NEG_INF
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºDoubÀ
)

	)

848 
	#UNITY_TEST_ASSERT_DOUBLE_IS_NAN
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºDoubÀ
)

	)

849 
	#UNITY_TEST_ASSERT_DOUBLE_IS_DETERMINATE
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºDoubÀ
)

	)

850 
	#UNITY_TEST_ASSERT_DOUBLE_IS_NOT_INF
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºDoubÀ
)

	)

851 
	#UNITY_TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºDoubÀ
)

	)

852 
	#UNITY_TEST_ASSERT_DOUBLE_IS_NOT_NAN
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºDoubÀ
)

	)

853 
	#UNITY_TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
)÷öe), 
UnôySåEºDoubÀ
)

	)

855 
	#UNITY_TEST_ASSERT_DOUBLE_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πDoubÀsWôhö
((
UNITY_DOUBLE
)(dñè), (UNITY_DOUBLE)”x≥˘ed), (UNITY_DOUBLE)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
Óöe)

	)

856 
	#UNITY_TEST_ASSERT_EQUAL_DOUBLE
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_DOUBLE_WITHIN
((
UNITY_DOUBLE
)”x≥˘edË* (UNITY_DOUBLE)
UNITY_DOUBLE_PRECISION
, (UNITY_DOUBLEÎx≥˘ed, (UNITY_DOUBLEÔ˘uÆ, (
UNITY_LINE_TYPE
)÷öe), mesßge)

	)

857 
	#UNITY_TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆDoubÀAºay
((
UNITY_DOUBLE
*)”x≥˘ed), (UNITY_DOUBLE*)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
Óöe, 
UNITY_ARRAY_TO_ARRAY
)

	)

858 
	#UNITY_TEST_ASSERT_EACH_EQUAL_DOUBLE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆDoubÀAºay
(
	`UnôyDoubÀToPå
”x≥˘ed), (
UNITY_DOUBLE
*)◊˘uÆ), (
UNITY_UINT32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
Óöe, 
UNITY_ARRAY_TO_VAL
)

	)

859 
	#UNITY_TEST_ASSERT_DOUBLE_IS_INF
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πDoubÀS≥cül
((
UNITY_DOUBLE
)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_FLOAT_IS_INF
)

	)

860 
	#UNITY_TEST_ASSERT_DOUBLE_IS_NEG_INF
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πDoubÀS≥cül
((
UNITY_DOUBLE
)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_FLOAT_IS_NEG_INF
)

	)

861 
	#UNITY_TEST_ASSERT_DOUBLE_IS_NAN
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πDoubÀS≥cül
((
UNITY_DOUBLE
)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_FLOAT_IS_NAN
)

	)

862 
	#UNITY_TEST_ASSERT_DOUBLE_IS_DETERMINATE
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πDoubÀS≥cül
((
UNITY_DOUBLE
)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_FLOAT_IS_DET
)

	)

863 
	#UNITY_TEST_ASSERT_DOUBLE_IS_NOT_INF
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πDoubÀS≥cül
((
UNITY_DOUBLE
)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_FLOAT_IS_NOT_INF
)

	)

864 
	#UNITY_TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πDoubÀS≥cül
((
UNITY_DOUBLE
)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_FLOAT_IS_NOT_NEG_INF
)

	)

865 
	#UNITY_TEST_ASSERT_DOUBLE_IS_NOT_NAN
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πDoubÀS≥cül
((
UNITY_DOUBLE
)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_FLOAT_IS_NOT_NAN
)

	)

866 
	#UNITY_TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE
(
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πDoubÀS≥cül
((
UNITY_DOUBLE
)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
)÷öe), 
UNITY_FLOAT_IS_NOT_DET
)

	)

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_cmd.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 i‡(
	`TEST_PROTECT
()) \

11 
CEXCEPTION_T
 
e
; \

12 
Try
 { \

13 
	`£tUp
(); \

14 
	`Te°Func
(); \

15 } 
	`C©ch
(
e
Ë{ 
	`TEST_ASSERT_EQUAL_HEX32_MESSAGE
(
CEXCEPTION_NONE
,É, "Unhandled Exception!"); } \

17 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

19 
	`ã¨Down
(); \

21 
	`UnôyC⁄˛udeTe°
(); \

22 }

	)

25 
	~"unôy.h
"

26 
	~<£tjmp.h
>

27 
	~<°dio.h
>

28 
	~"CEx˚±i⁄.h
"

29 
	~"funky.h
"

30 
	~"°™ky.h
"

31 
	~<£tjmp.h
>

34 
£tUp
();

35 
ã¨Down
();

36 
ã°_TheFú°ThögToTe°
();

37 
ã°_TheSec⁄dThögToTe°
();

38 
ã°_TheThúdThögToTe°
();

39 
ã°_TheFouπhThögToTe°
();

43 
ª£tTe°
();

44 
	$ª£tTe°
()

46 
	`ã¨Down
();

47 
	`£tUp
();

48 
	}
}

52 
	$maö
()

54 
	`UnôyBegö
("testdata/testsample.c");

55 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21);

56 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43);

57 
	`RUN_TEST
(
ã°_TheThúdThögToTe°
, 53);

58 
	`RUN_TEST
(
ã°_TheFouπhThögToTe°
, 58);

60  (
	`UnôyEnd
());

61 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_def.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 i‡(
	`TEST_PROTECT
()) \

11 
	`£tUp
(); \

12 
	`Te°Func
(); \

14 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

16 
	`ã¨Down
(); \

18 
	`UnôyC⁄˛udeTe°
(); \

19 }

	)

22 
	~"unôy.h
"

23 
	~<£tjmp.h
>

24 
	~<°dio.h
>

25 
	~"funky.h
"

26 
	~"°™ky.h
"

27 
	~<£tjmp.h
>

30 
£tUp
();

31 
ã¨Down
();

32 
ã°_TheFú°ThögToTe°
();

33 
ã°_TheSec⁄dThögToTe°
();

34 
ã°_TheThúdThögToTe°
();

35 
ã°_TheFouπhThögToTe°
();

39 
ª£tTe°
();

40 
	$ª£tTe°
()

42 
	`ã¨Down
();

43 
	`£tUp
();

44 
	}
}

48 
	$maö
()

50 
	`UnôyBegö
("testdata/testsample.c");

51 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21);

52 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43);

53 
	`RUN_TEST
(
ã°_TheThúdThögToTe°
, 53);

54 
	`RUN_TEST
(
ã°_TheFouπhThögToTe°
, 58);

56  (
	`UnôyEnd
());

57 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_head1.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 i‡(
	`TEST_PROTECT
()) \

11 
	`£tUp
(); \

12 
	`Te°Func
(); \

14 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

16 
	`ã¨Down
(); \

18 
	`UnôyC⁄˛udeTe°
(); \

19 }

	)

22 
	~"unôy.h
"

23 
	~<£tjmp.h
>

24 
	~<°dio.h
>

25 
	~"ã°ßm∂e_hód1.h
"

28 
£tUp
();

29 
ã¨Down
();

30 
ã°_TheFú°ThögToTe°
();

31 
ã°_TheSec⁄dThögToTe°
();

32 
ã°_TheThúdThögToTe°
();

33 
ã°_TheFouπhThögToTe°
();

37 
ª£tTe°
();

38 
	$ª£tTe°
()

40 
	`ã¨Down
();

41 
	`£tUp
();

42 
	}
}

46 
	$maö
()

48 
	`UnôyBegö
("testdata/testsample.c");

49 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21);

50 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43);

51 
	`RUN_TEST
(
ã°_TheThúdThögToTe°
, 53);

52 
	`RUN_TEST
(
ã°_TheFouπhThögToTe°
, 58);

54  (
	`UnôyEnd
());

55 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_head1.h

2 #i‚de‡
_TESTSAMPLE_HEAD1_H


3 
	#_TESTSAMPLE_HEAD1_H


	)

5 
	~"unôy.h
"

6 
	~"funky.h
"

7 
	~"°™ky.h
"

8 
	~<£tjmp.h
>

10 
ã°_TheFú°ThögToTe°
();

11 
ã°_TheSec⁄dThögToTe°
();

12 
ã°_TheThúdThögToTe°
();

13 
ã°_TheFouπhThögToTe°
();

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_cmd.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 
	`CMock_Inô
(); \

10 
	`UNITY_CLR_DETAILS
(); \

11 i‡(
	`TEST_PROTECT
()) \

13 
CEXCEPTION_T
 
e
; \

14 
Try
 { \

15 
	`£tUp
(); \

16 
	`Te°Func
(); \

17 } 
	`C©ch
(
e
Ë{ 
	`TEST_ASSERT_EQUAL_HEX32_MESSAGE
(
CEXCEPTION_NONE
,É, "Unhandled Exception!"); } \

19 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

21 
	`ã¨Down
(); \

22 
	`CMock_Vîify
(); \

24 
	`CMock_De°roy
(); \

25 
	`UnôyC⁄˛udeTe°
(); \

26 }

	)

29 
	~"unôy.h
"

30 
	~"cmock.h
"

31 
	~<£tjmp.h
>

32 
	~<°dio.h
>

33 
	~"CEx˚±i⁄.h
"

34 
	~"funky.h
"

35 
	~<£tjmp.h
>

36 
	~"Mock°™ky.h
"

39 
£tUp
();

40 
ã¨Down
();

41 
ã°_TheFú°ThögToTe°
();

42 
ã°_TheSec⁄dThögToTe°
();

46 
	$CMock_Inô
()

48 
	`Mock°™ky_Inô
();

49 
	}
}

50 
	$CMock_Vîify
()

52 
	`Mock°™ky_Vîify
();

53 
	}
}

54 
	$CMock_De°roy
()

56 
	`Mock°™ky_De°roy
();

57 
	}
}

60 
ª£tTe°
();

61 
	$ª£tTe°
()

63 
	`CMock_Vîify
();

64 
	`CMock_De°roy
();

65 
	`ã¨Down
();

66 
	`CMock_Inô
();

67 
	`£tUp
();

68 
	}
}

72 
	$maö
()

74 
	`UnôyBegö
("testdata/mocksample.c");

75 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21);

76 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43);

78 
	`CMock_Guts_MemFªeFöÆ
();

79  (
	`UnôyEnd
());

80 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_def.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 
	`CMock_Inô
(); \

10 
	`UNITY_CLR_DETAILS
(); \

11 i‡(
	`TEST_PROTECT
()) \

13 
	`£tUp
(); \

14 
	`Te°Func
(); \

16 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

18 
	`ã¨Down
(); \

19 
	`CMock_Vîify
(); \

21 
	`CMock_De°roy
(); \

22 
	`UnôyC⁄˛udeTe°
(); \

23 }

	)

26 
	~"unôy.h
"

27 
	~"cmock.h
"

28 
	~<£tjmp.h
>

29 
	~<°dio.h
>

30 
	~"funky.h
"

31 
	~<£tjmp.h
>

32 
	~"Mock°™ky.h
"

35 
£tUp
();

36 
ã¨Down
();

37 
ã°_TheFú°ThögToTe°
();

38 
ã°_TheSec⁄dThögToTe°
();

42 
	$CMock_Inô
()

44 
	`Mock°™ky_Inô
();

45 
	}
}

46 
	$CMock_Vîify
()

48 
	`Mock°™ky_Vîify
();

49 
	}
}

50 
	$CMock_De°roy
()

52 
	`Mock°™ky_De°roy
();

53 
	}
}

56 
ª£tTe°
();

57 
	$ª£tTe°
()

59 
	`CMock_Vîify
();

60 
	`CMock_De°roy
();

61 
	`ã¨Down
();

62 
	`CMock_Inô
();

63 
	`£tUp
();

64 
	}
}

68 
	$maö
()

70 
	`UnôyBegö
("testdata/mocksample.c");

71 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21);

72 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43);

74 
	`CMock_Guts_MemFªeFöÆ
();

75  (
	`UnôyEnd
());

76 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_head1.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 
	`CMock_Inô
(); \

10 
	`UNITY_CLR_DETAILS
(); \

11 i‡(
	`TEST_PROTECT
()) \

13 
	`£tUp
(); \

14 
	`Te°Func
(); \

16 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

18 
	`ã¨Down
(); \

19 
	`CMock_Vîify
(); \

21 
	`CMock_De°roy
(); \

22 
	`UnôyC⁄˛udeTe°
(); \

23 }

	)

26 
	~"unôy.h
"

27 
	~"cmock.h
"

28 
	~<£tjmp.h
>

29 
	~<°dio.h
>

30 
	~"ã°ßm∂e_mock_hód1.h
"

31 
	~"Mock°™ky.h
"

34 
£tUp
();

35 
ã¨Down
();

36 
ã°_TheFú°ThögToTe°
();

37 
ã°_TheSec⁄dThögToTe°
();

41 
	$CMock_Inô
()

43 
	`Mock°™ky_Inô
();

44 
	}
}

45 
	$CMock_Vîify
()

47 
	`Mock°™ky_Vîify
();

48 
	}
}

49 
	$CMock_De°roy
()

51 
	`Mock°™ky_De°roy
();

52 
	}
}

55 
ª£tTe°
();

56 
	$ª£tTe°
()

58 
	`CMock_Vîify
();

59 
	`CMock_De°roy
();

60 
	`ã¨Down
();

61 
	`CMock_Inô
();

62 
	`£tUp
();

63 
	}
}

67 
	$maö
()

69 
	`UnôyBegö
("testdata/mocksample.c");

70 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21);

71 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43);

73 
	`CMock_Guts_MemFªeFöÆ
();

74  (
	`UnôyEnd
());

75 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_head1.h

2 #i‚de‡
_TESTSAMPLE_MOCK_HEAD1_H


3 
	#_TESTSAMPLE_MOCK_HEAD1_H


	)

5 
	~"unôy.h
"

6 
	~"cmock.h
"

7 
	~"funky.h
"

8 
	~<£tjmp.h
>

10 
ã°_TheFú°ThögToTe°
();

11 
ã°_TheSec⁄dThögToTe°
();

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_new1.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 
	`CMock_Inô
(); \

10 
	`UNITY_CLR_DETAILS
(); \

11 i‡(
	`TEST_PROTECT
()) \

13 
CEXCEPTION_T
 
e
; \

14 
Try
 { \

15 
	`£tUp
(); \

16 
	`Te°Func
(); \

17 } 
	`C©ch
(
e
Ë{ 
	`TEST_ASSERT_EQUAL_HEX32_MESSAGE
(
CEXCEPTION_NONE
,É, "Unhandled Exception!"); } \

19 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

21 
	`ã¨Down
(); \

22 
	`CMock_Vîify
(); \

24 
	`CMock_De°roy
(); \

25 
	`UnôyC⁄˛udeTe°
(); \

26 }

	)

29 
	~"unôy.h
"

30 
	~"cmock.h
"

31 
	~<£tjmp.h
>

32 
	~<°dio.h
>

33 
	~"CEx˚±i⁄.h
"

34 
	~"⁄e.h
"

35 
	~"two.h
"

36 
	~"funky.h
"

37 
	~<£tjmp.h
>

38 
	~"Mock°™ky.h
"

40 
	gGlobÆEx≥˘Cou¡
;

41 
	gGlobÆVîifyOrdî
;

42 * 
	gGlobÆOrdîEº‹
;

45 
£tUp
();

46 
ã¨Down
();

47 
ã°_TheFú°ThögToTe°
();

48 
ã°_TheSec⁄dThögToTe°
();

52 
	$CMock_Inô
()

54 
GlobÆEx≥˘Cou¡
 = 0;

55 
GlobÆVîifyOrdî
 = 0;

56 
GlobÆOrdîEº‹
 = 
NULL
;

57 
	`Mock°™ky_Inô
();

58 
	}
}

59 
	$CMock_Vîify
()

61 
	`Mock°™ky_Vîify
();

62 
	}
}

63 
	$CMock_De°roy
()

65 
	`Mock°™ky_De°roy
();

66 
	}
}

69 
ª£tTe°
();

70 
	$ª£tTe°
()

72 
	`CMock_Vîify
();

73 
	`CMock_De°roy
();

74 
	`ã¨Down
();

75 
	`CMock_Inô
();

76 
	`£tUp
();

77 
	}
}

81 
	$maö
()

83 
	`UnôyBegö
("testdata/mocksample.c");

84 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21);

85 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43);

87 
	`CMock_Guts_MemFªeFöÆ
();

88  (
	`UnôyEnd
());

89 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_new2.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 
	`CMock_Inô
(); \

10 
	`UNITY_CLR_DETAILS
(); \

11 i‡(
	`TEST_PROTECT
()) \

13 
	`£tUp
(); \

14 
	`Te°Func
(); \

16 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

18 
	`ã¨Down
(); \

19 
	`CMock_Vîify
(); \

21 
	`CMock_De°roy
(); \

22 
	`UnôyC⁄˛udeTe°
(); \

23 }

	)

26 
	~"unôy.h
"

27 
	~"cmock.h
"

28 
	~<£tjmp.h
>

29 
	~<°dio.h
>

30 
	~"funky.h
"

31 
	~<£tjmp.h
>

32 
	~"Mock°™ky.h
"

35 
£tUp
();

36 
ã¨Down
();

37 
ã°_TheFú°ThögToTe°
();

38 
ã°_TheSec⁄dThögToTe°
();

42 
	$CMock_Inô
()

44 
	`Mock°™ky_Inô
();

45 
	}
}

46 
	$CMock_Vîify
()

48 
	`Mock°™ky_Vîify
();

49 
	}
}

50 
	$CMock_De°roy
()

52 
	`Mock°™ky_De°roy
();

53 
	}
}

56 
	$suôe_£tup
()

58 
	`a_cu°om_£tup
();

59 
	}
}

62 
	$suôe_ã¨down
(
num_Áûuªs
)

64 
	`a_cu°om_ã¨down
();

65 
	}
}

68 
ª£tTe°
();

69 
	$ª£tTe°
()

71 
	`CMock_Vîify
();

72 
	`CMock_De°roy
();

73 
	`ã¨Down
();

74 
	`CMock_Inô
();

75 
	`£tUp
();

76 
	}
}

80 
	$maö
()

82 
	`suôe_£tup
();

83 
	`UnôyBegö
("testdata/mocksample.c");

84 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21);

85 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43);

87 
	`CMock_Guts_MemFªeFöÆ
();

88  
	`suôe_ã¨down
(
	`UnôyEnd
());

89 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_param.c

4 
	#RUN_TEST_NO_ARGS


	)

5 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
, ...) \

7 
Unôy
.
CuºítTe°Name
 = #TestFunc "(" #__VA_ARGS__ ")"; \

8 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

9 
Unôy
.
NumbîOfTe°s
++; \

10 
	`CMock_Inô
(); \

11 
	`UNITY_CLR_DETAILS
(); \

12 i‡(
	`TEST_PROTECT
()) \

14 
	`£tUp
(); \

15 
	`Te°Func
(
__VA_ARGS__
); \

17 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

19 
	`ã¨Down
(); \

20 
	`CMock_Vîify
(); \

22 
	`CMock_De°roy
(); \

23 
	`UnôyC⁄˛udeTe°
(); \

24 }

	)

27 
	~"unôy.h
"

28 
	~"cmock.h
"

29 
	~<£tjmp.h
>

30 
	~<°dio.h
>

31 
	~"funky.h
"

32 
	~<£tjmp.h
>

33 
	~"Mock°™ky.h
"

36 
£tUp
();

37 
ã¨Down
();

38 
ã°_TheFú°ThögToTe°
();

39 
ã°_TheSec⁄dThögToTe°
();

43 
	$CMock_Inô
()

45 
	`Mock°™ky_Inô
();

46 
	}
}

47 
	$CMock_Vîify
()

49 
	`Mock°™ky_Vîify
();

50 
	}
}

51 
	$CMock_De°roy
()

53 
	`Mock°™ky_De°roy
();

54 
	}
}

57 
ª£tTe°
();

58 
	$ª£tTe°
()

60 
	`CMock_Vîify
();

61 
	`CMock_De°roy
();

62 
	`ã¨Down
();

63 
	`CMock_Inô
();

64 
	`£tUp
();

65 
	}
}

69 
	$maö
()

71 
	`UnôyBegö
("testdata/mocksample.c");

72 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21, 
RUN_TEST_NO_ARGS
);

73 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43, 
RUN_TEST_NO_ARGS
);

75 
	`CMock_Guts_MemFªeFöÆ
();

76  (
	`UnôyEnd
());

77 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_run1.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 
	`CMock_Inô
(); \

10 
	`UNITY_CLR_DETAILS
(); \

11 i‡(
	`TEST_PROTECT
()) \

13 
CEXCEPTION_T
 
e
; \

14 
Try
 { \

15 
	`£tUp
(); \

16 
	`Te°Func
(); \

17 } 
	`C©ch
(
e
Ë{ 
	`TEST_ASSERT_EQUAL_HEX32_MESSAGE
(
CEXCEPTION_NONE
,É, "Unhandled Exception!"); } \

19 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

21 
	`ã¨Down
(); \

22 
	`CMock_Vîify
(); \

24 
	`CMock_De°roy
(); \

25 
	`UnôyC⁄˛udeTe°
(); \

26 }

	)

29 
	~"unôy.h
"

30 
	~"cmock.h
"

31 
	~<£tjmp.h
>

32 
	~<°dio.h
>

33 
	~"CEx˚±i⁄.h
"

34 
	~"⁄e.h
"

35 
	~"two.h
"

36 
	~"funky.h
"

37 
	~<£tjmp.h
>

38 
	~"Mock°™ky.h
"

40 
	gGlobÆEx≥˘Cou¡
;

41 
	gGlobÆVîifyOrdî
;

42 * 
	gGlobÆOrdîEº‹
;

45 
£tUp
();

46 
ã¨Down
();

47 
ã°_TheFú°ThögToTe°
();

48 
ã°_TheSec⁄dThögToTe°
();

52 
	$CMock_Inô
()

54 
GlobÆEx≥˘Cou¡
 = 0;

55 
GlobÆVîifyOrdî
 = 0;

56 
GlobÆOrdîEº‹
 = 
NULL
;

57 
	`Mock°™ky_Inô
();

58 
	}
}

59 
	$CMock_Vîify
()

61 
	`Mock°™ky_Vîify
();

62 
	}
}

63 
	$CMock_De°roy
()

65 
	`Mock°™ky_De°roy
();

66 
	}
}

69 
ª£tTe°
();

70 
	$ª£tTe°
()

72 
	`CMock_Vîify
();

73 
	`CMock_De°roy
();

74 
	`ã¨Down
();

75 
	`CMock_Inô
();

76 
	`£tUp
();

77 
	}
}

81 
	$maö
()

83 
	`UnôyBegö
("testdata/mocksample.c");

84 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21);

85 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43);

87 
	`CMock_Guts_MemFªeFöÆ
();

88  (
	`UnôyEnd
());

89 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_run2.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 
	`CMock_Inô
(); \

10 
	`UNITY_CLR_DETAILS
(); \

11 i‡(
	`TEST_PROTECT
()) \

13 
	`£tUp
(); \

14 
	`Te°Func
(); \

16 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

18 
	`ã¨Down
(); \

19 
	`CMock_Vîify
(); \

21 
	`CMock_De°roy
(); \

22 
	`UnôyC⁄˛udeTe°
(); \

23 }

	)

26 
	~"unôy.h
"

27 
	~"cmock.h
"

28 
	~<£tjmp.h
>

29 
	~<°dio.h
>

30 
	~"funky.h
"

31 
	~<£tjmp.h
>

32 
	~"Mock°™ky.h
"

35 
£tUp
();

36 
ã¨Down
();

37 
ã°_TheFú°ThögToTe°
();

38 
ã°_TheSec⁄dThögToTe°
();

42 
	$CMock_Inô
()

44 
	`Mock°™ky_Inô
();

45 
	}
}

46 
	$CMock_Vîify
()

48 
	`Mock°™ky_Vîify
();

49 
	}
}

50 
	$CMock_De°roy
()

52 
	`Mock°™ky_De°roy
();

53 
	}
}

56 
	$suôe_£tup
()

58 
	`a_cu°om_£tup
();

59 
	}
}

62 
	$suôe_ã¨down
(
num_Áûuªs
)

64 
	`a_cu°om_ã¨down
();

65 
	}
}

68 
ª£tTe°
();

69 
	$ª£tTe°
()

71 
	`CMock_Vîify
();

72 
	`CMock_De°roy
();

73 
	`ã¨Down
();

74 
	`CMock_Inô
();

75 
	`£tUp
();

76 
	}
}

80 
	$maö
()

82 
	`suôe_£tup
();

83 
	`UnôyBegö
("testdata/mocksample.c");

84 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21);

85 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43);

87 
	`CMock_Guts_MemFªeFöÆ
();

88  
	`suôe_ã¨down
(
	`UnôyEnd
());

89 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_yaml.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 
	`CMock_Inô
(); \

10 
	`UNITY_CLR_DETAILS
(); \

11 i‡(
	`TEST_PROTECT
()) \

13 
CEXCEPTION_T
 
e
; \

14 
Try
 { \

15 
	`£tUp
(); \

16 
	`Te°Func
(); \

17 } 
	`C©ch
(
e
Ë{ 
	`TEST_ASSERT_EQUAL_HEX32_MESSAGE
(
CEXCEPTION_NONE
,É, "Unhandled Exception!"); } \

19 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

21 
	`ã¨Down
(); \

22 
	`CMock_Vîify
(); \

24 
	`CMock_De°roy
(); \

25 
	`UnôyC⁄˛udeTe°
(); \

26 }

	)

29 
	~"unôy.h
"

30 
	~"cmock.h
"

31 
	~<£tjmp.h
>

32 
	~<°dio.h
>

33 
	~"CEx˚±i⁄.h
"

34 
	~"two.h
"

35 
	~"thªe.h
"

36 
	~<four.h
>

37 
	~"funky.h
"

38 
	~<£tjmp.h
>

39 
	~"Mock°™ky.h
"

42 
£tUp
();

43 
ã¨Down
();

44 
ã°_TheFú°ThögToTe°
();

45 
ã°_TheSec⁄dThögToTe°
();

49 
	$CMock_Inô
()

51 
	`Mock°™ky_Inô
();

52 
	}
}

53 
	$CMock_Vîify
()

55 
	`Mock°™ky_Vîify
();

56 
	}
}

57 
	$CMock_De°roy
()

59 
	`Mock°™ky_De°roy
();

60 
	}
}

63 
	$suôe_£tup
()

65 
	`a_yaml_£tup
();

66 
	}
}

69 
ª£tTe°
();

70 
	$ª£tTe°
()

72 
	`CMock_Vîify
();

73 
	`CMock_De°roy
();

74 
	`ã¨Down
();

75 
	`CMock_Inô
();

76 
	`£tUp
();

77 
	}
}

81 
	$maö
()

83 
	`suôe_£tup
();

84 
	`UnôyBegö
("testdata/mocksample.c");

85 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21);

86 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43);

88 
	`CMock_Guts_MemFªeFöÆ
();

89  (
	`UnôyEnd
());

90 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_new1.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 i‡(
	`TEST_PROTECT
()) \

11 
CEXCEPTION_T
 
e
; \

12 
Try
 { \

13 
	`£tUp
(); \

14 
	`Te°Func
(); \

15 } 
	`C©ch
(
e
Ë{ 
	`TEST_ASSERT_EQUAL_HEX32_MESSAGE
(
CEXCEPTION_NONE
,É, "Unhandled Exception!"); } \

17 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

19 
	`ã¨Down
(); \

21 
	`UnôyC⁄˛udeTe°
(); \

22 }

	)

25 
	~"unôy.h
"

26 
	~<£tjmp.h
>

27 
	~<°dio.h
>

28 
	~"CEx˚±i⁄.h
"

29 
	~"⁄e.h
"

30 
	~"two.h
"

31 
	~"funky.h
"

32 
	~"°™ky.h
"

33 
	~<£tjmp.h
>

35 
	gGlobÆEx≥˘Cou¡
;

36 
	gGlobÆVîifyOrdî
;

37 * 
	gGlobÆOrdîEº‹
;

40 
£tUp
();

41 
ã¨Down
();

42 
ã°_TheFú°ThögToTe°
();

43 
ã°_TheSec⁄dThögToTe°
();

44 
ã°_TheThúdThögToTe°
();

45 
ã°_TheFouπhThögToTe°
();

49 
ª£tTe°
();

50 
	$ª£tTe°
()

52 
	`ã¨Down
();

53 
	`£tUp
();

54 
	}
}

58 
	$maö
()

60 
	`UnôyBegö
("testdata/testsample.c");

61 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21);

62 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43);

63 
	`RUN_TEST
(
ã°_TheThúdThögToTe°
, 53);

64 
	`RUN_TEST
(
ã°_TheFouπhThögToTe°
, 58);

66  (
	`UnôyEnd
());

67 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_new2.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 i‡(
	`TEST_PROTECT
()) \

11 
	`£tUp
(); \

12 
	`Te°Func
(); \

14 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

16 
	`ã¨Down
(); \

18 
	`UnôyC⁄˛udeTe°
(); \

19 }

	)

22 
	~"unôy.h
"

23 
	~<£tjmp.h
>

24 
	~<°dio.h
>

25 
	~"funky.h
"

26 
	~"°™ky.h
"

27 
	~<£tjmp.h
>

30 
£tUp
();

31 
ã¨Down
();

32 
ã°_TheFú°ThögToTe°
();

33 
ã°_TheSec⁄dThögToTe°
();

34 
ã°_TheThúdThögToTe°
();

35 
ã°_TheFouπhThögToTe°
();

39 
	$suôe_£tup
()

41 
	`a_cu°om_£tup
();

42 
	}
}

45 
	$suôe_ã¨down
(
num_Áûuªs
)

47 
	`a_cu°om_ã¨down
();

48 
	}
}

51 
ª£tTe°
();

52 
	$ª£tTe°
()

54 
	`ã¨Down
();

55 
	`£tUp
();

56 
	}
}

60 
	$maö
()

62 
	`suôe_£tup
();

63 
	`UnôyBegö
("testdata/testsample.c");

64 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21);

65 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43);

66 
	`RUN_TEST
(
ã°_TheThúdThögToTe°
, 53);

67 
	`RUN_TEST
(
ã°_TheFouπhThögToTe°
, 58);

69  
	`suôe_ã¨down
(
	`UnôyEnd
());

70 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_param.c

4 
	#RUN_TEST_NO_ARGS


	)

5 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
, ...) \

7 
Unôy
.
CuºítTe°Name
 = #TestFunc "(" #__VA_ARGS__ ")"; \

8 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

9 
Unôy
.
NumbîOfTe°s
++; \

10 i‡(
	`TEST_PROTECT
()) \

12 
	`£tUp
(); \

13 
	`Te°Func
(
__VA_ARGS__
); \

15 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

17 
	`ã¨Down
(); \

19 
	`UnôyC⁄˛udeTe°
(); \

20 }

	)

23 
	~"unôy.h
"

24 
	~<£tjmp.h
>

25 
	~<°dio.h
>

26 
	~"funky.h
"

27 
	~"°™ky.h
"

28 
	~<£tjmp.h
>

31 
£tUp
();

32 
ã¨Down
();

33 
ã°_TheFú°ThögToTe°
();

34 
ã°_TheSec⁄dThögToTe°
();

35 
ã°_TheThúdThögToTe°
();

36 
ã°_TheFouπhThögToTe°
();

40 
ª£tTe°
();

41 
	$ª£tTe°
()

43 
	`ã¨Down
();

44 
	`£tUp
();

45 
	}
}

49 
	$maö
()

51 
	`UnôyBegö
("testdata/testsample.c");

52 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21, 
RUN_TEST_NO_ARGS
);

53 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43, 
RUN_TEST_NO_ARGS
);

54 
	`RUN_TEST
(
ã°_TheThúdThögToTe°
, 53, 
RUN_TEST_NO_ARGS
);

55 
	`RUN_TEST
(
ã°_TheFouπhThögToTe°
, 58, 
RUN_TEST_NO_ARGS
);

57  (
	`UnôyEnd
());

58 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_run1.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 i‡(
	`TEST_PROTECT
()) \

11 
CEXCEPTION_T
 
e
; \

12 
Try
 { \

13 
	`£tUp
(); \

14 
	`Te°Func
(); \

15 } 
	`C©ch
(
e
Ë{ 
	`TEST_ASSERT_EQUAL_HEX32_MESSAGE
(
CEXCEPTION_NONE
,É, "Unhandled Exception!"); } \

17 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

19 
	`ã¨Down
(); \

21 
	`UnôyC⁄˛udeTe°
(); \

22 }

	)

25 
	~"unôy.h
"

26 
	~<£tjmp.h
>

27 
	~<°dio.h
>

28 
	~"CEx˚±i⁄.h
"

29 
	~"⁄e.h
"

30 
	~"two.h
"

31 
	~"funky.h
"

32 
	~"°™ky.h
"

33 
	~<£tjmp.h
>

35 
	gGlobÆEx≥˘Cou¡
;

36 
	gGlobÆVîifyOrdî
;

37 * 
	gGlobÆOrdîEº‹
;

40 
£tUp
();

41 
ã¨Down
();

42 
ã°_TheFú°ThögToTe°
();

43 
ã°_TheSec⁄dThögToTe°
();

44 
ã°_TheThúdThögToTe°
();

45 
ã°_TheFouπhThögToTe°
();

49 
ª£tTe°
();

50 
	$ª£tTe°
()

52 
	`ã¨Down
();

53 
	`£tUp
();

54 
	}
}

58 
	$maö
()

60 
	`UnôyBegö
("testdata/testsample.c");

61 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21);

62 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43);

63 
	`RUN_TEST
(
ã°_TheThúdThögToTe°
, 53);

64 
	`RUN_TEST
(
ã°_TheFouπhThögToTe°
, 58);

66  (
	`UnôyEnd
());

67 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_run2.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 i‡(
	`TEST_PROTECT
()) \

11 
	`£tUp
(); \

12 
	`Te°Func
(); \

14 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

16 
	`ã¨Down
(); \

18 
	`UnôyC⁄˛udeTe°
(); \

19 }

	)

22 
	~"unôy.h
"

23 
	~<£tjmp.h
>

24 
	~<°dio.h
>

25 
	~"funky.h
"

26 
	~"°™ky.h
"

27 
	~<£tjmp.h
>

30 
£tUp
();

31 
ã¨Down
();

32 
ã°_TheFú°ThögToTe°
();

33 
ã°_TheSec⁄dThögToTe°
();

34 
ã°_TheThúdThögToTe°
();

35 
ã°_TheFouπhThögToTe°
();

39 
	$suôe_£tup
()

41 
	`a_cu°om_£tup
();

42 
	}
}

45 
	$suôe_ã¨down
(
num_Áûuªs
)

47 
	`a_cu°om_ã¨down
();

48 
	}
}

51 
ª£tTe°
();

52 
	$ª£tTe°
()

54 
	`ã¨Down
();

55 
	`£tUp
();

56 
	}
}

60 
	$maö
()

62 
	`suôe_£tup
();

63 
	`UnôyBegö
("testdata/testsample.c");

64 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21);

65 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43);

66 
	`RUN_TEST
(
ã°_TheThúdThögToTe°
, 53);

67 
	`RUN_TEST
(
ã°_TheFouπhThögToTe°
, 58);

69  
	`suôe_ã¨down
(
	`UnôyEnd
());

70 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_yaml.c

4 
	#RUN_TEST
(
Te°Func
, 
Te°LöeNum
) \

6 
Unôy
.
CuºítTe°Name
 = #TestFunc; \

7 
Unôy
.
CuºítTe°LöeNumbî
 = 
Te°LöeNum
; \

8 
Unôy
.
NumbîOfTe°s
++; \

9 i‡(
	`TEST_PROTECT
()) \

11 
CEXCEPTION_T
 
e
; \

12 
Try
 { \

13 
	`£tUp
(); \

14 
	`Te°Func
(); \

15 } 
	`C©ch
(
e
Ë{ 
	`TEST_ASSERT_EQUAL_HEX32_MESSAGE
(
CEXCEPTION_NONE
,É, "Unhandled Exception!"); } \

17 i‡(
	`TEST_PROTECT
(Ë&& !
TEST_IS_IGNORED
) \

19 
	`ã¨Down
(); \

21 
	`UnôyC⁄˛udeTe°
(); \

22 }

	)

25 
	~"unôy.h
"

26 
	~<£tjmp.h
>

27 
	~<°dio.h
>

28 
	~"CEx˚±i⁄.h
"

29 
	~"two.h
"

30 
	~"thªe.h
"

31 
	~<four.h
>

32 
	~"funky.h
"

33 
	~"°™ky.h
"

34 
	~<£tjmp.h
>

37 
£tUp
();

38 
ã¨Down
();

39 
ã°_TheFú°ThögToTe°
();

40 
ã°_TheSec⁄dThögToTe°
();

41 
ã°_TheThúdThögToTe°
();

42 
ã°_TheFouπhThögToTe°
();

46 
	$suôe_£tup
()

48 
	`a_yaml_£tup
();

49 
	}
}

52 
ª£tTe°
();

53 
	$ª£tTe°
()

55 
	`ã¨Down
();

56 
	`£tUp
();

57 
	}
}

61 
	$maö
()

63 
	`suôe_£tup
();

64 
	`UnôyBegö
("testdata/testsample.c");

65 
	`RUN_TEST
(
ã°_TheFú°ThögToTe°
, 21);

66 
	`RUN_TEST
(
ã°_TheSec⁄dThögToTe°
, 43);

67 
	`RUN_TEST
(
ã°_TheThúdThögToTe°
, 53);

68 
	`RUN_TEST
(
ã°_TheFouπhThögToTe°
, 58);

70  (
	`UnôyEnd
());

71 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/testdata/CException.h

1 #i‚de‡
CEXCEPTION_H


2 
	#CEXCEPTION_H


	)

4 
	#CEXCEPTION_BEING_USED
 1

	)

6 
	#CEXCEPTION_NONE
 0

	)

7 
	#CEXCEPTION_T
 
e
 = 1; ()

	)

8 
	#Try
 i‡(
e
)

	)

9 
	#C©ch
(
a
Ëi‡(!a)

	)

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/testdata/Defs.h

1 #i‚de‡
DEF_H


2 
	#DEF_H


	)

4 
	#EXTERN_DECL


	)

6 
Cou¡îSuôeSëup
;

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/testdata/cmock.h

1 #i‚de‡
CMOCK_H


2 
	#CMOCK_H


	)

4 
	gCMockMemFªeFöÆCou¡î
 = 0;

5 
	gmockMock_Inô_Cou¡î
 = 0;

6 
	gmockMock_Vîify_Cou¡î
 = 0;

7 
	gmockMock_De°roy_Cou¡î
 = 0;

9 
	$CMock_Guts_MemFªeFöÆ
(Ë{ 
CMockMemFªeFöÆCou¡î
++; 
	}
}

10 
	$mockMock_Inô
(Ë{ 
mockMock_Inô_Cou¡î
++; 
	}
}

11 
	$mockMock_Vîify
(Ë{ 
mockMock_Vîify_Cou¡î
++; 
	}
}

12 
	$mockMock_De°roy
(Ë{ 
mockMock_De°roy_Cou¡î
++; 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/testdata/mockMock.h

1 #i‚de‡
MOCK_MOCK_H


2 
	#MOCK_MOCK_H


	)

4 
mockMock_Inô_Cou¡î
;

5 
mockMock_Vîify_Cou¡î
;

6 
mockMock_De°roy_Cou¡î
;

7 
CMockMemFªeFöÆCou¡î
;

9 
mockMock_Inô
();

10 
mockMock_Vîify
();

11 
mockMock_De°roy
();

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/testdata/testRunnerGenerator.c

3 
	~<°dio.h
>

4 
	~"unôy.h
"

5 
	~"Defs.h
"

7 #ifde‡
USE_CEXCEPTION


8 
	~"CEx˚±i⁄.h
"

23 
	#TEST_CASE
(
a
)

	)

24 
	$putch¨Spy
(
c
Ë{ ()
	`putch¨
(c);
	}
}

27 
	gCou¡îSëup
 = 0;

28 
	gCou¡îTórdown
 = 0;

29 
	gCou¡îSuôeSëup
 = 0;

31 
	$£tUp
()

33 
Cou¡îSëup
 = 1;

34 
	}
}

36 
	$ã¨Down
()

38 
Cou¡îTórdown
 = 1;

39 
	}
}

41 
	$cu°om_£tup
()

43 
Cou¡îSëup
 = 2;

44 
	}
}

46 
	$cu°om_ã¨down
()

48 
Cou¡îTórdown
 = 2;

49 
	}
}

58 
	$ã°_ThisTe°AlwaysPas£s
()

60 
	`TEST_PASS
();

61 
	}
}

63 
	$ã°_ThisTe°AlwaysFaûs
()

65 
	`TEST_FAIL_MESSAGE
("This Test Should Fail");

66 
	}
}

68 
	$ã°_ThisTe°AlwaysIgn‹ed
()

70 
	`TEST_IGNORE_MESSAGE
("This Test Should Be Ignored");

71 
	}
}

73 
	$qwikã°_ThisTe°Pas£sWhíNoSëupR™
()

75 
	`TEST_ASSERT_EQUAL_MESSAGE
(0, 
Cou¡îSëup
, "Setup Was Unexpectedly Run");

76 
	}
}

78 
	$qwikã°_ThisTe°Pas£sWhíNoTórdownR™
()

80 
	`TEST_ASSERT_EQUAL_MESSAGE
(0, 
Cou¡îTórdown
, "Teardown Was Unexpectedly Run");

81 
	}
}

83 
	$•ec_ThisTe°Pas£sWhíN‹mÆSuôeSëupAndTórdownR™
()

85 
	`TEST_ASSERT_EQUAL_MESSAGE
(0, 
Cou¡îSuôeSëup
, "Suite Setup Was Unexpectedly Run");

86 
	}
}

88 
	$•ec_ThisTe°Pas£sWhíN‹mÆSëupR™
()

90 
	`TEST_ASSERT_EQUAL_MESSAGE
(1, 
Cou¡îSëup
, "Normal Setup Wasn't Run");

91 
	}
}

93 
	$•ec_ThisTe°Pas£sWhíN‹mÆTórdownR™
()

95 
	`TEST_ASSERT_EQUAL_MESSAGE
(1, 
Cou¡îTórdown
, "Normal Teardown Wasn't Run");

96 
	}
}

98 
	$cu°ã°_ThisTe°Pas£sWhíCu°omSëupR™
()

100 
	`TEST_ASSERT_EQUAL_MESSAGE
(2, 
Cou¡îSëup
, "Custom Setup Wasn't Run");

101 
	}
}

103 
	$cu°ã°_ThisTe°Pas£sWhíCu°omTórdownR™
()

105 
	`TEST_ASSERT_EQUAL_MESSAGE
(2, 
Cou¡îTórdown
, "Custom Teardown Wasn't Run");

106 
	}
}

113 
	$ã°_NŸBeC⁄fu£dByL⁄gCom∂iˇãdSåögs
()

115 c⁄° * 
¸azySåög
 = "GET / HTTP/1.1\r\nHost: 127.0.0.1:8081\r\nConnection: keep-alive\r\nCache-Control:Ço-cache\r\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML,Üike Gecko) Chrome/46.0.2490.80 Safari/537.36\r\nPostman-Token: 768c7149-c3fb-f704-71a2-63918d9195b2\r\nAccept: */*\r\nAccept-Encoding: gzip, deflate, sdch\r\nAccept-Language:Én-GB,en-US;q=0.8,en;q=0.6\r\n\r\n";

117 
	`TEST_ASSERT_EQUAL_STRING_MESSAGE
(
¸azySåög
, crazyString, "These Strings Are The Same");

118 
	}
}

120 
	$ã°_NŸDißµórJu°Beˇu£TheTe°Bef‹eAndA·îHaveCøzySåögs
()

122 
	`TEST_ASSERT_TRUE_MESSAGE
(1, "1 Should be True");

123 
	}
}

125 
	$ã°_StûlNŸBeC⁄fu£dByL⁄gCom∂iˇãdSåögs
()

127 c⁄° * 
¸azySåög
 = "GET / HTTP/1.1\r\nHost: 127.0.0.1:8081\r\nConnection: keep-alive\r\nCache-Control:Ço-cache\r\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML,Üike Gecko) Chrome/46.0.2490.80 Safari/537.36\r\nPostman-Token: 768c7149-c3fb-f704-71a2-63918d9195b2\r\nAccept: */*\r\nAccept-Encoding: gzip, deflate, sdch\r\nAccept-Language:Én-GB,en-US;q=0.8,en;q=0.6\r\n\r\n";

129 
	`TEST_ASSERT_EQUAL_STRING_MESSAGE
(
¸azySåög
, crazyString, "These Strings Are Still The Same");

130 
	}
}

132 
	$should_RunTe°sSèπögWôhShouldByDeÁu…
()

134 
	`TEST_ASSERT_TRUE_MESSAGE
(1, "1 Should be True");

135 
	}
}

137 
	$TEST_CASE
(25)

138 
	$TEST_CASE
(125)

139 
	$TEST_CASE
(5)

140 
	$∑øã°_ShouldH™dÀP¨amëîizedTe°s
(
Num
)

142 
	`TEST_ASSERT_EQUAL_MESSAGE
(0, (
Num
 % 5), "All The Values Are Divisible By 5");

143 
	}
}

145 
	$TEST_CASE
(7)

146 
	$∑øã°_ShouldH™dÀP¨amëîizedTe°s2
(
Num
)

148 
	`TEST_ASSERT_EQUAL_MESSAGE
(7, 
Num
, "The Only Call To This Passes");

149 
	}
}

151 
	$∑øã°_ShouldH™dÀN⁄P¨amëîizedTe°sWhíP¨amëîiz©i⁄VÆid
()

153 
	`TEST_PASS
();

154 
	}
}

156 
	$TEST_CASE
(17)

157 
	$∑øã°_ShouldH™dÀP¨amëîizedTe°sTh©Faû
(
Num
)

159 
	`TEST_ASSERT_EQUAL_MESSAGE
(3, 
Num
, "This call should fail");

160 
	}
}

162 #ifde‡
USE_CEXCEPTION


163 
	$exã°_ShouldH™dÀCEx˚±i⁄InTe°
()

165 
	`TEST_ASSERT_EQUAL_MESSAGE
(1, 
CEXCEPTION_BEING_USED
, "Should beÖulling in CException");

166 
	}
}

169 #ifde‡
USE_ANOTHER_MAIN


170 
cu°om_maö
();

172 
	$maö
()

174  
	`cu°om_maö
();

175 
	}
}

178 
	$suôëe°_ThisTe°Pas£sWhíCu°omSuôeSëupAndTórdownR™
()

180 
	`TEST_ASSERT_EQUAL_MESSAGE
(1, 
Cou¡îSuôeSëup
, "Suite Setup Should Have Run");

181 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/testdata/testRunnerGeneratorSmall.c

3 
	~<°dio.h
>

4 
	~"unôy.h
"

5 
	~"Defs.h
"

7 
TEST_FILE
("some_file.c")

15 
	#TEST_CASE
(
a
)

	)

16 
	$putch¨Spy
(
c
Ë{ ()
	`putch¨
(c);
	}
}

19 
	gCou¡îSëup
 = 0;

20 
	gCou¡îTórdown
 = 0;

21 
	gCou¡îSuôeSëup
 = 0;

23 
	$£tUp
()

25 
Cou¡îSëup
 = 1;

26 
	}
}

28 
	$ã¨Down
()

30 
Cou¡îTórdown
 = 1;

31 
	}
}

33 
	$cu°om_£tup
()

35 
Cou¡îSëup
 = 2;

36 
	}
}

38 
	$cu°om_ã¨down
()

40 
Cou¡îTórdown
 = 2;

41 
	}
}

43 
	$ã°_ThisTe°AlwaysPas£s
()

45 
	`TEST_PASS
();

46 
	}
}

48 
	$ã°_ThisTe°AlwaysFaûs
()

50 
	`TEST_FAIL_MESSAGE
("This Test Should Fail");

51 
	}
}

53 
	$ã°_ThisTe°AlwaysIgn‹ed
()

55 
	`TEST_IGNORE_MESSAGE
("This Test Should Be Ignored");

56 
	}
}

58 
	$•ec_ThisTe°Pas£sWhíN‹mÆSëupR™
()

60 
	`TEST_ASSERT_EQUAL_MESSAGE
(1, 
Cou¡îSëup
, "Normal Setup Wasn't Run");

61 
	}
}

63 
	$•ec_ThisTe°Pas£sWhíN‹mÆTórdownR™
()

65 
	`TEST_ASSERT_EQUAL_MESSAGE
(1, 
Cou¡îTórdown
, "Normal Teardown Wasn't Run");

66 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/testdata/testRunnerGeneratorWithMocks.c

3 
	~<°dio.h
>

4 
	~"unôy.h
"

5 
	~"Defs.h
"

6 
	~"mockMock.h
"

8 #ifde‡
USE_CEXCEPTION


9 
	~"CEx˚±i⁄.h
"

24 
	#TEST_CASE
(
a
)

	)

25 
	$putch¨Spy
(
c
Ë{ ()
	`putch¨
(c);
	}
}

28 
	gCou¡îSëup
 = 0;

29 
	gCou¡îTórdown
 = 0;

30 
	gCou¡îSuôeSëup
 = 0;

32 
	$£tUp
()

34 
Cou¡îSëup
 = 1;

35 
	}
}

37 
	$ã¨Down
()

39 
Cou¡îTórdown
 = 1;

40 
	}
}

42 
	$cu°om_£tup
()

44 
Cou¡îSëup
 = 2;

45 
	}
}

47 
	$cu°om_ã¨down
()

49 
Cou¡îTórdown
 = 2;

50 
	}
}

59 
	$ã°_ThisTe°AlwaysPas£s
()

61 
	`TEST_PASS
();

62 
	}
}

64 
	$ã°_ThisTe°AlwaysFaûs
()

66 
	`TEST_FAIL_MESSAGE
("This Test Should Fail");

67 
	}
}

69 
	$ã°_ThisTe°AlwaysIgn‹ed
()

71 
	`TEST_IGNORE_MESSAGE
("This Test Should Be Ignored");

72 
	}
}

74 
	$qwikã°_ThisTe°Pas£sWhíNoSëupR™
()

76 
	`TEST_ASSERT_EQUAL_MESSAGE
(0, 
Cou¡îSëup
, "Setup Was Unexpectedly Run");

77 
	}
}

79 
	$qwikã°_ThisTe°Pas£sWhíNoTórdownR™
()

81 
	`TEST_ASSERT_EQUAL_MESSAGE
(0, 
Cou¡îTórdown
, "Teardown Was Unexpectedly Run");

82 
	}
}

84 
	$•ec_ThisTe°Pas£sWhíN‹mÆSuôeSëupAndTórdownR™
()

86 
	`TEST_ASSERT_EQUAL_MESSAGE
(0, 
Cou¡îSuôeSëup
, "Suite Setup Was Unexpectedly Run");

87 
	}
}

89 
	$•ec_ThisTe°Pas£sWhíN‹mÆSëupR™
()

91 
	`TEST_ASSERT_EQUAL_MESSAGE
(1, 
Cou¡îSëup
, "Normal Setup Wasn't Run");

92 
	}
}

94 
	$•ec_ThisTe°Pas£sWhíN‹mÆTórdownR™
()

96 
	`TEST_ASSERT_EQUAL_MESSAGE
(1, 
Cou¡îTórdown
, "Normal Teardown Wasn't Run");

97 
	}
}

99 
	$cu°ã°_ThisTe°Pas£sWhíCu°omSëupR™
()

101 
	`TEST_ASSERT_EQUAL_MESSAGE
(2, 
Cou¡îSëup
, "Custom Setup Wasn't Run");

102 
	}
}

104 
	$cu°ã°_ThisTe°Pas£sWhíCu°omTórdownR™
()

106 
	`TEST_ASSERT_EQUAL_MESSAGE
(2, 
Cou¡îTórdown
, "Custom Teardown Wasn't Run");

107 
	}
}

114 
	$ã°_NŸBeC⁄fu£dByL⁄gCom∂iˇãdSåögs
()

116 c⁄° * 
¸azySåög
 = "GET / HTTP/1.1\r\nHost: 127.0.0.1:8081\r\nConnection: keep-alive\r\nCache-Control:Ço-cache\r\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML,Üike Gecko) Chrome/46.0.2490.80 Safari/537.36\r\nPostman-Token: 768c7149-c3fb-f704-71a2-63918d9195b2\r\nAccept: */*\r\nAccept-Encoding: gzip, deflate, sdch\r\nAccept-Language:Én-GB,en-US;q=0.8,en;q=0.6\r\n\r\n";

118 
	`TEST_ASSERT_EQUAL_STRING_MESSAGE
(
¸azySåög
, crazyString, "These Strings Are The Same");

119 
	}
}

121 
	$ã°_NŸDißµórJu°Beˇu£TheTe°Bef‹eAndA·îHaveCøzySåögs
()

123 
	`TEST_ASSERT_TRUE_MESSAGE
(1, "1 Should be True");

124 
	}
}

126 
	$ã°_StûlNŸBeC⁄fu£dByL⁄gCom∂iˇãdSåögs
()

128 c⁄° * 
¸azySåög
 = "GET / HTTP/1.1\r\nHost: 127.0.0.1:8081\r\nConnection: keep-alive\r\nCache-Control:Ço-cache\r\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML,Üike Gecko) Chrome/46.0.2490.80 Safari/537.36\r\nPostman-Token: 768c7149-c3fb-f704-71a2-63918d9195b2\r\nAccept: */*\r\nAccept-Encoding: gzip, deflate, sdch\r\nAccept-Language:Én-GB,en-US;q=0.8,en;q=0.6\r\n\r\n";

130 
	`TEST_ASSERT_EQUAL_STRING_MESSAGE
(
¸azySåög
, crazyString, "These Strings Are Still The Same");

131 
	}
}

133 
	$should_RunTe°sSèπögWôhShouldByDeÁu…
()

135 
	`TEST_ASSERT_TRUE_MESSAGE
(1, "1 Should be True");

136 
	}
}

138 
	$TEST_CASE
(25)

139 
	$TEST_CASE
(125)

140 
	$TEST_CASE
(5)

141 
	$∑øã°_ShouldH™dÀP¨amëîizedTe°s
(
Num
)

143 
	`TEST_ASSERT_EQUAL_MESSAGE
(0, (
Num
 % 5), "All The Values Are Divisible By 5");

144 
	}
}

146 
	$TEST_CASE
(7)

147 
	$∑øã°_ShouldH™dÀP¨amëîizedTe°s2
(
Num
)

149 
	`TEST_ASSERT_EQUAL_MESSAGE
(7, 
Num
, "The Only Call To This Passes");

150 
	}
}

152 
	$∑øã°_ShouldH™dÀN⁄P¨amëîizedTe°sWhíP¨amëîiz©i⁄VÆid
()

154 
	`TEST_PASS
();

155 
	}
}

157 
	$TEST_CASE
(17)

158 
	$∑øã°_ShouldH™dÀP¨amëîizedTe°sTh©Faû
(
Num
)

160 
	`TEST_ASSERT_EQUAL_MESSAGE
(3, 
Num
, "This call should fail");

161 
	}
}

163 #ifde‡
USE_CEXCEPTION


164 
	$exã°_ShouldH™dÀCEx˚±i⁄InTe°
()

166 
	`TEST_ASSERT_EQUAL_MESSAGE
(1, 
CEXCEPTION_BEING_USED
, "Should beÖulling in CException");

167 
	}
}

170 #ifde‡
USE_ANOTHER_MAIN


171 
cu°om_maö
();

173 
	$maö
()

175  
	`cu°om_maö
();

176 
	}
}

179 
	$suôëe°_ThisTe°Pas£sWhíCu°omSuôeSëupAndTórdownR™
()

181 
	`TEST_ASSERT_EQUAL_MESSAGE
(1, 
Cou¡îSuôeSëup
, "Suite Setup Should Have Run");

182 
	}
}

184 
	$ã°_ShouldCÆlMockInôAndVîifyFun˘i⁄sF‹EachTe°
()

186 
∑s£sOrIgn‹es
 = ()(
Unôy
.
NumbîOfTe°s
 - Unôy.
Te°Faûuªs
);

187 
	`TEST_ASSERT_EQUAL_MESSAGE
(
Unôy
.
NumbîOfTe°s
, 
mockMock_Inô_Cou¡î
, "Mock Init Should Be Called Once Per Test Started");

188 
	`TEST_ASSERT_EQUAL_MESSAGE
(
∑s£sOrIgn‹es
, 
mockMock_Vîify_Cou¡î
, "Mock Verify Should Be Called Once Per Test Passed");

189 
	`TEST_ASSERT_EQUAL_MESSAGE
(
Unôy
.
NumbîOfTe°s
 - 1, 
mockMock_De°roy_Cou¡î
, "Mock Destroy Should Be Called Once Per Test Completed");

190 
	`TEST_ASSERT_EQUAL_MESSAGE
(0, 
CMockMemFªeFöÆCou¡î
, "Mock MemFreeFinal Should Not Be Called Until End");

191 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/tests/testparameterized.c

7 
	~<£tjmp.h
>

8 
	~<°dio.h
>

9 
	~"unôy.h
"

11 
	$putch¨Spy
(
c
Ë{ ()
	`putch¨
(c);
	}
}

13 
	#TEST_CASE
(...)

	)

15 
	#EXPECT_ABORT_BEGIN
 \

16 i‡(
	`TEST_PROTECT
()) \

17 {

	)

19 
	#VERIFY_FAILS_END
 \

21 
Unôy
.
CuºítTe°Faûed
 = (Unity.CurrentTestFailed != 0) ? 0 : 1; \

22 i‡(
Unôy
.
CuºítTe°Faûed
 == 1) { \

23 
SëToO√MónWeAÃódyCheckedThisGuy
 = 1; \

24 
	`UnôyPrötNumbîUnsig√d
(
Unôy
.
CuºítTe°LöeNumbî
); \

25 
	`UNITY_OUTPUT_CHAR
(':'); \

26 
	`UnôyPröt
(
Unôy
.
CuºítTe°Name
); \

27 
	`UnôyPröt
(":FAIL: [[[[ Test Should Have Failed But Did Not ]]]]"); \

28 
	`UNITY_OUTPUT_CHAR
('\n'); \

29 }

	)

31 
	#VERIFY_IGNORES_END
 \

33 
Unôy
.
CuºítTe°Faûed
 = (Unôy.
CuºítTe°Ign‹ed
 != 0) ? 0 : 1; \

34 
Unôy
.
CuºítTe°Ign‹ed
 = 0; \

35 i‡(
Unôy
.
CuºítTe°Faûed
 == 1) { \

36 
SëToO√MónWeAÃódyCheckedThisGuy
 = 1; \

37 
	`UnôyPrötNumbîUnsig√d
(
Unôy
.
CuºítTe°LöeNumbî
); \

38 
	`UNITY_OUTPUT_CHAR
(':'); \

39 
	`UnôyPröt
(
Unôy
.
CuºítTe°Name
); \

40 
	`UnôyPröt
(":FAIL: [[[[ Test Should Have Ignored But Did Not ]]]]"); \

41 
	`UNITY_OUTPUT_CHAR
('\n'); \

42 }

	)

44 
	gSëToO√ToFaûInTórDown
;

45 
	gSëToO√MónWeAÃódyCheckedThisGuy
;

47 
	$£tUp
()

49 
SëToO√ToFaûInTórDown
 = 0;

50 
SëToO√MónWeAÃódyCheckedThisGuy
 = 0;

51 
	}
}

53 
	$ã¨Down
()

55 i‡(
SëToO√ToFaûInTórDown
 == 1)

56 
	`TEST_FAIL_MESSAGE
("<= Failed inÅearDown");

57 i‡((
SëToO√MónWeAÃódyCheckedThisGuy
 =0Ë&& (
Unôy
.
CuºítTe°Faûed
 > 0))

59 
	`UnôyPröt
(": [[[[ Test Should Have Passed But Did Not ]]]]");

60 
	`UNITY_OUTPUT_CHAR
('\n');

62 
	}
}

64 
	$TEST_CASE
(0)

65 
	$TEST_CASE
(44)

66 
	`TEST_CASE
((90)+9)

67 
	$ã°_The£ShouldAŒPass
(
Num
)

69 
	`TEST_ASSERT_TRUE
(
Num
 < 100);

70 
	}
}

72 
	$TEST_CASE
(3)

73 
	$TEST_CASE
(77)

74 
	`TEST_CASE
( (99) + 1 - (1))

75 
	$ã°_The£ShouldAŒFaû
(
Num
)

77 
EXPECT_ABORT_BEGIN


78 
	`TEST_ASSERT_TRUE
(
Num
 > 100);

79 
VERIFY_FAILS_END


80 
	}
}

82 
	$TEST_CASE
(1)

83 
	$TEST_CASE
(44)

84 
	$TEST_CASE
(99)

85 
	$TEST_CASE
(98)

86 
	$ã°_The£AªEvîyOthî
(
Num
)

88 i‡(
Num
 & 1)

90 
EXPECT_ABORT_BEGIN


91 
	`TEST_ASSERT_TRUE
(
Num
 > 100);

92 
VERIFY_FAILS_END


96 
	`TEST_ASSERT_TRUE
(
Num
 < 100);

98 
	}
}

100 
	$ã°_N‹mÆPas£sStûlW‹k
()

102 
	`TEST_ASSERT_TRUE
(1);

103 
	}
}

105 
	$ã°_N‹mÆFaûsStûlW‹k
()

107 
EXPECT_ABORT_BEGIN


108 
	`TEST_ASSERT_TRUE
(0);

109 
VERIFY_FAILS_END


110 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/tests/testunity.c

7 
	~"unôy.h
"

8 
	~<°rög.h
>

9 
	~<°döt.h
>

13 #i‚de‡
UNITY_EXCLUDE_FLOAT


14 c⁄° 
UNITY_FLOAT
 
	gf_zîo
 = 0.0f;

17 #i‚de‡
UNITY_EXCLUDE_DOUBLE


18 c⁄° 
UNITY_DOUBLE
 
	gd_zîo
 = 0.0;

21 
	#EXPECT_ABORT_BEGIN
 \

22 
	`°¨tPutch¨Spy
(); \

23 i‡(
	`TEST_PROTECT
()) \

24 {

	)

26 
	#VERIFY_FAILS_END
 \

28 
	`ídPutch¨Spy
(); \

29 
Unôy
.
CuºítTe°Faûed
 = (Unity.CurrentTestFailed == 1) ? 0 : 1; \

30 i‡(
Unôy
.
CuºítTe°Faûed
 == 1) { \

31 
SëToO√MónWeAÃódyCheckedThisGuy
 = 1; \

32 
	`UnôyPrötNumbîUnsig√d
(
Unôy
.
CuºítTe°LöeNumbî
); \

33 
	`UNITY_OUTPUT_CHAR
(':'); \

34 
	`UnôyPröt
(
Unôy
.
CuºítTe°Name
); \

35 
	`UnôyPröt
(":FAIL: [[[[ Test Should Have Failed But Did Not ]]]]"); \

36 
	`UNITY_OUTPUT_CHAR
('\n'); \

37 }

	)

39 
	#VERIFY_IGNORES_END
 \

41 
	`ídPutch¨Spy
(); \

42 
Unôy
.
CuºítTe°Faûed
 = (Unôy.
CuºítTe°Ign‹ed
 == 1) ? 0 : 1; \

43 
Unôy
.
CuºítTe°Ign‹ed
 = 0; \

44 i‡(
Unôy
.
CuºítTe°Faûed
 == 1) { \

45 
SëToO√MónWeAÃódyCheckedThisGuy
 = 1; \

46 
	`UnôyPrötNumbîUnsig√d
(
Unôy
.
CuºítTe°LöeNumbî
); \

47 
	`UNITY_OUTPUT_CHAR
(':'); \

48 
	`UnôyPröt
(
Unôy
.
CuºítTe°Name
); \

49 
	`UnôyPröt
(":FAIL: [[[[ Test Should Have Ignored But Did Not ]]]]"); \

50 
	`UNITY_OUTPUT_CHAR
('\n'); \

51 }

	)

53 
°¨tPutch¨Spy
();

54 
ídPutch¨Spy
();

55 * 
gëBuf„rPutch¨Spy
();

57 
	gSëToO√ToFaûInTórDown
;

58 
	gSëToO√MónWeAÃódyCheckedThisGuy
;

60 
	$£tUp
()

62 
SëToO√ToFaûInTórDown
 = 0;

63 
SëToO√MónWeAÃódyCheckedThisGuy
 = 0;

64 
	}
}

66 
	$ã¨Down
()

68 
	`ídPutch¨Spy
();

69 i‡(
SëToO√ToFaûInTórDown
 == 1)

72 
	`TEST_FAIL_MESSAGE
("<= Failed inÅearDown");

73 
	`TEST_IGNORE_MESSAGE
("<= Ignored inÅearDown");

75 i‡((
SëToO√MónWeAÃódyCheckedThisGuy
 =0Ë&& (
Unôy
.
CuºítTe°Faûed
 > 0))

77 
	`UnôyPröt
(": [[[[ Test Should Have Passed But Did Not ]]]]");

78 
	`UNITY_OUTPUT_CHAR
('\n');

80 
	}
}

82 
	$ã°UnôySizeInôüliz©i⁄Remödî
()

87 c⁄° * 
mesßge
 = "Unexpected size for UNITY_STORAGE_T struct. Please checkÅhat "

92 #ifde‡
UNITY_EXCLUDE_DETAILS


94 c⁄° * 
Te°Fûe
;

95 c⁄° * 
CuºítTe°Name
;

96 
UNITY_LINE_TYPE
 
CuºítTe°LöeNumbî
;

97 
UNITY_COUNTER_TYPE
 
NumbîOfTe°s
;

98 
UNITY_COUNTER_TYPE
 
Te°Faûuªs
;

99 
UNITY_COUNTER_TYPE
 
Te°Ign‹es
;

100 
UNITY_COUNTER_TYPE
 
CuºítTe°Faûed
;

101 
UNITY_COUNTER_TYPE
 
CuºítTe°Ign‹ed
;

102 #i‚de‡
UNITY_EXCLUDE_SETJMP_H


103 
jmp_buf
 
Ab‹tFøme
;

105 } 
_Ex≥˘ed_Unôy
;

108 c⁄° * 
Te°Fûe
;

109 c⁄° * 
CuºítTe°Name
;

110 c⁄° * 
CuºítDëaûs1
;

111 c⁄° * 
CuºítDëaûs2
;

112 
UNITY_LINE_TYPE
 
CuºítTe°LöeNumbî
;

113 
UNITY_COUNTER_TYPE
 
NumbîOfTe°s
;

114 
UNITY_COUNTER_TYPE
 
Te°Faûuªs
;

115 
UNITY_COUNTER_TYPE
 
Te°Ign‹es
;

116 
UNITY_COUNTER_TYPE
 
CuºítTe°Faûed
;

117 
UNITY_COUNTER_TYPE
 
CuºítTe°Ign‹ed
;

118 #i‚de‡
UNITY_EXCLUDE_SETJMP_H


119 
jmp_buf
 
Ab‹tFøme
;

121 } 
_Ex≥˘ed_Unôy
;

129 
	`TEST_ASSERT_EQUAL_MESSAGE
((
_Ex≥˘ed_Unôy
), (
Unôy
), 
mesßge
);

130 
	}
}

132 
	$ã°PassShouldEndImmedüãlyWôhPass
()

134 
	`TEST_PASS
();

135 
	`TEST_FAIL_MESSAGE
("We should haveÖassedálreadyánd finishedÅhisÅest");

136 
	}
}

138 
	$ã°True
()

140 
	`TEST_ASSERT
(1);

142 
	`TEST_ASSERT_TRUE
(1);

143 
	}
}

145 
	$ã°FÆ£
()

147 
	`TEST_ASSERT_FALSE
(0);

149 
	`TEST_ASSERT_UNLESS
(0);

150 
	}
}

152 
	$ã°PªviousPass
()

154 
	`TEST_ASSERT_EQUAL_INT
(0U, 
Unôy
.
Te°Faûuªs
);

155 
	}
}

157 
	$ã°NŸV™ûœ
()

159 
EXPECT_ABORT_BEGIN


160 
	`TEST_ASSERT
(0);

161 
VERIFY_FAILS_END


162 
	}
}

164 
	$ã°NŸTrue
()

166 
EXPECT_ABORT_BEGIN


167 
	`TEST_ASSERT_TRUE
(0);

168 
VERIFY_FAILS_END


169 
	}
}

171 
	$ã°NŸFÆ£
()

173 
EXPECT_ABORT_BEGIN


174 
	`TEST_ASSERT_FALSE
(1);

175 
VERIFY_FAILS_END


176 
	}
}

178 
	$ã°NŸU∆ess
()

180 
EXPECT_ABORT_BEGIN


181 
	`TEST_ASSERT_UNLESS
(1);

182 
VERIFY_FAILS_END


183 
	}
}

185 
	$ã°NŸNŸEquÆ
()

187 
EXPECT_ABORT_BEGIN


188 
	`TEST_ASSERT_NOT_EQUAL
(10, 10);

189 
VERIFY_FAILS_END


190 
	}
}

192 
	$ã°Faû
()

194 
EXPECT_ABORT_BEGIN


195 
	`TEST_FAIL_MESSAGE
("Expected forÅesting");

196 
VERIFY_FAILS_END


197 
	}
}

199 
	$ã°IsNuŒ
()

201 * 
±r1
 = 
NULL
;

202 c⁄° * 
±r2
 = "hello";

204 
	`TEST_ASSERT_NULL
(
±r1
);

205 
	`TEST_ASSERT_NOT_NULL
(
±r2
);

206 
	}
}

208 
	$ã°IsNuŒShouldFaûIfNŸ
()

210 c⁄° * 
±r1
 = "hello";

212 
EXPECT_ABORT_BEGIN


213 
	`TEST_ASSERT_NULL
(
±r1
);

214 
VERIFY_FAILS_END


215 
	}
}

217 
	$ã°NŸNuŒShouldFaûIfNULL
()

219 * 
±r1
 = 
NULL
;

221 
EXPECT_ABORT_BEGIN


222 
	`TEST_ASSERT_NOT_NULL
(
±r1
);

223 
VERIFY_FAILS_END


224 
	}
}

226 
	$ã°Ign‹e
()

228 
EXPECT_ABORT_BEGIN


229 
	`TEST_IGNORE
();

230 
	`TEST_FAIL_MESSAGE
("This shouldÇot beÑeached");

231 
VERIFY_IGNORES_END


232 
	}
}

234 
	$ã°Ign‹eMesßge
()

236 
EXPECT_ABORT_BEGIN


237 
	`TEST_IGNORE_MESSAGE
("This isánÉxpected TEST_IGNORE_MESSAGE string!");

238 
	`TEST_FAIL_MESSAGE
("This shouldÇot beÑeached");

239 
VERIFY_IGNORES_END


240 
	}
}

242 
	$ã°NŸEquÆI¡s
()

244 
EXPECT_ABORT_BEGIN


245 
	`TEST_ASSERT_EQUAL_INT
(3982, 3983);

246 
VERIFY_FAILS_END


247 
	}
}

249 
	$ã°NŸEquÆI¡8s
()

251 
EXPECT_ABORT_BEGIN


252 
	`TEST_ASSERT_EQUAL_INT8
(-127, -126);

253 
VERIFY_FAILS_END


254 
	}
}

256 
	$ã°NŸEquÆI¡16s
()

258 
EXPECT_ABORT_BEGIN


259 
	`TEST_ASSERT_EQUAL_INT16
(-16383, -16382);

260 
VERIFY_FAILS_END


261 
	}
}

263 
	$ã°NŸEquÆI¡32s
()

265 
EXPECT_ABORT_BEGIN


266 
	`TEST_ASSERT_EQUAL_INT32
(-2147483647, -2147483648);

267 
VERIFY_FAILS_END


268 
	}
}

270 
	$ã°NŸEquÆBôs
()

272 
EXPECT_ABORT_BEGIN


273 
	`TEST_ASSERT_BITS
(0xFF00, 0x5555, 0x5A55);

274 
VERIFY_FAILS_END


275 
	}
}

277 
	$ã°NŸEquÆUI¡s
()

279 
UNITY_UINT16
 
v0
, 
v1
;

281 
v0
 = 9000;

282 
v1
 = 9001;

284 
EXPECT_ABORT_BEGIN


285 
	`TEST_ASSERT_EQUAL_UINT
(
v0
, 
v1
);

286 
VERIFY_FAILS_END


287 
	}
}

289 
	$ã°NŸEquÆUI¡8s
()

291 
UNITY_UINT8
 
v0
, 
v1
;

293 
v0
 = 254;

294 
v1
 = 255;

296 
EXPECT_ABORT_BEGIN


297 
	`TEST_ASSERT_EQUAL_UINT8
(
v0
, 
v1
);

298 
VERIFY_FAILS_END


299 
	}
}

301 
	$ã°NŸEquÆUI¡16s
()

303 
UNITY_UINT16
 
v0
, 
v1
;

305 
v0
 = 65535;

306 
v1
 = 65534;

308 
EXPECT_ABORT_BEGIN


309 
	`TEST_ASSERT_EQUAL_UINT16
(
v0
, 
v1
);

310 
VERIFY_FAILS_END


311 
	}
}

313 
	$ã°NŸEquÆUI¡32s
()

315 
UNITY_UINT32
 
v0
, 
v1
;

317 
v0
 = 4294967295;

318 
v1
 = 4294967294;

320 
EXPECT_ABORT_BEGIN


321 
	`TEST_ASSERT_EQUAL_UINT32
(
v0
, 
v1
);

322 
VERIFY_FAILS_END


323 
	}
}

325 
	$ã°NŸEquÆHex8s
()

327 
UNITY_UINT8
 
v0
, 
v1
;

329 
v0
 = 0x23;

330 
v1
 = 0x22;

332 
EXPECT_ABORT_BEGIN


333 
	`TEST_ASSERT_EQUAL_HEX8
(
v0
, 
v1
);

334 
VERIFY_FAILS_END


335 
	}
}

337 
	$ã°NŸEquÆHex8sIfSig√d
()

339 
UNITY_INT8
 
v0
, 
v1
;

341 
v0
 = -2;

342 
v1
 = 2;

344 
EXPECT_ABORT_BEGIN


345 
	`TEST_ASSERT_EQUAL_HEX8
(
v0
, 
v1
);

346 
VERIFY_FAILS_END


347 
	}
}

349 
	$ã°NŸEquÆHex16s
()

351 
UNITY_UINT16
 
v0
, 
v1
;

353 
v0
 = 0x1234;

354 
v1
 = 0x1235;

356 
EXPECT_ABORT_BEGIN


357 
	`TEST_ASSERT_EQUAL_HEX16
(
v0
, 
v1
);

358 
VERIFY_FAILS_END


359 
	}
}

361 
	$ã°NŸEquÆHex16sIfSig√d
()

363 
UNITY_INT16
 
v0
, 
v1
;

365 
v0
 = -1024;

366 
v1
 = -1028;

368 
EXPECT_ABORT_BEGIN


369 
	`TEST_ASSERT_EQUAL_HEX16
(
v0
, 
v1
);

370 
VERIFY_FAILS_END


371 
	}
}

373 
	$ã°NŸEquÆHex32s
()

375 
UNITY_UINT32
 
v0
, 
v1
;

377 
v0
 = 900000;

378 
v1
 = 900001;

380 
EXPECT_ABORT_BEGIN


381 
	`TEST_ASSERT_EQUAL_HEX32
(
v0
, 
v1
);

382 
VERIFY_FAILS_END


383 
	}
}

385 
	$ã°NŸEquÆHex32sIfSig√d
()

387 
UNITY_INT32
 
v0
, 
v1
;

389 
v0
 = -900000;

390 
v1
 = 900001;

392 
EXPECT_ABORT_BEGIN


393 
	`TEST_ASSERT_EQUAL_HEX32
(
v0
, 
v1
);

394 
VERIFY_FAILS_END


395 
	}
}

397 
	$ã°EquÆI¡s
()

399 
v0
, 
v1
;

400 *
p0
, *
p1
;

402 
v0
 = 19467;

403 
v1
 = 19467;

404 
p0
 = &
v0
;

405 
p1
 = &
v1
;

407 
	`TEST_ASSERT_EQUAL_INT
(1837, 1837);

408 
	`TEST_ASSERT_EQUAL_INT
(-27365, -27365);

409 
	`TEST_ASSERT_EQUAL_INT
(
v0
, 
v1
);

410 
	`TEST_ASSERT_EQUAL_INT
(19467, 
v1
);

411 
	`TEST_ASSERT_EQUAL_INT
(
v0
, 19467);

412 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, 
v1
);

413 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, *
p1
);

414 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, 19467);

415 
	}
}

417 
	$ã°EquÆI¡8s
()

419 
UNITY_INT8
 
v0
, 
v1
;

420 
UNITY_INT8
 *
p0
, *
p1
;

422 
v0
 = 0x22;

423 
v1
 = 0x22;

424 
p0
 = &
v0
;

425 
p1
 = &
v1
;

427 
	`TEST_ASSERT_EQUAL_INT8
(0x22, 0x22);

428 
	`TEST_ASSERT_EQUAL_INT8
(
v0
, 
v1
);

429 
	`TEST_ASSERT_EQUAL_INT8
(0x22, 
v1
);

430 
	`TEST_ASSERT_EQUAL_INT8
(
v0
, 0x22);

431 
	`TEST_ASSERT_EQUAL_INT8
(*
p0
, 
v1
);

432 
	`TEST_ASSERT_EQUAL_INT8
(*
p0
, *
p1
);

433 
	`TEST_ASSERT_EQUAL_INT8
(*
p0
, 0x22);

434 
	}
}

436 
	$ã°EquÆI¡8sWhíThîeAªDif„ªn˚sOutside8Bôs
()

438 
	`TEST_ASSERT_EQUAL_INT8
(0x321,0x421);

439 
	`TEST_ASSERT_EQUAL_INT8
(0xFF21,0x0021);

440 
	}
}

442 
	$ã°EquÆI¡16s
()

444 
UNITY_INT16
 
v0
, 
v1
;

445 
UNITY_INT16
 *
p0
, *
p1
;

447 
v0
 = 0x7876;

448 
v1
 = 0x7876;

449 
p0
 = &
v0
;

450 
p1
 = &
v1
;

452 
	`TEST_ASSERT_EQUAL_INT16
(0x7876, 0x7876);

453 
	`TEST_ASSERT_EQUAL_INT16
(
v0
, 
v1
);

454 
	`TEST_ASSERT_EQUAL_INT16
(0x7876, 
v1
);

455 
	`TEST_ASSERT_EQUAL_INT16
(
v0
, 0x7876);

456 
	`TEST_ASSERT_EQUAL_INT16
(*
p0
, 
v1
);

457 
	`TEST_ASSERT_EQUAL_INT16
(*
p0
, *
p1
);

458 
	`TEST_ASSERT_EQUAL_INT16
(*
p0
, 0x7876);

459 
	}
}

461 
	$ã°EquÆI¡16sNeg©ives
()

463 
UNITY_INT16
 
v0
, 
v1
;

464 
UNITY_INT16
 *
p0
, *
p1
;

466 
v0
 = -7876;

467 
v1
 = -7876;

468 
p0
 = &
v0
;

469 
p1
 = &
v1
;

471 
	`TEST_ASSERT_EQUAL_INT16
(-7876, -7876);

472 
	`TEST_ASSERT_EQUAL_INT16
(
v0
, 
v1
);

473 
	`TEST_ASSERT_EQUAL_INT16
(-7876, 
v1
);

474 
	`TEST_ASSERT_EQUAL_INT16
(
v0
, -7876);

475 
	`TEST_ASSERT_EQUAL_INT16
(*
p0
, 
v1
);

476 
	`TEST_ASSERT_EQUAL_INT16
(*
p0
, *
p1
);

477 
	`TEST_ASSERT_EQUAL_INT16
(*
p0
, -7876);

478 
	}
}

480 
	$ã°EquÆI¡16sWhíThîeAªDif„ªn˚sOutside16Bôs
()

482 
	`TEST_ASSERT_EQUAL_INT16
(0x54321,0x64321);

483 
	`TEST_ASSERT_EQUAL_INT16
(0xFFFF4321,0x00004321);

484 
	}
}

486 
	$ã°EquÆI¡32s
()

488 
UNITY_INT32
 
v0
, 
v1
;

489 
UNITY_INT32
 *
p0
, *
p1
;

491 
v0
 = 0x78760000;

492 
v1
 = 0x78760000;

493 
p0
 = &
v0
;

494 
p1
 = &
v1
;

496 
	`TEST_ASSERT_EQUAL_INT32
(0x78760000, 0x78760000);

497 
	`TEST_ASSERT_EQUAL_INT32
(
v0
, 
v1
);

498 
	`TEST_ASSERT_EQUAL_INT32
(0x78760000, 
v1
);

499 
	`TEST_ASSERT_EQUAL_INT32
(
v0
, 0x78760000);

500 
	`TEST_ASSERT_EQUAL_INT32
(*
p0
, 
v1
);

501 
	`TEST_ASSERT_EQUAL_INT32
(*
p0
, *
p1
);

502 
	`TEST_ASSERT_EQUAL_INT32
(*
p0
, 0x78760000);

503 
	}
}

505 
	$ã°EquÆI¡32sNeg©ives
()

507 
UNITY_INT32
 
v0
, 
v1
;

508 
UNITY_INT32
 *
p0
, *
p1
;

510 
v0
 = -123456789;

511 
v1
 = -123456789;

512 
p0
 = &
v0
;

513 
p1
 = &
v1
;

515 
	`TEST_ASSERT_EQUAL_INT32
(-123456789, -123456789);

516 
	`TEST_ASSERT_EQUAL_INT32
(
v0
, 
v1
);

517 
	`TEST_ASSERT_EQUAL_INT32
(-123456789, 
v1
);

518 
	`TEST_ASSERT_EQUAL_INT32
(
v0
, -123456789);

519 
	`TEST_ASSERT_EQUAL_INT32
(*
p0
, 
v1
);

520 
	`TEST_ASSERT_EQUAL_INT32
(*
p0
, *
p1
);

521 
	`TEST_ASSERT_EQUAL_INT32
(*
p0
, -123456789);

522 
	}
}

525 
	$ã°EquÆUöts
()

527 
v0
, 
v1
;

528 *
p0
, *
p1
;

530 
v0
 = 19467;

531 
v1
 = 19467;

532 
p0
 = &
v0
;

533 
p1
 = &
v1
;

535 
	`TEST_ASSERT_EQUAL_UINT
(1837, 1837);

536 
	`TEST_ASSERT_EQUAL_UINT
(
v0
, 
v1
);

537 
	`TEST_ASSERT_EQUAL_UINT
(19467, 
v1
);

538 
	`TEST_ASSERT_EQUAL_UINT
(
v0
, 19467);

539 
	`TEST_ASSERT_EQUAL_UINT
(*
p0
, 
v1
);

540 
	`TEST_ASSERT_EQUAL_UINT
(*
p0
, *
p1
);

541 
	`TEST_ASSERT_EQUAL_UINT
(*
p0
, 19467);

542 
	`TEST_ASSERT_EQUAL_UINT
(60872u, 60872u);

543 
	}
}

546 
	$ã°EquÆUöt8s
()

548 
UNITY_UINT8
 
v0
, 
v1
;

549 
UNITY_UINT8
 *
p0
, *
p1
;

551 
v0
 = 0x22;

552 
v1
 = 0x22;

553 
p0
 = &
v0
;

554 
p1
 = &
v1
;

556 
	`TEST_ASSERT_EQUAL_UINT8
(0x22, 0x22);

557 
	`TEST_ASSERT_EQUAL_UINT8
(
v0
, 
v1
);

558 
	`TEST_ASSERT_EQUAL_UINT8
(0x22, 
v1
);

559 
	`TEST_ASSERT_EQUAL_UINT8
(
v0
, 0x22);

560 
	`TEST_ASSERT_EQUAL_UINT8
(*
p0
, 
v1
);

561 
	`TEST_ASSERT_EQUAL_UINT8
(*
p0
, *
p1
);

562 
	`TEST_ASSERT_EQUAL_UINT8
(*
p0
, 0x22);

563 
	}
}

565 
	$ã°EquÆUöt8sWhíThîeAªDif„ªn˚sOutside8Bôs
()

567 
	`TEST_ASSERT_EQUAL_UINT8
(0x321,0x421);

568 
	`TEST_ASSERT_EQUAL_UINT8
(0xFF21,0x0021);

569 
	}
}

571 
	$ã°EquÆUöt16s
()

573 
UNITY_UINT16
 
v0
, 
v1
;

574 
UNITY_UINT16
 *
p0
, *
p1
;

576 
v0
 = 0x9876;

577 
v1
 = 0x9876;

578 
p0
 = &
v0
;

579 
p1
 = &
v1
;

581 
	`TEST_ASSERT_EQUAL_UINT16
(0x9876, 0x9876);

582 
	`TEST_ASSERT_EQUAL_UINT16
(
v0
, 
v1
);

583 
	`TEST_ASSERT_EQUAL_UINT16
(0x9876, 
v1
);

584 
	`TEST_ASSERT_EQUAL_UINT16
(
v0
, 0x9876);

585 
	`TEST_ASSERT_EQUAL_UINT16
(*
p0
, 
v1
);

586 
	`TEST_ASSERT_EQUAL_UINT16
(*
p0
, *
p1
);

587 
	`TEST_ASSERT_EQUAL_UINT16
(*
p0
, 0x9876);

588 
	}
}

590 
	$ã°EquÆUöt16sWhíThîeAªDif„ªn˚sOutside16Bôs
()

592 
	`TEST_ASSERT_EQUAL_UINT16
(0x54321,0x64321);

593 
	`TEST_ASSERT_EQUAL_UINT16
(0xFFFF4321,0x00004321);

594 
	}
}

596 
	$ã°EquÆUöt32s
()

598 
UNITY_UINT32
 
v0
, 
v1
;

599 
UNITY_UINT32
 *
p0
, *
p1
;

601 
v0
 = 0x98760000;

602 
v1
 = 0x98760000;

603 
p0
 = &
v0
;

604 
p1
 = &
v1
;

606 
	`TEST_ASSERT_EQUAL_UINT32
(0x98760000, 0x98760000);

607 
	`TEST_ASSERT_EQUAL_UINT32
(
v0
, 
v1
);

608 
	`TEST_ASSERT_EQUAL_UINT32
(0x98760000, 
v1
);

609 
	`TEST_ASSERT_EQUAL_UINT32
(
v0
, 0x98760000);

610 
	`TEST_ASSERT_EQUAL_UINT32
(*
p0
, 
v1
);

611 
	`TEST_ASSERT_EQUAL_UINT32
(*
p0
, *
p1
);

612 
	`TEST_ASSERT_EQUAL_UINT32
(*
p0
, 0x98760000);

613 
	}
}

615 
	$ã°NŸEquÆ
()

617 
	`TEST_ASSERT_NOT_EQUAL
(0, 1);

618 
	`TEST_ASSERT_NOT_EQUAL
(1, 0);

619 
	`TEST_ASSERT_NOT_EQUAL
(100, 101);

620 
	`TEST_ASSERT_NOT_EQUAL
(0, -1);

621 
	`TEST_ASSERT_NOT_EQUAL
(65535, -65535);

622 
	`TEST_ASSERT_NOT_EQUAL
(75, 900);

623 
	`TEST_ASSERT_NOT_EQUAL
(-100, -101);

624 
	}
}

626 
	$ã°EquÆHex8s
()

628 
UNITY_UINT8
 
v0
, 
v1
;

629 
UNITY_UINT8
 *
p0
, *
p1
;

631 
v0
 = 0x22;

632 
v1
 = 0x22;

633 
p0
 = &
v0
;

634 
p1
 = &
v1
;

636 
	`TEST_ASSERT_EQUAL_HEX8
(0x22, 0x22);

637 
	`TEST_ASSERT_EQUAL_HEX8
(
v0
, 
v1
);

638 
	`TEST_ASSERT_EQUAL_HEX8
(0x22, 
v1
);

639 
	`TEST_ASSERT_EQUAL_HEX8
(
v0
, 0x22);

640 
	`TEST_ASSERT_EQUAL_HEX8
(*
p0
, 
v1
);

641 
	`TEST_ASSERT_EQUAL_HEX8
(*
p0
, *
p1
);

642 
	`TEST_ASSERT_EQUAL_HEX8
(*
p0
, 0x22);

643 
	}
}

645 
	$ã°EquÆHex8sWhíThîeAªDif„ªn˚sOutside8Bôs
()

647 
	`TEST_ASSERT_EQUAL_HEX8
(0x321,0x421);

648 
	`TEST_ASSERT_EQUAL_HEX8
(0xFF21,0x0021);

649 
	}
}

651 
	$ã°EquÆHex8sNeg©ives
()

653 
UNITY_UINT8
 
v0
, 
v1
;

654 
UNITY_UINT8
 *
p0
, *
p1
;

656 
v0
 = 0xDD;

657 
v1
 = 0xDD;

658 
p0
 = &
v0
;

659 
p1
 = &
v1
;

661 
	`TEST_ASSERT_EQUAL_HEX8
(0xDD, 0xDD);

662 
	`TEST_ASSERT_EQUAL_HEX8
(
v0
, 
v1
);

663 
	`TEST_ASSERT_EQUAL_HEX8
(0xDD, 
v1
);

664 
	`TEST_ASSERT_EQUAL_HEX8
(
v0
, 0xDD);

665 
	`TEST_ASSERT_EQUAL_HEX8
(*
p0
, 
v1
);

666 
	`TEST_ASSERT_EQUAL_HEX8
(*
p0
, *
p1
);

667 
	`TEST_ASSERT_EQUAL_HEX8
(*
p0
, 0xDD);

668 
	}
}

670 
	$ã°EquÆHex16s
()

672 
UNITY_UINT16
 
v0
, 
v1
;

673 
UNITY_UINT16
 *
p0
, *
p1
;

675 
v0
 = 0x9876;

676 
v1
 = 0x9876;

677 
p0
 = &
v0
;

678 
p1
 = &
v1
;

680 
	`TEST_ASSERT_EQUAL_HEX16
(0x9876, 0x9876);

681 
	`TEST_ASSERT_EQUAL_HEX16
(
v0
, 
v1
);

682 
	`TEST_ASSERT_EQUAL_HEX16
(0x9876, 
v1
);

683 
	`TEST_ASSERT_EQUAL_HEX16
(
v0
, 0x9876);

684 
	`TEST_ASSERT_EQUAL_HEX16
(*
p0
, 
v1
);

685 
	`TEST_ASSERT_EQUAL_HEX16
(*
p0
, *
p1
);

686 
	`TEST_ASSERT_EQUAL_HEX16
(*
p0
, 0x9876);

687 
	}
}

689 
	$ã°EquÆHex16sWhíThîeAªDif„ªn˚sOutside16Bôs
()

691 
	`TEST_ASSERT_EQUAL_HEX16
(0x54321,0x64321);

692 
	`TEST_ASSERT_EQUAL_HEX16
(0xFFFF4321,0x00004321);

693 
	}
}

695 
	$ã°EquÆHex32s
()

697 
UNITY_UINT32
 
v0
, 
v1
;

698 
UNITY_UINT32
 *
p0
, *
p1
;

700 
v0
 = 0x98765432ul;

701 
v1
 = 0x98765432ul;

702 
p0
 = &
v0
;

703 
p1
 = &
v1
;

705 
	`TEST_ASSERT_EQUAL_HEX32
(0x98765432ul, 0x98765432ul);

706 
	`TEST_ASSERT_EQUAL_HEX32
(
v0
, 
v1
);

707 
	`TEST_ASSERT_EQUAL_HEX32
(0x98765432ul, 
v1
);

708 
	`TEST_ASSERT_EQUAL_HEX32
(
v0
, 0x98765432ul);

709 
	`TEST_ASSERT_EQUAL_HEX32
(*
p0
, 
v1
);

710 
	`TEST_ASSERT_EQUAL_HEX32
(*
p0
, *
p1
);

711 
	`TEST_ASSERT_EQUAL_HEX32
(*
p0
, 0x98765432ul);

712 
	}
}

714 
	$ã°EquÆBôs
()

716 
UNITY_UINT32
 
v0
 = 0xFF55AA00;

717 
UNITY_UINT32
 
v1
 = 0x55550000;

719 
	`TEST_ASSERT_BITS
(
v1
, 
v0
, 0x55550000);

720 
	`TEST_ASSERT_BITS
(
v1
, 
v0
, 0xFF55CC00);

721 
	`TEST_ASSERT_BITS
(0xFFFFFFFF, 
v0
, 0xFF55AA00);

722 
	`TEST_ASSERT_BITS
(0xFFFFFFFF, 
v0
, v0);

723 
	`TEST_ASSERT_BITS
(0xF0F0F0F0, 
v0
, 0xFC5DAE0F);

724 
	`TEST_ASSERT_BITS_HIGH
(
v1
, 
v0
);

725 
	`TEST_ASSERT_BITS_LOW
(0x000055FF, 
v0
);

726 
	`TEST_ASSERT_BIT_HIGH
(30, 
v0
);

727 
	`TEST_ASSERT_BIT_LOW
(5, 
v0
);

728 
	}
}

730 
	$ã°NŸEquÆBôHigh
()

732 
UNITY_UINT32
 
v0
 = 0x7F55AA00;

734 
EXPECT_ABORT_BEGIN


735 
	`TEST_ASSERT_BIT_HIGH
(31, 
v0
);

736 
VERIFY_FAILS_END


737 
	}
}

739 
	$ã°NŸEquÆBôLow
()

741 
UNITY_UINT32
 
v0
 = 0xFF55AA00;

743 
EXPECT_ABORT_BEGIN


744 
	`TEST_ASSERT_BIT_LOW
(30, 
v0
);

745 
VERIFY_FAILS_END


746 
	}
}

748 
	$ã°NŸEquÆBôsHigh
()

750 
UNITY_UINT32
 
v0
 = 0xFF55AA00;

751 
UNITY_UINT32
 
v1
 = 0x55550000;

753 
EXPECT_ABORT_BEGIN


754 
	`TEST_ASSERT_BITS_HIGH
(
v0
, 
v1
);

755 
VERIFY_FAILS_END


757 
	}
}

759 
	$ã°NŸEquÆBôsLow
()

761 
UNITY_UINT32
 
v0
 = 0xFF55AA00;

762 
UNITY_UINT32
 
v1
 = 0x55550000;

764 
EXPECT_ABORT_BEGIN


765 
	`TEST_ASSERT_BITS_LOW
(
v0
, 
v1
);

766 
VERIFY_FAILS_END


767 
	}
}

770 
	$ã°EquÆSh‹ts
()

772 
v0
, 
v1
;

773 *
p0
, *
p1
;

775 
v0
 = 19467;

776 
v1
 = 19467;

777 
p0
 = &
v0
;

778 
p1
 = &
v1
;

780 
	`TEST_ASSERT_EQUAL_INT
(1837, 1837);

781 
	`TEST_ASSERT_EQUAL_INT
(-2987, -2987);

782 
	`TEST_ASSERT_EQUAL_INT
(
v0
, 
v1
);

783 
	`TEST_ASSERT_EQUAL_INT
(19467, 
v1
);

784 
	`TEST_ASSERT_EQUAL_INT
(
v0
, 19467);

785 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, 
v1
);

786 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, *
p1
);

787 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, 19467);

788 
	}
}

790 
	$ã°EquÆUSh‹ts
()

792 
v0
, 
v1
;

793 *
p0
, *
p1
;

795 
v0
 = 19467;

796 
v1
 = 19467;

797 
p0
 = &
v0
;

798 
p1
 = &
v1
;

800 
	`TEST_ASSERT_EQUAL_UINT
(1837, 1837);

801 
	`TEST_ASSERT_EQUAL_UINT
(2987, 2987);

802 
	`TEST_ASSERT_EQUAL_UINT
(
v0
, 
v1
);

803 
	`TEST_ASSERT_EQUAL_UINT
(19467, 
v1
);

804 
	`TEST_ASSERT_EQUAL_UINT
(
v0
, 19467);

805 
	`TEST_ASSERT_EQUAL_UINT
(*
p0
, 
v1
);

806 
	`TEST_ASSERT_EQUAL_UINT
(*
p0
, *
p1
);

807 
	`TEST_ASSERT_EQUAL_UINT
(*
p0
, 19467);

808 
	}
}

810 
	$ã°EquÆCh¨s
()

812 sig√d 
v0
, 
v1
;

813 sig√d *
p0
, *
p1
;

815 
v0
 = 109;

816 
v1
 = 109;

817 
p0
 = &
v0
;

818 
p1
 = &
v1
;

820 
	`TEST_ASSERT_EQUAL_INT
(42, 42);

821 
	`TEST_ASSERT_EQUAL_INT
(-116, -116);

822 
	`TEST_ASSERT_EQUAL_INT
(
v0
, 
v1
);

823 
	`TEST_ASSERT_EQUAL_INT
(109, 
v1
);

824 
	`TEST_ASSERT_EQUAL_INT
(
v0
, 109);

825 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, 
v1
);

826 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, *
p1
);

827 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, 109);

828 
	}
}

830 
	$ã°EquÆUCh¨s
()

832 
v0
, 
v1
;

833 *
p0
, *
p1
;

835 
v0
 = 251;

836 
v1
 = 251;

837 
p0
 = &
v0
;

838 
p1
 = &
v1
;

840 
	`TEST_ASSERT_EQUAL_INT
(42, 42);

841 
	`TEST_ASSERT_EQUAL_INT
(
v0
, 
v1
);

842 
	`TEST_ASSERT_EQUAL_INT
(251, 
v1
);

843 
	`TEST_ASSERT_EQUAL_INT
(
v0
, 251);

844 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, 
v1
);

845 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, *
p1
);

846 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, 251);

847 
	}
}

849 
	$ã°EquÆPoöãrs
()

851 
v0
, 
v1
;

852 *
p0
, *
p1
, *
p2
;

854 
v0
 = 19467;

855 
v1
 = 18271;

856 
p0
 = &
v0
;

857 
p1
 = &
v1
;

858 
p2
 = &
v1
;

860 
	`TEST_ASSERT_EQUAL_PTR
(
p0
, &
v0
);

861 
	`TEST_ASSERT_EQUAL_PTR
(&
v1
, 
p1
);

862 
	`TEST_ASSERT_EQUAL_PTR
(
p2
, 
p1
);

863 
	`TEST_ASSERT_EQUAL_PTR
(&
v0
, &v0);

864 
	}
}

866 
	$ã°NŸEquÆPoöãrs
()

868 
EXPECT_ABORT_BEGIN


869 
	`TEST_ASSERT_EQUAL_PTR
(0x12345678, 0x12345677);

870 
VERIFY_FAILS_END


871 
	}
}

873 
	$ã°I¡sWôhöDñè
()

875 
	`TEST_ASSERT_INT_WITHIN
(1, 5000, 5001);

876 
	`TEST_ASSERT_INT_WITHIN
(5, 5000, 4996);

877 
	`TEST_ASSERT_INT_WITHIN
(5, 5000, 5005);

878 
	`TEST_ASSERT_INT_WITHIN
(500, 50, -440);

880 
	`TEST_ASSERT_INT_WITHIN
(2, -1, -1);

881 
	`TEST_ASSERT_INT_WITHIN
(5, 1, -1);

882 
	`TEST_ASSERT_INT_WITHIN
(5, -1, 1);

883 
	}
}

885 
	$ã°I¡sWôhöDñèAndCu°omMesßge
()

887 
	`TEST_ASSERT_INT_WITHIN_MESSAGE
(1, 5000, 5001, "Custom Message.");

888 
	`TEST_ASSERT_INT_WITHIN_MESSAGE
(5, 5000, 4996, "Custom Message.");

889 
	`TEST_ASSERT_INT_WITHIN_MESSAGE
(5, 5000, 5005, "Custom Message.");

890 
	`TEST_ASSERT_INT_WITHIN_MESSAGE
(500, 50, -440, "Custom Message.");

892 
	`TEST_ASSERT_INT_WITHIN_MESSAGE
(2, -1, -1, "Custom Message.");

893 
	`TEST_ASSERT_INT_WITHIN_MESSAGE
(5, 1, -1, "Custom Message.");

894 
	`TEST_ASSERT_INT_WITHIN_MESSAGE
(5, -1, 1, "Custom Message.");

895 
	}
}

897 
	$ã°I¡sNŸWôhöDñè
()

899 
EXPECT_ABORT_BEGIN


900 
	`TEST_ASSERT_INT_WITHIN
(5, 5000, 5006);

901 
VERIFY_FAILS_END


902 
	}
}

904 
	$ã°I¡sNŸWôhöDñèAndCu°omMesßge
()

906 
EXPECT_ABORT_BEGIN


907 
	`TEST_ASSERT_INT_WITHIN_MESSAGE
(5, 5000, 5006, "Custom Message.");

908 
VERIFY_FAILS_END


909 
	}
}

911 
	$ã°UI¡sWôhöDñè
()

913 
	`TEST_ASSERT_UINT_WITHIN
(1, 5000, 5001);

914 
	`TEST_ASSERT_UINT_WITHIN
(5, 5000, 4996);

915 
	`TEST_ASSERT_UINT_WITHIN
(5, 5000, 5005);

916 
	}
}

918 
	$ã°UI¡sWôhöDñèAndCu°omMesßge
()

920 
	`TEST_ASSERT_UINT_WITHIN_MESSAGE
(1, 5000, 5001, "Custom Message.");

921 
	`TEST_ASSERT_UINT_WITHIN_MESSAGE
(5, 5000, 4996, "Custom Message.");

922 
	`TEST_ASSERT_UINT_WITHIN_MESSAGE
(5, 5000, 5005, "Custom Message.");

923 
	}
}

925 
	$ã°UI¡sNŸWôhöDñè
()

927 
EXPECT_ABORT_BEGIN


928 
	`TEST_ASSERT_UINT_WITHIN
(1, 2147483647u, 2147483649u);

929 
VERIFY_FAILS_END


930 
	}
}

932 
	$ã°UI¡sNŸWôhöDñèAndCu°omMesßge
()

934 
EXPECT_ABORT_BEGIN


935 
	`TEST_ASSERT_UINT_WITHIN_MESSAGE
(1, 2147483647u, 2147483649u, "Custom Message.");

936 
VERIFY_FAILS_END


937 
	}
}

939 
	$ã°UI¡sNŸWôhöDñèEvíThoughASig√dI¡WouldPassSmÆlFú°
()

941 
EXPECT_ABORT_BEGIN


942 
	`TEST_ASSERT_UINT_WITHIN
(5, 1, -1);

943 
VERIFY_FAILS_END


944 
	}
}

946 
	$ã°UI¡sNŸWôhöDñèEvíThoughASig√dI¡WouldPassSmÆlFú°AndCu°omMesßge
()

948 
EXPECT_ABORT_BEGIN


949 
	`TEST_ASSERT_UINT_WITHIN_MESSAGE
(5, 1, -1, "Custom Message.");

950 
VERIFY_FAILS_END


951 
	}
}

953 
	$ã°UI¡sNŸWôhöDñèEvíThoughASig√dI¡WouldPassBigFú°
()

955 
EXPECT_ABORT_BEGIN


956 
	`TEST_ASSERT_UINT_WITHIN
(5, -1, 1);

957 
VERIFY_FAILS_END


958 
	}
}

960 
	$ã°UI¡sNŸWôhöDñèEvíThoughASig√dI¡WouldPassBigFú°AndCu°omMesßge
()

962 
EXPECT_ABORT_BEGIN


963 
	`TEST_ASSERT_UINT_WITHIN_MESSAGE
(5, -1, 1, "Custom Message.");

964 
VERIFY_FAILS_END


965 
	}
}

967 
	$ã°HEX32sWôhöDñè
()

969 
	`TEST_ASSERT_HEX32_WITHIN
(1, 5000, 5001);

970 
	`TEST_ASSERT_HEX32_WITHIN
(5, 5000, 4996);

971 
	`TEST_ASSERT_HEX32_WITHIN
(5, 5000, 5005);

972 
	}
}

974 
	$ã°HEX32sWôhöDñèAndCu°omMesßge
()

976 
	`TEST_ASSERT_HEX32_WITHIN_MESSAGE
(1, 5000, 5001, "Custom Message.");

977 
	`TEST_ASSERT_HEX32_WITHIN_MESSAGE
(5, 5000, 4996, "Custom Message.");

978 
	`TEST_ASSERT_HEX32_WITHIN_MESSAGE
(5, 5000, 5005, "Custom Message.");

979 
	}
}

981 
	$ã°HEX32sNŸWôhöDñè
()

983 
EXPECT_ABORT_BEGIN


984 
	`TEST_ASSERT_HEX32_WITHIN
(1, 2147483647u, 2147483649u);

985 
VERIFY_FAILS_END


986 
	}
}

988 
	$ã°HEX32sNŸWôhöDñèAndCu°omMesßge
()

990 
EXPECT_ABORT_BEGIN


991 
	`TEST_ASSERT_HEX32_WITHIN_MESSAGE
(1, 2147483647u, 2147483649u, "Custom Message.");

992 
VERIFY_FAILS_END


993 
	}
}

995 
	$ã°HEX32sNŸWôhöDñèEvíThoughASig√dI¡WouldPass
()

997 
EXPECT_ABORT_BEGIN


998 
	`TEST_ASSERT_HEX32_WITHIN
(5, 1, -1);

999 
VERIFY_FAILS_END


1000 
	}
}

1002 
	$ã°HEX32sNŸWôhöDñèEvíThoughASig√dI¡WouldPassAndCu°omMesßge
()

1004 
EXPECT_ABORT_BEGIN


1005 
	`TEST_ASSERT_HEX32_WITHIN_MESSAGE
(5, 1, -1, "Custom Message.");

1006 
VERIFY_FAILS_END


1007 
	}
}

1009 
	$ã°HEX16sWôhöDñè
()

1011 
	`TEST_ASSERT_HEX16_WITHIN
(1, 5000, 5001);

1012 
	`TEST_ASSERT_HEX16_WITHIN
(5, 5000, 4996);

1013 
	`TEST_ASSERT_HEX16_WITHIN
(5, 5000, 5005);

1014 
	}
}

1016 
	$ã°HEX16sWôhöDñèAndCu°omMesßge
()

1018 
	`TEST_ASSERT_HEX16_WITHIN_MESSAGE
(1, 5000, 5001, "Custom Message.");

1019 
	`TEST_ASSERT_HEX16_WITHIN_MESSAGE
(5, 5000, 4996, "Custom Message.");

1020 
	`TEST_ASSERT_HEX16_WITHIN_MESSAGE
(5, 5000, 5005, "Custom Message.");

1021 
	}
}

1023 
	$ã°HEX16sWôhöDñèWhíThîeAªDif„ªn˚OutsideOf16Bôs
()

1025 
	`TEST_ASSERT_HEX16_WITHIN
(5, 0x54321, 0x44321);

1026 
	}
}

1028 
	$ã°HEX16sWôhöDñèWhíThîeAªDif„ªn˚OutsideOf16BôsAndCu°omMesßge
()

1030 
	`TEST_ASSERT_HEX16_WITHIN_MESSAGE
(5, 0x54321, 0x44321, "Custom Message.");

1031 
	}
}

1033 
	$ã°HEX16sNŸWôhöDñè
()

1035 
EXPECT_ABORT_BEGIN


1036 
	`TEST_ASSERT_HEX16_WITHIN
(2, 65535, 0);

1037 
VERIFY_FAILS_END


1038 
	}
}

1040 
	$ã°HEX16sNŸWôhöDñèAndCu°omMesßge
()

1042 
EXPECT_ABORT_BEGIN


1043 
	`TEST_ASSERT_HEX16_WITHIN_MESSAGE
(2, 65535, 0, "Custom Message.");

1044 
VERIFY_FAILS_END


1045 
	}
}

1047 
	$ã°HEX8sWôhöDñè
()

1049 
	`TEST_ASSERT_HEX8_WITHIN
(1, 254, 255);

1050 
	`TEST_ASSERT_HEX8_WITHIN
(5, 251, 255);

1051 
	`TEST_ASSERT_HEX8_WITHIN
(5, 1, 4);

1052 
	}
}

1054 
	$ã°HEX8sWôhöDñèAndCu°omMesßge
()

1056 
	`TEST_ASSERT_HEX8_WITHIN_MESSAGE
(1, 254, 255, "Custom Message.");

1057 
	`TEST_ASSERT_HEX8_WITHIN_MESSAGE
(5, 251, 255, "Custom Message.");

1058 
	`TEST_ASSERT_HEX8_WITHIN_MESSAGE
(5, 1, 4, "Custom Message.");

1059 
	}
}

1061 
	$ã°HEX8sWôhöDñèWhíThîeAªDif„ªn˚OutsideOf8Bôs
()

1063 
	`TEST_ASSERT_HEX8_WITHIN
(5, 0x123, 0xF23);

1064 
	}
}

1066 
	$ã°HEX8sWôhöDñèWhíThîeAªDif„ªn˚OutsideOf8BôsAndCu°omMesßge
()

1068 
	`TEST_ASSERT_HEX8_WITHIN_MESSAGE
(5, 0x123, 0xF23, "Custom Message.");

1069 
	}
}

1071 
	$ã°HEX8sNŸWôhöDñè
()

1073 
EXPECT_ABORT_BEGIN


1074 
	`TEST_ASSERT_HEX8_WITHIN
(2, 255, 0);

1075 
VERIFY_FAILS_END


1076 
	}
}

1078 
	$ã°HEX8sNŸWôhöDñèAndCu°omMesßge
()

1080 
EXPECT_ABORT_BEGIN


1081 
	`TEST_ASSERT_HEX8_WITHIN_MESSAGE
(2, 255, 0, "Custom Message.");

1082 
VERIFY_FAILS_END


1083 
	}
}

1087 
	$ã°UINT32sWôhöDñè
()

1089 
	`TEST_ASSERT_UINT32_WITHIN
(1, 5000, 5001);

1090 
	`TEST_ASSERT_UINT32_WITHIN
(5, 5000, 4996);

1091 
	`TEST_ASSERT_UINT32_WITHIN
(5, 5000, 5005);

1092 
	}
}

1094 
	$ã°UINT32sWôhöDñèAndCu°omMesßge
()

1096 
	`TEST_ASSERT_UINT32_WITHIN_MESSAGE
(1, 5000, 5001, "Custom Message.");

1097 
	`TEST_ASSERT_UINT32_WITHIN_MESSAGE
(5, 5000, 4996, "Custom Message.");

1098 
	`TEST_ASSERT_UINT32_WITHIN_MESSAGE
(5, 5000, 5005, "Custom Message.");

1099 
	}
}

1101 
	$ã°UINT32sNŸWôhöDñè
()

1103 
EXPECT_ABORT_BEGIN


1104 
	`TEST_ASSERT_UINT32_WITHIN
(1, 2147483647u, 2147483649u);

1105 
VERIFY_FAILS_END


1106 
	}
}

1108 
	$ã°UINT32sNŸWôhöDñèAndCu°omMesßge
()

1110 
EXPECT_ABORT_BEGIN


1111 
	`TEST_ASSERT_UINT32_WITHIN_MESSAGE
(1, 2147483647u, 2147483649u, "Custom Message.");

1112 
VERIFY_FAILS_END


1113 
	}
}

1115 
	$ã°UINT32sNŸWôhöDñèEvíThoughASig√dI¡WouldPass
()

1117 
EXPECT_ABORT_BEGIN


1118 
	`TEST_ASSERT_UINT32_WITHIN
(5, 1, -1);

1119 
VERIFY_FAILS_END


1120 
	}
}

1122 
	$ã°UINT32sNŸWôhöDñèEvíThoughASig√dI¡WouldPassAndCu°omMesßge
()

1124 
EXPECT_ABORT_BEGIN


1125 
	`TEST_ASSERT_UINT32_WITHIN_MESSAGE
(5, 1, -1, "Custom Message.");

1126 
VERIFY_FAILS_END


1127 
	}
}

1129 
	$ã°UINT16sWôhöDñè
()

1131 
	`TEST_ASSERT_UINT16_WITHIN
(1, 5000, 5001);

1132 
	`TEST_ASSERT_UINT16_WITHIN
(5, 5000, 4996);

1133 
	`TEST_ASSERT_UINT16_WITHIN
(5, 5000, 5005);

1134 
	}
}

1136 
	$ã°UINT16sWôhöDñèAndCu°omMesßge
()

1138 
	`TEST_ASSERT_UINT16_WITHIN_MESSAGE
(1, 5000, 5001, "Custom Message.");

1139 
	`TEST_ASSERT_UINT16_WITHIN_MESSAGE
(5, 5000, 4996, "Custom Message.");

1140 
	`TEST_ASSERT_UINT16_WITHIN_MESSAGE
(5, 5000, 5005, "Custom Message.");

1141 
	}
}

1143 
	$ã°UINT16sWôhöDñèWhíThîeAªDif„ªn˚OutsideOf16Bôs
()

1145 
	`TEST_ASSERT_UINT16_WITHIN
(5, 0x54321, 0x44321);

1146 
	}
}

1148 
	$ã°UINT16sWôhöDñèWhíThîeAªDif„ªn˚OutsideOf16BôsAndCu°omMesßge
()

1150 
	`TEST_ASSERT_UINT16_WITHIN_MESSAGE
(5, 0x54321, 0x44321, "Custom Message.");

1151 
	}
}

1153 
	$ã°UINT16sNŸWôhöDñè
()

1155 
EXPECT_ABORT_BEGIN


1156 
	`TEST_ASSERT_UINT16_WITHIN
(2, 65535, 0);

1157 
VERIFY_FAILS_END


1158 
	}
}

1160 
	$ã°UINT16sNŸWôhöDñèAndCu°omMesßge
()

1162 
EXPECT_ABORT_BEGIN


1163 
	`TEST_ASSERT_UINT16_WITHIN_MESSAGE
(2, 65535, 0, "Custom Message.");

1164 
VERIFY_FAILS_END


1165 
	}
}

1167 
	$ã°UINT8sWôhöDñè
()

1169 
	`TEST_ASSERT_UINT8_WITHIN
(1, 254, 255);

1170 
	`TEST_ASSERT_UINT8_WITHIN
(5, 251, 255);

1171 
	`TEST_ASSERT_UINT8_WITHIN
(5, 1, 4);

1172 
	}
}

1174 
	$ã°UINT8sWôhöDñèAndCu°omMesßge
()

1176 
	`TEST_ASSERT_UINT8_WITHIN_MESSAGE
(1, 254, 255, "Custom Message.");

1177 
	`TEST_ASSERT_UINT8_WITHIN_MESSAGE
(5, 251, 255, "Custom Message.");

1178 
	`TEST_ASSERT_UINT8_WITHIN_MESSAGE
(5, 1, 4, "Custom Message.");

1179 
	}
}

1181 
	$ã°UINT8sWôhöDñèWhíThîeAªDif„ªn˚OutsideOf8Bôs
()

1183 
	`TEST_ASSERT_UINT8_WITHIN
(5, 0x123, 0xF23);

1184 
	}
}

1186 
	$ã°UINT8sWôhöDñèWhíThîeAªDif„ªn˚OutsideOf8BôsAndCu°omMesßge
()

1188 
	`TEST_ASSERT_UINT8_WITHIN_MESSAGE
(5, 0x123, 0xF23, "Custom Message.");

1189 
	}
}

1191 
	$ã°UINT8sNŸWôhöDñè
()

1193 
EXPECT_ABORT_BEGIN


1194 
	`TEST_ASSERT_UINT8_WITHIN
(2, 255, 0);

1195 
VERIFY_FAILS_END


1196 
	}
}

1198 
	$ã°UINT8sNŸWôhöDñèAndCu°omMesßge
()

1200 
EXPECT_ABORT_BEGIN


1201 
	`TEST_ASSERT_UINT8_WITHIN_MESSAGE
(2, 255, 0, "Custom Message.");

1202 
VERIFY_FAILS_END


1203 
	}
}

1205 
	$ã°INT32sWôhöDñè
()

1207 
	`TEST_ASSERT_INT32_WITHIN
(1, 5000, 5001);

1208 
	`TEST_ASSERT_INT32_WITHIN
(5, 1, -2);

1209 
	`TEST_ASSERT_INT32_WITHIN
(5, -2, 1);

1210 
	}
}

1212 
	$ã°INT32sWôhöDñèAndCu°omMesßge
()

1214 
	`TEST_ASSERT_INT32_WITHIN_MESSAGE
(1, 5000, 5001, "Custom Message.");

1215 
	}
}

1217 
	$ã°INT32sNŸWôhöDñè
()

1219 
EXPECT_ABORT_BEGIN


1220 
	`TEST_ASSERT_INT32_WITHIN
(1, -3, 1);

1221 
VERIFY_FAILS_END


1222 
	}
}

1224 
	$ã°INT32sNŸWôhöDñèAndDif„ªn˚OvîÊows
()

1226 
EXPECT_ABORT_BEGIN


1227 
	`TEST_ASSERT_INT32_WITHIN
(1, -1, 0x7FFFFFFF);

1228 
VERIFY_FAILS_END


1229 
	}
}

1230 
	$ã°INT32sNŸWôhöDñèAndCu°omMesßge
()

1232 
EXPECT_ABORT_BEGIN


1233 
	`TEST_ASSERT_INT32_WITHIN_MESSAGE
(1, -2, 1, "Custom Message.");

1234 
VERIFY_FAILS_END


1235 
	}
}

1237 
	$ã°INT16sWôhöDñè
()

1239 
	`TEST_ASSERT_INT16_WITHIN
(1, 5000, 5001);

1240 
	`TEST_ASSERT_INT16_WITHIN
(5, 2, -2);

1241 
	`TEST_ASSERT_INT16_WITHIN
(5, -2, 2);

1242 
	}
}

1244 
	$ã°INT16sWôhöDñèAndCu°omMesßge
()

1246 
	`TEST_ASSERT_INT16_WITHIN_MESSAGE
(1, 5000, 5001, "Custom Message.");

1247 
	}
}

1249 
	$ã°INT16sWôhöDñèWhíThîeAªDif„ªn˚OutsideOf16Bôs
()

1251 
	`TEST_ASSERT_INT16_WITHIN
(5, 0x54321, 0x44321);

1252 
	}
}

1254 
	$ã°INT16sWôhöDñèWhíThîeAªDif„ªn˚OutsideOf16BôsAndCu°omMesßge
()

1256 
	`TEST_ASSERT_INT16_WITHIN_MESSAGE
(5, 0x54321, 0x44321, "Custom Message.");

1257 
	}
}

1259 
	$ã°INT16sNŸWôhöDñè
()

1261 
EXPECT_ABORT_BEGIN


1262 
	`TEST_ASSERT_INT16_WITHIN
(2, 4, -2);

1263 
VERIFY_FAILS_END


1264 
	}
}

1266 
	$ã°INT16sNŸWôhöDñèAndCu°omMesßge
()

1268 
EXPECT_ABORT_BEGIN


1269 
	`TEST_ASSERT_INT16_WITHIN_MESSAGE
(2, 3, 0, "Custom Message.");

1270 
VERIFY_FAILS_END


1271 
	}
}

1273 
	$ã°INT8sWôhöDñè
()

1275 
	`TEST_ASSERT_INT8_WITHIN
(1, 127, 126);

1276 
	`TEST_ASSERT_INT8_WITHIN
(5, -2, 2);

1277 
	`TEST_ASSERT_INT8_WITHIN
(5, 2, -2);

1278 
	}
}

1280 
	$ã°INT8sWôhöDñèAndCu°omMesßge
()

1282 
	`TEST_ASSERT_INT8_WITHIN_MESSAGE
(5, 1, 4, "Custom Message.");

1283 
	}
}

1285 
	$ã°INT8sWôhöDñèWhíThîeAªDif„ªn˚OutsideOf8Bôs
()

1287 
	`TEST_ASSERT_INT8_WITHIN
(5, 0x123, 0xF23);

1288 
	}
}

1290 
	$ã°INT8sWôhöDñèWhíThîeAªDif„ªn˚OutsideOf8BôsAndCu°omMesßge
()

1292 
	`TEST_ASSERT_INT8_WITHIN_MESSAGE
(5, 0x123, 0xF23, "Custom Message.");

1293 
	}
}

1295 
	$ã°INT8sNŸWôhöDñè
()

1297 
EXPECT_ABORT_BEGIN


1298 
	`TEST_ASSERT_INT8_WITHIN
(2, -3, 0);

1299 
VERIFY_FAILS_END


1300 
	}
}

1302 
	$ã°INT8sNŸWôhöDñèAndCu°omMesßge
()

1304 
EXPECT_ABORT_BEGIN


1305 
	`TEST_ASSERT_INT8_WITHIN_MESSAGE
(2, -4, 0, "Custom Message.");

1306 
VERIFY_FAILS_END


1307 
	}
}

1311 
	$ã°Gª©îTh™
()

1313 
UNITY_INT
 
v0
, 
v1
;

1314 
UNITY_INT
 *
p0
, *
p1
;

1316 
v0
 = 0;

1317 
v1
 = 1;

1318 
p0
 = &
v0
;

1319 
p1
 = &
v1
;

1321 
	`TEST_ASSERT_GREATER_THAN
(
v0
, 
v1
);

1322 
	`TEST_ASSERT_GREATER_THAN
(*
p0
, 
v1
);

1323 
	`TEST_ASSERT_GREATER_THAN
(
v0
, *
p1
);

1324 
	`TEST_ASSERT_GREATER_THAN
(*
p0
, *
p1
);

1325 
	}
}

1327 
	$ã°Gª©îTh™INT
()

1329 
UNITY_INT
 
v0
, 
v1
;

1330 
UNITY_INT
 *
p0
, *
p1
;

1332 
v0
 = 302;

1333 
v1
 = 3334;

1334 
p0
 = &
v0
;

1335 
p1
 = &
v1
;

1337 
	`TEST_ASSERT_GREATER_THAN_INT
(
v0
, 
v1
);

1338 
	`TEST_ASSERT_GREATER_THAN_INT
(*
p0
, 
v1
);

1339 
	`TEST_ASSERT_GREATER_THAN_INT
(
v0
, *
p1
);

1340 
	`TEST_ASSERT_GREATER_THAN_INT
(*
p0
, *
p1
);

1341 
	}
}

1344 
	$ã°Gª©îTh™INT8
()

1346 
UNITY_INT8
 
v0
, 
v1
;

1347 
UNITY_INT8
 *
p0
, *
p1
;

1349 
v0
 = -128;

1350 
v1
 = 127;

1351 
p0
 = &
v0
;

1352 
p1
 = &
v1
;

1354 
	`TEST_ASSERT_GREATER_THAN_INT8
(
v0
, 
v1
);

1355 
	`TEST_ASSERT_GREATER_THAN_INT8
(*
p0
, 
v1
);

1356 
	`TEST_ASSERT_GREATER_THAN_INT8
(
v0
, *
p1
);

1357 
	`TEST_ASSERT_GREATER_THAN_INT8
(*
p0
, *
p1
);

1358 
	}
}

1360 
	$ã°Gª©îTh™INT16
()

1362 
UNITY_INT16
 
v0
, 
v1
;

1363 
UNITY_INT16
 *
p0
, *
p1
;

1365 
v0
 = -32768;

1366 
v1
 = 32767;

1367 
p0
 = &
v0
;

1368 
p1
 = &
v1
;

1370 
	`TEST_ASSERT_GREATER_THAN_INT16
(
v0
, 
v1
);

1371 
	`TEST_ASSERT_GREATER_THAN_INT16
(*
p0
, 
v1
);

1372 
	`TEST_ASSERT_GREATER_THAN_INT16
(
v0
, *
p1
);

1373 
	`TEST_ASSERT_GREATER_THAN_INT16
(*
p0
, *
p1
);

1374 
	}
}

1376 
	$ã°Gª©îTh™INT32
()

1378 
UNITY_INT32
 
v0
, 
v1
;

1379 
UNITY_INT32
 *
p0
, *
p1
;

1381 
v0
 = -214783648;

1382 
v1
 = 214783647;

1383 
p0
 = &
v0
;

1384 
p1
 = &
v1
;

1386 
	`TEST_ASSERT_GREATER_THAN_INT32
(
v0
, 
v1
);

1387 
	`TEST_ASSERT_GREATER_THAN_INT32
(*
p0
, 
v1
);

1388 
	`TEST_ASSERT_GREATER_THAN_INT32
(
v0
, *
p1
);

1389 
	`TEST_ASSERT_GREATER_THAN_INT32
(*
p0
, *
p1
);

1390 
	}
}

1392 
	$ã°Gª©îTh™UINT
()

1394 
UNITY_UINT
 
v0
, 
v1
;

1395 
UNITY_UINT
 *
p0
, *
p1
;

1397 
v0
 = 0;

1398 
v1
 = 1;

1399 
p0
 = &
v0
;

1400 
p1
 = &
v1
;

1402 
	`TEST_ASSERT_GREATER_THAN_UINT
(
v0
, 
v1
);

1403 
	`TEST_ASSERT_GREATER_THAN_UINT
(*
p0
, 
v1
);

1404 
	`TEST_ASSERT_GREATER_THAN_UINT
(
v0
, *
p1
);

1405 
	`TEST_ASSERT_GREATER_THAN_UINT
(*
p0
, *
p1
);

1406 
	}
}

1409 
	$ã°Gª©îTh™UINT8
()

1411 
UNITY_UINT8
 
v0
, 
v1
;

1412 
UNITY_UINT8
 *
p0
, *
p1
;

1414 
v0
 = 0;

1415 
v1
 = 255;

1416 
p0
 = &
v0
;

1417 
p1
 = &
v1
;

1419 
	`TEST_ASSERT_GREATER_THAN_UINT8
(
v0
, 
v1
);

1420 
	`TEST_ASSERT_GREATER_THAN_UINT8
(*
p0
, 
v1
);

1421 
	`TEST_ASSERT_GREATER_THAN_UINT8
(
v0
, *
p1
);

1422 
	`TEST_ASSERT_GREATER_THAN_UINT8
(*
p0
, *
p1
);

1423 
	}
}

1425 
	$ã°Gª©îTh™UINT16
()

1427 
UNITY_UINT16
 
v0
, 
v1
;

1428 
UNITY_UINT16
 *
p0
, *
p1
;

1430 
v0
 = 0;

1431 
v1
 = 65535;

1432 
p0
 = &
v0
;

1433 
p1
 = &
v1
;

1435 
	`TEST_ASSERT_GREATER_THAN_UINT16
(
v0
, 
v1
);

1436 
	`TEST_ASSERT_GREATER_THAN_UINT16
(*
p0
, 
v1
);

1437 
	`TEST_ASSERT_GREATER_THAN_UINT16
(
v0
, *
p1
);

1438 
	`TEST_ASSERT_GREATER_THAN_UINT16
(*
p0
, *
p1
);

1439 
	}
}

1441 
	$ã°Gª©îTh™UINT32
()

1443 
UNITY_UINT32
 
v0
, 
v1
;

1444 
UNITY_UINT32
 *
p0
, *
p1
;

1446 
v0
 = 0;

1447 
v1
 = 4294967295;

1448 
p0
 = &
v0
;

1449 
p1
 = &
v1
;

1451 
	`TEST_ASSERT_GREATER_THAN_UINT32
(
v0
, 
v1
);

1452 
	`TEST_ASSERT_GREATER_THAN_UINT32
(*
p0
, 
v1
);

1453 
	`TEST_ASSERT_GREATER_THAN_UINT32
(
v0
, *
p1
);

1454 
	`TEST_ASSERT_GREATER_THAN_UINT32
(*
p0
, *
p1
);

1455 
	}
}

1457 
	$ã°Gª©îTh™HEX8
()

1459 
UNITY_UINT8
 
v0
, 
v1
;

1460 
UNITY_UINT8
 *
p0
, *
p1
;

1462 
v0
 = 0x00;

1463 
v1
 = 0xFF;

1464 
p0
 = &
v0
;

1465 
p1
 = &
v1
;

1467 
	`TEST_ASSERT_GREATER_THAN_HEX8
(
v0
, 
v1
);

1468 
	`TEST_ASSERT_GREATER_THAN_HEX8
(*
p0
, 
v1
);

1469 
	`TEST_ASSERT_GREATER_THAN_HEX8
(
v0
, *
p1
);

1470 
	`TEST_ASSERT_GREATER_THAN_HEX8
(*
p0
, *
p1
);

1471 
	}
}

1473 
	$ã°Gª©îTh™HEX16
()

1475 
UNITY_UINT16
 
v0
, 
v1
;

1476 
UNITY_UINT16
 *
p0
, *
p1
;

1478 
v0
 = 0x0000;

1479 
v1
 = 0xFFFF;

1480 
p0
 = &
v0
;

1481 
p1
 = &
v1
;

1483 
	`TEST_ASSERT_GREATER_THAN_HEX16
(
v0
, 
v1
);

1484 
	`TEST_ASSERT_GREATER_THAN_HEX16
(*
p0
, 
v1
);

1485 
	`TEST_ASSERT_GREATER_THAN_HEX16
(
v0
, *
p1
);

1486 
	`TEST_ASSERT_GREATER_THAN_HEX16
(*
p0
, *
p1
);

1487 
	}
}

1489 
	$ã°Gª©îTh™HEX32
()

1491 
UNITY_UINT32
 
v0
, 
v1
;

1492 
UNITY_UINT32
 *
p0
, *
p1
;

1494 
v0
 = 0x00000000;

1495 
v1
 = 0xFFFFFFFF;

1496 
p0
 = &
v0
;

1497 
p1
 = &
v1
;

1499 
	`TEST_ASSERT_GREATER_THAN_HEX32
(
v0
, 
v1
);

1500 
	`TEST_ASSERT_GREATER_THAN_HEX32
(*
p0
, 
v1
);

1501 
	`TEST_ASSERT_GREATER_THAN_HEX32
(
v0
, *
p1
);

1502 
	`TEST_ASSERT_GREATER_THAN_HEX32
(*
p0
, *
p1
);

1503 
	}
}

1506 
	$ã°NŸGª©îTh™
()

1508 
EXPECT_ABORT_BEGIN


1509 
	`TEST_ASSERT_GREATER_THAN
(0, -1);

1510 
VERIFY_FAILS_END


1511 
	}
}

1513 
	$ã°LessTh™
()

1515 
UNITY_INT
 
v0
, 
v1
;

1516 
UNITY_INT
 *
p0
, *
p1
;

1518 
v0
 = 0;

1519 
v1
 = -1;

1520 
p0
 = &
v0
;

1521 
p1
 = &
v1
;

1523 
	`TEST_ASSERT_LESS_THAN
(
v0
, 
v1
);

1524 
	`TEST_ASSERT_LESS_THAN
(*
p0
, 
v1
);

1525 
	`TEST_ASSERT_LESS_THAN
(
v0
, *
p1
);

1526 
	`TEST_ASSERT_LESS_THAN
(*
p0
, *
p1
);

1527 
	}
}

1529 
	$ã°LessTh™INT
()

1531 
UNITY_INT
 
v0
, 
v1
;

1532 
UNITY_INT
 *
p0
, *
p1
;

1534 
v0
 = 3334;

1535 
v1
 = 302;

1536 
p0
 = &
v0
;

1537 
p1
 = &
v1
;

1539 
	`TEST_ASSERT_LESS_THAN_INT
(
v0
, 
v1
);

1540 
	`TEST_ASSERT_LESS_THAN_INT
(*
p0
, 
v1
);

1541 
	`TEST_ASSERT_LESS_THAN_INT
(
v0
, *
p1
);

1542 
	`TEST_ASSERT_LESS_THAN_INT
(*
p0
, *
p1
);

1543 
	}
}

1546 
	$ã°LessTh™INT8
()

1548 
UNITY_INT8
 
v0
, 
v1
;

1549 
UNITY_INT8
 *
p0
, *
p1
;

1551 
v0
 = 127;

1552 
v1
 = -128;

1553 
p0
 = &
v0
;

1554 
p1
 = &
v1
;

1556 
	`TEST_ASSERT_LESS_THAN_INT8
(
v0
, 
v1
);

1557 
	`TEST_ASSERT_LESS_THAN_INT8
(*
p0
, 
v1
);

1558 
	`TEST_ASSERT_LESS_THAN_INT8
(
v0
, *
p1
);

1559 
	`TEST_ASSERT_LESS_THAN_INT8
(*
p0
, *
p1
);

1560 
	}
}

1562 
	$ã°LessTh™INT16
()

1564 
UNITY_INT16
 
v0
, 
v1
;

1565 
UNITY_INT16
 *
p0
, *
p1
;

1567 
v0
 = 32767;

1568 
v1
 = -32768;

1569 
p0
 = &
v0
;

1570 
p1
 = &
v1
;

1572 
	`TEST_ASSERT_LESS_THAN_INT16
(
v0
, 
v1
);

1573 
	`TEST_ASSERT_LESS_THAN_INT16
(*
p0
, 
v1
);

1574 
	`TEST_ASSERT_LESS_THAN_INT16
(
v0
, *
p1
);

1575 
	`TEST_ASSERT_LESS_THAN_INT16
(*
p0
, *
p1
);

1576 
	}
}

1578 
	$ã°LessTh™INT32
()

1580 
UNITY_INT32
 
v0
, 
v1
;

1581 
UNITY_INT32
 *
p0
, *
p1
;

1583 
v0
 = 214783647;

1584 
v1
 = -214783648;

1585 
p0
 = &
v0
;

1586 
p1
 = &
v1
;

1588 
	`TEST_ASSERT_LESS_THAN_INT32
(
v0
, 
v1
);

1589 
	`TEST_ASSERT_LESS_THAN_INT32
(*
p0
, 
v1
);

1590 
	`TEST_ASSERT_LESS_THAN_INT32
(
v0
, *
p1
);

1591 
	`TEST_ASSERT_LESS_THAN_INT32
(*
p0
, *
p1
);

1592 
	}
}

1594 
	$ã°LessTh™UINT
()

1596 
UNITY_UINT
 
v0
, 
v1
;

1597 
UNITY_UINT
 *
p0
, *
p1
;

1599 
v0
 = 1;

1600 
v1
 = 0;

1601 
p0
 = &
v0
;

1602 
p1
 = &
v1
;

1604 
	`TEST_ASSERT_LESS_THAN_UINT
(
v0
, 
v1
);

1605 
	`TEST_ASSERT_LESS_THAN_UINT
(*
p0
, 
v1
);

1606 
	`TEST_ASSERT_LESS_THAN_UINT
(
v0
, *
p1
);

1607 
	`TEST_ASSERT_LESS_THAN_UINT
(*
p0
, *
p1
);

1608 
	}
}

1611 
	$ã°LessTh™UINT8
()

1613 
UNITY_UINT8
 
v0
, 
v1
;

1614 
UNITY_UINT8
 *
p0
, *
p1
;

1616 
v0
 = 255;

1617 
v1
 = 0;

1618 
p0
 = &
v0
;

1619 
p1
 = &
v1
;

1621 
	`TEST_ASSERT_LESS_THAN_UINT8
(
v0
, 
v1
);

1622 
	`TEST_ASSERT_LESS_THAN_UINT8
(*
p0
, 
v1
);

1623 
	`TEST_ASSERT_LESS_THAN_UINT8
(
v0
, *
p1
);

1624 
	`TEST_ASSERT_LESS_THAN_UINT8
(*
p0
, *
p1
);

1625 
	}
}

1627 
	$ã°LessTh™UINT16
()

1629 
UNITY_UINT16
 
v0
, 
v1
;

1630 
UNITY_UINT16
 *
p0
, *
p1
;

1632 
v0
 = 65535;

1633 
v1
 = 0;

1634 
p0
 = &
v0
;

1635 
p1
 = &
v1
;

1637 
	`TEST_ASSERT_LESS_THAN_UINT16
(
v0
, 
v1
);

1638 
	`TEST_ASSERT_LESS_THAN_UINT16
(*
p0
, 
v1
);

1639 
	`TEST_ASSERT_LESS_THAN_UINT16
(
v0
, *
p1
);

1640 
	`TEST_ASSERT_LESS_THAN_UINT16
(*
p0
, *
p1
);

1641 
	}
}

1643 
	$ã°LessTh™UINT32
()

1645 
UNITY_UINT32
 
v0
, 
v1
;

1646 
UNITY_UINT32
 *
p0
, *
p1
;

1648 
v0
 = 4294967295;

1649 
v1
 = 0;

1650 
p0
 = &
v0
;

1651 
p1
 = &
v1
;

1653 
	`TEST_ASSERT_LESS_THAN_UINT32
(
v0
, 
v1
);

1654 
	`TEST_ASSERT_LESS_THAN_UINT32
(*
p0
, 
v1
);

1655 
	`TEST_ASSERT_LESS_THAN_UINT32
(
v0
, *
p1
);

1656 
	`TEST_ASSERT_LESS_THAN_UINT32
(*
p0
, *
p1
);

1657 
	}
}

1659 
	$ã°LessTh™HEX8
()

1661 
UNITY_UINT8
 
v0
, 
v1
;

1662 
UNITY_UINT8
 *
p0
, *
p1
;

1664 
v0
 = 0xFF;

1665 
v1
 = 0x00;

1666 
p0
 = &
v0
;

1667 
p1
 = &
v1
;

1669 
	`TEST_ASSERT_LESS_THAN_HEX8
(
v0
, 
v1
);

1670 
	`TEST_ASSERT_LESS_THAN_HEX8
(*
p0
, 
v1
);

1671 
	`TEST_ASSERT_LESS_THAN_HEX8
(
v0
, *
p1
);

1672 
	`TEST_ASSERT_LESS_THAN_HEX8
(*
p0
, *
p1
);

1673 
	}
}

1675 
	$ã°LessTh™HEX16
()

1677 
UNITY_UINT16
 
v0
, 
v1
;

1678 
UNITY_UINT16
 *
p0
, *
p1
;

1680 
v0
 = 0xFFFF;

1681 
v1
 = 0x0000;

1682 
p0
 = &
v0
;

1683 
p1
 = &
v1
;

1685 
	`TEST_ASSERT_LESS_THAN_HEX16
(
v0
, 
v1
);

1686 
	`TEST_ASSERT_LESS_THAN_HEX16
(*
p0
, 
v1
);

1687 
	`TEST_ASSERT_LESS_THAN_HEX16
(
v0
, *
p1
);

1688 
	`TEST_ASSERT_LESS_THAN_HEX16
(*
p0
, *
p1
);

1689 
	}
}

1691 
	$ã°LessTh™HEX32
()

1693 
UNITY_UINT32
 
v0
, 
v1
;

1694 
UNITY_UINT32
 *
p0
, *
p1
;

1696 
v0
 = 0xFFFFFFFF;

1697 
v1
 = 0x00000000;

1698 
p0
 = &
v0
;

1699 
p1
 = &
v1
;

1701 
	`TEST_ASSERT_LESS_THAN_HEX32
(
v0
, 
v1
);

1702 
	`TEST_ASSERT_LESS_THAN_HEX32
(*
p0
, 
v1
);

1703 
	`TEST_ASSERT_LESS_THAN_HEX32
(
v0
, *
p1
);

1704 
	`TEST_ASSERT_LESS_THAN_HEX32
(*
p0
, *
p1
);

1705 
	}
}

1708 
	$ã°NŸLessTh™
()

1710 
EXPECT_ABORT_BEGIN


1711 
	`TEST_ASSERT_LESS_THAN
(0, 1);

1712 
VERIFY_FAILS_END


1713 
	}
}

1718 
	$ã°EquÆSåögs
()

1720 c⁄° *
ã°Såög
 = "foo";

1722 
	`TEST_ASSERT_EQUAL_STRING
(
ã°Såög
,ÅestString);

1723 
	`TEST_ASSERT_EQUAL_STRING_MESSAGE
("foo", "foo", "foo isn't foo");

1724 
	`TEST_ASSERT_EQUAL_STRING
("foo", 
ã°Såög
);

1725 
	`TEST_ASSERT_EQUAL_STRING
(
ã°Såög
, "foo");

1726 
	`TEST_ASSERT_EQUAL_STRING
("", "");

1727 
	}
}

1729 
	$ã°EquÆSåögsLí
()

1731 c⁄° *
ã°Såög
 = "foobar";

1732 
	`TEST_ASSERT_EQUAL_STRING_LEN
(
ã°Såög
,Åe°Såög, 
	`°æí
(testString));

1733 
	`TEST_ASSERT_EQUAL_STRING_LEN_MESSAGE
("foobar", "foobaz", 5, "fooba isn't fooba");

1734 
	`TEST_ASSERT_EQUAL_STRING_LEN
("foo", 
ã°Såög
, 3);

1735 
	`TEST_ASSERT_EQUAL_STRING_LEN
(
ã°Såög
, "foo", 3);

1736 
	`TEST_ASSERT_EQUAL_STRING_LEN
("", "", 3);

1737 
	}
}

1739 
	$ã°EquÆSåögsWôhC¨rügeRëu∫sAndLöeFìds
()

1741 c⁄° *
ã°Såög
 = "foo\r\nbar";

1743 
	`TEST_ASSERT_EQUAL_STRING
(
ã°Såög
,ÅestString);

1744 
	`TEST_ASSERT_EQUAL_STRING
("foo\r\nbar", "foo\r\nbar");

1745 
	`TEST_ASSERT_EQUAL_STRING
("foo\r\nb¨", 
ã°Såög
);

1746 
	`TEST_ASSERT_EQUAL_STRING
(
ã°Såög
, "foo\r\nbar");

1747 
	`TEST_ASSERT_EQUAL_STRING
("", "");

1748 
	}
}

1750 
	$ã°NŸEquÆSåög1
()

1752 
EXPECT_ABORT_BEGIN


1753 
	`TEST_ASSERT_EQUAL_STRING
("foo", "bar");

1754 
VERIFY_FAILS_END


1755 
	}
}

1757 
	$ã°NŸEquÆSåögLí1
()

1759 
EXPECT_ABORT_BEGIN


1760 
	`TEST_ASSERT_EQUAL_STRING_LEN
("foobar", "foobaz", 6);

1761 
VERIFY_FAILS_END


1762 
	}
}

1764 
	$ã°NŸEquÆSåög2
()

1766 
EXPECT_ABORT_BEGIN


1767 
	`TEST_ASSERT_EQUAL_STRING
("foo", "");

1768 
VERIFY_FAILS_END


1769 
	}
}

1771 
	$ã°NŸEquÆSåögLí2
()

1773 
EXPECT_ABORT_BEGIN


1774 
	`TEST_ASSERT_EQUAL_STRING_LEN
("foo", "", 3);

1775 
VERIFY_FAILS_END


1776 
	}
}

1778 
	$ã°NŸEquÆSåög3
()

1780 
EXPECT_ABORT_BEGIN


1781 
	`TEST_ASSERT_EQUAL_STRING
("", "bar");

1782 
VERIFY_FAILS_END


1783 
	}
}

1785 
	$ã°NŸEquÆSåögLí3
()

1787 
EXPECT_ABORT_BEGIN


1788 
	`TEST_ASSERT_EQUAL_STRING_LEN
("", "bar", 3);

1789 
VERIFY_FAILS_END


1790 
	}
}

1792 
	$ã°NŸEquÆSåög4
()

1794 
EXPECT_ABORT_BEGIN


1795 
	`TEST_ASSERT_EQUAL_STRING
("bar\r", "bar\n");

1796 
VERIFY_FAILS_END


1797 
	}
}

1799 
	$ã°NŸEquÆSåögLí4
()

1801 
EXPECT_ABORT_BEGIN


1802 
	`TEST_ASSERT_EQUAL_STRING_LEN
("ba\r\x16", "ba\r\n", 4);

1803 
VERIFY_FAILS_END


1804 
	}
}

1806 
	$ã°NŸEquÆSåög5
()

1808 c⁄° 
°r1
[] = { 0x41, 0x42, 0x03, 0x00 };

1809 c⁄° 
°r2
[] = { 0x41, 0x42, 0x04, 0x00 };

1810 
EXPECT_ABORT_BEGIN


1811 
	`TEST_ASSERT_EQUAL_STRING
(
°r1
, 
°r2
);

1812 
VERIFY_FAILS_END


1813 
	}
}

1815 
	$ã°NŸEquÆSåög_Ex≥˘edSåögIsNuŒ
()

1817 
EXPECT_ABORT_BEGIN


1818 
	`TEST_ASSERT_EQUAL_STRING
(
NULL
, "bar");

1819 
VERIFY_FAILS_END


1820 
	}
}

1822 
	$ã°NŸEquÆSåögLí_Ex≥˘edSåögIsNuŒ
()

1824 
EXPECT_ABORT_BEGIN


1825 
	`TEST_ASSERT_EQUAL_STRING_LEN
(
NULL
, "bar", 1);

1826 
VERIFY_FAILS_END


1827 
	}
}

1829 
	$ã°NŸEquÆSåög_A˘uÆSåögIsNuŒ
()

1831 
EXPECT_ABORT_BEGIN


1832 
	`TEST_ASSERT_EQUAL_STRING
("foo", 
NULL
);

1833 
VERIFY_FAILS_END


1834 
	}
}

1836 
	$ã°NŸEquÆSåögLí_A˘uÆSåögIsNuŒ
()

1838 
EXPECT_ABORT_BEGIN


1839 
	`TEST_ASSERT_EQUAL_STRING_LEN
("foo", 
NULL
, 1);

1840 
VERIFY_FAILS_END


1841 
	}
}

1843 
	$ã°EquÆSåögAºays
()

1845 c⁄° *
ã°Såögs
[] = { "foo", "boo", "woo", "moo" };

1846 c⁄° *
expSåögs
[] = { "foo", "boo", "woo", "zoo" };

1848 
	`TEST_ASSERT_EQUAL_STRING_ARRAY
(
expSåögs
,ÉxpStrings, 3);

1849 
	`TEST_ASSERT_EQUAL_STRING_ARRAY
(
expSåögs
, 
ã°Såögs
, 3);

1850 
	`TEST_ASSERT_EQUAL_STRING_ARRAY
(
expSåögs
, 
ã°Såögs
, 2);

1851 
	`TEST_ASSERT_EQUAL_STRING_ARRAY
(
expSåögs
, 
ã°Såögs
, 1);

1852 
	}
}

1854 
	$ã°NŸEquÆSåögAºay1
()

1856 c⁄° *
ã°Såögs
[] = { "foo", "boo", "woo", "moo" };

1857 c⁄° *
expSåögs
[] = { "foo", "boo", "woo", "zoo" };

1859 
EXPECT_ABORT_BEGIN


1860 
	`TEST_ASSERT_EQUAL_STRING_ARRAY
(
expSåögs
, 
ã°Såögs
, 4);

1861 
VERIFY_FAILS_END


1862 
	}
}

1864 
	$ã°NŸEquÆSåögAºay2
()

1866 c⁄° *
ã°Såögs
[] = { "zoo", "boo", "woo", "moo" };

1867 c⁄° *
expSåögs
[] = { "foo", "boo", "woo", "moo" };

1869 
EXPECT_ABORT_BEGIN


1870 
	`TEST_ASSERT_EQUAL_STRING_ARRAY
(
expSåögs
, 
ã°Såögs
, 4);

1871 
VERIFY_FAILS_END


1872 
	}
}

1874 
	$ã°NŸEquÆSåögAºay3
()

1876 c⁄° *
ã°Såögs
[] = { "foo", "boo", "woo", 
NULL
 };

1877 c⁄° *
expSåögs
[] = { "foo", "boo", "woo", "zoo" };

1879 
EXPECT_ABORT_BEGIN


1880 
	`TEST_ASSERT_EQUAL_STRING_ARRAY
(
expSåögs
, 
ã°Såögs
, 4);

1881 
VERIFY_FAILS_END


1882 
	}
}

1884 
	$ã°NŸEquÆSåögAºay4
()

1886 c⁄° *
ã°Såögs
[] = { "foo", "boo", "woo", "moo" };

1887 c⁄° *
expSåögs
[] = { "foo", 
NULL
, "woo", "moo" };

1889 
EXPECT_ABORT_BEGIN


1890 
	`TEST_ASSERT_EQUAL_STRING_ARRAY
(
expSåögs
, 
ã°Såögs
, 4);

1891 
VERIFY_FAILS_END


1892 
	}
}

1894 
	$ã°NŸEquÆSåögAºay5
()

1896 c⁄° **
ã°Såögs
 = 
NULL
;

1897 c⁄° *
expSåögs
[] = { "foo", "boo", "woo", "zoo" };

1899 
EXPECT_ABORT_BEGIN


1900 
	`TEST_ASSERT_EQUAL_STRING_ARRAY
(
expSåögs
, 
ã°Såögs
, 4);

1901 
VERIFY_FAILS_END


1902 
	}
}

1904 
	$ã°NŸEquÆSåögAºay6
()

1906 c⁄° *
ã°Såögs
[] = { "foo", "boo", "woo", "zoo" };

1907 c⁄° **
expSåögs
 = 
NULL
;

1909 
EXPECT_ABORT_BEGIN


1910 
	`TEST_ASSERT_EQUAL_STRING_ARRAY
(
expSåögs
, 
ã°Såögs
, 4);

1911 
VERIFY_FAILS_END


1912 
	}
}

1914 
	$ã°EquÆSåögAºayIfBŸhNuŒs
()

1916 c⁄° **
ã°Såögs
 = 
NULL
;

1917 c⁄° **
expSåögs
 = 
NULL
;

1919 
	`TEST_ASSERT_EQUAL_STRING_ARRAY
(
expSåögs
, 
ã°Såögs
, 4);

1920 
	}
}

1922 
	$ã°NŸEquÆSåögAºayLígthZîo
()

1924 c⁄° *
ã°Såögs
[] = {
NULL
};

1925 c⁄° **
expSåögs
 = 
NULL
;

1927 
EXPECT_ABORT_BEGIN


1928 
	`TEST_ASSERT_EQUAL_STRING_ARRAY
(
expSåögs
, 
ã°Såögs
, 0);

1929 
VERIFY_FAILS_END


1930 
	}
}

1932 
	$ã°EquÆSåögEachEquÆ
()

1934 c⁄° *
ã°Såögs1
[] = { "foo", "foo", "foo", "foo" };

1935 c⁄° *
ã°Såögs2
[] = { "boo", "boo", "boo", "zoo" };

1936 c⁄° *
ã°Såögs3
[] = { "", "", "", "" };

1938 
	`TEST_ASSERT_EACH_EQUAL_STRING
("foo", 
ã°Såögs1
, 4);

1939 
	`TEST_ASSERT_EACH_EQUAL_STRING
("foo", 
ã°Såögs1
, 1);

1940 
	`TEST_ASSERT_EACH_EQUAL_STRING
("boo", 
ã°Såögs2
, 3);

1941 
	`TEST_ASSERT_EACH_EQUAL_STRING
("", 
ã°Såögs3
, 4);

1942 
	}
}

1944 
	$ã°NŸEquÆSåögEachEquÆ1
()

1946 c⁄° *
ã°Såögs
[] = { "foo", "foo", "foo", "moo" };

1948 
EXPECT_ABORT_BEGIN


1949 
	`TEST_ASSERT_EACH_EQUAL_STRING
("foo", 
ã°Såögs
, 4);

1950 
VERIFY_FAILS_END


1951 
	}
}

1953 
	$ã°NŸEquÆSåögEachEquÆ2
()

1955 c⁄° *
ã°Såögs
[] = { "boo", "foo", "foo", "foo" };

1957 
EXPECT_ABORT_BEGIN


1958 
	`TEST_ASSERT_EACH_EQUAL_STRING
("foo", 
ã°Såögs
, 4);

1959 
VERIFY_FAILS_END


1960 
	}
}

1962 
	$ã°NŸEquÆSåögEachEquÆ3
()

1964 c⁄° *
ã°Såögs
[] = { "foo", "foo", "foo", 
NULL
 };

1966 
EXPECT_ABORT_BEGIN


1967 
	`TEST_ASSERT_EACH_EQUAL_STRING
("foo", 
ã°Såögs
, 4);

1968 
VERIFY_FAILS_END


1969 
	}
}

1971 
	$ã°NŸEquÆSåögEachEquÆ4
()

1973 c⁄° *
ã°Såögs
[] = { "foo", "foo", "woo", "foo" };

1975 
EXPECT_ABORT_BEGIN


1976 
	`TEST_ASSERT_EACH_EQUAL_STRING
("foo", 
ã°Såögs
, 4);

1977 
VERIFY_FAILS_END


1978 
	}
}

1980 
	$ã°NŸEquÆSåögEachEquÆ5
()

1982 
EXPECT_ABORT_BEGIN


1983 
	`TEST_ASSERT_EACH_EQUAL_STRING
("foo", 
NULL
, 1);

1984 
VERIFY_FAILS_END


1985 
	}
}

1987 
	$ã°EquÆMem‹y
()

1989 c⁄° *
ã°Såög
 = "whatever";

1991 
	`TEST_ASSERT_EQUAL_MEMORY
(
ã°Såög
,ÅestString, 8);

1992 
	`TEST_ASSERT_EQUAL_MEMORY
("whatever", "whatever", 8);

1993 
	`TEST_ASSERT_EQUAL_MEMORY
("wh©evî", 
ã°Såög
, 8);

1994 
	`TEST_ASSERT_EQUAL_MEMORY
(
ã°Såög
, "whatever", 8);

1995 
	`TEST_ASSERT_EQUAL_MEMORY
(
ã°Såög
, "whatever", 2);

1996 
	`TEST_ASSERT_EQUAL_MEMORY
(
NULL
, NULL, 1);

1997 
	}
}

1999 
	$ã°NŸEquÆMem‹y1
()

2001 
EXPECT_ABORT_BEGIN


2002 
	`TEST_ASSERT_EQUAL_MEMORY
("foo", "bar", 3);

2003 
VERIFY_FAILS_END


2004 
	}
}

2006 
	$ã°NŸEquÆMem‹y2
()

2008 
EXPECT_ABORT_BEGIN


2009 
	`TEST_ASSERT_EQUAL_MEMORY
("fool", "food", 4);

2010 
VERIFY_FAILS_END


2011 
	}
}

2013 
	$ã°NŸEquÆMem‹y3
()

2015 
EXPECT_ABORT_BEGIN


2016 
	`TEST_ASSERT_EQUAL_MEMORY
(
NULL
, "food", 4);

2017 
VERIFY_FAILS_END


2018 
	}
}

2020 
	$ã°NŸEquÆMem‹y4
()

2022 
EXPECT_ABORT_BEGIN


2023 
	`TEST_ASSERT_EQUAL_MEMORY
("foﬁ", 
NULL
, 4);

2024 
VERIFY_FAILS_END


2025 
	}
}

2027 
	$ã°NŸEquÆMem‹yLígthZîo
()

2029 
EXPECT_ABORT_BEGIN


2030 
	`TEST_ASSERT_EQUAL_MEMORY
(
NULL
, NULL, 0);

2031 
VERIFY_FAILS_END


2032 
	}
}

2034 
	$ã°EquÆI¡Aºays
()

2036 
p0
[] = {1, 8, 987, -2};

2037 
p1
[] = {1, 8, 987, -2};

2038 
p2
[] = {1, 8, 987, 2};

2039 
p3
[] = {1, 500, 600, 700};

2041 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
,Ö0, 1);

2042 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
,Ö0, 4);

2043 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
, 
p1
, 4);

2044 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
, 
p2
, 3);

2045 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
, 
p3
, 1);

2046 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
NULL
, NULL, 1);

2047 
	}
}

2049 
	$ã°NŸEquÆI¡AºaysNuŒEx≥˘ed
()

2051 * 
p0
 = 
NULL
;

2052 
p1
[] = {1, 8, 987, 2};

2054 
EXPECT_ABORT_BEGIN


2055 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
, 
p1
, 4);

2056 
VERIFY_FAILS_END


2057 
	}
}

2059 
	$ã°NŸEquÆI¡AºaysNuŒA˘uÆ
()

2061 * 
p1
 = 
NULL
;

2062 
p0
[] = {1, 8, 987, 2};

2064 
EXPECT_ABORT_BEGIN


2065 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
, 
p1
, 4);

2066 
VERIFY_FAILS_END


2067 
	}
}

2069 
	$ã°NŸEquÆI¡Aºays1
()

2071 
p0
[] = {1, 8, 987, -2};

2072 
p1
[] = {1, 8, 987, 2};

2074 
EXPECT_ABORT_BEGIN


2075 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
, 
p1
, 4);

2076 
VERIFY_FAILS_END


2077 
	}
}

2079 
	$ã°NŸEquÆI¡Aºays2
()

2081 
p0
[] = {1, 8, 987, -2};

2082 
p1
[] = {2, 8, 987, -2};

2084 
EXPECT_ABORT_BEGIN


2085 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
, 
p1
, 4);

2086 
VERIFY_FAILS_END


2087 
	}
}

2089 
	$ã°NŸEquÆI¡Aºays3
()

2091 
p0
[] = {1, 8, 987, -2};

2092 
p1
[] = {1, 8, 986, -2};

2094 
EXPECT_ABORT_BEGIN


2095 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
, 
p1
, 4);

2096 
VERIFY_FAILS_END


2097 
	}
}

2099 
	$ã°NŸEquÆI¡AºaysLígthZîo
()

2101 
UNITY_UINT32
 
p0
[1] = {1};

2102 
UNITY_UINT32
 
p1
[1] = {1};

2104 
EXPECT_ABORT_BEGIN


2105 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
, 
p1
, 0);

2106 
VERIFY_FAILS_END


2107 
	}
}

2109 
	$ã°EquÆI¡EachEquÆ
()

2111 
p0
[] = {1, 1, 1, 1};

2112 
p1
[] = {987, 987, 987, 987};

2113 
p2
[] = {-2, -2, -2, -3};

2114 
p3
[] = {1, 5, 600, 700};

2116 
	`TEST_ASSERT_EACH_EQUAL_INT
(1, 
p0
, 1);

2117 
	`TEST_ASSERT_EACH_EQUAL_INT
(1, 
p0
, 4);

2118 
	`TEST_ASSERT_EACH_EQUAL_INT
(987, 
p1
, 4);

2119 
	`TEST_ASSERT_EACH_EQUAL_INT
(-2, 
p2
, 3);

2120 
	`TEST_ASSERT_EACH_EQUAL_INT
(1, 
p3
, 1);

2121 
	}
}

2123 
	$ã°NŸEquÆI¡EachEquÆNuŒA˘uÆ
()

2125 * 
p1
 = 
NULL
;

2127 
EXPECT_ABORT_BEGIN


2128 
	`TEST_ASSERT_EACH_EQUAL_INT
(1, 
p1
, 4);

2129 
VERIFY_FAILS_END


2130 
	}
}

2132 
	$ã°NŸEquÆI¡EachEquÆ1
()

2134 
p0
[] = {1, 1, 1, -2};

2136 
EXPECT_ABORT_BEGIN


2137 
	`TEST_ASSERT_EACH_EQUAL_INT
(1, 
p0
, 4);

2138 
VERIFY_FAILS_END


2139 
	}
}

2141 
	$ã°NŸEquÆI¡EachEquÆ2
()

2143 
p0
[] = {-5, -5, -1, -5};

2145 
EXPECT_ABORT_BEGIN


2146 
	`TEST_ASSERT_EACH_EQUAL_INT
(-5, 
p0
, 4);

2147 
VERIFY_FAILS_END


2148 
	}
}

2150 
	$ã°NŸEquÆI¡EachEquÆ3
()

2152 
p0
[] = {1, 88, 88, 88};

2154 
EXPECT_ABORT_BEGIN


2155 
	`TEST_ASSERT_EACH_EQUAL_INT
(88, 
p0
, 4);

2156 
VERIFY_FAILS_END


2157 
	}
}

2159 
	$ã°NŸEquÆEachEquÆLígthZîo
()

2161 
UNITY_UINT32
 
p0
[1] = {1};

2163 
EXPECT_ABORT_BEGIN


2164 
	`TEST_ASSERT_EACH_EQUAL_INT
(0, 
p0
, 0);

2165 
VERIFY_FAILS_END


2166 
	}
}

2168 
	$ã°EquÆPåAºays
()

2170 
A
 = 1;

2171 
B
 = 2;

2172 
C
 = 3;

2173 * 
p0
[] = {&
A
, &
B
, &
C
};

2174 * 
p1
[] = {&
A
, &
B
, &
C
, &A};

2175 * 
p2
[] = {&
A
, &
B
};

2176 * 
p3
[] = {&
A
};

2178 
	`TEST_ASSERT_EQUAL_PTR_ARRAY
(
p0
,Ö0, 1);

2179 
	`TEST_ASSERT_EQUAL_PTR_ARRAY
(
p0
,Ö0, 3);

2180 
	`TEST_ASSERT_EQUAL_PTR_ARRAY
(
p0
, 
p1
, 3);

2181 
	`TEST_ASSERT_EQUAL_PTR_ARRAY
(
p1
, 
p2
, 2);

2182 
	`TEST_ASSERT_EQUAL_PTR_ARRAY
(
p3
, 
p0
, 1);

2183 
	}
}

2185 
	$ã°NŸEquÆPåAºaysNuŒEx≥˘ed
()

2187 
A
 = 1;

2188 
B
 = 2;

2189 ** 
p0
 = 
NULL
;

2190 * 
p1
[] = {&
A
, &
B
};

2192 
EXPECT_ABORT_BEGIN


2193 
	`TEST_ASSERT_EQUAL_PTR_ARRAY
(
p0
, 
p1
, 2);

2194 
VERIFY_FAILS_END


2195 
	}
}

2197 
	$ã°NŸEquÆPåAºaysNuŒA˘uÆ
()

2199 
A
 = 1;

2200 
B
 = 2;

2201 ** 
p0
 = 
NULL
;

2202 * 
p1
[] = {&
A
, &
B
};

2204 
EXPECT_ABORT_BEGIN


2205 
	`TEST_ASSERT_EQUAL_PTR_ARRAY
(
p1
, 
p0
, 2);

2206 
VERIFY_FAILS_END


2207 
	}
}

2209 
	$ã°NŸEquÆPåAºays1
()

2211 
A
 = 1;

2212 
B
 = 2;

2213 
C
 = 3;

2214 * 
p0
[] = {&
A
, &
B
, &
C
, &B};

2215 * 
p1
[] = {&
A
, &
B
, &
C
, &A};

2217 
EXPECT_ABORT_BEGIN


2218 
	`TEST_ASSERT_EQUAL_PTR_ARRAY
(
p0
, 
p1
, 4);

2219 
VERIFY_FAILS_END


2220 
	}
}

2222 
	$ã°NŸEquÆPåAºays2
()

2224 
A
 = 1;

2225 
B
 = 2;

2226 
C
 = 3;

2227 * 
p0
[] = {&
B
, &B, &
C
, &
A
};

2228 * 
p1
[] = {&
A
, &
B
, &
C
, &A};

2230 
EXPECT_ABORT_BEGIN


2231 
	`TEST_ASSERT_EQUAL_PTR_ARRAY
(
p0
, 
p1
, 4);

2232 
VERIFY_FAILS_END


2233 
	}
}

2235 
	$ã°NŸEquÆPåAºays3
()

2237 
A
 = 1;

2238 
B
 = 2;

2239 
C
 = 3;

2240 * 
p0
[] = {&
A
, &
B
, &B, &A};

2241 * 
p1
[] = {&
A
, &
B
, &
C
, &A};

2243 
EXPECT_ABORT_BEGIN


2244 
	`TEST_ASSERT_EQUAL_PTR_ARRAY
(
p0
, 
p1
, 4);

2245 
VERIFY_FAILS_END


2246 
	}
}

2248 
	$ã°EquÆPåEachEquÆ
()

2250 
A
 = 1;

2251 
B
 = 2;

2252 
C
 = 3;

2253 * 
p0
[] = {&
A
, &A, &A};

2254 * 
p1
[] = {&
A
, &
B
, &
C
, &A};

2255 * 
p2
[] = {&
B
, &B};

2256 * 
p3
[] = {&
C
};

2258 
	`TEST_ASSERT_EACH_EQUAL_PTR
(&
A
, 
p0
, 1);

2259 
	`TEST_ASSERT_EACH_EQUAL_PTR
(&
A
, 
p0
, 3);

2260 
	`TEST_ASSERT_EACH_EQUAL_PTR
(&
A
, 
p1
, 1);

2261 
	`TEST_ASSERT_EACH_EQUAL_PTR
(&
B
, 
p2
, 2);

2262 
	`TEST_ASSERT_EACH_EQUAL_PTR
(&
C
, 
p3
, 1);

2263 
	}
}

2265 
	$ã°NŸEquÆPåEachEquÆNuŒEx≥˘ed
()

2267 
A
 = 1;

2268 
B
 = 1;

2269 * 
p0
[] = {&
A
, &
B
};

2271 
EXPECT_ABORT_BEGIN


2272 
	`TEST_ASSERT_EACH_EQUAL_PTR
(&
A
, 
p0
, 2);

2273 
VERIFY_FAILS_END


2274 
	}
}

2276 
	$ã°NŸEquÆPåEachEquÆNuŒA˘uÆ
()

2278 
A
 = 1;

2279 ** 
p0
 = 
NULL
;

2281 
EXPECT_ABORT_BEGIN


2282 
	`TEST_ASSERT_EACH_EQUAL_PTR
(&
A
, 
p0
, 2);

2283 
VERIFY_FAILS_END


2284 
	}
}

2286 
	$ã°NŸEquÆPåEachEquÆ1
()

2288 
A
 = 1;

2289 
B
 = 1;

2290 * 
p0
[] = {&
A
, &A, &A, &
B
};

2292 
EXPECT_ABORT_BEGIN


2293 
	`TEST_ASSERT_EACH_EQUAL_PTR
(&
A
, 
p0
, 4);

2294 
VERIFY_FAILS_END


2295 
	}
}

2297 
	$ã°NŸEquÆPåEachEquÆ2
()

2299 
A
 = 1;

2300 
B
 = 1;

2301 * 
p0
[] = {&
B
, &B, &
A
, &B};

2303 
EXPECT_ABORT_BEGIN


2304 
	`TEST_ASSERT_EACH_EQUAL_PTR
(&
B
, 
p0
, 4);

2305 
VERIFY_FAILS_END


2306 
	}
}

2308 
	$ã°NŸEquÆPåEachEquÆ3
()

2310 
A
 = 1;

2311 
B
 = 1;

2312 * 
p0
[] = {&
A
, &
B
, &B, &B};

2314 
EXPECT_ABORT_BEGIN


2315 
	`TEST_ASSERT_EACH_EQUAL_PTR
(&
B
, 
p0
, 4);

2316 
VERIFY_FAILS_END


2317 
	}
}

2319 
	$ã°EquÆI¡8Aºays
()

2321 
UNITY_INT8
 
p0
[] = {1, 8, 117, -2};

2322 
UNITY_INT8
 
p1
[] = {1, 8, 117, -2};

2323 
UNITY_INT8
 
p2
[] = {1, 8, 117, 2};

2324 
UNITY_INT8
 
p3
[] = {1, 50, 60, 70};

2326 
	`TEST_ASSERT_EQUAL_INT8_ARRAY
(
p0
,Ö0, 1);

2327 
	`TEST_ASSERT_EQUAL_INT8_ARRAY
(
p0
,Ö0, 4);

2328 
	`TEST_ASSERT_EQUAL_INT8_ARRAY
(
p0
, 
p1
, 4);

2329 
	`TEST_ASSERT_EQUAL_INT8_ARRAY
(
p0
, 
p2
, 3);

2330 
	`TEST_ASSERT_EQUAL_INT8_ARRAY
(
p0
, 
p3
, 1);

2331 
	}
}

2333 
	$ã°NŸEquÆI¡8Aºays
()

2335 
UNITY_INT8
 
p0
[] = {1, 8, 36, -2};

2336 
UNITY_INT8
 
p1
[] = {1, 8, 36, 2};

2338 
EXPECT_ABORT_BEGIN


2339 
	`TEST_ASSERT_EQUAL_INT8_ARRAY
(
p0
, 
p1
, 4);

2340 
VERIFY_FAILS_END


2341 
	}
}

2343 
	$ã°EquÆI¡8EachEquÆ
()

2345 
UNITY_INT8
 
p0
[] = {1, 1, 1, 1};

2346 
UNITY_INT8
 
p1
[] = {117, 117, 117, -2};

2347 
UNITY_INT8
 
p2
[] = {-1, -1, 117, 2};

2348 
UNITY_INT8
 
p3
[] = {1, 50, 60, 70};

2350 
	`TEST_ASSERT_EACH_EQUAL_INT8
(1, 
p0
, 1);

2351 
	`TEST_ASSERT_EACH_EQUAL_INT8
(1, 
p0
, 4);

2352 
	`TEST_ASSERT_EACH_EQUAL_INT8
(117, 
p1
, 3);

2353 
	`TEST_ASSERT_EACH_EQUAL_INT8
(-1, 
p2
, 2);

2354 
	`TEST_ASSERT_EACH_EQUAL_INT8
(1, 
p3
, 1);

2355 
	}
}

2357 
	$ã°NŸEquÆI¡8EachEquÆ
()

2359 
UNITY_INT8
 
p0
[] = {1, 8, 36, -2};

2361 
EXPECT_ABORT_BEGIN


2362 
	`TEST_ASSERT_EACH_EQUAL_INT8
(1, 
p0
, 2);

2363 
VERIFY_FAILS_END


2364 
	}
}

2366 
	$ã°EquÆUI¡Aºays
()

2368 
p0
[] = {1, 8, 987, 65132u};

2369 
p1
[] = {1, 8, 987, 65132u};

2370 
p2
[] = {1, 8, 987, 2};

2371 
p3
[] = {1, 500, 600, 700};

2373 
	`TEST_ASSERT_EQUAL_UINT_ARRAY
(
p0
,Ö0, 1);

2374 
	`TEST_ASSERT_EQUAL_UINT_ARRAY
(
p0
,Ö0, 4);

2375 
	`TEST_ASSERT_EQUAL_UINT_ARRAY
(
p0
, 
p1
, 4);

2376 
	`TEST_ASSERT_EQUAL_UINT_ARRAY
(
p0
, 
p2
, 3);

2377 
	`TEST_ASSERT_EQUAL_UINT_ARRAY
(
p0
, 
p3
, 1);

2378 
	}
}

2380 
	$ã°NŸEquÆUI¡Aºays1
()

2382 
p0
[] = {1, 8, 987, 65132u};

2383 
p1
[] = {1, 8, 987, 65131u};

2385 
EXPECT_ABORT_BEGIN


2386 
	`TEST_ASSERT_EQUAL_UINT_ARRAY
(
p0
, 
p1
, 4);

2387 
VERIFY_FAILS_END


2388 
	}
}

2390 
	$ã°NŸEquÆUI¡Aºays2
()

2392 
p0
[] = {1, 8, 987, 65132u};

2393 
p1
[] = {2, 8, 987, 65132u};

2395 
EXPECT_ABORT_BEGIN


2396 
	`TEST_ASSERT_EQUAL_UINT_ARRAY
(
p0
, 
p1
, 4);

2397 
VERIFY_FAILS_END


2398 
	}
}

2400 
	$ã°NŸEquÆUI¡Aºays3
()

2402 
p0
[] = {1, 8, 987, 65132u};

2403 
p1
[] = {1, 8, 986, 65132u};

2405 
EXPECT_ABORT_BEGIN


2406 
	`TEST_ASSERT_EQUAL_UINT_ARRAY
(
p0
, 
p1
, 4);

2407 
VERIFY_FAILS_END


2408 
	}
}

2410 
	$ã°EquÆUI¡EachEquÆ
()

2412 
p0
[] = {1, 1, 1, 1};

2413 
p1
[] = {65132u, 65132u, 65132u, 65132u};

2414 
p2
[] = {8, 8, 987, 2};

2415 
p3
[] = {1, 500, 600, 700};

2417 
	`TEST_ASSERT_EACH_EQUAL_UINT
(1, 
p0
, 1);

2418 
	`TEST_ASSERT_EACH_EQUAL_UINT
(1, 
p0
, 4);

2419 
	`TEST_ASSERT_EACH_EQUAL_UINT
(65132u, 
p1
, 4);

2420 
	`TEST_ASSERT_EACH_EQUAL_UINT
(8, 
p2
, 2);

2421 
	`TEST_ASSERT_EACH_EQUAL_UINT
(1, 
p3
, 1);

2422 
	}
}

2424 
	$ã°NŸEquÆUI¡EachEquÆ1
()

2426 
p0
[] = {1, 65132u, 65132u, 65132u};

2428 
EXPECT_ABORT_BEGIN


2429 
	`TEST_ASSERT_EACH_EQUAL_UINT
(65132u, 
p0
, 4);

2430 
VERIFY_FAILS_END


2431 
	}
}

2433 
	$ã°NŸEquÆUI¡EachEquÆ2
()

2435 
p0
[] = {987, 8, 987, 987};

2437 
EXPECT_ABORT_BEGIN


2438 
	`TEST_ASSERT_EACH_EQUAL_UINT
(987, 
p0
, 4);

2439 
VERIFY_FAILS_END


2440 
	}
}

2442 
	$ã°NŸEquÆUI¡EachEquÆ3
()

2444 
p0
[] = {1, 1, 1, 65132u};

2446 
EXPECT_ABORT_BEGIN


2447 
	`TEST_ASSERT_EACH_EQUAL_UINT
(1, 
p0
, 4);

2448 
VERIFY_FAILS_END


2449 
	}
}

2451 
	$ã°EquÆI¡16Aºays
()

2453 
UNITY_INT16
 
p0
[] = {1, 8, 117, 3};

2454 
UNITY_INT16
 
p1
[] = {1, 8, 117, 3};

2455 
UNITY_INT16
 
p2
[] = {1, 8, 117, 2};

2456 
UNITY_INT16
 
p3
[] = {1, 50, 60, 70};

2458 
	`TEST_ASSERT_EQUAL_INT16_ARRAY
(
p0
,Ö0, 1);

2459 
	`TEST_ASSERT_EQUAL_INT16_ARRAY
(
p0
,Ö0, 4);

2460 
	`TEST_ASSERT_EQUAL_INT16_ARRAY
(
p0
, 
p1
, 4);

2461 
	`TEST_ASSERT_EQUAL_INT16_ARRAY
(
p0
, 
p2
, 3);

2462 
	`TEST_ASSERT_EQUAL_INT16_ARRAY
(
p0
, 
p3
, 1);

2463 
	}
}

2465 
	$ã°NŸEquÆI¡16Aºays
()

2467 
UNITY_INT16
 
p0
[] = {1, 8, 127, 3};

2468 
UNITY_INT16
 
p1
[] = {1, 8, 127, 2};

2470 
EXPECT_ABORT_BEGIN


2471 
	`TEST_ASSERT_EQUAL_INT16_ARRAY
(
p0
, 
p1
, 4);

2472 
VERIFY_FAILS_END


2473 
	}
}

2475 
	$ã°EquÆI¡16EachEquÆ
()

2477 
UNITY_INT16
 
p0
[] = {1, 1, 1, 1};

2478 
UNITY_INT16
 
p1
[] = {32111, 32111, 32111, 3};

2479 
UNITY_INT16
 
p2
[] = {-1, -1, -1, 2};

2480 
UNITY_INT16
 
p3
[] = {1, 50, 60, 70};

2482 
	`TEST_ASSERT_EACH_EQUAL_INT16
(1, 
p0
, 1);

2483 
	`TEST_ASSERT_EACH_EQUAL_INT16
(1, 
p0
, 4);

2484 
	`TEST_ASSERT_EACH_EQUAL_INT16
(32111, 
p1
, 3);

2485 
	`TEST_ASSERT_EACH_EQUAL_INT16
(-1, 
p2
, 3);

2486 
	`TEST_ASSERT_EACH_EQUAL_INT16
(1, 
p3
, 1);

2487 
	}
}

2489 
	$ã°NŸEquÆI¡16EachEquÆ
()

2491 
UNITY_INT16
 
p0
[] = {127, 127, 127, 3};

2493 
EXPECT_ABORT_BEGIN


2494 
	`TEST_ASSERT_EACH_EQUAL_INT16
(127, 
p0
, 4);

2495 
VERIFY_FAILS_END


2496 
	}
}

2498 
	$ã°EquÆI¡32Aºays
()

2500 
UNITY_INT32
 
p0
[] = {1, 8, 117, 3};

2501 
UNITY_INT32
 
p1
[] = {1, 8, 117, 3};

2502 
UNITY_INT32
 
p2
[] = {1, 8, 117, 2};

2503 
UNITY_INT32
 
p3
[] = {1, 50, 60, 70};

2505 
	`TEST_ASSERT_EQUAL_INT32_ARRAY
(
p0
,Ö0, 1);

2506 
	`TEST_ASSERT_EQUAL_INT32_ARRAY
(
p0
,Ö0, 4);

2507 
	`TEST_ASSERT_EQUAL_INT32_ARRAY
(
p0
, 
p1
, 4);

2508 
	`TEST_ASSERT_EQUAL_INT32_ARRAY
(
p0
, 
p2
, 3);

2509 
	`TEST_ASSERT_EQUAL_INT32_ARRAY
(
p0
, 
p3
, 1);

2510 
	}
}

2512 
	$ã°NŸEquÆI¡32Aºays
()

2514 
UNITY_INT32
 
p0
[] = {1, 8, 127, 3};

2515 
UNITY_INT32
 
p1
[] = {1, 8, 127, 2};

2517 
EXPECT_ABORT_BEGIN


2518 
	`TEST_ASSERT_EQUAL_INT32_ARRAY
(
p0
, 
p1
, 4);

2519 
VERIFY_FAILS_END


2520 
	}
}

2522 
	$ã°EquÆI¡32EachEquÆ
()

2524 
UNITY_INT32
 
p0
[] = {8, 8, 8, 8};

2525 
UNITY_INT32
 
p1
[] = {65537, 65537, 65537, 65537};

2526 
UNITY_INT32
 
p2
[] = {-3, -3, -3, 2};

2527 
UNITY_INT32
 
p3
[] = {1, 50, 60, 70};

2529 
	`TEST_ASSERT_EACH_EQUAL_INT32
(8, 
p0
, 1);

2530 
	`TEST_ASSERT_EACH_EQUAL_INT32
(8, 
p0
, 4);

2531 
	`TEST_ASSERT_EACH_EQUAL_INT32
(65537, 
p1
, 4);

2532 
	`TEST_ASSERT_EACH_EQUAL_INT32
(-3, 
p2
, 3);

2533 
	`TEST_ASSERT_EACH_EQUAL_INT32
(1, 
p3
, 1);

2534 
	}
}

2536 
	$ã°NŸEquÆI¡32EachEquÆ
()

2538 
UNITY_INT32
 
p0
[] = {127, 8, 127, 127};

2540 
EXPECT_ABORT_BEGIN


2541 
	`TEST_ASSERT_EACH_EQUAL_INT32
(127, 
p0
, 4);

2542 
VERIFY_FAILS_END


2543 
	}
}

2545 
	$ã°EquÆUINT8Aºays
()

2547 
UNITY_UINT8
 
p0
[] = {1, 8, 100, 127};

2548 
UNITY_UINT8
 
p1
[] = {1, 8, 100, 127};

2549 
UNITY_UINT8
 
p2
[] = {1, 8, 100, 2};

2550 
UNITY_UINT8
 
p3
[] = {1, 50, 60, 70};

2552 
	`TEST_ASSERT_EQUAL_UINT8_ARRAY
(
p0
,Ö0, 1);

2553 
	`TEST_ASSERT_EQUAL_UINT8_ARRAY
(
p0
,Ö0, 4);

2554 
	`TEST_ASSERT_EQUAL_UINT8_ARRAY
(
p0
, 
p1
, 4);

2555 
	`TEST_ASSERT_EQUAL_UINT8_ARRAY
(
p0
, 
p2
, 3);

2556 
	`TEST_ASSERT_EQUAL_UINT8_ARRAY
(
p0
, 
p3
, 1);

2557 
	}
}

2559 
	$ã°NŸEquÆUINT8Aºays1
()

2561 
p0
[] = {1, 8, 100, 127u};

2562 
p1
[] = {1, 8, 100, 255u};

2564 
EXPECT_ABORT_BEGIN


2565 
	`TEST_ASSERT_EQUAL_UINT8_ARRAY
(
p0
, 
p1
, 4);

2566 
VERIFY_FAILS_END


2567 
	}
}

2569 
	$ã°NŸEquÆUINT8Aºays2
()

2571 
p0
[] = {1, 8, 100, 127u};

2572 
p1
[] = {1, 8, 100, 255u};

2574 
EXPECT_ABORT_BEGIN


2575 
	`TEST_ASSERT_EQUAL_UINT8_ARRAY
(
p0
, 
p1
, 4);

2576 
VERIFY_FAILS_END


2577 
	}
}

2579 
	$ã°NŸEquÆUINT8Aºays3
()

2581 
p0
[] = {1, 8, 100, 127u};

2582 
p1
[] = {1, 8, 100, 255u};

2584 
EXPECT_ABORT_BEGIN


2585 
	`TEST_ASSERT_EQUAL_UINT8_ARRAY
(
p0
, 
p1
, 4);

2586 
VERIFY_FAILS_END


2587 
	}
}

2590 
	$ã°EquÆUINT16Aºays
()

2592 
p0
[] = {1, 8, 987, 65132u};

2593 
p1
[] = {1, 8, 987, 65132u};

2594 
p2
[] = {1, 8, 987, 2};

2595 
p3
[] = {1, 500, 600, 700};

2597 
	`TEST_ASSERT_EQUAL_UINT16_ARRAY
(
p0
,Ö0, 1);

2598 
	`TEST_ASSERT_EQUAL_UINT16_ARRAY
(
p0
,Ö0, 4);

2599 
	`TEST_ASSERT_EQUAL_UINT16_ARRAY
(
p0
, 
p1
, 4);

2600 
	`TEST_ASSERT_EQUAL_UINT16_ARRAY
(
p0
, 
p2
, 3);

2601 
	`TEST_ASSERT_EQUAL_UINT16_ARRAY
(
p0
, 
p3
, 1);

2602 
	}
}

2604 
	$ã°NŸEquÆUINT16Aºays1
()

2606 
p0
[] = {1, 8, 987, 65132u};

2607 
p1
[] = {1, 8, 987, 65131u};

2609 
EXPECT_ABORT_BEGIN


2610 
	`TEST_ASSERT_EQUAL_UINT16_ARRAY
(
p0
, 
p1
, 4);

2611 
VERIFY_FAILS_END


2612 
	}
}

2614 
	$ã°NŸEquÆUINT16Aºays2
()

2616 
p0
[] = {1, 8, 987, 65132u};

2617 
p1
[] = {2, 8, 987, 65132u};

2619 
EXPECT_ABORT_BEGIN


2620 
	`TEST_ASSERT_EQUAL_UINT16_ARRAY
(
p0
, 
p1
, 4);

2621 
VERIFY_FAILS_END


2622 
	}
}

2624 
	$ã°NŸEquÆUINT16Aºays3
()

2626 
p0
[] = {1, 8, 987, 65132u};

2627 
p1
[] = {1, 8, 986, 65132u};

2629 
EXPECT_ABORT_BEGIN


2630 
	`TEST_ASSERT_EQUAL_UINT16_ARRAY
(
p0
, 
p1
, 4);

2631 
VERIFY_FAILS_END


2632 
	}
}

2634 
	$ã°EquÆUINT32Aºays
()

2636 
UNITY_UINT32
 
p0
[] = {1, 8, 987, 65132u};

2637 
UNITY_UINT32
 
p1
[] = {1, 8, 987, 65132u};

2638 
UNITY_UINT32
 
p2
[] = {1, 8, 987, 2};

2639 
UNITY_UINT32
 
p3
[] = {1, 500, 600, 700};

2641 
	`TEST_ASSERT_EQUAL_UINT32_ARRAY
(
p0
,Ö0, 1);

2642 
	`TEST_ASSERT_EQUAL_UINT32_ARRAY
(
p0
,Ö0, 4);

2643 
	`TEST_ASSERT_EQUAL_UINT32_ARRAY
(
p0
, 
p1
, 4);

2644 
	`TEST_ASSERT_EQUAL_UINT32_ARRAY
(
p0
, 
p2
, 3);

2645 
	`TEST_ASSERT_EQUAL_UINT32_ARRAY
(
p0
, 
p3
, 1);

2646 
	}
}

2648 
	$ã°NŸEquÆUINT32Aºays1
()

2650 
UNITY_UINT32
 
p0
[] = {1, 8, 987, 65132u};

2651 
UNITY_UINT32
 
p1
[] = {1, 8, 987, 65131u};

2653 
EXPECT_ABORT_BEGIN


2654 
	`TEST_ASSERT_EQUAL_UINT32_ARRAY
(
p0
, 
p1
, 4);

2655 
VERIFY_FAILS_END


2656 
	}
}

2658 
	$ã°NŸEquÆUINT32Aºays2
()

2660 
UNITY_UINT32
 
p0
[] = {1, 8, 987, 65132u};

2661 
UNITY_UINT32
 
p1
[] = {2, 8, 987, 65132u};

2663 
EXPECT_ABORT_BEGIN


2664 
	`TEST_ASSERT_EQUAL_UINT32_ARRAY
(
p0
, 
p1
, 4);

2665 
VERIFY_FAILS_END


2666 
	}
}

2668 
	$ã°NŸEquÆUINT32Aºays3
()

2670 
UNITY_UINT32
 
p0
[] = {1, 8, 987, 65132u};

2671 
UNITY_UINT32
 
p1
[] = {1, 8, 986, 65132u};

2673 
EXPECT_ABORT_BEGIN


2674 
	`TEST_ASSERT_EQUAL_UINT32_ARRAY
(
p0
, 
p1
, 4);

2675 
VERIFY_FAILS_END


2676 
	}
}

2678 
	$ã°EquÆHEXAºays
()

2680 
UNITY_UINT32
 
p0
[] = {1, 8, 987, 65132u};

2681 
UNITY_UINT32
 
p1
[] = {1, 8, 987, 65132u};

2682 
UNITY_UINT32
 
p2
[] = {1, 8, 987, 2};

2683 
UNITY_UINT32
 
p3
[] = {1, 500, 600, 700};

2685 
	`TEST_ASSERT_EQUAL_HEX_ARRAY
(
p0
,Ö0, 1);

2686 
	`TEST_ASSERT_EQUAL_HEX_ARRAY
(
p0
,Ö0, 4);

2687 
	`TEST_ASSERT_EQUAL_HEX_ARRAY
(
p0
, 
p1
, 4);

2688 
	`TEST_ASSERT_EQUAL_HEX32_ARRAY
(
p0
, 
p2
, 3);

2689 
	`TEST_ASSERT_EQUAL_HEX32_ARRAY
(
p0
, 
p3
, 1);

2690 
	}
}

2692 
	$ã°NŸEquÆHEXAºays1
()

2694 
UNITY_UINT32
 
p0
[] = {1, 8, 987, 65132u};

2695 
UNITY_UINT32
 
p1
[] = {1, 8, 987, 65131u};

2697 
EXPECT_ABORT_BEGIN


2698 
	`TEST_ASSERT_EQUAL_HEX32_ARRAY
(
p0
, 
p1
, 4);

2699 
VERIFY_FAILS_END


2700 
	}
}

2702 
	$ã°NŸEquÆHEXAºays2
()

2704 
UNITY_UINT32
 
p0
[] = {1, 8, 987, 65132u};

2705 
UNITY_UINT32
 
p1
[] = {2, 8, 987, 65132u};

2707 
EXPECT_ABORT_BEGIN


2708 
	`TEST_ASSERT_EQUAL_HEX32_ARRAY
(
p0
, 
p1
, 4);

2709 
VERIFY_FAILS_END


2710 
	}
}

2712 
	$ã°NŸEquÆHEXAºays3
()

2714 
UNITY_UINT32
 
p0
[] = {1, 8, 987, 65132u};

2715 
UNITY_UINT32
 
p1
[] = {1, 8, 986, 65132u};

2717 
EXPECT_ABORT_BEGIN


2718 
	`TEST_ASSERT_EQUAL_HEX_ARRAY
(
p0
, 
p1
, 4);

2719 
VERIFY_FAILS_END


2720 
	}
}

2722 
	$ã°EquÆHEX32Aºays
()

2724 
UNITY_UINT32
 
p0
[] = {1, 8, 987, 65132u};

2725 
UNITY_UINT32
 
p1
[] = {1, 8, 987, 65132u};

2726 
UNITY_UINT32
 
p2
[] = {1, 8, 987, 2};

2727 
UNITY_UINT32
 
p3
[] = {1, 500, 600, 700};

2729 
	`TEST_ASSERT_EQUAL_HEX32_ARRAY
(
p0
,Ö0, 1);

2730 
	`TEST_ASSERT_EQUAL_HEX32_ARRAY
(
p0
,Ö0, 4);

2731 
	`TEST_ASSERT_EQUAL_HEX32_ARRAY
(
p0
, 
p1
, 4);

2732 
	`TEST_ASSERT_EQUAL_HEX32_ARRAY
(
p0
, 
p2
, 3);

2733 
	`TEST_ASSERT_EQUAL_HEX32_ARRAY
(
p0
, 
p3
, 1);

2734 
	}
}

2736 
	$ã°NŸEquÆHEX32Aºays1
()

2738 
UNITY_UINT32
 
p0
[] = {1, 8, 987, 65132u};

2739 
UNITY_UINT32
 
p1
[] = {1, 8, 987, 65131u};

2741 
EXPECT_ABORT_BEGIN


2742 
	`TEST_ASSERT_EQUAL_HEX32_ARRAY
(
p0
, 
p1
, 4);

2743 
VERIFY_FAILS_END


2744 
	}
}

2746 
	$ã°NŸEquÆHEX32Aºays2
()

2748 
UNITY_UINT32
 
p0
[] = {1, 8, 987, 65132u};

2749 
UNITY_UINT32
 
p1
[] = {2, 8, 987, 65132u};

2751 
EXPECT_ABORT_BEGIN


2752 
	`TEST_ASSERT_EQUAL_HEX32_ARRAY
(
p0
, 
p1
, 4);

2753 
VERIFY_FAILS_END


2754 
	}
}

2756 
	$ã°NŸEquÆHEX32Aºays3
()

2758 
UNITY_UINT32
 
p0
[] = {1, 8, 987, 65132u};

2759 
UNITY_UINT32
 
p1
[] = {1, 8, 986, 65132u};

2761 
EXPECT_ABORT_BEGIN


2762 
	`TEST_ASSERT_EQUAL_HEX32_ARRAY
(
p0
, 
p1
, 4);

2763 
VERIFY_FAILS_END


2764 
	}
}

2766 
	$ã°EquÆHEX16Aºays
()

2768 
p0
[] = {1, 8, 987, 65132u};

2769 
p1
[] = {1, 8, 987, 65132u};

2770 
p2
[] = {1, 8, 987, 2};

2771 
p3
[] = {1, 500, 600, 700};

2773 
	`TEST_ASSERT_EQUAL_HEX16_ARRAY
(
p0
,Ö0, 1);

2774 
	`TEST_ASSERT_EQUAL_HEX16_ARRAY
(
p0
,Ö0, 4);

2775 
	`TEST_ASSERT_EQUAL_HEX16_ARRAY
(
p0
, 
p1
, 4);

2776 
	`TEST_ASSERT_EQUAL_HEX16_ARRAY
(
p0
, 
p2
, 3);

2777 
	`TEST_ASSERT_EQUAL_HEX16_ARRAY
(
p0
, 
p3
, 1);

2778 
	}
}

2780 
	$ã°NŸEquÆHEX16Aºays1
()

2782 
p0
[] = {1, 8, 987, 65132u};

2783 
p1
[] = {1, 8, 987, 65131u};

2785 
EXPECT_ABORT_BEGIN


2786 
	`TEST_ASSERT_EQUAL_HEX16_ARRAY
(
p0
, 
p1
, 4);

2787 
VERIFY_FAILS_END


2788 
	}
}

2790 
	$ã°NŸEquÆHEX16Aºays2
()

2792 
p0
[] = {1, 8, 987, 65132u};

2793 
p1
[] = {2, 8, 987, 65132u};

2795 
EXPECT_ABORT_BEGIN


2796 
	`TEST_ASSERT_EQUAL_HEX16_ARRAY
(
p0
, 
p1
, 4);

2797 
VERIFY_FAILS_END


2798 
	}
}

2800 
	$ã°NŸEquÆHEX16Aºays3
()

2802 
p0
[] = {1, 8, 987, 65132u};

2803 
p1
[] = {1, 8, 986, 65132u};

2805 
EXPECT_ABORT_BEGIN


2806 
	`TEST_ASSERT_EQUAL_HEX16_ARRAY
(
p0
, 
p1
, 4);

2807 
VERIFY_FAILS_END


2808 
	}
}

2810 
	$ã°EquÆHEX8Aºays
()

2812 
p0
[] = {1, 8, 254u, 123};

2813 
p1
[] = {1, 8, 254u, 123};

2814 
p2
[] = {1, 8, 254u, 2};

2815 
p3
[] = {1, 23, 25, 26};

2817 
	`TEST_ASSERT_EQUAL_HEX8_ARRAY
(
p0
,Ö0, 1);

2818 
	`TEST_ASSERT_EQUAL_HEX8_ARRAY
(
p0
,Ö0, 4);

2819 
	`TEST_ASSERT_EQUAL_HEX8_ARRAY
(
p0
, 
p1
, 4);

2820 
	`TEST_ASSERT_EQUAL_HEX8_ARRAY
(
p0
, 
p2
, 3);

2821 
	`TEST_ASSERT_EQUAL_HEX8_ARRAY
(
p0
, 
p3
, 1);

2822 
	}
}

2824 
	$ã°NŸEquÆHEX8Aºays1
()

2826 
p0
[] = {1, 8, 254u, 253u};

2827 
p1
[] = {1, 8, 254u, 252u};

2829 
EXPECT_ABORT_BEGIN


2830 
	`TEST_ASSERT_EQUAL_HEX8_ARRAY
(
p0
, 
p1
, 4);

2831 
VERIFY_FAILS_END


2832 
	}
}

2834 
	$ã°NŸEquÆHEX8Aºays2
()

2836 
p0
[] = {1, 8, 254u, 253u};

2837 
p1
[] = {2, 8, 254u, 253u};

2839 
EXPECT_ABORT_BEGIN


2840 
	`TEST_ASSERT_EQUAL_HEX8_ARRAY
(
p0
, 
p1
, 4);

2841 
VERIFY_FAILS_END


2842 
	}
}

2844 
	$ã°NŸEquÆHEX8Aºays3
()

2846 
p0
[] = {1, 8, 254u, 253u};

2847 
p1
[] = {1, 8, 255u, 253u};

2849 
EXPECT_ABORT_BEGIN


2850 
	`TEST_ASSERT_EQUAL_HEX8_ARRAY
(
p0
, 
p1
, 4);

2851 
VERIFY_FAILS_END


2852 
	}
}

2854 
	$ã°EquÆUINT8EachEquÆ
()

2856 
UNITY_UINT8
 
p0
[] = {127u, 127u, 127u, 127u};

2857 
UNITY_UINT8
 
p1
[] = {1u, 1u, 1u, 1u};

2858 
UNITY_UINT8
 
p2
[] = {128u, 128u, 128u, 2u};

2859 
UNITY_UINT8
 
p3
[] = {1u, 50u, 60u, 70u};

2861 
	`TEST_ASSERT_EACH_EQUAL_UINT8
(127u, 
p0
, 1);

2862 
	`TEST_ASSERT_EACH_EQUAL_UINT8
(127u, 
p0
, 4);

2863 
	`TEST_ASSERT_EACH_EQUAL_UINT8
(1u, 
p1
, 4);

2864 
	`TEST_ASSERT_EACH_EQUAL_UINT8
(128u, 
p2
, 3);

2865 
	`TEST_ASSERT_EACH_EQUAL_UINT8
(1u, 
p3
, 1);

2866 
	}
}

2868 
	$ã°NŸEquÆUINT8EachEquÆ1
()

2870 
p0
[] = {127u, 127u, 128u, 127u};

2872 
EXPECT_ABORT_BEGIN


2873 
	`TEST_ASSERT_EACH_EQUAL_UINT8
(127u, 
p0
, 4);

2874 
VERIFY_FAILS_END


2875 
	}
}

2877 
	$ã°NŸEquÆUINT8EachEquÆ2
()

2879 
p0
[] = {1, 1, 1, 127u};

2881 
EXPECT_ABORT_BEGIN


2882 
	`TEST_ASSERT_EACH_EQUAL_UINT8
(1, 
p0
, 4);

2883 
VERIFY_FAILS_END


2884 
	}
}

2886 
	$ã°NŸEquÆUINT8EachEquÆ3
()

2888 
p0
[] = {54u, 55u, 55u, 55u};

2890 
EXPECT_ABORT_BEGIN


2891 
	`TEST_ASSERT_EACH_EQUAL_UINT8
(55u, 
p0
, 4);

2892 
VERIFY_FAILS_END


2893 
	}
}

2895 
	$ã°EquÆUINT16EachEquÆ
()

2897 
p0
[] = {65132u, 65132u, 65132u, 65132u};

2898 
p1
[] = {987, 987, 987, 987};

2899 
p2
[] = {1, 1, 1, 2};

2900 
p3
[] = {1, 500, 600, 700};

2902 
	`TEST_ASSERT_EACH_EQUAL_UINT16
(65132u, 
p0
, 1);

2903 
	`TEST_ASSERT_EACH_EQUAL_UINT16
(65132u, 
p0
, 4);

2904 
	`TEST_ASSERT_EACH_EQUAL_UINT16
(987, 
p1
, 4);

2905 
	`TEST_ASSERT_EACH_EQUAL_UINT16
(1, 
p2
, 3);

2906 
	`TEST_ASSERT_EACH_EQUAL_UINT16
(1, 
p3
, 1);

2907 
	}
}

2909 
	$ã°NŸEquÆUINT16EachEquÆ1
()

2911 
p0
[] = {1, 65132u, 65132u, 65132u};

2913 
EXPECT_ABORT_BEGIN


2914 
	`TEST_ASSERT_EACH_EQUAL_UINT16
(65132u, 
p0
, 4);

2915 
VERIFY_FAILS_END


2916 
	}
}

2918 
	$ã°NŸEquÆUINT16EachEquÆ2
()

2920 
p0
[] = {65132u, 65132u, 987, 65132u};

2922 
EXPECT_ABORT_BEGIN


2923 
	`TEST_ASSERT_EACH_EQUAL_UINT16
(65132u, 
p0
, 4);

2924 
VERIFY_FAILS_END


2925 
	}
}

2927 
	$ã°NŸEquÆUINT16EachEquÆ3
()

2929 
p0
[] = {65132u, 65132u, 65132u, 65133u};

2931 
EXPECT_ABORT_BEGIN


2932 
	`TEST_ASSERT_EACH_EQUAL_UINT16
(65132u, 
p0
, 4);

2933 
VERIFY_FAILS_END


2934 
	}
}

2936 
	$ã°EquÆUINT32EachEquÆ
()

2938 
UNITY_UINT32
 
p0
[] = {65132u, 65132u, 65132u, 65132u};

2939 
UNITY_UINT32
 
p1
[] = {987, 987, 987, 987};

2940 
UNITY_UINT32
 
p2
[] = {8, 8, 8, 2};

2941 
UNITY_UINT32
 
p3
[] = {1, 500, 600, 700};

2943 
	`TEST_ASSERT_EACH_EQUAL_UINT32
(65132u, 
p0
, 1);

2944 
	`TEST_ASSERT_EACH_EQUAL_UINT32
(65132u, 
p0
, 4);

2945 
	`TEST_ASSERT_EACH_EQUAL_UINT32
(987, 
p1
, 4);

2946 
	`TEST_ASSERT_EACH_EQUAL_UINT32
(8, 
p2
, 3);

2947 
	`TEST_ASSERT_EACH_EQUAL_UINT32
(1, 
p3
, 1);

2948 
	}
}

2950 
	$ã°NŸEquÆUINT32EachEquÆ1
()

2952 
UNITY_UINT32
 
p0
[] = {65132u, 65132u, 987, 65132u};

2954 
EXPECT_ABORT_BEGIN


2955 
	`TEST_ASSERT_EACH_EQUAL_UINT32
(65132u, 
p0
, 4);

2956 
VERIFY_FAILS_END


2957 
	}
}

2959 
	$ã°NŸEquÆUINT32EachEquÆ2
()

2961 
UNITY_UINT32
 
p0
[] = {1, 987, 987, 987};

2963 
EXPECT_ABORT_BEGIN


2964 
	`TEST_ASSERT_EACH_EQUAL_UINT32
(987, 
p0
, 4);

2965 
VERIFY_FAILS_END


2966 
	}
}

2968 
	$ã°NŸEquÆUINT32EachEquÆ3
()

2970 
UNITY_UINT32
 
p0
[] = {1, 1, 1, 65132u};

2972 
EXPECT_ABORT_BEGIN


2973 
	`TEST_ASSERT_EACH_EQUAL_UINT32
(1, 
p0
, 4);

2974 
VERIFY_FAILS_END


2975 
	}
}

2977 
	$ã°EquÆHEXEachEquÆ
()

2979 
UNITY_UINT32
 
p0
[] = {65132u, 65132u, 65132u, 65132u};

2980 
UNITY_UINT32
 
p1
[] = {987, 987, 987, 987};

2981 
UNITY_UINT32
 
p2
[] = {8, 8, 8, 2};

2982 
UNITY_UINT32
 
p3
[] = {1, 500, 600, 700};

2984 
	`TEST_ASSERT_EACH_EQUAL_HEX
(65132u, 
p0
, 1);

2985 
	`TEST_ASSERT_EACH_EQUAL_HEX
(65132u, 
p0
, 4);

2986 
	`TEST_ASSERT_EACH_EQUAL_HEX
(987, 
p1
, 4);

2987 
	`TEST_ASSERT_EACH_EQUAL_HEX
(8, 
p2
, 3);

2988 
	`TEST_ASSERT_EACH_EQUAL_HEX
(1, 
p3
, 1);

2989 
	}
}

2991 
	$ã°NŸEquÆHEXEachEquÆ1
()

2993 
UNITY_UINT32
 
p0
[] = {1, 65132u, 65132u, 65132u};

2995 
EXPECT_ABORT_BEGIN


2996 
	`TEST_ASSERT_EACH_EQUAL_HEX32
(65132u, 
p0
, 4);

2997 
VERIFY_FAILS_END


2998 
	}
}

3000 
	$ã°NŸEquÆHEXEachEquÆ2
()

3002 
UNITY_UINT32
 
p0
[] = {987, 987, 987, 65132u};

3004 
EXPECT_ABORT_BEGIN


3005 
	`TEST_ASSERT_EACH_EQUAL_HEX32
(987, 
p0
, 4);

3006 
VERIFY_FAILS_END


3007 
	}
}

3009 
	$ã°NŸEquÆHEXEachEquÆ3
()

3011 
UNITY_UINT32
 
p0
[] = {8, 8, 987, 8};

3013 
EXPECT_ABORT_BEGIN


3014 
	`TEST_ASSERT_EACH_EQUAL_HEX
(8, 
p0
, 4);

3015 
VERIFY_FAILS_END


3016 
	}
}

3018 
	$ã°EquÆHEX32EachEquÆ
()

3020 
UNITY_UINT32
 
p0
[] = {65132u, 65132u, 65132u, 65132u};

3021 
UNITY_UINT32
 
p1
[] = {987, 987, 987, 987};

3022 
UNITY_UINT32
 
p2
[] = {8, 8, 8, 2};

3023 
UNITY_UINT32
 
p3
[] = {1, 500, 600, 700};

3025 
	`TEST_ASSERT_EACH_EQUAL_HEX32
(65132u, 
p0
, 1);

3026 
	`TEST_ASSERT_EACH_EQUAL_HEX32
(65132u, 
p0
, 4);

3027 
	`TEST_ASSERT_EACH_EQUAL_HEX32
(987, 
p1
, 4);

3028 
	`TEST_ASSERT_EACH_EQUAL_HEX32
(8, 
p2
, 3);

3029 
	`TEST_ASSERT_EACH_EQUAL_HEX32
(1, 
p3
, 1);

3030 
	}
}

3032 
	$ã°NŸEquÆHEX32EachEquÆ1
()

3034 
UNITY_UINT32
 
p0
[] = {65132u, 8, 65132u, 65132u};

3036 
EXPECT_ABORT_BEGIN


3037 
	`TEST_ASSERT_EACH_EQUAL_HEX32
(65132u, 
p0
, 4);

3038 
VERIFY_FAILS_END


3039 
	}
}

3041 
	$ã°NŸEquÆHEX32EachEquÆ2
()

3043 
UNITY_UINT32
 
p0
[] = {1, 987, 987, 987};

3045 
EXPECT_ABORT_BEGIN


3046 
	`TEST_ASSERT_EACH_EQUAL_HEX32
(987, 
p0
, 4);

3047 
VERIFY_FAILS_END


3048 
	}
}

3050 
	$ã°NŸEquÆHEX32EachEquÆ3
()

3052 
UNITY_UINT32
 
p0
[] = {8, 8, 8, 65132u};

3054 
EXPECT_ABORT_BEGIN


3055 
	`TEST_ASSERT_EACH_EQUAL_HEX32
(8, 
p0
, 4);

3056 
VERIFY_FAILS_END


3057 
	}
}

3059 
	$ã°EquÆHEX16EachEquÆ
()

3061 
UNITY_UINT16
 
p0
[] = {65132u, 65132u, 65132u, 65132u};

3062 
UNITY_UINT16
 
p1
[] = {987, 987, 987, 987};

3063 
UNITY_UINT16
 
p2
[] = {8, 8, 8, 2};

3064 
UNITY_UINT16
 
p3
[] = {1, 500, 600, 700};

3066 
	`TEST_ASSERT_EACH_EQUAL_HEX16
(65132u, 
p0
, 1);

3067 
	`TEST_ASSERT_EACH_EQUAL_HEX16
(65132u, 
p0
, 4);

3068 
	`TEST_ASSERT_EACH_EQUAL_HEX16
(987, 
p1
, 4);

3069 
	`TEST_ASSERT_EACH_EQUAL_HEX16
(8, 
p2
, 3);

3070 
	`TEST_ASSERT_EACH_EQUAL_HEX16
(1, 
p3
, 1);

3071 
	}
}

3073 
	$ã°NŸEquÆHEX16EachEquÆ1
()

3075 
p0
[] = {65132u, 65132u, 987, 65132u};

3077 
EXPECT_ABORT_BEGIN


3078 
	`TEST_ASSERT_EACH_EQUAL_HEX16
(65132u, 
p0
, 4);

3079 
VERIFY_FAILS_END


3080 
	}
}

3082 
	$ã°NŸEquÆHEX16EachEquÆ2
()

3084 
p0
[] = {1, 987, 987, 987};

3086 
EXPECT_ABORT_BEGIN


3087 
	`TEST_ASSERT_EACH_EQUAL_HEX16
(987, 
p0
, 4);

3088 
VERIFY_FAILS_END


3089 
	}
}

3091 
	$ã°NŸEquÆHEX16EachEquÆ3
()

3093 
p0
[] = {8, 8, 8, 65132u};

3095 
EXPECT_ABORT_BEGIN


3096 
	`TEST_ASSERT_EACH_EQUAL_HEX16
(8, 
p0
, 4);

3097 
VERIFY_FAILS_END


3098 
	}
}

3100 
	$ã°EquÆHEX8EachEquÆ
()

3102 
p0
[] = {254u, 254u, 254u, 254u};

3103 
p1
[] = {123, 123, 123, 123};

3104 
p2
[] = {8, 8, 8, 2};

3105 
p3
[] = {1, 23, 25, 26};

3107 
	`TEST_ASSERT_EACH_EQUAL_HEX8
(254u, 
p0
, 1);

3108 
	`TEST_ASSERT_EACH_EQUAL_HEX8
(254u, 
p0
, 4);

3109 
	`TEST_ASSERT_EACH_EQUAL_HEX8
(123, 
p1
, 4);

3110 
	`TEST_ASSERT_EACH_EQUAL_HEX8
(8, 
p2
, 3);

3111 
	`TEST_ASSERT_EACH_EQUAL_HEX8
(1, 
p3
, 1);

3112 
	}
}

3114 
	$ã°NŸEquÆHEX8EachEquÆ1
()

3116 
p0
[] = {253u, 253u, 254u, 253u};

3118 
EXPECT_ABORT_BEGIN


3119 
	`TEST_ASSERT_EACH_EQUAL_HEX8
(253u, 
p0
, 4);

3120 
VERIFY_FAILS_END


3121 
	}
}

3123 
	$ã°NŸEquÆHEX8EachEquÆ2
()

3125 
p0
[] = {254u, 254u, 254u, 253u};

3127 
EXPECT_ABORT_BEGIN


3128 
	`TEST_ASSERT_EACH_EQUAL_HEX8
(254u, 
p0
, 4);

3129 
VERIFY_FAILS_END


3130 
	}
}

3132 
	$ã°NŸEquÆHEX8EachEquÆ3
()

3134 
p0
[] = {1, 8, 8, 8};

3136 
EXPECT_ABORT_BEGIN


3137 
	`TEST_ASSERT_EACH_EQUAL_HEX8
(8, 
p0
, 4);

3138 
VERIFY_FAILS_END


3139 
	}
}

3141 
	$ã°EquÆMem‹yAºays
()

3143 
p0
[] = {1, 8, 987, -2};

3144 
p1
[] = {1, 8, 987, -2};

3145 
p2
[] = {1, 8, 987, 2};

3146 
p3
[] = {1, 500, 600, 700};

3148 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
,Ö0, (), 1);

3149 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
,Ö0, (), 4);

3150 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
, 
p1
, (), 4);

3151 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
, 
p2
, (), 3);

3152 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
, 
p3
, (), 1);

3153 
	}
}

3155 
	$ã°NŸEquÆMem‹yAºaysEx≥˘edNuŒ
()

3157 * 
p0
 = 
NULL
;

3158 
p1
[] = {1, 8, 987, 2};

3160 
EXPECT_ABORT_BEGIN


3161 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
, 
p1
, (), 4);

3162 
VERIFY_FAILS_END


3163 
	}
}

3165 
	$ã°NŸEquÆMem‹yAºaysA˘uÆNuŒ
()

3167 
p0
[] = {1, 8, 987, -2};

3168 * 
p1
 = 
NULL
;

3170 
EXPECT_ABORT_BEGIN


3171 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
, 
p1
, (), 4);

3172 
VERIFY_FAILS_END


3173 
	}
}

3175 
	$ã°NŸEquÆMem‹yAºays1
()

3177 
p0
[] = {1, 8, 987, -2};

3178 
p1
[] = {1, 8, 987, 2};

3180 
EXPECT_ABORT_BEGIN


3181 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
, 
p1
, (), 4);

3182 
VERIFY_FAILS_END


3183 
	}
}

3185 
	$ã°NŸEquÆMem‹yAºays2
()

3187 
p0
[] = {1, 8, 987, -2};

3188 
p1
[] = {2, 8, 987, -2};

3190 
EXPECT_ABORT_BEGIN


3191 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
, 
p1
, (), 4);

3192 
VERIFY_FAILS_END


3193 
	}
}

3195 
	$ã°NŸEquÆMem‹yAºays3
()

3197 
p0
[] = {1, 8, 987, -2};

3198 
p1
[] = {1, 8, 986, -2};

3200 
EXPECT_ABORT_BEGIN


3201 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
, 
p1
, (), 4);

3202 
VERIFY_FAILS_END


3203 
	}
}

3205 
	$ã°EquÆMem‹yEachEquÆ
()

3207 
p0
[] = {1, 8, 987, -2};

3208 
p1
[] = {1, 8, 987, -2, 1, 8, 987, -2};

3209 
p2
[] = {8, 8, 8, 2};

3210 
p3
[] = {8, 500, 600, 700};

3211 
v
 = 8;

3213 
	`TEST_ASSERT_EACH_EQUAL_MEMORY
(
p0
,Ö0, ()*4, 1);

3214 
	`TEST_ASSERT_EACH_EQUAL_MEMORY
(
p0
, 
p1
, ()*4, 2);

3215 
	`TEST_ASSERT_EACH_EQUAL_MEMORY
(
p0
, 
p1
, ()*4, 1);

3216 
	`TEST_ASSERT_EACH_EQUAL_MEMORY
(&
v
, 
p2
, (), 3);

3217 
	`TEST_ASSERT_EACH_EQUAL_MEMORY
(&
v
, 
p3
, (), 1);

3218 
	}
}

3220 
	$ã°NŸEquÆMem‹yEachEquÆEx≥˘edNuŒ
()

3222 * 
p0
 = 
NULL
;

3223 
p1
[] = {1, 8, 987, 2};

3225 
EXPECT_ABORT_BEGIN


3226 
	`TEST_ASSERT_EACH_EQUAL_MEMORY
(
p0
, 
p1
, (), 4);

3227 
VERIFY_FAILS_END


3228 
	}
}

3230 
	$ã°NŸEquÆMem‹yEachEquÆA˘uÆNuŒ
()

3232 
p0
[] = {1, 8, 987, -2};

3233 * 
p1
 = 
NULL
;

3235 
EXPECT_ABORT_BEGIN


3236 
	`TEST_ASSERT_EACH_EQUAL_MEMORY
(
p0
, 
p1
, (), 4);

3237 
VERIFY_FAILS_END


3238 
	}
}

3240 
	$ã°NŸEquÆMem‹yEachEquÆ1
()

3242 
p0
[] = {1, 8, 987, -2};

3243 
p1
[] = {9, 8, 987, -2, 1, 8, 987, -2, 1, 8, 987, -2};

3245 
EXPECT_ABORT_BEGIN


3246 
	`TEST_ASSERT_EACH_EQUAL_MEMORY
(
p0
, 
p1
, ()*4, 3);

3247 
VERIFY_FAILS_END


3248 
	}
}

3250 
	$ã°NŸEquÆMem‹yEachEquÆ2
()

3252 
p0
[] = {1, 8, 987, -2};

3253 
p1
[] = {1, 8, 987, -2, 1, 8, 987, -2, 1, 8, 987, 9};

3255 
EXPECT_ABORT_BEGIN


3256 
	`TEST_ASSERT_EACH_EQUAL_MEMORY
(
p0
, 
p1
, ()*4, 3);

3257 
VERIFY_FAILS_END


3258 
	}
}

3260 
	$ã°NŸEquÆMem‹yEachEquÆ3
()

3262 
p0
[] = {1, 8, 987, -2};

3263 
p1
[] = {1, 8, 987, -2, 1, 9, 987, -2, 1, 8, 987, -2};

3265 
EXPECT_ABORT_BEGIN


3266 
	`TEST_ASSERT_EACH_EQUAL_MEMORY
(
p0
, 
p1
, ()*4, 3);

3267 
VERIFY_FAILS_END


3268 
	}
}

3270 
	$ã°PrŸe˘i⁄
()

3272 vﬁ©ûê
mask
 = 0;

3274 i‡(
	`TEST_PROTECT
())

3276 
mask
 |= 1;

3277 
	`TEST_ABORT
();

3281 
Unôy
.
CuºítTe°Faûed
 = 0;

3282 
mask
 |= 2;

3285 
	`TEST_ASSERT_EQUAL
(3, 
mask
);

3286 
	}
}

3288 
	$ã°Ign‹edAndThíFaûInTórDown
()

3290 
SëToO√ToFaûInTórDown
 = 1;

3291 
	`TEST_IGNORE
();

3292 
	}
}

3295 
	#USING_SPY_AS
(
a
Ë
	`EXPAND_AND_USE_2ND
(
	`ASSIGN_VALUE
◊), 0)

	)

3296 
	#ASSIGN_VALUE
(
a
Ë
VAL_
##
	)
a

3297 
	#VAL_putch¨Spy
 0, 1

	)

3298 
	#EXPAND_AND_USE_2ND
(
a
, 
b
Ë
	`SECOND_PARAM
◊, b, 
throwaway
)

	)

3299 
	#SECOND_PARAM
(
a
, 
b
, ...Ë
	)
b

3300 #i‡
USING_SPY_AS
(
UNITY_OUTPUT_CHAR
)

3301 
	#USING_OUTPUT_SPY


3303 

	)

3304 #ifde‡
USING_OUTPUT_SPY


3305 
	~<°dio.h
>

3306 
	#SPY_BUFFER_MAX
 40

	)

3307 
	gputch¨SpyBuf„r
[
SPY_BUFFER_MAX
];

3309 
	gödexSpyBuf„r
;

3310 
	gputch¨SpyE«bÀd
;

3312 
	$°¨tPutch¨Spy
(Ë{
ödexSpyBuf„r
 = 0; 
putch¨SpyE«bÀd
 = 1;
	}
}

3314 
	$ídPutch¨Spy
(Ë{
putch¨SpyE«bÀd
 = 0;
	}
}

3316 * 
	$gëBuf„rPutch¨Spy
()

3318 #ifde‡
USING_OUTPUT_SPY


3319 
putch¨SpyBuf„r
[
ödexSpyBuf„r
] = '\0';

3320  
putch¨SpyBuf„r
;

3322  
NULL
;

3324 
	}
}

3326 
	$putch¨Spy
(
c
)

3328 #ifde‡
USING_OUTPUT_SPY


3329 i‡(
putch¨SpyE«bÀd
)

3331 i‡(
ödexSpyBuf„r
 < 
SPY_BUFFER_MAX
 - 1)

3332 
putch¨SpyBuf„r
[
ödexSpyBuf„r
++] = ()
c
;

3334 
	`putch¨
(()
c
);

3336 
	}
}

3338 
	$ã°FaûuªCou¡In¸emítsAndIsRëu∫edAtEnd
()

3340 
UNITY_UINT
 
ßvedFaûuªs
 = 
Unôy
.
Te°Faûuªs
;

3341 
Unôy
.
CuºítTe°Faûed
 = 1;

3342 
	`°¨tPutch¨Spy
();

3343 
	`UnôyC⁄˛udeTe°
();

3344 
	`ídPutch¨Spy
();

3345 
	`TEST_ASSERT_EQUAL
(
ßvedFaûuªs
 + 1, 
Unôy
.
Te°Faûuªs
);

3347 
	`°¨tPutch¨Spy
();

3348 
Áûuªs
 = 
	`UnôyEnd
();

3349 
Unôy
.
Te°Faûuªs
--;

3350 
	`ídPutch¨Spy
();

3351 
	`TEST_ASSERT_EQUAL
(
ßvedFaûuªs
 + 1, 
Áûuªs
);

3352 
	}
}

3354 
	$ã°C°rögsEsˇ≥Sequí˚
()

3356 #i‚de‡
USING_OUTPUT_SPY


3357 
	`TEST_IGNORE
();

3359 
	`°¨tPutch¨Spy
();

3360 
	`UnôyPröt
("\x16\x10");

3361 
	`ídPutch¨Spy
();

3362 
	`TEST_ASSERT_EQUAL_STRING
("\\x16\\x10", 
	`gëBuf„rPutch¨Spy
());

3364 
	}
}

3366 
	$ã°HexPrötsUpToMaxNumbîOfNibbÀs
()

3368 #i‚de‡
USING_OUTPUT_SPY


3369 
	`TEST_IGNORE
();

3371 
	`°¨tPutch¨Spy
();

3372 
	`UnôyPrötNumbîHex
(0xBEE, 21);

3373 
	`ídPutch¨Spy
();

3374 
	`TEST_ASSERT_EQUAL_INT
((
UNITY_INT
)*2, 
	`°æí
(
	`gëBuf„rPutch¨Spy
()));

3376 
	}
}

3378 
	#TEST_ASSERT_EQUAL_PRINT_NUMBERS
(
ex≥˘ed
, 
a˘uÆ
) { \

3379 
	`°¨tPutch¨Spy
(); 
	`UnôyPrötNumbî
((
a˘uÆ
)); 
	`ídPutch¨Spy
(); \

3380 
	`TEST_ASSERT_EQUAL_STRING
((
ex≥˘ed
), 
	`gëBuf„rPutch¨Spy
()); \

3381 }

	)

3383 
	#TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS
(
ex≥˘ed
, 
a˘uÆ
) { \

3384 
	`°¨tPutch¨Spy
(); 
	`UnôyPrötNumbîUnsig√d
((
a˘uÆ
)); 
	`ídPutch¨Spy
(); \

3385 
	`TEST_ASSERT_EQUAL_STRING
((
ex≥˘ed
), 
	`gëBuf„rPutch¨Spy
()); \

3386 }

	)

3388 
	$ã°PrötNumbîs32
()

3390 #i‚de‡
USING_OUTPUT_SPY


3391 
	`TEST_IGNORE_MESSAGE
("Compile with '-D UNITY_OUTPUT_CHAR=putcharSpy'ÅoÉnableÖrintÅesting");

3393 
	`TEST_ASSERT_EQUAL_PRINT_NUMBERS
("0", 0);

3394 
	`TEST_ASSERT_EQUAL_PRINT_NUMBERS
("1", 1);

3395 
	`TEST_ASSERT_EQUAL_PRINT_NUMBERS
("-1", -1);

3396 
	`TEST_ASSERT_EQUAL_PRINT_NUMBERS
("2000000000", 2000000000);

3397 
	`TEST_ASSERT_EQUAL_PRINT_NUMBERS
("-2147483648", (
UNITY_INT32
)0x80000000);

3398 
	`TEST_ASSERT_EQUAL_PRINT_NUMBERS
("-1", (
UNITY_INT32
)0xFFFFFFFF);

3400 
	}
}

3402 
	$ã°PrötNumbîsUnsig√d32
()

3404 #i‚de‡
USING_OUTPUT_SPY


3405 
	`TEST_IGNORE
();

3407 
	`TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS
("0", 0);

3408 
	`TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS
("1", 1);

3409 
	`TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS
("1500000000", 1500000000);

3410 
	`TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS
("2147483648", (
UNITY_UINT32
)0x80000000);

3411 
	`TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS
("4294967295", (
UNITY_UINT32
)0xFFFFFFFF);

3413 
	}
}

3417 
	$ã°PrötNumbîsI¡64
()

3419 #i‚de‡
UNITY_SUPPORT_64


3420 
	`TEST_IGNORE
();

3422 #i‚de‡
USING_OUTPUT_SPY


3423 
	`TEST_IGNORE
();

3425 
	`TEST_ASSERT_EQUAL_PRINT_NUMBERS
("0", 0);

3426 
	`TEST_ASSERT_EQUAL_PRINT_NUMBERS
("10000000000", 10000000000);

3427 
	`TEST_ASSERT_EQUAL_PRINT_NUMBERS
("-9223372036854775808", (
UNITY_INT
)0x8000000000000000);

3428 
	`TEST_ASSERT_EQUAL_PRINT_NUMBERS
("-1", (
UNITY_INT
)0xFFFFFFFFFFFFFFFF);

3431 
	}
}

3433 
	$ã°PrötNumbîsUI¡64
()

3435 #i‚de‡
UNITY_SUPPORT_64


3436 
	`TEST_IGNORE
();

3438 #i‚de‡
USING_OUTPUT_SPY


3439 
	`TEST_IGNORE
();

3441 
	`TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS
("0", 0);

3442 
	`TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS
("70000000000", 70000000000);

3443 
	`TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS
("9223372036854775808", (
UNITY_UINT
)0x8000000000000000);

3444 
	`TEST_ASSERT_EQUAL_PRINT_UNSIGNED_NUMBERS
("18446744073709551615", (
UNITY_UINT
)0xFFFFFFFFFFFFFFFF);

3447 
	}
}

3449 
	$ã°EquÆHex64s
()

3451 #i‚de‡
UNITY_SUPPORT_64


3452 
	`TEST_IGNORE
();

3454 
UNITY_UINT64
 
v0
, 
v1
;

3455 
UNITY_UINT64
 *
p0
, *
p1
;

3457 
v0
 = 0x9876543201234567;

3458 
v1
 = 0x9876543201234567;

3459 
p0
 = &
v0
;

3460 
p1
 = &
v1
;

3462 
	`TEST_ASSERT_EQUAL_HEX64
(0x9876543201234567, 0x9876543201234567);

3463 
	`TEST_ASSERT_EQUAL_HEX64
(
v0
, 
v1
);

3464 
	`TEST_ASSERT_EQUAL_HEX64
(0x9876543201234567, 
v1
);

3465 
	`TEST_ASSERT_EQUAL_HEX64
(
v0
, 0x9876543201234567);

3466 
	`TEST_ASSERT_EQUAL_HEX64
(*
p0
, 
v1
);

3467 
	`TEST_ASSERT_EQUAL_HEX64
(*
p0
, *
p1
);

3468 
	`TEST_ASSERT_EQUAL_HEX64
(*
p0
, 0x9876543201234567);

3470 
	}
}

3472 
	$ã°EquÆUöt64s
()

3474 #i‚de‡
UNITY_SUPPORT_64


3475 
	`TEST_IGNORE
();

3477 
UNITY_UINT64
 
v0
, 
v1
;

3478 
UNITY_UINT64
 *
p0
, *
p1
;

3480 
v0
 = 0x9876543201234567;

3481 
v1
 = 0x9876543201234567;

3482 
p0
 = &
v0
;

3483 
p1
 = &
v1
;

3485 
	`TEST_ASSERT_EQUAL_UINT64
(0x9876543201234567, 0x9876543201234567);

3486 
	`TEST_ASSERT_EQUAL_UINT64
(
v0
, 
v1
);

3487 
	`TEST_ASSERT_EQUAL_UINT64
(0x9876543201234567, 
v1
);

3488 
	`TEST_ASSERT_EQUAL_UINT64
(
v0
, 0x9876543201234567);

3489 
	`TEST_ASSERT_EQUAL_UINT64
(*
p0
, 
v1
);

3490 
	`TEST_ASSERT_EQUAL_UINT64
(*
p0
, *
p1
);

3491 
	`TEST_ASSERT_EQUAL_UINT64
(*
p0
, 0x9876543201234567);

3493 
	}
}

3495 
	$ã°EquÆI¡64s
()

3497 #i‚de‡
UNITY_SUPPORT_64


3498 
	`TEST_IGNORE
();

3500 
UNITY_INT64
 
v0
, 
v1
;

3501 
UNITY_INT64
 *
p0
, *
p1
;

3503 
v0
 = (
UNITY_INT64
)0x9876543201234567;

3504 
v1
 = (
UNITY_INT64
)0x9876543201234567;

3505 
p0
 = &
v0
;

3506 
p1
 = &
v1
;

3508 
	`TEST_ASSERT_EQUAL_INT64
(0x9876543201234567, 0x9876543201234567);

3509 
	`TEST_ASSERT_EQUAL_INT64
(
v0
, 
v1
);

3510 
	`TEST_ASSERT_EQUAL_INT64
(0x9876543201234567, 
v1
);

3511 
	`TEST_ASSERT_EQUAL_INT64
(
v0
, 0x9876543201234567);

3512 
	`TEST_ASSERT_EQUAL_INT64
(*
p0
, 
v1
);

3513 
	`TEST_ASSERT_EQUAL_INT64
(*
p0
, *
p1
);

3514 
	`TEST_ASSERT_EQUAL_INT64
(*
p0
, 0x9876543201234567);

3516 
	}
}

3519 
	$ã°NŸEquÆHex64s
()

3521 #i‚de‡
UNITY_SUPPORT_64


3522 
	`TEST_IGNORE
();

3524 
UNITY_UINT64
 
v0
, 
v1
;

3526 
v0
 = 9000000000;

3527 
v1
 = 9100000000;

3529 
EXPECT_ABORT_BEGIN


3530 
	`TEST_ASSERT_EQUAL_HEX64
(
v0
, 
v1
);

3531 
VERIFY_FAILS_END


3533 
	}
}

3535 
	$ã°NŸEquÆUöt64s
()

3537 #i‚de‡
UNITY_SUPPORT_64


3538 
	`TEST_IGNORE
();

3540 
UNITY_UINT64
 
v0
, 
v1
;

3542 
v0
 = 9000000000;

3543 
v1
 = 9100000000;

3545 
EXPECT_ABORT_BEGIN


3546 
	`TEST_ASSERT_EQUAL_UINT64
(
v0
, 
v1
);

3547 
VERIFY_FAILS_END


3549 
	}
}

3551 
	$ã°NŸEquÆI¡64s
()

3553 #i‚de‡
UNITY_SUPPORT_64


3554 
	`TEST_IGNORE
();

3556 
UNITY_INT64
 
v0
, 
v1
;

3558 
v0
 = -9000000000;

3559 
v1
 = 9100000000;

3561 
EXPECT_ABORT_BEGIN


3562 
	`TEST_ASSERT_EQUAL_INT64
(
v0
, 
v1
);

3563 
VERIFY_FAILS_END


3565 
	}
}

3567 
	$ã°NŸEquÆHex64sIfSig√d
()

3569 #i‚de‡
UNITY_SUPPORT_64


3570 
	`TEST_IGNORE
();

3572 
UNITY_INT64
 
v0
, 
v1
;

3574 
v0
 = -9000000000;

3575 
v1
 = 9000000000;

3577 
EXPECT_ABORT_BEGIN


3578 
	`TEST_ASSERT_EQUAL_HEX64
(
v0
, 
v1
);

3579 
VERIFY_FAILS_END


3581 
	}
}

3583 
	$ã°HEX64sWôhöDñè
()

3585 #i‚de‡
UNITY_SUPPORT_64


3586 
	`TEST_IGNORE
();

3588 
	`TEST_ASSERT_HEX64_WITHIN
(1, 0x7FFFFFFFFFFFFFFF,0x7FFFFFFFFFFFFFFE);

3589 
	`TEST_ASSERT_HEX64_WITHIN
(5, 5000, 4996);

3590 
	`TEST_ASSERT_HEX64_WITHIN
(5, 5000, 5005);

3592 
	}
}

3594 
	$ã°HEX64sNŸWôhöDñè
()

3596 #i‚de‡
UNITY_SUPPORT_64


3597 
	`TEST_IGNORE
();

3599 
EXPECT_ABORT_BEGIN


3600 
	`TEST_ASSERT_HEX64_WITHIN
(1, 0x7FFFFFFFFFFFFFFF, 0x7FFFFFFFFFFFFFFC);

3601 
VERIFY_FAILS_END


3603 
	}
}

3605 
	$ã°HEX64sNŸWôhöDñèEvíThoughASig√dI¡WouldPass
()

3607 #i‚de‡
UNITY_SUPPORT_64


3608 
	`TEST_IGNORE
();

3610 
EXPECT_ABORT_BEGIN


3611 
	`TEST_ASSERT_HEX64_WITHIN
(5, 1, -1);

3612 
VERIFY_FAILS_END


3614 
	}
}

3616 
	$ã°UINT64sWôhöDñè
()

3618 #i‚de‡
UNITY_SUPPORT_64


3619 
	`TEST_IGNORE
();

3621 
	`TEST_ASSERT_UINT64_WITHIN
(1, 0x7FFFFFFFFFFFFFFF,0x7FFFFFFFFFFFFFFE);

3622 
	`TEST_ASSERT_UINT64_WITHIN
(5, 5000, 4996);

3623 
	`TEST_ASSERT_UINT64_WITHIN
(5, 5000, 5005);

3625 
	}
}

3627 
	$ã°UINT64sNŸWôhöDñè
()

3629 #i‚de‡
UNITY_SUPPORT_64


3630 
	`TEST_IGNORE
();

3632 
EXPECT_ABORT_BEGIN


3633 
	`TEST_ASSERT_UINT64_WITHIN
(1, 0x7FFFFFFFFFFFFFFF, 0x7FFFFFFFFFFFFFFC);

3634 
VERIFY_FAILS_END


3636 
	}
}

3638 
	$ã°UINT64sNŸWôhöDñèEvíThoughASig√dI¡WouldPass
()

3640 #i‚de‡
UNITY_SUPPORT_64


3641 
	`TEST_IGNORE
();

3643 
EXPECT_ABORT_BEGIN


3644 
	`TEST_ASSERT_UINT64_WITHIN
(5, 1, -1);

3645 
VERIFY_FAILS_END


3647 
	}
}

3649 
	$ã°INT64sWôhöDñè
()

3651 #i‚de‡
UNITY_SUPPORT_64


3652 
	`TEST_IGNORE
();

3654 
	`TEST_ASSERT_INT64_WITHIN
(1, 0x7FFFFFFFFFFFFFFF,0x7FFFFFFFFFFFFFFE);

3655 
	`TEST_ASSERT_INT64_WITHIN
(5, 5000, 4996);

3656 
	`TEST_ASSERT_INT64_WITHIN
(5, 5000, 5005);

3658 
	}
}

3660 
	$ã°INT64sNŸWôhöDñè
()

3662 #i‚de‡
UNITY_SUPPORT_64


3663 
	`TEST_IGNORE
();

3665 
EXPECT_ABORT_BEGIN


3666 
	`TEST_ASSERT_INT64_WITHIN
(1, 0x7FFFFFFFFFFFFFFF, 0x7FFFFFFFFFFFFFFC);

3667 
VERIFY_FAILS_END


3669 
	}
}

3671 
	$ã°INT64sNŸWôhöDñèAndDif„ªn˚OvîÊows
()

3673 #i‚de‡
UNITY_SUPPORT_64


3674 
	`TEST_IGNORE
();

3676 
EXPECT_ABORT_BEGIN


3677 
	`TEST_ASSERT_INT64_WITHIN
(1, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF);

3678 
VERIFY_FAILS_END


3680 
	}
}

3682 
	$ã°EquÆHEX64Aºays
()

3684 #i‚de‡
UNITY_SUPPORT_64


3685 
	`TEST_IGNORE
();

3687 
UNITY_UINT64
 
p0
[] = {1, 8, 987, 65132u};

3688 
UNITY_UINT64
 
p1
[] = {1, 8, 987, 65132u};

3689 
UNITY_UINT64
 
p2
[] = {1, 8, 987, 2};

3690 
UNITY_UINT64
 
p3
[] = {1, 500, 600, 700};

3692 
	`TEST_ASSERT_EQUAL_HEX64_ARRAY
(
p0
,Ö0, 1);

3693 
	`TEST_ASSERT_EQUAL_HEX64_ARRAY
(
p0
,Ö0, 4);

3694 
	`TEST_ASSERT_EQUAL_HEX64_ARRAY
(
p0
, 
p1
, 4);

3695 
	`TEST_ASSERT_EQUAL_HEX64_ARRAY
(
p0
, 
p2
, 3);

3696 
	`TEST_ASSERT_EQUAL_HEX64_ARRAY
(
p0
, 
p3
, 1);

3698 
	}
}

3700 
	$ã°EquÆUöt64Aºays
()

3702 #i‚de‡
UNITY_SUPPORT_64


3703 
	`TEST_IGNORE
();

3705 
UNITY_UINT64
 
p0
[] = {1, 8, 987, 65132u};

3706 
UNITY_UINT64
 
p1
[] = {1, 8, 987, 65132u};

3707 
UNITY_UINT64
 
p2
[] = {1, 8, 987, 2};

3708 
UNITY_UINT64
 
p3
[] = {1, 500, 600, 700};

3710 
	`TEST_ASSERT_EQUAL_UINT64_ARRAY
(
p0
,Ö0, 1);

3711 
	`TEST_ASSERT_EQUAL_UINT64_ARRAY
(
p0
,Ö0, 4);

3712 
	`TEST_ASSERT_EQUAL_UINT64_ARRAY
(
p0
, 
p1
, 4);

3713 
	`TEST_ASSERT_EQUAL_UINT64_ARRAY
(
p0
, 
p2
, 3);

3714 
	`TEST_ASSERT_EQUAL_UINT64_ARRAY
(
p0
, 
p3
, 1);

3716 
	}
}

3718 
	$ã°EquÆI¡64Aºays
()

3720 #i‚de‡
UNITY_SUPPORT_64


3721 
	`TEST_IGNORE
();

3723 
UNITY_INT64
 
p0
[] = {1, 8, 987, -65132};

3724 
UNITY_INT64
 
p1
[] = {1, 8, 987, -65132};

3725 
UNITY_INT64
 
p2
[] = {1, 8, 987, -2};

3726 
UNITY_INT64
 
p3
[] = {1, 500, 600, 700};

3728 
	`TEST_ASSERT_EQUAL_INT64_ARRAY
(
p0
,Ö0, 1);

3729 
	`TEST_ASSERT_EQUAL_INT64_ARRAY
(
p0
,Ö0, 4);

3730 
	`TEST_ASSERT_EQUAL_INT64_ARRAY
(
p0
, 
p1
, 4);

3731 
	`TEST_ASSERT_EQUAL_INT64_ARRAY
(
p0
, 
p2
, 3);

3732 
	`TEST_ASSERT_EQUAL_INT64_ARRAY
(
p0
, 
p3
, 1);

3734 
	}
}

3737 
	$ã°NŸEquÆHEX64Aºays1
()

3739 #i‚de‡
UNITY_SUPPORT_64


3740 
	`TEST_IGNORE
();

3742 
UNITY_UINT64
 
p0
[] = {1, 8, 987, 65132u};

3743 
UNITY_UINT64
 
p1
[] = {1, 8, 987, 65131u};

3745 
EXPECT_ABORT_BEGIN


3746 
	`TEST_ASSERT_EQUAL_HEX64_ARRAY
(
p0
, 
p1
, 4);

3747 
VERIFY_FAILS_END


3749 
	}
}

3751 
	$ã°NŸEquÆHEX64Aºays2
()

3753 #i‚de‡
UNITY_SUPPORT_64


3754 
	`TEST_IGNORE
();

3756 
UNITY_UINT64
 
p0
[] = {1, 8, 987, 65132u};

3757 
UNITY_UINT64
 
p1
[] = {2, 8, 987, 65132u};

3759 
EXPECT_ABORT_BEGIN


3760 
	`TEST_ASSERT_EQUAL_HEX64_ARRAY
(
p0
, 
p1
, 4);

3761 
VERIFY_FAILS_END


3763 
	}
}

3765 
	$ã°NŸEquÆUöt64Aºays
()

3767 #i‚de‡
UNITY_SUPPORT_64


3768 
	`TEST_IGNORE
();

3770 
UNITY_UINT64
 
p0
[] = {1, 8, 987, 65132u};

3771 
UNITY_UINT64
 
p1
[] = {1, 8, 987, 65131u};

3773 
EXPECT_ABORT_BEGIN


3774 
	`TEST_ASSERT_EQUAL_UINT64_ARRAY
(
p0
, 
p1
, 4);

3775 
VERIFY_FAILS_END


3777 
	}
}

3779 
	$ã°NŸEquÆI¡64Aºays
()

3781 #i‚de‡
UNITY_SUPPORT_64


3782 
	`TEST_IGNORE
();

3784 
UNITY_INT64
 
p0
[] = {1, 8, 987, -65132};

3785 
UNITY_INT64
 
p1
[] = {1, 8, 987, -65131};

3787 
EXPECT_ABORT_BEGIN


3788 
	`TEST_ASSERT_EQUAL_INT64_ARRAY
(
p0
, 
p1
, 4);

3789 
VERIFY_FAILS_END


3791 
	}
}

3794 
	$ã°FlﬂtsWôhöDñè
()

3796 #ifde‡
UNITY_EXCLUDE_FLOAT


3797 
	`TEST_IGNORE
();

3799 
	`TEST_ASSERT_FLOAT_WITHIN
(0.00003f, 187245.03485f, 187245.03488f);

3800 
	`TEST_ASSERT_FLOAT_WITHIN
(1.0f, 187245.0f, 187246.0f);

3801 
	`TEST_ASSERT_FLOAT_WITHIN
(0.05f, 9273.2549f, 9273.2049f);

3802 
	`TEST_ASSERT_FLOAT_WITHIN
(0.007f, -726.93724f, -726.94424f);

3804 
	}
}

3806 
	$ã°FlﬂtsNŸWôhöDñè
()

3808 #ifde‡
UNITY_EXCLUDE_FLOAT


3809 
	`TEST_IGNORE
();

3811 
EXPECT_ABORT_BEGIN


3812 
	`TEST_ASSERT_FLOAT_WITHIN
(0.05f, 9273.2649f, 9273.2049f);

3813 
VERIFY_FAILS_END


3815 
	}
}

3817 
	$ã°FlﬂtsEquÆ
()

3819 #ifde‡
UNITY_EXCLUDE_FLOAT


3820 
	`TEST_IGNORE
();

3822 
	`TEST_ASSERT_EQUAL_FLOAT
(187245.0f, 187246.0f);

3823 
	`TEST_ASSERT_EQUAL_FLOAT
(18724.5f, 18724.6f);

3824 
	`TEST_ASSERT_EQUAL_FLOAT
(9273.2549f, 9273.2599f);

3825 
	`TEST_ASSERT_EQUAL_FLOAT
(-726.93724f, -726.9374f);

3827 
	}
}

3829 
	$ã°FlﬂtsNŸEquÆ
()

3831 #ifde‡
UNITY_EXCLUDE_FLOAT


3832 
	`TEST_IGNORE
();

3834 
EXPECT_ABORT_BEGIN


3835 
	`TEST_ASSERT_EQUAL_FLOAT
(9273.9649f, 9273.0049f);

3836 
VERIFY_FAILS_END


3838 
	}
}

3840 
	$ã°FlﬂtsNŸEquÆNeg©ive1
()

3842 #ifde‡
UNITY_EXCLUDE_FLOAT


3843 
	`TEST_IGNORE
();

3845 
EXPECT_ABORT_BEGIN


3846 
	`TEST_ASSERT_EQUAL_FLOAT
(-9273.9649f, -9273.0049f);

3847 
VERIFY_FAILS_END


3849 
	}
}

3851 
	$ã°FlﬂtsNŸEquÆNeg©ive2
()

3853 #ifde‡
UNITY_EXCLUDE_FLOAT


3854 
	`TEST_IGNORE
();

3856 
EXPECT_ABORT_BEGIN


3857 
	`TEST_ASSERT_EQUAL_FLOAT
(-9273.0049f, -9273.9649f);

3858 
VERIFY_FAILS_END


3860 
	}
}

3862 
	$ã°FlﬂtsNŸEquÆA˘uÆNaN
()

3864 #ifde‡
UNITY_EXCLUDE_FLOAT


3865 
	`TEST_IGNORE
();

3867 
EXPECT_ABORT_BEGIN


3868 
	`TEST_ASSERT_EQUAL_FLOAT
(85.963f, 0.0‡/ 
f_zîo
);

3869 
VERIFY_FAILS_END


3871 
	}
}

3873 
	$ã°FlﬂtsNŸEquÆEx≥˘edNaN
()

3875 #ifde‡
UNITY_EXCLUDE_FLOAT


3876 
	`TEST_IGNORE
();

3878 
EXPECT_ABORT_BEGIN


3879 
	`TEST_ASSERT_EQUAL_FLOAT
(0.0‡/ 
f_zîo
, 85.963f);

3880 
VERIFY_FAILS_END


3882 
	}
}

3884 
	$ã°FlﬂtsEquÆBŸhNaN
()

3886 #ifde‡
UNITY_EXCLUDE_FLOAT


3887 
	`TEST_IGNORE
();

3889 
	`TEST_ASSERT_EQUAL_FLOAT
(0.0‡/ 
f_zîo
, 0.0f / f_zero);

3891 
	}
}

3893 
	$ã°FlﬂtsNŸEquÆInfNaN
()

3895 #ifde‡
UNITY_EXCLUDE_FLOAT


3896 
	`TEST_IGNORE
();

3898 
EXPECT_ABORT_BEGIN


3899 
	`TEST_ASSERT_EQUAL_FLOAT
(1.0‡/ 
f_zîo
, 0.0f / f_zero);

3900 
VERIFY_FAILS_END


3902 
	}
}

3904 
	$ã°FlﬂtsNŸEquÆNaNInf
()

3906 #ifde‡
UNITY_EXCLUDE_FLOAT


3907 
	`TEST_IGNORE
();

3909 
EXPECT_ABORT_BEGIN


3910 
	`TEST_ASSERT_EQUAL_FLOAT
(0.0‡/ 
f_zîo
, 1.0f / f_zero);

3911 
VERIFY_FAILS_END


3913 
	}
}

3915 
	$ã°FlﬂtsNŸEquÆA˘uÆInf
()

3917 #ifde‡
UNITY_EXCLUDE_FLOAT


3918 
	`TEST_IGNORE
();

3920 
EXPECT_ABORT_BEGIN


3921 
	`TEST_ASSERT_EQUAL_FLOAT
(321.642f, 1.0‡/ 
f_zîo
);

3922 
VERIFY_FAILS_END


3924 
	}
}

3926 
	$ã°FlﬂtsNŸEquÆEx≥˘edInf
()

3928 #ifde‡
UNITY_EXCLUDE_FLOAT


3929 
	`TEST_IGNORE
();

3931 
EXPECT_ABORT_BEGIN


3932 
	`TEST_ASSERT_EQUAL_FLOAT
(1.0‡/ 
f_zîo
, 321.642f);

3933 
VERIFY_FAILS_END


3935 
	}
}

3937 
	$ã°FlﬂtsEquÆBŸhInf
()

3939 #ifde‡
UNITY_EXCLUDE_FLOAT


3940 
	`TEST_IGNORE
();

3942 
	`TEST_ASSERT_EQUAL_FLOAT
(1.0‡/ 
f_zîo
, 1.0f / f_zero);

3944 
	}
}

3946 
	$ã°FlﬂtsNŸEquÆPlusMöusInf
()

3948 #ifde‡
UNITY_EXCLUDE_FLOAT


3949 
	`TEST_IGNORE
();

3951 
EXPECT_ABORT_BEGIN


3952 
	`TEST_ASSERT_EQUAL_FLOAT
(1.0‡/ 
f_zîo
, -1.0f / f_zero);

3953 
VERIFY_FAILS_END


3955 
	}
}

3957 
	$ã°FlﬂtIsPosInf1
()

3959 #ifde‡
UNITY_EXCLUDE_FLOAT


3960 
	`TEST_IGNORE
();

3962 
	`TEST_ASSERT_FLOAT_IS_INF
(2.0‡/ 
f_zîo
);

3964 
	}
}

3966 
	$ã°FlﬂtIsPosInf2
()

3968 #ifde‡
UNITY_EXCLUDE_FLOAT


3969 
	`TEST_IGNORE
();

3971 
EXPECT_ABORT_BEGIN


3972 
	`TEST_ASSERT_FLOAT_IS_NOT_INF
(2.0‡/ 
f_zîo
);

3973 
VERIFY_FAILS_END


3975 
	}
}

3977 
	$ã°FlﬂtIsNegInf1
()

3979 #ifde‡
UNITY_EXCLUDE_FLOAT


3980 
	`TEST_IGNORE
();

3982 
	`TEST_ASSERT_FLOAT_IS_NEG_INF
(-3.0‡/ 
f_zîo
);

3984 
	}
}

3986 
	$ã°FlﬂtIsNegInf2
()

3988 #ifde‡
UNITY_EXCLUDE_FLOAT


3989 
	`TEST_IGNORE
();

3991 
EXPECT_ABORT_BEGIN


3992 
	`TEST_ASSERT_FLOAT_IS_NOT_NEG_INF
(-3.0‡/ 
f_zîo
);

3993 
VERIFY_FAILS_END


3995 
	}
}

3997 
	$ã°FlﬂtIsNŸPosInf1
()

3999 #ifde‡
UNITY_EXCLUDE_FLOAT


4000 
	`TEST_IGNORE
();

4002 
EXPECT_ABORT_BEGIN


4003 
	`TEST_ASSERT_FLOAT_IS_INF
(2.0f);

4004 
VERIFY_FAILS_END


4006 
	}
}

4008 
	$ã°FlﬂtIsNŸPosInf2
()

4010 #ifde‡
UNITY_EXCLUDE_FLOAT


4011 
	`TEST_IGNORE
();

4013 
	`TEST_ASSERT_FLOAT_IS_NOT_INF
(2.0f);

4015 
	}
}

4017 
	$ã°FlﬂtIsNŸNegInf
()

4019 #ifde‡
UNITY_EXCLUDE_FLOAT


4020 
	`TEST_IGNORE
();

4022 
EXPECT_ABORT_BEGIN


4023 
	`TEST_ASSERT_FLOAT_IS_NEG_INF
(-999.876f);

4024 
VERIFY_FAILS_END


4026 
	}
}

4028 
	$ã°FlﬂtIsN™1
()

4030 #ifde‡
UNITY_EXCLUDE_FLOAT


4031 
	`TEST_IGNORE
();

4033 
	`TEST_ASSERT_FLOAT_IS_NAN
(0.0‡/ 
f_zîo
);

4035 
	}
}

4037 
	$ã°FlﬂtIsN™2
()

4039 #ifde‡
UNITY_EXCLUDE_FLOAT


4040 
	`TEST_IGNORE
();

4042 
EXPECT_ABORT_BEGIN


4043 
	`TEST_ASSERT_FLOAT_IS_NOT_NAN
(0.0‡/ 
f_zîo
);

4044 
VERIFY_FAILS_END


4046 
	}
}

4048 
	$ã°FlﬂtIsNŸN™1
()

4050 #ifde‡
UNITY_EXCLUDE_FLOAT


4051 
	`TEST_IGNORE
();

4053 
EXPECT_ABORT_BEGIN


4054 
	`TEST_ASSERT_FLOAT_IS_NAN
(234.9f);

4055 
VERIFY_FAILS_END


4057 
	}
}

4059 
	$ã°FlﬂtIsNŸN™2
()

4061 #ifde‡
UNITY_EXCLUDE_FLOAT


4062 
	`TEST_IGNORE
();

4064 
	`TEST_ASSERT_FLOAT_IS_NOT_NAN
(234.9f);

4066 
	}
}

4068 
	$ã°FlﬂtInfIsNŸN™
()

4070 #ifde‡
UNITY_EXCLUDE_FLOAT


4071 
	`TEST_IGNORE
();

4073 
EXPECT_ABORT_BEGIN


4074 
	`TEST_ASSERT_FLOAT_IS_NAN
(1.0‡/ 
f_zîo
);

4075 
VERIFY_FAILS_END


4077 
	}
}

4079 
	$ã°FlﬂtN™IsNŸInf
()

4081 #ifde‡
UNITY_EXCLUDE_FLOAT


4082 
	`TEST_IGNORE
();

4084 
EXPECT_ABORT_BEGIN


4085 
	`TEST_ASSERT_FLOAT_IS_INF
(0.0‡/ 
f_zîo
);

4086 
VERIFY_FAILS_END


4088 
	}
}

4090 
	$ã°FlﬂtIsDëîmö©e1
()

4092 #ifde‡
UNITY_EXCLUDE_FLOAT


4093 
	`TEST_IGNORE
();

4095 
	`TEST_ASSERT_FLOAT_IS_DETERMINATE
(0.0f);

4096 
	`TEST_ASSERT_FLOAT_IS_DETERMINATE
(123.3f);

4097 
	`TEST_ASSERT_FLOAT_IS_DETERMINATE
(-88.3f);

4099 
	}
}

4101 
	$ã°FlﬂtIsDëîmö©e2
()

4103 #ifde‡
UNITY_EXCLUDE_FLOAT


4104 
	`TEST_IGNORE
();

4106 
EXPECT_ABORT_BEGIN


4107 
	`TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE
(-88.3f);

4108 
VERIFY_FAILS_END


4110 
	}
}

4112 
	$ã°FlﬂtIsNŸDëîmö©e1
()

4114 #ifde‡
UNITY_EXCLUDE_FLOAT


4115 
	`TEST_IGNORE
();

4117 
	`TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE
(1.0‡/ 
f_zîo
);

4118 
	`TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE
(-1.0‡/ 
f_zîo
);

4119 
	`TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE
(0.0‡/ 
f_zîo
);

4121 
	}
}

4123 
	$ã°FlﬂtIsNŸDëîmö©e2
()

4125 #ifde‡
UNITY_EXCLUDE_FLOAT


4126 
	`TEST_IGNORE
();

4128 
EXPECT_ABORT_BEGIN


4129 
	`TEST_ASSERT_FLOAT_IS_DETERMINATE
(-1.0‡/ 
f_zîo
);

4130 
VERIFY_FAILS_END


4132 
	}
}

4134 
	$ã°FlﬂtTøôFaûsOnInvÆidTøô
()

4136 #ifde‡
UNITY_EXCLUDE_FLOAT


4137 
	`TEST_IGNORE
();

4139 
EXPECT_ABORT_BEGIN


4140 
	`UnôyAs£πFlﬂtS≥cül
(1.0f, 
NULL
, 
__LINE__
, 
UNITY_FLOAT_INVALID_TRAIT
);

4141 
VERIFY_FAILS_END


4143 
	}
}

4146 
	$ã°EquÆFlﬂtAºays
()

4148 #ifde‡
UNITY_EXCLUDE_FLOAT


4149 
	`TEST_IGNORE
();

4151 
p0
[] = {1.0f, -8.0f, 25.4f, -0.123f};

4152 
p1
[] = {1.0f, -8.0f, 25.4f, -0.123f};

4153 
p2
[] = {1.0f, -8.0f, 25.4f, -0.2f};

4154 
p3
[] = {1.0f, -23.0f, 25.0f, -0.26f};

4156 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
,Ö0, 1);

4157 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
,Ö0, 4);

4158 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

4159 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p2
, 3);

4160 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p3
, 1);

4161 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
NULL
, NULL, 1);

4163 
	}
}

4165 
	$ã°NŸEquÆFlﬂtAºaysEx≥˘edNuŒ
()

4167 #ifde‡
UNITY_EXCLUDE_FLOAT


4168 
	`TEST_IGNORE
();

4170 * 
p0
 = 
NULL
;

4171 
p1
[] = {1.0f, 8.0f, 25.4f, 0.252f};

4173 
EXPECT_ABORT_BEGIN


4174 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

4175 
VERIFY_FAILS_END


4177 
	}
}

4179 
	$ã°NŸEquÆFlﬂtAºaysA˘uÆNuŒ
()

4181 #ifde‡
UNITY_EXCLUDE_FLOAT


4182 
	`TEST_IGNORE
();

4184 
p0
[] = {1.0f, 8.0f, 25.4f, 0.253f};

4185 * 
p1
 = 
NULL
;

4187 
EXPECT_ABORT_BEGIN


4188 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

4189 
VERIFY_FAILS_END


4191 
	}
}

4193 
	$ã°NŸEquÆFlﬂtAºays1
()

4195 #ifde‡
UNITY_EXCLUDE_FLOAT


4196 
	`TEST_IGNORE
();

4198 
p0
[] = {1.0f, 8.0f, 25.4f, 0.253f};

4199 
p1
[] = {1.0f, 8.0f, 25.4f, 0.252f};

4201 
EXPECT_ABORT_BEGIN


4202 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

4203 
VERIFY_FAILS_END


4205 
	}
}

4207 
	$ã°NŸEquÆFlﬂtAºays2
()

4209 #ifde‡
UNITY_EXCLUDE_FLOAT


4210 
	`TEST_IGNORE
();

4212 
p0
[] = {1.0f, 8.0f, 25.4f, 0.253f};

4213 
p1
[] = {2.0f, 8.0f, 25.4f, 0.253f};

4215 
EXPECT_ABORT_BEGIN


4216 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

4217 
VERIFY_FAILS_END


4219 
	}
}

4221 
	$ã°NŸEquÆFlﬂtAºays3
()

4223 #ifde‡
UNITY_EXCLUDE_FLOAT


4224 
	`TEST_IGNORE
();

4226 
p0
[] = {1.0f, 8.0f, 25.4f, 0.253f};

4227 
p1
[] = {1.0f, 8.0f, 25.5f, 0.253f};

4229 
EXPECT_ABORT_BEGIN


4230 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

4231 
VERIFY_FAILS_END


4233 
	}
}

4235 
	$ã°NŸEquÆFlﬂtAºaysNeg©ive1
()

4237 #ifde‡
UNITY_EXCLUDE_FLOAT


4238 
	`TEST_IGNORE
();

4240 
p0
[] = {-1.0f, -8.0f, -25.4f, -0.253f};

4241 
p1
[] = {-1.0f, -8.0f, -25.4f, -0.252f};

4243 
EXPECT_ABORT_BEGIN


4244 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

4245 
VERIFY_FAILS_END


4247 
	}
}

4249 
	$ã°NŸEquÆFlﬂtAºaysNeg©ive2
()

4251 #ifde‡
UNITY_EXCLUDE_FLOAT


4252 
	`TEST_IGNORE
();

4254 
p0
[] = {-1.0f, -8.0f, -25.4f, -0.253f};

4255 
p1
[] = {-2.0f, -8.0f, -25.4f, -0.253f};

4257 
EXPECT_ABORT_BEGIN


4258 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

4259 
VERIFY_FAILS_END


4261 
	}
}

4263 
	$ã°NŸEquÆFlﬂtAºaysNeg©ive3
()

4265 #ifde‡
UNITY_EXCLUDE_FLOAT


4266 
	`TEST_IGNORE
();

4268 
p0
[] = {-1.0f, -8.0f, -25.4f, -0.253f};

4269 
p1
[] = {-1.0f, -8.0f, -25.5f, -0.253f};

4271 
EXPECT_ABORT_BEGIN


4272 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

4273 
VERIFY_FAILS_END


4275 
	}
}

4277 
	$ã°EquÆFlﬂtAºaysNaN
()

4279 #ifde‡
UNITY_EXCLUDE_FLOAT


4280 
	`TEST_IGNORE
();

4282 
p0
[] = {1.0f, 0.0‡/ 
f_zîo
, 25.4f, 0.253f};

4283 
p1
[] = {1.0f, 0.0‡/ 
f_zîo
, 25.4f, 0.253f};

4285 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

4287 
	}
}

4289 
	$ã°EquÆFlﬂtAºaysInf
()

4291 #ifde‡
UNITY_EXCLUDE_FLOAT


4292 
	`TEST_IGNORE
();

4294 
p0
[] = {1.0f, 1.0‡/ 
f_zîo
, 25.4f, 0.253f};

4295 
p1
[] = {1.0f, 1.0‡/ 
f_zîo
, 25.4f, 0.253f};

4297 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

4299 
	}
}

4301 
	$ã°NŸEquÆFlﬂtAºaysLígthZîo
()

4303 #ifde‡
UNITY_EXCLUDE_FLOAT


4304 
	`TEST_IGNORE
();

4306 
p0
[1] = {0.0f};

4307 
p1
[1] = {0.0f};

4309 
EXPECT_ABORT_BEGIN


4310 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 0);

4311 
VERIFY_FAILS_END


4313 
	}
}

4315 
	$ã°EquÆFlﬂtEachEquÆ
()

4317 #ifde‡
UNITY_EXCLUDE_FLOAT


4318 
	`TEST_IGNORE
();

4320 
p0
[] = {1.0f, 1.0f, 1.0f, 1.0f};

4321 
p1
[] = {-0.123f, -0.123f, -0.123f, -0.123f};

4322 
p2
[] = {25.4f, 25.4f, 25.4f, -0.2f};

4323 
p3
[] = {1.0f, -23.0f, 25.0f, -0.26f};

4325 
	`TEST_ASSERT_EACH_EQUAL_FLOAT
(1.0f, 
p0
, 1);

4326 
	`TEST_ASSERT_EACH_EQUAL_FLOAT
(1.0f, 
p0
, 4);

4327 
	`TEST_ASSERT_EACH_EQUAL_FLOAT
(-0.123f, 
p1
, 4);

4328 
	`TEST_ASSERT_EACH_EQUAL_FLOAT
(25.4f, 
p2
, 3);

4329 
	`TEST_ASSERT_EACH_EQUAL_FLOAT
(1.0f, 
p3
, 1);

4331 
	}
}

4333 
	$ã°NŸEquÆFlﬂtEachEquÆA˘uÆNuŒ
()

4335 #ifde‡
UNITY_EXCLUDE_FLOAT


4336 
	`TEST_IGNORE
();

4338 * 
p0
 = 
NULL
;

4340 
EXPECT_ABORT_BEGIN


4341 
	`TEST_ASSERT_EACH_EQUAL_FLOAT
(5, 
p0
, 4);

4342 
VERIFY_FAILS_END


4344 
	}
}

4346 
	$ã°NŸEquÆFlﬂtEachEquÆ1
()

4348 #ifde‡
UNITY_EXCLUDE_FLOAT


4349 
	`TEST_IGNORE
();

4351 
p0
[] = {0.253f, 8.0f, 0.253f, 0.253f};

4353 
EXPECT_ABORT_BEGIN


4354 
	`TEST_ASSERT_EACH_EQUAL_FLOAT
(0.253f, 
p0
, 4);

4355 
VERIFY_FAILS_END


4357 
	}
}

4359 
	$ã°NŸEquÆFlﬂtEachEquÆ2
()

4361 #ifde‡
UNITY_EXCLUDE_FLOAT


4362 
	`TEST_IGNORE
();

4364 
p0
[] = {8.0f, 8.0f, 8.0f, 0.253f};

4366 
EXPECT_ABORT_BEGIN


4367 
	`TEST_ASSERT_EACH_EQUAL_FLOAT
(8.0f, 
p0
, 4);

4368 
VERIFY_FAILS_END


4370 
	}
}

4372 
	$ã°NŸEquÆFlﬂtEachEquÆ3
()

4374 #ifde‡
UNITY_EXCLUDE_FLOAT


4375 
	`TEST_IGNORE
();

4377 
p0
[] = {1.0f, 1.0f, 1.0f, 0.253f};

4379 
EXPECT_ABORT_BEGIN


4380 
	`TEST_ASSERT_EACH_EQUAL_FLOAT
(1.0f, 
p0
, 4);

4381 
VERIFY_FAILS_END


4383 
	}
}

4385 
	$ã°NŸEquÆFlﬂtEachEquÆNeg©ive1
()

4387 #ifde‡
UNITY_EXCLUDE_FLOAT


4388 
	`TEST_IGNORE
();

4390 
p0
[] = {-1.0f, -0.253f, -0.253f, -0.253f};

4392 
EXPECT_ABORT_BEGIN


4393 
	`TEST_ASSERT_EACH_EQUAL_FLOAT
(-0.253f, 
p0
, 4);

4394 
VERIFY_FAILS_END


4396 
	}
}

4398 
	$ã°NŸEquÆFlﬂtEachEquÆNeg©ive2
()

4400 #ifde‡
UNITY_EXCLUDE_FLOAT


4401 
	`TEST_IGNORE
();

4403 
p0
[] = {-25.4f, -8.0f, -25.4f, -25.4f};

4405 
EXPECT_ABORT_BEGIN


4406 
	`TEST_ASSERT_EACH_EQUAL_FLOAT
(-25.4f, 
p0
, 4);

4407 
VERIFY_FAILS_END


4409 
	}
}

4411 
	$ã°NŸEquÆFlﬂtEachEquÆNeg©ive3
()

4413 #ifde‡
UNITY_EXCLUDE_FLOAT


4414 
	`TEST_IGNORE
();

4416 
p0
[] = {-8.0f, -8.0f, -8.0f, -0.253f};

4418 
EXPECT_ABORT_BEGIN


4419 
	`TEST_ASSERT_EACH_EQUAL_FLOAT
(-8.0f, 
p0
, 4);

4420 
VERIFY_FAILS_END


4422 
	}
}

4424 
	$ã°EquÆFlﬂtEachEquÆNaN
()

4426 #ifde‡
UNITY_EXCLUDE_FLOAT


4427 
	`TEST_IGNORE
();

4429 
p0
[] = {0.0‡/ 
f_zîo
, 0.0f / f_zero, 0.0f / f_zero, 0.0f / f_zero};

4431 
	`TEST_ASSERT_EACH_EQUAL_FLOAT
(0.0‡/ 
f_zîo
, 
p0
, 4);

4433 
	}
}

4435 
	$ã°EquÆFlﬂtEachEquÆInf
()

4437 #ifde‡
UNITY_EXCLUDE_FLOAT


4438 
	`TEST_IGNORE
();

4440 
p0
[] = {1.0‡/ 
f_zîo
, 1.0f / f_zero, 25.4f, 0.253f};

4442 
	`TEST_ASSERT_EACH_EQUAL_FLOAT
(1.0‡/ 
f_zîo
, 
p0
, 2);

4444 
	}
}

4446 
	$ã°NŸEquÆFlﬂtEachEquÆLígthZîo
()

4448 #ifde‡
UNITY_EXCLUDE_FLOAT


4449 
	`TEST_IGNORE
();

4451 
p0
[1] = {0.0f};

4453 
EXPECT_ABORT_BEGIN


4454 
	`TEST_ASSERT_EACH_EQUAL_FLOAT
(0.0f, 
p0
, 0);

4455 
VERIFY_FAILS_END


4457 
	}
}

4459 
	#TEST_ASSERT_EQUAL_PRINT_FLOATING
(
ex≥˘ed
, 
a˘uÆ
) { \

4460 
	`°¨tPutch¨Spy
(); 
	`UnôyPrötFlﬂt
((
a˘uÆ
)); 
	`ídPutch¨Spy
(); \

4461 
	`TEST_ASSERT_EQUAL_STRING
((
ex≥˘ed
), 
	`gëBuf„rPutch¨Spy
()); \

4462 }

	)

4464 
	$ã°FlﬂtPrötög
()

4466 #i‡
	`deföed
(
UNITY_EXCLUDE_FLOAT_PRINT
Ë|| !deföed(
USING_OUTPUT_SPY
)

4467 
	`TEST_IGNORE
();

4469 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("0", 0.0f);

4470 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("4.99e-07", 0.000000499f);

4471 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("5e-07", 0.00000050000005f);

4472 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("0.100469", 0.100469499f);

4473 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("1", 0.9999995f);

4474 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("1", 1.0f);

4475 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("1.25", 1.25f);

4476 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("7.99999", 7.99999f);

4477 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("16.0002", 16.0002f);

4478 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("16.0004", 16.0004f);

4479 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("16.0006", 16.0006f);

4480 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("999999", 999999.0f);

4482 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-0", -0.0f);

4483 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-4.99e-07", -0.000000499f);

4484 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-5e-07", -0.00000050000005f);

4485 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-0.100469", -0.100469499f);

4486 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-1", -0.9999995f);

4487 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-1", -1.0f);

4488 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-1.25", -1.25f);

4489 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-7.99999", -7.99999f);

4490 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-16.0002", -16.0002f);

4491 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-16.0004", -16.0004f);

4492 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-16.0006", -16.0006f);

4493 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-999999", -999999.0f);

4495 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("4.29497e+09", 4294967296.0f);

4496 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("5e+09", 5000000000.0f);

4497 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("8e+09", 8.0e+09f);

4498 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("8.31e+09", 8309999104.0f);

4499 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("1e+10", 1.0e+10f);

4500 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("1e+10", 10000000000.0f);

4502 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("1.00005e+10", ()1.000054e+10f);

4503 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("1.1e+38", ()1.10000005e+38f);

4504 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("1.6353e+10", 1.63529943e+10f);

4505 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("3.40282e+38", 3.40282346638e38f);

4507 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-1e+10", -1.0e+10f);

4508 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-3.40282e+38", -3.40282346638e38f);

4510 
	}
}

4512 
	$ã°FlﬂtPrötögInföôyAndNaN
()

4514 #i‡
	`deföed
(
UNITY_EXCLUDE_FLOAT_PRINT
Ë|| !deföed(
USING_OUTPUT_SPY
)

4515 
	`TEST_IGNORE
();

4517 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("öf", 1.0‡/ 
f_zîo
);

4518 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-öf", -1.0‡/ 
f_zîo
);

4520 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("«n", 0.0‡/ 
f_zîo
);

4522 
	}
}

4524 #i‡
deföed
(
UNITY_TEST_ALL_FLOATS_PRINT_OK
Ë&& deföed(
USING_OUTPUT_SPY
)

4525 
	$¥ötFlﬂtVÆue
(
f
)

4527 
ex≥˘ed
[18];

4528 
ex≥˘ed_lowî
[18];

4529 
ex≥˘ed_highî
[18];

4531 
	`°¨tPutch¨Spy
();

4533 
	`UnôyPrötFlﬂt
(
f
);

4535 
	`•rötf
(
ex≥˘ed
, "%.6g", 
f
);

4538 if(
	`°rcmp
(
ex≥˘ed
, "-«n"Ë=0Ë
	`°r˝y
(expected, "nan");

4541 
lowî
 = ()
f
 * 0.9999995;

4542 
highî
 = ()
f
 * 1.0000005;

4544 i‡(
	`isföôe
(
lowî
)Ë
	`•rötf
(
ex≥˘ed_lowî
, "%.6g",Üowî); 
	`°r˝y
”x≥˘ed_lowî, 
ex≥˘ed
);

4545 i‡(
	`isföôe
(
highî
)Ë
	`•rötf
(
ex≥˘ed_highî
, "%.6g", highî); 
	`°r˝y
”x≥˘ed_highî, 
ex≥˘ed
);

4547 i‡(
	`°rcmp
(
ex≥˘ed
, 
	`gëBuf„rPutch¨Spy
()) != 0 &&

4548 
	`°rcmp
(
ex≥˘ed_lowî
, 
	`gëBuf„rPutch¨Spy
()) != 0 &&

4549 
	`°rcmp
(
ex≥˘ed_highî
, 
	`gëBuf„rPutch¨Spy
()) != 0)

4552 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
(
ex≥˘ed
, 
f
);

4554 
	}
}

4557 
	$ã°FlﬂtPrötögR™domSam∂es
()

4559 #i‡!
	`deföed
(
UNITY_TEST_ALL_FLOATS_PRINT_OK
Ë|| !deföed(
USING_OUTPUT_SPY
)

4560 
	`TEST_IGNORE
();

4562 uni⁄ { 
f_vÆue
; 
uöt32_t
 
öt_vÆue
; } 
u
;

4565 
u
.
öt_vÆue
 = 0x00000000; 
	`¥ötFlﬂtVÆue
(u.
f_vÆue
);

4566 
u
.
öt_vÆue
 = 0x80000000; 
	`¥ötFlﬂtVÆue
(u.
f_vÆue
);

4567 
u
.
öt_vÆue
 = 0x7fffffff; 
	`¥ötFlﬂtVÆue
(u.
f_vÆue
);

4568 
u
.
öt_vÆue
 = 0xffffffff; 
	`¥ötFlﬂtVÆue
(u.
f_vÆue
);

4570 
uöt32_t
 
a
 = 1;

4571 
num_ã°ed
 = 0;Çum_tested < 1000000;Çum_tested++)

4574 
a
 = (
uöt32_t
)(((
uöt64_t
)a * 48271u) % 2147483647u);

4577 
u
.
öt_vÆue
 = 
a
; 
	`¥ötFlﬂtVÆue
(u.
f_vÆue
);

4578 
u
.
öt_vÆue
 = 
a
 | 0x80000000; 
	`¥ötFlﬂtVÆue
(u.
f_vÆue
);

4581 
	}
}

4585 
	$ã°DoubÀsWôhöDñè
()

4587 #ifde‡
UNITY_EXCLUDE_DOUBLE


4588 
	`TEST_IGNORE
();

4590 
	`TEST_ASSERT_DOUBLE_WITHIN
(0.00003, 187245.03485, 187245.03488);

4591 
	`TEST_ASSERT_DOUBLE_WITHIN
(1.0, 187245.0, 187246.0);

4592 
	`TEST_ASSERT_DOUBLE_WITHIN
(0.05, 9273.2549, 9273.2049);

4593 
	`TEST_ASSERT_DOUBLE_WITHIN
(0.007, -726.93725, -726.94424);

4595 
	}
}

4597 
	$ã°DoubÀsNŸWôhöDñè
()

4599 #ifde‡
UNITY_EXCLUDE_DOUBLE


4600 
	`TEST_IGNORE
();

4602 
EXPECT_ABORT_BEGIN


4603 
	`TEST_ASSERT_DOUBLE_WITHIN
(0.05, 9273.2649, 9273.2049);

4604 
VERIFY_FAILS_END


4606 
	}
}

4609 
	$ã°DoubÀsEquÆ
()

4611 #ifde‡
UNITY_EXCLUDE_DOUBLE


4612 
	`TEST_IGNORE
();

4614 
	`TEST_ASSERT_EQUAL_DOUBLE
(187245123456.0, 187245123456.0);

4615 
	`TEST_ASSERT_EQUAL_DOUBLE
(187241234567.5, 187241234567.6);

4616 
	`TEST_ASSERT_EQUAL_DOUBLE
(9273.2512345649, 9273.25123455699);

4617 
	`TEST_ASSERT_EQUAL_DOUBLE
(-726.12345693724, -726.1234569374);

4619 
	}
}

4621 
	$ã°DoubÀsNŸEquÆ
()

4623 #ifde‡
UNITY_EXCLUDE_DOUBLE


4624 
	`TEST_IGNORE
();

4626 
EXPECT_ABORT_BEGIN


4627 
	`TEST_ASSERT_EQUAL_DOUBLE
(9273.9649, 9273.0049);

4628 
VERIFY_FAILS_END


4630 
	}
}

4632 
	$ã°DoubÀsNŸEquÆNeg©ive1
()

4634 #ifde‡
UNITY_EXCLUDE_DOUBLE


4635 
	`TEST_IGNORE
();

4637 
EXPECT_ABORT_BEGIN


4638 
	`TEST_ASSERT_EQUAL_DOUBLE
(-9273.9649, -9273.0049);

4639 
VERIFY_FAILS_END


4641 
	}
}

4643 
	$ã°DoubÀsNŸEquÆNeg©ive2
()

4645 #ifde‡
UNITY_EXCLUDE_DOUBLE


4646 
	`TEST_IGNORE
();

4648 
EXPECT_ABORT_BEGIN


4649 
	`TEST_ASSERT_EQUAL_DOUBLE
(-9273.0049, -9273.9649);

4650 
VERIFY_FAILS_END


4652 
	}
}

4654 
	$ã°DoubÀsNŸEquÆA˘uÆNaN
()

4656 #ifde‡
UNITY_EXCLUDE_DOUBLE


4657 
	`TEST_IGNORE
();

4659 
EXPECT_ABORT_BEGIN


4660 
	`TEST_ASSERT_EQUAL_DOUBLE
(85.963, 0.0 / 
d_zîo
);

4661 
VERIFY_FAILS_END


4663 
	}
}

4665 
	$ã°DoubÀsNŸEquÆEx≥˘edNaN
()

4667 #ifde‡
UNITY_EXCLUDE_DOUBLE


4668 
	`TEST_IGNORE
();

4670 
EXPECT_ABORT_BEGIN


4671 
	`TEST_ASSERT_EQUAL_DOUBLE
(0.0 / 
d_zîo
, 85.963);

4672 
VERIFY_FAILS_END


4674 
	}
}

4676 
	$ã°DoubÀsEquÆBŸhNaN
()

4678 #ifde‡
UNITY_EXCLUDE_DOUBLE


4679 
	`TEST_IGNORE
();

4681 
	`TEST_ASSERT_EQUAL_DOUBLE
(0.0 / 
d_zîo
, 0.0 / d_zero);

4683 
	}
}

4685 
	$ã°DoubÀsNŸEquÆInfNaN
()

4687 #ifde‡
UNITY_EXCLUDE_DOUBLE


4688 
	`TEST_IGNORE
();

4690 
EXPECT_ABORT_BEGIN


4691 
	`TEST_ASSERT_EQUAL_DOUBLE
(1.0 / 
d_zîo
, 0.0 / d_zero);

4692 
VERIFY_FAILS_END


4694 
	}
}

4696 
	$ã°DoubÀsNŸEquÆNaNInf
()

4698 #ifde‡
UNITY_EXCLUDE_DOUBLE


4699 
	`TEST_IGNORE
();

4701 
EXPECT_ABORT_BEGIN


4702 
	`TEST_ASSERT_EQUAL_DOUBLE
(0.0 / 
d_zîo
, 1.0 / d_zero);

4703 
VERIFY_FAILS_END


4705 
	}
}

4707 
	$ã°DoubÀsNŸEquÆA˘uÆInf
()

4709 #ifde‡
UNITY_EXCLUDE_DOUBLE


4710 
	`TEST_IGNORE
();

4712 
EXPECT_ABORT_BEGIN


4713 
	`TEST_ASSERT_EQUAL_DOUBLE
(321.642, 1.0 / 
d_zîo
);

4714 
VERIFY_FAILS_END


4716 
	}
}

4718 
	$ã°DoubÀsNŸEquÆEx≥˘edInf
()

4720 #ifde‡
UNITY_EXCLUDE_DOUBLE


4721 
	`TEST_IGNORE
();

4723 
EXPECT_ABORT_BEGIN


4724 
	`TEST_ASSERT_EQUAL_DOUBLE
(1.0 / 
d_zîo
, 321.642);

4725 
VERIFY_FAILS_END


4727 
	}
}

4729 
	$ã°DoubÀsEquÆBŸhInf
()

4731 #ifde‡
UNITY_EXCLUDE_DOUBLE


4732 
	`TEST_IGNORE
();

4734 
	`TEST_ASSERT_EQUAL_DOUBLE
(1.0 / 
d_zîo
, 1.0 / d_zero);

4736 
	}
}

4738 
	$ã°DoubÀsNŸEquÆPlusMöusInf
()

4740 #ifde‡
UNITY_EXCLUDE_DOUBLE


4741 
	`TEST_IGNORE
();

4743 
EXPECT_ABORT_BEGIN


4744 
	`TEST_ASSERT_EQUAL_DOUBLE
(1.0 / 
d_zîo
, -1.0 / d_zero);

4745 
VERIFY_FAILS_END


4747 
	}
}

4749 
	$ã°DoubÀIsPosInf1
()

4751 #ifde‡
UNITY_EXCLUDE_DOUBLE


4752 
	`TEST_IGNORE
();

4754 
	`TEST_ASSERT_DOUBLE_IS_INF
(2.0 / 
d_zîo
);

4756 
	}
}

4758 
	$ã°DoubÀIsPosInf2
()

4760 #ifde‡
UNITY_EXCLUDE_DOUBLE


4761 
	`TEST_IGNORE
();

4763 
EXPECT_ABORT_BEGIN


4764 
	`TEST_ASSERT_DOUBLE_IS_NOT_INF
(2.0 / 
d_zîo
);

4765 
VERIFY_FAILS_END


4767 
	}
}

4769 
	$ã°DoubÀIsNegInf1
()

4771 #ifde‡
UNITY_EXCLUDE_DOUBLE


4772 
	`TEST_IGNORE
();

4774 
	`TEST_ASSERT_DOUBLE_IS_NEG_INF
(-3.0 / 
d_zîo
);

4776 
	}
}

4778 
	$ã°DoubÀIsNegInf2
()

4780 #ifde‡
UNITY_EXCLUDE_DOUBLE


4781 
	`TEST_IGNORE
();

4783 
EXPECT_ABORT_BEGIN


4784 
	`TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF
(-3.0 / 
d_zîo
);

4785 
VERIFY_FAILS_END


4787 
	}
}

4789 
	$ã°DoubÀIsNŸPosInf1
()

4791 #ifde‡
UNITY_EXCLUDE_DOUBLE


4792 
	`TEST_IGNORE
();

4794 
EXPECT_ABORT_BEGIN


4795 
	`TEST_ASSERT_DOUBLE_IS_INF
(2.0);

4796 
VERIFY_FAILS_END


4798 
	}
}

4800 
	$ã°DoubÀIsNŸPosInf2
()

4802 #ifde‡
UNITY_EXCLUDE_DOUBLE


4803 
	`TEST_IGNORE
();

4805 
	`TEST_ASSERT_DOUBLE_IS_NOT_INF
(2.0);

4807 
	}
}

4809 
	$ã°DoubÀIsNŸNegInf
()

4811 #ifde‡
UNITY_EXCLUDE_DOUBLE


4812 
	`TEST_IGNORE
();

4814 
EXPECT_ABORT_BEGIN


4815 
	`TEST_ASSERT_DOUBLE_IS_NEG_INF
(-999.876);

4816 
VERIFY_FAILS_END


4818 
	}
}

4820 
	$ã°DoubÀIsN™1
()

4822 #ifde‡
UNITY_EXCLUDE_DOUBLE


4823 
	`TEST_IGNORE
();

4825 
	`TEST_ASSERT_DOUBLE_IS_NAN
(0.0 / 
d_zîo
);

4827 
	}
}

4829 
	$ã°DoubÀIsN™2
()

4831 #ifde‡
UNITY_EXCLUDE_DOUBLE


4832 
	`TEST_IGNORE
();

4834 
EXPECT_ABORT_BEGIN


4835 
	`TEST_ASSERT_DOUBLE_IS_NOT_NAN
(0.0 / 
d_zîo
);

4836 
VERIFY_FAILS_END


4838 
	}
}

4840 
	$ã°DoubÀIsNŸN™1
()

4842 #ifde‡
UNITY_EXCLUDE_DOUBLE


4843 
	`TEST_IGNORE
();

4845 
EXPECT_ABORT_BEGIN


4846 
	`TEST_ASSERT_DOUBLE_IS_NAN
(234.9);

4847 
VERIFY_FAILS_END


4849 
	}
}

4851 
	$ã°DoubÀIsNŸN™2
()

4853 #ifde‡
UNITY_EXCLUDE_DOUBLE


4854 
	`TEST_IGNORE
();

4856 
	`TEST_ASSERT_DOUBLE_IS_NOT_NAN
(234.9);

4858 
	}
}

4860 
	$ã°DoubÀInfIsNŸN™
()

4862 #ifde‡
UNITY_EXCLUDE_DOUBLE


4863 
	`TEST_IGNORE
();

4865 
EXPECT_ABORT_BEGIN


4866 
	`TEST_ASSERT_DOUBLE_IS_NAN
(1.0 / 
d_zîo
);

4867 
VERIFY_FAILS_END


4869 
	}
}

4871 
	$ã°DoubÀN™IsNŸInf
()

4873 #ifde‡
UNITY_EXCLUDE_DOUBLE


4874 
	`TEST_IGNORE
();

4876 
EXPECT_ABORT_BEGIN


4877 
	`TEST_ASSERT_DOUBLE_IS_INF
(0.0 / 
d_zîo
);

4878 
VERIFY_FAILS_END


4880 
	}
}

4882 
	$ã°DoubÀIsDëîmö©e1
()

4884 #ifde‡
UNITY_EXCLUDE_DOUBLE


4885 
	`TEST_IGNORE
();

4887 
	`TEST_ASSERT_DOUBLE_IS_DETERMINATE
(0.0);

4888 
	`TEST_ASSERT_DOUBLE_IS_DETERMINATE
(123.3);

4889 
	`TEST_ASSERT_DOUBLE_IS_DETERMINATE
(-88.3);

4891 
	}
}

4893 
	$ã°DoubÀIsDëîmö©e2
()

4895 #ifde‡
UNITY_EXCLUDE_DOUBLE


4896 
	`TEST_IGNORE
();

4898 
EXPECT_ABORT_BEGIN


4899 
	`TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE
(-88.3);

4900 
VERIFY_FAILS_END


4902 
	}
}

4904 
	$ã°DoubÀIsNŸDëîmö©e1
()

4906 #ifde‡
UNITY_EXCLUDE_DOUBLE


4907 
	`TEST_IGNORE
();

4909 
	`TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE
(1.0 / 
d_zîo
);

4910 
	`TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE
(-1.0 / 
d_zîo
);

4911 
	`TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE
(0.0 / 
d_zîo
);

4913 
	}
}

4915 
	$ã°DoubÀIsNŸDëîmö©e2
()

4917 #ifde‡
UNITY_EXCLUDE_DOUBLE


4918 
	`TEST_IGNORE
();

4920 
EXPECT_ABORT_BEGIN


4921 
	`TEST_ASSERT_DOUBLE_IS_DETERMINATE
(-1.0 / 
d_zîo
);

4922 
VERIFY_FAILS_END


4924 
	}
}

4926 
	$ã°DoubÀTøôFaûsOnInvÆidTøô
()

4928 #ifde‡
UNITY_EXCLUDE_DOUBLE


4929 
	`TEST_IGNORE
();

4931 
EXPECT_ABORT_BEGIN


4932 
	`UnôyAs£πDoubÀS≥cül
(1.0, 
NULL
, 
__LINE__
, 
UNITY_FLOAT_INVALID_TRAIT
);

4933 
VERIFY_FAILS_END


4935 
	}
}

4937 
	$ã°EquÆDoubÀAºays
()

4939 #ifde‡
UNITY_EXCLUDE_DOUBLE


4940 
	`TEST_IGNORE
();

4942 
p0
[] = {1.0, -8.0, 25.4, -0.123};

4943 
p1
[] = {1.0, -8.0, 25.4, -0.123};

4944 
p2
[] = {1.0, -8.0, 25.4, -0.2};

4945 
p3
[] = {1.0, -23.0, 25.0, -0.26};

4947 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
p0
,Ö0, 1);

4948 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
p0
,Ö0, 4);

4949 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
p0
, 
p1
, 4);

4950 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
p0
, 
p2
, 3);

4951 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
p0
, 
p3
, 1);

4952 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
NULL
, NULL, 1);

4954 
	}
}

4956 
	$ã°NŸEquÆDoubÀAºaysEx≥˘edNuŒ
()

4958 #ifde‡
UNITY_EXCLUDE_DOUBLE


4959 
	`TEST_IGNORE
();

4961 * 
p0
 = 
NULL
;

4962 
p1
[] = {1.0, 8.0, 25.4, 0.252};

4964 
EXPECT_ABORT_BEGIN


4965 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
p0
, 
p1
, 4);

4966 
VERIFY_FAILS_END


4968 
	}
}

4970 
	$ã°NŸEquÆDoubÀAºaysA˘uÆNuŒ
()

4972 #ifde‡
UNITY_EXCLUDE_DOUBLE


4973 
	`TEST_IGNORE
();

4975 
p0
[] = {1.0, 8.0, 25.4, 0.253};

4976 * 
p1
 = 
NULL
;

4978 
EXPECT_ABORT_BEGIN


4979 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
p0
, 
p1
, 4);

4980 
VERIFY_FAILS_END


4982 
	}
}

4984 
	$ã°NŸEquÆDoubÀAºays1
()

4986 #ifde‡
UNITY_EXCLUDE_DOUBLE


4987 
	`TEST_IGNORE
();

4989 
p0
[] = {1.0, 8.0, 25.4, 0.25666666667};

4990 
p1
[] = {1.0, 8.0, 25.4, 0.25666666666};

4992 
EXPECT_ABORT_BEGIN


4993 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
p0
, 
p1
, 4);

4994 
VERIFY_FAILS_END


4996 
	}
}

4998 
	$ã°NŸEquÆDoubÀAºays2
()

5000 #ifde‡
UNITY_EXCLUDE_DOUBLE


5001 
	`TEST_IGNORE
();

5003 
p0
[] = {1.0, 8.0, 25.4, 0.253};

5004 
p1
[] = {2.0, 8.0, 25.4, 0.253};

5006 
EXPECT_ABORT_BEGIN


5007 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
p0
, 
p1
, 4);

5008 
VERIFY_FAILS_END


5010 
	}
}

5012 
	$ã°NŸEquÆDoubÀAºays3
()

5014 #ifde‡
UNITY_EXCLUDE_DOUBLE


5015 
	`TEST_IGNORE
();

5017 
p0
[] = {1.0, 8.0, 25.4, 0.253};

5018 
p1
[] = {1.0, 8.0, 25.5, 0.253};

5020 
EXPECT_ABORT_BEGIN


5021 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
p0
, 
p1
, 4);

5022 
VERIFY_FAILS_END


5024 
	}
}

5026 
	$ã°NŸEquÆDoubÀAºaysNeg©ive1
()

5028 #ifde‡
UNITY_EXCLUDE_DOUBLE


5029 
	`TEST_IGNORE
();

5031 
p0
[] = {-1.0, -8.0, -25.4, -0.2566666667};

5032 
p1
[] = {-1.0, -8.0, -25.4, -0.2566666666};

5034 
EXPECT_ABORT_BEGIN


5035 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
p0
, 
p1
, 4);

5036 
VERIFY_FAILS_END


5038 
	}
}

5040 
	$ã°NŸEquÆDoubÀAºaysNeg©ive2
()

5042 #ifde‡
UNITY_EXCLUDE_DOUBLE


5043 
	`TEST_IGNORE
();

5045 
p0
[] = {-1.0, -8.0, -25.4, -0.253};

5046 
p1
[] = {-2.0, -8.0, -25.4, -0.253};

5048 
EXPECT_ABORT_BEGIN


5049 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
p0
, 
p1
, 4);

5050 
VERIFY_FAILS_END


5052 
	}
}

5054 
	$ã°NŸEquÆDoubÀAºaysNeg©ive3
()

5056 #ifde‡
UNITY_EXCLUDE_DOUBLE


5057 
	`TEST_IGNORE
();

5059 
p0
[] = {-1.0, -8.0, -25.4, -0.253};

5060 
p1
[] = {-1.0, -8.0, -25.5, -0.253};

5062 
EXPECT_ABORT_BEGIN


5063 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
p0
, 
p1
, 4);

5064 
VERIFY_FAILS_END


5066 
	}
}

5068 
	$ã°EquÆDoubÀAºaysNaN
()

5070 #ifde‡
UNITY_EXCLUDE_DOUBLE


5071 
	`TEST_IGNORE
();

5073 
p0
[] = {1.0, 0.0 / 
d_zîo
, 25.4, 0.253};

5074 
p1
[] = {1.0, 0.0 / 
d_zîo
, 25.4, 0.253};

5076 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
p0
, 
p1
, 4);

5078 
	}
}

5080 
	$ã°EquÆDoubÀAºaysInf
()

5082 #ifde‡
UNITY_EXCLUDE_DOUBLE


5083 
	`TEST_IGNORE
();

5085 
p0
[] = {1.0, 1.0 / 
d_zîo
, 25.4, 0.253};

5086 
p1
[] = {1.0, 1.0 / 
d_zîo
, 25.4, 0.253};

5088 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
p0
, 
p1
, 4);

5090 
	}
}

5092 
	$ã°NŸEquÆDoubÀAºaysLígthZîo
()

5094 #ifde‡
UNITY_EXCLUDE_DOUBLE


5095 
	`TEST_IGNORE
();

5097 
p0
[1] = {0.0};

5098 
p1
[1] = {0.0};

5100 
EXPECT_ABORT_BEGIN


5101 
	`TEST_ASSERT_EQUAL_DOUBLE_ARRAY
(
p0
, 
p1
, 0);

5102 
VERIFY_FAILS_END


5104 
	}
}

5106 
	$ã°EquÆDoubÀEachEquÆ
()

5108 #ifde‡
UNITY_EXCLUDE_DOUBLE


5109 
	`TEST_IGNORE
();

5111 
p0
[] = {1.0, 1.0, 1.0, 1.0};

5112 
p1
[] = {-0.123, -0.123, -0.123, -0.123};

5113 
p2
[] = {25.4, 25.4, 25.4, -0.2};

5114 
p3
[] = {1.0, -23.0, 25.0, -0.26};

5116 
	`TEST_ASSERT_EACH_EQUAL_DOUBLE
(1.0, 
p0
, 1);

5117 
	`TEST_ASSERT_EACH_EQUAL_DOUBLE
(1.0, 
p0
, 4);

5118 
	`TEST_ASSERT_EACH_EQUAL_DOUBLE
(-0.123, 
p1
, 4);

5119 
	`TEST_ASSERT_EACH_EQUAL_DOUBLE
(25.4, 
p2
, 3);

5120 
	`TEST_ASSERT_EACH_EQUAL_DOUBLE
(1.0, 
p3
, 1);

5122 
	}
}

5124 
	$ã°NŸEquÆDoubÀEachEquÆA˘uÆNuŒ
()

5126 #ifde‡
UNITY_EXCLUDE_DOUBLE


5127 
	`TEST_IGNORE
();

5129 * 
p0
 = 
NULL
;

5131 
EXPECT_ABORT_BEGIN


5132 
	`TEST_ASSERT_EACH_EQUAL_DOUBLE
(5, 
p0
, 4);

5133 
VERIFY_FAILS_END


5135 
	}
}

5137 
	$ã°NŸEquÆDoubÀEachEquÆ1
()

5139 #ifde‡
UNITY_EXCLUDE_DOUBLE


5140 
	`TEST_IGNORE
();

5142 
p0
[] = {0.253, 8.0, 0.253, 0.253};

5144 
EXPECT_ABORT_BEGIN


5145 
	`TEST_ASSERT_EACH_EQUAL_DOUBLE
(0.253, 
p0
, 4);

5146 
VERIFY_FAILS_END


5148 
	}
}

5150 
	$ã°NŸEquÆDoubÀEachEquÆ2
()

5152 #ifde‡
UNITY_EXCLUDE_DOUBLE


5153 
	`TEST_IGNORE
();

5155 
p0
[] = {8.0, 8.0, 8.0, 0.253};

5157 
EXPECT_ABORT_BEGIN


5158 
	`TEST_ASSERT_EACH_EQUAL_DOUBLE
(8.0, 
p0
, 4);

5159 
VERIFY_FAILS_END


5161 
	}
}

5163 
	$ã°NŸEquÆDoubÀEachEquÆ3
()

5165 #ifde‡
UNITY_EXCLUDE_DOUBLE


5166 
	`TEST_IGNORE
();

5168 
p0
[] = {1.0, 1.0, 1.0, 0.253};

5170 
EXPECT_ABORT_BEGIN


5171 
	`TEST_ASSERT_EACH_EQUAL_DOUBLE
(1.0, 
p0
, 4);

5172 
VERIFY_FAILS_END


5174 
	}
}

5176 
	$ã°NŸEquÆDoubÀEachEquÆNeg©ive1
()

5178 #ifde‡
UNITY_EXCLUDE_DOUBLE


5179 
	`TEST_IGNORE
();

5181 
p0
[] = {-1.0, -0.253, -0.253, -0.253};

5183 
EXPECT_ABORT_BEGIN


5184 
	`TEST_ASSERT_EACH_EQUAL_DOUBLE
(-0.253, 
p0
, 4);

5185 
VERIFY_FAILS_END


5187 
	}
}

5189 
	$ã°NŸEquÆDoubÀEachEquÆNeg©ive2
()

5191 #ifde‡
UNITY_EXCLUDE_DOUBLE


5192 
	`TEST_IGNORE
();

5194 
p0
[] = {-25.4, -8.0, -25.4, -25.4};

5196 
EXPECT_ABORT_BEGIN


5197 
	`TEST_ASSERT_EACH_EQUAL_DOUBLE
(-25.4, 
p0
, 4);

5198 
VERIFY_FAILS_END


5200 
	}
}

5202 
	$ã°NŸEquÆDoubÀEachEquÆNeg©ive3
()

5204 #ifde‡
UNITY_EXCLUDE_DOUBLE


5205 
	`TEST_IGNORE
();

5207 
p0
[] = {-8.0, -8.0, -8.0, -0.253};

5209 
EXPECT_ABORT_BEGIN


5210 
	`TEST_ASSERT_EACH_EQUAL_DOUBLE
(-8.0, 
p0
, 4);

5211 
VERIFY_FAILS_END


5213 
	}
}

5215 
	$ã°EquÆDoubÀEachEquÆNaN
()

5217 #ifde‡
UNITY_EXCLUDE_DOUBLE


5218 
	`TEST_IGNORE
();

5220 
p0
[] = {0.0 / 
d_zîo
, 0.0 / d_zero, 0.0 / d_zero, 0.0 / d_zero};

5222 
	`TEST_ASSERT_EACH_EQUAL_DOUBLE
(0.0 / 
d_zîo
, 
p0
, 4);

5224 
	}
}

5226 
	$ã°EquÆDoubÀEachEquÆInf
()

5228 #ifde‡
UNITY_EXCLUDE_DOUBLE


5229 
	`TEST_IGNORE
();

5231 
p0
[] = {1.0 / 
d_zîo
, 1.0 / d_zero, 25.4, 0.253};

5233 
	`TEST_ASSERT_EACH_EQUAL_DOUBLE
(1.0 / 
d_zîo
, 
p0
, 2);

5235 
	}
}

5237 
	$ã°NŸEquÆDoubÀEachEquÆLígthZîo
()

5239 #ifde‡
UNITY_EXCLUDE_DOUBLE


5240 
	`TEST_IGNORE
();

5242 
p0
[1] = {0.0};

5244 
EXPECT_ABORT_BEGIN


5245 
	`TEST_ASSERT_EACH_EQUAL_DOUBLE
(0.0, 
p0
, 0);

5246 
VERIFY_FAILS_END


5248 
	}
}

5250 
	$ã°DoubÀPrötög
()

5252 #i‡
	`deföed
(
UNITY_EXCLUDE_FLOAT_PRINT
Ë|| deföed(
UNITY_EXCLUDE_DOUBLE
Ë|| !deföed(
USING_OUTPUT_SPY
)

5253 
	`TEST_IGNORE
();

5255 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("0.100469", 0.10046949999999999);

5256 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("4.29497e+09", 4294967295.999999);

5257 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("4.29497e+09", 4294967295.9999995);

5258 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("4.29497e+09", 4294967296.0);

5259 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("1e+10", 9999999995.0);

5260 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("9.0072e+15", 9007199254740990.0);

5261 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("7e+100", 7.0e+100);

5262 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("3e+200", 3.0e+200);

5263 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("9.23457e+300", 9.23456789e+300);

5265 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-0.100469", -0.10046949999999999);

5266 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-4.29497e+09", -4294967295.999999);

5267 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-4.29497e+09", -4294967295.9999995);

5268 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-7e+100", -7.0e+100);

5270 
	}
}

5272 
	$ã°DoubÀPrötögInföôyAndNaN
()

5274 #i‡
	`deföed
(
UNITY_EXCLUDE_FLOAT_PRINT
Ë|| deföed(
UNITY_EXCLUDE_DOUBLE
Ë|| !deföed(
USING_OUTPUT_SPY
)

5275 
	`TEST_IGNORE
();

5277 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("öf", 1.0 / 
d_zîo
);

5278 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("-öf", -1.0 / 
d_zîo
);

5280 
	`TEST_ASSERT_EQUAL_PRINT_FLOATING
("«n", 0.0 / 
d_zîo
);

5282 
	}
}

5286 
	$ã°Th©DëaûsC™BeH™dÀO√Dëaû
()

5288 #ifde‡
UNITY_EXCLUDE_DETAILS


5289 
	`TEST_IGNORE
();

5291 
	`UNITY_SET_DETAIL
("Detail1");

5293 
EXPECT_ABORT_BEGIN


5294 
	`TEST_ASSERT_EQUAL_INT_MESSAGE
(5, 6, "Should Fail And Say Detail1");

5295 
VERIFY_FAILS_END


5297 
	}
}

5299 
	$ã°Th©DëaûsC™H™dÀTe°Faû
()

5301 #ifde‡
UNITY_EXCLUDE_DETAILS


5302 
	`TEST_IGNORE
();

5304 
	`UNITY_SET_DETAILS
("Detail1","Detail2");

5306 
EXPECT_ABORT_BEGIN


5307 
	`TEST_FAIL_MESSAGE
("Should Fail And Say Detail1ánd Detail2");

5308 
VERIFY_FAILS_END


5310 
	}
}

5312 
	$ã°Th©DëaûsC™BeH™dÀTwoDëaûs
()

5314 #ifde‡
UNITY_EXCLUDE_DETAILS


5315 
	`TEST_IGNORE
();

5317 
	`UNITY_SET_DETAILS
("Detail1","Detail2");

5319 
EXPECT_ABORT_BEGIN


5320 
	`TEST_ASSERT_EQUAL_HEX8_MESSAGE
(7, 8, "Should Fail And Say Detail1ánd Detail2");

5321 
VERIFY_FAILS_END


5323 
	}
}

5325 
	$ã°Th©DëaûsC™BeH™dÀSögÀDëaûCÀ¨ögTwoDëaûs
()

5327 #ifde‡
UNITY_EXCLUDE_DETAILS


5328 
	`TEST_IGNORE
();

5330 
	`UNITY_SET_DETAILS
("Detail1","Detail2");

5331 
	`UNITY_SET_DETAIL
("DetailNew");

5333 
EXPECT_ABORT_BEGIN


5334 
	`TEST_ASSERT_EQUAL_STRING_MESSAGE
("MEH", "GUH", "Should Fail And Say DetailNew");

5335 
VERIFY_FAILS_END


5337 
	}
}

	@open_source_lib/cJSON/cJSON-1.7.15/tests/unity_setup.c

2 
	$£tUp
(Ë{ 
	}
}

3 
	$ã¨Down
(Ë{ 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/apps/db_dump/db_dump.c

19 
	~<¨∑/öë.h
>

20 
	~<as£π.h
>

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<sys/°©.h
>

28 
	~<time.h
>

30 
	~"db_dump.h
"

31 
	~<mosquôto_brokî_öã∫Æ.h
>

32 
	~<mem‹y_mosq.h
>

33 
	~<≥rsi°.h
>

35 
	#mosquôto__mÆloc
(
A
Ë
	`mÆloc
((A))

	)

36 
	#mosquôto__‰ì
(
A
Ë
	`‰ì
((A))

	)

37 
	#_mosquôto_mÆloc
(
A
Ë
	`mÆloc
((A))

	)

38 
	#_mosquôto_‰ì
(
A
Ë
	`‰ì
((A))

	)

39 
	~<uthash.h
>

41 
	~"db_dump.h
"

43 
	s˛õ¡_d©a


45 
UT_hash_h™dÀ
 
	mhh_id
;

46 *
	mid
;

47 
uöt32_t
 
	msubs¸ùti⁄s
;

48 
uöt32_t
 
	msubs¸ùti⁄_size
;

49 
	mmesßges
;

50 
	mmesßge_size
;

53 
	smsg_°‹e_chunk


55 
UT_hash_h™dÀ
 
	mhh
;

56 
dbid_t
 
	m°‹e_id
;

57 
uöt32_t
 
	mÀngth
;

60 
mosquôto_db
 
	gdb
;

62 
uöt32_t
 
db_vîsi⁄
;

63 
	g°©s
 = 0;

64 
	g˛õ¡_°©s
 = 0;

65 
	gdo_¥öt
 = 1;

68 
	gcfg_cou¡
 = 0;

69 
	g˛õ¡_cou¡
 = 0;

70 
	g˛õ¡_msg_cou¡
 = 0;

71 
	gmsg_°‹e_cou¡
 = 0;

72 
	gªèö_cou¡
 = 0;

73 
	gsub_cou¡
 = 0;

77 
˛õ¡_d©a
 *
	g˛õ¡s_by_id
 = 
NULL
;

78 
msg_°‹e_chunk
 *
	gmsgs_by_id
 = 
NULL
;

81 
	$‰ì__sub
(
P_sub
 *
chunk
)

83 
	`‰ì
(
chunk
->
˛õ¡_id
);

84 
	`‰ì
(
chunk
->
t›ic
);

85 
	}
}

87 
	$‰ì__˛õ¡
(
P_˛õ¡
 *
chunk
)

89 
	`‰ì
(
chunk
->
˛õ¡_id
);

90 
	}
}

93 
	$‰ì__˛õ¡_msg
(
P_˛õ¡_msg
 *
chunk
)

95 
	`‰ì
(
chunk
->
˛õ¡_id
);

96 
	`mosquôto_¥›îty_‰ì_Æl
(&
chunk
->
¥›îtõs
);

97 
	}
}

100 
	$‰ì__msg_°‹e
(
P_msg_°‹e
 *
chunk
)

102 
	`‰ì
(
chunk
->
t›ic
);

103 
	`‰ì
(
chunk
->
∑ylﬂd
);

104 
	`mosquôto_¥›îty_‰ì_Æl
(&
chunk
->
¥›îtõs
);

105 
	}
}

108 
	$dump__cfg_chunk_¥o˚ss
(
FILE
 *
db_fd
, 
uöt32_t
 
Àngth
)

110 
PF_cfg
 
chunk
;

111 
rc
;

113 
cfg_cou¡
++;

115 
	`mem£t
(&
chunk
, 0, (
PF_cfg
));

117 if(
db_vîsi⁄
 == 6 || db_version == 5){

118 
rc
 = 
	`≥rsi°__chunk_cfg_ªad_v56
(
db_fd
, &
chunk
);

120 
rc
 = 
	`≥rsi°__chunk_cfg_ªad_v234
(
db_fd
, &
chunk
);

122 if(
rc
){

123 
	`Ârötf
(
°dîr
, "Error: CorruptÖersistent database.");

124 
	`f˛o£
(
db_fd
);

125  
rc
;

128 if(
do_¥öt
Ë
	`¥ötf
("DB_CHUNK_CFG:\n");

129 if(
do_¥öt
Ë
	`¥ötf
("\tLígth: %d\n", 
Àngth
);

130 if(
do_¥öt
Ë
	`¥ötf
("\tShutdown: %d\n", 
chunk
.
shutdown
);

131 if(
do_¥öt
Ë
	`¥ötf
("\tDB ID size: %d\n", 
chunk
.
dbid_size
);

132 if(
chunk
.
dbid_size
 !(
dbid_t
)){

133 
	`Ârötf
(
°dîr
, "Error: Incompatible database configuration (dbid size is %d bytes,Éxpected %zu)",

134 
chunk
.
dbid_size
, (
dbid_t
));

135 
	`f˛o£
(
db_fd
);

138 if(
do_¥öt
Ë
	`¥ötf
("\tLa° DB ID: %" 
PRIu64
 "\n", 
chunk
.
œ°_db_id
);

141 
	}
}

144 
	$dump__˛õ¡_chunk_¥o˚ss
(
FILE
 *
db_fd
, 
uöt32_t
 
Àngth
)

146 
P_˛õ¡
 
chunk
;

147 
rc
 = 0;

148 
˛õ¡_d©a
 *
cc
;

150 
˛õ¡_cou¡
++;

152 
	`mem£t
(&
chunk
, 0, (
P_˛õ¡
));

154 if(
db_vîsi⁄
 == 6 || db_version == 5){

155 
rc
 = 
	`≥rsi°__chunk_˛õ¡_ªad_v56
(
db_fd
, &
chunk
, 
db_vîsi⁄
);

157 
rc
 = 
	`≥rsi°__chunk_˛õ¡_ªad_v234
(
db_fd
, &
chunk
, 
db_vîsi⁄
);

159 if(
rc
){

160 
	`Ârötf
(
°dîr
, "Error: CorruptÖersistent database.");

161  
rc
;

164 if(
˛õ¡_°©s
){

165 
cc
 = 
	`ˇŒoc
(1, (
˛õ¡_d©a
));

166 if(!
cc
){

167 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

168 
	`f˛o£
(
db_fd
);

169 
	`‰ì
(
chunk
.
˛õ¡_id
);

172 
cc
->
id
 = 
	`°rdup
(
chunk
.
˛õ¡_id
);

173 
	`HASH_ADD_KEYPTR
(
hh_id
, 
˛õ¡s_by_id
, 
cc
->
id
, 
	`°æí
(cc->id), cc);

176 if(
do_¥öt
) {

177 
	`¥öt__˛õ¡
(&
chunk
, 
Àngth
);

179 
	`‰ì__˛õ¡
(&
chunk
);

182 
	}
}

185 
	$dump__˛õ¡_msg_chunk_¥o˚ss
(
FILE
 *
db_fd
, 
uöt32_t
 
Àngth
)

187 
P_˛õ¡_msg
 
chunk
;

188 
˛õ¡_d©a
 *
cc
;

189 
msg_°‹e_chunk
 *
msc
;

190 
rc
;

192 
˛õ¡_msg_cou¡
++;

194 
	`mem£t
(&
chunk
, 0, (
P_˛õ¡_msg
));

195 if(
db_vîsi⁄
 == 6 || db_version == 5){

196 
rc
 = 
	`≥rsi°__chunk_˛õ¡_msg_ªad_v56
(
db_fd
, &
chunk
, 
Àngth
);

198 
rc
 = 
	`≥rsi°__chunk_˛õ¡_msg_ªad_v234
(
db_fd
, &
chunk
);

200 if(
rc
){

201 
	`Ârötf
(
°dîr
, "Error: CorruptÖersistent database.");

202 
	`f˛o£
(
db_fd
);

203  
rc
;

206 if(
˛õ¡_°©s
){

207 
	`HASH_FIND
(
hh_id
, 
˛õ¡s_by_id
, 
chunk
.
˛õ¡_id
, 
	`°æí
(chunk.˛õ¡_id), 
cc
);

208 if(
cc
){

209 
cc
->
mesßges
++;

210 
cc
->
mesßge_size
 +
Àngth
;

212 
	`HASH_FIND
(
hh
, 
msgs_by_id
, &
chunk
.
F
.
°‹e_id
, (
dbid_t
), 
msc
);

213 if(
msc
){

214 
cc
->
mesßge_size
 +
msc
->
Àngth
;

219 if(
do_¥öt
) {

220 
	`¥öt__˛õ¡_msg
(&
chunk
, 
Àngth
);

222 
	`‰ì__˛õ¡_msg
(&
chunk
);

224 
	}
}

227 
	$dump__msg_°‹e_chunk_¥o˚ss
(
FILE
 *
db_Âå
, 
uöt32_t
 
Àngth
)

229 
P_msg_°‹e
 
chunk
;

230 
mosquôto_msg_°‹e
 *
°‹ed
 = 
NULL
;

231 
mosquôto_msg_°‹e_lﬂd
 *
lﬂd
;

232 
öt64_t
 
mesßge_expúy_öãrvÆ64
;

233 
uöt32_t
 
mesßge_expúy_öãrvÆ
;

234 
rc
 = 0;

235 
msg_°‹e_chunk
 *
mcs
;

237 
msg_°‹e_cou¡
++;

239 
	`mem£t
(&
chunk
, 0, (
P_msg_°‹e
));

240 if(
db_vîsi⁄
 == 6 || db_version == 5){

241 
rc
 = 
	`≥rsi°__chunk_msg_°‹e_ªad_v56
(
db_Âå
, &
chunk
, 
Àngth
);

243 
rc
 = 
	`≥rsi°__chunk_msg_°‹e_ªad_v234
(
db_Âå
, &
chunk
, 
db_vîsi⁄
);

245 if(
rc
){

246 
	`Ârötf
(
°dîr
, "Error: CorruptÖersistent database.");

247 
	`f˛o£
(
db_Âå
);

248  
rc
;

251 
lﬂd
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_msg_°‹e_lﬂd
));

252 if(!
lﬂd
){

253 
	`f˛o£
(
db_Âå
);

254 
	`mosquôto__‰ì
(
chunk
.
sour˚
.
id
);

255 
	`mosquôto__‰ì
(
chunk
.
sour˚
.
u£∫ame
);

256 
	`mosquôto__‰ì
(
chunk
.
t›ic
);

257 
	`mosquôto__‰ì
(
chunk
.
∑ylﬂd
);

258 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

259  
MOSQ_ERR_NOMEM
;

262 if(
chunk
.
F
.
expúy_time
 > 0){

263 
mesßge_expúy_öãrvÆ64
 = 
chunk
.
F
.
expúy_time
 - 
	`time
(
NULL
);

264 if(
mesßge_expúy_öãrvÆ64
 < 0 || mesßge_expúy_öãrvÆ64 > 
UINT32_MAX
){

265 
mesßge_expúy_öãrvÆ
 = 0;

267 
mesßge_expúy_öãrvÆ
 = (
uöt32_t
)
mesßge_expúy_öãrvÆ64
;

270 
mesßge_expúy_öãrvÆ
 = 0;

273 
°‹ed
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_msg_°‹e
));

274 if(
°‹ed
 =
NULL
){

275 
	`mosquôto__‰ì
(
lﬂd
);

276 
	`f˛o£
(
db_Âå
);

277 
	`mosquôto__‰ì
(
chunk
.
sour˚
.
id
);

278 
	`mosquôto__‰ì
(
chunk
.
sour˚
.
u£∫ame
);

279 
	`mosquôto__‰ì
(
chunk
.
t›ic
);

280 
	`mosquôto__‰ì
(
chunk
.
∑ylﬂd
);

281  
MOSQ_ERR_NOMEM
;

283 
°‹ed
->
sour˚_mid
 = 
chunk
.
F
.source_mid;

284 
°‹ed
->
t›ic
 = 
chunk
.topic;

285 
°‹ed
->
qos
 = 
chunk
.
F
.qos;

286 
°‹ed
->
ªèö
 = 
chunk
.
F
.retain;

287 
°‹ed
->
∑ylﬂdÀn
 = 
chunk
.
F
.payloadlen;

288 
°‹ed
->
∑ylﬂd
 = 
chunk
.payload;

289 
°‹ed
->
¥›îtõs
 = 
chunk
.properties;

291 
rc
 = 
	`db__mesßge_°‹e
(&
chunk
.
sour˚
, 
°‹ed
, 
mesßge_expúy_öãrvÆ
,

292 
chunk
.
F
.
°‹e_id
, 
mosq_mo_˛õ¡
);

294 
	`mosquôto__‰ì
(
chunk
.
sour˚
.
id
);

295 
	`mosquôto__‰ì
(
chunk
.
sour˚
.
u£∫ame
);

296 
chunk
.
sour˚
.
id
 = 
NULL
;

297 
chunk
.
sour˚
.
u£∫ame
 = 
NULL
;

299 if(
rc
 =
MOSQ_ERR_SUCCESS
){

300 
°‹ed
->
sour˚_li°íî
 = 
chunk
.
sour˚
.
li°íî
;

301 
lﬂd
->
db_id
 = 
°‹ed
->db_id;

302 
lﬂd
->
°‹e
 = 
°‹ed
;

304 
	`HASH_ADD
(
hh
, 
db
.
msg_°‹e_lﬂd
, 
db_id
, (
dbid_t
), 
lﬂd
);

306 
	`mosquôto__‰ì
(
lﬂd
);

307 
	`f˛o£
(
db_Âå
);

308  
rc
;

311 if(
˛õ¡_°©s
){

312 
mcs
 = 
	`ˇŒoc
(1, (
msg_°‹e_chunk
));

313 if(!
mcs
){

314 
î∫o
 = 
ENOMEM
;

317 
mcs
->
°‹e_id
 = 
chunk
.
F
.store_id;

318 
mcs
->
Àngth
 =Üength;

319 
	`HASH_ADD
(
hh
, 
msgs_by_id
, 
°‹e_id
, (
dbid_t
), 
mcs
);

322 if(
do_¥öt
){

323 
	`¥öt__msg_°‹e
(&
chunk
, 
Àngth
);

325 
	`‰ì__msg_°‹e
(&
chunk
);

328 
	}
}

331 
	$dump__ªèö_chunk_¥o˚ss
(
FILE
 *
db_fd
, 
uöt32_t
 
Àngth
)

333 
P_ªèö
 
chunk
;

334 
rc
;

336 
ªèö_cou¡
++;

337 if(
do_¥öt
Ë
	`¥ötf
("DB_CHUNK_RETAIN:\n");

338 if(
do_¥öt
Ë
	`¥ötf
("\tLígth: %d\n", 
Àngth
);

340 if(
db_vîsi⁄
 == 6 || db_version == 5){

341 
rc
 = 
	`≥rsi°__chunk_ªèö_ªad_v56
(
db_fd
, &
chunk
);

343 
rc
 = 
	`≥rsi°__chunk_ªèö_ªad_v234
(
db_fd
, &
chunk
);

345 if(
rc
){

346 
	`f˛o£
(
db_fd
);

347  
rc
;

350 if(
do_¥öt
Ë
	`¥ötf
("\tSt‹êID: %" 
PRIu64
 "\n", 
chunk
.
F
.
°‹e_id
);

352 
	}
}

355 
	$dump__sub_chunk_¥o˚ss
(
FILE
 *
db_fd
, 
uöt32_t
 
Àngth
)

357 
rc
 = 0;

358 
P_sub
 
chunk
;

359 
˛õ¡_d©a
 *
cc
;

361 
sub_cou¡
++;

363 
	`mem£t
(&
chunk
, 0, (
P_sub
));

364 if(
db_vîsi⁄
 == 6 || db_version == 5){

365 
rc
 = 
	`≥rsi°__chunk_sub_ªad_v56
(
db_fd
, &
chunk
);

367 
rc
 = 
	`≥rsi°__chunk_sub_ªad_v234
(
db_fd
, &
chunk
);

369 if(
rc
){

370 
	`Ârötf
(
°dîr
, "Error: CorruptÖersistent database.");

371 
	`f˛o£
(
db_fd
);

372  
rc
;

375 if(
˛õ¡_°©s
){

376 
	`HASH_FIND
(
hh_id
, 
˛õ¡s_by_id
, 
chunk
.
˛õ¡_id
, 
	`°æí
(chunk.˛õ¡_id), 
cc
);

377 if(
cc
){

378 
cc
->
subs¸ùti⁄s
++;

379 
cc
->
subs¸ùti⁄_size
 +
Àngth
;

383 if(
do_¥öt
) {

384 
	`¥öt__sub
(&
chunk
, 
Àngth
);

386 
	`‰ì__sub
(&
chunk
);

389 
	}
}

392 
	$maö
(
¨gc
, *
¨gv
[])

394 
FILE
 *
fd
;

395 
hódî
[15];

396 
rc
 = 0;

397 
uöt32_t
 
¸c
;

398 
uöt32_t
 
i32ãmp
;

399 
uöt32_t
 
Àngth
;

400 
uöt32_t
 
chunk
;

401 *
fûíame
;

402 
˛õ¡_d©a
 *
cc
, *
cc_tmp
;

404 if(
¨gc
 == 2){

405 
fûíame
 = 
¨gv
[1];

406 }if(
¨gc
 =3 && !
	`°rcmp
(
¨gv
[1], "--stats")){

407 
°©s
 = 1;

408 
do_¥öt
 = 0;

409 
fûíame
 = 
¨gv
[2];

410 }if(
¨gc
 =3 && !
	`°rcmp
(
¨gv
[1], "--client-stats")){

411 
˛õ¡_°©s
 = 1;

412 
do_¥öt
 = 0;

413 
fûíame
 = 
¨gv
[2];

415 
	`Ârötf
(
°dîr
, "Usage: db_dump [--stats | --client-stats] <mosquitto db filename>\n");

418 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

419 
fd
 = 
	`f›í
(
fûíame
, "rb");

420 if(!
fd
){

421 
	`Ârötf
(
°dîr
, "Eº‹: U«bÀÅÿ›í %s\n", 
fûíame
);

424 
	`ªad_e
(
fd
, &
hódî
, 15);

425 if(!
	`memcmp
(
hódî
, 
magic
, 15)){

426 if(
do_¥öt
Ë
	`¥ötf
("Mosquitto DB dump\n");

428 
	`ªad_e
(
fd
, &
¸c
, (
uöt32_t
));

429 if(
do_¥öt
Ë
	`¥ötf
("CRC: %d\n", 
¸c
);

430 
	`ªad_e
(
fd
, &
i32ãmp
, (
uöt32_t
));

431 
db_vîsi⁄
 = 
	`¡ohl
(
i32ãmp
);

432 if(
do_¥öt
Ë
	`¥ötf
("DB vîsi⁄: %d\n", 
db_vîsi⁄
);

434 if(
db_vîsi⁄
 > 
MOSQ_DB_VERSION
){

435 if(
do_¥öt
Ë
	`¥ötf
("Warning: mosquitto_db_dump doesÇot supportÅhis DB version, continuing butÉxpectingÉrrors.\n");

438 
	`≥rsi°__chunk_hódî_ªad
(
fd
, &
chunk
, &
Àngth
Ë=
MOSQ_ERR_SUCCESS
){

439 
chunk
){

440 
DB_CHUNK_CFG
:

441 if(
	`dump__cfg_chunk_¥o˚ss
(
fd
, 
Àngth
))  1;

444 
DB_CHUNK_MSG_STORE
:

445 if(
	`dump__msg_°‹e_chunk_¥o˚ss
(
fd
, 
Àngth
))  1;

448 
DB_CHUNK_CLIENT_MSG
:

449 if(
	`dump__˛õ¡_msg_chunk_¥o˚ss
(
fd
, 
Àngth
))  1;

452 
DB_CHUNK_RETAIN
:

453 if(
	`dump__ªèö_chunk_¥o˚ss
(
fd
, 
Àngth
))  1;

456 
DB_CHUNK_SUB
:

457 if(
	`dump__sub_chunk_¥o˚ss
(
fd
, 
Àngth
))  1;

460 
DB_CHUNK_CLIENT
:

461 if(
	`dump__˛õ¡_chunk_¥o˚ss
(
fd
, 
Àngth
))  1;

465 
	`Ârötf
(
°dîr
, "W¨nög: Unsuµ‹ãd chunk \"%d\" i¿≥rsi°íàd©aba£ fûe. Ign‹ög.\n", 
chunk
);

466 if(
	`f£ek
(
fd
, 
Àngth
, 
SEEK_CUR
) < 0){

467 
	`Ârötf
(
°dîr
, "Error seeking in file.\n");

474 
	`Ârötf
(
°dîr
, "Error: Unrecognised file format.");

475 
rc
 = 1;

478 
	`f˛o£
(
fd
);

480 if(
°©s
){

481 
	`¥ötf
("DB_CHUNK_CFG: %ld\n", 
cfg_cou¡
);

482 
	`¥ötf
("DB_CHUNK_MSG_STORE: %ld\n", 
msg_°‹e_cou¡
);

483 
	`¥ötf
("DB_CHUNK_CLIENT_MSG: %ld\n", 
˛õ¡_msg_cou¡
);

484 
	`¥ötf
("DB_CHUNK_RETAIN: %ld\n", 
ªèö_cou¡
);

485 
	`¥ötf
("DB_CHUNK_SUB: %ld\n", 
sub_cou¡
);

486 
	`¥ötf
("DB_CHUNK_CLIENT: %ld\n", 
˛õ¡_cou¡
);

489 if(
˛õ¡_°©s
){

490 
	`HASH_ITER
(
hh_id
, 
˛õ¡s_by_id
, 
cc
, 
cc_tmp
){

491 
	`¥ötf
("SC: %d SS: %d MC: %d MS: %ld ", 
cc
->
subs¸ùti⁄s
, cc->
subs¸ùti⁄_size
, cc->
mesßges
, cc->
mesßge_size
);

492 
	`¥ötf
("%s\n", 
cc
->
id
);

493 
	`‰ì
(
cc
->
id
);

497  
rc
;

498 
îr‹
:

499 
	`Ârötf
(
°dîr
, "Eº‹: %s.", 
	`°ªº‹
(
î∫o
));

500 if(
fd
Ë
	`f˛o£
(fd);

502 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/apps/db_dump/db_dump.h

1 #i‚de‡
DB_DUMP_H


2 
	#DB_DUMP_H


	)

21 
	~<≥rsi°.h
>

23 
¥öt__˛õ¡
(
P_˛õ¡
 *
chunk
, 
uöt32_t
 
Àngth
);

24 
¥öt__˛õ¡_msg
(
P_˛õ¡_msg
 *
chunk
, 
uöt32_t
 
Àngth
);

25 
¥öt__msg_°‹e
(
P_msg_°‹e
 *
chunk
, 
uöt32_t
 
Àngth
);

26 
¥öt__sub
(
P_sub
 *
chunk
, 
uöt32_t
 
Àngth
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/apps/db_dump/print.c

19 
	~<öây≥s.h
>

20 
	~<°dio.h
>

22 
	~"db_dump.h
"

23 
	~<mosquôto_brokî_öã∫Æ.h
>

24 
	~<mem‹y_mosq.h
>

25 
	~<mqâ_¥Ÿocﬁ.h
>

26 
	~<≥rsi°.h
>

27 
	~<¥›îty_mosq.h
>

30 
	$¥öt__¥›îtõs
(
mosquôto_¥›îty
 *
¥›îtõs
)

32 
i
;

34 if(
¥›îtõs
 =
NULL
) ;

36 
	`¥ötf
("\tProperties:\n");

38 
¥›îtõs
){

39 
¥›îtõs
->
idítifõr
){

40 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
:

41 
	`¥ötf
("\t\tPaylﬂd f‹m© indiˇt‹: %d\n", 
¥›îtõs
->
vÆue
.
i8
);

43 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
:

44 
	`¥ötf
("\t\tReque°ÖrobÀm inf‹m©i⁄: %d\n", 
¥›îtõs
->
vÆue
.
i8
);

46 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
:

47 
	`¥ötf
("\t\tReque°Ñe•⁄£ inf‹m©i⁄: %d\n", 
¥›îtõs
->
vÆue
.
i8
);

49 
MQTT_PROP_MAXIMUM_QOS
:

50 
	`¥ötf
("\t\tMaximum QoS: %d\n", 
¥›îtõs
->
vÆue
.
i8
);

52 
MQTT_PROP_RETAIN_AVAILABLE
:

53 
	`¥ötf
("\t\tRëaöávaûabÀ: %d\n", 
¥›îtõs
->
vÆue
.
i8
);

55 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
:

56 
	`¥ötf
("\t\tWûdˇrd subávaûabÀ: %d\n", 
¥›îtõs
->
vÆue
.
i8
);

58 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
:

59 
	`¥ötf
("\t\tSubs¸ùti⁄ IDávaûabÀ: %d\n", 
¥›îtõs
->
vÆue
.
i8
);

61 
MQTT_PROP_SHARED_SUB_AVAILABLE
:

62 
	`¥ötf
("\t\tSh¨ed subs¸ùti⁄ávaûabÀ: %d\n", 
¥›îtõs
->
vÆue
.
i8
);

65 
MQTT_PROP_SERVER_KEEP_ALIVE
:

66 
	`¥ötf
("\t\tSîvî kì∞Æive: %d\n", 
¥›îtõs
->
vÆue
.
i16
);

68 
MQTT_PROP_RECEIVE_MAXIMUM
:

69 
	`¥ötf
("\t\tRe˚ivêmaximum: %d\n", 
¥›îtõs
->
vÆue
.
i16
);

71 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
:

72 
	`¥ötf
("\t\tT›i¯Æü†maximum: %d\n", 
¥›îtõs
->
vÆue
.
i16
);

74 
MQTT_PROP_TOPIC_ALIAS
:

75 
	`¥ötf
("\t\tT›i¯Æüs: %d\n", 
¥›îtõs
->
vÆue
.
i16
);

78 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
:

79 
	`¥ötf
("\t\tMesßgêexpúy i¡îvÆ: %d\n", 
¥›îtõs
->
vÆue
.
i32
);

81 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
:

82 
	`¥ötf
("\t\tSessi⁄Éxpúy i¡îvÆ: %d\n", 
¥›îtõs
->
vÆue
.
i32
);

84 
MQTT_PROP_WILL_DELAY_INTERVAL
:

85 
	`¥ötf
("\t\tWû»dñay i¡îvÆ: %d\n", 
¥›îtõs
->
vÆue
.
i32
);

87 
MQTT_PROP_MAXIMUM_PACKET_SIZE
:

88 
	`¥ötf
("\t\tMaximumÖackë size: %d\n", 
¥›îtõs
->
vÆue
.
i32
);

91 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
:

92 
	`¥ötf
("\t\tSubs¸ùti⁄ idítifõr: %d\n", 
¥›îtõs
->
vÆue
.
v¨öt
);

95 
MQTT_PROP_CONTENT_TYPE
:

96 
	`¥ötf
("\t\tC⁄ã¡Åy≥: %s\n", 
¥›îtõs
->
vÆue
.
s
.
v
);

98 
MQTT_PROP_RESPONSE_TOPIC
:

99 
	`¥ötf
("\t\tRe•⁄£Å›ic: %s\n", 
¥›îtõs
->
vÆue
.
s
.
v
);

101 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
:

102 
	`¥ötf
("\t\tAssig√d clõ¡ idítifõr: %s\n", 
¥›îtõs
->
vÆue
.
s
.
v
);

104 
MQTT_PROP_AUTHENTICATION_METHOD
:

105 
	`¥ötf
("\t\tAuthítiˇti⁄ mëhod: %s\n", 
¥›îtõs
->
vÆue
.
s
.
v
);

107 
MQTT_PROP_RESPONSE_INFORMATION
:

108 
	`¥ötf
("\t\tRe•⁄£ inf‹m©i⁄: %s\n", 
¥›îtõs
->
vÆue
.
s
.
v
);

110 
MQTT_PROP_SERVER_REFERENCE
:

111 
	`¥ötf
("\t\tSîvîÑe„ªn˚: %s\n", 
¥›îtõs
->
vÆue
.
s
.
v
);

113 
MQTT_PROP_REASON_STRING
:

114 
	`¥ötf
("\t\tRós⁄ såög: %s\n", 
¥›îtõs
->
vÆue
.
s
.
v
);

117 
MQTT_PROP_AUTHENTICATION_DATA
:

118 
	`¥ötf
("\t\tAuthentication data: ");

119 
i
=0; i<
¥›îtõs
->
vÆue
.
bö
.
Àn
; i++){

120 
	`¥ötf
("%02X", 
¥›îtõs
->
vÆue
.
bö
.
v
[
i
]);

122 
	`¥ötf
("\n");

124 
MQTT_PROP_CORRELATION_DATA
:

125 
	`¥ötf
("\t\tCorrelation data: ");

126 
i
=0; i<
¥›îtõs
->
vÆue
.
bö
.
Àn
; i++){

127 
	`¥ötf
("%02X", 
¥›îtõs
->
vÆue
.
bö
.
v
[
i
]);

129 
	`¥ötf
("\n");

132 
MQTT_PROP_USER_PROPERTY
:

133 
	`¥ötf
("\t\tU£∏¥›îty: %†, %s\n", 
¥›îtõs
->
«me
.
v
,Ör›îtõs->
vÆue
.
s
.v);

137 
	`¥ötf
("\t\tInvÆidÖr›îtyÅy≥: %d\n", 
¥›îtõs
->
idítifõr
);

141 
¥›îtõs
 =Ör›îtõs->
√xt
;

143 
	}
}

146 
	$¥öt__˛õ¡
(
P_˛õ¡
 *
chunk
, 
uöt32_t
 
Àngth
)

148 
	`¥ötf
("DB_CHUNK_CLIENT:\n");

149 
	`¥ötf
("\tLígth: %d\n", 
Àngth
);

150 
	`¥ötf
("\tClõ¡ ID: %s\n", 
chunk
->
˛õ¡_id
);

151 if(
chunk
->
u£∫ame
){

152 
	`¥ötf
("\tU£∫ame: %s\n", 
chunk
->
u£∫ame
);

154 if(
chunk
->
F
.
li°íî_p‹t
 > 0){

155 
	`¥ötf
("\tLi°íîÖ‹t: %u\n", 
chunk
->
F
.
li°íî_p‹t
);

157 
	`¥ötf
("\tLa° MID: %d\n", 
chunk
->
F
.
œ°_mid
);

158 
	`¥ötf
("\tSessi⁄ÉxpúyÅime: %" 
PRIu64
 "\n", 
chunk
->
F
.
£ssi⁄_expúy_time
);

159 
	`¥ötf
("\tSessi⁄Éxpúy i¡îvÆ: %u\n", 
chunk
->
F
.
£ssi⁄_expúy_öãrvÆ
);

160 
	}
}

163 
	$¥öt__˛õ¡_msg
(
P_˛õ¡_msg
 *
chunk
, 
uöt32_t
 
Àngth
)

165 
	`¥ötf
("DB_CHUNK_CLIENT_MSG:\n");

166 
	`¥ötf
("\tLígth: %d\n", 
Àngth
);

167 
	`¥ötf
("\tClõ¡ ID: %s\n", 
chunk
->
˛õ¡_id
);

168 
	`¥ötf
("\tSt‹êID: %" 
PRIu64
 "\n", 
chunk
->
F
.
°‹e_id
);

169 
	`¥ötf
("\tMID: %d\n", 
chunk
->
F
.
mid
);

170 
	`¥ötf
("\tQoS: %d\n", 
chunk
->
F
.
qos
);

171 
	`¥ötf
("\tRëaö: %d\n", (
chunk
->
F
.
ªèö_dup
&0xF0)>>4);

172 
	`¥ötf
("\tDúe˘i⁄: %d\n", 
chunk
->
F
.
dúe˘i⁄
);

173 
	`¥ötf
("\tSèã: %d\n", 
chunk
->
F
.
°©e
);

174 
	`¥ötf
("\tDup: %d\n", 
chunk
->
F
.
ªèö_dup
&0x0F);

175 
	`¥öt__¥›îtõs
(
chunk
->
¥›îtõs
);

176 
	}
}

179 
	$¥öt__msg_°‹e
(
P_msg_°‹e
 *
chunk
, 
uöt32_t
 
Àngth
)

181 
uöt8_t
 *
∑ylﬂd
;

183 
	`¥ötf
("DB_CHUNK_MSG_STORE:\n");

184 
	`¥ötf
("\tLígth: %d\n", 
Àngth
);

185 
	`¥ötf
("\tSt‹êID: %" 
PRIu64
 "\n", 
chunk
->
F
.
°‹e_id
);

188 
	`¥ötf
("\tSour˚ P‹t: %d\n", 
chunk
->
F
.
sour˚_p‹t
);

189 
	`¥ötf
("\tSour˚ MID: %d\n", 
chunk
->
F
.
sour˚_mid
);

190 
	`¥ötf
("\tT›ic: %s\n", 
chunk
->
t›ic
);

191 
	`¥ötf
("\tQoS: %d\n", 
chunk
->
F
.
qos
);

192 
	`¥ötf
("\tRëaö: %d\n", 
chunk
->
F
.
ªèö
);

193 
	`¥ötf
("\tPaylﬂd Lígth: %d\n", 
chunk
->
F
.
∑ylﬂdÀn
);

194 
	`¥ötf
("\tExpúy Time: %" 
PRIu64
 "\n", 
chunk
->
F
.
expúy_time
);

196 
∑ylﬂd
 = 
chunk
->payload;

197 if(
chunk
->
F
.
∑ylﬂdÀn
 < 256){

199 if(
	`mosquôto_vÆid©e_utf8
((*)
∑ylﬂd
, (
uöt16_t
)
chunk
->
F
.
∑ylﬂdÀn
Ë=
MOSQ_ERR_SUCCESS
){

200 
	`¥ötf
("\tPaylﬂd: %s\n", 
∑ylﬂd
);

203 
	`¥öt__¥›îtõs
(
chunk
->
¥›îtõs
);

204 
	}
}

207 
	$¥öt__sub
(
P_sub
 *
chunk
, 
uöt32_t
 
Àngth
)

209 
	`¥ötf
("DB_CHUNK_SUB:\n");

210 
	`¥ötf
("\tLígth: %u\n", 
Àngth
);

211 
	`¥ötf
("\tClõ¡ ID: %s\n", 
chunk
->
˛õ¡_id
);

212 
	`¥ötf
("\tT›ic: %s\n", 
chunk
->
t›ic
);

213 
	`¥ötf
("\tQoS: %d\n", 
chunk
->
F
.
qos
);

214 
	`¥ötf
("\tSubs¸ùti⁄ ID: %d\n", 
chunk
->
F
.
idítifõr
);

215 
	`¥ötf
("\tO±i⁄s: 0x%02X\n", 
chunk
->
F
.
›ti⁄s
);

216 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/apps/db_dump/stubs.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

4 
	~"misc_mosq.h
"

5 
	~"mosquôto_brokî_öã∫Æ.h
"

6 
	~"mosquôto_öã∫Æ.h
"

7 
	~"utû_mosq.h
"

9 #i‚de‡
UNUSED


10 
	#UNUSED
(
A
Ë()(A)

	)

13 
mosquôto
 *
	$c⁄ãxt__öô
(
mosq_sock_t
 
sock
)

15 
	`UNUSED
(
sock
);

17  
NULL
;

18 
	}
}

20 
	$c⁄ãxt__add_to_by_id
(
mosquôto
 *
c⁄ãxt
)

22 
	`UNUSED
(
c⁄ãxt
);

23 
	}
}

25 
	$db__mesßge_°‹e
(c⁄° 
mosquôto
 *
sour˚
, 
mosquôto_msg_°‹e
 *
°‹ed
, 
uöt32_t
 
mesßge_expúy_öãrvÆ
, 
dbid_t
 
°‹e_id
, 
mosquôto_msg_‹igö
 
‹igö
)

27 
	`UNUSED
(
sour˚
);

28 
	`UNUSED
(
°‹ed
);

29 
	`UNUSED
(
mesßge_expúy_öãrvÆ
);

30 
	`UNUSED
(
°‹e_id
);

31 
	`UNUSED
(
‹igö
);

33 
	}
}

35 
	$db__msg_°‹e_ªf_öc
(
mosquôto_msg_°‹e
 *
°‹e
)

37 
	`UNUSED
(
°‹e
);

38 
	}
}

40 
	$h™dÀ__∑ckë
(
mosquôto
 *
c⁄ãxt
)

42 
	`UNUSED
(
c⁄ãxt
);

44 
	}
}

46 
	$log__¥ötf
(
mosquôto
 *
mosq
, 
Àvñ
, c⁄° *
fmt
, ...)

48 
	`UNUSED
(
mosq
);

49 
	`UNUSED
(
Àvñ
);

50 
	`UNUSED
(
fmt
);

52 
	}
}

54 
FILE
 *
	$mosquôto__f›í
(c⁄° *
∑th
, c⁄° *
mode
, 
boﬁ
 
ª°ri˘_ªad
)

56 
	`UNUSED
(
∑th
);

57 
	`UNUSED
(
mode
);

58 
	`UNUSED
(
ª°ri˘_ªad
);

59  
NULL
;

60 
	}
}

62 
mosquôto_˛õ¡_°©e
 
	$mosquôto__gë_°©e
(
mosquôto
 *
mosq
)

64 
	`UNUSED
(
mosq
);

65  
mosq_cs_√w
;

66 
	}
}

68 
	$mux__add_out
(
mosquôto
 *
mosq
)

70 
	`UNUSED
(
mosq
);

72 
	}
}

74 
	$mux__ªmove_out
(
mosquôto
 *
mosq
)

76 
	`UNUSED
(
mosq
);

78 
	}
}

80 
ssize_t
 
	$√t__ªad
(
mosquôto
 *
mosq
, *
buf
, 
size_t
 
cou¡
)

82 
	`UNUSED
(
mosq
);

83 
	`UNUSED
(
buf
);

84 
	`UNUSED
(
cou¡
);

86 
	}
}

88 
ssize_t
 
	$√t__wrôe
(
mosquôto
 *
mosq
, c⁄° *
buf
, 
size_t
 
cou¡
)

90 
	`UNUSED
(
mosq
);

91 
	`UNUSED
(
buf
);

92 
	`UNUSED
(
cou¡
);

94 
	}
}

96 
	$ªèö__°‹e
(c⁄° *
t›ic
, 
mosquôto_msg_°‹e
 *
°‹ed
, **
•lô_t›ics
)

98 
	`UNUSED
(
t›ic
);

99 
	`UNUSED
(
°‹ed
);

100 
	`UNUSED
(
•lô_t›ics
);

102 
	}
}

104 
	$sub__add
(
mosquôto
 *
c⁄ãxt
, c⁄° *
sub
, 
uöt8_t
 
qos
, 
uöt32_t
 
idítifõr
, 
›ti⁄s
, 
mosquôto__subhõr
 **
roŸ
)

106 
	`UNUSED
(
c⁄ãxt
);

107 
	`UNUSED
(
sub
);

108 
	`UNUSED
(
qos
);

109 
	`UNUSED
(
idítifõr
);

110 
	`UNUSED
(
›ti⁄s
);

111 
	`UNUSED
(
roŸ
);

113 
	}
}

115 
	$sub__mesßges_queue
(c⁄° *
sour˚_id
, c⁄° *
t›ic
, 
uöt8_t
 
qos
, 
ªèö
, 
mosquôto_msg_°‹e
 **
°‹ed
)

117 
	`UNUSED
(
sour˚_id
);

118 
	`UNUSED
(
t›ic
);

119 
	`UNUSED
(
qos
);

120 
	`UNUSED
(
ªèö
);

121 
	`UNUSED
(
°‹ed
);

123 
	}
}

125 
	$kì∑live__upd©e
(
mosquôto
 *
c⁄ãxt
)

127 
	`UNUSED
(
c⁄ãxt
);

129 
	}
}

131 
	$db__msg_add_to_öÊight_°©s
(
mosquôto_msg_d©a
 *
msg_d©a
, 
mosquôto_˛õ¡_msg
 *
msg
)

133 
	`UNUSED
(
msg_d©a
);

134 
	`UNUSED
(
msg
);

135 
	}
}

137 
	$db__msg_add_to_queued_°©s
(
mosquôto_msg_d©a
 *
msg_d©a
, 
mosquôto_˛õ¡_msg
 *
msg
)

139 
	`UNUSED
(
msg_d©a
);

140 
	`UNUSED
(
msg
);

141 
	}
}

143 
	$£ssi⁄_expúy__add_‰om_≥rsi°í˚
(
mosquôto
 *
c⁄ãxt
, 
time_t
 
expúy_time
)

145 
	`UNUSED
(
c⁄ãxt
);

146 
	`UNUSED
(
expúy_time
);

148 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/client.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<°d¨g.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<time.h
>

29 
	~<mosquôto.h
>

30 
	~<mqâ_¥Ÿocﬁ.h
>

31 
	~"mosquôto_˘æ.h
"

33 
	grun
 = 1;

35 
	$⁄_mesßge
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
msg
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

37 
mosq_˘æ
 *
˘æ
 = 
obj
;

39 
	`UNUSED
(
¥›îtõs
);

41 if(
˘æ
->
∑ylﬂd_ˇŒback
){

42 
˘æ
->
	`∑ylﬂd_ˇŒback
(˘æ, 
msg
->
∑ylﬂdÀn
, msg->
∑ylﬂd
);

45 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
NULL
);

46 
run
 = 0;

47 
	}
}

50 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

52 
	`UNUSED
(
obj
);

53 
	`UNUSED
(
mid
);

54 
	`UNUSED
(
¥›îtõs
);

56 if(
ªas⁄_code
 > 127){

57 
	`Ârötf
(
°dîr
, "PublishÉº‹: %s\n", 
	`mosquôto_ªas⁄_°rög
(
ªas⁄_code
));

58 
run
 = 0;

59 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
NULL
);

61 
	}
}

64 
	$⁄_subs¸ibe
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

66 
mosq_˘æ
 *
˘æ
 = 
obj
;

68 
	`UNUSED
(
mid
);

69 
	`UNUSED
(
¥›îtõs
);

71 if(
qos_cou¡
 == 1){

72 if(
gø¡ed_qos
[0] < 128){

74 
	`mosquôto_publish
(
mosq
, 
NULL
, 
˘æ
->
ªque°_t›ic
, ()
	`°æí
(˘æ->
∑ylﬂd
), cål->∑ylﬂd, cål->
cfg
.
qos
, 0);

75 
	`‰ì
(
˘æ
->
ªque°_t›ic
);

76 
˘æ
->
ªque°_t›ic
 = 
NULL
;

77 
	`‰ì
(
˘æ
->
∑ylﬂd
);

78 
˘æ
->
∑ylﬂd
 = 
NULL
;

80 if(
˘æ
->
cfg
.
¥Ÿocﬁ_vîsi⁄
 =
MQTT_PROTOCOL_V5
){

81 
	`Ârötf
(
°dîr
, "Subs¸ibêîr‹: %s\n", 
	`mosquôto_ªas⁄_°rög
(
gø¡ed_qos
[0]));

83 
	`Ârötf
(
°dîr
, "SubscribeÉrror: SubscriptionÑefused.\n");

85 
run
 = 0;

86 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
NULL
);

89 
run
 = 0;

90 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
NULL
);

92 
	}
}

95 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
ªas⁄_code
, 
Êags
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

97 
mosq_˘æ
 *
˘æ
 = 
obj
;

99 
	`UNUSED
(
Êags
);

100 
	`UNUSED
(
¥›îtõs
);

102 if(
ªas⁄_code
 == 0){

103 if(
˘æ
->
ª•⁄£_t›ic
){

104 
	`mosquôto_subs¸ibe
(
mosq
, 
NULL
, 
˘æ
->
ª•⁄£_t›ic
, cål->
cfg
.
qos
);

105 
	`‰ì
(
˘æ
->
ª•⁄£_t›ic
);

106 
˘æ
->
ª•⁄£_t›ic
 = 
NULL
;

109 if(
˘æ
->
cfg
.
¥Ÿocﬁ_vîsi⁄
 =
MQTT_PROTOCOL_V5
){

110 if(
ªas⁄_code
 =
MQTT_RC_UNSUPPORTED_PROTOCOL_VERSION
){

111 
	`Ârötf
(
°dîr
, "C⁄√˘i⁄Éº‹: %s. Try c⁄√˘ögÅÿ™ MQTT v5 brokî, o∏u£ MQTT v3.x mode.\n", 
	`mosquôto_ªas⁄_°rög
(
ªas⁄_code
));

113 
	`Ârötf
(
°dîr
, "C⁄√˘i⁄Éº‹: %s\n", 
	`mosquôto_ªas⁄_°rög
(
ªas⁄_code
));

116 
	`Ârötf
(
°dîr
, "C⁄√˘i⁄Éº‹: %s\n", 
	`mosquôto_c⁄«ck_°rög
(
ªas⁄_code
));

118 
run
 = 0;

119 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
NULL
);

121 
	}
}

124 
	$˛õ¡_ªque°_ª•⁄£
(
mosq_˘æ
 *
˘æ
)

126 
mosquôto
 *
mosq
;

127 
rc
;

128 
time_t
 
°¨t
;

130 if(
˘æ
->
cfg
.
ˇfûe
 =
NULL
 && cål->cfg.
ˇ∑th
 == NULL){

131 
	`Ârötf
(
°dîr
, "Warning: YouáreÑunning mosquitto_ctrl withoutÉncryption.\nThis meansáll ofÅhe configuration changes youáre makingáre visible onÅheÇetwork, includingÖasswords.\n\n");

134 
	`mosquôto_lib_öô
();

136 
mosq
 = 
	`mosquôto_√w
(
˘æ
->
cfg
.
id
, 
åue
, ctrl);

137 
rc
 = 
	`˛õ¡_›ts_£t
(
mosq
, &
˘æ
->
cfg
);

138 if(
rc
Ë
˛ónup
;

140 
	`mosquôto_c⁄√˘_v5_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

141 
	`mosquôto_subs¸ibe_v5_ˇŒback_£t
(
mosq
, 
⁄_subs¸ibe
);

142 
	`mosquôto_publish_v5_ˇŒback_£t
(
mosq
, 
⁄_publish
);

143 
	`mosquôto_mesßge_v5_ˇŒback_£t
(
mosq
, 
⁄_mesßge
);

145 
rc
 = 
	`˛õ¡_c⁄√˘
(
mosq
, &
˘æ
->
cfg
);

146 if(
rc
Ë
˛ónup
;

148 
°¨t
 = 
	`time
(
NULL
);

149 
run
 && 
°¨t
+10 > 
	`time
(
NULL
)){

150 
	`mosquôto_lo›
(
mosq
, -1, 1);

153 
˛ónup
:

154 
	`mosquôto_de°roy
(
mosq
);

155 
	`mosquôto_lib_˛ónup
();

156  
rc
;

157 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/dynsec.c

18 
	~"c⁄fig.h
"

20 
	~<cjs⁄/cJSON.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

25 #i‚de‡
WIN32


26 
	~<°rögs.h
>

29 
	~"mosquôto_˘æ.h
"

30 
	~"mosquôto.h
"

31 
	~"∑ssw‹d_mosq.h
"

32 
	~"gë_∑ssw‹d.h
"

34 
	$dyn£c__¥öt_ußge
()

36 
	`¥ötf
("\nDynamic Security module\n");

37 
	`¥ötf
("=======================\n");

38 
	`¥ötf
("\nInitialisation\n--------------\n");

39 
	`¥ötf
("CreateáÇew configuration file withánádmin user:\n");

40 
	`¥ötf
(" mosquitto_ctrl dynsec init <new-config-file> <admin-username> [admin-password]\n");

42 
	`¥ötf
("\nGeneral\n-------\n");

43 
	`¥ötf
("Get ACL defaultáccess: getDefaultACLAccess\n");

44 
	`¥ötf
("Set ACL defaultáccess: setDefaultACLAccess <acltype>állow|deny\n");

45 
	`¥ötf
("Get group foránonymous clients: getAnonymousGroup\n");

46 
	`¥ötf
("Set group foránonymous clients: setAnonymousGroup <groupname>\n");

48 
	`¥ötf
("\nClients\n-------\n");

49 
	`¥ötf
("CreateáÇew client: createClient <username> [-c clientid] [-pÖassword]\n");

50 
	`¥ötf
("Deleteá client: deleteClient <username>\n");

51 
	`¥ötf
("Setá clientÖassword: setClientPassword <username> [password]\n");

52 
	`¥ötf
("Setá client id: setClientId <username> [clientid]\n");

53 
	`¥ötf
("AddáÑoleÅoá client:áddClientRole <username> <rolename> [priority]\n");

54 
	`¥ötf
(" HigherÖriority (largerÇumerical value)ÑolesáreÉvaluated first.\n");

55 
	`¥ötf
("RemoveÑole fromá client:ÑemoveClientRole <username> <rolename>\n");

56 
	`¥ötf
("Get client information: getClient <username>\n");

57 
	`¥ötf
("Listáll clients:ÜistClients [count [offset]]\n");

58 
	`¥ötf
("Enable client:ÉnableClient <username>\n");

59 
	`¥ötf
("Disable client: disableClient <username>\n");

61 
	`¥ötf
("\nGroups\n------\n");

62 
	`¥ötf
("CreateáÇew group: createGroup <groupname>\n");

63 
	`¥ötf
("Deleteá group: deleteGroup <groupname>\n");

64 
	`¥ötf
("AddáÑoleÅoá group:áddGroupRole <groupname> <rolename> [priority]\n");

65 
	`¥ötf
(" HigherÖriority (largerÇumerical value)ÑolesáreÉvaluated first.\n");

66 
	`¥ötf
("RemoveÑole fromá group:ÑemoveGroupRole <groupname> <rolename>\n");

67 
	`¥ötf
("Add clientÅoá group:áddGroupClient <groupname> <username> [priority]\n");

68 
	`¥ötf
(" Priority setsÅhe groupÖriority forÅhe given client only.\n");

69 
	`¥ötf
(" HigherÖriority (largerÇumerical value) groupsáreÉvaluated first.\n");

70 
	`¥ötf
("Remove client fromá group:ÑemoveGroupClient <groupname> <username>\n");

71 
	`¥ötf
("Get group information: getGroup <groupname>\n");

72 
	`¥ötf
("Listáll groups:ÜistGroups [count [offset]]\n");

74 
	`¥ötf
("\nRoles\n------\n");

75 
	`¥ötf
("CreateáÇewÑole: createRole <rolename>\n");

76 
	`¥ötf
("DeleteáÑole: deleteRole <rolename>\n");

77 
	`¥ötf
("Addán ACLÅoáÑole:áddRoleACL <rolename> <aclspec> [priority]\n");

78 
	`¥ötf
(" HigherÖriority (largerÇumerical value) ACLsáreÉvaluated first.\n");

79 
	`¥ötf
("Remove ACL fromáÑole:ÑemoveRoleACL <rolename> <aclspec>\n");

80 
	`¥ötf
("GetÑole information: getRole <rolename>\n");

81 
	`¥ötf
("ListállÑoles:ÜistRoles [count [offset]]\n");

82 
	`¥ötf
("\naclspec: <acltype> <topicFilter>állow|deny\n");

83 
	`¥ötf
("acltype:ÖublishClientSend|publishClientReceive\n");

84 
	`¥ötf
(" |subscribeLiteral|subscribePattern\n");

85 
	`¥ötf
(" |unsubscribeLiteral|unsubscribePattern\n");

86 
	`¥ötf
("\nFor more information see:\n");

87 
	`¥ötf
(" https://mosquitto.org/documentation/dynamic-security/\n\n");

88 
	}
}

90 
cJSON
 *
	$cJSON_AddI¡ToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, 
numbî
)

92 
buf
[30];

94 
	`¢¥ötf
(
buf
, (buf), "%d", 
numbî
);

95  
	`cJSON_AddRawToObje˘
(
obje˘
, 
«me
, 
buf
);

96 
	}
}

104 
	$¥öt_li°
(
cJSON
 *
j_ª•⁄£
, c⁄° *
¨øy«me
, c⁄° *
key«me
)

106 
cJSON
 *
j_d©a
, *
j_¨øy
, *
j_ñem
, *
j_«me
;

108 
j_d©a
 = 
	`cJSON_GëObje˘Iãm
(
j_ª•⁄£
, "data");

109 if(
j_d©a
 =
NULL
){

110 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

114 
j_¨øy
 = 
	`cJSON_GëObje˘Iãm
(
j_d©a
, 
¨øy«me
);

115 if(
j_¨øy
 =
NULL
 || !
	`cJSON_IsAºay
(j_array)){

116 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

120 
	`cJSON_AºayF‹Each
(
j_ñem
, 
j_¨øy
){

121 if(
	`cJSON_IsObje˘
(
j_ñem
)){

122 
j_«me
 = 
	`cJSON_GëObje˘Iãm
(
j_ñem
, 
key«me
);

123 if(
j_«me
 && 
	`cJSON_IsSåög
(j_name)){

124 
	`¥ötf
("%s\n", 
j_«me
->
vÆue°rög
);

126 }if(
	`cJSON_IsSåög
(
j_ñem
)){

127 
	`¥ötf
("%s\n", 
j_ñem
->
vÆue°rög
);

130 
	}
}

133 
	$¥öt_rﬁes
(
cJSON
 *
j_rﬁes
, 
size_t
 
¶í
)

135 
boﬁ
 
fú°
;

136 
cJSON
 *
j_ñem
, *
jtmp
;

138 if(
j_rﬁes
 && 
	`cJSON_IsAºay
(j_roles)){

139 
fú°
 = 
åue
;

140 
	`cJSON_AºayF‹Each
(
j_ñem
, 
j_rﬁes
){

141 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_ñem
, "rolename");

142 if(
jtmp
 && 
	`cJSON_IsSåög
(jtmp)){

143 if(
fú°
){

144 
fú°
 = 
Ál£
;

145 
	`¥ötf
("%-*†%s", ()
¶í
, "Rﬁes:", 
jtmp
->
vÆue°rög
);

147 
	`¥ötf
("%-*†%s", ()
¶í
, "", 
jtmp
->
vÆue°rög
);

149 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_ñem
, "priority");

150 if(
jtmp
 && 
	`cJSON_IsNumbî
(jtmp)){

151 
	`¥ötf
(" (¥i‹ôy: %d)", ()
jtmp
->
vÆuedoubÀ
);

153 
	`¥ötf
(" (priority: -1)");

155 
	`¥ötf
("\n");

159 
	`¥ötf
("Roles:\n");

161 
	}
}

164 
	$¥öt_˛õ¡
(
cJSON
 *
j_ª•⁄£
)

166 
cJSON
 *
j_d©a
, *
j_˛õ¡
, *
j_¨øy
, *
j_ñem
, *
jtmp
;

167 
boﬁ
 
fú°
;

169 
j_d©a
 = 
	`cJSON_GëObje˘Iãm
(
j_ª•⁄£
, "data");

170 if(
j_d©a
 =
NULL
 || !
	`cJSON_IsObje˘
(j_data)){

171 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

175 
j_˛õ¡
 = 
	`cJSON_GëObje˘Iãm
(
j_d©a
, "client");

176 if(
j_˛õ¡
 =
NULL
 || !
	`cJSON_IsObje˘
(j_client)){

177 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

181 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "username");

182 if(
jtmp
 =
NULL
 || !
	`cJSON_IsSåög
(jtmp)){

183 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

186 
	`¥ötf
("U£∫ame: %s\n", 
jtmp
->
vÆue°rög
);

188 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "clientid");

189 if(
jtmp
 && 
	`cJSON_IsSåög
(jtmp)){

190 
	`¥ötf
("Clõ¡id: %s\n", 
jtmp
->
vÆue°rög
);

192 
	`¥ötf
("Clientid:\n");

195 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "disabled");

196 if(
jtmp
 && 
	`cJSON_IsBoﬁ
(jtmp)){

197 
	`¥ötf
("DißbÀd: %s\n", 
	`cJSON_IsTrue
(
jtmp
)?"true":"false");

200 
j_¨øy
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "roles");

201 
	`¥öt_rﬁes
(
j_¨øy
, 
	`°æí
("Username:"));

203 
j_¨øy
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "groups");

204 if(
j_¨øy
 && 
	`cJSON_IsAºay
(j_array)){

205 
fú°
 = 
åue
;

206 
	`cJSON_AºayF‹Each
(
j_ñem
, 
j_¨øy
){

207 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_ñem
, "groupname");

208 if(
jtmp
 && 
	`cJSON_IsSåög
(jtmp)){

209 if(
fú°
){

210 
	`¥ötf
("Groups: %s", 
jtmp
->
vÆue°rög
);

211 
fú°
 = 
Ál£
;

213 
	`¥ötf
(" %s", 
jtmp
->
vÆue°rög
);

215 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_ñem
, "priority");

216 if(
jtmp
 && 
	`cJSON_IsNumbî
(jtmp)){

217 
	`¥ötf
(" (¥i‹ôy: %d)", ()
jtmp
->
vÆuedoubÀ
);

219 
	`¥ötf
(" (priority: -1)");

221 
	`¥ötf
("\n");

225 
	`¥ötf
("Groups:\n");

227 
	}
}

230 
	$¥öt_group
(
cJSON
 *
j_ª•⁄£
)

232 
cJSON
 *
j_d©a
, *
j_group
, *
j_¨øy
, *
j_ñem
, *
jtmp
;

233 
boﬁ
 
fú°
;

235 
j_d©a
 = 
	`cJSON_GëObje˘Iãm
(
j_ª•⁄£
, "data");

236 if(
j_d©a
 =
NULL
 || !
	`cJSON_IsObje˘
(j_data)){

237 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

241 
j_group
 = 
	`cJSON_GëObje˘Iãm
(
j_d©a
, "group");

242 if(
j_group
 =
NULL
 || !
	`cJSON_IsObje˘
(j_group)){

243 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

247 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_group
, "groupname");

248 if(
jtmp
 =
NULL
 || !
	`cJSON_IsSåög
(jtmp)){

249 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

252 
	`¥ötf
("Grou≤ame: %s\n", 
jtmp
->
vÆue°rög
);

254 
j_¨øy
 = 
	`cJSON_GëObje˘Iãm
(
j_group
, "roles");

255 
	`¥öt_rﬁes
(
j_¨øy
, 
	`°æí
("Groupname:"));

257 
j_¨øy
 = 
	`cJSON_GëObje˘Iãm
(
j_group
, "clients");

258 if(
j_¨øy
 && 
	`cJSON_IsAºay
(j_array)){

259 
fú°
 = 
åue
;

260 
	`cJSON_AºayF‹Each
(
j_ñem
, 
j_¨øy
){

261 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_ñem
, "username");

262 if(
jtmp
 && 
	`cJSON_IsSåög
(jtmp)){

263 if(
fú°
){

264 
fú°
 = 
Ál£
;

265 
	`¥ötf
("Clõ¡s: %s\n", 
jtmp
->
vÆue°rög
);

267 
	`¥ötf
(" %s\n", 
jtmp
->
vÆue°rög
);

272 
	}
}

275 
	$¥öt_rﬁe
(
cJSON
 *
j_ª•⁄£
)

277 
cJSON
 *
j_d©a
, *
j_rﬁe
, *
j_¨øy
, *
j_ñem
, *
jtmp
;

278 
boﬁ
 
fú°
;

280 
j_d©a
 = 
	`cJSON_GëObje˘Iãm
(
j_ª•⁄£
, "data");

281 if(
j_d©a
 =
NULL
 || !
	`cJSON_IsObje˘
(j_data)){

282 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

286 
j_rﬁe
 = 
	`cJSON_GëObje˘Iãm
(
j_d©a
, "role");

287 if(
j_rﬁe
 =
NULL
 || !
	`cJSON_IsObje˘
(j_role)){

288 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

292 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_rﬁe
, "rolename");

293 if(
jtmp
 =
NULL
 || !
	`cJSON_IsSåög
(jtmp)){

294 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

297 
	`¥ötf
("Rﬁíame: %s\n", 
jtmp
->
vÆue°rög
);

299 
j_¨øy
 = 
	`cJSON_GëObje˘Iãm
(
j_rﬁe
, "acls");

300 if(
j_¨øy
 && 
	`cJSON_IsAºay
(j_array)){

301 
fú°
 = 
åue
;

302 
	`cJSON_AºayF‹Each
(
j_ñem
, 
j_¨øy
){

303 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_ñem
, "acltype");

304 if(
jtmp
 && 
	`cJSON_IsSåög
(jtmp)){

305 if(
fú°
){

306 
fú°
 = 
Ál£
;

307 
	`¥ötf
("ACLs: %-20s", 
jtmp
->
vÆue°rög
);

309 
	`¥ötf
(" %-20s", 
jtmp
->
vÆue°rög
);

312 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_ñem
, "allow");

313 if(
jtmp
 && 
	`cJSON_IsBoﬁ
(jtmp)){

314 
	`¥ötf
(" : %s", 
	`cJSON_IsTrue
(
jtmp
)?"allow":"deny ");

316 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_ñem
, "topic");

317 if(
jtmp
 && 
	`cJSON_IsSåög
(jtmp)){

318 
	`¥ötf
(" : %s", 
jtmp
->
vÆue°rög
);

320 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_ñem
, "priority");

321 if(
jtmp
 && 
	`cJSON_IsNumbî
(jtmp)){

322 
	`¥ötf
(" (¥i‹ôy: %d)", ()
jtmp
->
vÆuedoubÀ
);

324 
	`¥ötf
(" (priority: -1)");

326 
	`¥ötf
("\n");

330 
	}
}

333 
	$¥öt_™⁄ymous_group
(
cJSON
 *
j_ª•⁄£
)

335 
cJSON
 *
j_d©a
, *
j_group
, *
j_grou≤ame
;

337 
j_d©a
 = 
	`cJSON_GëObje˘Iãm
(
j_ª•⁄£
, "data");

338 if(
j_d©a
 =
NULL
 || !
	`cJSON_IsObje˘
(j_data)){

339 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

343 
j_group
 = 
	`cJSON_GëObje˘Iãm
(
j_d©a
, "group");

344 if(
j_group
 =
NULL
 || !
	`cJSON_IsObje˘
(j_group)){

345 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

349 
j_grou≤ame
 = 
	`cJSON_GëObje˘Iãm
(
j_group
, "groupname");

350 if(
j_grou≤ame
 =
NULL
 || !
	`cJSON_IsSåög
(j_groupname)){

351 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

354 
	`¥ötf
("%s\n", 
j_grou≤ame
->
vÆue°rög
);

355 
	}
}

357 
	$¥öt_deÁu…_a˛_ac˚ss
(
cJSON
 *
j_ª•⁄£
)

359 
cJSON
 *
j_d©a
, *
j_a˛s
, *
j_a˛
, *
j_a˛ty≥
, *
j_Ælow
;

361 
j_d©a
 = 
	`cJSON_GëObje˘Iãm
(
j_ª•⁄£
, "data");

362 if(
j_d©a
 =
NULL
 || !
	`cJSON_IsObje˘
(j_data)){

363 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

367 
j_a˛s
 = 
	`cJSON_GëObje˘Iãm
(
j_d©a
, "acls");

368 if(
j_a˛s
 =
NULL
 || !
	`cJSON_IsAºay
(j_acls)){

369 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

373 
	`cJSON_AºayF‹Each
(
j_a˛
, 
j_a˛s
){

374 
j_a˛ty≥
 = 
	`cJSON_GëObje˘Iãm
(
j_a˛
, "acltype");

375 
j_Ælow
 = 
	`cJSON_GëObje˘Iãm
(
j_a˛
, "allow");

377 if(
j_a˛ty≥
 =
NULL
 || !
	`cJSON_IsSåög
(j_acltype)

378 || 
j_Ælow
 =
NULL
 || !
	`cJSON_IsBoﬁ
(j_allow)

381 
	`Ârötf
(
°dîr
, "Error: InvalidÑesponse from server.\n");

384 
	`¥ötf
("%-20†: %s\n", 
j_a˛ty≥
->
vÆue°rög
, 
	`cJSON_IsTrue
(
j_Ælow
)?"allow":"deny");

386 
	}
}

388 
	$dyn£c__∑ylﬂd_ˇŒback
(
mosq_˘æ
 *
˘æ
, 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
)

390 
cJSON
 *
åì
, *
j_ª•⁄£s
, *
j_ª•⁄£
, *
j_comm™d
, *
j_îr‹
;

392 
	`UNUSED
(
˘æ
);

394 #i‡
CJSON_VERSION_FULL
 < 1007013

395 
	`UNUSED
(
∑ylﬂdÀn
);

396 
åì
 = 
	`cJSON_P¨£
(
∑ylﬂd
);

398 
åì
 = 
	`cJSON_P¨£WôhLígth
(
∑ylﬂd
, (
size_t
)
∑ylﬂdÀn
);

400 if(
åì
 =
NULL
){

401 
	`Ârötf
(
°dîr
, "Error: PayloadÇot JSON.\n");

405 
j_ª•⁄£s
 = 
	`cJSON_GëObje˘Iãm
(
åì
, "responses");

406 if(
j_ª•⁄£s
 =
NULL
 || !
	`cJSON_IsAºay
(j_responses)){

407 
	`Ârötf
(
°dîr
, "Error: Payload missing data.\n");

408 
	`cJSON_Dñëe
(
åì
);

412 
j_ª•⁄£
 = 
	`cJSON_GëAºayIãm
(
j_ª•⁄£s
, 0);

413 if(
j_ª•⁄£
 =
NULL
){

414 
	`Ârötf
(
°dîr
, "Error: Payload missing data.\n");

415 
	`cJSON_Dñëe
(
åì
);

419 
j_comm™d
 = 
	`cJSON_GëObje˘Iãm
(
j_ª•⁄£
, "command");

420 if(
j_comm™d
 =
NULL
){

421 
	`Ârötf
(
°dîr
, "Error: Payload missing data.\n");

422 
	`cJSON_Dñëe
(
åì
);

426 
j_îr‹
 = 
	`cJSON_GëObje˘Iãm
(
j_ª•⁄£
, "error");

427 if(
j_îr‹
){

428 
	`Ârötf
(
°dîr
, "%s: Eº‹: %s\n", 
j_comm™d
->
vÆue°rög
, 
j_îr‹
->valuestring);

430 if(!
	`°rˇ£cmp
(
j_comm™d
->
vÆue°rög
, "listClients")){

431 
	`¥öt_li°
(
j_ª•⁄£
, "clients", "username");

432 }if(!
	`°rˇ£cmp
(
j_comm™d
->
vÆue°rög
, "listGroups")){

433 
	`¥öt_li°
(
j_ª•⁄£
, "groups", "groupname");

434 }if(!
	`°rˇ£cmp
(
j_comm™d
->
vÆue°rög
, "listRoles")){

435 
	`¥öt_li°
(
j_ª•⁄£
, "roles", "rolename");

436 }if(!
	`°rˇ£cmp
(
j_comm™d
->
vÆue°rög
, "getClient")){

437 
	`¥öt_˛õ¡
(
j_ª•⁄£
);

438 }if(!
	`°rˇ£cmp
(
j_comm™d
->
vÆue°rög
, "getGroup")){

439 
	`¥öt_group
(
j_ª•⁄£
);

440 }if(!
	`°rˇ£cmp
(
j_comm™d
->
vÆue°rög
, "getRole")){

441 
	`¥öt_rﬁe
(
j_ª•⁄£
);

442 }if(!
	`°rˇ£cmp
(
j_comm™d
->
vÆue°rög
, "getDefaultACLAccess")){

443 
	`¥öt_deÁu…_a˛_ac˚ss
(
j_ª•⁄£
);

444 }if(!
	`°rˇ£cmp
(
j_comm™d
->
vÆue°rög
, "getAnonymousGroup")){

445 
	`¥öt_™⁄ymous_group
(
j_ª•⁄£
);

450 
	`cJSON_Dñëe
(
åì
);

451 
	}
}

459 
	$dyn£c__£t_deÁu…_a˛_ac˚ss
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

461 *
a˛ty≥
, *
ac˚ss
;

462 
boﬁ
 
b_ac˚ss
;

463 
cJSON
 *
j_a˛s
, *
j_a˛
;

465 if(
¨gc
 == 2){

466 
a˛ty≥
 = 
¨gv
[0];

467 
ac˚ss
 = 
¨gv
[1];

469  
MOSQ_ERR_INVAL
;

472 if(
	`°rˇ£cmp
(
a˛ty≥
, "publishClientSend")

473 && 
	`°rˇ£cmp
(
a˛ty≥
, "publishClientReceive")

474 && 
	`°rˇ£cmp
(
a˛ty≥
, "subscribe")

475 && 
	`°rˇ£cmp
(
a˛ty≥
, "unsubscribe")){

477  
MOSQ_ERR_INVAL
;

480 if(!
	`°rˇ£cmp
(
ac˚ss
, "allow")){

481 
b_ac˚ss
 = 
åue
;

482 }if(!
	`°rˇ£cmp
(
ac˚ss
, "deny")){

483 
b_ac˚ss
 = 
Ál£
;

485 
	`Ârötf
(
°dîr
, "Error:áccess must be \"allow\" or \"deny\".\n");

486  
MOSQ_ERR_INVAL
;

489 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "£tDeÁu…ACLAc˚ss"Ë=
NULL


490 || (
j_a˛s
 = 
	`cJSON_AddAºayToObje˘
(
j_comm™d
, "a˛s")Ë=
NULL


493  
MOSQ_ERR_NOMEM
;

496 
j_a˛
 = 
	`cJSON_Cª©eObje˘
();

497 if(
j_a˛
 =
NULL
){

498  
MOSQ_ERR_NOMEM
;

500 
	`cJSON_AddIãmToAºay
(
j_a˛s
, 
j_a˛
);

501 if(
	`cJSON_AddSåögToObje˘
(
j_a˛
, "a˛ty≥", 
a˛ty≥
Ë=
NULL


502 || 
	`cJSON_AddBoﬁToObje˘
(
j_a˛
, "Ælow", 
b_ac˚ss
Ë=
NULL


505  
MOSQ_ERR_NOMEM
;

508  
MOSQ_ERR_SUCCESS
;

509 
	}
}

511 
	$dyn£c__gë_deÁu…_a˛_ac˚ss
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

513 
	`UNUSED
(
¨gc
);

514 
	`UNUSED
(
¨gv
);

516 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "gëDeÁu…ACLAc˚ss"Ë=
NULL


519  
MOSQ_ERR_NOMEM
;

522  
MOSQ_ERR_SUCCESS
;

523 
	}
}

531 
cJSON
 *
	$öô_add_a˛_to_rﬁe
(
cJSON
 *
j_a˛s
, c⁄° *
ty≥
, c⁄° *
t›ic
)

533 
cJSON
 *
j_a˛
;

535 
j_a˛
 = 
	`cJSON_Cª©eObje˘
();

536 if(
j_a˛
 =
NULL
)  NULL;

538 if(
	`cJSON_AddSåögToObje˘
(
j_a˛
, "a˛ty≥", 
ty≥
Ë=
NULL


539 || 
	`cJSON_AddSåögToObje˘
(
j_a˛
, "t›ic", 
t›ic
Ë=
NULL


540 || 
	`cJSON_AddBoﬁToObje˘
(
j_a˛
, "Ælow", 
åue
Ë=
NULL


543 
	`cJSON_Dñëe
(
j_a˛
);

544  
NULL
;

546 
	`cJSON_AddIãmToAºay
(
j_a˛s
, 
j_a˛
);

547  
j_a˛
;

548 
	}
}

550 
cJSON
 *
	$öô_add_rﬁe
(c⁄° *
rﬁíame
)

552 
cJSON
 *
j_rﬁe
, *
j_a˛s
;

554 
j_rﬁe
 = 
	`cJSON_Cª©eObje˘
();

555 if(
j_rﬁe
 =
NULL
){

556  
NULL
;

558 if(
	`cJSON_AddSåögToObje˘
(
j_rﬁe
, "rﬁíame", 
rﬁíame
Ë=
NULL
){

559 
	`cJSON_Dñëe
(
j_rﬁe
);

560  
NULL
;

563 
j_a˛s
 = 
	`cJSON_Cª©eAºay
();

564 if(
j_a˛s
 =
NULL
){

565 
	`cJSON_Dñëe
(
j_rﬁe
);

566  
NULL
;

568 
	`cJSON_AddIãmToObje˘
(
j_rﬁe
, "a˛s", 
j_a˛s
);

569 if(
	`öô_add_a˛_to_rﬁe
(
j_a˛s
, "publishClõ¡Síd", "$CONTROL/dy«mic-£curôy/#"Ë=
NULL


570 || 
	`öô_add_a˛_to_rﬁe
(
j_a˛s
, "publishClõ¡Re˚ive", "$CONTROL/dy«mic-£curôy/#"Ë=
NULL


571 || 
	`öô_add_a˛_to_rﬁe
(
j_a˛s
, "subs¸ibeP©ã∫", "$CONTROL/dy«mic-£curôy/#"Ë=
NULL


572 || 
	`öô_add_a˛_to_rﬁe
(
j_a˛s
, "publishClõ¡Re˚ive", "$SYS/#"Ë=
NULL


573 || 
	`öô_add_a˛_to_rﬁe
(
j_a˛s
, "subs¸ibeP©ã∫", "$SYS/#"Ë=
NULL


574 || 
	`öô_add_a˛_to_rﬁe
(
j_a˛s
, "publishClõ¡Re˚ive", "#"Ë=
NULL


575 || 
	`öô_add_a˛_to_rﬁe
(
j_a˛s
, "subs¸ibeP©ã∫", "#"Ë=
NULL


576 || 
	`öô_add_a˛_to_rﬁe
(
j_a˛s
, "unsubs¸ibeP©ã∫", "#"Ë=
NULL


579 
	`cJSON_Dñëe
(
j_rﬁe
);

580  
NULL
;

582  
j_rﬁe
;

583 
	}
}

585 
cJSON
 *
	$öô_add_˛õ¡
(c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
, c⁄° *
rﬁíame
)

587 
cJSON
 *
j_˛õ¡
, *
j_rﬁes
, *
j_rﬁe
;

588 
mosquôto_pw
 
pw
;

589 *
ß…64
 = 
NULL
, *
hash64
 = NULL;

590 
buf
[10];

592 
	`mem£t
(&
pw
, 0, (pw));

593 
pw
.
hashty≥
 = 
pw_sha512_pbkdf2
;

595 if(
	`pw__hash
(
∑ssw‹d
, &
pw
, 
åue
, 
PW_DEFAULT_ITERATIONS
) != 0){

596  
NULL
;

598 if(
	`ba£64__ícode
(
pw
.
ß…
, ’w.ß…), &
ß…64
)

599 || 
	`ba£64__ícode
(
pw
.
∑ssw‹d_hash
, ’w.∑ssw‹d_hash), &
hash64
)

602 
	`Ârötf
(
°dîr
, "dynsec init: InternalÉrror whileÉncodingÖassword.\n");

603 
	`‰ì
(
ß…64
);

604 
	`‰ì
(
hash64
);

605  
NULL
;

608 
j_˛õ¡
 = 
	`cJSON_Cª©eObje˘
();

609 if(
j_˛õ¡
 =
NULL
){

610 
	`‰ì
(
ß…64
);

611 
	`‰ì
(
hash64
);

612  
NULL
;

615 
	`¢¥ötf
(
buf
, (buf), "%d", 
PW_DEFAULT_ITERATIONS
);

616 if(
	`cJSON_AddSåögToObje˘
(
j_˛õ¡
, "u£∫ame", 
u£∫ame
Ë=
NULL


617 || 
	`cJSON_AddSåögToObje˘
(
j_˛õ¡
, "ãxtName", "Dyn£¯admö u£r"Ë=
NULL


618 || 
	`cJSON_AddSåögToObje˘
(
j_˛õ¡
, "∑ssw‹d", 
hash64
Ë=
NULL


619 || 
	`cJSON_AddSåögToObje˘
(
j_˛õ¡
, "ß…", 
ß…64
Ë=
NULL


620 || 
	`cJSON_AddRawToObje˘
(
j_˛õ¡
, "ôî©i⁄s", 
buf
Ë=
NULL


623 
	`‰ì
(
ß…64
);

624 
	`‰ì
(
hash64
);

625 
	`cJSON_Dñëe
(
j_˛õ¡
);

626  
NULL
;

628 
	`‰ì
(
ß…64
);

629 
	`‰ì
(
hash64
);

631 
j_rﬁes
 = 
	`cJSON_Cª©eAºay
();

632 if(
j_rﬁes
 =
NULL
){

633 
	`cJSON_Dñëe
(
j_˛õ¡
);

634  
NULL
;

636 
	`cJSON_AddIãmToObje˘
(
j_˛õ¡
, "rﬁes", 
j_rﬁes
);

638 
j_rﬁe
 = 
	`cJSON_Cª©eObje˘
();

639 if(
j_rﬁe
 =
NULL
){

640 
	`cJSON_Dñëe
(
j_˛õ¡
);

641  
NULL
;

643 
	`cJSON_AddIãmToAºay
(
j_rﬁes
, 
j_rﬁe
);

644 if(
	`cJSON_AddSåögToObje˘
(
j_rﬁe
, "rﬁíame", 
rﬁíame
Ë=
NULL
){

645 
	`cJSON_Dñëe
(
j_˛õ¡
);

646  
NULL
;

649  
j_˛õ¡
;

650 
	}
}

652 
cJSON
 *
	$öô_¸óã
(c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
, c⁄° *
rﬁíame
)

654 
cJSON
 *
åì
, *
j_˛õ¡s
, *
j_˛õ¡
, *
j_rﬁes
, *
j_rﬁe
;

655 
cJSON
 *
j_deÁu…_ac˚ss
;

657 
åì
 = 
	`cJSON_Cª©eObje˘
();

658 if(
åì
 =
NULL
)  NULL;

660 if((
j_˛õ¡s
 = 
	`cJSON_AddAºayToObje˘
(
åì
, "˛õ¡s")Ë=
NULL


661 || (
j_rﬁes
 = 
	`cJSON_AddAºayToObje˘
(
åì
, "rﬁes")Ë=
NULL


662 || (
j_deÁu…_ac˚ss
 = 
	`cJSON_AddObje˘ToObje˘
(
åì
, "deÁu…ACLAc˚ss")Ë=
NULL


665 
	`cJSON_Dñëe
(
åì
);

666  
NULL
;

675 if(
	`cJSON_AddBoﬁToObje˘
(
j_deÁu…_ac˚ss
, "publishClõ¡Síd", 
Ál£
Ë=
NULL


676 || 
	`cJSON_AddBoﬁToObje˘
(
j_deÁu…_ac˚ss
, "publishClõ¡Re˚ive", 
åue
Ë=
NULL


677 || 
	`cJSON_AddBoﬁToObje˘
(
j_deÁu…_ac˚ss
, "subs¸ibe", 
Ál£
Ë=
NULL


678 || 
	`cJSON_AddBoﬁToObje˘
(
j_deÁu…_ac˚ss
, "unsubs¸ibe", 
åue
Ë=
NULL


681 
	`cJSON_Dñëe
(
åì
);

682  
NULL
;

685 
j_˛õ¡
 = 
	`öô_add_˛õ¡
(
u£∫ame
, 
∑ssw‹d
, 
rﬁíame
);

686 if(
j_˛õ¡
 =
NULL
){

687 
	`cJSON_Dñëe
(
åì
);

688  
NULL
;

690 
	`cJSON_AddIãmToAºay
(
j_˛õ¡s
, 
j_˛õ¡
);

692 
j_rﬁe
 = 
	`öô_add_rﬁe
(
rﬁíame
);

693 if(
j_rﬁe
 =
NULL
){

694 
	`cJSON_Dñëe
(
åì
);

695  
NULL
;

697 
	`cJSON_AddIãmToAºay
(
j_rﬁes
, 
j_rﬁe
);

699  
åì
;

700 
	}
}

703 
	$dyn£c_öô
(
¨gc
, *
¨gv
[])

705 *
fûíame
;

706 *
admö_u£r
;

707 *
admö_∑ssw‹d
;

708 *
js⁄_°r
;

709 
cJSON
 *
åì
;

710 
FILE
 *
Âå
;

711 
¥om±
[200], 
vîify_¥om±
[200];

712 
∑ssw‹d
[200];

713 
rc
;

715 if(
¨gc
 < 2){

716 
	`Ârötf
(
°dîr
, "dynsec init: NotÉnoughárguments - filename, orádmin-user missing.\n");

717  
MOSQ_ERR_INVAL
;

720 if(
¨gc
 > 3){

721 
	`Ârötf
(
°dîr
, "dynsec init: Too manyárguments.\n");

722  
MOSQ_ERR_INVAL
;

725 
fûíame
 = 
¨gv
[0];

726 
admö_u£r
 = 
¨gv
[1];

728 if(
¨gc
 == 3){

729 
admö_∑ssw‹d
 = 
¨gv
[2];

731 
	`¢¥ötf
(
¥om±
, ’rom±), "NewÖassw‹d f‹ %s: ", 
admö_u£r
);

732 
	`¢¥ötf
(
vîify_¥om±
, (vîify_¥om±), "Rì¡îÖassw‹d f‹ %s: ", 
admö_u£r
);

733 
rc
 = 
	`gë_∑ssw‹d
(
¥om±
, 
vîify_¥om±
, 
Ál£
, 
∑ssw‹d
, (password));

734 if(
rc
){

735 
	`mosquôto_lib_˛ónup
();

738 
admö_∑ssw‹d
 = 
∑ssw‹d
;

741 
Âå
 = 
	`f›í
(
fûíame
, "rb");

742 if(
Âå
){

743 
	`f˛o£
(
Âå
);

744 
	`Ârötf
(
°dîr
, "dyn£¯öô: '%s'áÃódyÉxi°s. Removêthêfûê‹ u£á dif„ª¡Üoˇti⁄..\n", 
fûíame
);

748 
åì
 = 
	`öô_¸óã
(
admö_u£r
, 
admö_∑ssw‹d
, "admin");

749 if(
åì
 =
NULL
){

750 
	`Ârötf
(
°dîr
, "dynsec init: Out of memory.\n");

751  
MOSQ_ERR_NOMEM
;

753 
js⁄_°r
 = 
	`cJSON_Pröt
(
åì
);

754 
	`cJSON_Dñëe
(
åì
);

756 
Âå
 = 
	`f›í
(
fûíame
, "wb");

757 if(
Âå
){

758 
	`Ârötf
(
Âå
, "%s", 
js⁄_°r
);

759 
	`‰ì
(
js⁄_°r
);

760 
	`f˛o£
(
Âå
);

762 
	`‰ì
(
js⁄_°r
);

763 
	`Ârötf
(
°dîr
, "dyn£¯öô: U«bÀÅÿ›í '%s' f‹ wrôög.\n", 
fûíame
);

767 
	`¥ötf
("Thê˛õ¡ '%s' ha†bì¿¸óãd i¿thêfûê'%s'.\n", 
admö_u£r
, 
fûíame
);

768 
	`¥ötf
("This client is configuredÅoállow youÅoádministerÅhe dynamic securityÖlugin only.\n");

769 
	`¥ötf
("It doesÇot haveáccessÅoÖublish messagesÅoÇormalÅopics.\n");

770 
	`¥ötf
("You should create yourápplication clientsÅo doÅhat, forÉxample:\n");

771 
	`¥ötf
(" mosquitto_ctrl <connect options> dynsec createClient <username>\n");

772 
	`¥ötf
(" mosquitto_ctrl <connect options> dynsec createRole <rolename>\n");

773 
	`¥ötf
(" mosquitto_ctrl <connect options> dynsecáddRoleACL <rolename>ÖublishClientSend my/topic [priority]\n");

774 
	`¥ötf
(" mosquitto_ctrl <connect options> dynsecáddClientRole <username> <rolename> [priority]\n");

775 
	`¥ötf
("See https://mosquitto.org/documentation/dynamic-security/ for details ofáll commands.\n");

778 
	}
}

786 
	$dyn£c__maö
(
¨gc
, *
¨gv
[], 
mosq_˘æ
 *
˘æ
)

788 
rc
 = -1;

789 
cJSON
 *
j_åì
;

790 
cJSON
 *
j_comm™ds
, *
j_comm™d
;

792 if(!
	`°rˇ£cmp
(
¨gv
[0], "help")){

793 
	`dyn£c__¥öt_ußge
();

795 }if(!
	`°rˇ£cmp
(
¨gv
[0], "init")){

796  
	`dyn£c_öô
(
¨gc
-1, &
¨gv
[1]);

801 
˘æ
->
∑ylﬂd_ˇŒback
 = 
dyn£c__∑ylﬂd_ˇŒback
;

802 
˘æ
->
ªque°_t›ic
 = 
	`°rdup
("$CONTROL/dynamic-security/v1");

803 
˘æ
->
ª•⁄£_t›ic
 = 
	`°rdup
("$CONTROL/dynamic-security/v1/response");

804 if(
˘æ
->
ªque°_t›ic
 =
NULL
 || cål->
ª•⁄£_t›ic
 == NULL){

805  
MOSQ_ERR_NOMEM
;

807 
j_åì
 = 
	`cJSON_Cª©eObje˘
();

808 if(
j_åì
 =
NULL
Ë 
MOSQ_ERR_NOMEM
;

809 
j_comm™ds
 = 
	`cJSON_AddAºayToObje˘
(
j_åì
, "commands");

810 if(
j_comm™ds
 =
NULL
){

811 
	`cJSON_Dñëe
(
j_åì
);

812 
j_åì
 = 
NULL
;

813  
MOSQ_ERR_NOMEM
;

815 
j_comm™d
 = 
	`cJSON_Cª©eObje˘
();

816 if(
j_comm™d
 =
NULL
){

817 
	`cJSON_Dñëe
(
j_åì
);

818 
j_åì
 = 
NULL
;

819  
MOSQ_ERR_NOMEM
;

821 
	`cJSON_AddIãmToAºay
(
j_comm™ds
, 
j_comm™d
);

823 if(!
	`°rˇ£cmp
(
¨gv
[0], "setDefaultACLAccess")){

824 
rc
 = 
	`dyn£c__£t_deÁu…_a˛_ac˚ss
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

825 }if(!
	`°rˇ£cmp
(
¨gv
[0], "getDefaultACLAccess")){

826 
rc
 = 
	`dyn£c__gë_deÁu…_a˛_ac˚ss
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

828 }if(!
	`°rˇ£cmp
(
¨gv
[0], "createClient")){

829 
rc
 = 
	`dyn£c_˛õ¡__¸óã
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

830 }if(!
	`°rˇ£cmp
(
¨gv
[0], "deleteClient")){

831 
rc
 = 
	`dyn£c_˛õ¡__dñëe
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

832 }if(!
	`°rˇ£cmp
(
¨gv
[0], "getClient")){

833 
rc
 = 
	`dyn£c_˛õ¡__gë
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

834 }if(!
	`°rˇ£cmp
(
¨gv
[0], "listClients")){

835 
rc
 = 
	`dyn£c_˛õ¡__li°_Æl
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

836 }if(!
	`°rˇ£cmp
(
¨gv
[0], "setClientId")){

837 
rc
 = 
	`dyn£c_˛õ¡__£t_id
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

838 }if(!
	`°rˇ£cmp
(
¨gv
[0], "setClientPassword")){

839 
rc
 = 
	`dyn£c_˛õ¡__£t_∑ssw‹d
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

840 }if(!
	`°rˇ£cmp
(
¨gv
[0], "addClientRole")){

841 
rc
 = 
	`dyn£c_˛õ¡__add_ªmove_rﬁe
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
,árgv[0]);

842 }if(!
	`°rˇ£cmp
(
¨gv
[0], "removeClientRole")){

843 
rc
 = 
	`dyn£c_˛õ¡__add_ªmove_rﬁe
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
,árgv[0]);

844 }if(!
	`°rˇ£cmp
(
¨gv
[0], "enableClient")){

845 
rc
 = 
	`dyn£c_˛õ¡__íabÀ_dißbÀ
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
,árgv[0]);

846 }if(!
	`°rˇ£cmp
(
¨gv
[0], "disableClient")){

847 
rc
 = 
	`dyn£c_˛õ¡__íabÀ_dißbÀ
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
,árgv[0]);

849 }if(!
	`°rˇ£cmp
(
¨gv
[0], "createGroup")){

850 
rc
 = 
	`dyn£c_group__¸óã
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

851 }if(!
	`°rˇ£cmp
(
¨gv
[0], "deleteGroup")){

852 
rc
 = 
	`dyn£c_group__dñëe
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

853 }if(!
	`°rˇ£cmp
(
¨gv
[0], "getGroup")){

854 
rc
 = 
	`dyn£c_group__gë
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

855 }if(!
	`°rˇ£cmp
(
¨gv
[0], "listGroups")){

856 
rc
 = 
	`dyn£c_group__li°_Æl
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

857 }if(!
	`°rˇ£cmp
(
¨gv
[0], "addGroupRole")){

858 
rc
 = 
	`dyn£c_group__add_ªmove_rﬁe
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
,árgv[0]);

859 }if(!
	`°rˇ£cmp
(
¨gv
[0], "removeGroupRole")){

860 
rc
 = 
	`dyn£c_group__add_ªmove_rﬁe
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
,árgv[0]);

861 }if(!
	`°rˇ£cmp
(
¨gv
[0], "addGroupClient")){

862 
rc
 = 
	`dyn£c_group__add_ªmove_˛õ¡
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
,árgv[0]);

863 }if(!
	`°rˇ£cmp
(
¨gv
[0], "removeGroupClient")){

864 
rc
 = 
	`dyn£c_group__add_ªmove_˛õ¡
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
,árgv[0]);

865 }if(!
	`°rˇ£cmp
(
¨gv
[0], "setAnonymousGroup")){

866 
rc
 = 
	`dyn£c_group__£t_™⁄ymous
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

867 }if(!
	`°rˇ£cmp
(
¨gv
[0], "getAnonymousGroup")){

868 
rc
 = 
	`dyn£c_group__gë_™⁄ymous
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

870 }if(!
	`°rˇ£cmp
(
¨gv
[0], "createRole")){

871 
rc
 = 
	`dyn£c_rﬁe__¸óã
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

872 }if(!
	`°rˇ£cmp
(
¨gv
[0], "deleteRole")){

873 
rc
 = 
	`dyn£c_rﬁe__dñëe
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

874 }if(!
	`°rˇ£cmp
(
¨gv
[0], "getRole")){

875 
rc
 = 
	`dyn£c_rﬁe__gë
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

876 }if(!
	`°rˇ£cmp
(
¨gv
[0], "listRoles")){

877 
rc
 = 
	`dyn£c_rﬁe__li°_Æl
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

878 }if(!
	`°rˇ£cmp
(
¨gv
[0], "addRoleACL")){

879 
rc
 = 
	`dyn£c_rﬁe__add_a˛
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

880 }if(!
	`°rˇ£cmp
(
¨gv
[0], "removeRoleACL")){

881 
rc
 = 
	`dyn£c_rﬁe__ªmove_a˛
(
¨gc
-1, &
¨gv
[1], 
j_comm™d
);

884 
	`Ârötf
(
°dîr
, "Comm™d '%s'ÇŸÑecogni£d.\n", 
¨gv
[0]);

885  
MOSQ_ERR_UNKNOWN
;

888 if(
rc
 =
MOSQ_ERR_SUCCESS
){

889 
˘æ
->
∑ylﬂd
 = 
	`cJSON_PrötUnf‹m©ãd
(
j_åì
);

890 
	`cJSON_Dñëe
(
j_åì
);

891 if(
˘æ
->
∑ylﬂd
 =
NULL
){

892 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

893  
MOSQ_ERR_NOMEM
;

896  
rc
;

897 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/dynsec_client.c

18 
	~<cjs⁄/cJSON.h
>

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~"mosquôto.h
"

24 
	~"mosquôto_˘æ.h
"

25 
	~"gë_∑ssw‹d.h
"

26 
	~"∑ssw‹d_mosq.h
"

28 
	$dyn£c_˛õ¡__¸óã
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

30 *
u£∫ame
 = 
NULL
, *
∑ssw‹d
 = NULL, *
˛õ¡id
 = NULL;

31 
¥om±
[200], 
vîify_¥om±
[200];

32 
∑ssw‹d_buf
[200];

33 
rc
;

34 
i
;

35 
boﬁ
 
ªque°_∑ssw‹d
 = 
åue
;

37 if(
¨gc
 == 0){

38  
MOSQ_ERR_INVAL
;

40 
u£∫ame
 = 
¨gv
[0];

42 
i
=1; i<
¨gc
; i++){

43 if(!
	`°rcmp
(
¨gv
[
i
], "-c")){

44 if(
i
+1 =
¨gc
){

45 
	`Ârötf
(
°dîr
, "Error: -cárgument given, butÇo clientidÖrovided.\n");

46  
MOSQ_ERR_INVAL
;

48 
˛õ¡id
 = 
¨gv
[
i
+1];

49 
i
++;

50 }if(!
	`°rcmp
(
¨gv
[
i
], "-p")){

51 if(
i
+1 =
¨gc
){

52 
	`Ârötf
(
°dîr
, "Error: -párgument given, butÇoÖasswordÖrovided.\n");

53  
MOSQ_ERR_INVAL
;

55 
∑ssw‹d
 = 
¨gv
[
i
+1];

56 
i
++;

57 
ªque°_∑ssw‹d
 = 
Ál£
;

61 if(
ªque°_∑ssw‹d
){

62 
	`¥ötf
("E¡îÇewÖassw‹d f‹ %s. Pªs†ªtu∫ f‹Çÿ∑ssw‹d (u£∏wû»bêu«bÀÅÿlogö).\n", 
u£∫ame
);

63 
	`¢¥ötf
(
¥om±
, ’rom±), "NewÖassw‹d f‹ %s: ", 
u£∫ame
);

64 
	`¢¥ötf
(
vîify_¥om±
, (vîify_¥om±), "Rì¡îÖassw‹d f‹ %s: ", 
u£∫ame
);

65 
rc
 = 
	`gë_∑ssw‹d
(
¥om±
, 
vîify_¥om±
, 
åue
, 
∑ssw‹d_buf
, (password_buf));

66 if(
rc
 == 0){

67 
∑ssw‹d
 = 
∑ssw‹d_buf
;

68 }if(
rc
 == 2){

69 
	`Ârötf
(
°dîr
, "Error: Passwords doÇot match.\n");

72 
∑ssw‹d
 = 
NULL
;

73 
	`¥ötf
("\n");

76 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "¸óãClõ¡"Ë=
NULL


77 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "u£∫ame", 
u£∫ame
Ë=
NULL


78 || (
˛õ¡id
 && 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "˛õ¡id", clõ¡idË=
NULL
)

79 || (
∑ssw‹d
 && 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "∑ssw‹d",Öassw‹dË=
NULL
)

82  
MOSQ_ERR_NOMEM
;

84  
MOSQ_ERR_SUCCESS
;

86 
	}
}

88 
	$dyn£c_˛õ¡__dñëe
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

90 *
u£∫ame
 = 
NULL
;

92 if(
¨gc
 == 1){

93 
u£∫ame
 = 
¨gv
[0];

95  
MOSQ_ERR_INVAL
;

98 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "dñëeClõ¡"Ë=
NULL


99 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "u£∫ame", 
u£∫ame
Ë=
NULL


102  
MOSQ_ERR_NOMEM
;

104  
MOSQ_ERR_SUCCESS
;

106 
	}
}

108 
	$dyn£c_˛õ¡__íabÀ_dißbÀ
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
, c⁄° *
comm™d
)

110 *
u£∫ame
 = 
NULL
;

112 if(
¨gc
 == 1){

113 
u£∫ame
 = 
¨gv
[0];

115  
MOSQ_ERR_INVAL
;

118 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", 
comm™d
Ë=
NULL


119 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "u£∫ame", 
u£∫ame
Ë=
NULL


122  
MOSQ_ERR_NOMEM
;

124  
MOSQ_ERR_SUCCESS
;

126 
	}
}

128 
	$dyn£c_˛õ¡__£t_id
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

130 *
u£∫ame
 = 
NULL
, *
˛õ¡id
 = NULL;

132 if(
¨gc
 == 2){

133 
u£∫ame
 = 
¨gv
[0];

134 
˛õ¡id
 = 
¨gv
[1];

135 }if(
¨gc
 == 1){

136 
u£∫ame
 = 
¨gv
[0];

138  
MOSQ_ERR_INVAL
;

141 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "£tClõ¡Id"Ë=
NULL


142 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "u£∫ame", 
u£∫ame
Ë=
NULL


143 || (
˛õ¡id
 && 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "˛õ¡id", clõ¡idË=
NULL
)

146  
MOSQ_ERR_NOMEM
;

148  
MOSQ_ERR_SUCCESS
;

150 
	}
}

152 
	$dyn£c_˛õ¡__£t_∑ssw‹d
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

154 *
u£∫ame
 = 
NULL
, *
∑ssw‹d
 = NULL;

155 
¥om±
[200], 
vîify_¥om±
[200];

156 
∑ssw‹d_buf
[200];

157 
rc
;

159 if(
¨gc
 == 2){

160 
u£∫ame
 = 
¨gv
[0];

161 
∑ssw‹d
 = 
¨gv
[1];

162 }if(
¨gc
 == 1){

163 
u£∫ame
 = 
¨gv
[0];

165 
	`¢¥ötf
(
¥om±
, ’rom±), "NewÖassw‹d f‹ %s: ", 
u£∫ame
);

166 
	`¢¥ötf
(
vîify_¥om±
, (vîify_¥om±), "Rì¡îÖassw‹d f‹ %s: ", 
u£∫ame
);

167 
rc
 = 
	`gë_∑ssw‹d
(
¥om±
, 
vîify_¥om±
, 
Ál£
, 
∑ssw‹d_buf
, (password_buf));

168 if(
rc
){

171 
∑ssw‹d
 = 
∑ssw‹d_buf
;

173  
MOSQ_ERR_INVAL
;

176 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "£tClõ¡Passw‹d"Ë=
NULL


177 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "u£∫ame", 
u£∫ame
Ë=
NULL


178 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "∑ssw‹d", 
∑ssw‹d
Ë=
NULL


181  
MOSQ_ERR_NOMEM
;

183  
MOSQ_ERR_SUCCESS
;

185 
	}
}

187 
	$dyn£c_˛õ¡__gë
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

189 *
u£∫ame
 = 
NULL
;

191 if(
¨gc
 == 1){

192 
u£∫ame
 = 
¨gv
[0];

194  
MOSQ_ERR_INVAL
;

197 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "gëClõ¡"Ë=
NULL


198 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "u£∫ame", 
u£∫ame
Ë=
NULL


201  
MOSQ_ERR_NOMEM
;

203  
MOSQ_ERR_SUCCESS
;

205 
	}
}

207 
	$dyn£c_˛õ¡__add_ªmove_rﬁe
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
, c⁄° *
comm™d
)

209 *
u£∫ame
 = 
NULL
, *
rﬁíame
 = NULL;

210 
¥i‹ôy
 = -1;

212 if(
¨gc
 == 2){

213 
u£∫ame
 = 
¨gv
[0];

214 
rﬁíame
 = 
¨gv
[1];

215 }if(
¨gc
 == 3){

216 
u£∫ame
 = 
¨gv
[0];

217 
rﬁíame
 = 
¨gv
[1];

218 
¥i‹ôy
 = 
	`©oi
(
¨gv
[2]);

220  
MOSQ_ERR_INVAL
;

223 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", 
comm™d
Ë=
NULL


224 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "u£∫ame", 
u£∫ame
Ë=
NULL


225 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "rﬁíame", 
rﬁíame
Ë=
NULL


226 || (
¥i‹ôy
 !-1 && 
	`cJSON_AddI¡ToObje˘
(
j_comm™d
, "¥i‹ôy",Öri‹ôyË=
NULL
)

229  
MOSQ_ERR_NOMEM
;

231  
MOSQ_ERR_SUCCESS
;

233 
	}
}

235 
	$dyn£c_˛õ¡__li°_Æl
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

237 
cou¡
 = -1, 
off£t
 = -1;

239 if(
¨gc
 == 0){

241 }if(
¨gc
 == 1){

242 
cou¡
 = 
	`©oi
(
¨gv
[0]);

243 }if(
¨gc
 == 2){

244 
cou¡
 = 
	`©oi
(
¨gv
[0]);

245 
off£t
 = 
	`©oi
(
¨gv
[1]);

247  
MOSQ_ERR_INVAL
;

250 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "li°Clõ¡s"Ë=
NULL


251 || (
cou¡
 > 0 && 
	`cJSON_AddI¡ToObje˘
(
j_comm™d
, "cou¡", cou¡Ë=
NULL
)

252 || (
off£t
 > 0 && 
	`cJSON_AddI¡ToObje˘
(
j_comm™d
, "off£t", off£tË=
NULL
)

255  
MOSQ_ERR_NOMEM
;

257  
MOSQ_ERR_SUCCESS
;

259 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/dynsec_group.c

18 
	~"c⁄fig.h
"

20 
	~<cjs⁄/cJSON.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

25 
	~"mosquôto.h
"

26 
	~"mosquôto_˘æ.h
"

27 
	~"∑ssw‹d_mosq.h
"

29 
	$dyn£c_group__¸óã
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

31 *
grou≤ame
 = 
NULL
;

33 if(
¨gc
 == 1){

34 
grou≤ame
 = 
¨gv
[0];

36  
MOSQ_ERR_INVAL
;

39 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "¸óãGroup"Ë=
NULL


40 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "grou≤ame", 
grou≤ame
Ë=
NULL


43  
MOSQ_ERR_NOMEM
;

45  
MOSQ_ERR_SUCCESS
;

47 
	}
}

49 
	$dyn£c_group__dñëe
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

51 *
grou≤ame
 = 
NULL
;

53 if(
¨gc
 == 1){

54 
grou≤ame
 = 
¨gv
[0];

56  
MOSQ_ERR_INVAL
;

59 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "dñëeGroup"Ë=
NULL


60 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "grou≤ame", 
grou≤ame
Ë=
NULL


63  
MOSQ_ERR_NOMEM
;

65  
MOSQ_ERR_SUCCESS
;

67 
	}
}

69 
	$dyn£c_group__gë_™⁄ymous
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

71 
	`UNUSED
(
¨gc
);

72 
	`UNUSED
(
¨gv
);

74 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "gëAn⁄ymousGroup"Ë=
NULL


77  
MOSQ_ERR_NOMEM
;

79  
MOSQ_ERR_SUCCESS
;

81 
	}
}

83 
	$dyn£c_group__£t_™⁄ymous
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

85 *
grou≤ame
 = 
NULL
;

87 if(
¨gc
 == 1){

88 
grou≤ame
 = 
¨gv
[0];

90  
MOSQ_ERR_INVAL
;

93 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "£tAn⁄ymousGroup"Ë=
NULL


94 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "grou≤ame", 
grou≤ame
Ë=
NULL


97  
MOSQ_ERR_NOMEM
;

99  
MOSQ_ERR_SUCCESS
;

101 
	}
}

103 
	$dyn£c_group__gë
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

105 *
grou≤ame
 = 
NULL
;

107 if(
¨gc
 == 1){

108 
grou≤ame
 = 
¨gv
[0];

110  
MOSQ_ERR_INVAL
;

113 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "gëGroup"Ë=
NULL


114 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "grou≤ame", 
grou≤ame
Ë=
NULL


117  
MOSQ_ERR_NOMEM
;

119  
MOSQ_ERR_SUCCESS
;

121 
	}
}

123 
	$dyn£c_group__add_ªmove_rﬁe
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
, c⁄° *
comm™d
)

125 *
grou≤ame
 = 
NULL
, *
rﬁíame
 = NULL;

126 
¥i‹ôy
 = -1;

128 if(
¨gc
 == 2){

129 
grou≤ame
 = 
¨gv
[0];

130 
rﬁíame
 = 
¨gv
[1];

131 }if(
¨gc
 == 3){

132 
grou≤ame
 = 
¨gv
[0];

133 
rﬁíame
 = 
¨gv
[1];

134 
¥i‹ôy
 = 
	`©oi
(
¨gv
[2]);

136  
MOSQ_ERR_INVAL
;

139 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", 
comm™d
Ë=
NULL


140 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "grou≤ame", 
grou≤ame
Ë=
NULL


141 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "rﬁíame", 
rﬁíame
Ë=
NULL


142 || (
¥i‹ôy
 !-1 && 
	`cJSON_AddI¡ToObje˘
(
j_comm™d
, "¥i‹ôy",Öri‹ôyË=
NULL
)

145  
MOSQ_ERR_NOMEM
;

147  
MOSQ_ERR_SUCCESS
;

149 
	}
}

151 
	$dyn£c_group__li°_Æl
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

153 
cou¡
 = -1, 
off£t
 = -1;

155 if(
¨gc
 == 0){

157 }if(
¨gc
 == 1){

158 
cou¡
 = 
	`©oi
(
¨gv
[0]);

159 }if(
¨gc
 == 2){

160 
cou¡
 = 
	`©oi
(
¨gv
[0]);

161 
off£t
 = 
	`©oi
(
¨gv
[1]);

163  
MOSQ_ERR_INVAL
;

166 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "li°Groups"Ë=
NULL


167 || (
cou¡
 > 0 && 
	`cJSON_AddI¡ToObje˘
(
j_comm™d
, "cou¡", cou¡Ë=
NULL
)

168 || (
off£t
 > 0 && 
	`cJSON_AddI¡ToObje˘
(
j_comm™d
, "off£t", off£tË=
NULL
)

171  
MOSQ_ERR_NOMEM
;

173  
MOSQ_ERR_SUCCESS
;

175 
	}
}

177 
	$dyn£c_group__add_ªmove_˛õ¡
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
, c⁄° *
comm™d
)

179 *
u£∫ame
, *
grou≤ame
;

180 
¥i‹ôy
 = -1;

182 if(
¨gc
 == 2){

183 
grou≤ame
 = 
¨gv
[0];

184 
u£∫ame
 = 
¨gv
[1];

185 }if(
¨gc
 == 3){

186 
grou≤ame
 = 
¨gv
[0];

187 
u£∫ame
 = 
¨gv
[1];

188 
¥i‹ôy
 = 
	`©oi
(
¨gv
[2]);

190  
MOSQ_ERR_INVAL
;

193 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", 
comm™d
Ë=
NULL


194 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "u£∫ame", 
u£∫ame
Ë=
NULL


195 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "grou≤ame", 
grou≤ame
Ë=
NULL


196 || (
¥i‹ôy
 !-1 && 
	`cJSON_AddI¡ToObje˘
(
j_comm™d
, "¥i‹ôy",Öri‹ôyË=
NULL
)

199  
MOSQ_ERR_NOMEM
;

201  
MOSQ_ERR_SUCCESS
;

203 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/dynsec_role.c

18 
	~"c⁄fig.h
"

20 
	~<cjs⁄/cJSON.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

25 #i‚de‡
WIN32


26 
	~<°rögs.h
>

29 
	~"mosquôto.h
"

30 
	~"mosquôto_˘æ.h
"

31 
	~"∑ssw‹d_mosq.h
"

33 
	$dyn£c_rﬁe__¸óã
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

35 *
rﬁíame
 = 
NULL
;

37 if(
¨gc
 == 1){

38 
rﬁíame
 = 
¨gv
[0];

40  
MOSQ_ERR_INVAL
;

43 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "¸óãRﬁe"Ë=
NULL


44 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "rﬁíame", 
rﬁíame
Ë=
NULL


47  
MOSQ_ERR_NOMEM
;

49  
MOSQ_ERR_SUCCESS
;

51 
	}
}

53 
	$dyn£c_rﬁe__dñëe
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

55 *
rﬁíame
 = 
NULL
;

57 if(
¨gc
 == 1){

58 
rﬁíame
 = 
¨gv
[0];

60  
MOSQ_ERR_INVAL
;

63 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "dñëeRﬁe"Ë=
NULL


64 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "rﬁíame", 
rﬁíame
Ë=
NULL


67  
MOSQ_ERR_NOMEM
;

69  
MOSQ_ERR_SUCCESS
;

71 
	}
}

73 
	$dyn£c_rﬁe__gë
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

75 *
rﬁíame
 = 
NULL
;

77 if(
¨gc
 == 1){

78 
rﬁíame
 = 
¨gv
[0];

80  
MOSQ_ERR_INVAL
;

83 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "gëRﬁe"Ë=
NULL


84 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "rﬁíame", 
rﬁíame
Ë=
NULL


87  
MOSQ_ERR_NOMEM
;

89  
MOSQ_ERR_SUCCESS
;

91 
	}
}

93 
	$dyn£c_rﬁe__li°_Æl
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

95 
cou¡
 = -1, 
off£t
 = -1;

97 if(
¨gc
 == 0){

99 }if(
¨gc
 == 1){

100 
cou¡
 = 
	`©oi
(
¨gv
[0]);

101 }if(
¨gc
 == 2){

102 
cou¡
 = 
	`©oi
(
¨gv
[0]);

103 
off£t
 = 
	`©oi
(
¨gv
[1]);

105  
MOSQ_ERR_INVAL
;

108 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "li°Rﬁes"Ë=
NULL


109 || (
cou¡
 > 0 && 
	`cJSON_AddI¡ToObje˘
(
j_comm™d
, "cou¡", cou¡Ë=
NULL
)

110 || (
off£t
 > 0 && 
	`cJSON_AddI¡ToObje˘
(
j_comm™d
, "off£t", off£tË=
NULL
)

113  
MOSQ_ERR_NOMEM
;

115  
MOSQ_ERR_SUCCESS
;

117 
	}
}

119 
	$dyn£c_rﬁe__add_a˛
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

121 *
rﬁíame
, *
a˛ty≥
, *
t›ic
, *
a˘i⁄
;

122 
boﬁ
 
Ælow
;

123 
¥i‹ôy
 = -1;

125 if(
¨gc
 == 5){

126 
rﬁíame
 = 
¨gv
[0];

127 
a˛ty≥
 = 
¨gv
[1];

128 
t›ic
 = 
¨gv
[2];

129 
a˘i⁄
 = 
¨gv
[3];

130 
¥i‹ôy
 = 
	`©oi
(
¨gv
[4]);

131 }if(
¨gc
 == 4){

132 
rﬁíame
 = 
¨gv
[0];

133 
a˛ty≥
 = 
¨gv
[1];

134 
t›ic
 = 
¨gv
[2];

135 
a˘i⁄
 = 
¨gv
[3];

137  
MOSQ_ERR_INVAL
;

140 if(
	`°rˇ£cmp
(
a˛ty≥
, "publishClientSend")

141 && 
	`°rˇ£cmp
(
a˛ty≥
, "publishClientReceive")

142 && 
	`°rˇ£cmp
(
a˛ty≥
, "subscribeLiteral")

143 && 
	`°rˇ£cmp
(
a˛ty≥
, "subscribePattern")

144 && 
	`°rˇ£cmp
(
a˛ty≥
, "unsubscribeLiteral")

145 && 
	`°rˇ£cmp
(
a˛ty≥
, "unsubscribePattern")){

147  
MOSQ_ERR_INVAL
;

149 if(!
	`°rˇ£cmp
(
a˘i⁄
, "allow")){

150 
Ælow
 = 
åue
;

151 }if(!
	`°rˇ£cmp
(
a˘i⁄
, "deny")){

152 
Ælow
 = 
Ál£
;

154  
MOSQ_ERR_INVAL
;

157 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "addRﬁeACL"Ë=
NULL


158 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "rﬁíame", 
rﬁíame
Ë=
NULL


159 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "a˛ty≥", 
a˛ty≥
Ë=
NULL


160 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "t›ic", 
t›ic
Ë=
NULL


161 || 
	`cJSON_AddBoﬁToObje˘
(
j_comm™d
, "Ælow", 
Ælow
Ë=
NULL


162 || (
¥i‹ôy
 !-1 && 
	`cJSON_AddI¡ToObje˘
(
j_comm™d
, "¥i‹ôy",Öri‹ôyË=
NULL
)

165  
MOSQ_ERR_NOMEM
;

167  
MOSQ_ERR_SUCCESS
;

169 
	}
}

171 
	$dyn£c_rﬁe__ªmove_a˛
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
)

173 *
rﬁíame
, *
a˛ty≥
, *
t›ic
;

175 if(
¨gc
 == 3){

176 
rﬁíame
 = 
¨gv
[0];

177 
a˛ty≥
 = 
¨gv
[1];

178 
t›ic
 = 
¨gv
[2];

180  
MOSQ_ERR_INVAL
;

183 if(
	`°rˇ£cmp
(
a˛ty≥
, "publishClientSend")

184 && 
	`°rˇ£cmp
(
a˛ty≥
, "publishClientReceive")

185 && 
	`°rˇ£cmp
(
a˛ty≥
, "subscribeLiteral")

186 && 
	`°rˇ£cmp
(
a˛ty≥
, "subscribePattern")

187 && 
	`°rˇ£cmp
(
a˛ty≥
, "unsubscribeLiteral")

188 && 
	`°rˇ£cmp
(
a˛ty≥
, "unsubscribePattern")){

190  
MOSQ_ERR_INVAL
;

193 if(
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "comm™d", "ªmoveRﬁeACL"Ë=
NULL


194 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "rﬁíame", 
rﬁíame
Ë=
NULL


195 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "a˛ty≥", 
a˛ty≥
Ë=
NULL


196 || 
	`cJSON_AddSåögToObje˘
(
j_comm™d
, "t›ic", 
t›ic
Ë=
NULL


199  
MOSQ_ERR_NOMEM
;

201  
MOSQ_ERR_SUCCESS
;

203 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/example.c

18 
	~"c⁄fig.h
"

20 
	~<cjs⁄/cJSON.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

25 #i‚de‡
WIN32


26 
	~<°rögs.h
>

29 
	~"mosquôto_˘æ.h
"

31 
	$˘æ_hñp
()

33 
	`¥ötf
("\nExample module\n");

34 
	`¥ötf
("==============\n");

35 
	`¥ötf
(" mosquitto_ctrlÉxample help\n");

36 
	}
}

38 
	$˘æ_maö
(
¨gc
, *
¨gv
[], 
mosq_˘æ
 *
˘æ
)

40 
	`UNUSED
(
¨gc
);

41 
	`UNUSED
(
˘æ
);

43 if(!
	`°rˇ£cmp
(
¨gv
[0], "help")){

44 
	`˘æ_hñp
();

47  
MOSQ_ERR_INVAL
;

49 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/mosquitto_ctrl.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 
	~<sig«l.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 #i‚de‡
WIN32


28 
	~<°rögs.h
>

31 
	~"lib_lﬂd.h
"

32 
	~"mosquôto.h
"

33 
	~"mosquôto_˘æ.h
"

35 
	$¥öt_vîsi⁄
()

37 
maj‹
, 
mö‹
, 
ªvisi⁄
;

39 
	`mosquôto_lib_vîsi⁄
(&
maj‹
, &
mö‹
, &
ªvisi⁄
);

40 
	`¥ötf
("mosquôto_˘æ vîsi⁄ %†ru¬ög o¿libmosquôtÿ%d.%d.%d.\n", 
VERSION
, 
maj‹
, 
mö‹
, 
ªvisi⁄
);

41 
	}
}

43 
	$¥öt_ußge
()

45 
	`¥ötf
("mosquitto_ctrl isáÅool forádministering certain Mosquitto features.\n");

46 
	`¥öt_vîsi⁄
();

47 
	`¥ötf
("\nGeneral usage: mosquitto_ctrl <module> <module-command> <command-options>\n");

48 
	`¥ötf
("For module specific help use: mosquitto_ctrl <module> help\n");

49 
	`¥ötf
("\nModulesávailable: dynsec\n");

50 
	`¥ötf
("\nFor more information see:\n");

51 
	`¥ötf
(" https://mosquitto.org/man/mosquitto_ctrl-1.html\n\n");

52 
	}
}

55 
	$maö
(
¨gc
, *
¨gv
[])

57 
mosq_˘æ
 
˘æ
;

58 
rc
 = 
MOSQ_ERR_SUCCESS
;

59 
FUNC_˘æ_maö
 
l_˘æ_maö
 = 
NULL
;

60 *
lib
 = 
NULL
;

61 
lib_«me
[200];

63 if(
¨gc
 == 1){

64 
	`¥öt_ußge
();

68 
	`mem£t
(&
˘æ
, 0, (ctrl));

69 
	`öô_c⁄fig
(&
˘æ
.
cfg
);

72 
¨gc
--;

73 
¨gv
++;

75 
	`˘æ_c⁄fig_∑r£
(&
˘æ
.
cfg
, &
¨gc
, &
¨gv
);

77 if(
¨gc
 < 2){

78 
	`¥öt_ußge
();

83 if(!
	`°rˇ£cmp
(
¨gv
[0], "dynsec")){

84 
l_˘æ_maö
 = 
dyn£c__maö
;

87 
	`¢¥ötf
(
lib_«me
, ÷ib_«me), "mosquôto_˘æ_%s.so", 
¨gv
[0]);

88 
lib
 = 
	`LIB_LOAD
(
lib_«me
);

89 if(
lib
){

90 
l_˘æ_maö
 = (
FUNC_˘æ_maö
)
	`LIB_SYM
(
lib
, "ctrl_main");

93 if(
l_˘æ_maö
 =
NULL
){

94 
	`Ârötf
(
°dîr
, "Eº‹: ModuÀ '%s'ÇŸ suµ‹ãd.\n", 
¨gv
[0]);

95 
rc
 = 
MOSQ_ERR_NOT_SUPPORTED
;

98 if(
l_˘æ_maö
){

99 
rc
 = 
	`l_˘æ_maö
(
¨gc
-1, &
¨gv
[1], &
˘æ
);

100 if(
rc
 < 0){

102 
rc
 = 0;

103 }if(
rc
 =
MOSQ_ERR_SUCCESS
){

104 
rc
 = 
	`˛õ¡_ªque°_ª•⁄£
(&
˘æ
);

105 }if(
rc
 =
MOSQ_ERR_UNKNOWN
){

108 
	`Ârötf
(
°dîr
, "Eº‹: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

112 
	`˛õ¡_c⁄fig_˛ónup
(&
˘æ
.
cfg
);

113  
rc
;

114 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/mosquitto_ctrl.h

18 #i‚de‡
MOSQUITTO_CTRL_H


19 
	#MOSQUITTO_CTRL_H


	)

21 
	~<cjs⁄/cJSON.h
>

22 
	~<°dboﬁ.h
>

24 
	~"mosquôto.h
"

26 
	#PORT_UNDEFINED
 -1

	)

27 
	#PORT_UNIX
 0

	)

29 
	smosq_c⁄fig
 {

30 *
	mid
;

31 
	m¥Ÿocﬁ_vîsi⁄
;

32 
	mkì∑live
;

33 *
	mho°
;

34 
	mp‹t
;

35 
	mqos
;

36 *
	mböd_addªss
;

37 
boﬁ
 
	mdebug
;

38 
boﬁ
 
	mquõt
;

39 *
	mu£∫ame
;

40 *
	m∑ssw‹d
;

41 *
	m›ti⁄s_fûe
;

42 #ifde‡
WITH_TLS


43 *
	mˇfûe
;

44 *
	mˇ∑th
;

45 *
	m˚πfûe
;

46 *
	mkeyfûe
;

47 *
	mcùhîs
;

48 
boﬁ
 
	mö£cuª
;

49 *
	més_Æ≤
;

50 *
	més_vîsi⁄
;

51 *
	més_ígöe
;

52 *
	més_ígöe_k∑ss_sha1
;

53 *
	mkeyf‹m
;

54 #ifde‡
FINAL_WITH_TLS_PSK


55 *
	mpsk
;

56 *
	mpsk_idítôy
;

59 
boﬁ
 
	mvîbo£
;

60 
	mtimeout
;

61 #ifde‡
WITH_SOCKS


62 *
	msocks5_ho°
;

63 
	msocks5_p‹t
;

64 *
	msocks5_u£∫ame
;

65 *
	msocks5_∑ssw‹d
;

69 
	smosq_˘æ
 {

70 
mosq_c⁄fig
 
	mcfg
;

71 *
	mªque°_t›ic
;

72 *
	mª•⁄£_t›ic
;

73 *
	m∑ylﬂd
;

74 (*
	m∑ylﬂd_ˇŒback
)(
	mmosq_˘æ
 *, , const *);

75 *
	mu£rd©a
;

78 (*
	tFUNC_˘æ_maö
)(
	t¨gc
, *
	t¨gv
[], 
	tmosq_˘æ
 *
	t˘æ
);

80 
	`öô_c⁄fig
(
mosq_c⁄fig
 *
cfg
);

81 
	`˘æ_c⁄fig_∑r£
(
mosq_c⁄fig
 *
cfg
, *
¨gc
, **
¨gv
[]);

82 
	`˛õ¡_c⁄fig_lﬂd
(
mosq_c⁄fig
 *
cfg
);

83 
	`˛õ¡_c⁄fig_˛ónup
(
mosq_c⁄fig
 *
cfg
);

85 
	`˛õ¡_ªque°_ª•⁄£
(
mosq_˘æ
 *
˘æ
);

86 
	`˛õ¡_›ts_£t
(
mosquôto
 *
mosq
, 
mosq_c⁄fig
 *
cfg
);

87 
	`˛õ¡_c⁄√˘
(
mosquôto
 *
mosq
, 
mosq_c⁄fig
 *
cfg
);

89 
cJSON
 *
	`cJSON_AddI¡ToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, 
numbî
);

91 
	`dyn£c__¥öt_ußge
();

92 
	`dyn£c__maö
(
¨gc
, *
¨gv
[], 
mosq_˘æ
 *
˘æ
);

94 
	`dyn£c_˛õ¡__add_ªmove_rﬁe
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
, c⁄° *
comm™d
);

95 
	`dyn£c_˛õ¡__¸óã
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

96 
	`dyn£c_˛õ¡__dñëe
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

97 
	`dyn£c_˛õ¡__íabÀ_dißbÀ
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
, c⁄° *
comm™d
);

98 
	`dyn£c_˛õ¡__gë
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

99 
	`dyn£c_˛õ¡__li°_Æl
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

100 
	`dyn£c_˛õ¡__£t_id
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

101 
	`dyn£c_˛õ¡__£t_∑ssw‹d
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

103 
	`dyn£c_group__add_ªmove_˛õ¡
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
, c⁄° *
comm™d
);

104 
	`dyn£c_group__add_ªmove_rﬁe
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
, c⁄° *
comm™d
);

105 
	`dyn£c_group__¸óã
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

106 
	`dyn£c_group__dñëe
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

107 
	`dyn£c_group__gë
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

108 
	`dyn£c_group__li°_Æl
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

109 
	`dyn£c_group__£t_™⁄ymous
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

110 
	`dyn£c_group__gë_™⁄ymous
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

112 
	`dyn£c_rﬁe__¸óã
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

113 
	`dyn£c_rﬁe__dñëe
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

114 
	`dyn£c_rﬁe__gë
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

115 
	`dyn£c_rﬁe__li°_Æl
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

116 
	`dyn£c_rﬁe__add_a˛
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

117 
	`dyn£c_rﬁe__ªmove_a˛
(
¨gc
, *
¨gv
[], 
cJSON
 *
j_comm™d
);

120 
	`˘æ_hñp
();

121 
	`˘æ_maö
(
¨gc
, *
¨gv
[], 
mosq_˘æ
 *
˘æ
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/options.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<°d¨g.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 #i‚de‡
WIN32


28 
	~<uni°d.h
>

29 
	~<°rögs.h
>

31 
	~<¥o˚ss.h
>

32 
	~<wösock2.h
>

33 
	#¢¥ötf
 
•rötf_s


	)

34 
	#°∫ˇ£cmp
 
_°∫icmp


	)

37 
	~<mosquôto.h
>

38 
	~<mqâ_¥Ÿocﬁ.h
>

39 
	~"mosquôto_˘æ.h
"

40 
	~"gë_∑ssw‹d.h
"

42 #ifde‡
WITH_SOCKS


43 
mosquôto__∑r£_socks_uæ
(
mosq_c⁄fig
 *
cfg
, *
uæ
);

45 
˛õ¡_c⁄fig_löe_¥oc
(
mosq_c⁄fig
 *
cfg
, *
¨gc
, **
¨gvp
[]);

48 
	$öô_c⁄fig
(
mosq_c⁄fig
 *
cfg
)

50 
cfg
->
qos
 = 1;

51 
cfg
->
p‹t
 = 
PORT_UNDEFINED
;

52 
cfg
->
¥Ÿocﬁ_vîsi⁄
 = 
MQTT_PROTOCOL_V5
;

53 
	}
}

55 
	$˛õ¡_c⁄fig_˛ónup
(
mosq_c⁄fig
 *
cfg
)

57 
	`‰ì
(
cfg
->
id
);

58 
	`‰ì
(
cfg
->
ho°
);

59 
	`‰ì
(
cfg
->
böd_addªss
);

60 
	`‰ì
(
cfg
->
u£∫ame
);

61 
	`‰ì
(
cfg
->
∑ssw‹d
);

62 
	`‰ì
(
cfg
->
›ti⁄s_fûe
);

63 #ifde‡
WITH_TLS


64 
	`‰ì
(
cfg
->
ˇfûe
);

65 
	`‰ì
(
cfg
->
ˇ∑th
);

66 
	`‰ì
(
cfg
->
˚πfûe
);

67 
	`‰ì
(
cfg
->
keyfûe
);

68 
	`‰ì
(
cfg
->
cùhîs
);

69 
	`‰ì
(
cfg
->
és_Æ≤
);

70 
	`‰ì
(
cfg
->
és_vîsi⁄
);

71 
	`‰ì
(
cfg
->
és_ígöe
);

72 
	`‰ì
(
cfg
->
és_ígöe_k∑ss_sha1
);

73 
	`‰ì
(
cfg
->
keyf‹m
);

74 #ifde‡
FINAL_WITH_TLS_PSK


75 
	`‰ì
(
cfg
->
psk
);

76 
	`‰ì
(
cfg
->
psk_idítôy
);

79 #ifde‡
WITH_SOCKS


80 
	`‰ì
(
cfg
->
socks5_ho°
);

81 
	`‰ì
(
cfg
->
socks5_u£∫ame
);

82 
	`‰ì
(
cfg
->
socks5_∑ssw‹d
);

84 
	}
}

86 
	$˘æ_c⁄fig_∑r£
(
mosq_c⁄fig
 *
cfg
, *
¨gc
, **
¨gv
[])

88 
rc
;

90 
	`öô_c⁄fig
(
cfg
);

93 
rc
 = 
	`˛õ¡_c⁄fig_löe_¥oc
(
cfg
, 
¨gc
, 
¨gv
);

94 if(
rc
) Ñc;

97 
rc
 = 
	`˛õ¡_c⁄fig_lﬂd
(
cfg
);

98 if(
rc
) Ñc;

100 #ifde‡
WITH_TLS


101 if((
cfg
->
˚πfûe
 && !cfg->
keyfûe
) || (cfg->keyfile && !cfg->certfile)){

102 
	`Ârötf
(
°dîr
, "Error: Both certfileánd keyfile must beÖrovided if one ofÅhem is set.\n");

105 if((
cfg
->
keyf‹m
 && !cfg->
keyfûe
)){

106 
	`Ârötf
(
°dîr
, "Error: If keyform is set, keyfile must beálso specified.\n");

109 if((
cfg
->
és_ígöe_k∑ss_sha1
 && (!cfg->
keyf‹m
 || !cfg->
és_ígöe
))){

110 
	`Ârötf
(
°dîr
, "Error: when usingÅls-engine-kpass-sha1, bothÅls-engineánd keyform mustálso beÖrovided.\n");

114 #ifde‡
FINAL_WITH_TLS_PSK


115 if((
cfg
->
ˇfûe
 || cfg->
ˇ∑th
Ë&& cfg->
psk
){

116 
	`Ârötf
(
°dîr
, "Error: Only one of --psk or --cafile/--capath may be usedát once.\n");

119 if(
cfg
->
psk
 && !cfg->
psk_idítôy
){

120 
	`Ârötf
(
°dîr
, "Error: --psk-identityÑequired if --psk used.\n");

125 if(!
cfg
->
ho°
){

126 
cfg
->
ho°
 = 
	`°rdup
("localhost");

127 if(!
cfg
->
ho°
){

128 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

133  
MOSQ_ERR_SUCCESS
;

134 
	}
}

137 
	$˛õ¡_c⁄fig_löe_¥oc
(
mosq_c⁄fig
 *
cfg
, *
¨gc
, **
¨gvp
[])

139 **
¨gv
 = *
¨gvp
;

141 (*
¨gc
Ë&& 
¨gv
[0][0] == '-'){

142 if(!
	`°rcmp
(
¨gv
[0], "-A")){

143 if((*
¨gc
) == 1){

144 
	`Ârötf
(
°dîr
, "Error: -Aárgument given butÇoáddress specified.\n\n");

147 
cfg
->
böd_addªss
 = 
	`°rdup
(
¨gv
[1]);

149 
¨gv
++;

150 (*
¨gc
)--;

151 #ifde‡
WITH_TLS


152 }if(!
	`°rcmp
(
¨gv
[0], "--cafile")){

153 if((*
¨gc
) == 1){

154 
	`Ârötf
(
°dîr
, "Error: --cafileárgument given butÇo file specified.\n\n");

157 
cfg
->
ˇfûe
 = 
	`°rdup
(
¨gv
[1]);

159 
¨gv
++;

160 (*
¨gc
)--;

161 }if(!
	`°rcmp
(
¨gv
[0], "--capath")){

162 if((*
¨gc
) == 1){

163 
	`Ârötf
(
°dîr
, "Error: --capathárgument given butÇo directory specified.\n\n");

166 
cfg
->
ˇ∑th
 = 
	`°rdup
(
¨gv
[1]);

168 
¨gv
++;

169 (*
¨gc
)--;

170 }if(!
	`°rcmp
(
¨gv
[0], "--cert")){

171 if((*
¨gc
) == 1){

172 
	`Ârötf
(
°dîr
, "Error: --certárgument given butÇo file specified.\n\n");

175 
cfg
->
˚πfûe
 = 
	`°rdup
(
¨gv
[1]);

177 
¨gv
++;

178 (*
¨gc
)--;

179 }if(!
	`°rcmp
(
¨gv
[0], "--ciphers")){

180 if((*
¨gc
) == 1){

181 
	`Ârötf
(
°dîr
, "Error: --ciphersárgument given butÇo ciphers specified.\n\n");

184 
cfg
->
cùhîs
 = 
	`°rdup
(
¨gv
[1]);

186 
¨gv
++;

187 (*
¨gc
)--;

189 }if(!
	`°rcmp
(
¨gv
[0], "-d") || !strcmp(argv[0], "--debug")){

190 
cfg
->
debug
 = 
åue
;

191 }if(!
	`°rcmp
(
¨gv
[0], "--help")){

193 }if(!
	`°rcmp
(
¨gv
[0], "-h") || !strcmp(argv[0], "--host")){

194 if((*
¨gc
) == 1){

195 
	`Ârötf
(
°dîr
, "Error: -hárgument given butÇo host specified.\n\n");

198 
cfg
->
ho°
 = 
	`°rdup
(
¨gv
[1]);

200 
¨gv
++;

201 (*
¨gc
)--;

202 #ifde‡
WITH_TLS


203 }if(!
	`°rcmp
(
¨gv
[0], "--insecure")){

204 
cfg
->
ö£cuª
 = 
åue
;

206 }if(!
	`°rcmp
(
¨gv
[0], "-i") || !strcmp(argv[0], "--id")){

207 if((*
¨gc
) == 1){

208 
	`Ârötf
(
°dîr
, "Error: -iárgument given butÇo id specified.\n\n");

211 
cfg
->
id
 = 
	`°rdup
(
¨gv
[1]);

213 
¨gv
++;

214 (*
¨gc
)--;

215 #ifde‡
WITH_TLS


216 }if(!
	`°rcmp
(
¨gv
[0], "--key")){

217 if((*
¨gc
) == 1){

218 
	`Ârötf
(
°dîr
, "Error: --keyárgument given butÇo file specified.\n\n");

221 
cfg
->
keyfûe
 = 
	`°rdup
(
¨gv
[1]);

223 
¨gv
++;

224 (*
¨gc
)--;

225 }if(!
	`°rcmp
(
¨gv
[0], "--keyform")){

226 if((*
¨gc
) == 1){

227 
	`Ârötf
(
°dîr
, "Error: --keyformárgument given butÇo keyform specified.\n\n");

230 
cfg
->
keyf‹m
 = 
	`°rdup
(
¨gv
[1]);

232 
¨gv
++;

233 (*
¨gc
)--;

235 }if(!
	`°rcmp
(
¨gv
[0], "-L") || !strcmp(argv[0], "--url")){

236 if((*
¨gc
) == 1){

237 
	`Ârötf
(
°dîr
, "Error: -Lárgument given butÇo URL specified.\n\n");

240 *
uæ
 = 
¨gv
[1];

241 *
t›ic
;

242 *
tmp
;

244 if(!
	`°∫ˇ£cmp
(
uæ
, "mqtt://", 7)) {

245 
uæ
 += 7;

246 
cfg
->
p‹t
 = 1883;

247 } if(!
	`°∫ˇ£cmp
(
uæ
, "mqtts://", 8)) {

248 
uæ
 += 8;

249 
cfg
->
p‹t
 = 8883;

251 
	`Ârötf
(
°dîr
, "Error: unsupported URL scheme.\n\n");

254 
t›ic
 = 
	`°rchr
(
uæ
, '/');

255 if(!
t›ic
){

256 
	`Ârötf
(
°dîr
, "Error: Invalid URL for -Lárgument specified -Åopic missing.\n");

259 *
t›ic
++ = 0;

261 
tmp
 = 
	`°rchr
(
uæ
, '@');

262 if(
tmp
) {

263 *
tmp
++ = 0;

264 *
cﬁ⁄
 = 
	`°rchr
(
uæ
, ':');

265 if(
cﬁ⁄
) {

266 *
cﬁ⁄
 = 0;

267 
cfg
->
∑ssw‹d
 = 
	`°rdup
(
cﬁ⁄
 + 1);

269 
cfg
->
u£∫ame
 = 
	`°rdup
(
uæ
);

270 
uæ
 = 
tmp
;

272 
cfg
->
ho°
 = 
uæ
;

274 
tmp
 = 
	`°rchr
(
uæ
, ':');

275 if(
tmp
) {

276 *
tmp
++ = 0;

277 
cfg
->
p‹t
 = 
	`©oi
(
tmp
);

280 
cfg
->
ho°
 = 
	`°rdup
(cfg->host);

282 
¨gv
++;

283 (*
¨gc
)--;

284 }if(!
	`°rcmp
(
¨gv
[0], "-o")){

285 if((*
¨gc
) == 1){

286 
	`Ârötf
(
°dîr
, "Error: -oárgument given butÇo options file specified.\n\n");

289 
cfg
->
›ti⁄s_fûe
 = 
	`°rdup
(
¨gv
[1]);

291 
¨gv
++;

292 (*
¨gc
)--;

293 }if(!
	`°rcmp
(
¨gv
[0], "-p") || !strcmp(argv[0], "--port")){

294 if((*
¨gc
) == 1){

295 
	`Ârötf
(
°dîr
, "Error: -párgument given butÇoÖort specified.\n\n");

298 
cfg
->
p‹t
 = 
	`©oi
(
¨gv
[1]);

299 if(
cfg
->
p‹t
<0 || cfg->port>65535){

300 
	`Ârötf
(
°dîr
, "Eº‹: InvÆidÖ‹àgiví: %d\n", 
cfg
->
p‹t
);

304 
¨gv
++;

305 (*
¨gc
)--;

306 }if(!
	`°rcmp
(
¨gv
[0], "-P") || !strcmp(argv[0], "--pw")){

307 if((*
¨gc
) == 1){

308 
	`Ârötf
(
°dîr
, "Error: -Párgument given butÇoÖassword specified.\n\n");

311 
cfg
->
∑ssw‹d
 = 
	`°rdup
(
¨gv
[1]);

313 
¨gv
++;

314 (*
¨gc
)--;

315 #ifde‡
WITH_SOCKS


316 }if(!
	`°rcmp
(
¨gv
[0], "--proxy")){

317 if((*
¨gc
) == 1){

318 
	`Ârötf
(
°dîr
, "Error: --proxyárgument given butÇoÖroxy url specified.\n\n");

321 if(
	`mosquôto__∑r£_socks_uæ
(
cfg
, 
¨gv
[1])){

325 
¨gv
++;

326 (*
¨gc
)--;

328 #ifde‡
FINAL_WITH_TLS_PSK


329 }if(!
	`°rcmp
(
¨gv
[0], "--psk")){

330 if((*
¨gc
) == 1){

331 
	`Ârötf
(
°dîr
, "Error: --pskárgument given butÇo key specified.\n\n");

334 
cfg
->
psk
 = 
	`°rdup
(
¨gv
[1]);

336 
¨gv
++;

337 (*
¨gc
)--;

338 }if(!
	`°rcmp
(
¨gv
[0], "--psk-identity")){

339 if((*
¨gc
) == 1){

340 
	`Ârötf
(
°dîr
, "Error: --psk-identityárgument given butÇo identity specified.\n\n");

343 
cfg
->
psk_idítôy
 = 
	`°rdup
(
¨gv
[1]);

345 
¨gv
++;

346 (*
¨gc
)--;

348 }if(!
	`°rcmp
(
¨gv
[0], "-q") || !strcmp(argv[0], "--qos")){

349 if((*
¨gc
) == 1){

350 
	`Ârötf
(
°dîr
, "Error: -qárgument given butÇo QoS specified.\n\n");

353 
cfg
->
qos
 = 
	`©oi
(
¨gv
[1]);

354 if(
cfg
->
qos
<0 || cfg->qos>2){

355 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid QoS giví: %d\n", 
cfg
->
qos
);

359 
¨gv
++;

360 (*
¨gc
)--;

361 }if(!
	`°rcmp
(
¨gv
[0], "--quiet")){

362 
cfg
->
quõt
 = 
åue
;

363 #ifde‡
WITH_TLS


364 }if(!
	`°rcmp
(
¨gv
[0], "--tls-alpn")){

365 if((*
¨gc
) == 1){

366 
	`Ârötf
(
°dîr
, "Error: --tls-alpnárgument given butÇoÖrotocol specified.\n\n");

369 
cfg
->
és_Æ≤
 = 
	`°rdup
(
¨gv
[1]);

371 
¨gv
++;

372 (*
¨gc
)--;

373 }if(!
	`°rcmp
(
¨gv
[0], "--tls-engine")){

374 if((*
¨gc
) == 1){

375 
	`Ârötf
(
°dîr
, "Error: --tls-engineárgument given butÇoÉngine_id specified.\n\n");

378 
cfg
->
és_ígöe
 = 
	`°rdup
(
¨gv
[1]);

380 
¨gv
++;

381 (*
¨gc
)--;

382 }if(!
	`°rcmp
(
¨gv
[0], "--tls-engine-kpass-sha1")){

383 if((*
¨gc
) == 1){

384 
	`Ârötf
(
°dîr
, "Error: --tls-engine-kpass-sha1árgument given butÇo kpass sha1 specified.\n\n");

387 
cfg
->
és_ígöe_k∑ss_sha1
 = 
	`°rdup
(
¨gv
[1]);

389 
¨gv
++;

390 (*
¨gc
)--;

391 }if(!
	`°rcmp
(
¨gv
[0], "--tls-version")){

392 if((*
¨gc
) == 1){

393 
	`Ârötf
(
°dîr
, "Error: --tls-versionárgument given butÇo version specified.\n\n");

396 
cfg
->
és_vîsi⁄
 = 
	`°rdup
(
¨gv
[1]);

398 
¨gv
++;

399 (*
¨gc
)--;

401 }if(!
	`°rcmp
(
¨gv
[0], "-u") || !strcmp(argv[0], "--username")){

402 if((*
¨gc
) == 1){

403 
	`Ârötf
(
°dîr
, "Error: -uárgument given butÇo username specified.\n\n");

406 
cfg
->
u£∫ame
 = 
	`°rdup
(
¨gv
[1]);

408 
¨gv
++;

409 (*
¨gc
)--;

410 }if(!
	`°rcmp
(
¨gv
[0], "--unix")){

411 if((*
¨gc
) == 1){

412 
	`Ârötf
(
°dîr
, "Error: --unixárgument given butÇo socketÖath specified.\n\n");

415 
cfg
->
ho°
 = 
	`°rdup
(
¨gv
[1]);

416 
cfg
->
p‹t
 = 0;

418 
¨gv
++;

419 (*
¨gc
)--;

420 }if(!
	`°rcmp
(
¨gv
[0], "-V") || !strcmp(argv[0], "--protocol-version")){

421 if((*
¨gc
) == 1){

422 
	`Ârötf
(
°dîr
, "Error: --protocol-versionárgument given butÇo version specified.\n\n");

425 if(!
	`°rcmp
(
¨gv
[1], "mqttv31") || !strcmp(argv[1], "31")){

426 
cfg
->
¥Ÿocﬁ_vîsi⁄
 = 
MQTT_PROTOCOL_V31
;

427 }if(!
	`°rcmp
(
¨gv
[1], "mqttv311") || !strcmp(argv[1], "311")){

428 
cfg
->
¥Ÿocﬁ_vîsi⁄
 = 
MQTT_PROTOCOL_V311
;

429 }if(!
	`°rcmp
(
¨gv
[1], "mqttv5") || !strcmp(argv[1], "5")){

430 
cfg
->
¥Ÿocﬁ_vîsi⁄
 = 
MQTT_PROTOCOL_V5
;

432 
	`Ârötf
(
°dîr
, "Error: InvalidÖrotocol versionárgument given.\n\n");

436 
¨gv
++;

437 (*
¨gc
)--;

438 }if(!
	`°rcmp
(
¨gv
[0], "-v") || !strcmp(argv[0], "--verbose")){

439 
cfg
->
vîbo£
 = 1;

440 }if(!
	`°rcmp
(
¨gv
[0], "--version")){

443 
unknown_›ti⁄
;

445 
¨gv
++;

446 (*
¨gc
)--;

448 *
¨gvp
 = 
¨gv
;

450  
MOSQ_ERR_SUCCESS
;

452 
unknown_›ti⁄
:

453 
	`Ârötf
(
°dîr
, "Eº‹: Unknow¿›ti⁄ '%s'.\n",
¨gv
[0]);

455 
	}
}

457 *
	$gë_deÁu…_cfg_loˇti⁄
()

459 *
loc
 = 
NULL
;

460 
size_t
 
Àn
;

461 #i‚de‡
WIN32


462 *
ív
;

464 
ív
[1024];

465 
rc
;

468 #i‚de‡
WIN32


469 
ív
 = 
	`gëív
("XDG_CONFIG_HOME");

470 if(
ív
){

471 
Àn
 = 
	`°æí
(
ív
) + strlen("/mosquitto_ctrl") + 1;

472 
loc
 = 
	`mÆloc
(
Àn
);

473 if(!
loc
){

474 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

475  
NULL
;

477 
	`¢¥ötf
(
loc
, 
Àn
, "%s/mosquôto_˘æ", 
ív
);

478 
loc
[
Àn
-1] = '\0';

480 
ív
 = 
	`gëív
("HOME");

481 if(
ív
){

482 
Àn
 = 
	`°æí
(
ív
) + strlen("/.config/mosquitto_ctrl") + 1;

483 
loc
 = 
	`mÆloc
(
Àn
);

484 if(!
loc
){

485 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

486  
NULL
;

488 
	`¢¥ötf
(
loc
, 
Àn
, "%s/.c⁄fig/mosquôto_˘æ", 
ív
);

489 
loc
[
Àn
-1] = '\0';

494 
rc
 = 
	`GëEnvú⁄mítV¨übÀ
("USERPROFILE", 
ív
, 1024);

495 if(
rc
 > 0 &&Ñc < 1024){

496 
Àn
 = 
	`°æí
(
ív
) + strlen("\\mosquitto_ctrl.conf") + 1;

497 
loc
 = 
	`mÆloc
(
Àn
);

498 if(!
loc
){

499 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

500  
NULL
;

502 
	`¢¥ötf
(
loc
, 
Àn
, "%s\\mosquôto_˘æ.c⁄f", 
ív
);

503 
loc
[
Àn
-1] = '\0';

506  
loc
;

507 
	}
}

509 
	$˛õ¡_c⁄fig_lﬂd
(
mosq_c⁄fig
 *
cfg
)

511 
rc
;

512 
FILE
 *
Âå
 = 
NULL
;

513 
löe
[1024];

514 
cou¡
;

515 **
loˇl_¨gs
, **
¨gs
;

516 *
deÁu…_cfg
;

518 if(
cfg
->
›ti⁄s_fûe
){

519 
Âå
 = 
	`f›í
(
cfg
->
›ti⁄s_fûe
, "rt");

521 
deÁu…_cfg
 = 
	`gë_deÁu…_cfg_loˇti⁄
();

522 if(
deÁu…_cfg
){

523 
Âå
 = 
	`f›í
(
deÁu…_cfg
, "rt");

524 
	`‰ì
(
deÁu…_cfg
);

528 if(
Âå
){

529 
loˇl_¨gs
 = 
	`mÆloc
(3*(*));

530 if(
loˇl_¨gs
 =
NULL
){

531 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

532 
	`f˛o£
(
Âå
);

535 
	`fgës
(
löe
, ÷öe), 
Âå
)){

536 if(
löe
[0] == '#') ;

538 
löe
[
	`°æí
(line)-1] == 10 ||Üine[strlen(line)-1] == 13){

539 
löe
[
	`°æí
(line)-1] = 0;

541 
loˇl_¨gs
[0] = 
	`°πok
(
löe
, " ");

542 if(
loˇl_¨gs
[0]){

543 
loˇl_¨gs
[1] = 
	`°πok
(
NULL
, " ");

544 if(
loˇl_¨gs
[1]){

545 
cou¡
 = 2;

547 
cou¡
 = 1;

549 
¨gs
 = 
loˇl_¨gs
;

550 
rc
 = 
	`˛õ¡_c⁄fig_löe_¥oc
(
cfg
, &
cou¡
, &
¨gs
);

551 if(
rc
){

552 
	`f˛o£
(
Âå
);

553 
	`‰ì
(
loˇl_¨gs
);

554  
rc
;

558 
	`f˛o£
(
Âå
);

559 
	`‰ì
(
loˇl_¨gs
);

562 
	}
}

565 
	$˛õ¡_›ts_£t
(
mosquôto
 *
mosq
, 
mosq_c⁄fig
 *
cfg
)

567 
rc
;

568 
¥om±
[1000];

569 
∑ssw‹d
[1000];

571 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
cfg
->
¥Ÿocﬁ_vîsi⁄
);

573 if(
cfg
->
u£∫ame
 && cfg->
∑ssw‹d
 =
NULL
){

575 
	`¢¥ötf
(
¥om±
, ’rom±), "Passw‹d f‹ %s: ", 
cfg
->
u£∫ame
);

576 
rc
 = 
	`gë_∑ssw‹d
(
¥om±
, 
NULL
, 
Ál£
, 
∑ssw‹d
, (password));

577 if(
rc
){

578 
	`Ârötf
(
°dîr
, "Error gettingÖassword.\n");

579 
	`mosquôto_lib_˛ónup
();

582 
cfg
->
∑ssw‹d
 = 
	`°rdup
(password);

583 if(
cfg
->
∑ssw‹d
 =
NULL
){

584 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

585 
	`mosquôto_lib_˛ónup
();

590 if((
cfg
->
u£∫ame
 || cfg->
∑ssw‹d
Ë&& 
	`mosquôto_u£∫ame_pw_£t
(
mosq
, cfg->username, cfg->password)){

591 
	`Ârötf
(
°dîr
, "Error: Problem setting usernameánd/orÖassword.\n");

592 
	`mosquôto_lib_˛ónup
();

595 #ifde‡
WITH_TLS


596 if(
cfg
->
ˇfûe
 || cfg->
ˇ∑th
){

597 
rc
 = 
	`mosquôto_és_£t
(
mosq
, 
cfg
->
ˇfûe
, cfg->
ˇ∑th
, cfg->
˚πfûe
, cfg->
keyfûe
, 
NULL
);

598 if(
rc
){

599 if(
rc
 =
MOSQ_ERR_INVAL
){

600 
	`Ârötf
(
°dîr
, "Error: Problem setting TLS options: FileÇot found.\n");

602 
	`Ârötf
(
°dîr
, "Eº‹: ProbÀm sëtög TLS o±i⁄s: %s.\n", 
	`mosquôto_°ªº‹
(
rc
));

604 
	`mosquôto_lib_˛ónup
();

608 if(
cfg
->
ö£cuª
 && 
	`mosquôto_és_ö£cuª_£t
(
mosq
, 
åue
)){

609 
	`Ârötf
(
°dîr
, "Error: Problem setting TLS insecure option.\n");

610 
	`mosquôto_lib_˛ónup
();

613 if(
cfg
->
és_ígöe
 && 
	`mosquôto_°rög_›ti⁄
(
mosq
, 
MOSQ_OPT_TLS_ENGINE
, cfg->tls_engine)){

614 
	`Ârötf
(
°dîr
, "Eº‹: ProbÀm sëtög TLSÉngöe, i†%†®vÆidÉngöe?\n", 
cfg
->
és_ígöe
);

615 
	`mosquôto_lib_˛ónup
();

618 if(
cfg
->
keyf‹m
 && 
	`mosquôto_°rög_›ti⁄
(
mosq
, 
MOSQ_OPT_TLS_KEYFORM
, cfg->keyform)){

619 
	`Ârötf
(
°dîr
, "Error: Problem setting key form, it must be one of 'pem' or 'engine'.\n");

620 
	`mosquôto_lib_˛ónup
();

623 if(
cfg
->
és_ígöe_k∑ss_sha1
 && 
	`mosquôto_°rög_›ti⁄
(
mosq
, 
MOSQ_OPT_TLS_ENGINE_KPASS_SHA1
, cfg->tls_engine_kpass_sha1)){

624 
	`Ârötf
(
°dîr
, "Error: Problem setting TLSÉngine keyÖass sha, is itá 40 character hex string?\n");

625 
	`mosquôto_lib_˛ónup
();

628 if(
cfg
->
és_Æ≤
 && 
	`mosquôto_°rög_›ti⁄
(
mosq
, 
MOSQ_OPT_TLS_ALPN
, cfg->tls_alpn)){

629 
	`Ârötf
(
°dîr
, "Error: Problem setting TLS ALPNÖrotocol.\n");

630 
	`mosquôto_lib_˛ónup
();

633 #ifde‡
FINAL_WITH_TLS_PSK


634 if(
cfg
->
psk
 && 
	`mosquôto_és_psk_£t
(
mosq
, cfg->psk, cfg->
psk_idítôy
, 
NULL
)){

635 
	`Ârötf
(
°dîr
, "Error: Problem setting TLS-PSK options.\n");

636 
	`mosquôto_lib_˛ónup
();

640 if((
cfg
->
és_vîsi⁄
 || cfg->
cùhîs
Ë&& 
	`mosquôto_és_›ts_£t
(
mosq
, 1, cfg->tls_version, cfg->ciphers)){

641 
	`Ârötf
(
°dîr
, "Error: Problem setting TLS options, checkÅhe optionsáre valid.\n");

642 
	`mosquôto_lib_˛ónup
();

646 #ifde‡
WITH_SOCKS


647 if(
cfg
->
socks5_ho°
){

648 
rc
 = 
	`mosquôto_socks5_£t
(
mosq
, 
cfg
->
socks5_ho°
, cfg->
socks5_p‹t
, cfg->
socks5_u£∫ame
, cfg->
socks5_∑ssw‹d
);

649 if(
rc
){

650 
	`mosquôto_lib_˛ónup
();

651  
rc
;

655  
MOSQ_ERR_SUCCESS
;

656 
	}
}

659 
	$˛õ¡_c⁄√˘
(
mosquôto
 *
mosq
, 
mosq_c⁄fig
 *
cfg
)

661 #i‚de‡
WIN32


662 *
îr
;

664 
îr
[1024];

666 
rc
;

667 
p‹t
;

669 if(
cfg
->
p‹t
 =
PORT_UNDEFINED
){

670 #ifde‡
WITH_TLS


671 if(
cfg
->
ˇfûe
 || cfg->
ˇ∑th


672 #ifde‡
FINAL_WITH_TLS_PSK


673 || 
cfg
->
psk


676 
p‹t
 = 8883;

680 
p‹t
 = 1883;

683 
p‹t
 = 
cfg
->port;

686 
rc
 = 
	`mosquôto_c⁄√˘_böd_v5
(
mosq
, 
cfg
->
ho°
, 
p‹t
, 60, cfg->
böd_addªss
, 
NULL
);

687 if(
rc
>0){

688 if(
rc
 =
MOSQ_ERR_ERRNO
){

689 #i‚de‡
WIN32


690 
îr
 = 
	`°ªº‹
(
î∫o
);

692 
	`F‹m©Mesßge
(
FORMAT_MESSAGE_FROM_SYSTEM
, 
NULL
, 
î∫o
, 0, (
LPTSTR
)&
îr
, 1024, NULL);

694 
	`Ârötf
(
°dîr
, "Eº‹: %s\n", 
îr
);

696 
	`Ârötf
(
°dîr
, "U«bÀÅÿc⁄√˘ (%s).\n", 
	`mosquôto_°ªº‹
(
rc
));

698 
	`mosquôto_lib_˛ónup
();

699  
rc
;

701  
MOSQ_ERR_SUCCESS
;

702 
	}
}

704 #ifde‡
WITH_SOCKS


706 
	$mosquôto__uædecode
(*
°r
)

708 
i
, 
j
;

709 
size_t
 
Àn
;

710 if(!
°r
)  0;

712 if(!
	`°rchr
(
°r
, '%'))  0;

714 
Àn
 = 
	`°æí
(
°r
);

715 
i
=0; i<
Àn
; i++){

716 if(
°r
[
i
] == '%'){

717 if(
i
+2 >
Àn
){

720 if(
°r
[
i
+1] == '2' && str[i+2] == '5'){

721 
°r
[
i
] = '%';

722 
Àn
 -= 2;

723 
j
=
i
+1; j<
Àn
; j++){

724 
°r
[
j
] = str[j+2];

726 
°r
[
j
] = '\0';

727 }if(
°r
[
i
+1] == '3' && (str[i+2] == 'A' || str[i+2] == 'a')){

728 
°r
[
i
] = ':';

729 
Àn
 -= 2;

730 
j
=
i
+1; j<
Àn
; j++){

731 
°r
[
j
] = str[j+2];

733 
°r
[
j
] = '\0';

734 }if(
°r
[
i
+1] == '4' && str[i+2] == '0'){

735 
°r
[
i
] = ':';

736 
Àn
 -= 2;

737 
j
=
i
+1; j<
Àn
; j++){

738 
°r
[
j
] = str[j+2];

740 
°r
[
j
] = '\0';

747 
	}
}

749 
	$mosquôto__∑r£_socks_uæ
(
mosq_c⁄fig
 *
cfg
, *
uæ
)

751 *
°r
;

752 
size_t
 
i
;

753 *
u£∫ame
 = 
NULL
, *
∑ssw‹d
 = NULL, *
ho°
 = NULL, *
p‹t
 = NULL;

754 *
u£∫ame_‹_ho°
 = 
NULL
;

755 
size_t
 
°¨t
;

756 
size_t
 
Àn
;

757 
boﬁ
 
have_auth
 = 
Ál£
;

758 
p‹t_öt
;

760 if(!
	`°∫cmp
(
uæ
, "socks5h://", 
	`°æí
("socks5h://"))){

761 
°r
 = 
uæ
 + 
	`°æí
("socks5h://");

763 
	`Ârötf
(
°dîr
, "Eº‹: Unsuµ‹ãdÖroxyÖrŸocﬁ: %s\n", 
uæ
);

774 
°¨t
 = 0;

775 
i
=0; i<
	`°æí
(
°r
); i++){

776 if(
°r
[
i
] == ':'){

777 if(
i
 =
°¨t
){

778 
˛ónup
;

780 if(
have_auth
){

783 if(
ho°
){

785 
˛ónup
;

787 
Àn
 = 
i
-
°¨t
;

788 
ho°
 = 
	`mÆloc
(
Àn
 + 1);

789 if(!
ho°
){

790 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

791 
˛ónup
;

793 
	`mem˝y
(
ho°
, &(
°r
[
°¨t
]), 
Àn
);

794 
ho°
[
Àn
] = '\0';

795 
°¨t
 = 
i
+1;

796 }if(!
u£∫ame_‹_ho°
){

800 
Àn
 = 
i
-
°¨t
;

801 
u£∫ame_‹_ho°
 = 
	`mÆloc
(
Àn
 + 1);

802 if(!
u£∫ame_‹_ho°
){

803 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

804 
˛ónup
;

806 
	`mem˝y
(
u£∫ame_‹_ho°
, &(
°r
[
°¨t
]), 
Àn
);

807 
u£∫ame_‹_ho°
[
Àn
] = '\0';

808 
°¨t
 = 
i
+1;

810 }if(
°r
[
i
] == '@'){

811 if(
i
 =
°¨t
){

812 
˛ónup
;

814 
have_auth
 = 
åue
;

815 if(
u£∫ame_‹_ho°
){

817 
u£∫ame
 = 
u£∫ame_‹_ho°
;

818 
u£∫ame_‹_ho°
 = 
NULL
;

820 
Àn
 = 
i
-
°¨t
;

821 
∑ssw‹d
 = 
	`mÆloc
(
Àn
 + 1);

822 if(!
∑ssw‹d
){

823 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

824 
˛ónup
;

826 
	`mem˝y
(
∑ssw‹d
, &(
°r
[
°¨t
]), 
Àn
);

827 
∑ssw‹d
[
Àn
] = '\0';

828 
°¨t
 = 
i
+1;

832 if(
u£∫ame
){

834 
˛ónup
;

836 
Àn
 = 
i
-
°¨t
;

837 
u£∫ame
 = 
	`mÆloc
(
Àn
 + 1);

838 if(!
u£∫ame
){

839 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

840 
˛ónup
;

842 
	`mem˝y
(
u£∫ame
, &(
°r
[
°¨t
]), 
Àn
);

843 
u£∫ame
[
Àn
] = '\0';

844 
°¨t
 = 
i
+1;

850 if(
i
 > 
°¨t
){

851 
Àn
 = 
i
-
°¨t
;

852 if(
ho°
){

855 
p‹t
 = 
	`mÆloc
(
Àn
 + 1);

856 if(!
p‹t
){

857 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

858 
˛ónup
;

860 
	`mem˝y
(
p‹t
, &(
°r
[
°¨t
]), 
Àn
);

861 
p‹t
[
Àn
] = '\0';

862 }if(
u£∫ame_‹_ho°
){

865 
ho°
 = 
u£∫ame_‹_ho°
;

866 
u£∫ame_‹_ho°
 = 
NULL
;

867 
p‹t
 = 
	`mÆloc
(
Àn
 + 1);

868 if(!
p‹t
){

869 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

870 
˛ónup
;

872 
	`mem˝y
(
p‹t
, &(
°r
[
°¨t
]), 
Àn
);

873 
p‹t
[
Àn
] = '\0';

875 
ho°
 = 
	`mÆloc
(
Àn
 + 1);

876 if(!
ho°
){

877 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

878 
˛ónup
;

880 
	`mem˝y
(
ho°
, &(
°r
[
°¨t
]), 
Àn
);

881 
ho°
[
Àn
] = '\0';

885 if(!
ho°
){

886 
	`Ârötf
(
°dîr
, "Error: InvalidÖroxy.\n");

887 
˛ónup
;

890 if(
	`mosquôto__uædecode
(
u£∫ame
)){

891 
˛ónup
;

893 if(
	`mosquôto__uædecode
(
∑ssw‹d
)){

894 
˛ónup
;

896 if(
p‹t
){

897 
p‹t_öt
 = 
	`©oi
(
p‹t
);

898 if(
p‹t_öt
 < 1 ||Öort_int > 65535){

899 
	`Ârötf
(
°dîr
, "Eº‹: InvÆidÖroxyÖ‹à%d\n", 
p‹t_öt
);

900 
˛ónup
;

902 
	`‰ì
(
p‹t
);

904 
p‹t_öt
 = 1080;

907 
cfg
->
socks5_u£∫ame
 = 
u£∫ame
;

908 
cfg
->
socks5_∑ssw‹d
 = 
∑ssw‹d
;

909 
cfg
->
socks5_ho°
 = 
ho°
;

910 
cfg
->
socks5_p‹t
 = 
p‹t_öt
;

913 
˛ónup
:

914 
	`‰ì
(
u£∫ame_‹_ho°
);

915 
	`‰ì
(
u£∫ame
);

916 
	`‰ì
(
∑ssw‹d
);

917 
	`‰ì
(
ho°
);

918 
	`‰ì
(
p‹t
);

920 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_passwd/get_password.c

19 
	~"c⁄fig.h
"

21 
	~<°dboﬁ.h
>

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 #ifde‡
WIN32


27 
	~<wödows.h
>

28 
	~<¥o˚ss.h
>

29 
	#¢¥ötf
 
•rötf_s


	)

30 
	~<io.h
>

31 
	~<wödows.h
>

33 
	~<uni°d.h
>

34 
	~<ãrmios.h
>

35 
	~<sys/°©.h
>

38 
	~"gë_∑ssw‹d.h
"

40 
	#MAX_BUFFER_LEN
 65500

	)

41 
	#SALT_LEN
 12

	)

43 
	$gë_∑ssw‹d__ª£t_ãrm
()

45 #i‚de‡
WIN32


46 
ãrmios
 
ts
;

48 
	`tcgë©å
(0, &
ts
);

49 
ts
.
c_lÊag
 |
ECHO
 | 
ICANON
;

50 
	`tc£èâr
(0, 
TCSANOW
, &
ts
);

52 
	}
}

55 
	$gës_quõt
(*
s
, 
Àn
)

57 #ifde‡
WIN32


58 
HANDLE
 
h
;

59 
DWORD
 
c⁄_‹ig
, 
c⁄_quõt
 = 0;

60 
DWORD
 
ªad_Àn
 = 0;

62 
	`mem£t
(
s
, 0, 
Àn
);

63 
h
 = 
	`GëStdH™dÀ
(
STD_INPUT_HANDLE
);

64 
	`GëC⁄sﬁeMode
(
h
, &
c⁄_‹ig
);

65 
c⁄_quõt
 = 
c⁄_‹ig
;

66 
c⁄_quõt
 &~
ENABLE_ECHO_INPUT
;

67 
c⁄_quõt
 |
ENABLE_LINE_INPUT
;

68 
	`SëC⁄sﬁeMode
(
h
, 
c⁄_quõt
);

69 if(!
	`RódC⁄sﬁe
(
h
, 
s
, 
Àn
, &
ªad_Àn
, 
NULL
)){

70 
	`SëC⁄sﬁeMode
(
h
, 
c⁄_‹ig
);

73 
s
[
	`°æí
(s)-1] == 10 || s[strlen(s)-1] == 13){

74 
s
[
	`°æí
(s)-1] = 0;

76 if(
	`°æí
(
s
) == 0){

79 
	`SëC⁄sﬁeMode
(
h
, 
c⁄_‹ig
);

83 
ãrmios
 
ts_quõt
, 
ts_‹ig
;

84 *
rs
;

86 
	`mem£t
(
s
, 0, (
size_t
)
Àn
);

87 
	`tcgë©å
(0, &
ts_‹ig
);

88 
ts_quõt
 = 
ts_‹ig
;

89 
ts_quõt
.
c_lÊag
 &()(~(
ECHO
 | 
ICANON
));

90 
	`tc£èâr
(0, 
TCSANOW
, &
ts_quõt
);

92 
rs
 = 
	`fgës
(
s
, 
Àn
, 
°dö
);

93 
	`tc£èâr
(0, 
TCSANOW
, &
ts_‹ig
);

95 if(!
rs
){

98 
s
[
	`°æí
(s)-1] == 10 || s[strlen(s)-1] == 13){

99 
s
[
	`°æí
(s)-1] = 0;

101 if(
	`°æí
(
s
) == 0){

107 
	}
}

109 
	$gë_∑ssw‹d
(c⁄° *
¥om±
, c⁄° *
vîify_¥om±
, 
boﬁ
 
quõt
, *
∑ssw‹d
, 
size_t
 
Àn
)

111 
pw1
[
MAX_BUFFER_LEN
], 
pw2
[MAX_BUFFER_LEN];

112 
size_t
 
möLí
;

113 
möLí
 = 
Àn
 < 
MAX_BUFFER_LEN
 ?Üen : MAX_BUFFER_LEN;

115 
	`¥ötf
("%s", 
¥om±
);

116 
	`fÊush
(
°dout
);

117 if(
	`gës_quõt
(
pw1
, ()
möLí
)){

118 if(!
quõt
){

119 
	`Ârötf
(
°dîr
, "Error: EmptyÖassword.\n");

123 
	`¥ötf
("\n");

125 if(
vîify_¥om±
){

126 
	`¥ötf
("%s", 
vîify_¥om±
);

127 
	`fÊush
(
°dout
);

128 if(
	`gës_quõt
(
pw2
, ()
möLí
)){

129 if(!
quõt
){

130 
	`Ârötf
(
°dîr
, "Error: EmptyÖassword.\n");

134 
	`¥ötf
("\n");

136 if(
	`°rcmp
(
pw1
, 
pw2
)){

137 if(!
quõt
){

138 
	`Ârötf
(
°dîr
, "Error: Passwords doÇot match.\n");

144 
	`°∫˝y
(
∑ssw‹d
, 
pw1
, 
möLí
);

146 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_passwd/get_password.h

1 #i‚de‡
GET_PASSWORD_H


2 
	#GET_PASSWORD_H


	)

21 
	~<°dboﬁ.h
>

23 
gë_∑ssw‹d__ª£t_ãrm
();

24 
gë_∑ssw‹d
(c⁄° *
¥om±
, c⁄° *
vîify_¥om±
, 
boﬁ
 
quõt
, *
∑ssw‹d
, 
size_t
 
Àn
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_passwd/mosquitto_passwd.c

19 
	~"c⁄fig.h
"

21 
	~<˘y≥.h
>

22 
	~<î∫o.h
>

23 
	~<›ís¶/evp.h
>

24 
	~<›ís¶/ønd.h
>

25 
	~<sig«l.h
>

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

30 
	~"gë_∑ssw‹d.h
"

31 
	~"∑ssw‹d_mosq.h
"

33 #ifde‡
WIN32


34 
	~<wödows.h
>

35 
	~<¥o˚ss.h
>

36 #i‚de‡
__˝lu•lus


37 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1900

38 
	#boﬁ
 

	)

39 
	#åue
 1

	)

40 
	#Ál£
 0

	)

42 
	~<°dboﬁ.h
>

45 
	#¢¥ötf
 
•rötf_s


	)

46 
	~<io.h
>

47 
	~<wödows.h
>

49 
	~<°dboﬁ.h
>

50 
	~<uni°d.h
>

51 
	~<ãrmios.h
>

52 
	~<sys/°©.h
>

55 
	#MAX_BUFFER_LEN
 65500

	)

56 
	#SALT_LEN
 12

	)

58 
	~"misc_mosq.h
"

60 
	scb_hñ≥r
 {

61 c⁄° *
	mlöe
;

62 c⁄° *
	mu£∫ame
;

63 c⁄° *
	m∑ssw‹d
;

64 
	môî©i⁄s
;

65 
boﬁ
 
	mfound
;

68 
mosquôto_pwhash_ty≥
 
	ghashty≥
 = 
pw_sha512_pbkdf2
;

70 #ifde‡
WIN32


71 
FILE
 *
	$mpw_tmpfûe
()

73  
	`tmpfûe
();

74 
	}
}

77 
	gÆph™um
[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

79 
	gtmpfûe_∑th
[36];

80 
FILE
 *
	$mpw_tmpfûe
()

82 
fd
;

83 
size_t
 
i
;

85 if(
	`RAND_byãs
(
tmpfûe_∑th
, (tmpfile_path)) != 1){

86  
NULL
;

89 
	`°r˝y
((*)
tmpfûe_∑th
, "/tmp/");

91 
i
=
	`°æí
((*)
tmpfûe_∑th
); i<(tmpfile_path)-8; i++){

92 
tmpfûe_∑th
[
i
] = 
Æph™um
[tmpfile_path[i]%((alphanum)-1)];

94 
tmpfûe_∑th
[(tmpfile_path)-8] = '-';

95 
i
=(
tmpfûe_∑th
)-7; i<(tmpfile_path)-1; i++){

96 
tmpfûe_∑th
[
i
] = 'X';

98 
tmpfûe_∑th
[(tmpfile_path)-1] = '\0';

100 
	`umask
(077);

101 
fd
 = 
	`mk°emp
((*)
tmpfûe_∑th
);

102 if(
fd
 < 0Ë 
NULL
;

103 
	`u∆ök
((*)
tmpfûe_∑th
);

105  
	`fd›í
(
fd
, "w+");

106 
	}
}

109 
	$log__¥ötf
(*
mosq
, 
Àvñ
, c⁄° *
fmt
, ...)

112 
	`UNUSED
(
mosq
);

113 
	`UNUSED
(
Àvñ
);

114 
	`UNUSED
(
fmt
);

116 
	}
}

119 
	$¥öt_ußge
()

121 
	`¥ötf
("mosquitto_passwd isáÅool for managingÖassword files for mosquitto.\n\n");

122 
	`¥ötf
("Usage: mosquitto_passwd [-H sha512 | -H sha512-pbkdf2] [-c | -D]Öasswordfile username\n");

123 
	`¥ötf
(" mosquitto_passwd [-H sha512 | -H sha512-pbkdf2] [-c] -bÖasswordfile usernameÖassword\n");

124 
	`¥ötf
(" mosquitto_passwd -UÖasswordfile\n");

125 
	`¥ötf
(" -b :Ñun in batch modeÅoállowÖassingÖasswords onÅhe commandÜine.\n");

126 
	`¥ötf
(" -c : createáÇewÖassword file. This will overwriteÉxisting files.\n");

127 
	`¥ötf
(" -D : deleteÅhe usernameÑatherÅhanádding/updating itsÖassword.\n");

128 
	`¥ötf
(" -H : specifyÅhe hashingálgorithm. DefaultsÅo sha512-pbkdf2, which isÑecommended.\n");

129 
	`¥ötf
(" Mosquitto 1.6ándÉarlier defaultedÅo sha512.\n");

130 
	`¥ötf
(" -U : updateáÖlainÅextÖassword fileÅo use hashedÖasswords.\n");

131 
	`¥ötf
("\nSee https://mosquitto.org/ for more information.\n\n");

132 
	}
}

134 
	$ouçut_√w_∑ssw‹d
(
FILE
 *
Âå
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
, 
ôî©i⁄s
)

136 
rc
;

137 *
ß…64
 = 
NULL
, *
hash64
 = NULL;

138 
mosquôto_pw
 
pw
;

140 if(
∑ssw‹d
 =
NULL
){

141 
	`Ârötf
(
°dîr
, "Error: InternalÉrror,ÇoÖassword given.\n");

144 
	`mem£t
(&
pw
, 0, (pw));

146 
pw
.
hashty≥
 = hashtype;

148 if(
	`pw__hash
(
∑ssw‹d
, &
pw
, 
åue
, 
ôî©i⁄s
)){

149 
	`Ârötf
(
°dîr
, "Error: UnableÅo hashÖassword.\n");

153 
rc
 = 
	`ba£64__ícode
(
pw
.
ß…
, ’w.ß…), &
ß…64
);

154 if(
rc
){

155 
	`‰ì
(
ß…64
);

156 
	`Ârötf
(
°dîr
, "Error: UnableÅoÉncode salt.\n");

160 
rc
 = 
	`ba£64__ícode
(
pw
.
∑ssw‹d_hash
, ’w.∑ssw‹d_hash), &
hash64
);

161 if(
rc
){

162 
	`‰ì
(
ß…64
);

163 
	`‰ì
(
hash64
);

164 
	`Ârötf
(
°dîr
, "Error: UnableÅoÉncode hash.\n");

168 if(
pw
.
hashty≥
 =
pw_sha512_pbkdf2
){

169 
	`Ârötf
(
Âå
, "%s:$%d$%d$%s$%s\n", 
u£∫ame
, 
hashty≥
, 
ôî©i⁄s
, 
ß…64
, 
hash64
);

171 
	`Ârötf
(
Âå
, "%s:$%d$%s$%s\n", 
u£∫ame
, 
hashty≥
, 
ß…64
, 
hash64
);

173 
	`‰ì
(
ß…64
);

174 
	`‰ì
(
hash64
);

177 
	}
}

180 
	$pwfûe_ôî©e
(
FILE
 *
Âå
, FILE *
·mp
,

181 (*
cb
)(
FILE
 *, FILE *, c⁄° *, c⁄° *, c⁄° *, 
cb_hñ≥r
 *),

182 
cb_hñ≥r
 *
hñ≥r
)

184 *
buf
;

185 
buÊí
 = 1024;

186 *
lbuf
;

187 
lbuÊí
;

188 
rc
 = 1;

189 
löe
 = 0;

190 *
u£∫ame
, *
∑ssw‹d
;

192 
buf
 = 
	`mÆloc
((
size_t
)
buÊí
);

193 if(
buf
 =
NULL
){

194 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

197 
lbuÊí
 = 
buÊí
;

198 
lbuf
 = 
	`mÆloc
((
size_t
)
lbuÊí
);

199 if(
lbuf
 =
NULL
){

200 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

201 
	`‰ì
(
buf
);

205 !
	`„of
(
Âå
Ë&& 
	`fgës_exãndög
(&
buf
, &
buÊí
, fptr)){

206 if(
lbuÊí
 !
buÊí
){

207 
	`‰ì
(
lbuf
);

208 
lbuÊí
 = 
buÊí
;

209 
lbuf
 = 
	`mÆloc
((
size_t
)
lbuÊí
);

210 if(
lbuf
 =
NULL
){

211 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

212 
	`‰ì
(
buf
);

216 
	`mem˝y
(
lbuf
, 
buf
, (
size_t
)
buÊí
);

217 
löe
++;

218 
u£∫ame
 = 
	`°πok
(
buf
, ":");

219 
∑ssw‹d
 = 
	`°πok
(
NULL
, ":");

220 if(
u£∫ame
 =
NULL
 || 
∑ssw‹d
 == NULL){

221 
	`Ârötf
(
°dîr
, "Eº‹: C‹ru±Öassw‹d fûê©Üöê%d.\n", 
löe
);

222 
	`‰ì
(
lbuf
);

223 
	`‰ì
(
buf
);

226 
u£∫ame
 = 
	`misc__åimbœnks
(username);

227 
∑ssw‹d
 = 
	`misc__åimbœnks
(password);

229 if(
	`°æí
(
u£∫ame
Ë=0 || såÀn(
∑ssw‹d
) == 0){

230 
	`Ârötf
(
°dîr
, "Eº‹: C‹ru±Öassw‹d fûê©Üöê%d.\n", 
löe
);

231 
	`‰ì
(
lbuf
);

232 
	`‰ì
(
buf
);

236 
rc
 = 
	`cb
(
Âå
, 
·mp
, 
u£∫ame
, 
∑ssw‹d
, 
lbuf
, 
hñ≥r
);

237 if(
rc
){

241 
	`‰ì
(
lbuf
);

242 
	`‰ì
(
buf
);

244  
rc
;

245 
	}
}

251 
	$dñëe_pwu£r_cb
(
FILE
 *
Âå
, FILE *
·mp
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
, c⁄° *
löe
, 
cb_hñ≥r
 *
hñ≥r
)

253 
	`UNUSED
(
Âå
);

254 
	`UNUSED
(
∑ssw‹d
);

255 
	`UNUSED
(
löe
);

257 if(
	`°rcmp
(
u£∫ame
, 
hñ≥r
->username)){

259 
	`Ârötf
(
·mp
, "%s", 
löe
);

262 
hñ≥r
->
found
 = 
åue
;

265 
	}
}

267 
	$dñëe_pwu£r
(
FILE
 *
Âå
, FILE *
·mp
, c⁄° *
u£∫ame
)

269 
cb_hñ≥r
 
hñ≥r
;

270 
rc
;

272 
	`mem£t
(&
hñ≥r
, 0, (helper));

273 
hñ≥r
.
u£∫ame
 = username;

274 
rc
 = 
	`pwfûe_ôî©e
(
Âå
, 
·mp
, 
dñëe_pwu£r_cb
, &
hñ≥r
);

276 if(
hñ≥r
.
found
 =
Ál£
){

277 
	`Ârötf
(
°dîr
, "W¨nög: U£∏%†nŸ found i¿∑ssw‹d fûe.\n", 
u£∫ame
);

280  
rc
;

281 
	}
}

288 
	$upd©e_fûe_cb
(
FILE
 *
Âå
, FILE *
·mp
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
, c⁄° *
löe
, 
cb_hñ≥r
 *
hñ≥r
)

290 
	`UNUSED
(
Âå
);

291 
	`UNUSED
(
löe
);

293 if(
hñ≥r
){

294  
	`ouçut_√w_∑ssw‹d
(
·mp
, 
u£∫ame
, 
∑ssw‹d
, 
hñ≥r
->
ôî©i⁄s
);

296  
	`ouçut_√w_∑ssw‹d
(
·mp
, 
u£∫ame
, 
∑ssw‹d
, 
PW_DEFAULT_ITERATIONS
);

298 
	}
}

300 
	$upd©e_fûe
(
FILE
 *
Âå
, FILE *
·mp
)

302  
	`pwfûe_ôî©e
(
Âå
, 
·mp
, 
upd©e_fûe_cb
, 
NULL
);

303 
	}
}

309 
	$upd©e_pwu£r_cb
(
FILE
 *
Âå
, FILE *
·mp
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
, c⁄° *
löe
, 
cb_hñ≥r
 *
hñ≥r
)

311 
rc
 = 0;

313 
	`UNUSED
(
Âå
);

314 
	`UNUSED
(
∑ssw‹d
);

316 if(
	`°rcmp
(
u£∫ame
, 
hñ≥r
->username)){

318 
	`Ârötf
(
·mp
, "%s", 
löe
);

321 
hñ≥r
->
found
 = 
åue
;

322 
rc
 = 
	`ouçut_√w_∑ssw‹d
(
·mp
, 
u£∫ame
, 
hñ≥r
->
∑ssw‹d
, hñ≥r->
ôî©i⁄s
);

324  
rc
;

325 
	}
}

327 
	$upd©e_pwu£r
(
FILE
 *
Âå
, FILE *
·mp
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
, 
ôî©i⁄s
)

329 
cb_hñ≥r
 
hñ≥r
;

330 
rc
;

332 
	`mem£t
(&
hñ≥r
, 0, (helper));

333 
hñ≥r
.
u£∫ame
 = username;

334 
hñ≥r
.
∑ssw‹d
 =Öassword;

335 
hñ≥r
.
ôî©i⁄s
 = iterations;

336 
rc
 = 
	`pwfûe_ôî©e
(
Âå
, 
·mp
, 
upd©e_pwu£r_cb
, &
hñ≥r
);

338 if(
hñ≥r
.
found
){

339  
rc
;

341  
	`ouçut_√w_∑ssw‹d
(
·mp
, 
u£∫ame
, 
∑ssw‹d
, 
ôî©i⁄s
);

343 
	}
}

346 
	$c›y_c⁄ã¡s
(
FILE
 *
§c
, FILE *
de°
)

348 
buf
[
MAX_BUFFER_LEN
];

349 
size_t
 
Àn
;

351 
	`ªwöd
(
§c
);

352 
	`ªwöd
(
de°
);

354 #ifde‡
WIN32


355 
	`_chsize
(
	`fûío
(
de°
), 0);

357 if(
	`·runˇã
(
	`fûío
(
de°
), 0))  1;

360 !
	`„of
(
§c
)){

361 
Àn
 = 
	`‰ód
(
buf
, 1, 
MAX_BUFFER_LEN
, 
§c
);

362 if(
Àn
 > 0){

363 if(
	`fwrôe
(
buf
, 1, 
Àn
, 
de°
) !=Üen){

367  !
	`„of
(
§c
);

371 
	}
}

373 
	$¸óã_backup
(c⁄° *
backup_fûe
, 
FILE
 *
Âå
)

375 
FILE
 *
fbackup
;

377 
fbackup
 = 
	`f›í
(
backup_fûe
, "wt");

378 if(!
fbackup
){

379 
	`Ârötf
(
°dîr
, "Eº‹ cª©ög backu∞∑ssw‹d fûê\"%s\",ÇŸ c⁄töuög.\n", 
backup_fûe
);

382 if(
	`c›y_c⁄ã¡s
(
Âå
, 
fbackup
)){

383 
	`Ârötf
(
°dîr
, "Eº‹ c›yög d©®tÿbacku∞∑ssw‹d fûê\"%s\",ÇŸ c⁄töuög.\n", 
backup_fûe
);

384 
	`f˛o£
(
fbackup
);

387 
	`f˛o£
(
fbackup
);

388 
	`ªwöd
(
Âå
);

390 
	}
}

392 
	$h™dÀ_sigöt
(
sig«l
)

394 
	`gë_∑ssw‹d__ª£t_ãrm
();

396 
	`UNUSED
(
sig«l
);

398 
	`exô
(0);

399 
	}
}

402 
boﬁ
 
	$is_u£∫ame_vÆid
(c⁄° *
u£∫ame
)

404 
size_t
 
i
;

405 
size_t
 
¶í
;

407 if(
u£∫ame
){

408 
¶í
 = 
	`°æí
(
u£∫ame
);

409 if(
¶í
 > 65535){

410 
	`Ârötf
(
°dîr
, "Error: Username must beÜessÅhan 65536 charactersÜong.\n");

411  
Ál£
;

413 
i
=0; i<
¶í
; i++){

414 if(
	`is˙ål
(
u£∫ame
[
i
])){

415 
	`Ârötf
(
°dîr
, "Error: Username mustÇot contain control characters.\n");

416  
Ál£
;

419 if(
	`°rchr
(
u£∫ame
, ':')){

420 
	`Ârötf
(
°dîr
, "Error: Username mustÇot containÅhe ':' character.\n");

421  
Ál£
;

424  
åue
;

425 
	}
}

427 
	$maö
(
¨gc
, *
¨gv
[])

429 *
∑ssw‹d_fûe_tmp
 = 
NULL
;

430 *
∑ssw‹d_fûe
 = 
NULL
;

431 *
u£∫ame
 = 
NULL
;

432 *
∑ssw‹d_cmd
 = 
NULL
;

433 
boﬁ
 
b©ch_mode
 = 
Ál£
;

434 
boﬁ
 
¸óã_√w
 = 
Ál£
;

435 
boﬁ
 
dñëe_u£r
 = 
Ál£
;

436 
FILE
 *
Âå
, *
·mp
;

437 
∑ssw‹d
[
MAX_BUFFER_LEN
];

438 
rc
;

439 
boﬁ
 
do_upd©e_fûe
 = 
Ál£
;

440 *
backup_fûe
;

441 
idx
;

442 
ôî©i⁄s
 = 
PW_DEFAULT_ITERATIONS
;

444 
	`sig«l
(
SIGINT
, 
h™dÀ_sigöt
);

445 
	`sig«l
(
SIGTERM
, 
h™dÀ_sigöt
);

447 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L || 
OPENSSL_API_COMPAT
 < 0x10100000L

448 
	`O≥nSSL_add_Æl_dige°s
();

450 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
 \

451 | 
OPENSSL_INIT_ADD_ALL_DIGESTS
 \

452 | 
OPENSSL_INIT_LOAD_CONFIG
, 
NULL
);

455 if(
¨gc
 == 1){

456 
	`¥öt_ußge
();

460 
idx
 = 1;

461 
idx
 = 1; idx < 
¨gc
; idx++){

462 if(!
	`°rcmp
(
¨gv
[
idx
], "-H")){

463 if(
idx
+1 =
¨gc
){

464 
	`Ârötf
(
°dîr
, "Error: -Hárgument given butÇotÉnough otherárguments.\n");

467 if(!
	`°rcmp
(
¨gv
[
idx
+1], "sha512")){

468 
hashty≥
 = 
pw_sha512
;

469 }if(!
	`°rcmp
(
¨gv
[
idx
+1], "sha512-pbkdf2")){

470 
hashty≥
 = 
pw_sha512_pbkdf2
;

472 
	`Ârötf
(
°dîr
, "Eº‹: Unknow¿hashÅy≥ '%s'\n", 
¨gv
[
idx
+1]);

475 
idx
++;

476 }if(!
	`°rcmp
(
¨gv
[
idx
], "-b")){

477 
b©ch_mode
 = 
åue
;

478 }if(!
	`°rcmp
(
¨gv
[
idx
], "-c")){

479 
¸óã_√w
 = 
åue
;

480 }if(!
	`°rcmp
(
¨gv
[
idx
], "-D")){

481 
dñëe_u£r
 = 
åue
;

482 }if(!
	`°rcmp
(
¨gv
[
idx
], "-I")){

483 if(
idx
+1 =
¨gc
){

484 
	`Ârötf
(
°dîr
, "Error: -Iárgument given butÇotÉnough otherárguments.\n");

487 
ôî©i⁄s
 = 
	`©oi
(
¨gv
[
idx
+1]);

488 
idx
++;

489 if(
ôî©i⁄s
 < 1){

490 
	`Ârötf
(
°dîr
, "Error: Number of iterations must be > 0.\n");

493 }if(!
	`°rcmp
(
¨gv
[
idx
], "-U")){

494 
do_upd©e_fûe
 = 
åue
;

500 if(
¸óã_√w
 && 
dñëe_u£r
){

501 
	`Ârötf
(
°dîr
, "Error: -cánd -D cannot be usedÅogether.\n");

504 if(
¸óã_√w
 && 
do_upd©e_fûe
){

505 
	`Ârötf
(
°dîr
, "Error: -cánd -U cannot be usedÅogether.\n");

508 if(
dñëe_u£r
 && 
do_upd©e_fûe
){

509 
	`Ârötf
(
°dîr
, "Error: -Dánd -U cannot be usedÅogether.\n");

512 if(
dñëe_u£r
 && 
b©ch_mode
){

513 
	`Ârötf
(
°dîr
, "Error: -bánd -D cannot be usedÅogether.\n");

517 if(
¸óã_√w
){

518 if(
b©ch_mode
){

519 if(
idx
+2 >
¨gc
){

520 
	`Ârötf
(
°dîr
, "Error: -cárgument given butÖassword file, username, orÖassword missing.\n");

523 
∑ssw‹d_fûe_tmp
 = 
¨gv
[
idx
];

524 
u£∫ame
 = 
¨gv
[
idx
+1];

525 
∑ssw‹d_cmd
 = 
¨gv
[
idx
+2];

528 if(
idx
+1 >
¨gc
){

529 
	`Ârötf
(
°dîr
, "Error: -cárgument given butÖassword file or username missing.\n");

532 
∑ssw‹d_fûe_tmp
 = 
¨gv
[
idx
];

533 
u£∫ame
 = 
¨gv
[
idx
+1];

536 }if(
dñëe_u£r
){

537 if(
idx
+1 >
¨gc
){

538 
	`Ârötf
(
°dîr
, "Error: -Dárgument given butÖassword file or username missing.\n");

541 
∑ssw‹d_fûe_tmp
 = 
¨gv
[
idx
];

542 
u£∫ame
 = 
¨gv
[
idx
+1];

544 }if(
do_upd©e_fûe
){

545 if(
idx
+1 !
¨gc
){

546 
	`Ârötf
(
°dîr
, "Error: -Uárgument given butÖassword file missing.\n");

549 
∑ssw‹d_fûe_tmp
 = 
¨gv
[
idx
];

551 }if(
b©ch_mode
 =
åue
 && 
idx
+3 =
¨gc
){

552 
∑ssw‹d_fûe_tmp
 = 
¨gv
[
idx
];

553 
u£∫ame
 = 
¨gv
[
idx
+1];

554 
∑ssw‹d_cmd
 = 
¨gv
[
idx
+2];

555 }if(
b©ch_mode
 =
Ál£
 && 
idx
+2 =
¨gc
){

556 
∑ssw‹d_fûe_tmp
 = 
¨gv
[
idx
];

557 
u£∫ame
 = 
¨gv
[
idx
+1];

559 
	`¥öt_ußge
();

563 if(!
	`is_u£∫ame_vÆid
(
u£∫ame
)){

566 if(
∑ssw‹d_cmd
 && 
	`°æí
(password_cmd) > 65535){

567 
	`Ârötf
(
°dîr
, "Error: Password must beÜessÅhan 65536 charactersÜong.\n");

571 #ifde‡
WIN32


572 
∑ssw‹d_fûe
 = 
	`_fuŒ∑th
(
NULL
, 
∑ssw‹d_fûe_tmp
, 0);

573 if(!
∑ssw‹d_fûe
){

574 
	`Ârötf
(
°dîr
, "Error getting fullÖath forÖassword file.\n");

578 
∑ssw‹d_fûe
 = 
	`ªÆ∑th
(
∑ssw‹d_fûe_tmp
, 
NULL
);

579 if(!
∑ssw‹d_fûe
){

580 if(
î∫o
 =
ENOENT
){

581 
∑ssw‹d_fûe
 = 
	`°rdup
(
∑ssw‹d_fûe_tmp
);

582 if(!
∑ssw‹d_fûe
){

583 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

587 
	`Ârötf
(
°dîr
, "Eº‹ÑódögÖassw‹d fûe: %s\n", 
	`°ªº‹
(
î∫o
));

593 if(
¸óã_√w
){

594 if(
b©ch_mode
 =
Ál£
){

595 
rc
 = 
	`gë_∑ssw‹d
("Passw‹d: ", "Rì¡îÖassw‹d: ", 
Ál£
, 
∑ssw‹d
, 
MAX_BUFFER_LEN
);

596 if(
rc
){

597 
	`‰ì
(
∑ssw‹d_fûe
);

598  
rc
;

600 
∑ssw‹d_cmd
 = 
∑ssw‹d
;

602 
Âå
 = 
	`f›í
(
∑ssw‹d_fûe
, "wt");

603 if(!
Âå
){

604 
	`Ârötf
(
°dîr
, "Eº‹: U«bÀÅÿ›í fûê%†f‹ wrôög. %s.\n", 
∑ssw‹d_fûe
, 
	`°ªº‹
(
î∫o
));

605 
	`‰ì
(
∑ssw‹d_fûe
);

608 
	`‰ì
(
∑ssw‹d_fûe
);

609 
rc
 = 
	`ouçut_√w_∑ssw‹d
(
Âå
, 
u£∫ame
, 
∑ssw‹d_cmd
, 
ôî©i⁄s
);

610 
	`f˛o£
(
Âå
);

611  
rc
;

613 
Âå
 = 
	`f›í
(
∑ssw‹d_fûe
, "r+t");

614 if(!
Âå
){

615 
	`Ârötf
(
°dîr
, "Eº‹: U«bÀÅÿ›íÖassw‹d fûê%s. %s.\n", 
∑ssw‹d_fûe
, 
	`°ªº‹
(
î∫o
));

616 
	`‰ì
(
∑ssw‹d_fûe
);

620 
backup_fûe
 = 
	`mÆloc
((
size_t
)
	`°æí
(
∑ssw‹d_fûe
)+5);

621 if(!
backup_fûe
){

622 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

623 
	`‰ì
(
∑ssw‹d_fûe
);

626 
	`¢¥ötf
(
backup_fûe
, 
	`°æí
(
∑ssw‹d_fûe
)+5, "%s.tmp",Öassword_file);

627 
	`‰ì
(
∑ssw‹d_fûe
);

628 
∑ssw‹d_fûe
 = 
NULL
;

630 if(
	`¸óã_backup
(
backup_fûe
, 
Âå
)){

631 
	`f˛o£
(
Âå
);

632 
	`‰ì
(
backup_fûe
);

636 
·mp
 = 
	`mpw_tmpfûe
();

637 if(!
·mp
){

638 
	`Ârötf
(
°dîr
, "Eº‹: U«bÀÅÿ›íÅemp‹¨y fûe. %s.\n", 
	`°ªº‹
(
î∫o
));

639 
	`f˛o£
(
Âå
);

640 
	`‰ì
(
backup_fûe
);

643 if(
dñëe_u£r
){

644 
rc
 = 
	`dñëe_pwu£r
(
Âå
, 
·mp
, 
u£∫ame
);

645 }if(
do_upd©e_fûe
){

646 
rc
 = 
	`upd©e_fûe
(
Âå
, 
·mp
);

648 if(
b©ch_mode
){

650 
rc
 = 
	`upd©e_pwu£r
(
Âå
, 
·mp
, 
u£∫ame
, 
∑ssw‹d_cmd
, 
ôî©i⁄s
);

652 
rc
 = 
	`gë_∑ssw‹d
("Passw‹d: ", "Rì¡îÖassw‹d: ", 
Ál£
, 
∑ssw‹d
, 
MAX_BUFFER_LEN
);

653 if(
rc
){

654 
	`f˛o£
(
Âå
);

655 
	`f˛o£
(
·mp
);

656 
	`u∆ök
(
backup_fûe
);

657 
	`‰ì
(
backup_fûe
);

658  
rc
;

661 
rc
 = 
	`upd©e_pwu£r
(
Âå
, 
·mp
, 
u£∫ame
, 
∑ssw‹d
, 
ôî©i⁄s
);

664 if(
rc
){

665 
	`f˛o£
(
Âå
);

666 
	`f˛o£
(
·mp
);

667 
	`u∆ök
(
backup_fûe
);

668 
	`‰ì
(
backup_fûe
);

669  
rc
;

672 if(
	`c›y_c⁄ã¡s
(
·mp
, 
Âå
)){

673 
	`f˛o£
(
Âå
);

674 
	`f˛o£
(
·mp
);

675 
	`Ârötf
(
°dîr
, "Error occurred updatingÖassword file.\n");

676 
	`Ârötf
(
°dîr
, "Passw‹d fûêmay bêc‹ru±, checkÅhêbacku∞fûe: %s.\n", 
backup_fûe
);

677 
	`‰ì
(
backup_fûe
);

680 
	`f˛o£
(
Âå
);

681 
	`f˛o£
(
·mp
);

685 
	`u∆ök
(
backup_fûe
);

686 
	`‰ì
(
backup_fûe
);

690 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/client/client_props.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 #i‚de‡
WIN32


27 
	~<uni°d.h
>

28 
	~<°rögs.h
>

30 
	~<¥o˚ss.h
>

31 
	~<wösock2.h
>

32 
	#¢¥ötf
 
•rötf_s


	)

33 
	#°∫ˇ£cmp
 
_°∫icmp


	)

36 
	~"mosquôto.h
"

37 
	~"mqâ_¥Ÿocﬁ.h
"

38 
	~"˛õ¡_sh¨ed.h
"

40 
	e¥›_ty≥


42 
	mPROP_TYPE_BYTE
,

43 
	mPROP_TYPE_INT16
,

44 
	mPROP_TYPE_INT32
,

45 
	mPROP_TYPE_BINARY
,

46 
	mPROP_TYPE_STRING
,

47 
	mPROP_TYPE_STRING_PAIR


63 
	$cfg_∑r£_¥›îty
(
mosq_c⁄fig
 *
cfg
, 
¨gc
, *
¨gv
[], *
idx
)

65 *
cmd«me
 = 
NULL
, *
¥›«me
 = NULL;

66 *
key
 = 
NULL
, *
vÆue
 = NULL;

67 
cmd
, 
idítifõr
, 
ty≥
;

68 
mosquôto_¥›îty
 **
¥›li°
;

69 
rc
;

70 
tm∂
;

71 
size_t
 
szt
;

74 if((*
idx
)+2 > 
¨gc
-1){

76 
	`Ârötf
(
°dîr
, "Error: --propertyárgument given butÇotÉnoughárguments specified.\n\n");

77  
MOSQ_ERR_INVAL
;

80 
cmd«me
 = 
¨gv
[*
idx
];

81 if(
	`mosquôto_°rög_to_comm™d
(
cmd«me
, &
cmd
)){

82 
	`Ârötf
(
°dîr
, "Error: Invalid command given in --propertyárgument.\n\n");

83  
MOSQ_ERR_INVAL
;

86 
¥›«me
 = 
¨gv
[(*
idx
)+1];

87 if(
	`mosquôto_°rög_to_¥›îty_öfo
(
¥›«me
, &
idítifõr
, &
ty≥
)){

88 
	`Ârötf
(
°dîr
, "Error: InvalidÖropertyÇame given in --propertyárgument.\n\n");

89  
MOSQ_ERR_INVAL
;

92 if(
	`mosquôto_¥›îty_check_comm™d
(
cmd
, 
idítifõr
)){

93 
	`Ârötf
(
°dîr
, "Eº‹: %†¥›îtyÇŸáŒowed f‹ %†ö --¥›îtyárgumít.\n\n", 
¥›«me
, 
cmd«me
);

94  
MOSQ_ERR_INVAL
;

97 if(
idítifõr
 =
MQTT_PROP_USER_PROPERTY
){

98 if((*
idx
)+3 > 
¨gc
-1){

100 
	`Ârötf
(
°dîr
, "Error: --propertyárgument given butÇotÉnoughárguments specified.\n\n");

101  
MOSQ_ERR_INVAL
;

104 
key
 = 
¨gv
[(*
idx
)+2];

105 
vÆue
 = 
¨gv
[(*
idx
)+3];

106 (*
idx
) += 3;

108 
vÆue
 = 
¨gv
[(*
idx
)+2];

109 (*
idx
) += 2;

112 
cmd
){

113 
CMD_CONNECT
:

114 
¥›li°
 = &
cfg
->
c⁄√˘_¥›s
;

117 
CMD_PUBLISH
:

118 if(
idítifõr
 =
MQTT_PROP_TOPIC_ALIAS
){

119 
cfg
->
have_t›ic_Æüs
 = 
åue
;

121 if(
idítifõr
 =
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
){

122 
	`Ârötf
(
°dîr
, "Eº‹: %†¥›îtyÇŸ suµ‹ãd f‹ %†ö --¥›îtyárgumít.\n\n", 
¥›«me
, 
cmd«me
);

123  
MOSQ_ERR_INVAL
;

125 
¥›li°
 = &
cfg
->
publish_¥›s
;

128 
CMD_SUBSCRIBE
:

129 if(
idítifõr
 !
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
 && idítifõ∏!
MQTT_PROP_USER_PROPERTY
){

130 
	`Ârötf
(
°dîr
, "Eº‹: %†¥›îtyÇŸ suµ‹ãd f‹ %†ö --¥›îtyárgumít.\n\n", 
¥›«me
, 
cmd«me
);

131  
MOSQ_ERR_NOT_SUPPORTED
;

133 
¥›li°
 = &
cfg
->
subs¸ibe_¥›s
;

136 
CMD_UNSUBSCRIBE
:

137 
¥›li°
 = &
cfg
->
unsubs¸ibe_¥›s
;

140 
CMD_DISCONNECT
:

141 
¥›li°
 = &
cfg
->
disc⁄√˘_¥›s
;

144 
CMD_AUTH
:

145 
	`Ârötf
(
°dîr
, "Eº‹: %†¥›îtyÇŸ suµ‹ãd f‹ %†ö --¥›îtyárgumít.\n\n", 
¥›«me
, 
cmd«me
);

146  
MOSQ_ERR_NOT_SUPPORTED
;

148 
CMD_WILL
:

149 
¥›li°
 = &
cfg
->
wûl_¥›s
;

152 
CMD_PUBACK
:

153 
CMD_PUBREC
:

154 
CMD_PUBREL
:

155 
CMD_PUBCOMP
:

156 
CMD_SUBACK
:

157 
CMD_UNSUBACK
:

158 
	`Ârötf
(
°dîr
, "Eº‹: %†¥›îtyÇŸ suµ‹ãd f‹ %†ö --¥›îtyárgumít.\n\n", 
¥›«me
, 
cmd«me
);

159  
MOSQ_ERR_NOT_SUPPORTED
;

162  
MOSQ_ERR_INVAL
;

165 
ty≥
){

166 
MQTT_PROP_TYPE_BYTE
:

167 
tm∂
 = 
	`©ﬁ
(
vÆue
);

168 if(
tm∂
 < 0 ||Åm∂ > 
UINT8_MAX
){

169 
	`Ârötf
(
°dîr
, "Eº‹: Pr›îty vÆuê(%ldËouào‡øngêf‹Ör›îty %s.\n\n", 
tm∂
, 
¥›«me
);

170  
MOSQ_ERR_INVAL
;

172 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
idítifõr
, (
uöt8_t
 )
tm∂
);

174 
MQTT_PROP_TYPE_INT16
:

175 
tm∂
 = 
	`©ﬁ
(
vÆue
);

176 if(
tm∂
 < 0 ||Åm∂ > 
UINT16_MAX
){

177 
	`Ârötf
(
°dîr
, "Eº‹: Pr›îty vÆuê(%ldËouào‡øngêf‹Ör›îty %s.\n\n", 
tm∂
, 
¥›«me
);

178  
MOSQ_ERR_INVAL
;

180 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(
¥›li°
, 
idítifõr
, (
uöt16_t
 )
tm∂
);

182 
MQTT_PROP_TYPE_INT32
:

183 
tm∂
 = 
	`©ﬁ
(
vÆue
);

184 if(
tm∂
 < 0 ||Åm∂ > 
UINT32_MAX
){

185 
	`Ârötf
(
°dîr
, "Eº‹: Pr›îty vÆuê(%ldËouào‡øngêf‹Ör›îty %s.\n\n", 
tm∂
, 
¥›«me
);

186  
MOSQ_ERR_INVAL
;

188 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(
¥›li°
, 
idítifõr
, (
uöt32_t
 )
tm∂
);

190 
MQTT_PROP_TYPE_VARINT
:

191 
tm∂
 = 
	`©ﬁ
(
vÆue
);

192 if(
tm∂
 < 0 ||Åm∂ > 
UINT32_MAX
){

193 
	`Ârötf
(
°dîr
, "Eº‹: Pr›îty vÆuê(%ldËouào‡øngêf‹Ör›îty %s.\n\n", 
tm∂
, 
¥›«me
);

194  
MOSQ_ERR_INVAL
;

196 
rc
 = 
	`mosquôto_¥›îty_add_v¨öt
(
¥›li°
, 
idítifõr
, (
uöt32_t
 )
tm∂
);

198 
MQTT_PROP_TYPE_BINARY
:

199 
szt
 = 
	`°æí
(
vÆue
);

200 if(
szt
 > 
UINT16_MAX
){

201 
	`Ârötf
(
°dîr
, "Eº‹: Pr›îty vÆuêtoÿl⁄g f‹Ör›îty %s.\n\n", 
¥›«me
);

202  
MOSQ_ERR_INVAL
;

204 
rc
 = 
	`mosquôto_¥›îty_add_bö¨y
(
¥›li°
, 
idítifõr
, 
vÆue
, (
uöt16_t
 )
szt
);

206 
MQTT_PROP_TYPE_STRING
:

207 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(
¥›li°
, 
idítifõr
, 
vÆue
);

209 
MQTT_PROP_TYPE_STRING_PAIR
:

210 
rc
 = 
	`mosquôto_¥›îty_add_°rög_∑ú
(
¥›li°
, 
idítifõr
, 
key
, 
vÆue
);

213  
MOSQ_ERR_INVAL
;

215 if(
rc
){

216 
	`Ârötf
(
°dîr
, "Eº‹áddögÖr›îty %†%d\n", 
¥›«me
, 
ty≥
);

217  
rc
;

219  
MOSQ_ERR_SUCCESS
;

220 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/client/client_shared.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<°d¨g.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 #i‚de‡
WIN32


28 
	~<uni°d.h
>

29 
	~<°rögs.h
>

31 
	~<¥o˚ss.h
>

32 
	~<wösock2.h
>

33 
	#¢¥ötf
 
•rötf_s


	)

34 
	#°∫ˇ£cmp
 
_°∫icmp


	)

37 
	~<mosquôto.h
>

38 
	~<mqâ_¥Ÿocﬁ.h
>

39 
	~"˛õ¡_sh¨ed.h
"

41 #ifde‡
WITH_SOCKS


42 
mosquôto__∑r£_socks_uæ
(
mosq_c⁄fig
 *
cfg
, *
uæ
);

44 
˛õ¡_c⁄fig_löe_¥oc
(
mosq_c⁄fig
 *
cfg
, 
pub_‹_sub
, 
¨gc
, *
¨gv
[]);

47 
	$check_f‹m©
(c⁄° *
°r
)

49 
size_t
 
i
;

50 
size_t
 
Àn
;

52 
Àn
 = 
	`°æí
(
°r
);

53 
i
=0; i<
Àn
; i++){

54 if(
°r
[
i
] == '%'){

55 if(
i
 =
Àn
-1){

57 
	`Ârötf
(
°dîr
, "Error: Incomplete format specifier.\n");

60 if(
°r
[
i
+1] == '0' || str[i+1] == '-'){

62 
i
++;

63 if(
i
 =
Àn
-1){

65 
	`Ârötf
(
°dîr
, "Error: Incomplete format specifier.\n");

71 
°r
[
i
+1] >= '0' && str[i+1] <= '9'){

72 
i
++;

73 if(
i
 =
Àn
-1){

75 
	`Ârötf
(
°dîr
, "Error: Incomplete format specifier.\n");

80 if(
°r
[
i
+1] == '.'){

82 
i
++;

83 if(
i
 =
Àn
-1){

85 
	`Ârötf
(
°dîr
, "Error: Incomplete format specifier.\n");

89 
°r
[
i
+1] >= '0' && str[i+1] <= '9'){

90 
i
++;

91 if(
i
 =
Àn
-1){

93 
	`Ârötf
(
°dîr
, "Error: Incomplete format specifier.\n");

99 if(
°r
[
i
+1] == '%'){

101 }if(
°r
[
i
+1] == 'A'){

103 }if(
°r
[
i
+1] == 'C'){

105 }if(
°r
[
i
+1] == 'D'){

107 }if(
°r
[
i
+1] == 'E'){

109 }if(
°r
[
i
+1] == 'F'){

111 }if(
°r
[
i
+1] == 'I'){

113 }if(
°r
[
i
+1] == 'l'){

115 }if(
°r
[
i
+1] == 'm'){

117 }if(
°r
[
i
+1] == 'P'){

119 }if(
°r
[
i
+1] == 'p'){

121 }if(
°r
[
i
+1] == 'q'){

123 }if(
°r
[
i
+1] == 'R'){

125 }if(
°r
[
i
+1] == 'S'){

127 }if(
°r
[
i
+1] == 'r'){

129 }if(
°r
[
i
+1] == 't'){

131 }if(
°r
[
i
+1] == 'j'){

133 }if(
°r
[
i
+1] == 'J'){

135 }if(
°r
[
i
+1] == 'U'){

137 #ifde‡
WIN32


138 
	`Ârötf
(
°dîr
, "Error: The %%U format option isÇot supported on Windows.\n");

141 }if(
°r
[
i
+1] == 'x' || str[i+1] == 'X'){

144 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid f‹m© s≥cifõ∏'%c'.\n", 
°r
[
i
+1]);

147 
i
++;

149 }if(
°r
[
i
] == '@'){

150 if(
i
 =
Àn
-1){

152 
	`Ârötf
(
°dîr
, "Error: Incomplete format specifier.\n");

155 
i
++;

156 }if(
°r
[
i
] == '\\'){

157 if(
i
 =
Àn
-1){

159 
	`Ârötf
(
°dîr
, "Error: IncompleteÉscape specifier.\n");

162 
°r
[
i
+1]){

174 
	`Ârötf
(
°dîr
, "Eº‹: InvÆidÉsˇ≥ s≥cifõ∏'%c'.\n", 
°r
[
i
+1]);

177 
i
++;

183 
	}
}

186 
	$öô_c⁄fig
(
mosq_c⁄fig
 *
cfg
, 
pub_‹_sub
)

188 
	`mem£t
(
cfg
, 0, (*cfg));

189 
cfg
->
p‹t
 = 
PORT_UNDEFINED
;

190 
cfg
->
max_öÊight
 = 20;

191 
cfg
->
kì∑live
 = 60;

192 
cfg
->
˛ón_£ssi⁄
 = 
åue
;

193 
cfg
->
eﬁ
 = 
åue
;

194 
cfg
->
ª≥©_cou¡
 = 1;

195 
cfg
->
ª≥©_dñay
.
tv_£c
 = 0;

196 
cfg
->
ª≥©_dñay
.
tv_u£c
 = 0;

197 
cfg
->
øndom_fûãr
 = 10000;

198 if(
pub_‹_sub
 =
CLIENT_RR
){

199 
cfg
->
¥Ÿocﬁ_vîsi⁄
 = 
MQTT_PROTOCOL_V5
;

200 
cfg
->
msg_cou¡
 = 1;

202 
cfg
->
¥Ÿocﬁ_vîsi⁄
 = 
MQTT_PROTOCOL_V311
;

204 
cfg
->
£ssi⁄_expúy_öãrvÆ
 = -1;

205 
	}
}

207 
	$˛õ¡_c⁄fig_˛ónup
(
mosq_c⁄fig
 *
cfg
)

209 
i
;

210 
	`‰ì
(
cfg
->
id
);

211 
	`‰ì
(
cfg
->
id_¥efix
);

212 
	`‰ì
(
cfg
->
ho°
);

213 
	`‰ì
(
cfg
->
fûe_öput
);

214 
	`‰ì
(
cfg
->
mesßge
);

215 
	`‰ì
(
cfg
->
t›ic
);

216 
	`‰ì
(
cfg
->
böd_addªss
);

217 
	`‰ì
(
cfg
->
u£∫ame
);

218 
	`‰ì
(
cfg
->
∑ssw‹d
);

219 
	`‰ì
(
cfg
->
wûl_t›ic
);

220 
	`‰ì
(
cfg
->
wûl_∑ylﬂd
);

221 
	`‰ì
(
cfg
->
f‹m©
);

222 
	`‰ì
(
cfg
->
ª•⁄£_t›ic
);

223 #ifde‡
WITH_TLS


224 
	`‰ì
(
cfg
->
ˇfûe
);

225 
	`‰ì
(
cfg
->
ˇ∑th
);

226 
	`‰ì
(
cfg
->
˚πfûe
);

227 
	`‰ì
(
cfg
->
keyfûe
);

228 
	`‰ì
(
cfg
->
cùhîs
);

229 
	`‰ì
(
cfg
->
és_Æ≤
);

230 
	`‰ì
(
cfg
->
és_vîsi⁄
);

231 
	`‰ì
(
cfg
->
és_ígöe
);

232 
	`‰ì
(
cfg
->
és_ígöe_k∑ss_sha1
);

233 
	`‰ì
(
cfg
->
keyf‹m
);

234 #ifde‡
FINAL_WITH_TLS_PSK


235 
	`‰ì
(
cfg
->
psk
);

236 
	`‰ì
(
cfg
->
psk_idítôy
);

239 if(
cfg
->
t›ics
){

240 
i
=0; i<
cfg
->
t›ic_cou¡
; i++){

241 
	`‰ì
(
cfg
->
t›ics
[
i
]);

243 
	`‰ì
(
cfg
->
t›ics
);

245 if(
cfg
->
fûãr_outs
){

246 
i
=0; i<
cfg
->
fûãr_out_cou¡
; i++){

247 
	`‰ì
(
cfg
->
fûãr_outs
[
i
]);

249 
	`‰ì
(
cfg
->
fûãr_outs
);

251 if(
cfg
->
unsub_t›ics
){

252 
i
=0; i<
cfg
->
unsub_t›ic_cou¡
; i++){

253 
	`‰ì
(
cfg
->
unsub_t›ics
[
i
]);

255 
	`‰ì
(
cfg
->
unsub_t›ics
);

257 #ifde‡
WITH_SOCKS


258 
	`‰ì
(
cfg
->
socks5_ho°
);

259 
	`‰ì
(
cfg
->
socks5_u£∫ame
);

260 
	`‰ì
(
cfg
->
socks5_∑ssw‹d
);

262 
	`mosquôto_¥›îty_‰ì_Æl
(&
cfg
->
c⁄√˘_¥›s
);

263 
	`mosquôto_¥›îty_‰ì_Æl
(&
cfg
->
publish_¥›s
);

264 
	`mosquôto_¥›îty_‰ì_Æl
(&
cfg
->
subs¸ibe_¥›s
);

265 
	`mosquôto_¥›îty_‰ì_Æl
(&
cfg
->
unsubs¸ibe_¥›s
);

266 
	`mosquôto_¥›îty_‰ì_Æl
(&
cfg
->
disc⁄√˘_¥›s
);

267 
	`mosquôto_¥›îty_‰ì_Æl
(&
cfg
->
wûl_¥›s
);

268 
	}
}

270 
	$˛õ¡_c⁄fig_lﬂd
(
mosq_c⁄fig
 *
cfg
, 
pub_‹_sub
, 
¨gc
, *
¨gv
[])

272 
rc
;

273 
FILE
 *
Âå
;

274 
löe
[1024];

275 
cou¡
;

276 *
loc
 = 
NULL
;

277 
size_t
 
Àn
;

278 *
¨gs
[3];

280 #i‚de‡
WIN32


281 *
ív
;

283 
ív
[1024];

285 
¨gs
[0] = 
NULL
;

287 
	`öô_c⁄fig
(
cfg
, 
pub_‹_sub
);

290 #i‚de‡
WIN32


291 
ív
 = 
	`gëív
("XDG_CONFIG_HOME");

292 if(
ív
){

293 
Àn
 = 
	`°æí
(
ív
) + strlen("/mosquitto_pub") + 1;

294 
loc
 = 
	`mÆloc
(
Àn
);

295 if(!
loc
){

296 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

299 if(
pub_‹_sub
 =
CLIENT_PUB
){

300 
	`¢¥ötf
(
loc
, 
Àn
, "%s/mosquôto_pub", 
ív
);

301 }if(
pub_‹_sub
 =
CLIENT_SUB
){

302 
	`¢¥ötf
(
loc
, 
Àn
, "%s/mosquôto_sub", 
ív
);

304 
	`¢¥ötf
(
loc
, 
Àn
, "%s/mosquôto_º", 
ív
);

306 
loc
[
Àn
-1] = '\0';

308 
ív
 = 
	`gëív
("HOME");

309 if(
ív
){

310 
Àn
 = 
	`°æí
(
ív
) + strlen("/.config/mosquitto_pub") + 1;

311 
loc
 = 
	`mÆloc
(
Àn
);

312 if(!
loc
){

313 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

316 if(
pub_‹_sub
 =
CLIENT_PUB
){

317 
	`¢¥ötf
(
loc
, 
Àn
, "%s/.c⁄fig/mosquôto_pub", 
ív
);

318 }if(
pub_‹_sub
 =
CLIENT_SUB
){

319 
	`¢¥ötf
(
loc
, 
Àn
, "%s/.c⁄fig/mosquôto_sub", 
ív
);

321 
	`¢¥ötf
(
loc
, 
Àn
, "%s/.c⁄fig/mosquôto_º", 
ív
);

323 
loc
[
Àn
-1] = '\0';

328 
rc
 = 
	`GëEnvú⁄mítV¨übÀ
("USERPROFILE", 
ív
, 1024);

329 if(
rc
 > 0 &&Ñc < 1024){

330 
Àn
 = 
	`°æí
(
ív
) + strlen("\\mosquitto_pub.conf") + 1;

331 
loc
 = 
	`mÆloc
(
Àn
);

332 if(!
loc
){

333 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

336 if(
pub_‹_sub
 =
CLIENT_PUB
){

337 
	`¢¥ötf
(
loc
, 
Àn
, "%s\\mosquôto_pub.c⁄f", 
ív
);

338 }if(
pub_‹_sub
 =
CLIENT_SUB
){

339 
	`¢¥ötf
(
loc
, 
Àn
, "%s\\mosquôto_sub.c⁄f", 
ív
);

341 
	`¢¥ötf
(
loc
, 
Àn
, "%s\\mosquôto_º.c⁄f", 
ív
);

343 
loc
[
Àn
-1] = '\0';

347 if(
loc
){

348 
Âå
 = 
	`f›í
(
loc
, "rt");

349 if(
Âå
){

350 
	`fgës
(
löe
, 1024, 
Âå
)){

351 if(
löe
[0] == '#') ;

353 
löe
[
	`°æí
(line)-1] == 10 ||Üine[strlen(line)-1] == 13){

354 
löe
[
	`°æí
(line)-1] = 0;

358 
¨gs
[1] = 
	`°πok
(
löe
, " ");

359 if(
¨gs
[1]){

360 
¨gs
[2] = 
	`°πok
(
NULL
, "");

361 if(
¨gs
[2]){

362 
cou¡
 = 3;

364 
cou¡
 = 2;

366 
rc
 = 
	`˛õ¡_c⁄fig_löe_¥oc
(
cfg
, 
pub_‹_sub
, 
cou¡
, 
¨gs
);

367 if(
rc
){

368 
	`f˛o£
(
Âå
);

369 
	`‰ì
(
loc
);

370  
rc
;

374 
	`f˛o£
(
Âå
);

376 
	`‰ì
(
loc
);

380 
rc
 = 
	`˛õ¡_c⁄fig_löe_¥oc
(
cfg
, 
pub_‹_sub
, 
¨gc
, 
¨gv
);

381 if(
rc
) Ñc;

383 if(
cfg
->
wûl_∑ylﬂd
 && !cfg->
wûl_t›ic
){

384 
	`Ârötf
(
°dîr
, "Error: WillÖayload given, butÇo willÅopic given.\n");

387 if(
cfg
->
wûl_ªèö
 && !cfg->
wûl_t›ic
){

388 
	`Ârötf
(
°dîr
, "Error: WillÑetain given, butÇo willÅopic given.\n");

391 #ifde‡
WITH_TLS


392 if((
cfg
->
˚πfûe
 && !cfg->
keyfûe
) || (cfg->keyfile && !cfg->certfile)){

393 
	`Ârötf
(
°dîr
, "Error: Both certfileánd keyfile must beÖrovided if one ofÅhem is set.\n");

396 if((
cfg
->
keyf‹m
 && !cfg->
keyfûe
)){

397 
	`Ârötf
(
°dîr
, "Error: If keyform is set, keyfile must beálso specified.\n");

400 if((
cfg
->
és_ígöe_k∑ss_sha1
 && (!cfg->
keyf‹m
 || !cfg->
és_ígöe
))){

401 
	`Ârötf
(
°dîr
, "Error: when usingÅls-engine-kpass-sha1, bothÅls-engineánd keyform mustálso beÖrovided.\n");

405 #ifde‡
FINAL_WITH_TLS_PSK


406 if((
cfg
->
ˇfûe
 || cfg->
ˇ∑th
Ë&& cfg->
psk
){

407 
	`Ârötf
(
°dîr
, "Error: Only one of --psk or --cafile/--capath may be usedát once.\n");

410 if(
cfg
->
psk
 && !cfg->
psk_idítôy
){

411 
	`Ârötf
(
°dîr
, "Error: --psk-identityÑequired if --psk used.\n");

416 if(
cfg
->
¥Ÿocﬁ_vîsi⁄
 == 5){

417 if(
cfg
->
˛ón_£ssi⁄
 =
Ál£
 && cfg->
£ssi⁄_expúy_öãrvÆ
 == -1){

420 
cfg
->
£ssi⁄_expúy_öãrvÆ
 = 
UINT32_MAX
;

422 if(
cfg
->
£ssi⁄_expúy_öãrvÆ
 > 0){

423 if(
cfg
->
£ssi⁄_expúy_öãrvÆ
 =
UINT32_MAX
 && (cfg->
id_¥efix
 || !cfg->
id
)){

424 
	`Ârötf
(
°dîr
, "Error: You mustÖrovideá client id if youáre usingán infinite sessionÉxpiry interval.\n");

427 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(&
cfg
->
c⁄√˘_¥›s
, 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
, (
uöt32_t
 )cfg->
£ssi⁄_expúy_öãrvÆ
);

428 if(
rc
){

429 
	`Ârötf
(
°dîr
, "ErroráddingÖroperty session-expiry-interval\n");

433 if(
cfg
->
˛ón_£ssi⁄
 =
Ál£
 && (cfg->
id_¥efix
 || !cfg->
id
)){

434 
	`Ârötf
(
°dîr
, "Error: You mustÖrovideá client id if youáre usingÅhe -c option.\n");

439 if(
pub_‹_sub
 =
CLIENT_SUB
){

440 if(
cfg
->
t›ic_cou¡
 == 0){

441 
	`Ârötf
(
°dîr
, "Error: You must specifyáÅopicÅo subscribeÅo.\n");

446 if(!
cfg
->
ho°
){

447 
cfg
->
ho°
 = 
	`°rdup
("localhost");

448 if(!
cfg
->
ho°
){

449 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

454 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_CONNECT
, 
cfg
->
c⁄√˘_¥›s
);

455 if(
rc
){

456 
	`îr_¥ötf
(
cfg
, "Eº‹ i¿CONNECTÖr›îtõs: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

459 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_PUBLISH
, 
cfg
->
publish_¥›s
);

460 if(
rc
){

461 
	`îr_¥ötf
(
cfg
, "Eº‹ i¿PUBLISHÖr›îtõs: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

464 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_SUBSCRIBE
, 
cfg
->
subs¸ibe_¥›s
);

465 if(
rc
){

466 
	`îr_¥ötf
(
cfg
, "Eº‹ i¿SUBSCRIBEÖr›îtõs: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

469 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_UNSUBSCRIBE
, 
cfg
->
unsubs¸ibe_¥›s
);

470 if(
rc
){

471 
	`îr_¥ötf
(
cfg
, "Eº‹ i¿UNSUBSCRIBEÖr›îtõs: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

474 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_DISCONNECT
, 
cfg
->
disc⁄√˘_¥›s
);

475 if(
rc
){

476 
	`îr_¥ötf
(
cfg
, "Eº‹ i¿DISCONNECTÖr›îtõs: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

479 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_WILL
, 
cfg
->
wûl_¥›s
);

480 if(
rc
){

481 
	`îr_¥ötf
(
cfg
, "Eº‹ i¿Wû»¥›îtõs: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

485  
MOSQ_ERR_SUCCESS
;

486 
	}
}

488 
	$cfg_add_t›ic
(
mosq_c⁄fig
 *
cfg
, 
ty≥
, *
t›ic
, c⁄° *
¨g
)

490 if(
	`mosquôto_vÆid©e_utf8
(
t›ic
, ()
	`°æí
(topic))){

491 
	`Ârötf
(
°dîr
, "Eº‹: MÆf‹med UTF-8 i¿%†¨gumít.\n\n", 
¨g
);

494 if(
ty≥
 =
CLIENT_PUB
 ||Åy≥ =
CLIENT_RR
){

495 if(
	`mosquôto_pub_t›ic_check
(
t›ic
Ë=
MOSQ_ERR_INVAL
){

496 
	`Ârötf
(
°dîr
, "Eº‹: InvÆidÖublishÅ›i¯'%s', d€†ô c⁄èö '+' o∏'#'?\n", 
t›ic
);

499 
cfg
->
t›ic
 = 
	`°rdup
(topic);

500 }if(
ty≥
 =
CLIENT_RESPONSE_TOPIC
){

501 if(
	`mosquôto_pub_t›ic_check
(
t›ic
Ë=
MOSQ_ERR_INVAL
){

502 
	`Ârötf
(
°dîr
, "Eº‹: InvÆidÑe•⁄£Å›i¯'%s', d€†ô c⁄èö '+' o∏'#'?\n", 
t›ic
);

505 
cfg
->
ª•⁄£_t›ic
 = 
	`°rdup
(
t›ic
);

507 if(
	`mosquôto_sub_t›ic_check
(
t›ic
Ë=
MOSQ_ERR_INVAL
){

508 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid subs¸ùti⁄Å›i¯'%s',áªáŒ '+'ánd '#' wûdˇrd†c‹ª˘?\n", 
t›ic
);

511 
cfg
->
t›ic_cou¡
++;

512 
cfg
->
t›ics
 = 
	`ªÆloc
(cfg->t›ics, (
size_t
 )cfg->
t›ic_cou¡
*(*));

513 if(!
cfg
->
t›ics
){

514 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

517 
cfg
->
t›ics
[cfg->
t›ic_cou¡
-1] = 
	`°rdup
(
t›ic
);

520 
	}
}

523 
	$˛õ¡_c⁄fig_löe_¥oc
(
mosq_c⁄fig
 *
cfg
, 
pub_‹_sub
, 
¨gc
, *
¨gv
[])

525 
i
;

526 
tmpi
;

527 
f
;

528 
size_t
 
szt
;

530 
i
=1; i<
¨gc
; i++){

531 if(!
	`°rcmp
(
¨gv
[
i
], "-A")){

532 if(
i
==
¨gc
-1){

533 
	`Ârötf
(
°dîr
, "Error: -Aárgument given butÇoáddress specified.\n\n");

536 
cfg
->
böd_addªss
 = 
	`°rdup
(
¨gv
[
i
+1]);

538 
i
++;

539 #ifde‡
WITH_TLS


540 }if(!
	`°rcmp
(
¨gv
[
i
], "--cafile")){

541 if(
i
==
¨gc
-1){

542 
	`Ârötf
(
°dîr
, "Error: --cafileárgument given butÇo file specified.\n\n");

545 
cfg
->
ˇfûe
 = 
	`°rdup
(
¨gv
[
i
+1]);

547 
i
++;

548 }if(!
	`°rcmp
(
¨gv
[
i
], "--capath")){

549 if(
i
==
¨gc
-1){

550 
	`Ârötf
(
°dîr
, "Error: --capathárgument given butÇo directory specified.\n\n");

553 
cfg
->
ˇ∑th
 = 
	`°rdup
(
¨gv
[
i
+1]);

555 
i
++;

556 }if(!
	`°rcmp
(
¨gv
[
i
], "--cert")){

557 if(
i
==
¨gc
-1){

558 
	`Ârötf
(
°dîr
, "Error: --certárgument given butÇo file specified.\n\n");

561 
cfg
->
˚πfûe
 = 
	`°rdup
(
¨gv
[
i
+1]);

563 
i
++;

564 }if(!
	`°rcmp
(
¨gv
[
i
], "--ciphers")){

565 if(
i
==
¨gc
-1){

566 
	`Ârötf
(
°dîr
, "Error: --ciphersárgument given butÇo ciphers specified.\n\n");

569 
cfg
->
cùhîs
 = 
	`°rdup
(
¨gv
[
i
+1]);

571 
i
++;

573 }if(!
	`°rcmp
(
¨gv
[
i
], "-C")){

574 if(
pub_‹_sub
 !
CLIENT_SUB
){

575 
unknown_›ti⁄
;

577 if(
i
==
¨gc
-1){

578 
	`Ârötf
(
°dîr
, "Error: -Cárgument given butÇo count specified.\n\n");

581 
cfg
->
msg_cou¡
 = 
	`©oi
(
¨gv
[
i
+1]);

582 if(
cfg
->
msg_cou¡
 < 1){

583 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid mesßgêcou¡ \"%d\".\n\n", 
cfg
->
msg_cou¡
);

587 
i
++;

589 }if(!
	`°rcmp
(
¨gv
[
i
], "-c") || !strcmp(argv[i], "--disable-clean-session")){

590 
cfg
->
˛ón_£ssi⁄
 = 
Ál£
;

591 }if(!
	`°rcmp
(
¨gv
[
i
], "-d") || !strcmp(argv[i], "--debug")){

592 
cfg
->
debug
 = 
åue
;

593 }if(!
	`°rcmp
(
¨gv
[
i
], "-D") || !strcmp(argv[i], "--property")){

594 
i
++;

595 if(
	`cfg_∑r£_¥›îty
(
cfg
, 
¨gc
, 
¨gv
, &
i
)){

598 
cfg
->
¥Ÿocﬁ_vîsi⁄
 = 
MQTT_PROTOCOL_V5
;

599 }if(!
	`°rcmp
(
¨gv
[
i
], "-e")){

600 if(
pub_‹_sub
 !
CLIENT_RR
){

601 
unknown_›ti⁄
;

603 if(
i
==
¨gc
-1){

604 
	`Ârötf
(
°dîr
, "Error: -eárgument given butÇoÑesponseÅopic specified.\n\n");

607 if(
	`cfg_add_t›ic
(
cfg
, 
CLIENT_RESPONSE_TOPIC
, 
¨gv
[
i
+1], "-e")){

611 
i
++;

612 }if(!
	`°rcmp
(
¨gv
[
i
], "-E")){

613 if(
pub_‹_sub
 !
CLIENT_SUB
){

614 
unknown_›ti⁄
;

616 
cfg
->
exô_a·î_sub
 = 
åue
;

617 }if(!
	`°rcmp
(
¨gv
[
i
], "-f") || !strcmp(argv[i], "--file")){

618 if(
pub_‹_sub
 =
CLIENT_SUB
){

619 
unknown_›ti⁄
;

621 if(
cfg
->
pub_mode
 !
MSGMODE_NONE
){

622 
	`Ârötf
(
°dîr
, "Error: Only oneÅype of message can be sentát once.\n\n");

624 }if(
i
==
¨gc
-1){

625 
	`Ârötf
(
°dîr
, "Error: -fárgument given butÇo file specified.\n\n");

628 
cfg
->
pub_mode
 = 
MSGMODE_FILE
;

629 
cfg
->
fûe_öput
 = 
	`°rdup
(
¨gv
[
i
+1]);

630 if(!
cfg
->
fûe_öput
){

631 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

635 
i
++;

636 }if(!
	`°rcmp
(
¨gv
[
i
], "-F")){

637 if(
pub_‹_sub
 =
CLIENT_PUB
){

638 
unknown_›ti⁄
;

640 if(
i
==
¨gc
-1){

641 
	`Ârötf
(
°dîr
, "Error: -Fárgument given butÇo format specified.\n\n");

644 
cfg
->
f‹m©
 = 
	`°rdup
(
¨gv
[
i
+1]);

645 if(!
cfg
->
f‹m©
){

646 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

649 if(
	`check_f‹m©
(
cfg
->
f‹m©
)){

653 
i
++;

654 }if(!
	`°rcmp
(
¨gv
[
i
], "--help")){

656 }if(!
	`°rcmp
(
¨gv
[
i
], "-h") || !strcmp(argv[i], "--host")){

657 if(
i
==
¨gc
-1){

658 
	`Ârötf
(
°dîr
, "Error: -hárgument given butÇo host specified.\n\n");

661 
cfg
->
ho°
 = 
	`°rdup
(
¨gv
[
i
+1]);

663 
i
++;

664 #ifde‡
WITH_TLS


665 }if(!
	`°rcmp
(
¨gv
[
i
], "--insecure")){

666 
cfg
->
ö£cuª
 = 
åue
;

668 }if(!
	`°rcmp
(
¨gv
[
i
], "-i") || !strcmp(argv[i], "--id")){

669 if(
cfg
->
id_¥efix
){

670 
	`Ârötf
(
°dîr
, "Error: -iánd -Iárgument cannot be usedÅogether.\n\n");

673 if(
i
==
¨gc
-1){

674 
	`Ârötf
(
°dîr
, "Error: -iárgument given butÇo id specified.\n\n");

677 
cfg
->
id
 = 
	`°rdup
(
¨gv
[
i
+1]);

679 
i
++;

680 }if(!
	`°rcmp
(
¨gv
[
i
], "-I") || !strcmp(argv[i], "--id-prefix")){

681 if(
cfg
->
id
){

682 
	`Ârötf
(
°dîr
, "Error: -iánd -Iárgument cannot be usedÅogether.\n\n");

685 if(
i
==
¨gc
-1){

686 
	`Ârötf
(
°dîr
, "Error: -Iárgument given butÇo idÖrefix specified.\n\n");

689 
cfg
->
id_¥efix
 = 
	`°rdup
(
¨gv
[
i
+1]);

691 
i
++;

692 }if(!
	`°rcmp
(
¨gv
[
i
], "-k") || !strcmp(argv[i], "--keepalive")){

693 if(
i
==
¨gc
-1){

694 
	`Ârötf
(
°dîr
, "Error: -kárgument given butÇo keepalive specified.\n\n");

697 
cfg
->
kì∑live
 = 
	`©oi
(
¨gv
[
i
+1]);

698 if(
cfg
->
kì∑live
<5 || cfg->kì∑live>
UINT16_MAX
){

699 
	`Ârötf
(
°dîr
, "Error: Invalid keepalive given, it must be between 5ánd 65535 inclusive.\n\n");

703 
i
++;

704 #ifde‡
WITH_TLS


705 }if(!
	`°rcmp
(
¨gv
[
i
], "--key")){

706 if(
i
==
¨gc
-1){

707 
	`Ârötf
(
°dîr
, "Error: --keyárgument given butÇo file specified.\n\n");

710 
cfg
->
keyfûe
 = 
	`°rdup
(
¨gv
[
i
+1]);

712 
i
++;

713 }if(!
	`°rcmp
(
¨gv
[
i
], "--keyform")){

714 if(
i
==
¨gc
-1){

715 
	`Ârötf
(
°dîr
, "Error: --keyformárgument given butÇo keyform specified.\n\n");

718 
cfg
->
keyf‹m
 = 
	`°rdup
(
¨gv
[
i
+1]);

720 
i
++;

722 }if(!
	`°rcmp
(
¨gv
[
i
], "-L") || !strcmp(argv[i], "--url")){

723 if(
i
==
¨gc
-1){

724 
	`Ârötf
(
°dîr
, "Error: -Lárgument given butÇo URL specified.\n\n");

727 *
uæ
 = 
¨gv
[
i
+1];

728 *
t›ic
;

729 *
tmp
;

731 if(!
	`°∫ˇ£cmp
(
uæ
, "mqtt://", 7)) {

732 
uæ
 += 7;

733 
cfg
->
p‹t
 = 1883;

734 } if(!
	`°∫ˇ£cmp
(
uæ
, "mqtts://", 8)) {

735 #ifde‡
WITH_TLS


736 
uæ
 += 8;

737 
cfg
->
p‹t
 = 8883;

738 
cfg
->
és_u£_os_˚πs
 = 
åue
;

740 
	`Ârötf
(
°dîr
, "Error: TLS supportÇotávailable.\n\n");

744 
	`Ârötf
(
°dîr
, "Error: unsupported URL scheme.\n\n");

747 
t›ic
 = 
	`°rchr
(
uæ
, '/');

748 if(!
t›ic
){

749 
	`Ârötf
(
°dîr
, "Error: Invalid URL for -Lárgument specified -Åopic missing.\n");

752 *
t›ic
++ = 0;

754 if(
	`cfg_add_t›ic
(
cfg
, 
pub_‹_sub
, 
t›ic
, "-LÅopic"))

757 
tmp
 = 
	`°rchr
(
uæ
, '@');

758 if(
tmp
) {

759 *
cﬁ⁄
;

760 *
tmp
++ = 0;

761 
cﬁ⁄
 = 
	`°rchr
(
uæ
, ':');

762 if(
cﬁ⁄
) {

763 *
cﬁ⁄
 = 0;

764 
cfg
->
∑ssw‹d
 = 
	`°rdup
(
cﬁ⁄
 + 1);

766 
cfg
->
u£∫ame
 = 
	`°rdup
(
uæ
);

767 
uæ
 = 
tmp
;

769 
cfg
->
ho°
 = 
uæ
;

771 
tmp
 = 
	`°rchr
(
uæ
, ':');

772 if(
tmp
) {

773 *
tmp
++ = 0;

774 
cfg
->
p‹t
 = 
	`©oi
(
tmp
);

777 
cfg
->
ho°
 = 
	`°rdup
(cfg->host);

779 
i
++;

780 }if(!
	`°rcmp
(
¨gv
[
i
], "-l") || !strcmp(argv[i], "--stdin-line")){

781 if(
pub_‹_sub
 !
CLIENT_PUB
){

782 
unknown_›ti⁄
;

784 if(
cfg
->
pub_mode
 !
MSGMODE_NONE
){

785 
	`Ârötf
(
°dîr
, "Error: Only oneÅype of message can be sentát once.\n\n");

788 
cfg
->
pub_mode
 = 
MSGMODE_STDIN_LINE
;

790 }if(!
	`°rcmp
(
¨gv
[
i
], "-m") || !strcmp(argv[i], "--message")){

791 if(
pub_‹_sub
 =
CLIENT_SUB
){

792 
unknown_›ti⁄
;

794 if(
cfg
->
pub_mode
 !
MSGMODE_NONE
){

795 
	`Ârötf
(
°dîr
, "Error: Only oneÅype of message can be sentát once.\n\n");

797 }if(
i
==
¨gc
-1){

798 
	`Ârötf
(
°dîr
, "Error: -márgument given butÇo message specified.\n\n");

801 
cfg
->
mesßge
 = 
	`°rdup
(
¨gv
[
i
+1]);

802 if(
cfg
->
mesßge
 =
NULL
){

803 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n\n");

806 
szt
 = 
	`°æí
(
cfg
->
mesßge
);

807 if(
szt
 > 
MQTT_MAX_PAYLOAD
){

808 
	`Ârötf
(
°dîr
, "Eº‹: MesßgêÀngth mu° bêÀs†th™ %u byãs.\n\n", 
MQTT_MAX_PAYLOAD
);

811 
cfg
->
msgÀn
 = ()
szt
;

812 
cfg
->
pub_mode
 = 
MSGMODE_CMD
;

814 
i
++;

815 }if(!
	`°rcmp
(
¨gv
[
i
], "-M")){

816 if(
i
==
¨gc
-1){

817 
	`Ârötf
(
°dîr
, "Error: -Márgument given but max_inflightÇot specified.\n\n");

820 
tmpi
 = 
	`©oi
(
¨gv
[
i
+1]);

821 if(
tmpi
 < 1){

822 
	`Ârötf
(
°dîr
, "Error: Maximum inflight messages must be greaterÅhan 0.\n\n");

825 
cfg
->
max_öÊight
 = ()
tmpi
;

827 
i
++;

828 }if(!
	`°rcmp
(
¨gv
[
i
], "--nodelay")){

829 
cfg
->
t˝_nodñay
 = 
åue
;

830 }if(!
	`°rcmp
(
¨gv
[
i
], "-n") || !strcmp(argv[i], "--null-message")){

831 if(
pub_‹_sub
 =
CLIENT_SUB
){

832 
unknown_›ti⁄
;

834 if(
cfg
->
pub_mode
 !
MSGMODE_NONE
){

835 
	`Ârötf
(
°dîr
, "Error: Only oneÅype of message can be sentát once.\n\n");

838 
cfg
->
pub_mode
 = 
MSGMODE_NULL
;

840 }if(!
	`°rcmp
(
¨gv
[
i
], "-N")){

841 if(
pub_‹_sub
 =
CLIENT_PUB
){

842 
unknown_›ti⁄
;

844 
cfg
->
eﬁ
 = 
Ál£
;

845 }if(!
	`°rcmp
(
¨gv
[
i
], "-p") || !strcmp(argv[i], "--port")){

846 if(
i
==
¨gc
-1){

847 
	`Ârötf
(
°dîr
, "Error: -párgument given butÇoÖort specified.\n\n");

850 
cfg
->
p‹t
 = 
	`©oi
(
¨gv
[
i
+1]);

851 if(
cfg
->
p‹t
<0 || cfg->port>65535){

852 
	`Ârötf
(
°dîr
, "Eº‹: InvÆidÖ‹àgiví: %d\n", 
cfg
->
p‹t
);

856 
i
++;

857 }if(!
	`°rcmp
(
¨gv
[
i
], "--pretty")){

858 if(
pub_‹_sub
 =
CLIENT_PUB
){

859 
unknown_›ti⁄
;

861 
cfg
->
¥ëty
 = 
åue
;

862 }if(!
	`°rcmp
(
¨gv
[
i
], "-P") || !strcmp(argv[i], "--pw")){

863 if(
i
==
¨gc
-1){

864 
	`Ârötf
(
°dîr
, "Error: -Párgument given butÇoÖassword specified.\n\n");

867 
cfg
->
∑ssw‹d
 = 
	`°rdup
(
¨gv
[
i
+1]);

869 
i
++;

870 #ifde‡
WITH_SOCKS


871 }if(!
	`°rcmp
(
¨gv
[
i
], "--proxy")){

872 if(
i
==
¨gc
-1){

873 
	`Ârötf
(
°dîr
, "Error: --proxyárgument given butÇoÖroxy url specified.\n\n");

876 if(
	`mosquôto__∑r£_socks_uæ
(
cfg
, 
¨gv
[
i
+1])){

879 
i
++;

882 #ifde‡
FINAL_WITH_TLS_PSK


883 }if(!
	`°rcmp
(
¨gv
[
i
], "--psk")){

884 if(
i
==
¨gc
-1){

885 
	`Ârötf
(
°dîr
, "Error: --pskárgument given butÇo key specified.\n\n");

888 
cfg
->
psk
 = 
	`°rdup
(
¨gv
[
i
+1]);

890 
i
++;

891 }if(!
	`°rcmp
(
¨gv
[
i
], "--psk-identity")){

892 if(
i
==
¨gc
-1){

893 
	`Ârötf
(
°dîr
, "Error: --psk-identityárgument given butÇo identity specified.\n\n");

896 
cfg
->
psk_idítôy
 = 
	`°rdup
(
¨gv
[
i
+1]);

898 
i
++;

900 }if(!
	`°rcmp
(
¨gv
[
i
], "-q") || !strcmp(argv[i], "--qos")){

901 if(
i
==
¨gc
-1){

902 
	`Ârötf
(
°dîr
, "Error: -qárgument given butÇo QoS specified.\n\n");

905 
cfg
->
qos
 = 
	`©oi
(
¨gv
[
i
+1]);

906 if(
cfg
->
qos
<0 || cfg->qos>2){

907 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid QoS giví: %d\n", 
cfg
->
qos
);

911 
i
++;

912 }if(!
	`°rcmp
(
¨gv
[
i
], "--quiet")){

913 
cfg
->
quõt
 = 
åue
;

914 }if(!
	`°rcmp
(
¨gv
[
i
], "-r") || !strcmp(argv[i], "--retain")){

915 if(
pub_‹_sub
 !
CLIENT_PUB
){

916 
unknown_›ti⁄
;

918 
cfg
->
ªèö
 = 1;

919 }if(!
	`°rcmp
(
¨gv
[
i
], "-R")){

920 if(
pub_‹_sub
 =
CLIENT_PUB
){

921 
unknown_›ti⁄
;

923 
cfg
->
no_ªèö
 = 
åue
;

924 
cfg
->
sub_›ts
 |
MQTT_SUB_OPT_SEND_RETAIN_NEVER
;

925 }if(!
	`°rcmp
(
¨gv
[
i
], "--random-filter")){

926 if(
pub_‹_sub
 !
CLIENT_SUB
){

927 
unknown_›ti⁄
;

929 if(
i
==
¨gc
-1){

930 
	`Ârötf
(
°dîr
, "Error: --random-filterárgument given butÇo chance specified.\n\n");

933 
cfg
->
øndom_fûãr
 = ()(10.0*
	`©of
(
¨gv
[
i
+1]));

934 if(
cfg
->
øndom_fûãr
 > 10000 || cfg->random_filter < 1){

935 
	`Ârötf
(
°dîr
, "Error: --random-filter chance must be between 0.1-100.0\n\n");

939 
i
++;

940 }if(!
	`°rcmp
(
¨gv
[
i
], "--remove-retained")){

941 if(
pub_‹_sub
 !
CLIENT_SUB
){

942 
unknown_›ti⁄
;

944 
cfg
->
ªmove_ªèöed
 = 
åue
;

945 }if(!
	`°rcmp
(
¨gv
[
i
], "--repeat")){

946 if(
pub_‹_sub
 !
CLIENT_PUB
){

947 
unknown_›ti⁄
;

949 if(
i
==
¨gc
-1){

950 
	`Ârötf
(
°dîr
, "Error: --repeatárgument given butÇo count specified.\n\n");

953 
cfg
->
ª≥©_cou¡
 = 
	`©oi
(
¨gv
[
i
+1]);

954 if(
cfg
->
ª≥©_cou¡
 < 1){

955 
	`Ârötf
(
°dîr
, "Error: --repeatárgument must be >0.\n\n");

959 
i
++;

960 }if(!
	`°rcmp
(
¨gv
[
i
], "--repeat-delay")){

961 if(
pub_‹_sub
 !
CLIENT_PUB
){

962 
unknown_›ti⁄
;

964 if(
i
==
¨gc
-1){

965 
	`Ârötf
(
°dîr
, "Error: --repeat-delayárgument given butÇoÅime specified.\n\n");

968 
f
 = ()
	`©of
(
¨gv
[
i
+1]);

969 if(
f
 < 0.0f){

970 
	`Ârötf
(
°dîr
, "Error: --repeat-delayárgument must be >=0.0.\n\n");

973 
f
 *= 1.0e6f;

974 
cfg
->
ª≥©_dñay
.
tv_£c
 = ()
f
/1000000;

975 
cfg
->
ª≥©_dñay
.
tv_u£c
 = ()
f
%1000000;

977 
i
++;

978 }if(!
	`°rcmp
(
¨gv
[
i
], "--retain-as-published")){

979 if(
pub_‹_sub
 =
CLIENT_PUB
){

980 
unknown_›ti⁄
;

982 
cfg
->
sub_›ts
 |
MQTT_SUB_OPT_RETAIN_AS_PUBLISHED
;

983 }if(!
	`°rcmp
(
¨gv
[
i
], "--retained-only")){

984 if(
pub_‹_sub
 !
CLIENT_SUB
){

985 
unknown_›ti⁄
;

987 
cfg
->
ªèöed_⁄ly
 = 
åue
;

988 }if(!
	`°rcmp
(
¨gv
[
i
], "-s") || !strcmp(argv[i], "--stdin-file")){

989 if(
pub_‹_sub
 =
CLIENT_SUB
){

990 
unknown_›ti⁄
;

992 if(
cfg
->
pub_mode
 !
MSGMODE_NONE
){

993 
	`Ârötf
(
°dîr
, "Error: Only oneÅype of message can be sentát once.\n\n");

996 
cfg
->
pub_mode
 = 
MSGMODE_STDIN_FILE
;

998 #ifde‡
WITH_SRV


999 }if(!
	`°rcmp
(
¨gv
[
i
], "-S")){

1000 
cfg
->
u£_§v
 = 
åue
;

1002 }if(!
	`°rcmp
(
¨gv
[
i
], "-t") || !strcmp(argv[i], "--topic")){

1003 if(
i
==
¨gc
-1){

1004 
	`Ârötf
(
°dîr
, "Error: -tárgument given butÇoÅopic specified.\n\n");

1007 if(
	`cfg_add_t›ic
(
cfg
, 
pub_‹_sub
, 
¨gv
[
i
 + 1], "-t"))

1009 
i
++;

1011 }if(!
	`°rcmp
(
¨gv
[
i
], "-T") || !strcmp(argv[i], "--filter-out")){

1012 if(
pub_‹_sub
 !
CLIENT_SUB
){

1013 
unknown_›ti⁄
;

1015 if(
i
==
¨gc
-1){

1016 
	`Ârötf
(
°dîr
, "Error: -Tárgument given butÇoÅopic filter specified.\n\n");

1019 if(
	`mosquôto_vÆid©e_utf8
(
¨gv
[
i
+1], ()
	`°æí
(argv[i+1]))){

1020 
	`Ârötf
(
°dîr
, "Error: Malformed UTF-8 in -Tárgument.\n\n");

1023 if(
	`mosquôto_sub_t›ic_check
(
¨gv
[
i
+1]Ë=
MOSQ_ERR_INVAL
){

1024 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid fûã∏t›i¯'%s',áªáŒ '+'ánd '#' wûdˇrd†c‹ª˘?\n", 
¨gv
[
i
+1]);

1027 
cfg
->
fûãr_out_cou¡
++;

1028 
cfg
->
fûãr_outs
 = 
	`ªÆloc
(cfg->fûãr_outs, (
size_t
 )cfg->
fûãr_out_cou¡
*(*));

1029 if(!
cfg
->
fûãr_outs
){

1030 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

1033 
cfg
->
fûãr_outs
[cfg->
fûãr_out_cou¡
-1] = 
	`°rdup
(
¨gv
[
i
+1]);

1035 
i
++;

1036 #ifde‡
WITH_TLS


1037 }if(!
	`°rcmp
(
¨gv
[
i
], "--tls-alpn")){

1038 if(
i
==
¨gc
-1){

1039 
	`Ârötf
(
°dîr
, "Error: --tls-alpnárgument given butÇoÖrotocol specified.\n\n");

1042 
cfg
->
és_Æ≤
 = 
	`°rdup
(
¨gv
[
i
+1]);

1044 
i
++;

1045 }if(!
	`°rcmp
(
¨gv
[
i
], "--tls-engine")){

1046 if(
i
==
¨gc
-1){

1047 
	`Ârötf
(
°dîr
, "Error: --tls-engineárgument given butÇoÉngine_id specified.\n\n");

1050 
cfg
->
és_ígöe
 = 
	`°rdup
(
¨gv
[
i
+1]);

1052 
i
++;

1053 }if(!
	`°rcmp
(
¨gv
[
i
], "--tls-engine-kpass-sha1")){

1054 if(
i
==
¨gc
-1){

1055 
	`Ârötf
(
°dîr
, "Error: --tls-engine-kpass-sha1árgument given butÇo kpass sha1 specified.\n\n");

1058 
cfg
->
és_ígöe_k∑ss_sha1
 = 
	`°rdup
(
¨gv
[
i
+1]);

1060 
i
++;

1061 }if(!
	`°rcmp
(
¨gv
[
i
], "--tls-use-os-certs")){

1062 
cfg
->
és_u£_os_˚πs
 = 
åue
;

1063 }if(!
	`°rcmp
(
¨gv
[
i
], "--tls-version")){

1064 if(
i
==
¨gc
-1){

1065 
	`Ârötf
(
°dîr
, "Error: --tls-versionárgument given butÇo version specified.\n\n");

1068 
cfg
->
és_vîsi⁄
 = 
	`°rdup
(
¨gv
[
i
+1]);

1070 
i
++;

1072 }if(!
	`°rcmp
(
¨gv
[
i
], "-U") || !strcmp(argv[i], "--unsubscribe")){

1073 if(
pub_‹_sub
 !
CLIENT_SUB
){

1074 
unknown_›ti⁄
;

1076 if(
i
==
¨gc
-1){

1077 
	`Ârötf
(
°dîr
, "Error: -Uárgument given butÇo unsubscribeÅopic specified.\n\n");

1080 if(
	`mosquôto_vÆid©e_utf8
(
¨gv
[
i
+1], ()
	`°æí
(argv[i+1]))){

1081 
	`Ârötf
(
°dîr
, "Error: Malformed UTF-8 in -Uárgument.\n\n");

1084 if(
	`mosquôto_sub_t›ic_check
(
¨gv
[
i
+1]Ë=
MOSQ_ERR_INVAL
){

1085 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid unsubs¸ibêt›i¯'%s',áªáŒ '+'ánd '#' wûdˇrd†c‹ª˘?\n", 
¨gv
[
i
+1]);

1088 
cfg
->
unsub_t›ic_cou¡
++;

1089 
cfg
->
unsub_t›ics
 = 
	`ªÆloc
(cfg->unsub_t›ics, (
size_t
 )cfg->
unsub_t›ic_cou¡
*(*));

1090 if(!
cfg
->
unsub_t›ics
){

1091 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

1094 
cfg
->
unsub_t›ics
[cfg->
unsub_t›ic_cou¡
-1] = 
	`°rdup
(
¨gv
[
i
+1]);

1096 
i
++;

1097 }if(!
	`°rcmp
(
¨gv
[
i
], "-u") || !strcmp(argv[i], "--username")){

1098 if(
i
==
¨gc
-1){

1099 
	`Ârötf
(
°dîr
, "Error: -uárgument given butÇo username specified.\n\n");

1102 
cfg
->
u£∫ame
 = 
	`°rdup
(
¨gv
[
i
+1]);

1104 
i
++;

1105 }if(!
	`°rcmp
(
¨gv
[
i
], "--unix")){

1106 if(
i
==
¨gc
-1){

1107 
	`Ârötf
(
°dîr
, "Error: --unixárgument given butÇo socketÖath specified.\n\n");

1110 
cfg
->
ho°
 = 
	`°rdup
(
¨gv
[
i
+1]);

1111 
cfg
->
p‹t
 = 0;

1113 
i
++;

1114 }if(!
	`°rcmp
(
¨gv
[
i
], "-V") || !strcmp(argv[i], "--protocol-version")){

1115 if(
i
==
¨gc
-1){

1116 
	`Ârötf
(
°dîr
, "Error: --protocol-versionárgument given butÇo version specified.\n\n");

1119 if(!
	`°rcmp
(
¨gv
[
i
+1], "mqttv31") || !strcmp(argv[i+1], "31")){

1120 
cfg
->
¥Ÿocﬁ_vîsi⁄
 = 
MQTT_PROTOCOL_V31
;

1121 }if(!
	`°rcmp
(
¨gv
[
i
+1], "mqttv311") || !strcmp(argv[i+1], "311")){

1122 
cfg
->
¥Ÿocﬁ_vîsi⁄
 = 
MQTT_PROTOCOL_V311
;

1123 }if(!
	`°rcmp
(
¨gv
[
i
+1], "mqttv5") || !strcmp(argv[i+1], "5")){

1124 
cfg
->
¥Ÿocﬁ_vîsi⁄
 = 
MQTT_PROTOCOL_V5
;

1126 
	`Ârötf
(
°dîr
, "Error: InvalidÖrotocol versionárgument given.\n\n");

1129 
i
++;

1131 }if(!
	`°rcmp
(
¨gv
[
i
], "-v") || !strcmp(argv[i], "--verbose")){

1132 if(
pub_‹_sub
 =
CLIENT_PUB
){

1133 
unknown_›ti⁄
;

1135 
cfg
->
vîbo£
 = 1;

1136 }if(!
	`°rcmp
(
¨gv
[
i
], "--version")){

1138 }if(!
	`°rcmp
(
¨gv
[
i
], "-W")){

1139 if(
pub_‹_sub
 =
CLIENT_PUB
){

1140 
unknown_›ti⁄
;

1142 if(
i
==
¨gc
-1){

1143 
	`Ârötf
(
°dîr
, "Error: -Wárgument given butÇoÅimeout specified.\n\n");

1146 
tmpi
 = 
	`©oi
(
¨gv
[
i
+1]);

1147 if(
tmpi
 < 1){

1148 
	`Ârötf
(
°dîr
, "Eº‹: InvÆidÅimeouà\"%d\".\n\n", 
tmpi
);

1151 
cfg
->
timeout
 = ()
tmpi
;

1153 
i
++;

1155 }if(!
	`°rcmp
(
¨gv
[
i
], "--will-payload")){

1156 if(
i
==
¨gc
-1){

1157 
	`Ârötf
(
°dîr
, "Error: --will-payloadárgument given butÇo willÖayload specified.\n\n");

1160 
cfg
->
wûl_∑ylﬂd
 = 
	`°rdup
(
¨gv
[
i
+1]);

1161 
cfg
->
wûl_∑ylﬂdÀn
 = ()
	`°æí
(cfg->
wûl_∑ylﬂd
);

1163 
i
++;

1164 }if(!
	`°rcmp
(
¨gv
[
i
], "--will-qos")){

1165 if(
i
==
¨gc
-1){

1166 
	`Ârötf
(
°dîr
, "Error: --will-qosárgument given butÇo will QoS specified.\n\n");

1169 
cfg
->
wûl_qos
 = 
	`©oi
(
¨gv
[
i
+1]);

1170 if(
cfg
->
wûl_qos
 < 0 || cfg->will_qos > 2){

1171 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid wû»QoS %d.\n\n", 
cfg
->
wûl_qos
);

1175 
i
++;

1176 }if(!
	`°rcmp
(
¨gv
[
i
], "--will-retain")){

1177 
cfg
->
wûl_ªèö
 = 
åue
;

1178 }if(!
	`°rcmp
(
¨gv
[
i
], "--will-topic")){

1179 if(
i
==
¨gc
-1){

1180 
	`Ârötf
(
°dîr
, "Error: --will-topicárgument given butÇo willÅopic specified.\n\n");

1183 if(
	`mosquôto_vÆid©e_utf8
(
¨gv
[
i
+1], ()
	`°æí
(argv[i+1]))){

1184 
	`Ârötf
(
°dîr
, "Error: Malformed UTF-8 in --will-topicárgument.\n\n");

1187 if(
	`mosquôto_pub_t›ic_check
(
¨gv
[
i
+1]Ë=
MOSQ_ERR_INVAL
){

1188 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid wû»t›i¯'%s', d€†ô c⁄èö '+' o∏'#'?\n", 
¨gv
[
i
+1]);

1191 
cfg
->
wûl_t›ic
 = 
	`°rdup
(
¨gv
[
i
+1]);

1193 
i
++;

1194 }if(!
	`°rcmp
(
¨gv
[
i
], "-x")){

1195 if(
i
==
¨gc
-1){

1196 
	`Ârötf
(
°dîr
, "Error: -xárgument given butÇo sessionÉxpiry interval specified.\n\n");

1199 if(!
	`°rcmp
(
¨gv
[
i
+1], "‚àû")){

1200 
cfg
->
£ssi⁄_expúy_öãrvÆ
 = 
UINT32_MAX
;

1202 *
íd±r
 = 
NULL
;

1203 
cfg
->
£ssi⁄_expúy_öãrvÆ
 = 
	`°πﬁ
(
¨gv
[
i
+1], &
íd±r
, 0);

1204 if(
íd±r
 =
¨gv
[
i
+1] ||Éndptr[0] != '\0'){

1206 
	`Ârötf
(
°dîr
, "Error: session-expiry-intervalÇotáÇumber.\n\n");

1209 if(
cfg
->
£ssi⁄_expúy_öãrvÆ
 > 
UINT32_MAX
 || cfg->session_expiry_interval < -1){

1210 
	`Ârötf
(
°dîr
, "Error: session-expiry-interval out ofÑange.\n\n");

1213 if(
cfg
->
£ssi⁄_expúy_öãrvÆ
 == -1){

1215 
cfg
->
£ssi⁄_expúy_öãrvÆ
 = 
UINT32_MAX
;

1219 
i
++;

1221 
unknown_›ti⁄
;

1225  
MOSQ_ERR_SUCCESS
;

1227 
unknown_›ti⁄
:

1228 
	`Ârötf
(
°dîr
, "Eº‹: Unknow¿›ti⁄ '%s'.\n",
¨gv
[
i
]);

1230 
	}
}

1232 
	$˛õ¡_›ts_£t
(
mosquôto
 *
mosq
, 
mosq_c⁄fig
 *
cfg
)

1234 #i‡
	`deföed
(
WITH_TLS
Ë|| deföed(
WITH_SOCKS
)

1235 
rc
;

1238 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
cfg
->
¥Ÿocﬁ_vîsi⁄
);

1240 if(
cfg
->
wûl_t›ic
 && 
	`mosquôto_wûl_£t_v5
(
mosq
, cfg->will_topic,

1241 
cfg
->
wûl_∑ylﬂdÀn
, cfg->
wûl_∑ylﬂd
, cfg->
wûl_qos
,

1242 
cfg
->
wûl_ªèö
, cfg->
wûl_¥›s
)){

1244 
	`îr_¥ötf
(
cfg
, "Error: Problem setting will.\n");

1245 
	`mosquôto_lib_˛ónup
();

1248 
cfg
->
wûl_¥›s
 = 
NULL
;

1250 if((
cfg
->
u£∫ame
 || cfg->
∑ssw‹d
Ë&& 
	`mosquôto_u£∫ame_pw_£t
(
mosq
, cfg->username, cfg->password)){

1251 
	`îr_¥ötf
(
cfg
, "Error: Problem setting usernameánd/orÖassword.\n");

1252 
	`mosquôto_lib_˛ónup
();

1255 #ifde‡
WITH_TLS


1256 if(
cfg
->
ˇfûe
 || cfg->
ˇ∑th
){

1257 
rc
 = 
	`mosquôto_és_£t
(
mosq
, 
cfg
->
ˇfûe
, cfg->
ˇ∑th
, cfg->
˚πfûe
, cfg->
keyfûe
, 
NULL
);

1258 if(
rc
){

1259 if(
rc
 =
MOSQ_ERR_INVAL
){

1260 
	`îr_¥ötf
(
cfg
, "Error: Problem setting TLS options: FileÇot found.\n");

1262 
	`îr_¥ötf
(
cfg
, "Eº‹: ProbÀm sëtög TLS o±i⁄s: %s.\n", 
	`mosquôto_°ªº‹
(
rc
));

1264 
	`mosquôto_lib_˛ónup
();

1267 #ifde‡
FINAL_WITH_TLS_PSK


1268 }if(
cfg
->
psk
){

1269 if(
	`mosquôto_és_psk_£t
(
mosq
, 
cfg
->
psk
, cfg->
psk_idítôy
, 
NULL
)){

1270 
	`îr_¥ötf
(
cfg
, "Error: Problem setting TLS-PSK options.\n");

1271 
	`mosquôto_lib_˛ónup
();

1275 }if(
cfg
->
p‹t
 == 8883){

1276 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_TLS_USE_OS_CERTS
, 1);

1278 if(
cfg
->
és_u£_os_˚πs
){

1279 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_TLS_USE_OS_CERTS
, 1);

1282 if(
cfg
->
ö£cuª
 && 
	`mosquôto_és_ö£cuª_£t
(
mosq
, 
åue
)){

1283 
	`îr_¥ötf
(
cfg
, "Error: Problem setting TLS insecure option.\n");

1284 
	`mosquôto_lib_˛ónup
();

1287 if(
cfg
->
és_ígöe
 && 
	`mosquôto_°rög_›ti⁄
(
mosq
, 
MOSQ_OPT_TLS_ENGINE
, cfg->tls_engine)){

1288 
	`îr_¥ötf
(
cfg
, "Eº‹: ProbÀm sëtög TLSÉngöe, i†%†®vÆidÉngöe?\n", cfg->
és_ígöe
);

1289 
	`mosquôto_lib_˛ónup
();

1292 if(
cfg
->
keyf‹m
 && 
	`mosquôto_°rög_›ti⁄
(
mosq
, 
MOSQ_OPT_TLS_KEYFORM
, cfg->keyform)){

1293 
	`îr_¥ötf
(
cfg
, "Error: Problem setting key form, it must be one of 'pem' or 'engine'.\n");

1294 
	`mosquôto_lib_˛ónup
();

1297 if(
cfg
->
és_ígöe_k∑ss_sha1
 && 
	`mosquôto_°rög_›ti⁄
(
mosq
, 
MOSQ_OPT_TLS_ENGINE_KPASS_SHA1
, cfg->tls_engine_kpass_sha1)){

1298 
	`îr_¥ötf
(
cfg
, "Error: Problem setting TLSÉngine keyÖass sha, is itá 40 character hex string?\n");

1299 
	`mosquôto_lib_˛ónup
();

1302 if(
cfg
->
és_Æ≤
 && 
	`mosquôto_°rög_›ti⁄
(
mosq
, 
MOSQ_OPT_TLS_ALPN
, cfg->tls_alpn)){

1303 
	`îr_¥ötf
(
cfg
, "Error: Problem setting TLS ALPNÖrotocol.\n");

1304 
	`mosquôto_lib_˛ónup
();

1307 if((
cfg
->
és_vîsi⁄
 || cfg->
cùhîs
Ë&& 
	`mosquôto_és_›ts_£t
(
mosq
, 1, cfg->tls_version, cfg->ciphers)){

1308 
	`îr_¥ötf
(
cfg
, "Error: Problem setting TLS options, checkÅhe optionsáre valid.\n");

1309 
	`mosquôto_lib_˛ónup
();

1313 
	`mosquôto_max_öÊight_mesßges_£t
(
mosq
, 
cfg
->
max_öÊight
);

1314 #ifde‡
WITH_SOCKS


1315 if(
cfg
->
socks5_ho°
){

1316 
rc
 = 
	`mosquôto_socks5_£t
(
mosq
, 
cfg
->
socks5_ho°
, cfg->
socks5_p‹t
, cfg->
socks5_u£∫ame
, cfg->
socks5_∑ssw‹d
);

1317 if(
rc
){

1318 
	`mosquôto_lib_˛ónup
();

1319  
rc
;

1323 if(
cfg
->
t˝_nodñay
){

1324 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_TCP_NODELAY
, 1);

1327 if(
cfg
->
msg_cou¡
 > 0 && cfg->msg_count < 20){

1331 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_RECEIVE_MAXIMUM
, 
cfg
->
msg_cou¡
);

1333  
MOSQ_ERR_SUCCESS
;

1334 
	}
}

1336 
	$˛õ¡_id_gíî©e
(
mosq_c⁄fig
 *
cfg
)

1338 if(
cfg
->
id_¥efix
){

1339 
cfg
->
id
 = 
	`mÆloc
(
	`°æí
(cfg->
id_¥efix
)+10);

1340 if(!
cfg
->
id
){

1341 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

1342 
	`mosquôto_lib_˛ónup
();

1345 
	`¢¥ötf
(
cfg
->
id
, 
	`°æí
(cfg->
id_¥efix
)+10, "%s%d", cfg->id_¥efix, 
	`gëpid
());

1347  
MOSQ_ERR_SUCCESS
;

1348 
	}
}

1350 
	$˛õ¡_c⁄√˘
(
mosquôto
 *
mosq
, 
mosq_c⁄fig
 *
cfg
)

1352 #i‚de‡
WIN32


1353 *
îr
;

1355 
îr
[1024];

1357 
rc
;

1358 
p‹t
;

1360 if(
cfg
->
p‹t
 =
PORT_UNDEFINED
){

1361 #ifde‡
WITH_TLS


1362 if(
cfg
->
ˇfûe
 || cfg->
ˇ∑th


1363 #ifde‡
FINAL_WITH_TLS_PSK


1364 || 
cfg
->
psk


1367 
p‹t
 = 8883;

1371 
p‹t
 = 1883;

1374 
p‹t
 = 
cfg
->port;

1377 #ifde‡
WITH_SRV


1378 if(
cfg
->
u£_§v
){

1379 
rc
 = 
	`mosquôto_c⁄√˘_§v
(
mosq
, 
cfg
->
ho°
, cfg->
kì∑live
, cfg->
böd_addªss
);

1381 
rc
 = 
	`mosquôto_c⁄√˘_böd_v5
(
mosq
, 
cfg
->
ho°
, 
p‹t
, cfg->
kì∑live
, cfg->
böd_addªss
, cfg->
c⁄√˘_¥›s
);

1384 
rc
 = 
	`mosquôto_c⁄√˘_böd_v5
(
mosq
, 
cfg
->
ho°
, 
p‹t
, cfg->
kì∑live
, cfg->
böd_addªss
, cfg->
c⁄√˘_¥›s
);

1386 if(
rc
>0){

1387 if(
rc
 =
MOSQ_ERR_ERRNO
){

1388 #i‚de‡
WIN32


1389 
îr
 = 
	`°ªº‹
(
î∫o
);

1391 
	`F‹m©Mesßge
(
FORMAT_MESSAGE_FROM_SYSTEM
, 
NULL
, 
î∫o
, 0, (
LPTSTR
)&
îr
, 1024, NULL);

1393 
	`îr_¥ötf
(
cfg
, "Eº‹: %s\n", 
îr
);

1395 
	`îr_¥ötf
(
cfg
, "U«bÀÅÿc⁄√˘ (%s).\n", 
	`mosquôto_°ªº‹
(
rc
));

1397 
	`mosquôto_lib_˛ónup
();

1398  
rc
;

1400  
MOSQ_ERR_SUCCESS
;

1401 
	}
}

1403 #ifde‡
WITH_SOCKS


1405 
	$mosquôto__uædecode
(*
°r
)

1407 
size_t
 
i
, 
j
;

1408 
size_t
 
Àn
;

1409 if(!
°r
)  0;

1411 if(!
	`°rchr
(
°r
, '%'))  0;

1413 
Àn
 = 
	`°æí
(
°r
);

1414 
i
=0; i<
Àn
; i++){

1415 if(
°r
[
i
] == '%'){

1416 if(
i
+2 >
Àn
){

1419 if(
°r
[
i
+1] == '2' && str[i+2] == '5'){

1420 
°r
[
i
] = '%';

1421 
Àn
 -= 2;

1422 
j
=
i
+1; j<
Àn
; j++){

1423 
°r
[
j
] = str[j+2];

1425 
°r
[
j
] = '\0';

1426 }if(
°r
[
i
+1] == '3' && (str[i+2] == 'A' || str[i+2] == 'a')){

1427 
°r
[
i
] = ':';

1428 
Àn
 -= 2;

1429 
j
=
i
+1; j<
Àn
; j++){

1430 
°r
[
j
] = str[j+2];

1432 
°r
[
j
] = '\0';

1433 }if(
°r
[
i
+1] == '4' && str[i+2] == '0'){

1434 
°r
[
i
] = ':';

1435 
Àn
 -= 2;

1436 
j
=
i
+1; j<
Àn
; j++){

1437 
°r
[
j
] = str[j+2];

1439 
°r
[
j
] = '\0';

1446 
	}
}

1448 
	$mosquôto__∑r£_socks_uæ
(
mosq_c⁄fig
 *
cfg
, *
uæ
)

1450 *
°r
;

1451 
size_t
 
i
;

1452 *
u£∫ame
 = 
NULL
, *
∑ssw‹d
 = NULL, *
ho°
 = NULL, *
p‹t
 = NULL;

1453 *
u£∫ame_‹_ho°
 = 
NULL
;

1454 
size_t
 
°¨t
;

1455 
size_t
 
Àn
;

1456 
boﬁ
 
have_auth
 = 
Ál£
;

1457 
p‹t_öt
;

1459 if(!
	`°∫cmp
(
uæ
, "socks5h://", 
	`°æí
("socks5h://"))){

1460 
°r
 = 
uæ
 + 
	`°æí
("socks5h://");

1462 
	`îr_¥ötf
(
cfg
, "Eº‹: Unsuµ‹ãdÖroxyÖrŸocﬁ: %s\n", 
uæ
);

1474 
°¨t
 = 0;

1475 
i
=0; i<
	`°æí
(
°r
); i++){

1476 if(
°r
[
i
] == ':'){

1477 if(
i
 =
°¨t
){

1478 
˛ónup
;

1480 if(
have_auth
){

1483 if(
ho°
){

1485 
˛ónup
;

1487 
Àn
 = 
i
-
°¨t
;

1488 
ho°
 = 
	`mÆloc
(
Àn
 + 1);

1489 if(!
ho°
){

1490 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

1491 
˛ónup
;

1493 
	`mem˝y
(
ho°
, &(
°r
[
°¨t
]), 
Àn
);

1494 
ho°
[
Àn
] = '\0';

1495 
°¨t
 = 
i
+1;

1496 }if(!
u£∫ame_‹_ho°
){

1500 
Àn
 = 
i
-
°¨t
;

1501 
u£∫ame_‹_ho°
 = 
	`mÆloc
(
Àn
 + 1);

1502 if(!
u£∫ame_‹_ho°
){

1503 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

1504 
˛ónup
;

1506 
	`mem˝y
(
u£∫ame_‹_ho°
, &(
°r
[
°¨t
]), 
Àn
);

1507 
u£∫ame_‹_ho°
[
Àn
] = '\0';

1508 
°¨t
 = 
i
+1;

1510 }if(
°r
[
i
] == '@'){

1511 if(
i
 =
°¨t
){

1512 
˛ónup
;

1514 
have_auth
 = 
åue
;

1515 if(
u£∫ame_‹_ho°
){

1517 
u£∫ame
 = 
u£∫ame_‹_ho°
;

1518 
u£∫ame_‹_ho°
 = 
NULL
;

1520 
Àn
 = 
i
-
°¨t
;

1521 
∑ssw‹d
 = 
	`mÆloc
(
Àn
 + 1);

1522 if(!
∑ssw‹d
){

1523 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

1524 
˛ónup
;

1526 
	`mem˝y
(
∑ssw‹d
, &(
°r
[
°¨t
]), 
Àn
);

1527 
∑ssw‹d
[
Àn
] = '\0';

1528 
°¨t
 = 
i
+1;

1532 if(
u£∫ame
){

1534 
˛ónup
;

1536 
Àn
 = 
i
-
°¨t
;

1537 
u£∫ame
 = 
	`mÆloc
(
Àn
 + 1);

1538 if(!
u£∫ame
){

1539 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

1540 
˛ónup
;

1542 
	`mem˝y
(
u£∫ame
, &(
°r
[
°¨t
]), 
Àn
);

1543 
u£∫ame
[
Àn
] = '\0';

1544 
°¨t
 = 
i
+1;

1550 if(
i
 > 
°¨t
){

1551 
Àn
 = 
i
-
°¨t
;

1552 if(
ho°
){

1555 
p‹t
 = 
	`mÆloc
(
Àn
 + 1);

1556 if(!
p‹t
){

1557 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

1558 
˛ónup
;

1560 
	`mem˝y
(
p‹t
, &(
°r
[
°¨t
]), 
Àn
);

1561 
p‹t
[
Àn
] = '\0';

1562 }if(
u£∫ame_‹_ho°
){

1565 
ho°
 = 
u£∫ame_‹_ho°
;

1566 
u£∫ame_‹_ho°
 = 
NULL
;

1567 
p‹t
 = 
	`mÆloc
(
Àn
 + 1);

1568 if(!
p‹t
){

1569 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

1570 
˛ónup
;

1572 
	`mem˝y
(
p‹t
, &(
°r
[
°¨t
]), 
Àn
);

1573 
p‹t
[
Àn
] = '\0';

1575 
ho°
 = 
	`mÆloc
(
Àn
 + 1);

1576 if(!
ho°
){

1577 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

1578 
˛ónup
;

1580 
	`mem˝y
(
ho°
, &(
°r
[
°¨t
]), 
Àn
);

1581 
ho°
[
Àn
] = '\0';

1585 if(!
ho°
){

1586 
	`îr_¥ötf
(
cfg
, "Error: InvalidÖroxy.\n");

1587 
˛ónup
;

1590 if(
	`mosquôto__uædecode
(
u£∫ame
)){

1591 
˛ónup
;

1593 if(
	`mosquôto__uædecode
(
∑ssw‹d
)){

1594 
˛ónup
;

1596 if(
p‹t
){

1597 
p‹t_öt
 = 
	`©oi
(
p‹t
);

1598 if(
p‹t_öt
 < 1 ||Öort_int > 65535){

1599 
	`îr_¥ötf
(
cfg
, "Eº‹: InvÆidÖroxyÖ‹à%d\n", 
p‹t_öt
);

1600 
˛ónup
;

1602 
	`‰ì
(
p‹t
);

1604 
p‹t_öt
 = 1080;

1607 
cfg
->
socks5_u£∫ame
 = 
u£∫ame
;

1608 
cfg
->
socks5_∑ssw‹d
 = 
∑ssw‹d
;

1609 
cfg
->
socks5_ho°
 = 
ho°
;

1610 
cfg
->
socks5_p‹t
 = 
p‹t_öt
;

1613 
˛ónup
:

1614 
	`‰ì
(
u£∫ame_‹_ho°
);

1615 
	`‰ì
(
u£∫ame
);

1616 
	`‰ì
(
∑ssw‹d
);

1617 
	`‰ì
(
ho°
);

1618 
	`‰ì
(
p‹t
);

1620 
	}
}

1623 
	$îr_¥ötf
(c⁄° 
mosq_c⁄fig
 *
cfg
, c⁄° *
fmt
, ...)

1625 
va_li°
 
va
;

1627 if(
cfg
->
quõt
) ;

1629 
	`va_°¨t
(
va
, 
fmt
);

1630 
	`vÂrötf
(
°dîr
, 
fmt
, 
va
);

1631 
	`va_íd
(
va
);

1632 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/client/client_shared.h

19 #i‚de‡
CLIENT_CONFIG_H


20 
	#CLIENT_CONFIG_H


	)

22 
	~<°dio.h
>

24 #ifde‡
WIN32


25 
	~<wösock2.h
>

27 
	~<sys/time.h
>

30 #i‚de‡
__GNUC__


31 
	#__©åibuã__
(
©åib
)

	)

35 
	#MSGMODE_NONE
 0

	)

36 
	#MSGMODE_CMD
 1

	)

37 
	#MSGMODE_STDIN_LINE
 2

	)

38 
	#MSGMODE_STDIN_FILE
 3

	)

39 
	#MSGMODE_FILE
 4

	)

40 
	#MSGMODE_NULL
 5

	)

42 
	#CLIENT_PUB
 1

	)

43 
	#CLIENT_SUB
 2

	)

44 
	#CLIENT_RR
 3

	)

45 
	#CLIENT_RESPONSE_TOPIC
 4

	)

47 
	#PORT_UNDEFINED
 -1

	)

48 
	#PORT_UNIX
 0

	)

50 
	smosq_c⁄fig
 {

51 *
	mid
;

52 *
	mid_¥efix
;

53 
	m¥Ÿocﬁ_vîsi⁄
;

54 
	mkì∑live
;

55 *
	mho°
;

56 
	mp‹t
;

57 
	mqos
;

58 
boﬁ
 
	mªèö
;

59 
	mpub_mode
;

60 *
	mfûe_öput
;

61 *
	mmesßge
;

62 
	mmsgÀn
;

63 *
	mt›ic
;

64 *
	mböd_addªss
;

65 
	mª≥©_cou¡
;

66 
timevÆ
 
	mª≥©_dñay
;

67 #ifde‡
WITH_SRV


68 
boﬁ
 
	mu£_§v
;

70 
boﬁ
 
	mdebug
;

71 
boﬁ
 
	mquõt
;

72 
	mmax_öÊight
;

73 *
	mu£∫ame
;

74 *
	m∑ssw‹d
;

75 *
	mwûl_t›ic
;

76 *
	mwûl_∑ylﬂd
;

77 
	mwûl_∑ylﬂdÀn
;

78 
	mwûl_qos
;

79 
boﬁ
 
	mwûl_ªèö
;

80 #ifde‡
WITH_TLS


81 *
	mˇfûe
;

82 *
	mˇ∑th
;

83 *
	m˚πfûe
;

84 *
	mkeyfûe
;

85 *
	mcùhîs
;

86 
boﬁ
 
	mö£cuª
;

87 *
	més_Æ≤
;

88 *
	més_vîsi⁄
;

89 *
	més_ígöe
;

90 *
	més_ígöe_k∑ss_sha1
;

91 *
	mkeyf‹m
;

92 
boﬁ
 
	més_u£_os_˚πs
;

93 #ifde‡
FINAL_WITH_TLS_PSK


94 *
	mpsk
;

95 *
	mpsk_idítôy
;

98 
boﬁ
 
	m˛ón_£ssi⁄
;

99 **
	mt›ics
;

100 
	mt›ic_cou¡
;

101 
boﬁ
 
	mexô_a·î_sub
;

102 
boﬁ
 
	mno_ªèö
;

103 
boﬁ
 
	mªèöed_⁄ly
;

104 
boﬁ
 
	mªmove_ªèöed
;

105 **
	mfûãr_outs
;

106 
	mfûãr_out_cou¡
;

107 **
	munsub_t›ics
;

108 
	munsub_t›ic_cou¡
;

109 
boﬁ
 
	mvîbo£
;

110 
boﬁ
 
	meﬁ
;

111 
	mmsg_cou¡
;

112 *
	mf‹m©
;

113 
boﬁ
 
	m¥ëty
;

114 
	mtimeout
;

115 
	msub_›ts
;

116 
	m£ssi⁄_expúy_öãrvÆ
;

117 
	møndom_fûãr
;

118 #ifde‡
WITH_SOCKS


119 *
	msocks5_ho°
;

120 
	msocks5_p‹t
;

121 *
	msocks5_u£∫ame
;

122 *
	msocks5_∑ssw‹d
;

124 
mosquôto_¥›îty
 *
	mc⁄√˘_¥›s
;

125 
mosquôto_¥›îty
 *
	mpublish_¥›s
;

126 
mosquôto_¥›îty
 *
	msubs¸ibe_¥›s
;

127 
mosquôto_¥›îty
 *
	munsubs¸ibe_¥›s
;

128 
mosquôto_¥›îty
 *
	mdisc⁄√˘_¥›s
;

129 
mosquôto_¥›îty
 *
	mwûl_¥›s
;

130 
boﬁ
 
	mhave_t›ic_Æüs
;

131 *
	mª•⁄£_t›ic
;

132 
boﬁ
 
	mt˝_nodñay
;

135 
˛õ¡_c⁄fig_lﬂd
(
mosq_c⁄fig
 *
c⁄fig
, 
pub_‹_sub
, 
¨gc
, *
¨gv
[]);

136 
˛õ¡_c⁄fig_˛ónup
(
mosq_c⁄fig
 *
cfg
);

137 
˛õ¡_›ts_£t
(
mosquôto
 *
mosq
, 
mosq_c⁄fig
 *
cfg
);

138 
˛õ¡_id_gíî©e
(
mosq_c⁄fig
 *
cfg
);

139 
˛õ¡_c⁄√˘
(
mosquôto
 *
mosq
, 
mosq_c⁄fig
 *
cfg
);

141 
cfg_∑r£_¥›îty
(
mosq_c⁄fig
 *
cfg
, 
¨gc
, *
¨gv
[], *
idx
);

143 
	$îr_¥ötf
(c⁄° 
mosq_c⁄fig
 *
cfg
, c⁄° *
fmt
, ...Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 3)));

	@open_source_lib/mosquitto/mosquitto-2.0.15/client/pub_client.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 #i‚de‡
WIN32


27 
	~<sys/time.h
>

28 
	~<time.h
>

30 
	~<¥o˚ss.h
>

31 
	~<wösock2.h
>

32 
	#¢¥ötf
 
•rötf_s


	)

35 
	~<mqâ_¥Ÿocﬁ.h
>

36 
	~<mosquôto.h
>

37 
	~"˛õ¡_sh¨ed.h
"

38 
	~"pub_sh¨ed.h
"

42 
boﬁ
 
	gfú°_publish
 = 
åue
;

43 
	gœ°_mid
 = -1;

44 
	gœ°_mid_£¡
 = -1;

45 *
	glöe_buf
 = 
NULL
;

46 
	glöe_buf_Àn
 = 1024;

47 
boﬁ
 
	gdisc⁄√˘_£¡
 = 
Ál£
;

48 
	gpublish_cou¡
 = 0;

49 
boﬁ
 
	gªady_f‹_ª≥©
 = 
Ál£
;

50 vﬁ©ûê
	g°©us
 = 
STATUS_CONNECTING
;

51 
	gc⁄«ck_ªsu…
 = 0;

53 #ifde‡
WIN32


54 
uöt64_t
 
	g√xt_publish_tv
;

56 
	$£t_ª≥©_time
()

58 
uöt64_t
 
ticks
 = 
	`GëTickCou¡64
();

59 
√xt_publish_tv
 = 
ticks
 + 
cfg
.
ª≥©_dñay
.
tv_£c
*1000 + cfg.ª≥©_dñay.
tv_u£c
/1000;

60 
	}
}

62 
	$check_ª≥©_time
()

64 
uöt64_t
 
ticks
 = 
	`GëTickCou¡64
();

66 if(
ticks
 > 
√xt_publish_tv
){

71 
	}
}

74 
timevÆ
 
	g√xt_publish_tv
;

76 
	$£t_ª≥©_time
()

78 
	`gëtimeofday
(&
√xt_publish_tv
, 
NULL
);

79 
√xt_publish_tv
.
tv_£c
 +
cfg
.
ª≥©_dñay
.tv_sec;

80 
√xt_publish_tv
.
tv_u£c
 +
cfg
.
ª≥©_dñay
.tv_usec;

82 
√xt_publish_tv
.
tv_£c
 +√xt_publish_tv.
tv_u£c
/1000000;

83 
√xt_publish_tv
.
tv_u£c
 =Çext_publish_tv.tv_usec%1000000;

84 
	}
}

86 
	$check_ª≥©_time
()

88 
timevÆ
 
tv
;

90 
	`gëtimeofday
(&
tv
, 
NULL
);

92 if(
tv
.
tv_£c
 > 
√xt_publish_tv
.tv_sec){

94 }if(
tv
.
tv_£c
 =
√xt_publish_tv
.tv_sec

95 && 
tv
.
tv_u£c
 > 
√xt_publish_tv
.tv_usec){

100 
	}
}

103 
	$my_disc⁄√˘_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
rc
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

105 
	`UNUSED
(
mosq
);

106 
	`UNUSED
(
obj
);

107 
	`UNUSED
(
rc
);

108 
	`UNUSED
(
¥›îtõs
);

110 if(
rc
 == 0){

111 
°©us
 = 
STATUS_DISCONNECTED
;

113 
	}
}

115 
	$my_publish
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
)

117 
ªady_f‹_ª≥©
 = 
Ál£
;

118 if(
cfg
.
¥Ÿocﬁ_vîsi⁄
 =
MQTT_PROTOCOL_V5
 && cfg.
have_t›ic_Æüs
 && 
fú°_publish
 =
Ál£
){

119  
	`mosquôto_publish_v5
(
mosq
, 
mid
, 
NULL
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
, 
cfg
.
publish_¥›s
);

121 
fú°_publish
 = 
Ál£
;

122  
	`mosquôto_publish_v5
(
mosq
, 
mid
, 
t›ic
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
, 
cfg
.
publish_¥›s
);

124 
	}
}

127 
	$my_c⁄√˘_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
ªsu…
, 
Êags
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

129 
rc
 = 
MOSQ_ERR_SUCCESS
;

131 
	`UNUSED
(
obj
);

132 
	`UNUSED
(
Êags
);

133 
	`UNUSED
(
¥›îtõs
);

135 
c⁄«ck_ªsu…
 = 
ªsu…
;

137 if(!
ªsu…
){

138 
fú°_publish
 = 
åue
;

139 
cfg
.
pub_mode
){

140 
MSGMODE_CMD
:

141 
MSGMODE_FILE
:

142 
MSGMODE_STDIN_FILE
:

143 
rc
 = 
	`my_publish
(
mosq
, &
mid_£¡
, 
cfg
.
t›ic
, cfg.
msgÀn
, cfg.
mesßge
, cfg.
qos
, cfg.
ªèö
);

145 
MSGMODE_NULL
:

146 
rc
 = 
	`my_publish
(
mosq
, &
mid_£¡
, 
cfg
.
t›ic
, 0, 
NULL
, cfg.
qos
, cfg.
ªèö
);

148 
MSGMODE_STDIN_LINE
:

149 
°©us
 = 
STATUS_CONNACK_RECVD
;

152 if(
rc
){

153 
rc
){

154 
MOSQ_ERR_INVAL
:

155 
	`îr_¥ötf
(&
cfg
, "Error: Invalid input. Does yourÅopic contain '+' or '#'?\n");

157 
MOSQ_ERR_NOMEM
:

158 
	`îr_¥ötf
(&
cfg
, "Error: Out of memory whenÅryingÅoÖublish message.\n");

160 
MOSQ_ERR_NO_CONN
:

161 
	`îr_¥ötf
(&
cfg
, "Error: ClientÇot connected whenÅryingÅoÖublish.\n");

163 
MOSQ_ERR_PROTOCOL
:

164 
	`îr_¥ötf
(&
cfg
, "Error: ProtocolÉrror when communicating with broker.\n");

166 
MOSQ_ERR_PAYLOAD_SIZE
:

167 
	`îr_¥ötf
(&
cfg
, "Error: MessageÖayload isÅooÜarge.\n");

169 
MOSQ_ERR_QOS_NOT_SUPPORTED
:

170 
	`îr_¥ötf
(&
cfg
, "Error: Message QoSÇot supported on broker,ÅryáÜower QoS.\n");

173 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

176 if(
ªsu…
){

177 if(
cfg
.
¥Ÿocﬁ_vîsi⁄
 =
MQTT_PROTOCOL_V5
){

178 if(
ªsu…
 =
MQTT_RC_UNSUPPORTED_PROTOCOL_VERSION
){

179 
	`îr_¥ötf
(&
cfg
, "C⁄√˘i⁄Éº‹: %s. Try c⁄√˘ögÅÿ™ MQTT v5 brokî, o∏u£ MQTT v3.x mode.\n", 
	`mosquôto_ªas⁄_°rög
(
ªsu…
));

181 
	`îr_¥ötf
(&
cfg
, "C⁄√˘i⁄Éº‹: %s\n", 
	`mosquôto_ªas⁄_°rög
(
ªsu…
));

184 
	`îr_¥ötf
(&
cfg
, "C⁄√˘i⁄Éº‹: %s\n", 
	`mosquôto_c⁄«ck_°rög
(
ªsu…
));

187 
°©us
 = 
STATUS_NOHOPE
;

190 
	}
}

193 
	$my_publish_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

195 *
ªas⁄_°rög
 = 
NULL
;

196 
	`UNUSED
(
obj
);

197 
	`UNUSED
(
¥›îtõs
);

199 
œ°_mid_£¡
 = 
mid
;

200 if(
ªas⁄_code
 > 127){

201 
	`îr_¥ötf
(&
cfg
, "W¨nög: Publish %d faûed: %s.\n", 
mid
, 
	`mosquôto_ªas⁄_°rög
(
ªas⁄_code
));

202 
	`mosquôto_¥›îty_ªad_°rög
(
¥›îtõs
, 
MQTT_PROP_REASON_STRING
, &
ªas⁄_°rög
, 
Ál£
);

203 if(
ªas⁄_°rög
){

204 
	`îr_¥ötf
(&
cfg
, "%s\n", 
ªas⁄_°rög
);

205 
	`‰ì
(
ªas⁄_°rög
);

208 
publish_cou¡
++;

210 if(
cfg
.
pub_mode
 =
MSGMODE_STDIN_LINE
){

211 if(
mid
 =
œ°_mid
){

212 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

213 
disc⁄√˘_£¡
 = 
åue
;

215 }if(
publish_cou¡
 < 
cfg
.
ª≥©_cou¡
){

216 
ªady_f‹_ª≥©
 = 
åue
;

217 
	`£t_ª≥©_time
();

218 }if(
disc⁄√˘_£¡
 =
Ál£
){

219 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

220 
disc⁄√˘_£¡
 = 
åue
;

222 
	}
}

225 
	$pub_sh¨ed_öô
()

227 
löe_buf
 = 
	`mÆloc
((
size_t
 )
löe_buf_Àn
);

228 if(!
löe_buf
){

229 
	`îr_¥ötf
(&
cfg
, "Error: Out of memory.\n");

233 
	}
}

236 
	$pub_°dö_löe_lo›
(
mosquôto
 *
mosq
)

238 *
buf2
;

239 
buf_Àn_a˘uÆ
 = 0;

240 
pos
;

241 
rc
 = 
MOSQ_ERR_SUCCESS
;

242 
ªad_Àn
;

243 
boﬁ
 
°dö_föished
 = 
Ál£
;

245 
	`mosquôto_lo›_°¨t
(
mosq
);

246 
°dö_föished
 = 
Ál£
;

248 if(
°©us
 =
STATUS_CONNECTING
){

249 #ifde‡
WIN32


250 
	`SÀï
(100);

252 
time•ec
 
ts
;

253 
ts
.
tv_£c
 = 0;

254 
ts
.
tv_n£c
 = 100000000;

255 
	`«no¶ìp
(&
ts
, 
NULL
);

259 if(
°©us
 =
STATUS_NOHOPE
){

260  
MOSQ_ERR_CONN_REFUSED
;

263 if(
°©us
 =
STATUS_CONNACK_RECVD
){

264 
pos
 = 0;

265 
ªad_Àn
 = 
löe_buf_Àn
;

266 
°©us
 =
STATUS_CONNACK_RECVD
 && 
	`fgës
(&
löe_buf
[
pos
], 
ªad_Àn
, 
°dö
)){

267 
buf_Àn_a˘uÆ
 = ()
	`°æí
(
löe_buf
);

268 if(
löe_buf
[
buf_Àn_a˘uÆ
-1] == '\n'){

269 
löe_buf
[
buf_Àn_a˘uÆ
-1] = '\0';

270 
rc
 = 
	`my_publish
(
mosq
, &
mid_£¡
, 
cfg
.
t›ic
, 
buf_Àn_a˘uÆ
-1, 
löe_buf
, cfg.
qos
, cfg.
ªèö
);

271 
pos
 = 0;

272 if(
rc
 !
MOSQ_ERR_SUCCESS
 &&Ñ¯!
MOSQ_ERR_NO_CONN
){

273  
rc
;

277 
löe_buf_Àn
 += 1024;

278 
pos
 +
ªad_Àn
-1;

279 
ªad_Àn
 = 1024;

280 
buf2
 = 
	`ªÆloc
(
löe_buf
, (
size_t
 )
löe_buf_Àn
);

281 if(!
buf2
){

282 
	`îr_¥ötf
(&
cfg
, "Error: Out of memory.\n");

283  
MOSQ_ERR_NOMEM
;

285 
löe_buf
 = 
buf2
;

288 if(
pos
 != 0){

289 
rc
 = 
	`my_publish
(
mosq
, &
mid_£¡
, 
cfg
.
t›ic
, 
buf_Àn_a˘uÆ
, 
löe_buf
, cfg.
qos
, cfg.
ªèö
);

290 if(
rc
){

291 if(
cfg
.
qos
>0Ë 
rc
;

294 if(
	`„of
(
°dö
)){

295 if(
mid_£¡
 == -1){

297 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

298 
disc⁄√˘_£¡
 = 
åue
;

299 
°©us
 = 
STATUS_DISCONNECTING
;

301 
œ°_mid
 = 
mid_£¡
;

302 
°©us
 = 
STATUS_WAITING
;

304 
°dö_föished
 = 
åue
;

305 }if(
°©us
 =
STATUS_DISCONNECTED
){

311 if(
°©us
 =
STATUS_WAITING
){

312 if(
œ°_mid_£¡
 =
œ°_mid
 && 
disc⁄√˘_£¡
 =
Ál£
){

313 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

314 
disc⁄√˘_£¡
 = 
åue
;

316 #ifde‡
WIN32


317 
	`SÀï
(100);

319 
time•ec
 
ts
;

320 
ts
.
tv_£c
 = 0;

321 
ts
.
tv_n£c
 = 100000000;

322 
	`«no¶ìp
(&
ts
, 
NULL
);

325 }
°dö_föished
 =
Ál£
);

326 
	`mosquôto_lo›_°›
(
mosq
, 
Ál£
);

328 if(
°©us
 =
STATUS_DISCONNECTED
){

329  
MOSQ_ERR_SUCCESS
;

331  
rc
;

333 
	}
}

336 
	$pub_Ÿhî_lo›
(
mosquôto
 *
mosq
)

338 
rc
;

339 
lo›_dñay
 = 1000;

341 if(
cfg
.
ª≥©_cou¡
 > 1 && (cfg.
ª≥©_dñay
.
tv_£c
 =0 || cfg.ª≥©_dñay.
tv_u£c
 != 0)){

342 
lo›_dñay
 = ()
cfg
.
ª≥©_dñay
.
tv_u£c
 / 2000;

346 
rc
 = 
	`mosquôto_lo›
(
mosq
, 
lo›_dñay
, 1);

347 if(
ªady_f‹_ª≥©
 && 
	`check_ª≥©_time
()){

348 
rc
 = 
MOSQ_ERR_SUCCESS
;

349 
cfg
.
pub_mode
){

350 
MSGMODE_CMD
:

351 
MSGMODE_FILE
:

352 
MSGMODE_STDIN_FILE
:

353 
rc
 = 
	`my_publish
(
mosq
, &
mid_£¡
, 
cfg
.
t›ic
, cfg.
msgÀn
, cfg.
mesßge
, cfg.
qos
, cfg.
ªèö
);

355 
MSGMODE_NULL
:

356 
rc
 = 
	`my_publish
(
mosq
, &
mid_£¡
, 
cfg
.
t›ic
, 0, 
NULL
, cfg.
qos
, cfg.
ªèö
);

359 if(
rc
 !
MOSQ_ERR_SUCCESS
 &&Ñ¯!
MOSQ_ERR_NO_CONN
){

360 
	`îr_¥ötf
(&
cfg
, "Eº‹ sídögÑïóàpublish: %s", 
	`mosquôto_°ªº‹
(
rc
));

363 }
rc
 =
MOSQ_ERR_SUCCESS
);

365 if(
°©us
 =
STATUS_DISCONNECTED
){

366  
MOSQ_ERR_SUCCESS
;

368  
rc
;

370 
	}
}

373 
	$pub_sh¨ed_lo›
(
mosquôto
 *
mosq
)

375 if(
cfg
.
pub_mode
 =
MSGMODE_STDIN_LINE
){

376  
	`pub_°dö_löe_lo›
(
mosq
);

378  
	`pub_Ÿhî_lo›
(
mosq
);

380 
	}
}

383 
	$pub_sh¨ed_˛ónup
()

385 
	`‰ì
(
löe_buf
);

386 
	}
}

389 
	$¥öt_vîsi⁄
()

391 
maj‹
, 
mö‹
, 
ªvisi⁄
;

393 
	`mosquôto_lib_vîsi⁄
(&
maj‹
, &
mö‹
, &
ªvisi⁄
);

394 
	`¥ötf
("mosquôto_pub vîsi⁄ %†ru¬ög o¿libmosquôtÿ%d.%d.%d.\n", 
VERSION
, 
maj‹
, 
mö‹
, 
ªvisi⁄
);

395 
	}
}

397 
	$¥öt_ußge
()

399 
maj‹
, 
mö‹
, 
ªvisi⁄
;

401 
	`mosquôto_lib_vîsi⁄
(&
maj‹
, &
mö‹
, &
ªvisi⁄
);

402 
	`¥ötf
("mosquitto_pub isá simple mqtt clientÅhat willÖublishá message oná singleÅopicándÉxit.\n");

403 
	`¥ötf
("mosquôto_pub vîsi⁄ %†ru¬ög o¿libmosquôtÿ%d.%d.%d.\n\n", 
VERSION
, 
maj‹
, 
mö‹
, 
ªvisi⁄
);

404 
	`¥ötf
("Usage: mosquitto_pub {[-h host] [--unixÖath] [-pÖort] [-u username] [-PÖassword] -tÅopic | -L URL}\n");

405 
	`¥ötf
(" {-f file | -l | -n | -m message}\n");

406 
	`¥ötf
(" [-c] [-k keepalive] [-q qos] [-r] [--repeat N] [--repeat-delayÅime] [-x session-expiry]\n");

407 #ifde‡
WITH_SRV


408 
	`¥ötf
(" [-A bind_address] [--nodelay] [-S]\n");

410 
	`¥ötf
(" [-A bind_address] [--nodelay]\n");

412 
	`¥ötf
(" [-i id] [-I id_prefix]\n");

413 
	`¥ötf
(" [-d] [--quiet]\n");

414 
	`¥ötf
(" [-M max_inflight]\n");

415 
	`¥ötf
(" [-u username [-PÖassword]]\n");

416 
	`¥ötf
(" [--will-topic [--will-payloadÖayload] [--will-qos qos] [--will-retain]]\n");

417 #ifde‡
WITH_TLS


418 
	`¥ötf
(" [{--cafile file | --capath dir} [--cert file] [--key file]\n");

419 
	`¥ötf
(" [--ciphers ciphers] [--insecure]\n");

420 
	`¥ötf
(" [--tls-alpnÖrotocol]\n");

421 
	`¥ötf
(" [--tls-engineÉngine] [--keyform keyform] [--tls-engine-kpass-sha1]]\n");

422 
	`¥ötf
(" [--tls-use-os-certs]\n");

423 #ifde‡
FINAL_WITH_TLS_PSK


424 
	`¥ötf
(" [--psk hex-key --psk-identity identity [--ciphers ciphers]]\n");

427 #ifde‡
WITH_SOCKS


428 
	`¥ötf
(" [--proxy socks-url]\n");

430 
	`¥ötf
(" [--property command identifier value]\n");

431 
	`¥ötf
(" [-D command identifier value]\n");

432 
	`¥ötf
(" mosquitto_pub --help\n\n");

433 
	`¥ötf
(" -A : bindÅhe outgoing socketÅoÅhis host/ipáddress. UseÅo control which interface\n");

434 
	`¥ötf
("Åhe client communicates over.\n");

435 
	`¥ötf
(" -d :Énable debug messages.\n");

436 
	`¥ötf
(" -c : disable clean session/enableÖersistent client mode\n");

437 
	`¥ötf
(" WhenÅhisárgument is used,Åhe broker will be instructedÇotÅo cleanÉxisting sessions\n");

438 
	`¥ötf
(" forÅhe same client id whenÅhe client connects,ánd sessions willÇeverÉxpire whenÅhe\n");

439 
	`¥ötf
(" client disconnects. MQTT v5 clients can changeÅheir sessionÉxpiry interval withÅhe -x\n");

440 
	`¥ötf
("árgument.\n");

441 
	`¥ötf
(" -D : Define MQTT v5Öroperties. SeeÅhe documentation for more details.\n");

442 
	`¥ötf
(" -f : sendÅhe contents ofá fileásÅhe message.\n");

443 
	`¥ötf
(" -h : mqtt hostÅo connectÅo. DefaultsÅoÜocalhost.\n");

444 
	`¥ötf
(" -i : idÅo use forÅhis client. DefaultsÅo mosquitto_pub_áppended withÅheÖrocess id.\n");

445 
	`¥ötf
(" -I : defineÅhe client idás id_prefixáppended withÅheÖrocess id. Useful for whenÅhe\n");

446 
	`¥ötf
(" broker is usingÅhe clientid_prefixes option.\n");

447 
	`¥ötf
(" -k : keepálive in seconds forÅhis client. DefaultsÅo 60.\n");

448 
	`¥ötf
(" -L : specify user,Öassword, hostname,ÖortándÅopicásá URL inÅhe form:\n");

449 
	`¥ötf
(" mqtt(s)://[username[:password]@]host[:port]/topic\n");

450 
	`¥ötf
(" -l :Ñead messages from stdin, sendingá separate message forÉachÜine.\n");

451 
	`¥ötf
(" -m : messageÖayloadÅo send.\n");

452 
	`¥ötf
(" -M :Åhe maximum inflight messages for QoS 1/2..\n");

453 
	`¥ötf
(" -n : sendáÇull (zeroÜength) message.\n");

454 
	`¥ötf
(" -p :ÇetworkÖortÅo connectÅo. DefaultsÅo 1883 forÖlain MQTTánd 8883 for MQTT over TLS.\n");

455 
	`¥ötf
(" -P :ÖrovideáÖassword\n");

456 
	`¥ötf
(" -q : quality of serviceÜevelÅo use foráll messages. DefaultsÅo 0.\n");

457 
	`¥ötf
(" -r : message should beÑetained.\n");

458 
	`¥ötf
(" -s :Ñead message from stdin, sendingÅheÉntire inputásá message.\n");

459 #ifde‡
WITH_SRV


460 
	`¥ötf
(" -S : use SRVÜookupsÅo determine which hostÅo connectÅo.\n");

462 
	`¥ötf
(" -t : mqttÅopicÅoÖublishÅo.\n");

463 
	`¥ötf
(" -u :Örovideá username\n");

464 
	`¥ötf
(" -V : specifyÅhe version ofÅhe MQTTÖrotocolÅo use when connecting.\n");

465 
	`¥ötf
(" Can be mqttv5, mqttv311 or mqttv31. DefaultsÅo mqttv311.\n");

466 
	`¥ötf
(" -x : SetÅhe session-expiry-intervalÖroperty onÅhe CONNECTÖacket. AppliesÅo MQTT v5\n");

467 
	`¥ötf
(" clients only. SetÅo 0-4294967294Åo specifyÅhe session willÉxpire inÅhat many\n");

468 
	`¥ötf
(" secondsáfterÅhe client disconnects, or use -1, 4294967295, or ‚àû forá session\n");

469 
	`¥ötf
("Åhat doesÇotÉxpire. DefaultsÅo -1 if -c isálso given, or 0 if -cÇot given.\n");

470 
	`¥ötf
(" --help : displayÅhis message.\n");

471 
	`¥ötf
(" --nodelay : disable Nagle'sálgorithm,ÅoÑeduce socket sendingÜatencyátÅheÖossible\n");

472 
	`¥ötf
("Éxpense of moreÖackets being sent.\n");

473 
	`¥ötf
(" --quiet : don'tÖrintÉrror messages.\n");

474 
	`¥ötf
(" --repeat : ifÖublish mode is -f, -m, or -s,ÅhenÑepeatÅheÖublish NÅimes.\n");

475 
	`¥ötf
(" --repeat-delay : if using --repeat, waitÅime seconds betweenÖublishes. DefaultsÅo 0.\n");

476 
	`¥ötf
(" --unix : connectÅoá brokerÅhroughá unix domain socket instead ofá TCP socket,\n");

477 
	`¥ötf
("É.g. /tmp/mosquitto.sock\n");

478 
	`¥ötf
(" --will-payload :Öayload forÅhe client Will, which is sent byÅhe broker in case of\n");

479 
	`¥ötf
(" unexpected disconnection. IfÇot givenánd will-topic is set,á zero\n");

480 
	`¥ötf
("Üength message will be sent.\n");

481 
	`¥ötf
(" --will-qos : QoSÜevel forÅhe client Will.\n");

482 
	`¥ötf
(" --will-retain : if given, makeÅhe client WillÑetained.\n");

483 
	`¥ötf
(" --will-topic :ÅheÅopic on whichÅoÖublishÅhe client Will.\n");

484 #ifde‡
WITH_TLS


485 
	`¥ötf
(" --cafile :ÖathÅoá file containingÅrusted CA certificatesÅoÉnableÉncrypted\n");

486 
	`¥ötf
(" communication.\n");

487 
	`¥ötf
(" --capath :ÖathÅoá directory containingÅrusted CA certificatesÅoÉnableÉncrypted\n");

488 
	`¥ötf
(" communication.\n");

489 
	`¥ötf
(" --cert : client certificate foráuthentication, ifÑequired by server.\n");

490 
	`¥ötf
(" --key : clientÖrivate key foráuthentication, ifÑequired by server.\n");

491 
	`¥ötf
(" --keyform : keyfileÅype, can beÉither \"pem\" or \"engine\".\n");

492 
	`¥ötf
(" --ciphers : openssl compatibleÜist of TLS ciphersÅo support.\n");

493 
	`¥ötf
(" --tls-version : TLSÖrotocol version, can be one ofÅlsv1.3Ålsv1.2 orÅlsv1.1.\n");

494 
	`¥ötf
(" DefaultsÅoÅlsv1.2 ifávailable.\n");

495 
	`¥ötf
(" --insecure : doÇot checkÅhatÅhe server certificate hostname matchesÅheÑemote\n");

496 
	`¥ötf
(" hostname. UsingÅhis option meansÅhat you cannot be sureÅhatÅhe\n");

497 
	`¥ötf
("Ñemote host isÅhe server you wishÅo connectÅoánd so is insecure.\n");

498 
	`¥ötf
(" DoÇot useÅhis option ináÖroductionÉnvironment.\n");

499 
	`¥ötf
(" --tls-engine : If set,ÉnablesÅhe use ofá TLSÉngine device.\n");

500 
	`¥ötf
(" --tls-engine-kpass-sha1 : SHA1 ofÅhe keyÖasswordÅo be used withÅhe selected SSLÉngine.\n");

501 
	`¥ötf
(" --tls-use-os-certs : LoadándÅrust OSÖrovided CA certificates.\n");

502 #ifde‡
FINAL_WITH_TLS_PSK


503 
	`¥ötf
(" --psk :Öre-shared-key in hexadecimal (noÜeading 0x)ÅoÉnable TLS-PSK mode.\n");

504 
	`¥ötf
(" --psk-identity : client identity string for TLS-PSK mode.\n");

507 #ifde‡
WITH_SOCKS


508 
	`¥ötf
(" --proxy : SOCKS5Öroxy URL ofÅhe form:\n");

509 
	`¥ötf
(" socks5h://[username[:password]@]hostname[:port]\n");

510 
	`¥ötf
(" Only \"none\"ánd \"username\"áuthentication is supported.\n");

512 
	`¥ötf
("\nSee https://mosquitto.org/ for more information.\n\n");

513 
	}
}

515 
	$maö
(
¨gc
, *
¨gv
[])

517 
mosquôto
 *
mosq
 = 
NULL
;

518 
rc
;

520 
	`mosquôto_lib_öô
();

522 if(
	`pub_sh¨ed_öô
())  1;

524 
rc
 = 
	`˛õ¡_c⁄fig_lﬂd
(&
cfg
, 
CLIENT_PUB
, 
¨gc
, 
¨gv
);

525 if(
rc
){

526 if(
rc
 == 2){

528 
	`¥öt_ußge
();

529 }if(
rc
 == 3){

530 
	`¥öt_vîsi⁄
();

532 
	`Ârötf
(
°dîr
, "\nUse 'mosquitto_pub --help'Åo see usage.\n");

534 
˛ónup
;

537 #i‚de‡
WITH_THREADING


538 if(
cfg
.
pub_mode
 =
MSGMODE_STDIN_LINE
){

539 
	`Ârötf
(
°dîr
, "Error: '-l' modeÇotávailable,Åhreading support hasÇot been compiled in.\n");

540 
˛ónup
;

544 if(
cfg
.
pub_mode
 =
MSGMODE_STDIN_FILE
){

545 if(
	`lﬂd_°dö
()){

546 
	`îr_¥ötf
(&
cfg
, "ErrorÜoading input from stdin.\n");

547 
˛ónup
;

549 }if(
cfg
.
fûe_öput
){

550 if(
	`lﬂd_fûe
(
cfg
.
fûe_öput
)){

551 
	`îr_¥ötf
(&
cfg
, "Eº‹Üﬂdög i≈uàfûê\"%s\".\n", cfg.
fûe_öput
);

552 
˛ónup
;

556 if(!
cfg
.
t›ic
 || cfg.
pub_mode
 =
MSGMODE_NONE
){

557 
	`Ârötf
(
°dîr
, "Error: BothÅopicánd message must be supplied.\n");

558 
	`¥öt_ußge
();

559 
˛ónup
;

563 if(
	`˛õ¡_id_gíî©e
(&
cfg
)){

564 
˛ónup
;

567 
mosq
 = 
	`mosquôto_√w
(
cfg
.
id
, cfg.
˛ón_£ssi⁄
, 
NULL
);

568 if(!
mosq
){

569 
î∫o
){

570 
ENOMEM
:

571 
	`îr_¥ötf
(&
cfg
, "Error: Out of memory.\n");

573 
EINVAL
:

574 
	`îr_¥ötf
(&
cfg
, "Error: Invalid id.\n");

577 
˛ónup
;

579 if(
cfg
.
debug
){

580 
	`mosquôto_log_ˇŒback_£t
(
mosq
, 
my_log_ˇŒback
);

582 
	`mosquôto_c⁄√˘_v5_ˇŒback_£t
(
mosq
, 
my_c⁄√˘_ˇŒback
);

583 
	`mosquôto_disc⁄√˘_v5_ˇŒback_£t
(
mosq
, 
my_disc⁄√˘_ˇŒback
);

584 
	`mosquôto_publish_v5_ˇŒback_£t
(
mosq
, 
my_publish_ˇŒback
);

586 if(
	`˛õ¡_›ts_£t
(
mosq
, &
cfg
)){

587 
˛ónup
;

590 
rc
 = 
	`˛õ¡_c⁄√˘
(
mosq
, &
cfg
);

591 if(
rc
){

592 
˛ónup
;

595 
rc
 = 
	`pub_sh¨ed_lo›
(
mosq
);

597 if(
cfg
.
mesßge
 && cfg.
pub_mode
 =
MSGMODE_FILE
){

598 
	`‰ì
(
cfg
.
mesßge
);

599 
cfg
.
mesßge
 = 
NULL
;

601 
	`mosquôto_de°roy
(
mosq
);

602 
	`mosquôto_lib_˛ónup
();

603 
	`˛õ¡_c⁄fig_˛ónup
(&
cfg
);

604 
	`pub_sh¨ed_˛ónup
();

606 if(
rc
){

607 
	`îr_¥ötf
(&
cfg
, "Eº‹: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

609 if(
c⁄«ck_ªsu…
){

610  
c⁄«ck_ªsu…
;

612  
rc
;

615 
˛ónup
:

616 
	`mosquôto_lib_˛ónup
();

617 
	`˛õ¡_c⁄fig_˛ónup
(&
cfg
);

618 
	`pub_sh¨ed_˛ónup
();

620 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/client/pub_shared.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 #i‚de‡
WIN32


27 
	~<time.h
>

29 
	~<¥o˚ss.h
>

30 
	~<wösock2.h
>

31 
	#¢¥ötf
 
•rötf_s


	)

34 
	~<mosquôto.h
>

35 
	~<mqâ_¥Ÿocﬁ.h
>

36 
	~"˛õ¡_sh¨ed.h
"

37 
	~"pub_sh¨ed.h
"

41 
	gmid_£¡
 = -1;

42 
mosq_c⁄fig
 
	gcfg
;

44 
	$my_log_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
Àvñ
, c⁄° *
°r
)

46 
	`UNUSED
(
mosq
);

47 
	`UNUSED
(
obj
);

48 
	`UNUSED
(
Àvñ
);

50 
	`¥ötf
("%s\n", 
°r
);

51 
	}
}

53 
	$lﬂd_°dö
()

55 
size_t
 
pos
 = 0, 
æí
;

56 
buf
[1024];

57 *
aux_mesßge
 = 
NULL
;

59 
cfg
.
pub_mode
 = 
MSGMODE_STDIN_FILE
;

61 !
	`„of
(
°dö
)){

62 
æí
 = 
	`‰ód
(
buf
, 1, 1024, 
°dö
);

63 
aux_mesßge
 = 
	`ªÆloc
(
cfg
.
mesßge
, 
pos
+
æí
);

64 if(!
aux_mesßge
){

65 
	`îr_¥ötf
(&
cfg
, "Error: Out of memory.\n");

66 
	`‰ì
(
cfg
.
mesßge
);

70 
cfg
.
mesßge
 = 
aux_mesßge
;

72 
	`mem˝y
(&(
cfg
.
mesßge
[
pos
]), 
buf
, 
æí
);

73 
pos
 +
æí
;

75 if(
pos
 > 
MQTT_MAX_PAYLOAD
){

76 
	`îr_¥ötf
(&
cfg
, "Eº‹: MesßgêÀngth mu° bêÀs†th™ %u byãs.\n\n", 
MQTT_MAX_PAYLOAD
);

77 
	`‰ì
(
cfg
.
mesßge
);

80 
cfg
.
msgÀn
 = ()
pos
;

82 if(!
cfg
.
msgÀn
){

83 
	`îr_¥ötf
(&
cfg
, "Error: ZeroÜength input.\n");

88 
	}
}

90 
	$lﬂd_fûe
(c⁄° *
fûíame
)

92 
size_t
 
pos
, 
æí
;

93 
FILE
 *
Âå
 = 
NULL
;

94 
Êí
;

96 
Âå
 = 
	`f›í
(
fûíame
, "rb");

97 if(!
Âå
){

98 
	`îr_¥ötf
(&
cfg
, "Eº‹: U«bÀÅÿ›í fûê\"%s\".\n", 
fûíame
);

101 
cfg
.
pub_mode
 = 
MSGMODE_FILE
;

102 
	`f£ek
(
Âå
, 0, 
SEEK_END
);

103 
Êí
 = 
	`·ñl
(
Âå
);

104 if(
Êí
 > 
MQTT_MAX_PAYLOAD
){

105 
	`f˛o£
(
Âå
);

106 
	`îr_¥ötf
(&
cfg
, "Eº‹: Fûêmu° bêÀs†th™ %u byãs.\n\n", 
MQTT_MAX_PAYLOAD
);

107 
	`‰ì
(
cfg
.
mesßge
);

109 }if(
Êí
 == 0){

110 
	`f˛o£
(
Âå
);

111 
cfg
.
mesßge
 = 
NULL
;

112 
cfg
.
msgÀn
 = 0;

114 }if(
Êí
 < 0){

115 
	`f˛o£
(
Âå
);

116 
	`îr_¥ötf
(&
cfg
, "Eº‹: U«bÀÅÿdëîmöêsizêo‡fûê\"%s\".\n", 
fûíame
);

119 
cfg
.
msgÀn
 = ()
Êí
;

120 
	`f£ek
(
Âå
, 0, 
SEEK_SET
);

121 
cfg
.
mesßge
 = 
	`mÆloc
((
size_t
 )cfg.
msgÀn
);

122 if(!
cfg
.
mesßge
){

123 
	`f˛o£
(
Âå
);

124 
	`îr_¥ötf
(&
cfg
, "Error: Out of memory.\n");

127 
pos
 = 0;

128 
pos
 < (
size_t
)
cfg
.
msgÀn
){

129 
æí
 = 
	`‰ód
(&(
cfg
.
mesßge
[
pos
]), (), (
size_t
 )cfg.
msgÀn
-pos, 
Âå
);

130 
pos
 +
æí
;

132 
	`f˛o£
(
Âå
);

134 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/client/pub_shared.h

18 #i‚de‡
PUB_SHARED_H


19 
	#PUB_SHARED_H


	)

21 
	#STATUS_CONNECTING
 0

	)

22 
	#STATUS_CONNACK_RECVD
 1

	)

23 
	#STATUS_WAITING
 2

	)

24 
	#STATUS_DISCONNECTING
 3

	)

25 
	#STATUS_DISCONNECTED
 4

	)

26 
	#STATUS_NOHOPE
 5

	)

28 
mid_£¡
;

29 
mosq_c⁄fig
 
cfg
;

32 
my_c⁄√˘_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
ªsu…
, 
Êags
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

33 
my_disc⁄√˘_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
rc
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

34 
my_publish_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

35 
my_log_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
Àvñ
, c⁄° *
°r
);

36 
lﬂd_°dö
();

37 
lﬂd_fûe
(c⁄° *
fûíame
);

39 
my_publish
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
);

41 
pub_sh¨ed_öô
();

42 
pub_sh¨ed_lo›
(
mosquôto
 *
mosq
);

43 
pub_sh¨ed_˛ónup
();

	@open_source_lib/mosquitto/mosquitto-2.0.15/client/rr_client.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<î∫o.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<time.h
>

27 #i‚de‡
WIN32


28 
	~<uni°d.h
>

29 
	~<sig«l.h
>

31 
	~<¥o˚ss.h
>

32 
	~<wösock2.h
>

33 
	#¢¥ötf
 
•rötf_s


	)

36 
	~<mosquôto.h
>

37 
	~<mqâ_¥Ÿocﬁ.h
>

38 
	~"˛õ¡_sh¨ed.h
"

39 
	~"pub_sh¨ed.h
"

40 
	~"sub_˛õ¡_ouçut.h
"

42 
	eº__°©e
 {

43 
	mº_s_√w
,

44 
	mº_s_c⁄√˘ed
,

45 
	mº_s_subs¸ibed
,

46 
	mº_s_ªady_to_publish
,

47 
	mº_s_waô_f‹_ª•⁄£
,

48 
	mº_s_disc⁄√˘


51 
º__°©e
 
	g˛õ¡_°©e
 = 
º_s_√w
;

53 
boﬁ
 
	g¥o˚ss_mesßges
 = 
åue
;

54 
	gmsg_cou¡
 = 0;

55 
mosquôto
 *
	gg_mosq
 = 
NULL
;

56 
boﬁ
 
	gtimed_out
 = 
Ál£
;

57 
	gc⁄«ck_ªsu…
 = 0;

59 #i‚de‡
WIN32


60 
	$my_sig«l_h™dÀr
(
signum
)

62 if(
signum
 =
SIGALRM
){

63 
¥o˚ss_mesßges
 = 
Ál£
;

64 
	`mosquôto_disc⁄√˘_v5
(
g_mosq
, 
MQTT_RC_DISCONNECT_WITH_WILL_MSG
, 
cfg
.
disc⁄√˘_¥›s
);

65 
timed_out
 = 
åue
;

67 
	}
}

71 
	$my_publish
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
)

73 if(
cfg
.
¥Ÿocﬁ_vîsi⁄
 < 
MQTT_PROTOCOL_V5
){

74  
	`mosquôto_publish_v5
(
mosq
, 
mid
, 
t›ic
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
, 
NULL
);

76  
	`mosquôto_publish_v5
(
mosq
, 
mid
, 
t›ic
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
, 
cfg
.
publish_¥›s
);

78 
	}
}

81 
	$my_mesßge_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
mesßge
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

83 
	`UNUSED
(
mosq
);

84 
	`UNUSED
(
obj
);

85 
	`UNUSED
(
¥›îtõs
);

87 
	`¥öt_mesßge
(&
cfg
, 
mesßge
, 
¥›îtõs
);

88 
cfg
.
pub_mode
){

89 
MSGMODE_CMD
:

90 
MSGMODE_FILE
:

91 
MSGMODE_STDIN_FILE
:

92 
MSGMODE_NULL
:

93 
˛õ¡_°©e
 = 
º_s_disc⁄√˘
;

95 
MSGMODE_STDIN_LINE
:

96 
˛õ¡_°©e
 = 
º_s_ªady_to_publish
;

126 
	}
}

128 
	$my_c⁄√˘_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
ªsu…
, 
Êags
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

130 
	`UNUSED
(
obj
);

131 
	`UNUSED
(
Êags
);

132 
	`UNUSED
(
¥›îtõs
);

134 
c⁄«ck_ªsu…
 = 
ªsu…
;

135 if(!
ªsu…
){

136 
˛õ¡_°©e
 = 
º_s_c⁄√˘ed
;

137 
	`mosquôto_subs¸ibe_v5
(
mosq
, 
NULL
, 
cfg
.
ª•⁄£_t›ic
, cfg.
qos
, 0, cfg.
subs¸ibe_¥›s
);

139 
˛õ¡_°©e
 = 
º_s_disc⁄√˘
;

140 if(
ªsu…
){

141 if(
ªsu…
 =
MQTT_RC_UNSUPPORTED_PROTOCOL_VERSION
){

142 
	`îr_¥ötf
(&
cfg
, "C⁄√˘i⁄Éº‹: %s. mosquôto_º o∆y suµ‹t†c⁄√˘ögÅÿ™ MQTT v5 brokî\n", 
	`mosquôto_ªas⁄_°rög
(
ªsu…
));

144 
	`îr_¥ötf
(&
cfg
, "C⁄√˘i⁄Éº‹: %s\n", 
	`mosquôto_ªas⁄_°rög
(
ªsu…
));

147 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

149 
	}
}

152 
	$my_subs¸ibe_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

154 
	`UNUSED
(
obj
);

155 
	`UNUSED
(
mid
);

156 
	`UNUSED
(
qos_cou¡
);

158 if(
gø¡ed_qos
[0] < 128){

159 
˛õ¡_°©e
 = 
º_s_ªady_to_publish
;

161 
˛õ¡_°©e
 = 
º_s_disc⁄√˘
;

162 
	`îr_¥ötf
(&
cfg
, "%s\n", 
	`mosquôto_ªas⁄_°rög
(
gø¡ed_qos
[0]));

163 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

165 
	}
}

168 
	$my_publish_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

170 
	`UNUSED
(
mosq
);

171 
	`UNUSED
(
obj
);

172 
	`UNUSED
(
mid
);

173 
	`UNUSED
(
ªas⁄_code
);

174 
	`UNUSED
(
¥›îtõs
);

176 
˛õ¡_°©e
 = 
º_s_waô_f‹_ª•⁄£
;

177 
	}
}

180 
	$¥öt_vîsi⁄
()

182 
maj‹
, 
mö‹
, 
ªvisi⁄
;

184 
	`mosquôto_lib_vîsi⁄
(&
maj‹
, &
mö‹
, &
ªvisi⁄
);

185 
	`¥ötf
("mosquôto_º vîsi⁄ %†ru¬ög o¿libmosquôtÿ%d.%d.%d.\n", 
VERSION
, 
maj‹
, 
mö‹
, 
ªvisi⁄
);

186 
	}
}

188 
	$¥öt_ußge
()

190 
maj‹
, 
mö‹
, 
ªvisi⁄
;

192 
	`mosquôto_lib_vîsi⁄
(&
maj‹
, &
mö‹
, &
ªvisi⁄
);

193 
	`¥ötf
("mosquitto_rr isán mqtt clientÅhat can be usedÅoÖublisháÑequest messageánd wait foráÑesponse.\n");

194 
	`¥ötf
(" DefaultsÅo MQTT v5, whereÅhe Request-Response feature will be used, but v3.1.1 canálso be used\n");

195 
	`¥ötf
(" with v3.1.1 brokers.\n");

196 
	`¥ötf
("mosquôto_º vîsi⁄ %†ru¬ög o¿libmosquôtÿ%d.%d.%d.\n\n", 
VERSION
, 
maj‹
, 
mö‹
, 
ªvisi⁄
);

197 
	`¥ötf
("Usage: mosquitto_rr {[-h host] [--unixÖath] [-pÖort] [-u username] [-PÖassword] -tÅopic | -L URL} -eÑesponse-topic\n");

198 
	`¥ötf
(" [-c] [-k keepalive] [-q qos] [-R] [-x session-expiry-interval\n");

199 
	`¥ötf
(" [-F format]\n");

200 #i‚de‡
WIN32


201 
	`¥ötf
(" [-WÅimeout_secs]\n");

203 #ifde‡
WITH_SRV


204 
	`¥ötf
(" [-A bind_address] [--nodelay] [-S]\n");

206 
	`¥ötf
(" [-A bind_address] [--nodelay]\n");

208 
	`¥ötf
(" [-i id] [-I id_prefix]\n");

209 
	`¥ötf
(" [-d] [-N] [--quiet] [-v]\n");

210 
	`¥ötf
(" [--will-topic [--will-payloadÖayload] [--will-qos qos] [--will-retain]]\n");

211 #ifde‡
WITH_TLS


212 
	`¥ötf
(" [{--cafile file | --capath dir} [--cert file] [--key file]\n");

213 
	`¥ötf
(" [--ciphers ciphers] [--insecure]\n");

214 
	`¥ötf
(" [--tls-alpnÖrotocol]\n");

215 
	`¥ötf
(" [--tls-engineÉngine] [--keyform keyform] [--tls-engine-kpass-sha1]]\n");

216 
	`¥ötf
(" [--tls-use-os-certs]\n");

217 #ifde‡
FINAL_WITH_TLS_PSK


218 
	`¥ötf
(" [--psk hex-key --psk-identity identity [--ciphers ciphers]]\n");

221 #ifde‡
WITH_SOCKS


222 
	`¥ötf
(" [--proxy socks-url]\n");

224 
	`¥ötf
(" [-D command identifier value]\n");

225 
	`¥ötf
(" mosquitto_rr --help\n\n");

226 
	`¥ötf
(" -A : bindÅhe outgoing socketÅoÅhis host/ipáddress. UseÅo control which interface\n");

227 
	`¥ötf
("Åhe client communicates over.\n");

228 
	`¥ötf
(" -c : disable clean session/enableÖersistent client mode\n");

229 
	`¥ötf
(" WhenÅhisárgument is used,Åhe broker will be instructedÇotÅo cleanÉxisting sessions\n");

230 
	`¥ötf
(" forÅhe same client id whenÅhe client connects,ánd sessions willÇeverÉxpire whenÅhe\n");

231 
	`¥ötf
(" client disconnects. MQTT v5 clients can changeÅheir sessionÉxpiry interval withÅhe -x\n");

232 
	`¥ötf
("árgument.\n");

233 
	`¥ötf
(" -d :Énable debug messages.\n");

234 
	`¥ötf
(" -D : Define MQTT v5Öroperties. SeeÅhe documentation for more details.\n");

235 
	`¥ötf
(" -e : ResponseÅopic. The client will subscribeÅoÅhisÅopicÅo wait foráÑesponse.\n");

236 
	`¥ötf
(" -F : output format.\n");

237 
	`¥ötf
(" -h : mqtt hostÅo connectÅo. DefaultsÅoÜocalhost.\n");

238 
	`¥ötf
(" -i : idÅo use forÅhis client. DefaultsÅo mosquitto_rr_áppended withÅheÖrocess id.\n");

239 
	`¥ötf
(" -k : keepálive in seconds forÅhis client. DefaultsÅo 60.\n");

240 
	`¥ötf
(" -L : specify user,Öassword, hostname,ÖortándÅopicásá URL inÅhe form:\n");

241 
	`¥ötf
(" mqtt(s)://[username[:password]@]host[:port]/topic\n");

242 
	`¥ötf
(" -N : doÇotáddánÉnd ofÜine character whenÖrintingÅheÖayload.\n");

243 
	`¥ötf
(" -p :ÇetworkÖortÅo connectÅo. DefaultsÅo 1883 forÖlain MQTTánd 8883 for MQTT over TLS.\n");

244 
	`¥ötf
(" -P :ÖrovideáÖassword\n");

245 
	`¥ötf
(" -q : quality of serviceÜevelÅo use for communications. DefaultsÅo 0.\n");

246 
	`¥ötf
(" -R : doÇotÖrint stale messages (those withÑetain set).\n");

247 #ifde‡
WITH_SRV


248 
	`¥ötf
(" -S : use SRVÜookupsÅo determine which hostÅo connectÅo.\n");

250 
	`¥ötf
(" -t :Åopic whereÅheÑequest message will be sent.\n");

251 
	`¥ötf
(" -u :Örovideá username\n");

252 
	`¥ötf
(" -v :ÖrintÑeceived messages verbosely.\n");

253 
	`¥ötf
(" -V : specifyÅhe version ofÅhe MQTTÖrotocolÅo use when connecting.\n");

254 
	`¥ötf
(" DefaultsÅo 5.\n");

255 #i‚de‡
WIN32


256 
	`¥ötf
(" -W : SpecifiesáÅimeout in seconds howÜongÅo wait foráÑesponse.\n");

258 
	`¥ötf
(" -x : SetÅhe session-expiry-intervalÖroperty onÅhe CONNECTÖacket. AppliesÅo MQTT v5\n");

259 
	`¥ötf
(" clients only. SetÅo 0-4294967294Åo specifyÅhe session willÉxpire inÅhat many\n");

260 
	`¥ötf
(" secondsáfterÅhe client disconnects, or use -1, 4294967295, or ‚àû forá session\n");

261 
	`¥ötf
("Åhat doesÇotÉxpire. DefaultsÅo -1 if -c isálso given, or 0 if -cÇot given.\n");

262 
	`¥ötf
(" --help : displayÅhis message.\n");

263 
	`¥ötf
(" --nodelay : disable Nagle'sálgorithm,ÅoÑeduce socket sendingÜatencyátÅheÖossible\n");

264 
	`¥ötf
("Éxpense of moreÖackets being sent.\n");

265 
	`¥ötf
(" --pretty :Örint formatted outputÑatherÅhan minimised output when usingÅhe\n");

266 
	`¥ötf
(" JSON output format option.\n");

267 
	`¥ötf
(" --quiet : don'tÖrintÉrror messages.\n");

268 
	`¥ötf
(" --unix : connectÅoá brokerÅhroughá unix domain socket instead ofá TCP socket,\n");

269 
	`¥ötf
("É.g. /tmp/mosquitto.sock\n");

270 
	`¥ötf
(" --will-payload :Öayload forÅhe client Will, which is sent byÅhe broker in case of\n");

271 
	`¥ötf
(" unexpected disconnection. IfÇot givenánd will-topic is set,á zero\n");

272 
	`¥ötf
("Üength message will be sent.\n");

273 
	`¥ötf
(" --will-qos : QoSÜevel forÅhe client Will.\n");

274 
	`¥ötf
(" --will-retain : if given, makeÅhe client WillÑetained.\n");

275 
	`¥ötf
(" --will-topic :ÅheÅopic on whichÅoÖublishÅhe client Will.\n");

276 #ifde‡
WITH_TLS


277 
	`¥ötf
(" --cafile :ÖathÅoá file containingÅrusted CA certificatesÅoÉnableÉncrypted\n");

278 
	`¥ötf
(" certificate based communication.\n");

279 
	`¥ötf
(" --capath :ÖathÅoá directory containingÅrusted CA certificatesÅoÉnableÉncrypted\n");

280 
	`¥ötf
(" communication.\n");

281 
	`¥ötf
(" --cert : client certificate foráuthentication, ifÑequired by server.\n");

282 
	`¥ötf
(" --key : clientÖrivate key foráuthentication, ifÑequired by server.\n");

283 
	`¥ötf
(" --ciphers : openssl compatibleÜist of TLS ciphersÅo support.\n");

284 
	`¥ötf
(" --tls-use-os-certs : LoadándÅrust OSÖrovided CA certificates.\n");

285 
	`¥ötf
(" --tls-version : TLSÖrotocol version, can be one ofÅlsv1.3Ålsv1.2 orÅlsv1.1.\n");

286 
	`¥ötf
(" DefaultsÅoÅlsv1.2 ifávailable.\n");

287 
	`¥ötf
(" --insecure : doÇot checkÅhatÅhe server certificate hostname matchesÅheÑemote\n");

288 
	`¥ötf
(" hostname. UsingÅhis option meansÅhat you cannot be sureÅhatÅhe\n");

289 
	`¥ötf
("Ñemote host isÅhe server you wishÅo connectÅoánd so is insecure.\n");

290 
	`¥ötf
(" DoÇot useÅhis option ináÖroductionÉnvironment.\n");

291 #ifde‡
WITH_TLS_PSK


292 
	`¥ötf
(" --psk :Öre-shared-key in hexadecimal (noÜeading 0x)ÅoÉnable TLS-PSK mode.\n");

293 
	`¥ötf
(" --psk-identity : client identity string for TLS-PSK mode.\n");

296 #ifde‡
WITH_SOCKS


297 
	`¥ötf
(" --proxy : SOCKS5Öroxy URL ofÅhe form:\n");

298 
	`¥ötf
(" socks5h://[username[:password]@]hostname[:port]\n");

299 
	`¥ötf
(" Only \"none\"ánd \"username\"áuthentication is supported.\n");

301 
	`¥ötf
("\nSee https://mosquitto.org/ for more information.\n\n");

302 
	}
}

304 
	$maö
(
¨gc
, *
¨gv
[])

306 
rc
;

307 #i‚de‡
WIN32


308 
siga˘i⁄
 
siga˘
;

311 
	`mosquôto_lib_öô
();

312 
	`ouçut_öô
();

314 
rc
 = 
	`˛õ¡_c⁄fig_lﬂd
(&
cfg
, 
CLIENT_RR
, 
¨gc
, 
¨gv
);

315 if(
rc
){

316 if(
rc
 == 2){

318 
	`¥öt_ußge
();

319 }if(
rc
 == 3){

321 
	`¥öt_vîsi⁄
();

323 
	`Ârötf
(
°dîr
, "\nUse 'mosquitto_rr --help'Åo see usage.\n");

325 
˛ónup
;

328 if(!
cfg
.
t›ic
 || cfg.
pub_mode
 =
MSGMODE_NONE
 || !cfg.
ª•⁄£_t›ic
){

329 
	`Ârötf
(
°dîr
, "Error: All ofÅopic, message,ándÑesponseÅopic must be supplied.\n");

330 
	`Ârötf
(
°dîr
, "\nUse 'mosquitto_rr --help'Åo see usage.\n");

331 
˛ónup
;

333 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(&
cfg
.
publish_¥›s
, 
MQTT_PROP_RESPONSE_TOPIC
, cfg.
ª•⁄£_t›ic
);

334 if(
rc
){

335 
	`Ârötf
(
°dîr
, "ErroráddingÖroperty RESPONSE_TOPIC.\n");

336 
˛ónup
;

338 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_PUBLISH
, 
cfg
.
publish_¥›s
);

339 if(
rc
){

340 
	`îr_¥ötf
(&
cfg
, "Error in PUBLISHÖroperties: DuplicateÑesponseÅopic.\n");

341 
˛ónup
;

344 if(
	`˛õ¡_id_gíî©e
(&
cfg
)){

345 
˛ónup
;

348 
g_mosq
 = 
	`mosquôto_√w
(
cfg
.
id
, cfg.
˛ón_£ssi⁄
, &cfg);

349 if(!
g_mosq
){

350 
î∫o
){

351 
ENOMEM
:

352 
	`îr_¥ötf
(&
cfg
, "Error: Out of memory.\n");

354 
EINVAL
:

355 
	`îr_¥ötf
(&
cfg
, "Error: Invalid idánd/or clean_session.\n");

358 
˛ónup
;

360 if(
	`˛õ¡_›ts_£t
(
g_mosq
, &
cfg
)){

361 
˛ónup
;

363 if(
cfg
.
debug
){

364 
	`mosquôto_log_ˇŒback_£t
(
g_mosq
, 
my_log_ˇŒback
);

366 
	`mosquôto_c⁄√˘_v5_ˇŒback_£t
(
g_mosq
, 
my_c⁄√˘_ˇŒback
);

367 
	`mosquôto_subs¸ibe_ˇŒback_£t
(
g_mosq
, 
my_subs¸ibe_ˇŒback
);

368 
	`mosquôto_mesßge_v5_ˇŒback_£t
(
g_mosq
, 
my_mesßge_ˇŒback
);

370 
rc
 = 
	`˛õ¡_c⁄√˘
(
g_mosq
, &
cfg
);

371 if(
rc
){

372 
˛ónup
;

375 #i‚de‡
WIN32


376 
siga˘
.
ß_h™dÀr
 = 
my_sig«l_h™dÀr
;

377 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

378 
siga˘
.
ß_Êags
 = 0;

380 if(
	`siga˘i⁄
(
SIGALRM
, &
siga˘
, 
NULL
) == -1){

381 
	`≥º‹
("sigaction");

382 
˛ónup
;

385 if(
cfg
.
timeout
){

386 
	`Æ¨m
(
cfg
.
timeout
);

391 
rc
 = 
	`mosquôto_lo›
(
g_mosq
, -1, 1);

392 if(
˛õ¡_°©e
 =
º_s_ªady_to_publish
){

393 
˛õ¡_°©e
 = 
º_s_waô_f‹_ª•⁄£
;

394 
cfg
.
pub_mode
){

395 
MSGMODE_CMD
:

396 
MSGMODE_FILE
:

397 
MSGMODE_STDIN_FILE
:

398 
rc
 = 
	`my_publish
(
g_mosq
, &
mid_£¡
, 
cfg
.
t›ic
, cfg.
msgÀn
, cfg.
mesßge
, cfg.
qos
, cfg.
ªèö
);

400 
MSGMODE_NULL
:

401 
rc
 = 
	`my_publish
(
g_mosq
, &
mid_£¡
, 
cfg
.
t›ic
, 0, 
NULL
, cfg.
qos
, cfg.
ªèö
);

403 
MSGMODE_STDIN_LINE
:

408 }
rc
 =
MOSQ_ERR_SUCCESS
 && 
˛õ¡_°©e
 !
º_s_disc⁄√˘
);

410 
	`mosquôto_de°roy
(
g_mosq
);

411 
	`mosquôto_lib_˛ónup
();

413 if(
cfg
.
msg_cou¡
>0 && 
rc
 =
MOSQ_ERR_NO_CONN
){

414 
rc
 = 0;

416 
	`˛õ¡_c⁄fig_˛ónup
(&
cfg
);

417 if(
timed_out
){

418 
	`îr_¥ötf
(&
cfg
, "Timed out\n");

419  
MOSQ_ERR_TIMEOUT
;

420 }if(
rc
){

421 
	`îr_¥ötf
(&
cfg
, "Eº‹: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

423 if(
c⁄«ck_ªsu…
){

424  
c⁄«ck_ªsu…
;

426  
rc
;

429 
˛ónup
:

430 
	`mosquôto_lib_˛ónup
();

431 
	`˛õ¡_c⁄fig_˛ónup
(&
cfg
);

433 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/client/sub_client.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<î∫o.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<time.h
>

27 #i‚de‡
WIN32


28 
	~<uni°d.h
>

29 
	~<sig«l.h
>

31 
	~<¥o˚ss.h
>

32 
	~<wösock2.h
>

33 
	#¢¥ötf
 
•rötf_s


	)

36 
	~<mosquôto.h
>

37 
	~<mqâ_¥Ÿocﬁ.h
>

38 
	~"˛õ¡_sh¨ed.h
"

39 
	~"sub_˛õ¡_ouçut.h
"

41 
mosq_c⁄fig
 
	gcfg
;

42 
boﬁ
 
	g¥o˚ss_mesßges
 = 
åue
;

43 
	gmsg_cou¡
 = 0;

44 
mosquôto
 *
	gg_mosq
 = 
NULL
;

45 
	gœ°_mid
 = 0;

46 
boﬁ
 
	gtimed_out
 = 
Ál£
;

47 
	gc⁄«ck_ªsu…
 = 0;

48 
boﬁ
 
	gc⁄«ck_ª˚ived
 = 
Ál£
;

50 #i‚de‡
WIN32


51 
	$my_sig«l_h™dÀr
(
signum
)

53 if(
signum
 =
SIGALRM
 || signum =
SIGTERM
 || signum =
SIGINT
){

54 if(
c⁄«ck_ª˚ived
){

55 
¥o˚ss_mesßges
 = 
Ál£
;

56 
	`mosquôto_disc⁄√˘_v5
(
g_mosq
, 
MQTT_RC_DISCONNECT_WITH_WILL_MSG
, 
cfg
.
disc⁄√˘_¥›s
);

58 
	`exô
(-1);

61 if(
signum
 =
SIGALRM
){

62 
timed_out
 = 
åue
;

64 
	}
}

68 
	$my_mesßge_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
mesßge
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

70 
i
;

71 
boﬁ
 
ªs
;

73 
	`UNUSED
(
obj
);

74 
	`UNUSED
(
¥›îtõs
);

76 if(
¥o˚ss_mesßges
 =
Ál£
) ;

78 if(
cfg
.
ªèöed_⁄ly
 && !
mesßge
->
ªèö
 && 
¥o˚ss_mesßges
){

79 
¥o˚ss_mesßges
 = 
Ál£
;

80 if(
œ°_mid
 == 0){

81 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

86 if(
mesßge
->
ªèö
 && 
cfg
.
no_ªèö
) ;

87 if(
cfg
.
fûãr_outs
){

88 
i
=0; i<
cfg
.
fûãr_out_cou¡
; i++){

89 
	`mosquôto_t›ic_m©ches_sub
(
cfg
.
fûãr_outs
[
i
], 
mesßge
->
t›ic
, &
ªs
);

90 if(
ªs
) ;

94 if(
cfg
.
ªmove_ªèöed
 && 
mesßge
->
ªèö
){

95 
	`mosquôto_publish
(
mosq
, &
œ°_mid
, 
mesßge
->
t›ic
, 0, 
NULL
, 1, 
åue
);

98 
	`¥öt_mesßge
(&
cfg
, 
mesßge
, 
¥›îtõs
);

99 if(
	`„º‹
(
°dout
)){

100 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

103 if(
cfg
.
msg_cou¡
>0){

104 
msg_cou¡
++;

105 if(
cfg
.
msg_cou¡
 == msg_count){

106 
¥o˚ss_mesßges
 = 
Ál£
;

107 if(
œ°_mid
 == 0){

108 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

112 
	}
}

114 
	$my_c⁄√˘_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
ªsu…
, 
Êags
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

116 
i
;

118 
	`UNUSED
(
obj
);

119 
	`UNUSED
(
Êags
);

120 
	`UNUSED
(
¥›îtõs
);

122 
c⁄«ck_ª˚ived
 = 
åue
;

124 
c⁄«ck_ªsu…
 = 
ªsu…
;

125 if(!
ªsu…
){

126 
	`mosquôto_subs¸ibe_mu…ùÀ
(
mosq
, 
NULL
, 
cfg
.
t›ic_cou¡
, cfg.
t›ics
, cfg.
qos
, cfg.
sub_›ts
, cfg.
subs¸ibe_¥›s
);

128 
i
=0; i<
cfg
.
unsub_t›ic_cou¡
; i++){

129 
	`mosquôto_unsubs¸ibe_v5
(
mosq
, 
NULL
, 
cfg
.
unsub_t›ics
[
i
], cfg.
unsubs¸ibe_¥›s
);

132 if(
ªsu…
){

133 if(
cfg
.
¥Ÿocﬁ_vîsi⁄
 =
MQTT_PROTOCOL_V5
){

134 if(
ªsu…
 =
MQTT_RC_UNSUPPORTED_PROTOCOL_VERSION
){

135 
	`îr_¥ötf
(&
cfg
, "C⁄√˘i⁄Éº‹: %s. Try c⁄√˘ögÅÿ™ MQTT v5 brokî, o∏u£ MQTT v3.x mode.\n", 
	`mosquôto_ªas⁄_°rög
(
ªsu…
));

137 
	`îr_¥ötf
(&
cfg
, "C⁄√˘i⁄Éº‹: %s\n", 
	`mosquôto_ªas⁄_°rög
(
ªsu…
));

140 
	`îr_¥ötf
(&
cfg
, "C⁄√˘i⁄Éº‹: %s\n", 
	`mosquôto_c⁄«ck_°rög
(
ªsu…
));

143 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

145 
	}
}

147 
	$my_subs¸ibe_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

149 
i
;

150 
boﬁ
 
some_sub_Ælowed
 = (
gø¡ed_qos
[0] < 128);

151 
boﬁ
 
should_¥öt
 = 
cfg
.
debug
 && !cfg.
quõt
;

152 
	`UNUSED
(
obj
);

154 if(
should_¥öt
Ë
	`¥ötf
("Subs¸ibed (mid: %d): %d", 
mid
, 
gø¡ed_qos
[0]);

155 
i
=1; i<
qos_cou¡
; i++){

156 if(
should_¥öt
Ë
	`¥ötf
(", %d", 
gø¡ed_qos
[
i
]);

157 
some_sub_Ælowed
 |(
gø¡ed_qos
[
i
] < 128);

159 if(
should_¥öt
Ë
	`¥ötf
("\n");

161 if(
some_sub_Ælowed
 =
Ál£
){

162 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

163 
	`îr_¥ötf
(&
cfg
, "All subscriptionÑequests were denied.\n");

166 if(
cfg
.
exô_a·î_sub
){

167 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

169 
	}
}

171 
	$my_log_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
Àvñ
, c⁄° *
°r
)

173 
	`UNUSED
(
mosq
);

174 
	`UNUSED
(
obj
);

175 
	`UNUSED
(
Àvñ
);

177 
	`¥ötf
("%s\n", 
°r
);

178 
	}
}

180 
	$¥öt_vîsi⁄
()

182 
maj‹
, 
mö‹
, 
ªvisi⁄
;

184 
	`mosquôto_lib_vîsi⁄
(&
maj‹
, &
mö‹
, &
ªvisi⁄
);

185 
	`¥ötf
("mosquôto_sub vîsi⁄ %†ru¬ög o¿libmosquôtÿ%d.%d.%d.\n", 
VERSION
, 
maj‹
, 
mö‹
, 
ªvisi⁄
);

186 
	}
}

188 
	$¥öt_ußge
()

190 
maj‹
, 
mö‹
, 
ªvisi⁄
;

192 
	`mosquôto_lib_vîsi⁄
(&
maj‹
, &
mö‹
, &
ªvisi⁄
);

193 
	`¥ötf
("mosquitto_sub isá simple mqtt clientÅhat will subscribeÅoá set ofÅopicsándÖrintáll messages itÑeceives.\n");

194 
	`¥ötf
("mosquôto_sub vîsi⁄ %†ru¬ög o¿libmosquôtÿ%d.%d.%d.\n\n", 
VERSION
, 
maj‹
, 
mö‹
, 
ªvisi⁄
);

195 
	`¥ötf
("Usage: mosquitto_sub {[-h host] [--unixÖath] [-pÖort] [-u username] [-PÖassword] -tÅopic | -L URL [-tÅopic]}\n");

196 
	`¥ötf
(" [-c] [-k keepalive] [-q qos] [-x session-expiry-interval]\n");

197 
	`¥ötf
(" [-C msg_count] [-E] [-R] [--retained-only] [--remove-retained] [-T filter_out] [-UÅopic ...]\n");

198 
	`¥ötf
(" [-F format]\n");

199 #i‚de‡
WIN32


200 
	`¥ötf
(" [-WÅimeout_secs]\n");

202 #ifde‡
WITH_SRV


203 
	`¥ötf
(" [-A bind_address] [--nodelay] [-S]\n");

205 
	`¥ötf
(" [-A bind_address] [--nodelay]\n");

207 
	`¥ötf
(" [-i id] [-I id_prefix]\n");

208 
	`¥ötf
(" [-d] [-N] [--quiet] [-v]\n");

209 
	`¥ötf
(" [--will-topic [--will-payloadÖayload] [--will-qos qos] [--will-retain]]\n");

210 #ifde‡
WITH_TLS


211 
	`¥ötf
(" [{--cafile file | --capath dir} [--cert file] [--key file]\n");

212 
	`¥ötf
(" [--ciphers ciphers] [--insecure]\n");

213 
	`¥ötf
(" [--tls-alpnÖrotocol]\n");

214 
	`¥ötf
(" [--tls-engineÉngine] [--keyform keyform] [--tls-engine-kpass-sha1]]\n");

215 
	`¥ötf
(" [--tls-use-os-certs]\n");

216 #ifde‡
FINAL_WITH_TLS_PSK


217 
	`¥ötf
(" [--psk hex-key --psk-identity identity [--ciphers ciphers]]\n");

220 #ifde‡
WITH_SOCKS


221 
	`¥ötf
(" [--proxy socks-url]\n");

223 
	`¥ötf
(" [-D command identifier value]\n");

224 
	`¥ötf
(" mosquitto_sub --help\n\n");

225 
	`¥ötf
(" -A : bindÅhe outgoing socketÅoÅhis host/ipáddress. UseÅo control which interface\n");

226 
	`¥ötf
("Åhe client communicates over.\n");

227 
	`¥ötf
(" -c : disable clean session/enableÖersistent client mode\n");

228 
	`¥ötf
(" WhenÅhisárgument is used,Åhe broker will be instructedÇotÅo cleanÉxisting sessions\n");

229 
	`¥ötf
(" forÅhe same client id whenÅhe client connects,ánd sessions willÇeverÉxpire whenÅhe\n");

230 
	`¥ötf
(" client disconnects. MQTT v5 clients can changeÅheir sessionÉxpiry interval withÅhe -x\n");

231 
	`¥ötf
("árgument.\n");

232 
	`¥ötf
(" -C : disconnectándÉxitáfterÑeceivingÅhe 'msg_count' messages.\n");

233 
	`¥ötf
(" -d :Énable debug messages.\n");

234 
	`¥ötf
(" -D : Define MQTT v5Öroperties. SeeÅhe documentation for more details.\n");

235 
	`¥ötf
(" -E : Exit onceáll subscriptions have beenácknowledged byÅhe broker.\n");

236 
	`¥ötf
(" -F : output format.\n");

237 
	`¥ötf
(" -h : mqtt hostÅo connectÅo. DefaultsÅoÜocalhost.\n");

238 
	`¥ötf
(" -i : idÅo use forÅhis client. DefaultsÅo mosquitto_sub_áppended withÅheÖrocess id.\n");

239 
	`¥ötf
(" -I : defineÅhe client idás id_prefixáppended withÅheÖrocess id. Useful for whenÅhe\n");

240 
	`¥ötf
(" broker is usingÅhe clientid_prefixes option.\n");

241 
	`¥ötf
(" -k : keepálive in seconds forÅhis client. DefaultsÅo 60.\n");

242 
	`¥ötf
(" -L : specify user,Öassword, hostname,ÖortándÅopicásá URL inÅhe form:\n");

243 
	`¥ötf
(" mqtt(s)://[username[:password]@]host[:port]/topic\n");

244 
	`¥ötf
(" -N : doÇotáddánÉnd ofÜine character whenÖrintingÅheÖayload.\n");

245 
	`¥ötf
(" -p :ÇetworkÖortÅo connectÅo. DefaultsÅo 1883 forÖlain MQTTánd 8883 for MQTT over TLS.\n");

246 
	`¥ötf
(" -P :ÖrovideáÖassword\n");

247 
	`¥ötf
(" -q : quality of serviceÜevelÅo use forÅhe subscription. DefaultsÅo 0.\n");

248 
	`¥ötf
(" -R : doÇotÖrint stale messages (those withÑetain set).\n");

249 #ifde‡
WITH_SRV


250 
	`¥ötf
(" -S : use SRVÜookupsÅo determine which hostÅo connectÅo.\n");

252 
	`¥ötf
(" -t : mqttÅopicÅo subscribeÅo. May beÑepeated multipleÅimes.\n");

253 
	`¥ötf
(" -T :Åopic stringÅo filter out ofÑesults. May beÑepeated.\n");

254 
	`¥ötf
(" -u :Örovideá username\n");

255 
	`¥ötf
(" -U : unsubscribe fromáÅopic. May beÑepeated.\n");

256 
	`¥ötf
(" -v :ÖrintÖublished messages verbosely.\n");

257 
	`¥ötf
(" -V : specifyÅhe version ofÅhe MQTTÖrotocolÅo use when connecting.\n");

258 
	`¥ötf
(" Can be mqttv5, mqttv311 or mqttv31. DefaultsÅo mqttv311.\n");

259 #i‚de‡
WIN32


260 
	`¥ötf
(" -W : SpecifiesáÅimeout in seconds howÜongÅoÖrocess incoming MQTT messages.\n");

262 
	`¥ötf
(" -x : SetÅhe session-expiry-intervalÖroperty onÅhe CONNECTÖacket. AppliesÅo MQTT v5\n");

263 
	`¥ötf
(" clients only. SetÅo 0-4294967294Åo specifyÅhe session willÉxpire inÅhat many\n");

264 
	`¥ötf
(" secondsáfterÅhe client disconnects, or use -1, 4294967295, or ‚àû forá session\n");

265 
	`¥ötf
("Åhat doesÇotÉxpire. DefaultsÅo -1 if -c isálso given, or 0 if -cÇot given.\n");

266 
	`¥ötf
(" --help : displayÅhis message.\n");

267 
	`¥ötf
(" --nodelay : disable Nagle'sálgorithm,ÅoÑeduce socket sendingÜatencyátÅheÖossible\n");

268 
	`¥ötf
("Éxpense of moreÖackets being sent.\n");

269 
	`¥ötf
(" --pretty :Örint formatted outputÑatherÅhan minimised output when usingÅhe\n");

270 
	`¥ötf
(" JSON output format option.\n");

271 
	`¥ötf
(" --quiet : don'tÖrintÉrror messages.\n");

272 
	`¥ötf
(" --random-filter : onlyÖrintáÖercentage ofÑeceived messages. SetÅo 100Åo haveáll\n");

273 
	`¥ötf
(" messagesÖrinted, 50.0Åo have half ofÅhe messagesÑeceived onáverage\n");

274 
	`¥ötf
("Örinted,ánd so on.\n");

275 
	`¥ötf
(" --retained-only : only handle messages withÅheÑetained flag set,ándÉxit whenÅhe\n");

276 
	`¥ötf
(" firstÇon-retained message isÑeceived.\n");

277 
	`¥ötf
(" --remove-retained : sendá messageÅoÅhe serverÅo clearányÑeceivedÑetained messages\n");

278 
	`¥ötf
(" Use -TÅo filter out messages you doÇot wantÅo be cleared.\n");

279 
	`¥ötf
(" --unix : connectÅoá brokerÅhroughá unix domain socket instead ofá TCP socket,\n");

280 
	`¥ötf
("É.g. /tmp/mosquitto.sock\n");

281 
	`¥ötf
(" --will-payload :Öayload forÅhe client Will, which is sent byÅhe broker in case of\n");

282 
	`¥ötf
(" unexpected disconnection. IfÇot givenánd will-topic is set,á zero\n");

283 
	`¥ötf
("Üength message will be sent.\n");

284 
	`¥ötf
(" --will-qos : QoSÜevel forÅhe client Will.\n");

285 
	`¥ötf
(" --will-retain : if given, makeÅhe client WillÑetained.\n");

286 
	`¥ötf
(" --will-topic :ÅheÅopic on whichÅoÖublishÅhe client Will.\n");

287 #ifde‡
WITH_TLS


288 
	`¥ötf
(" --cafile :ÖathÅoá file containingÅrusted CA certificatesÅoÉnableÉncrypted\n");

289 
	`¥ötf
(" certificate based communication.\n");

290 
	`¥ötf
(" --capath :ÖathÅoá directory containingÅrusted CA certificatesÅoÉnableÉncrypted\n");

291 
	`¥ötf
(" communication.\n");

292 
	`¥ötf
(" --cert : client certificate foráuthentication, ifÑequired by server.\n");

293 
	`¥ötf
(" --key : clientÖrivate key foráuthentication, ifÑequired by server.\n");

294 
	`¥ötf
(" --keyform : keyfileÅype, can beÉither \"pem\" or \"engine\".\n");

295 
	`¥ötf
(" --ciphers : openssl compatibleÜist of TLS ciphersÅo support.\n");

296 
	`¥ötf
(" --tls-version : TLSÖrotocol version, can be one ofÅlsv1.3Ålsv1.2 orÅlsv1.1.\n");

297 
	`¥ötf
(" DefaultsÅoÅlsv1.2 ifávailable.\n");

298 
	`¥ötf
(" --insecure : doÇot checkÅhatÅhe server certificate hostname matchesÅheÑemote\n");

299 
	`¥ötf
(" hostname. UsingÅhis option meansÅhat you cannot be sureÅhatÅhe\n");

300 
	`¥ötf
("Ñemote host isÅhe server you wishÅo connectÅoánd so is insecure.\n");

301 
	`¥ötf
(" DoÇot useÅhis option ináÖroductionÉnvironment.\n");

302 
	`¥ötf
(" --tls-engine : If set,ÉnablesÅhe use ofá SSLÉngine device.\n");

303 
	`¥ötf
(" --tls-engine-kpass-sha1 : SHA1 ofÅhe keyÖasswordÅo be used withÅhe selected SSLÉngine.\n");

304 
	`¥ötf
(" --tls-use-os-certs : LoadándÅrust OSÖrovided CA certificates.\n");

305 #ifde‡
FINAL_WITH_TLS_PSK


306 
	`¥ötf
(" --psk :Öre-shared-key in hexadecimal (noÜeading 0x)ÅoÉnable TLS-PSK mode.\n");

307 
	`¥ötf
(" --psk-identity : client identity string for TLS-PSK mode.\n");

310 #ifde‡
WITH_SOCKS


311 
	`¥ötf
(" --proxy : SOCKS5Öroxy URL ofÅhe form:\n");

312 
	`¥ötf
(" socks5h://[username[:password]@]hostname[:port]\n");

313 
	`¥ötf
(" Only \"none\"ánd \"username\"áuthentication is supported.\n");

315 
	`¥ötf
("\nSee https://mosquitto.org/ for more information.\n\n");

316 
	}
}

318 
	$maö
(
¨gc
, *
¨gv
[])

320 
rc
;

321 #i‚de‡
WIN32


322 
siga˘i⁄
 
siga˘
;

325 
	`mosquôto_lib_öô
();

327 
	`ouçut_öô
();

329 
rc
 = 
	`˛õ¡_c⁄fig_lﬂd
(&
cfg
, 
CLIENT_SUB
, 
¨gc
, 
¨gv
);

330 if(
rc
){

331 if(
rc
 == 2){

333 
	`¥öt_ußge
();

334 }if(
rc
 == 3){

336 
	`¥öt_vîsi⁄
();

338 
	`Ârötf
(
°dîr
, "\nUse 'mosquitto_sub --help'Åo see usage.\n");

340 
˛ónup
;

343 if(
cfg
.
no_ªèö
 && cfg.
ªèöed_⁄ly
){

344 
	`Ârötf
(
°dîr
, "\nError: Combining '-R'ánd '--retained-only' makesÇo sense.\n");

345 
˛ónup
;

348 if(
	`˛õ¡_id_gíî©e
(&
cfg
)){

349 
˛ónup
;

352 
g_mosq
 = 
	`mosquôto_√w
(
cfg
.
id
, cfg.
˛ón_£ssi⁄
, &cfg);

353 if(!
g_mosq
){

354 
î∫o
){

355 
ENOMEM
:

356 
	`îr_¥ötf
(&
cfg
, "Error: Out of memory.\n");

358 
EINVAL
:

359 
	`îr_¥ötf
(&
cfg
, "Error: Invalid idánd/or clean_session.\n");

362 
˛ónup
;

364 if(
	`˛õ¡_›ts_£t
(
g_mosq
, &
cfg
)){

365 
˛ónup
;

367 if(
cfg
.
debug
){

368 
	`mosquôto_log_ˇŒback_£t
(
g_mosq
, 
my_log_ˇŒback
);

370 
	`mosquôto_subs¸ibe_ˇŒback_£t
(
g_mosq
, 
my_subs¸ibe_ˇŒback
);

371 
	`mosquôto_c⁄√˘_v5_ˇŒback_£t
(
g_mosq
, 
my_c⁄√˘_ˇŒback
);

372 
	`mosquôto_mesßge_v5_ˇŒback_£t
(
g_mosq
, 
my_mesßge_ˇŒback
);

374 
rc
 = 
	`˛õ¡_c⁄√˘
(
g_mosq
, &
cfg
);

375 if(
rc
){

376 
˛ónup
;

379 #i‚de‡
WIN32


380 
siga˘
.
ß_h™dÀr
 = 
my_sig«l_h™dÀr
;

381 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

382 
siga˘
.
ß_Êags
 = 0;

384 if(
	`siga˘i⁄
(
SIGALRM
, &
siga˘
, 
NULL
) == -1){

385 
	`≥º‹
("sigaction");

386 
˛ónup
;

389 if(
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
) == -1){

390 
	`≥º‹
("sigaction");

391 
˛ónup
;

394 if(
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
) == -1){

395 
	`≥º‹
("sigaction");

396 
˛ónup
;

399 if(
cfg
.
timeout
){

400 
	`Æ¨m
(
cfg
.
timeout
);

404 
rc
 = 
	`mosquôto_lo›_f‹evî
(
g_mosq
, -1, 1);

406 
	`mosquôto_de°roy
(
g_mosq
);

407 
	`mosquôto_lib_˛ónup
();

409 if(
cfg
.
msg_cou¡
>0 && 
rc
 =
MOSQ_ERR_NO_CONN
){

410 
rc
 = 0;

412 
	`˛õ¡_c⁄fig_˛ónup
(&
cfg
);

413 if(
timed_out
){

414 
	`îr_¥ötf
(&
cfg
, "Timed out\n");

415  
MOSQ_ERR_TIMEOUT
;

416 }if(
rc
){

417 
	`îr_¥ötf
(&
cfg
, "Eº‹: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

419 if(
c⁄«ck_ªsu…
){

420  
c⁄«ck_ªsu…
;

422  
rc
;

425 
˛ónup
:

426 
	`mosquôto_de°roy
(
g_mosq
);

427 
	`mosquôto_lib_˛ónup
();

428 
	`˛õ¡_c⁄fig_˛ónup
(&
cfg
);

430 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/client/sub_client_output.c

19 
	~"c⁄fig.h
"

21 #ifde‡
WIN32


23 
	#_CRT_RAND_S


	)

24 
	~<f˙é.h
>

25 
	~<io.h
>

28 
	~<as£π.h
>

29 
	~<î∫o.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<time.h
>

34 #i‚de‡
WIN32


35 
	~<uni°d.h
>

37 
	~<¥o˚ss.h
>

38 
	~<wösock2.h
>

39 
	#¢¥ötf
 
•rötf_s


	)

42 #ifde‡
WITH_CJSON


43 
	~<cjs⁄/cJSON.h
>

46 #ifde‡
__APPLE__


47 
	~<sys/time.h
>

50 
	~<mosquôto.h
>

51 
	~<mqâ_¥Ÿocﬁ.h
>

52 
	~"˛õ¡_sh¨ed.h
"

53 
	~"sub_˛õ¡_ouçut.h
"

55 
mosq_c⁄fig
 
cfg
;

57 
	$gë_time
(
tm
 **
ti
, *
ns
)

59 #ifde‡
WIN32


60 
SYSTEMTIME
 
°
;

61 #ñi‡
	`deföed
(
__APPLE__
)

62 
timevÆ
 
tv
;

64 
time•ec
 
ts
;

66 
time_t
 
s
;

68 #ifde‡
WIN32


69 
s
 = 
	`time
(
NULL
);

71 
	`GëLoˇlTime
(&
°
);

72 *
ns
 = 
°
.
wMûli£c⁄ds
*1000000L;

73 #ñi‡
	`deföed
(
__APPLE__
)

74 
	`gëtimeofday
(&
tv
, 
NULL
);

75 
s
 = 
tv
.
tv_£c
;

76 *
ns
 = 
tv
.
tv_u£c
*1000;

78 if(
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
ts
) != 0){

79 
	`îr_¥ötf
(&
cfg
, "Error obtaining systemÅime.\n");

82 
s
 = 
ts
.
tv_£c
;

83 *
ns
 = 
ts
.
tv_n£c
;

86 *
ti
 = 
	`loˇ…ime
(&
s
);

87 if(!(*
ti
)){

88 
	`îr_¥ötf
(&
cfg
, "Error obtaining systemÅime.\n");

93 
	}
}

96 
	$wrôe_∑ylﬂd
(c⁄° *
∑ylﬂd
, 
∑ylﬂdÀn
, 
hex
, 
Æign
, 
∑d
, 
fõld_width
, 
¥ecisi⁄
)

98 
i
;

99 
∑dÀn
;

101 
	`UNUSED
(
¥ecisi⁄
);

103 if(
fõld_width
 > 0){

104 if(
∑ylﬂdÀn
 > 
fõld_width
){

105 
∑ylﬂdÀn
 = 
fõld_width
;

107 if(
hex
 > 0){

108 
∑ylﬂdÀn
 /= 2;

109 
∑dÀn
 = 
fõld_width
 - 
∑ylﬂdÀn
*2;

111 
∑dÀn
 = 
fõld_width
 - 
∑ylﬂdÀn
;

114 
∑dÀn
 = 
fõld_width
 - 
∑ylﬂdÀn
;

117 if(
Æign
 != '-'){

118 
i
=0; i<
∑dÀn
; i++){

119 
	`putch¨
(
∑d
);

123 if(
hex
 == 0){

124 ()
	`fwrôe
(
∑ylﬂd
, 1, (
size_t
 )
∑ylﬂdÀn
, 
°dout
);

125 }if(
hex
 == 1){

126 
i
=0; i<
∑ylﬂdÀn
; i++){

127 
	`Ârötf
(
°dout
, "%02x", 
∑ylﬂd
[
i
]);

129 }if(
hex
 == 2){

130 
i
=0; i<
∑ylﬂdÀn
; i++){

131 
	`Ârötf
(
°dout
, "%02X", 
∑ylﬂd
[
i
]);

135 if(
Æign
 == '-'){

136 
	`¥ötf
("%*s", 
∑dÀn
, "");

138 
	}
}

141 #i‚de‡
WITH_CJSON


142 
	$wrôe_js⁄_∑ylﬂd
(c⁄° *
∑ylﬂd
, 
∑ylﬂdÀn
)

144 
i
;

146 
i
=0; i<
∑ylﬂdÀn
; i++){

147 if(
∑ylﬂd
[
i
] == '"' ||Öayload[i] == '\\' || (payload[i] >=0 &&Öayload[i] < 32)){

148 
	`¥ötf
("\\u%04x", 
∑ylﬂd
[
i
]);

150 
	`Âutc
(
∑ylﬂd
[
i
], 
°dout
);

153 
	}
}

157 #ifde‡
WITH_CJSON


158 
	$js⁄_¥öt_¥›îtõs
(
cJSON
 *
roŸ
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

160 
idítifõr
;

161 
uöt8_t
 
i8vÆue
 = 0;

162 
uöt16_t
 
i16vÆue
 = 0;

163 
uöt32_t
 
i32vÆue
 = 0;

164 *
°∫ame
 = 
NULL
, *
°rvÆue
 = NULL;

165 *
bövÆue
 = 
NULL
;

166 
cJSON
 *
tmp
, *
¥›_js⁄
, *
u£r_js⁄
 = 
NULL
;

167 c⁄° 
mosquôto_¥›îty
 *
¥›
 = 
NULL
;

169 
¥›_js⁄
 = 
	`cJSON_Cª©eObje˘
();

170 if(
¥›_js⁄
 =
NULL
){

171 
	`cJSON_Dñëe
(
¥›_js⁄
);

172  
MOSQ_ERR_NOMEM
;

174 
	`cJSON_AddIãmToObje˘
(
roŸ
, "¥›îtõs", 
¥›_js⁄
);

176 
¥›
=
¥›îtõs
;Ör› !
NULL
;Ör› = 
	`mosquôto_¥›îty_√xt
(prop)){

177 
tmp
 = 
NULL
;

178 
idítifõr
 = 
	`mosquôto_¥›îty_idítifõr
(
¥›
);

179 
idítifõr
){

180 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
:

181 
	`mosquôto_¥›îty_ªad_byã
(
¥›
, 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
, &
i8vÆue
, 
Ál£
);

182 
tmp
 = 
	`cJSON_Cª©eNumbî
(
i8vÆue
);

185 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
:

186 
	`mosquôto_¥›îty_ªad_öt32
(
¥›
, 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
, &
i32vÆue
, 
Ál£
);

187 
tmp
 = 
	`cJSON_Cª©eNumbî
(
i32vÆue
);

190 
MQTT_PROP_CONTENT_TYPE
:

191 
MQTT_PROP_RESPONSE_TOPIC
:

192 
	`mosquôto_¥›îty_ªad_°rög
(
¥›
, 
idítifõr
, &
°rvÆue
, 
Ál£
);

193 if(
°rvÆue
 =
NULL
Ë 
MOSQ_ERR_NOMEM
;

194 
tmp
 = 
	`cJSON_Cª©eSåög
(
°rvÆue
);

195 
	`‰ì
(
°rvÆue
);

196 
°rvÆue
 = 
NULL
;

199 
MQTT_PROP_CORRELATION_DATA
:

200 
	`mosquôto_¥›îty_ªad_bö¨y
(
¥›
, 
MQTT_PROP_CORRELATION_DATA
, (**)&
bövÆue
, &
i16vÆue
, 
Ál£
);

201 if(
bövÆue
 =
NULL
Ë 
MOSQ_ERR_NOMEM
;

202 
tmp
 = 
	`cJSON_Cª©eSåög
(
bövÆue
);

203 
	`‰ì
(
bövÆue
);

204 
bövÆue
 = 
NULL
;

207 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
:

208 
	`mosquôto_¥›îty_ªad_v¨öt
(
¥›
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, &
i32vÆue
, 
Ál£
);

209 
tmp
 = 
	`cJSON_Cª©eNumbî
(
i32vÆue
);

212 
MQTT_PROP_TOPIC_ALIAS
:

213 
	`mosquôto_¥›îty_ªad_öt16
(
¥›
, 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
, &
i16vÆue
, 
Ál£
);

214 
tmp
 = 
	`cJSON_Cª©eNumbî
(
i16vÆue
);

217 
MQTT_PROP_USER_PROPERTY
:

218 if(
u£r_js⁄
 =
NULL
){

219 
u£r_js⁄
 = 
	`cJSON_Cª©eObje˘
();

220 if(
u£r_js⁄
 =
NULL
){

221  
MOSQ_ERR_NOMEM
;

223 
	`cJSON_AddIãmToObje˘
(
¥›_js⁄
, "u£r-¥›îtõs", 
u£r_js⁄
);

225 
	`mosquôto_¥›îty_ªad_°rög_∑ú
(
¥›
, 
MQTT_PROP_USER_PROPERTY
, &
°∫ame
, &
°rvÆue
, 
Ál£
);

226 if(
°∫ame
 =
NULL
 || 
°rvÆue
 =NULLË 
MOSQ_ERR_NOMEM
;

228 
tmp
 = 
	`cJSON_Cª©eSåög
(
°rvÆue
);

229 
	`‰ì
(
°rvÆue
);

231 if(
tmp
 =
NULL
){

232 
	`‰ì
(
°∫ame
);

233  
MOSQ_ERR_NOMEM
;

235 
	`cJSON_AddIãmToObje˘
(
u£r_js⁄
, 
°∫ame
, 
tmp
);

236 
	`‰ì
(
°∫ame
);

237 
°∫ame
 = 
NULL
;

238 
°rvÆue
 = 
NULL
;

239 
tmp
 = 
NULL
;

242 if(
tmp
 !
NULL
){

243 
	`cJSON_AddIãmToObje˘
(
¥›_js⁄
, 
	`mosquôto_¥›îty_idítifõr_to_°rög
(
idítifõr
), 
tmp
);

246  
MOSQ_ERR_SUCCESS
;

247 
	}
}

251 
	$f‹m©_time_8601
(c⁄° 
tm
 *
ti
, 
ns
, *
buf
, 
size_t
 
Àn
)

253 
c
;

255 
	`°r·ime
(
buf
, 
Àn
, "%Y-%m-%dT%H:%M:%S.000000%z", 
ti
);

256 
c
 = 
buf
[
	`°æí
("2020-05-06T21:48:00.000000")];

257 
	`¢¥ötf
(&
buf
[
	`°æí
("2020-05-06T21:48:00.")], 9, "%06d", 
ns
/1000);

258 
buf
[
	`°æí
("2020-05-06T21:48:00.000000")] = 
c
;

259 
	}
}

261 
	$js⁄_¥öt
(c⁄° 
mosquôto_mesßge
 *
mesßge
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
, c⁄° 
tm
 *
ti
, 
ns
, 
boﬁ
 
esˇ≥d
, boﬁ 
¥ëty
)

263 
buf
[100];

264 #ifde‡
WITH_CJSON


265 
cJSON
 *
roŸ
;

266 
cJSON
 *
tmp
;

267 *
js⁄_°r
;

268 c⁄° *
ªtu∫_∑r£_íd
;

270 
roŸ
 = 
	`cJSON_Cª©eObje˘
();

271 if(
roŸ
 =
NULL
){

272  
MOSQ_ERR_NOMEM
;

275 
	`f‹m©_time_8601
(
ti
, 
ns
, 
buf
, (buf));

277 
tmp
 = 
	`cJSON_Cª©eSåögRe„ªn˚
(
buf
);

278 if(
tmp
 =
NULL
){

279 
	`cJSON_Dñëe
(
roŸ
);

280  
MOSQ_ERR_NOMEM
;

282 
	`cJSON_AddIãmToObje˘
(
roŸ
, "t°", 
tmp
);

284 
tmp
 = 
	`cJSON_Cª©eSåög
(
mesßge
->
t›ic
);

285 if(
tmp
 =
NULL
){

286 
	`cJSON_Dñëe
(
roŸ
);

287  
MOSQ_ERR_NOMEM
;

290 
	`cJSON_AddIãmToObje˘
(
roŸ
, "t›ic", 
tmp
);

292 
tmp
 = 
	`cJSON_Cª©eNumbî
(
mesßge
->
qos
);

293 if(
tmp
 =
NULL
){

294 
	`cJSON_Dñëe
(
roŸ
);

295  
MOSQ_ERR_NOMEM
;

297 
	`cJSON_AddIãmToObje˘
(
roŸ
, "qos", 
tmp
);

299 
tmp
 = 
	`cJSON_Cª©eNumbî
(
mesßge
->
ªèö
);

300 if(
tmp
 =
NULL
){

301 
	`cJSON_Dñëe
(
roŸ
);

302  
MOSQ_ERR_NOMEM
;

304 
	`cJSON_AddIãmToObje˘
(
roŸ
, "ªèö", 
tmp
);

306 
tmp
 = 
	`cJSON_Cª©eNumbî
(
mesßge
->
∑ylﬂdÀn
);

307 if(
tmp
 =
NULL
){

308 
	`cJSON_Dñëe
(
roŸ
);

309  
MOSQ_ERR_NOMEM
;

311 
	`cJSON_AddIãmToObje˘
(
roŸ
, "∑ylﬂdÀn", 
tmp
);

313 if(
mesßge
->
qos
 > 0){

314 
tmp
 = 
	`cJSON_Cª©eNumbî
(
mesßge
->
mid
);

315 if(
tmp
 =
NULL
){

316 
	`cJSON_Dñëe
(
roŸ
);

317  
MOSQ_ERR_NOMEM
;

319 
	`cJSON_AddIãmToObje˘
(
roŸ
, "mid", 
tmp
);

323 if(
¥›îtõs
){

324 if(
	`js⁄_¥öt_¥›îtõs
(
roŸ
, 
¥›îtõs
)){

325 
	`cJSON_Dñëe
(
roŸ
);

326  
MOSQ_ERR_NOMEM
;

331 if(
esˇ≥d
){

332 if(
mesßge
->
∑ylﬂd
){

333 
tmp
 = 
	`cJSON_Cª©eSåög
(
mesßge
->
∑ylﬂd
);

335 
tmp
 = 
	`cJSON_Cª©eNuŒ
();

337 if(
tmp
 =
NULL
){

338 
	`cJSON_Dñëe
(
roŸ
);

339  
MOSQ_ERR_NOMEM
;

341 
	`cJSON_AddIãmToObje˘
(
roŸ
, "∑ylﬂd", 
tmp
);

343 
ªtu∫_∑r£_íd
 = 
NULL
;

344 if(
mesßge
->
∑ylﬂd
){

345 
tmp
 = 
	`cJSON_P¨£WôhO±s
(
mesßge
->
∑ylﬂd
, &
ªtu∫_∑r£_íd
, 
åue
);

346 if(
tmp
 =
NULL
 || 
ªtu∫_∑r£_íd
 !(*)
mesßge
->
∑ylﬂd
 + mesßge->
∑ylﬂdÀn
){

347 
	`cJSON_Dñëe
(
roŸ
);

348  
MOSQ_ERR_INVAL
;

351 
tmp
 = 
	`cJSON_Cª©eNuŒ
();

352 if(
tmp
 =
NULL
){

353 
	`cJSON_Dñëe
(
roŸ
);

354  
MOSQ_ERR_INVAL
;

357 
	`cJSON_AddIãmToObje˘
(
roŸ
, "∑ylﬂd", 
tmp
);

360 if(
¥ëty
){

361 
js⁄_°r
 = 
	`cJSON_Pröt
(
roŸ
);

363 
js⁄_°r
 = 
	`cJSON_PrötUnf‹m©ãd
(
roŸ
);

365 
	`cJSON_Dñëe
(
roŸ
);

366 if(
js⁄_°r
 =
NULL
){

367  
MOSQ_ERR_NOMEM
;

370 
	`Âuts
(
js⁄_°r
, 
°dout
);

371 
	`‰ì
(
js⁄_°r
);

373  
MOSQ_ERR_SUCCESS
;

375 
	`UNUSED
(
¥›îtõs
);

376 
	`UNUSED
(
¥ëty
);

378 
	`f‹m©_time_8601
(
ti
, 
ns
, 
buf
, (buf));

380 
	`¥ötf
("{\"t°\":\"%s\",\"t›ic\":\"%s\",\"qos\":%d,\"ªèö\":%d,\"∑ylﬂdÀn\":%d,", 
buf
, 
mesßge
->
t›ic
, mesßge->
qos
, mesßge->
ªèö
, mesßge->
∑ylﬂdÀn
);

381 if(
mesßge
->
qos
 > 0){

382 
	`¥ötf
("\"mid\":%d,", 
mesßge
->
mid
);

384 if(
esˇ≥d
){

385 
	`Âuts
("\"∑ylﬂd\":\"", 
°dout
);

386 
	`wrôe_js⁄_∑ylﬂd
(
mesßge
->
∑ylﬂd
, mesßge->
∑ylﬂdÀn
);

387 
	`Âuts
("\"}", 
°dout
);

389 
	`Âuts
("\"∑ylﬂd\":", 
°dout
);

390 
	`wrôe_∑ylﬂd
(
mesßge
->
∑ylﬂd
, mesßge->
∑ylﬂdÀn
, 0, 0, 0, 0, 0);

391 
	`Âuts
("}", 
°dout
);

394  
MOSQ_ERR_SUCCESS
;

396 
	}
}

399 
	$f‹m©ãd_¥öt_bœnk
(
∑d
, 
fõld_width
)

401 
i
;

402 
i
=0; i<
fõld_width
; i++){

403 
	`putch¨
(
∑d
);

405 
	}
}

408 
	$f‹m©ãd_¥öt_öt
(
vÆue
, 
Æign
, 
∑d
, 
fõld_width
)

410 if(
fõld_width
 == 0){

411 
	`¥ötf
("%d", 
vÆue
);

413 if(
Æign
 == '-'){

414 
	`¥ötf
("%-*d", 
fõld_width
, 
vÆue
);

416 if(
∑d
 == '0'){

417 
	`¥ötf
("%0*d", 
fõld_width
, 
vÆue
);

419 
	`¥ötf
("%*d", 
fõld_width
, 
vÆue
);

423 
	}
}

426 
	$f‹m©ãd_¥öt_°r
(c⁄° *
vÆue
, 
Æign
, 
fõld_width
, 
¥ecisi⁄
)

428 if(
fõld_width
 =0 && 
¥ecisi⁄
 == -1){

429 
	`Âuts
(
vÆue
, 
°dout
);

431 if(
¥ecisi⁄
 == -1){

432 if(
Æign
 == '-'){

433 
	`¥ötf
("%-*s", 
fõld_width
, 
vÆue
);

435 
	`¥ötf
("%*s", 
fõld_width
, 
vÆue
);

437 }if(
fõld_width
 == 0){

438 if(
Æign
 == '-'){

439 
	`¥ötf
("%-.*s", 
¥ecisi⁄
, 
vÆue
);

441 
	`¥ötf
("%.*s", 
¥ecisi⁄
, 
vÆue
);

444 if(
Æign
 == '-'){

445 
	`¥ötf
("%-*.*s", 
fõld_width
, 
¥ecisi⁄
, 
vÆue
);

447 
	`¥ötf
("%*.*s", 
fõld_width
, 
¥ecisi⁄
, 
vÆue
);

451 
	}
}

453 
	$f‹m©ãd_¥öt_≥r˚¡
(c⁄° 
mosq_c⁄fig
 *
lcfg
, c⁄° 
mosquôto_mesßge
 *
mesßge
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
, 
f‹m©
, 
Æign
, 
∑d
, 
fõld_width
, 
¥ecisi⁄
)

455 
tm
 *
ti
 = 
NULL
;

456 
ns
 = 0;

457 
buf
[100];

458 
rc
;

459 
uöt8_t
 
i8vÆue
;

460 
uöt16_t
 
i16vÆue
;

461 
uöt32_t
 
i32vÆue
;

462 *
bövÆue
 = 
NULL
, *
°∫ame
, *
°rvÆue
;

463 c⁄° 
mosquôto_¥›îty
 *
¥›
;

466 
f‹m©
){

468 
	`Âutc
('%', 
°dout
);

472 if(
	`mosquôto_¥›îty_ªad_öt16
(
¥›îtõs
, 
MQTT_PROP_TOPIC_ALIAS
, &
i16vÆue
, 
Ál£
)){

473 
	`f‹m©ãd_¥öt_öt
(
i16vÆue
, 
Æign
, 
∑d
, 
fõld_width
);

475 
	`f‹m©ãd_¥öt_bœnk
(
∑d
, 
fõld_width
);

480 if(
	`mosquôto_¥›îty_ªad_°rög
(
¥›îtõs
, 
MQTT_PROP_CONTENT_TYPE
, &
°rvÆue
, 
Ál£
)){

481 
	`f‹m©ãd_¥öt_°r
(
°rvÆue
, 
Æign
, 
fõld_width
, 
¥ecisi⁄
);

482 
	`‰ì
(
°rvÆue
);

484 
	`f‹m©ãd_¥öt_bœnk
(' ', 
fõld_width
);

489 if(
	`mosquôto_¥›îty_ªad_bö¨y
(
¥›îtõs
, 
MQTT_PROP_CORRELATION_DATA
, (**)&
bövÆue
, &
i16vÆue
, 
Ál£
)){

490 
	`fwrôe
(
bövÆue
, 1, 
i16vÆue
, 
°dout
);

491 
	`‰ì
(
bövÆue
);

496 if(
	`mosquôto_¥›îty_ªad_öt32
(
¥›îtõs
, 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
, &
i32vÆue
, 
Ál£
)){

497 
	`f‹m©ãd_¥öt_öt
(()
i32vÆue
, 
Æign
, 
∑d
, 
fõld_width
);

499 
	`f‹m©ãd_¥öt_bœnk
(
∑d
, 
fõld_width
);

504 if(
	`mosquôto_¥›îty_ªad_byã
(
¥›îtõs
, 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
, &
i8vÆue
, 
Ál£
)){

505 
	`f‹m©ãd_¥öt_öt
(
i8vÆue
, 
Æign
, 
∑d
, 
fõld_width
);

507 
	`f‹m©ãd_¥öt_bœnk
(
∑d
, 
fõld_width
);

512 if(!
ti
){

513 if(
	`gë_time
(&
ti
, &
ns
)){

514 
	`îr_¥ötf
(
lcfg
, "Error obtaining systemÅime.\n");

518 if(
	`°r·ime
(
buf
, 100, "%FT%T%z", 
ti
) != 0){

519 
	`f‹m©ãd_¥öt_°r
(
buf
, 
Æign
, 
fõld_width
, 
¥ecisi⁄
);

521 
	`f‹m©ãd_¥öt_bœnk
(' ', 
fõld_width
);

526 if(!
ti
){

527 if(
	`gë_time
(&
ti
, &
ns
)){

528 
	`îr_¥ötf
(
lcfg
, "Error obtaining systemÅime.\n");

532 if(
	`js⁄_¥öt
(
mesßge
, 
¥›îtõs
, 
ti
, ()
ns
, 
åue
, 
lcfg
->
¥ëty
Ë!
MOSQ_ERR_SUCCESS
){

533 
	`îr_¥ötf
(
lcfg
, "Error: Out of memory.\n");

539 if(!
ti
){

540 if(
	`gë_time
(&
ti
, &
ns
)){

541 
	`îr_¥ötf
(
lcfg
, "Error obtaining systemÅime.\n");

545 
rc
 = 
	`js⁄_¥öt
(
mesßge
, 
¥›îtõs
, 
ti
, ()
ns
, 
Ál£
, 
lcfg
->
¥ëty
);

546 if(
rc
 =
MOSQ_ERR_NOMEM
){

547 
	`îr_¥ötf
(
lcfg
, "Error: Out of memory.\n");

549 }if(
rc
 =
MOSQ_ERR_INVAL
){

550 
	`îr_¥ötf
(
lcfg
, "Eº‹: Mesßgê∑ylﬂd i†nŸ vÆid JSON o¿t›i¯%s.\n", 
mesßge
->
t›ic
);

556 
	`f‹m©ãd_¥öt_öt
(
mesßge
->
∑ylﬂdÀn
, 
Æign
, 
∑d
, 
fõld_width
);

560 
	`f‹m©ãd_¥öt_öt
(
mesßge
->
mid
, 
Æign
, 
∑d
, 
fõld_width
);

564 
°∫ame
 = 
NULL
;

565 
°rvÆue
 = 
NULL
;

566 
¥›
 = 
	`mosquôto_¥›îty_ªad_°rög_∑ú
(
¥›îtõs
, 
MQTT_PROP_USER_PROPERTY
, &
°∫ame
, &
°rvÆue
, 
Ál£
);

567 
¥›
){

568 
	`¥ötf
("%s:%s", 
°∫ame
, 
°rvÆue
);

569 
	`‰ì
(
°∫ame
);

570 
	`‰ì
(
°rvÆue
);

571 
°∫ame
 = 
NULL
;

572 
°rvÆue
 = 
NULL
;

574 
¥›
 = 
	`mosquôto_¥›îty_ªad_°rög_∑ú
’r›, 
MQTT_PROP_USER_PROPERTY
, &
°∫ame
, &
°rvÆue
, 
åue
);

575 if(
¥›
){

576 
	`Âutc
(' ', 
°dout
);

579 
	`‰ì
(
°∫ame
);

580 
	`‰ì
(
°rvÆue
);

584 
	`wrôe_∑ylﬂd
(
mesßge
->
∑ylﬂd
, mesßge->
∑ylﬂdÀn
, 0, 
Æign
, 
∑d
, 
fõld_width
, 
¥ecisi⁄
);

588 
	`Âutc
(
mesßge
->
qos
 + 48, 
°dout
);

592 if(
	`mosquôto_¥›îty_ªad_°rög
(
¥›îtõs
, 
MQTT_PROP_RESPONSE_TOPIC
, &
°rvÆue
, 
Ál£
)){

593 
	`f‹m©ãd_¥öt_°r
(
°rvÆue
, 
Æign
, 
fõld_width
, 
¥ecisi⁄
);

594 
	`‰ì
(
°rvÆue
);

599 if(
mesßge
->
ªèö
){

600 
	`Âutc
('1', 
°dout
);

602 
	`Âutc
('0', 
°dout
);

607 if(
	`mosquôto_¥›îty_ªad_v¨öt
(
¥›îtõs
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, &
i32vÆue
, 
Ál£
)){

608 
	`f‹m©ãd_¥öt_öt
(()
i32vÆue
, 
Æign
, 
∑d
, 
fõld_width
);

610 
	`f‹m©ãd_¥öt_bœnk
(
∑d
, 
fõld_width
);

615 
	`f‹m©ãd_¥öt_°r
(
mesßge
->
t›ic
, 
Æign
, 
fõld_width
, 
¥ecisi⁄
);

619 if(!
ti
){

620 if(
	`gë_time
(&
ti
, &
ns
)){

621 
	`îr_¥ötf
(
lcfg
, "Error obtaining systemÅime.\n");

625 if(
	`°r·ime
(
buf
, 100, "%s", 
ti
) != 0){

626 
	`¥ötf
("%s.%09ld", 
buf
, 
ns
);

631 
	`wrôe_∑ylﬂd
(
mesßge
->
∑ylﬂd
, mesßge->
∑ylﬂdÀn
, 1, 
Æign
, 
∑d
, 
fõld_width
, 
¥ecisi⁄
);

635 
	`wrôe_∑ylﬂd
(
mesßge
->
∑ylﬂd
, mesßge->
∑ylﬂdÀn
, 2, 
Æign
, 
∑d
, 
fõld_width
, 
¥ecisi⁄
);

638 
	}
}

641 
	$f‹m©ãd_¥öt
(c⁄° 
mosq_c⁄fig
 *
lcfg
, c⁄° 
mosquôto_mesßge
 *
mesßge
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

643 
size_t
 
Àn
;

644 
size_t
 
i
;

645 
tm
 *
ti
 = 
NULL
;

646 
ns
 = 0;

647 
°rf
[3] = {0, 0 ,0};

648 
buf
[100];

649 
Æign
, 
∑d
;

650 
fõld_width
, 
¥ecisi⁄
;

652 
Àn
 = 
	`°æí
(
lcfg
->
f‹m©
);

654 
i
=0; i<
Àn
; i++){

655 if(
lcfg
->
f‹m©
[
i
] == '%'){

656 
Æign
 = 0;

657 
∑d
 = ' ';

658 
fõld_width
 = 0;

659 
¥ecisi⁄
 = -1;

660 if(
i
 < 
Àn
-1){

661 
i
++;

663 if(
lcfg
->
f‹m©
[
i
] == '-'){

664 
Æign
 = 
lcfg
->
f‹m©
[
i
];

665 if(
i
 < 
Àn
-1){

666 
i
++;

672 if(
lcfg
->
f‹m©
[
i
] == '0'){

673 
∑d
 = '0';

674 if(
i
 < 
Àn
-1){

675 
i
++;

679 
i
 < 
Àn
-1 && 
lcfg
->
f‹m©
[i] >= '0' &&Ücfg->format[i] <= '9'){

680 
fõld_width
 *= 10;

681 
fõld_width
 +
lcfg
->
f‹m©
[
i
]-'0';

682 
i
++;

685 if(
lcfg
->
f‹m©
[
i
] == '.'){

686 if(
i
 < 
Àn
-1){

687 
i
++;

688 
¥ecisi⁄
 = 0;

689 
i
 < 
Àn
-1 && 
lcfg
->
f‹m©
[i] >= '0' &&Ücfg->format[i] <= '9'){

690 
¥ecisi⁄
 *= 10;

691 
¥ecisi⁄
 +
lcfg
->
f‹m©
[
i
]-'0';

692 
i
++;

697 if(
i
 < 
Àn
){

698 
	`f‹m©ãd_¥öt_≥r˚¡
(
lcfg
, 
mesßge
, 
¥›îtõs
,Ücfg->
f‹m©
[
i
], 
Æign
, 
∑d
, 
fõld_width
, 
¥ecisi⁄
);

701 }if(
lcfg
->
f‹m©
[
i
] == '@'){

702 if(
i
 < 
Àn
-1){

703 
i
++;

704 if(
lcfg
->
f‹m©
[
i
] == '@'){

705 
	`Âutc
('@', 
°dout
);

707 if(!
ti
){

708 if(
	`gë_time
(&
ti
, &
ns
)){

709 
	`îr_¥ötf
(
lcfg
, "Error obtaining systemÅime.\n");

714 
°rf
[0] = '%';

715 
°rf
[1] = 
lcfg
->
f‹m©
[
i
];

716 
°rf
[2] = 0;

718 if(
lcfg
->
f‹m©
[
i
] == 'N'){

719 
	`¥ötf
("%09ld", 
ns
);

721 if(
	`°r·ime
(
buf
, 100, 
°rf
, 
ti
) != 0){

722 
	`Âuts
(
buf
, 
°dout
);

727 }if(
lcfg
->
f‹m©
[
i
] == '\\'){

728 if(
i
 < 
Àn
-1){

729 
i
++;

730 
lcfg
->
f‹m©
[
i
]){

732 
	`Âutc
('\\', 
°dout
);

736 
	`Âutc
('\0', 
°dout
);

740 
	`Âutc
('\a', 
°dout
);

744 
	`Âutc
('\033', 
°dout
);

748 
	`Âutc
('\n', 
°dout
);

752 
	`Âutc
('\r', 
°dout
);

756 
	`Âutc
('\t', 
°dout
);

760 
	`Âutc
('\v', 
°dout
);

765 
	`Âutc
(
lcfg
->
f‹m©
[
i
], 
°dout
);

768 if(
lcfg
->
eﬁ
){

769 
	`Âutc
('\n', 
°dout
);

771 
	`fÊush
(
°dout
);

772 
	}
}

775 
	$ouçut_öô
()

777 #i‚de‡
WIN32


778 
tm
 *
ti
 = 
NULL
;

779 
ns
;

781 if(!
	`gë_time
(&
ti
, &
ns
)){

782 
	`§™dom
(()
ns
);

786 
	`_£tmode
(
	`_fûío
(
°dout
), 
_O_BINARY
);

788 
	}
}

791 
	$¥öt_mesßge
(
mosq_c⁄fig
 *
lcfg
, c⁄° 
mosquôto_mesßge
 *
mesßge
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

793 #ifde‡
WIN32


794 
r
 = 0;

796 
r
 = 0;

799 if(
lcfg
->
øndom_fûãr
 < 10000){

800 #ifde‡
WIN32


801 
	`ønd_s
(&
r
);

803 
r
 = 
	`øndom
();

805 if(()(
r
%10000Ë>
lcfg
->
øndom_fûãr
){

809 if(
lcfg
->
f‹m©
){

810 
	`f‹m©ãd_¥öt
(
lcfg
, 
mesßge
, 
¥›îtõs
);

811 }if(
lcfg
->
vîbo£
){

812 if(
mesßge
->
∑ylﬂdÀn
){

813 
	`¥ötf
("%†", 
mesßge
->
t›ic
);

814 
	`wrôe_∑ylﬂd
(
mesßge
->
∑ylﬂd
, mesßge->
∑ylﬂdÀn
, 
Ál£
, 0, 0, 0, 0);

815 if(
lcfg
->
eﬁ
){

816 
	`¥ötf
("\n");

819 if(
lcfg
->
eﬁ
){

820 
	`¥ötf
("%†“uŒ)\n", 
mesßge
->
t›ic
);

823 
	`fÊush
(
°dout
);

825 if(
mesßge
->
∑ylﬂdÀn
){

826 
	`wrôe_∑ylﬂd
(
mesßge
->
∑ylﬂd
, mesßge->
∑ylﬂdÀn
, 
Ál£
, 0, 0, 0, 0);

827 if(
lcfg
->
eﬁ
){

828 
	`¥ötf
("\n");

830 
	`fÊush
(
°dout
);

833 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/client/sub_client_output.h

19 #i‚de‡
SUB_CLIENT_OUTPUT_H


20 
	#SUB_CLIENT_OUTPUT_H


	)

22 
	~"mosquôto.h
"

23 
	~"˛õ¡_sh¨ed.h
"

25 
ouçut_öô
();

26 
¥öt_mesßge
(
mosq_c⁄fig
 *
cfg
, c⁄° 
mosquôto_mesßge
 *
mesßge
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/config.h

1 #i‚de‡
CONFIG_H


2 
	#CONFIG_H


	)

7 #ifde‡
__APPLE__


8 
	#__DARWIN_C_SOURCE


	)

9 #ñi‡
deföed
(
__FªeBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__SYMBIAN32__
)

10 
	#_XOPEN_SOURCE
 700

	)

11 
	#__BSD_VISIBLE
 1

	)

12 
	#HAVE_NETINET_IN_H


	)

13 #ñi‡
deföed
(
__QNX__
)

14 
	#_XOPEN_SOURCE
 600

	)

15 
	#__BSD_VISIBLE
 1

	)

16 
	#HAVE_NETINET_IN_H


	)

18 
	#_XOPEN_SOURCE
 700

	)

19 
	#_DEFAULT_SOURCE
 1

	)

20 
	#_POSIX_C_SOURCE
 200809L

	)

24 #i‚de‡
_GNU_SOURCE


25 
	#_GNU_SOURCE


	)

28 
	#OPENSSL_LOAD_CONF


	)

33 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1900

34 
	#¢¥ötf
 
•rötf_s


	)

35 
	#EPROTO
 
ECONNABORTED


	)

36 #i‚de‡
ECONNABORTED


37 
	#ECONNABORTED
 
WSAECONNABORTED


	)

39 #i‚de‡
ENOTCONN


40 
	#ENOTCONN
 
WSAENOTCONN


	)

42 #i‚de‡
ECONNREFUSED


43 
	#ECONNREFUSED
 
WSAECONNREFUSED


	)

47 #ifde‡
WIN32


48 #i‚de‡
°rˇ£cmp


49 
	#°rˇ£cmp
 
°rcmpi


	)

51 
	#°πok_r
 
°πok_s


	)

52 
	#°ªº‹_r
(
e
, 
b
, 
l
Ë
	`°ªº‹_s
(b,Ü,É)

	)

56 
	#uthash_mÆloc
(
sz
Ë
	`mosquôto_mÆloc
(sz)

	)

57 
	#uthash_‰ì
(
±r
,
sz
Ë
	`mosquôto_‰ì
’å)

	)

60 #ifde‡
WITH_TLS


61 
	~<›ís¶/›ís¶c⁄f.h
>

62 #i‡
deföed
(
WITH_TLS_PSK
Ë&& !deföed(
OPENSSL_NO_PSK
)

63 
	#FINAL_WITH_TLS_PSK


	)

68 #ifde‡
__COVERITY__


69 
	~<°döt.h
>

71 
	#_Flﬂt32
 
uöt32_t


	)

72 
	#_Flﬂt32x
 
uöt32_t


	)

73 
	#_Flﬂt64
 
uöt64_t


	)

74 
	#_Flﬂt64x
 
uöt64_t


	)

75 
	#_Flﬂt128
 
uöt64_t


	)

78 
	#UNUSED
(
A
Ë()(A)

	)

81 #i‚de‡
ANDROID


82 
	#HAVE_PTHREAD_CANCEL


	)

85 #ifde‡
WITH_CJSON


86 
	~<cjs⁄/cJSON.h
>

87 
	#CJSON_VERSION_FULL
 (
CJSON_VERSION_MAJOR
*1000000+
CJSON_VERSION_MINOR
*1000+
CJSON_VERSION_PATCH
)

	)

	@open_source_lib/mosquitto/mosquitto-2.0.15/deps/uthash.h

24 #i‚de‡
UTHASH_H


25 
	#UTHASH_H


	)

27 
	#UTHASH_VERSION
 2.1.0

	)

29 
	~<°rög.h
>

30 
	~<°ddef.h
>

31 
	~<°dlib.h
>

37 #i‡!
deföed
(
DECLTYPE
Ë&& !deföed(
NO_DECLTYPE
)

38 #i‡
deföed
(
_MSC_VER
)

39 #i‡
_MSC_VER
 >1600 && 
deföed
(
__˝lu•lus
)

40 
	#DECLTYPE
(
x
Ë(
	`de˛ty≥
(x))

	)

42 
	#NO_DECLTYPE


	)

44 #ñi‡
deföed
(
__BORLANDC__
Ë|| deföed(
__ICCARM__
Ë|| deföed(
__LCC__
Ë|| deföed(
__WATCOMC__
)

45 
	#NO_DECLTYPE


	)

47 
	#DECLTYPE
(
x
Ë(
	`__ty≥of
(x))

	)

51 #ifde‡
NO_DECLTYPE


52 
	#DECLTYPE
(
x
)

	)

53 
	#DECLTYPE_ASSIGN
(
d°
,
§c
) \

55 **
_da_d°
 = (**)(&(
d°
)); \

56 *
_da_d°
 = (*)(
§c
); \

57 } 0)

	)

59 
	#DECLTYPE_ASSIGN
(
d°
,
§c
) \

61 (
d°
Ë
	`DECLTYPE
(d°)(
§c
); \

62 } 0)

	)

66 #i‡
deföed
(
_WIN32
)

67 #i‡
deföed
(
_MSC_VER
) && _MSC_VER >= 1600

68 
	~<°döt.h
>

69 #ñi‡
deföed
(
__WATCOMC__
Ë|| deföed(
__MINGW32__
Ë|| deföed(
__CYGWIN__
)

70 
	~<°döt.h
>

72 
	tuöt32_t
;

73 
	tuöt8_t
;

75 #ñi‡
deföed
(
__GNUC__
Ë&& !deföed(
__VXWORKS__
)

76 
	~<°döt.h
>

78 
	tuöt32_t
;

79 
	tuöt8_t
;

82 #i‚de‡
uthash_mÆloc


83 
	#uthash_mÆloc
(
sz
Ë
	`mÆloc
(szË

	)

85 #i‚de‡
uthash_‰ì


86 
	#uthash_‰ì
(
±r
,
sz
Ë
	`‰ì
’åË

	)

88 #i‚de‡
uthash_bzîo


89 
	#uthash_bzîo
(
a
,
n
Ë
	`mem£t
◊,'\0',n)

	)

91 #i‚de‡
uthash_°æí


92 
	#uthash_°æí
(
s
Ë
	`°æí
(s)

	)

95 #ifde‡
uthash_memcmp


99 
	#uthash_memcmp
(
a
,
b
,
n
Ë
	`memcmp
◊,b,n)

	)

102 #i‚de‡
HASH_KEYCMP


103 
	#HASH_KEYCMP
(
a
,
b
,
n
Ë
	`uthash_memcmp
◊,b,n)

	)

106 #i‚de‡
uthash_n€x∑nd_fyi


107 
	#uthash_n€x∑nd_fyi
(
tbl
Ë

	)

109 #i‚de‡
uthash_ex∑nd_fyi


110 
	#uthash_ex∑nd_fyi
(
tbl
Ë

	)

113 #i‚de‡
HASH_NONFATAL_OOM


114 
	#HASH_NONFATAL_OOM
 0

	)

117 #i‡
HASH_NONFATAL_OOM


120 #i‚de‡
uthash_n⁄Áèl_oom


121 
	#uthash_n⁄Áèl_oom
(
obj
Ëdÿ{} 0Ë

	)

124 
	#HASH_RECORD_OOM
(
oomed
Ëdÿ{ (oomedË1; } 0)

	)

125 
	#IF_HASH_NONFATAL_OOM
(
x
Ë
	)
x

130 #i‚de‡
uthash_Áèl


131 
	#uthash_Áèl
(
msg
Ë
	`exô
(-1Ë

	)

134 
	#HASH_RECORD_OOM
(
oomed
Ë
	`uthash_Áèl
("ouào‡mem‹y")

	)

135 
	#IF_HASH_NONFATAL_OOM
(
x
)

	)

140 
	#HASH_INITIAL_NUM_BUCKETS
 32U

	)

141 
	#HASH_INITIAL_NUM_BUCKETS_LOG2
 5U

	)

142 
	#HASH_BKT_CAPACITY_THRESH
 10U

	)

145 
	#ELMT_FROM_HH
(
tbl
,
hhp
Ë((*)(((*)(hhp)Ë- (—bl)->
hho
)))

	)

147 
	#HH_FROM_ELMT
(
tbl
,
ñp
Ë((
UT_hash_h™dÀ
 *)(((*)”Õ)Ë+ (—bl)->
hho
)))

	)

149 
	#HASH_ROLLBACK_BKT
(
hh
, 
hód
, 
ôem±rhh
) \

151 
UT_hash_h™dÀ
 *
_hd_hh_ôem
 = (
ôem±rhh
); \

152 
_hd_bkt
; \

153 
	`HASH_TO_BKT
(
_hd_hh_ôem
->
hashv
, (
hód
)->
hh
.
tbl
->
num_buckës
, 
_hd_bkt
); \

154 (
hód
)->
hh
.
tbl
->
buckës
[
_hd_bkt
].
cou¡
++; \

155 
_hd_hh_ôem
->
hh_√xt
 = 
NULL
; \

156 
_hd_hh_ôem
->
hh_¥ev
 = 
NULL
; \

157 } 0)

	)

159 
	#HASH_VALUE
(
key±r
,
keyÀn
,
hashv
) \

161 
	`HASH_FCN
(
key±r
, 
keyÀn
, 
hashv
); \

162 } 0)

	)

164 
	#HASH_FIND_BYHASHVALUE
(
hh
,
hód
,
key±r
,
keyÀn
,
hashvÆ
,
out
) \

166 (
out
Ë
NULL
; \

167 i‡(
hód
) { \

168 
_hf_bkt
; \

169 
	`HASH_TO_BKT
(
hashvÆ
, (
hód
)->
hh
.
tbl
->
num_buckës
, 
_hf_bkt
); \

170 i‡(
	`HASH_BLOOM_TEST
((
hód
)->
hh
.
tbl
, 
hashvÆ
) != 0) { \

171 
	`HASH_FIND_IN_BKT
((
hód
)->
hh
.
tbl
, hh, (hód)->hh.tbl->
buckës
[ 
_hf_bkt
 ], 
key±r
, 
keyÀn
, 
hashvÆ
, 
out
); \

174 } 0)

	)

176 
	#HASH_FIND
(
hh
,
hód
,
key±r
,
keyÀn
,
out
) \

178 
_hf_hashv
; \

179 
	`HASH_VALUE
(
key±r
, 
keyÀn
, 
_hf_hashv
); \

180 
	`HASH_FIND_BYHASHVALUE
(
hh
, 
hód
, 
key±r
, 
keyÀn
, 
_hf_hashv
, 
out
); \

181 } 0)

	)

183 #ifde‡
HASH_BLOOM


184 
	#HASH_BLOOM_BITLEN
 (1UL << 
HASH_BLOOM
)

	)

185 
	#HASH_BLOOM_BYTELEN
 (
HASH_BLOOM_BITLEN
/8ULË+ (((HASH_BLOOM_BITLEN%8UL)!=0ULË? 1UL : 0UL)

	)

186 
	#HASH_BLOOM_MAKE
(
tbl
,
oomed
) \

188 (
tbl
)->
bloom_nbôs
 = 
HASH_BLOOM
; \

189 (
tbl
)->
bloom_bv
 = (
uöt8_t
*)
	`uthash_mÆloc
(
HASH_BLOOM_BYTELEN
); \

190 i‡(!(
tbl
)->
bloom_bv
) { \

191 
	`HASH_RECORD_OOM
(
oomed
); \

193 
	`uthash_bzîo
((
tbl
)->
bloom_bv
, 
HASH_BLOOM_BYTELEN
); \

194 (
tbl
)->
bloom_sig
 = 
HASH_BLOOM_SIGNATURE
; \

196 } 0)

	)

198 
	#HASH_BLOOM_FREE
(
tbl
) \

200 
	`uthash_‰ì
((
tbl
)->
bloom_bv
, 
HASH_BLOOM_BYTELEN
); \

201 } 0)

	)

203 
	#HASH_BLOOM_BITSET
(
bv
,
idx
Ë(bv[(idx)/8U] |(1U << ((idx)%8U)))

	)

204 
	#HASH_BLOOM_BITTEST
(
bv
,
idx
Ë(bv[(idx)/8U] & (1U << ((idx)%8U)))

	)

206 
	#HASH_BLOOM_ADD
(
tbl
,
hashv
) \

207 
	`HASH_BLOOM_BITSET
((
tbl
)->
bloom_bv
, ((
hashv
Ë& (
uöt32_t
)((1UL << (tbl)->
bloom_nbôs
Ë- 1U)))

	)

209 
	#HASH_BLOOM_TEST
(
tbl
,
hashv
) \

210 
	`HASH_BLOOM_BITTEST
((
tbl
)->
bloom_bv
, ((
hashv
Ë& (
uöt32_t
)((1UL << (tbl)->
bloom_nbôs
Ë- 1U)))

	)

213 
	#HASH_BLOOM_MAKE
(
tbl
,
oomed
)

	)

214 
	#HASH_BLOOM_FREE
(
tbl
)

	)

215 
	#HASH_BLOOM_ADD
(
tbl
,
hashv
)

	)

216 
	#HASH_BLOOM_TEST
(
tbl
,
hashv
Ë(1)

	)

217 
	#HASH_BLOOM_BYTELEN
 0U

	)

220 
	#HASH_MAKE_TABLE
(
hh
,
hód
,
oomed
) \

222 (
hód
)->
hh
.
tbl
 = (
UT_hash_èbÀ
*)
	`uthash_mÆloc
((UT_hash_table)); \

223 i‡(!(
hód
)->
hh
.
tbl
) { \

224 
	`HASH_RECORD_OOM
(
oomed
); \

226 
	`uthash_bzîo
((
hód
)->
hh
.
tbl
, (
UT_hash_èbÀ
)); \

227 (
hód
)->
hh
.
tbl
->
èû
 = &((head)->hh); \

228 (
hód
)->
hh
.
tbl
->
num_buckës
 = 
HASH_INITIAL_NUM_BUCKETS
; \

229 (
hód
)->
hh
.
tbl
->
log2_num_buckës
 = 
HASH_INITIAL_NUM_BUCKETS_LOG2
; \

230 (
hód
)->
hh
.
tbl
->
hho
 = (*)(&(head)->hh) - (*)(head); \

231 (
hód
)->
hh
.
tbl
->
buckës
 = (
UT_hash_buckë
*)
	`uthash_mÆloc
( \

232 
HASH_INITIAL_NUM_BUCKETS
 * (
UT_hash_buckë
)); \

233 (
hód
)->
hh
.
tbl
->
sig«tuª
 = 
HASH_SIGNATURE
; \

234 i‡(!(
hód
)->
hh
.
tbl
->
buckës
) { \

235 
	`HASH_RECORD_OOM
(
oomed
); \

236 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
, (
UT_hash_èbÀ
)); \

238 
	`uthash_bzîo
((
hód
)->
hh
.
tbl
->
buckës
, \

239 
HASH_INITIAL_NUM_BUCKETS
 * (
UT_hash_buckë
)); \

240 
	`HASH_BLOOM_MAKE
((
hód
)->
hh
.
tbl
, 
oomed
); \

241 
	`IF_HASH_NONFATAL_OOM
( \

242 i‡(
oomed
) { \

243 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
->
buckës
, \

244 
HASH_INITIAL_NUM_BUCKETS
*(
UT_hash_buckë
)); \

245 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
, (
UT_hash_èbÀ
)); \

250 } 0)

	)

252 
	#HASH_REPLACE_BYHASHVALUE_INORDER
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
hashvÆ
,
add
,
ª∂a˚d
,
cmpf˙
) \

254 (
ª∂a˚d
Ë
NULL
; \

255 
	`HASH_FIND_BYHASHVALUE
(
hh
, 
hód
, &((
add
)->
fõld«me
), 
keyÀn_ö
, 
hashvÆ
, 
ª∂a˚d
); \

256 i‡(
ª∂a˚d
) { \

257 
	`HASH_DELETE
(
hh
, 
hód
, 
ª∂a˚d
); \

259 
	`HASH_ADD_KEYPTR_BYHASHVALUE_INORDER
(
hh
, 
hód
, &((
add
)->
fõld«me
), 
keyÀn_ö
, 
hashvÆ
,ádd, 
cmpf˙
); \

260 } 0)

	)

262 
	#HASH_REPLACE_BYHASHVALUE
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
hashvÆ
,
add
,
ª∂a˚d
) \

264 (
ª∂a˚d
Ë
NULL
; \

265 
	`HASH_FIND_BYHASHVALUE
(
hh
, 
hód
, &((
add
)->
fõld«me
), 
keyÀn_ö
, 
hashvÆ
, 
ª∂a˚d
); \

266 i‡(
ª∂a˚d
) { \

267 
	`HASH_DELETE
(
hh
, 
hód
, 
ª∂a˚d
); \

269 
	`HASH_ADD_KEYPTR_BYHASHVALUE
(
hh
, 
hód
, &((
add
)->
fõld«me
), 
keyÀn_ö
, 
hashvÆ
,ádd); \

270 } 0)

	)

272 
	#HASH_REPLACE
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
add
,
ª∂a˚d
) \

274 
_hr_hashv
; \

275 
	`HASH_VALUE
(&((
add
)->
fõld«me
), 
keyÀn_ö
, 
_hr_hashv
); \

276 
	`HASH_REPLACE_BYHASHVALUE
(
hh
, 
hód
, 
fõld«me
, 
keyÀn_ö
, 
_hr_hashv
, 
add
, 
ª∂a˚d
); \

277 } 0)

	)

279 
	#HASH_REPLACE_INORDER
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
add
,
ª∂a˚d
,
cmpf˙
) \

281 
_hr_hashv
; \

282 
	`HASH_VALUE
(&((
add
)->
fõld«me
), 
keyÀn_ö
, 
_hr_hashv
); \

283 
	`HASH_REPLACE_BYHASHVALUE_INORDER
(
hh
, 
hód
, 
fõld«me
, 
keyÀn_ö
, 
_hr_hashv
, 
add
, 
ª∂a˚d
, 
cmpf˙
); \

284 } 0)

	)

286 
	#HASH_APPEND_LIST
(
hh
, 
hód
, 
add
) \

288 (
add
)->
hh
.
√xt
 = 
NULL
; \

289 (
add
)->
hh
.
¥ev
 = 
	`ELMT_FROM_HH
((
hód
)->hh.
tbl
, (hód)->hh.tbl->
èû
); \

290 (
hód
)->
hh
.
tbl
->
èû
->
√xt
 = (
add
); \

291 (
hód
)->
hh
.
tbl
->
èû
 = &((
add
)->hh); \

292 } 0)

	)

294 
	#HASH_AKBI_INNER_LOOP
(
hh
,
hód
,
add
,
cmpf˙
) \

297 i‡(
	`cmpf˙
(
	`DECLTYPE
(
hód
)(
_hs_ôî
), 
add
) > 0) { \

300 } (
_hs_ôî
 = 
	`HH_FROM_ELMT
((
hód
)->
hh
.
tbl
, _hs_ôî)->
√xt
)); \

301 } 0)

	)

303 #ifde‡
NO_DECLTYPE


304 #unde‡
HASH_AKBI_INNER_LOOP


305 
	#HASH_AKBI_INNER_LOOP
(
hh
,
hód
,
add
,
cmpf˙
) \

307 *
_hs_ßved_hód
 = (*)(
hód
); \

309 
	`DECLTYPE_ASSIGN
(
hód
, 
_hs_ôî
); \

310 i‡(
	`cmpf˙
(
hód
, 
add
) > 0) { \

311 
	`DECLTYPE_ASSIGN
(
hód
, 
_hs_ßved_hód
); \

314 
	`DECLTYPE_ASSIGN
(
hód
, 
_hs_ßved_hód
); \

315 } (
_hs_ôî
 = 
	`HH_FROM_ELMT
((
hód
)->
hh
.
tbl
, _hs_ôî)->
√xt
)); \

316 } 0)

	)

319 #i‡
HASH_NONFATAL_OOM


321 
	#HASH_ADD_TO_TABLE
(
hh
,
hód
,
key±r
,
keyÀn_ö
,
hashvÆ
,
add
,
oomed
) \

323 i‡(!(
oomed
)) { \

324 
_ha_bkt
; \

325 (
hód
)->
hh
.
tbl
->
num_ôems
++; \

326 
	`HASH_TO_BKT
(
hashvÆ
, (
hód
)->
hh
.
tbl
->
num_buckës
, 
_ha_bkt
); \

327 
	`HASH_ADD_TO_BKT
((
hód
)->
hh
.
tbl
->
buckës
[
_ha_bkt
], hh, &(
add
)->hh, 
oomed
); \

328 i‡(
oomed
) { \

329 
	`HASH_ROLLBACK_BKT
(
hh
, 
hód
, &(
add
)->hh); \

330 
	`HASH_DELETE_HH
(
hh
, 
hód
, &(
add
)->hh); \

331 (
add
)->
hh
.
tbl
 = 
NULL
; \

332 
	`uthash_n⁄Áèl_oom
(
add
); \

334 
	`HASH_BLOOM_ADD
((
hód
)->
hh
.
tbl
, 
hashvÆ
); \

335 
	`HASH_EMIT_KEY
(
hh
, 
hód
, 
key±r
, 
keyÀn_ö
); \

338 (
add
)->
hh
.
tbl
 = 
NULL
; \

339 
	`uthash_n⁄Áèl_oom
(
add
); \

341 } 0)

	)

345 
	#HASH_ADD_TO_TABLE
(
hh
,
hód
,
key±r
,
keyÀn_ö
,
hashvÆ
,
add
,
oomed
) \

347 
_ha_bkt
; \

348 (
hód
)->
hh
.
tbl
->
num_ôems
++; \

349 
	`HASH_TO_BKT
(
hashvÆ
, (
hód
)->
hh
.
tbl
->
num_buckës
, 
_ha_bkt
); \

350 
	`HASH_ADD_TO_BKT
((
hód
)->
hh
.
tbl
->
buckës
[
_ha_bkt
], hh, &(
add
)->hh, 
oomed
); \

351 
	`HASH_BLOOM_ADD
((
hód
)->
hh
.
tbl
, 
hashvÆ
); \

352 
	`HASH_EMIT_KEY
(
hh
, 
hód
, 
key±r
, 
keyÀn_ö
); \

353 } 0)

	)

358 
	#HASH_ADD_KEYPTR_BYHASHVALUE_INORDER
(
hh
,
hód
,
key±r
,
keyÀn_ö
,
hashvÆ
,
add
,
cmpf˙
) \

360 
	`IF_HASH_NONFATAL_OOM
–
_ha_oomed
 = 0; ) \

361 (
add
)->
hh
.
hashv
 = (
hashvÆ
); \

362 (
add
)->
hh
.
key
 = (*Ë(
key±r
); \

363 (
add
)->
hh
.
keyÀn
 = (Ë(
keyÀn_ö
); \

364 i‡(!(
hód
)) { \

365 (
add
)->
hh
.
√xt
 = 
NULL
; \

366 (
add
)->
hh
.
¥ev
 = 
NULL
; \

367 
	`HASH_MAKE_TABLE
(
hh
, 
add
, 
_ha_oomed
); \

368 
	`IF_HASH_NONFATAL_OOM
–i‡(!
_ha_oomed
) { ) \

369 (
hód
Ë(
add
); \

370 
	`IF_HASH_NONFATAL_OOM
( } ) \

372 *
_hs_ôî
 = (
hód
); \

373 (
add
)->
hh
.
tbl
 = (
hód
)->hh.tbl; \

374 
	`HASH_AKBI_INNER_LOOP
(
hh
, 
hód
, 
add
, 
cmpf˙
); \

375 i‡(
_hs_ôî
) { \

376 (
add
)->
hh
.
√xt
 = 
_hs_ôî
; \

377 i‡(((
add
)->
hh
.
¥ev
 = 
	`HH_FROM_ELMT
((
hód
)->hh.
tbl
, 
_hs_ôî
)->prev)) { \

378 
	`HH_FROM_ELMT
((
hód
)->
hh
.
tbl
, (
add
)->hh.
¥ev
)->
√xt
 = (add); \

380 (
hód
Ë(
add
); \

382 
	`HH_FROM_ELMT
((
hód
)->
hh
.
tbl
, 
_hs_ôî
)->
¥ev
 = (
add
); \

384 
	`HASH_APPEND_LIST
(
hh
, 
hód
, 
add
); \

387 
	`HASH_ADD_TO_TABLE
(
hh
, 
hód
, 
key±r
, 
keyÀn_ö
, 
hashvÆ
, 
add
, 
_ha_oomed
); \

388 
	`HASH_FSCK
(
hh
, 
hód
, "HASH_ADD_KEYPTR_BYHASHVALUE_INORDER"); \

389 } 0)

	)

391 
	#HASH_ADD_KEYPTR_INORDER
(
hh
,
hód
,
key±r
,
keyÀn_ö
,
add
,
cmpf˙
) \

393 
_hs_hashv
; \

394 
	`HASH_VALUE
(
key±r
, 
keyÀn_ö
, 
_hs_hashv
); \

395 
	`HASH_ADD_KEYPTR_BYHASHVALUE_INORDER
(
hh
, 
hód
, 
key±r
, 
keyÀn_ö
, 
_hs_hashv
, 
add
, 
cmpf˙
); \

396 } 0)

	)

398 
	#HASH_ADD_BYHASHVALUE_INORDER
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
hashvÆ
,
add
,
cmpf˙
) \

399 
	`HASH_ADD_KEYPTR_BYHASHVALUE_INORDER
(
hh
, 
hód
, &((
add
)->
fõld«me
), 
keyÀn_ö
, 
hashvÆ
,ádd, 
cmpf˙
)

	)

401 
	#HASH_ADD_INORDER
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
add
,
cmpf˙
) \

402 
	`HASH_ADD_KEYPTR_INORDER
(
hh
, 
hód
, &((
add
)->
fõld«me
), 
keyÀn_ö
,ádd, 
cmpf˙
)

	)

404 
	#HASH_ADD_KEYPTR_BYHASHVALUE
(
hh
,
hód
,
key±r
,
keyÀn_ö
,
hashvÆ
,
add
) \

406 
	`IF_HASH_NONFATAL_OOM
–
_ha_oomed
 = 0; ) \

407 (
add
)->
hh
.
hashv
 = (
hashvÆ
); \

408 (
add
)->
hh
.
key
 = (*Ë(
key±r
); \

409 (
add
)->
hh
.
keyÀn
 = (Ë(
keyÀn_ö
); \

410 i‡(!(
hód
)) { \

411 (
add
)->
hh
.
√xt
 = 
NULL
; \

412 (
add
)->
hh
.
¥ev
 = 
NULL
; \

413 
	`HASH_MAKE_TABLE
(
hh
, 
add
, 
_ha_oomed
); \

414 
	`IF_HASH_NONFATAL_OOM
–i‡(!
_ha_oomed
) { ) \

415 (
hód
Ë(
add
); \

416 
	`IF_HASH_NONFATAL_OOM
( } ) \

418 (
add
)->
hh
.
tbl
 = (
hód
)->hh.tbl; \

419 
	`HASH_APPEND_LIST
(
hh
, 
hód
, 
add
); \

421 
	`HASH_ADD_TO_TABLE
(
hh
, 
hód
, 
key±r
, 
keyÀn_ö
, 
hashvÆ
, 
add
, 
_ha_oomed
); \

422 
	`HASH_FSCK
(
hh
, 
hód
, "HASH_ADD_KEYPTR_BYHASHVALUE"); \

423 } 0)

	)

425 
	#HASH_ADD_KEYPTR
(
hh
,
hód
,
key±r
,
keyÀn_ö
,
add
) \

427 
_ha_hashv
; \

428 
	`HASH_VALUE
(
key±r
, 
keyÀn_ö
, 
_ha_hashv
); \

429 
	`HASH_ADD_KEYPTR_BYHASHVALUE
(
hh
, 
hód
, 
key±r
, 
keyÀn_ö
, 
_ha_hashv
, 
add
); \

430 } 0)

	)

432 
	#HASH_ADD_BYHASHVALUE
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
hashvÆ
,
add
) \

433 
	`HASH_ADD_KEYPTR_BYHASHVALUE
(
hh
, 
hód
, &((
add
)->
fõld«me
), 
keyÀn_ö
, 
hashvÆ
,ádd)

	)

435 
	#HASH_ADD
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
add
) \

436 
	`HASH_ADD_KEYPTR
(
hh
, 
hód
, &((
add
)->
fõld«me
), 
keyÀn_ö
,ádd)

	)

438 
	#HASH_TO_BKT
(
hashv
,
num_bkts
,
bkt
) \

440 
bkt
 = ((
hashv
Ë& ((
num_bkts
) - 1U)); \

441 } 0)

	)

455 
	#HASH_DELETE
(
hh
,
hód
,
dñ±r
) \

456 
	`HASH_DELETE_HH
(
hh
, 
hód
, &(
dñ±r
)->hh)

	)

458 
	#HASH_DELETE_HH
(
hh
,
hód
,
dñ±rhh
) \

460 
UT_hash_h™dÀ
 *
_hd_hh_dñ
 = (
dñ±rhh
); \

461 i‡((
_hd_hh_dñ
->
¥ev
 =
NULL
Ë&& (_hd_hh_dñ->
√xt
 == NULL)) { \

462 
	`HASH_BLOOM_FREE
((
hód
)->
hh
.
tbl
); \

463 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
->
buckës
, \

464 (
hód
)->
hh
.
tbl
->
num_buckës
 * (
UT_hash_buckë
)); \

465 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
, (
UT_hash_èbÀ
)); \

466 (
hód
Ë
NULL
; \

468 
_hd_bkt
; \

469 i‡(
_hd_hh_dñ
 =(
hód
)->
hh
.
tbl
->
èû
) { \

470 (
hód
)->
hh
.
tbl
->
èû
 = 
	`HH_FROM_ELMT
((hód)->hh.tbl, 
_hd_hh_dñ
->
¥ev
); \

472 i‡(
_hd_hh_dñ
->
¥ev
 !
NULL
) { \

473 
	`HH_FROM_ELMT
((
hód
)->
hh
.
tbl
, 
_hd_hh_dñ
->
¥ev
)->
√xt
 = _hd_hh_del->next; \

475 
	`DECLTYPE_ASSIGN
(
hód
, 
_hd_hh_dñ
->
√xt
); \

477 i‡(
_hd_hh_dñ
->
√xt
 !
NULL
) { \

478 
	`HH_FROM_ELMT
((
hód
)->
hh
.
tbl
, 
_hd_hh_dñ
->
√xt
)->
¥ev
 = _hd_hh_del->prev; \

480 
	`HASH_TO_BKT
(
_hd_hh_dñ
->
hashv
, (
hód
)->
hh
.
tbl
->
num_buckës
, 
_hd_bkt
); \

481 
	`HASH_DEL_IN_BKT
((
hód
)->
hh
.
tbl
->
buckës
[
_hd_bkt
], 
_hd_hh_dñ
); \

482 (
hód
)->
hh
.
tbl
->
num_ôems
--; \

484 
	`HASH_FSCK
(
hh
, 
hód
, "HASH_DELETE_HH"); \

485 } 0)

	)

488 
	#HASH_FIND_STR
(
hód
,
föd°r
,
out
) \

490 
_uthash_hf°r_keyÀn
 = ()
	`uthash_°æí
(
föd°r
); \

491 
	`HASH_FIND
(
hh
, 
hód
, 
föd°r
, 
_uthash_hf°r_keyÀn
, 
out
); \

492 } 0)

	)

493 
	#HASH_ADD_STR
(
hód
,
°rfõld
,
add
) \

495 
_uthash_ha°r_keyÀn
 = ()
	`uthash_°æí
((
add
)->
°rfõld
); \

496 
	`HASH_ADD
(
hh
, 
hód
, 
°rfõld
[0], 
_uthash_ha°r_keyÀn
, 
add
); \

497 } 0)

	)

498 
	#HASH_REPLACE_STR
(
hód
,
°rfõld
,
add
,
ª∂a˚d
) \

500 
_uthash_hr°r_keyÀn
 = ()
	`uthash_°æí
((
add
)->
°rfõld
); \

501 
	`HASH_REPLACE
(
hh
, 
hód
, 
°rfõld
[0], 
_uthash_hr°r_keyÀn
, 
add
, 
ª∂a˚d
); \

502 } 0)

	)

503 
	#HASH_FIND_INT
(
hód
,
födöt
,
out
) \

504 
	`HASH_FIND
(
hh
,
hód
,
födöt
,(),
out
)

	)

505 
	#HASH_ADD_INT
(
hód
,
ötfõld
,
add
) \

506 
	`HASH_ADD
(
hh
,
hód
,
ötfõld
,(),
add
)

	)

507 
	#HASH_REPLACE_INT
(
hód
,
ötfõld
,
add
,
ª∂a˚d
) \

508 
	`HASH_REPLACE
(
hh
,
hód
,
ötfõld
,(),
add
,
ª∂a˚d
)

	)

509 
	#HASH_FIND_PTR
(
hód
,
föd±r
,
out
) \

510 
	`HASH_FIND
(
hh
,
hód
,
föd±r
,(*),
out
)

	)

511 
	#HASH_ADD_PTR
(
hód
,
±rfõld
,
add
) \

512 
	`HASH_ADD
(
hh
,
hód
,
±rfõld
,(*),
add
)

	)

513 
	#HASH_REPLACE_PTR
(
hód
,
±rfõld
,
add
,
ª∂a˚d
) \

514 
	`HASH_REPLACE
(
hh
,
hód
,
±rfõld
,(*),
add
,
ª∂a˚d
)

	)

515 
	#HASH_DEL
(
hód
,
dñ±r
) \

516 
	`HASH_DELETE
(
hh
,
hód
,
dñ±r
)

	)

521 #ifde‡
HASH_DEBUG


522 
	#HASH_OOPS
(...Ëdÿ{ 
	`Ârötf
(
°dîr
,
__VA_ARGS__
); 
	`exô
(-1); } 0)

	)

523 
	#HASH_FSCK
(
hh
,
hód
,
whîe
) \

525 
UT_hash_h™dÀ
 *
_thh
; \

526 i‡(
hód
) { \

527 
_bkt_i
; \

528 
_cou¡
 = 0; \

529 *
_¥ev
; \

530 
_bkt_i
 = 0; _bkt_ò< (
hód
)->
hh
.
tbl
->
num_buckës
; ++_bkt_i) { \

531 
_bkt_cou¡
 = 0; \

532 
_thh
 = (
hód
)->
hh
.
tbl
->
buckës
[
_bkt_i
].
hh_hód
; \

533 
_¥ev
 = 
NULL
; \

534 
_thh
) { \

535 i‡(
_¥ev
 !(*)(
_thh
->
hh_¥ev
)) { \

536 
	`HASH_OOPS
("%s: invalid hh_prev %p,áctual %p\n", \

537 (
whîe
), (*)
_thh
->
hh_¥ev
, (*)
_¥ev
); \

539 
_bkt_cou¡
++; \

540 
_¥ev
 = (*)(
_thh
); \

541 
_thh
 = _thh->
hh_√xt
; \

543 
_cou¡
 +
_bkt_cou¡
; \

544 i‡((
hód
)->
hh
.
tbl
->
buckës
[
_bkt_i
].
cou¡
 !
_bkt_cou¡
) { \

545 
	`HASH_OOPS
("%s: invalid bucket count %u,áctual %u\n", \

546 (
whîe
), (
hód
)->
hh
.
tbl
->
buckës
[
_bkt_i
].
cou¡
, 
_bkt_cou¡
); \

549 i‡(
_cou¡
 !(
hód
)->
hh
.
tbl
->
num_ôems
) { \

550 
	`HASH_OOPS
("%s: invalid hh item count %u,áctual %u\n", \

551 (
whîe
), (
hód
)->
hh
.
tbl
->
num_ôems
, 
_cou¡
); \

553 
_cou¡
 = 0; \

554 
_¥ev
 = 
NULL
; \

555 
_thh
 = &(
hód
)->
hh
; \

556 
_thh
) { \

557 
_cou¡
++; \

558 i‡(
_¥ev
 !(*)
_thh
->
¥ev
) { \

559 
	`HASH_OOPS
("%s: invalidÖrev %p,áctual %p\n", \

560 (
whîe
), (*)
_thh
->
¥ev
, (*)
_¥ev
); \

562 
_¥ev
 = (*)
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
, 
_thh
); \

563 
_thh
 = (_thh->
√xt
 ? 
	`HH_FROM_ELMT
((
hód
)->
hh
.
tbl
, _thh->√xtË: 
NULL
); \

565 i‡(
_cou¡
 !(
hód
)->
hh
.
tbl
->
num_ôems
) { \

566 
	`HASH_OOPS
("%s: invalidápp item count %u,áctual %u\n", \

567 (
whîe
), (
hód
)->
hh
.
tbl
->
num_ôems
, 
_cou¡
); \

570 } 0)

	)

572 
	#HASH_FSCK
(
hh
,
hód
,
whîe
)

	)

578 #ifde‡
HASH_EMIT_KEYS


579 
	#HASH_EMIT_KEY
(
hh
,
hód
,
key±r
,
fõldÀn
) \

581 
_kÀn
 = 
fõldÀn
; \

582 
	`wrôe
(
HASH_EMIT_KEYS
, &
_kÀn
, (_klen)); \

583 
	`wrôe
(
HASH_EMIT_KEYS
, 
key±r
, ()
fõldÀn
); \

584 } 0)

	)

586 
	#HASH_EMIT_KEY
(
hh
,
hód
,
key±r
,
fõldÀn
)

	)

590 #ifde‡
HASH_FUNCTION


591 
	#HASH_FCN
 
HASH_FUNCTION


	)

593 
	#HASH_FCN
 
HASH_JEN


	)

597 
	#HASH_BER
(
key
,
keyÀn
,
hashv
) \

599 
_hb_keyÀn
 = ()
keyÀn
; \

600 c⁄° *
_hb_key
 = (c⁄° *)(
key
); \

601 (
hashv
) = 0; \

602 
_hb_keyÀn
-- != 0U) { \

603 (
hashv
Ë(((hashvË<< 5Ë+ (hashv)Ë+ *
_hb_key
++; \

605 } 0)

	)

610 
	#HASH_SAX
(
key
,
keyÀn
,
hashv
) \

612 
_sx_i
; \

613 c⁄° *
_hs_key
 = (c⁄° *)(
key
); \

614 
hashv
 = 0; \

615 
_sx_i
=0; _sx_ò< 
keyÀn
; _sx_i++) { \

616 
hashv
 ^(hashv << 5Ë+ (hashv >> 2Ë+ 
_hs_key
[
_sx_i
]; \

618 } 0)

	)

620 
	#HASH_FNV
(
key
,
keyÀn
,
hashv
) \

622 
_‚_i
; \

623 c⁄° *
_hf_key
 = (c⁄° *)(
key
); \

624 (
hashv
) = 2166136261U; \

625 
_‚_i
=0; _‚_ò< 
keyÀn
; _fn_i++) { \

626 
hashv
 = hashv ^ 
_hf_key
[
_‚_i
]; \

627 
hashv
 = hashv * 16777619U; \

629 } 0)

	)

631 
	#HASH_OAT
(
key
,
keyÀn
,
hashv
) \

633 
_ho_i
; \

634 c⁄° *
_ho_key
=(c⁄° *)(
key
); \

635 
hashv
 = 0; \

636 
_ho_i
=0; _ho_ò< 
keyÀn
; _ho_i++) { \

637 
hashv
 +
_ho_key
[
_ho_i
]; \

638 
hashv
 += (hashv << 10); \

639 
hashv
 ^= (hashv >> 6); \

641 
hashv
 += (hashv << 3); \

642 
hashv
 ^= (hashv >> 11); \

643 
hashv
 += (hashv << 15); \

644 } 0)

	)

646 
	#HASH_JEN_MIX
(
a
,
b
,
c
) \

648 
a
 -
b
;á -
c
;á ^= ( c >> 13 ); \

649 
b
 -
c
; b -
a
; b ^= (á << 8 ); \

650 
c
 -
a
; c -
b
; c ^= ( b >> 13 ); \

651 
a
 -
b
;á -
c
;á ^= ( c >> 12 ); \

652 
b
 -
c
; b -
a
; b ^= (á << 16 ); \

653 
c
 -
a
; c -
b
; c ^= ( b >> 5 ); \

654 
a
 -
b
;á -
c
;á ^= ( c >> 3 ); \

655 
b
 -
c
; b -
a
; b ^= (á << 10 ); \

656 
c
 -
a
; c -
b
; c ^= ( b >> 15 ); \

657 } 0)

	)

659 
	#HASH_JEN
(
key
,
keyÀn
,
hashv
) \

661 
_hj_i
,
_hj_j
,
_hj_k
; \

662 c⁄° *
_hj_key
=(c⁄° *)(
key
); \

663 
hashv
 = 0xfeedbeefu; \

664 
_hj_i
 = 
_hj_j
 = 0x9e3779b9u; \

665 
_hj_k
 = ()(
keyÀn
); \

666 
_hj_k
 >= 12U) { \

667 
_hj_i
 +(
_hj_key
[0] + ( ()_hj_key[1] << 8 ) \

668 + ( ()
_hj_key
[2] << 16 ) \

669 + ( ()
_hj_key
[3] << 24 ) ); \

670 
_hj_j
 +(
_hj_key
[4] + ( ()_hj_key[5] << 8 ) \

671 + ( ()
_hj_key
[6] << 16 ) \

672 + ( ()
_hj_key
[7] << 24 ) ); \

673 
hashv
 +(
_hj_key
[8] + ( ()_hj_key[9] << 8 ) \

674 + ( ()
_hj_key
[10] << 16 ) \

675 + ( ()
_hj_key
[11] << 24 ) ); \

677 
	`HASH_JEN_MIX
(
_hj_i
, 
_hj_j
, 
hashv
); \

679 
_hj_key
 += 12; \

680 
_hj_k
 -= 12U; \

682 
hashv
 +()(
keyÀn
); \

683  
_hj_k
 ) { \

684 11: 
hashv
 +–()
_hj_key
[10] << 24 ); \

685 10: 
hashv
 +–()
_hj_key
[9] << 16 ); \

686 9: 
hashv
 +–()
_hj_key
[8] << 8 ); \

687 8: 
_hj_j
 +–()
_hj_key
[7] << 24 ); \

688 7: 
_hj_j
 +–()
_hj_key
[6] << 16 ); \

689 6: 
_hj_j
 +–()
_hj_key
[5] << 8 ); \

690 5: 
_hj_j
 +
_hj_key
[4]; \

691 4: 
_hj_i
 +–()
_hj_key
[3] << 24 ); \

692 3: 
_hj_i
 +–()
_hj_key
[2] << 16 ); \

693 2: 
_hj_i
 +–()
_hj_key
[1] << 8 ); \

694 1: 
_hj_i
 +
_hj_key
[0]; \

696 
	`HASH_JEN_MIX
(
_hj_i
, 
_hj_j
, 
hashv
); \

697 } 0)

	)

700 #unde‡
gë16bôs


701 #i‡(
deföed
(
__GNUC__
Ë&& deföed(
__i386__
)Ë|| deföed(
__WATCOMC__
) \

702 || 
deföed
(
_MSC_VER
Ë|| deföed (
__BORLANDC__
Ë|| 
	$deföed
 (
__TURBOC__
)

703 
	#gë16bôs
(
d
Ë(*((c⁄° 
uöt16_t
 *Ë(d)))

	)

706 #i‡!
	`deföed
 (
gë16bôs
)

707 
	#gë16bôs
(
d
Ë((((
uöt32_t
)(((c⁄° 
uöt8_t
 *)(d))[1])) << 8) \

708 +(
uöt32_t
)(((c⁄° 
uöt8_t
 *)(
d
))[0]Ë)

	)

710 
	#HASH_SFH
(
key
,
keyÀn
,
hashv
) \

712 c⁄° *
_sfh_key
=(c⁄° *)(
key
); \

713 
uöt32_t
 
_sfh_tmp
, 
_sfh_Àn
 = (uöt32_t)
keyÀn
; \

715 
_sfh_ªm
 = 
_sfh_Àn
 & 3U; \

716 
_sfh_Àn
 >>= 2; \

717 
hashv
 = 0xcafebabeu; \

720 ;
_sfh_Àn
 > 0U; _sfh_len--) { \

721 
hashv
 +
	`gë16bôs
 (
_sfh_key
); \

722 
_sfh_tmp
 = ((
uöt32_t
)(
	`gë16bôs
 (
_sfh_key
+2)Ë<< 11Ë^ 
hashv
; \

723 
hashv
 = (hashv << 16Ë^ 
_sfh_tmp
; \

724 
_sfh_key
 +2U* (
uöt16_t
); \

725 
hashv
 += hashv >> 11; \

729 
_sfh_ªm
) { \

730 3: 
hashv
 +
	`gë16bôs
 (
_sfh_key
); \

731 
hashv
 ^= hashv << 16; \

732 
hashv
 ^(
uöt32_t
)(
_sfh_key
[ (
uöt16_t
)]) << 18; \

733 
hashv
 += hashv >> 11; \

735 2: 
hashv
 +
	`gë16bôs
 (
_sfh_key
); \

736 
hashv
 ^= hashv << 11; \

737 
hashv
 += hashv >> 17; \

739 1: 
hashv
 +*
_sfh_key
; \

740 
hashv
 ^= hashv << 10; \

741 
hashv
 += hashv >> 1; \

745 
hashv
 ^= hashv << 3; \

746 
hashv
 += hashv >> 5; \

747 
hashv
 ^= hashv << 4; \

748 
hashv
 += hashv >> 17; \

749 
hashv
 ^= hashv << 25; \

750 
hashv
 += hashv >> 6; \

751 
	}
} 0)

	)

753 #ifde‡
HASH_USING_NO_STRICT_ALIASING


763 #i‡(
deföed
(
__i386__
Ë|| deföed(
__x86_64__
Ë|| deföed(
_M_IX86
))

764 
	#MUR_GETBLOCK
(
p
,
i
Ëp[i]

	)

766 
	#MUR_PLUS0_ALIGNED
(
p
Ë(((Ì & 3ULË=0UL)

	)

767 
	#MUR_PLUS1_ALIGNED
(
p
Ë(((Ì & 3ULË=1UL)

	)

768 
	#MUR_PLUS2_ALIGNED
(
p
Ë(((Ì & 3ULË=2UL)

	)

769 
	#MUR_PLUS3_ALIGNED
(
p
Ë(((Ì & 3ULË=3UL)

	)

770 
	#WP
(
p
Ë((
uöt32_t
*)(()’Ë& ~3UL))

	)

771 #i‡(
deföed
(
__BIG_ENDIAN__
Ë|| deföed(
SPARC
Ë|| deföed(
__µc__
Ë|| deföed(
__µc64__
))

772 
	#MUR_THREE_ONE
(
p
Ë((((*
	`WP
’))&0x00ffffffË<< 8Ë| (((*(WP’)+1))&0xff000000Ë>> 24))

	)

773 
	#MUR_TWO_TWO
(
p
Ë((((*
	`WP
’))&0x0000ffffË<<16Ë| (((*(WP’)+1))&0xffff0000Ë>> 16))

	)

774 
	#MUR_ONE_THREE
(
p
Ë((((*
	`WP
’))&0x000000ffË<<24Ë| (((*(WP’)+1))&0xffffff00Ë>> 8))

	)

776 
	#MUR_THREE_ONE
(
p
Ë((((*
	`WP
’))&0xffffff00Ë>> 8Ë| (((*(WP’)+1))&0x000000ffË<< 24))

	)

777 
	#MUR_TWO_TWO
(
p
Ë((((*
	`WP
’))&0xffff0000Ë>>16Ë| (((*(WP’)+1))&0x0000ffffË<< 16))

	)

778 
	#MUR_ONE_THREE
(
p
Ë((((*
	`WP
’))&0xff000000Ë>>24Ë| (((*(WP’)+1))&0x00ffffffË<< 8))

	)

780 
	#MUR_GETBLOCK
(
p
,
i
Ë(
	`MUR_PLUS0_ALIGNED
(p) ? ((p)[i]) : \

781 (
	`MUR_PLUS1_ALIGNED
(
p
Ë? 
	`MUR_THREE_ONE
(p) : \

782 (
	`MUR_PLUS2_ALIGNED
(
p
Ë? 
	`MUR_TWO_TWO
(p) : \

783 
	`MUR_ONE_THREE
(
p
))))

	)

785 
	#MUR_ROTL32
(
x
,
r
Ë(((xË<< (r)Ë| ((xË>> (32 - (r))))

	)

786 
	#MUR_FMIX
(
_h
) \

788 
_h
 ^= _h >> 16; \

789 
_h
 *= 0x85ebca6bu; \

790 
_h
 ^= _h >> 13; \

791 
_h
 *= 0xc2b2ae35u; \

792 
_h
 ^= _h >> 16; \

793 } 0)

	)

795 
	#HASH_MUR
(
key
,
keyÀn
,
hashv
) \

797 c⁄° 
uöt8_t
 *
_mur_d©a
 = (c⁄° uöt8_t*)(
key
); \

798 c⁄° 
_mur_nblocks
 = ()(
keyÀn
) / 4; \

799 
uöt32_t
 
_mur_h1
 = 0xf88D5353u; \

800 
uöt32_t
 
_mur_c1
 = 0xcc9e2d51u; \

801 
uöt32_t
 
_mur_c2
 = 0x1b873593u; \

802 
uöt32_t
 
_mur_k1
 = 0; \

803 c⁄° 
uöt8_t
 *
_mur_èû
; \

804 c⁄° 
uöt32_t
 *
_mur_blocks
 = (c⁄° uöt32_t*)(
_mur_d©a
+(
_mur_nblocks
*4)); \

805 
_mur_i
; \

806 
_mur_i
 = -
_mur_nblocks
; _mur_i != 0; _mur_i++) { \

807 
_mur_k1
 = 
	`MUR_GETBLOCK
(
_mur_blocks
,
_mur_i
); \

808 
_mur_k1
 *
_mur_c1
; \

809 
_mur_k1
 = 
	`MUR_ROTL32
(_mur_k1,15); \

810 
_mur_k1
 *
_mur_c2
; \

812 
_mur_h1
 ^
_mur_k1
; \

813 
_mur_h1
 = 
	`MUR_ROTL32
(_mur_h1,13); \

814 
_mur_h1
 = (_mur_h1*5U) + 0xe6546b64u; \

816 
_mur_èû
 = (c⁄° 
uöt8_t
*)(
_mur_d©a
 + (
_mur_nblocks
*4)); \

817 
_mur_k1
=0; \

818 (
keyÀn
) & 3U) { \

820 3: 
_mur_k1
 ^(
uöt32_t
)
_mur_èû
[2] << 16; \

821 2: 
_mur_k1
 ^(
uöt32_t
)
_mur_èû
[1] << 8; \

822 1: 
_mur_k1
 ^(
uöt32_t
)
_mur_èû
[0]; \

823 
_mur_k1
 *
_mur_c1
; \

824 
_mur_k1
 = 
	`MUR_ROTL32
(_mur_k1,15); \

825 
_mur_k1
 *
_mur_c2
; \

826 
_mur_h1
 ^
_mur_k1
; \

828 
_mur_h1
 ^(
uöt32_t
)(
keyÀn
); \

829 
	`MUR_FMIX
(
_mur_h1
); \

830 
hashv
 = 
_mur_h1
; \

831 } 0)

	)

835 
	#HASH_FIND_IN_BKT
(
tbl
,
hh
,
hód
,
key±r
,
keyÀn_ö
,
hashvÆ
,
out
) \

837 i‡((
hód
).
hh_hód
 !
NULL
) { \

838 
	`DECLTYPE_ASSIGN
(
out
, 
	`ELMT_FROM_HH
(
tbl
, (
hód
).
hh_hód
)); \

840 (
out
Ë
NULL
; \

842 (
out
Ë!
NULL
) { \

843 i‡((
out
)->
hh
.
hashv
 =(
hashvÆ
Ë&& (out)->hh.
keyÀn
 =(
keyÀn_ö
)) { \

844 i‡(
	`HASH_KEYCMP
((
out
)->
hh
.
key
, 
key±r
, 
keyÀn_ö
) == 0) { \

848 i‡((
out
)->
hh
.
hh_√xt
 !
NULL
) { \

849 
	`DECLTYPE_ASSIGN
(
out
, 
	`ELMT_FROM_HH
(
tbl
, (out)->
hh
.
hh_√xt
)); \

851 (
out
Ë
NULL
; \

854 } 0)

	)

857 
	#HASH_ADD_TO_BKT
(
hód
,
hh
,
addhh
,
oomed
) \

859 
UT_hash_buckë
 *
_ha_hód
 = &(
hód
); \

860 
_ha_hód
->
cou¡
++; \

861 (
addhh
)->
hh_√xt
 = 
_ha_hód
->
hh_hód
; \

862 (
addhh
)->
hh_¥ev
 = 
NULL
; \

863 i‡(
_ha_hód
->
hh_hód
 !
NULL
) { \

864 
_ha_hód
->
hh_hód
->
hh_¥ev
 = (
addhh
); \

866 
_ha_hód
->
hh_hód
 = (
addhh
); \

867 i‡((
_ha_hód
->
cou¡
 >((_ha_hód->
ex∑nd_mu…
 + 1UË* 
HASH_BKT_CAPACITY_THRESH
)) \

868 && !(
addhh
)->
tbl
->
n€x∑nd
) { \

869 
	`HASH_EXPAND_BUCKETS
(
addhh
,◊ddhh)->
tbl
, 
oomed
); \

870 
	`IF_HASH_NONFATAL_OOM
( \

871 i‡(
oomed
) { \

872 
	`HASH_DEL_IN_BKT
(
hód
,
addhh
); \

876 } 0)

	)

879 
	#HASH_DEL_IN_BKT
(
hód
,
dñhh
) \

881 
UT_hash_buckë
 *
_hd_hód
 = &(
hód
); \

882 
_hd_hód
->
cou¡
--; \

883 i‡(
_hd_hód
->
hh_hód
 =(
dñhh
)) { \

884 
_hd_hód
->
hh_hód
 = (
dñhh
)->
hh_√xt
; \

886 i‡((
dñhh
)->
hh_¥ev
) { \

887 (
dñhh
)->
hh_¥ev
->
hh_√xt
 = (delhh)->hh_next; \

889 i‡((
dñhh
)->
hh_√xt
) { \

890 (
dñhh
)->
hh_√xt
->
hh_¥ev
 = (delhh)->hh_prev; \

892 } 0)

	)

923 
	#HASH_EXPAND_BUCKETS
(
hh
,
tbl
,
oomed
) \

925 
_he_bkt
; \

926 
_he_bkt_i
; \

927 
UT_hash_h™dÀ
 *
_he_thh
, *
_he_hh_nxt
; \

928 
UT_hash_buckë
 *
_he_√w_buckës
, *
_he_√wbkt
; \

929 
_he_√w_buckës
 = (
UT_hash_buckë
*)
	`uthash_mÆloc
( \

930 2UL * (
tbl
)->
num_buckës
 * (
UT_hash_buckë
)); \

931 i‡(!
_he_√w_buckës
) { \

932 
	`HASH_RECORD_OOM
(
oomed
); \

934 
	`uthash_bzîo
(
_he_√w_buckës
, \

935 2UL * (
tbl
)->
num_buckës
 * (
UT_hash_buckë
)); \

936 (
tbl
)->
idól_chaö_maxÀn
 = \

937 ((
tbl
)->
num_ôems
 >> (—bl)->
log2_num_buckës
+1U)) + \

938 ((((
tbl
)->
num_ôems
 & ((—bl)->
num_buckës
*2U)-1U)) != 0U) ? 1U : 0U); \

939 (
tbl
)->
n⁄idól_ôems
 = 0; \

940 
_he_bkt_i
 = 0; _he_bkt_ò< (
tbl
)->
num_buckës
; _he_bkt_i++) { \

941 
_he_thh
 = (
tbl
)->
buckës
[ 
_he_bkt_i
 ].
hh_hód
; \

942 
_he_thh
 !
NULL
) { \

943 
_he_hh_nxt
 = 
_he_thh
->
hh_√xt
; \

944 
	`HASH_TO_BKT
(
_he_thh
->
hashv
, (
tbl
)->
num_buckës
 * 2U, 
_he_bkt
); \

945 
_he_√wbkt
 = &(
_he_√w_buckës
[
_he_bkt
]); \

946 i‡(++(
_he_√wbkt
->
cou¡
Ë> (
tbl
)->
idól_chaö_maxÀn
) { \

947 (
tbl
)->
n⁄idól_ôems
++; \

948 i‡(
_he_√wbkt
->
cou¡
 > _he_√wbkt->
ex∑nd_mu…
 * (
tbl
)->
idól_chaö_maxÀn
) { \

949 
_he_√wbkt
->
ex∑nd_mu…
++; \

952 
_he_thh
->
hh_¥ev
 = 
NULL
; \

953 
_he_thh
->
hh_√xt
 = 
_he_√wbkt
->
hh_hód
; \

954 i‡(
_he_√wbkt
->
hh_hód
 !
NULL
) { \

955 
_he_√wbkt
->
hh_hód
->
hh_¥ev
 = 
_he_thh
; \

957 
_he_√wbkt
->
hh_hód
 = 
_he_thh
; \

958 
_he_thh
 = 
_he_hh_nxt
; \

961 
	`uthash_‰ì
((
tbl
)->
buckës
, (tbl)->
num_buckës
 * (
UT_hash_buckë
)); \

962 (
tbl
)->
num_buckës
 *= 2U; \

963 (
tbl
)->
log2_num_buckës
++; \

964 (
tbl
)->
buckës
 = 
_he_√w_buckës
; \

965 (
tbl
)->
öeff_ex∑nds
 = (—bl)->
n⁄idól_ôems
 > (—bl)->
num_ôems
 >> 1)) ? \

966 ((
tbl
)->
öeff_ex∑nds
+1U) : 0U; \

967 i‡((
tbl
)->
öeff_ex∑nds
 > 1U) { \

968 (
tbl
)->
n€x∑nd
 = 1; \

969 
	`uthash_n€x∑nd_fyi
(
tbl
); \

971 
	`uthash_ex∑nd_fyi
(
tbl
); \

973 } 0)

	)

979 
	#HASH_SORT
(
hód
,
cmpf˙
Ë
	`HASH_SRT
(
hh
,hód,cmpf˙)

	)

980 
	#HASH_SRT
(
hh
,
hód
,
cmpf˙
) \

982 
_hs_i
; \

983 
_hs_lo›ög
,
_hs_nmîges
,
_hs_ösize
,
_hs_psize
,
_hs_qsize
; \

984 
UT_hash_h™dÀ
 *
_hs_p
, *
_hs_q
, *
_hs_e
, *
_hs_li°
, *
_hs_èû
; \

985 i‡(
hód
 !
NULL
) { \

986 
_hs_ösize
 = 1; \

987 
_hs_lo›ög
 = 1; \

988 
_hs_li°
 = &((
hód
)->
hh
); \

989 
_hs_lo›ög
 != 0U) { \

990 
_hs_p
 = 
_hs_li°
; \

991 
_hs_li°
 = 
NULL
; \

992 
_hs_èû
 = 
NULL
; \

993 
_hs_nmîges
 = 0; \

994 
_hs_p
 !
NULL
) { \

995 
_hs_nmîges
++; \

996 
_hs_q
 = 
_hs_p
; \

997 
_hs_psize
 = 0; \

998 
_hs_i
 = 0; _hs_ò< 
_hs_ösize
; ++_hs_i) { \

999 
_hs_psize
++; \

1000 
_hs_q
 = ((_hs_q->
√xt
 !
NULL
) ? \

1001 
	`HH_FROM_ELMT
((
hód
)->
hh
.
tbl
, 
_hs_q
->
√xt
Ë: 
NULL
); \

1002 i‡(
_hs_q
 =
NULL
) { \

1006 
_hs_qsize
 = 
_hs_ösize
; \

1007 (
_hs_psize
 !0UË|| ((
_hs_qsize
 !0UË&& (
_hs_q
 !
NULL
))) { \

1008 i‡(
_hs_psize
 == 0U) { \

1009 
_hs_e
 = 
_hs_q
; \

1010 
_hs_q
 = ((_hs_q->
√xt
 !
NULL
) ? \

1011 
	`HH_FROM_ELMT
((
hód
)->
hh
.
tbl
, 
_hs_q
->
√xt
Ë: 
NULL
); \

1012 
_hs_qsize
--; \

1013 } i‡((
_hs_qsize
 =0UË|| (
_hs_q
 =
NULL
)) { \

1014 
_hs_e
 = 
_hs_p
; \

1015 i‡(
_hs_p
 !
NULL
) { \

1016 
_hs_p
 = ((_hs_p->
√xt
 !
NULL
) ? \

1017 
	`HH_FROM_ELMT
((
hód
)->
hh
.
tbl
, 
_hs_p
->
√xt
Ë: 
NULL
); \

1019 
_hs_psize
--; \

1020 } i‡((
	`cmpf˙
( \

1021 
	`DECLTYPE
(
hód
)(
	`ELMT_FROM_HH
((hód)->
hh
.
tbl
, 
_hs_p
)), \

1022 
	`DECLTYPE
(
hód
)(
	`ELMT_FROM_HH
((hód)->
hh
.
tbl
, 
_hs_q
)) \

1024 
_hs_e
 = 
_hs_p
; \

1025 i‡(
_hs_p
 !
NULL
) { \

1026 
_hs_p
 = ((_hs_p->
√xt
 !
NULL
) ? \

1027 
	`HH_FROM_ELMT
((
hód
)->
hh
.
tbl
, 
_hs_p
->
√xt
Ë: 
NULL
); \

1029 
_hs_psize
--; \

1031 
_hs_e
 = 
_hs_q
; \

1032 
_hs_q
 = ((_hs_q->
√xt
 !
NULL
) ? \

1033 
	`HH_FROM_ELMT
((
hód
)->
hh
.
tbl
, 
_hs_q
->
√xt
Ë: 
NULL
); \

1034 
_hs_qsize
--; \

1036 i‡–
_hs_èû
 !
NULL
 ) { \

1037 
_hs_èû
->
√xt
 = ((
_hs_e
 !
NULL
) ? \

1038 
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
, 
_hs_e
Ë: 
NULL
); \

1040 
_hs_li°
 = 
_hs_e
; \

1042 i‡(
_hs_e
 !
NULL
) { \

1043 
_hs_e
->
¥ev
 = ((
_hs_èû
 !
NULL
) ? \

1044 
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
, 
_hs_èû
Ë: 
NULL
); \

1046 
_hs_èû
 = 
_hs_e
; \

1048 
_hs_p
 = 
_hs_q
; \

1050 i‡(
_hs_èû
 !
NULL
) { \

1051 
_hs_èû
->
√xt
 = 
NULL
; \

1053 i‡(
_hs_nmîges
 <= 1U) { \

1054 
_hs_lo›ög
 = 0; \

1055 (
hód
)->
hh
.
tbl
->
èû
 = 
_hs_èû
; \

1056 
	`DECLTYPE_ASSIGN
(
hód
, 
	`ELMT_FROM_HH
((hód)->
hh
.
tbl
, 
_hs_li°
)); \

1058 
_hs_ösize
 *= 2U; \

1060 
	`HASH_FSCK
(
hh
, 
hód
, "HASH_SRT"); \

1062 } 0)

	)

1069 
	#HASH_SELECT
(
hh_d°
, 
d°
, 
hh_§c
, 
§c
, 
c⁄d
) \

1071 
_§c_bkt
, 
_d°_bkt
; \

1072 *
_œ°_ñt
 = 
NULL
, *
_ñt
; \

1073 
UT_hash_h™dÀ
 *
_§c_hh
, *
_d°_hh
, *
_œ°_ñt_hh
=
NULL
; \

1074 
±rdiff_t
 
_d°_hho
 = ((*)(&(
d°
)->
hh_d°
) - (*)(dst)); \

1075 i‡((
§c
Ë!
NULL
) { \

1076 
_§c_bkt
=0; _§c_bkà< (
§c
)->
hh_§c
.
tbl
->
num_buckës
; _src_bkt++) { \

1077 
_§c_hh
 = (
§c
)->
hh_§c
.
tbl
->
buckës
[
_§c_bkt
].
hh_hód
; \

1078 
_§c_hh
 !
NULL
; \

1079 
_§c_hh
 = _§c_hh->
hh_√xt
) { \

1080 
_ñt
 = 
	`ELMT_FROM_HH
((
§c
)->
hh_§c
.
tbl
, 
_§c_hh
); \

1081 i‡(
	`c⁄d
(
_ñt
)) { \

1082 
	`IF_HASH_NONFATAL_OOM
–
_hs_oomed
 = 0; ) \

1083 
_d°_hh
 = (
UT_hash_h™dÀ
*)(((*)
_ñt
Ë+ 
_d°_hho
); \

1084 
_d°_hh
->
key
 = 
_§c_hh
->key; \

1085 
_d°_hh
->
keyÀn
 = 
_§c_hh
->keylen; \

1086 
_d°_hh
->
hashv
 = 
_§c_hh
->hashv; \

1087 
_d°_hh
->
¥ev
 = 
_œ°_ñt
; \

1088 
_d°_hh
->
√xt
 = 
NULL
; \

1089 i‡(
_œ°_ñt_hh
 !
NULL
) { \

1090 
_œ°_ñt_hh
->
√xt
 = 
_ñt
; \

1092 i‡((
d°
Ë=
NULL
) { \

1093 
	`DECLTYPE_ASSIGN
(
d°
, 
_ñt
); \

1094 
	`HASH_MAKE_TABLE
(
hh_d°
, 
d°
, 
_hs_oomed
); \

1095 
	`IF_HASH_NONFATAL_OOM
( \

1096 i‡(
_hs_oomed
) { \

1097 
	`uthash_n⁄Áèl_oom
(
_ñt
); \

1098 (
d°
Ë
NULL
; \

1103 
_d°_hh
->
tbl
 = (
d°
)->
hh_d°
.tbl; \

1105 
	`HASH_TO_BKT
(
_d°_hh
->
hashv
, _d°_hh->
tbl
->
num_buckës
, 
_d°_bkt
); \

1106 
	`HASH_ADD_TO_BKT
(
_d°_hh
->
tbl
->
buckës
[
_d°_bkt
], 
hh_d°
, _d°_hh, 
_hs_oomed
); \

1107 (
d°
)->
hh_d°
.
tbl
->
num_ôems
++; \

1108 
	`IF_HASH_NONFATAL_OOM
( \

1109 i‡(
_hs_oomed
) { \

1110 
	`HASH_ROLLBACK_BKT
(
hh_d°
, 
d°
, 
_d°_hh
); \

1111 
	`HASH_DELETE_HH
(
hh_d°
, 
d°
, 
_d°_hh
); \

1112 
_d°_hh
->
tbl
 = 
NULL
; \

1113 
	`uthash_n⁄Áèl_oom
(
_ñt
); \

1117 
	`HASH_BLOOM_ADD
(
_d°_hh
->
tbl
, _d°_hh->
hashv
); \

1118 
_œ°_ñt
 = 
_ñt
; \

1119 
_œ°_ñt_hh
 = 
_d°_hh
; \

1124 
	`HASH_FSCK
(
hh_d°
, 
d°
, "HASH_SELECT"); \

1125 } 0)

	)

1127 
	#HASH_CLEAR
(
hh
,
hód
) \

1129 i‡((
hód
Ë!
NULL
) { \

1130 
	`HASH_BLOOM_FREE
((
hód
)->
hh
.
tbl
); \

1131 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
->
buckës
, \

1132 (
hód
)->
hh
.
tbl
->
num_buckës
*(
UT_hash_buckë
)); \

1133 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
, (
UT_hash_èbÀ
)); \

1134 (
hód
Ë
NULL
; \

1136 } 0)

	)

1138 
	#HASH_OVERHEAD
(
hh
,
hód
) \

1139 (((
hód
Ë!
NULL
) ? ( \

1140 (
size_t
)(((
hód
)->
hh
.
tbl
->
num_ôems
 * (
UT_hash_h™dÀ
)) + \

1141 ((
hód
)->
hh
.
tbl
->
num_buckës
 * (
UT_hash_buckë
)) + \

1142 (
UT_hash_èbÀ
) + \

1143 (
HASH_BLOOM_BYTELEN
))Ë: 0U)

	)

1145 #ifde‡
NO_DECLTYPE


1146 
	#HASH_ITER
(
hh
,
hód
,
ñ
,
tmp
) \

1147 ((
ñ
)=(
hód
)), ((*(**)(&(
tmp
)))=(*)((hód!=
NULL
)?(hód)->
hh
.
√xt
:NULL)); \

1148 (
ñ
Ë!
NULL
; (”l)=(
tmp
)), ((*(**)(&—mp)))=(*)(—mp!=NULL)?—mp)->
hh
.
√xt
:NULL)))

	)

1150 
	#HASH_ITER
(
hh
,
hód
,
ñ
,
tmp
) \

1151 ((
ñ
)=(
hód
)), ((
tmp
)=
	`DECLTYPE
”l)((hód!=
NULL
)?(hód)->
hh
.
√xt
:NULL)); \

1152 (
ñ
Ë!
NULL
; (”l)=(
tmp
)), (—mp)=
	`DECLTYPE
”l)(—mp!=NULL)?—mp)->
hh
.
√xt
:NULL)))

	)

1156 
	#HASH_COUNT
(
hód
Ë
	`HASH_CNT
(
hh
,hód)

	)

1157 
	#HASH_CNT
(
hh
,
hód
Ë((hód !
NULL
)?((hód)->hh.
tbl
->
num_ôems
):0U)

	)

1159 
	sUT_hash_buckë
 {

1160 
UT_hash_h™dÀ
 *
	mhh_hód
;

1161 
	mcou¡
;

1175 
	mex∑nd_mu…
;

1177 } 
	tUT_hash_buckë
;

1180 
	#HASH_SIGNATURE
 0xa0111„1u

	)

1181 
	#HASH_BLOOM_SIGNATURE
 0xb12220f2u

	)

1183 
	sUT_hash_èbÀ
 {

1184 
UT_hash_buckë
 *
	mbuckës
;

1185 
	mnum_buckës
, 
	mlog2_num_buckës
;

1186 
	mnum_ôems
;

1187 
UT_hash_h™dÀ
 *
	mèû
;

1188 
±rdiff_t
 
	mhho
;

1192 
	midól_chaö_maxÀn
;

1197 
	mn⁄idól_ôems
;

1205 
	möeff_ex∑nds
, 
	mn€x∑nd
;

1207 
uöt32_t
 
	msig«tuª
;

1208 #ifde‡
HASH_BLOOM


1209 
uöt32_t
 
	mbloom_sig
;

1210 
uöt8_t
 *
	mbloom_bv
;

1211 
uöt8_t
 
	mbloom_nbôs
;

1214 } 
	tUT_hash_èbÀ
;

1216 
	sUT_hash_h™dÀ
 {

1217 
UT_hash_èbÀ
 *
	mtbl
;

1218 *
	m¥ev
;

1219 *
	m√xt
;

1220 
UT_hash_h™dÀ
 *
	mhh_¥ev
;

1221 
UT_hash_h™dÀ
 *
	mhh_√xt
;

1222 *
	mkey
;

1223 
	mkeyÀn
;

1224 
	mhashv
;

1225 } 
	tUT_hash_h™dÀ
;

	@open_source_lib/mosquitto/mosquitto-2.0.15/deps/utlist.h

24 #i‚de‡
UTLIST_H


25 
	#UTLIST_H


	)

27 
	#UTLIST_VERSION
 2.1.0

	)

29 
	~<as£π.h
>

66 #i‡!
deföed
(
LDECLTYPE
Ë&& !deföed(
NO_DECLTYPE
)

67 #i‡
deföed
(
_MSC_VER
)

68 #i‡
_MSC_VER
 >1600 && 
deföed
(
__˝lu•lus
)

69 
	#LDECLTYPE
(
x
Ë
	`de˛ty≥
(x)

	)

71 
	#NO_DECLTYPE


	)

73 #ñi‡
deföed
(
__BORLANDC__
Ë|| deföed(
__ICCARM__
Ë|| deföed(
__LCC__
Ë|| deföed(
__WATCOMC__
)

74 
	#NO_DECLTYPE


	)

76 
	#LDECLTYPE
(
x
Ë
	`__ty≥of
(x)

	)

83 #ifde‡
NO_DECLTYPE


84 
	#IF_NO_DECLTYPE
(
x
Ë
	)
x

85 
	#LDECLTYPE
(
x
Ë*

	)

86 
	#UTLIST_SV
(
ñt
,
li°
Ë
_tmp
 = (*)÷i°); {**
_Æüs
 = (**)&÷i°); *_Æü†”…); }

	)

87 
	#UTLIST_NEXT
(
ñt
,
li°
,
√xt
Ë((*)(÷i°)->√xt))

	)

88 
	#UTLIST_NEXTASGN
(
ñt
,
li°
,
to
,
√xt
Ë{ **
_Æüs
 = (**)&(÷i°)->√xt); *_Æüs=(*)—o); }

	)

90 
	#UTLIST_PREVASGN
(
ñt
,
li°
,
to
,
¥ev
Ë{ **
_Æüs
 = (**)&(÷i°)->¥ev); *_Æüs=(*)—o); }

	)

91 
	#UTLIST_RS
(
li°
Ë{ **
_Æüs
 = (**)&÷i°); *_Æüs=
_tmp
; }

	)

92 
	#UTLIST_CASTASGN
(
a
,
b
Ë{ **
_Æüs
 = (**)&◊); *_Æüs=(*)(b); }

	)

94 
	#IF_NO_DECLTYPE
(
x
)

	)

95 
	#UTLIST_SV
(
ñt
,
li°
)

	)

96 
	#UTLIST_NEXT
(
ñt
,
li°
,
√xt
Ë(”…)->√xt)

	)

97 
	#UTLIST_NEXTASGN
(
ñt
,
li°
,
to
,
√xt
Ë(”…)->√xt)=—o)

	)

99 
	#UTLIST_PREVASGN
(
ñt
,
li°
,
to
,
¥ev
Ë(”…)->¥ev)=—o)

	)

100 
	#UTLIST_RS
(
li°
)

	)

101 
	#UTLIST_CASTASGN
(
a
,
b
Ë◊)=(b)

	)

108 
	#LL_SORT
(
li°
, 
cmp
) \

109 
	`LL_SORT2
(
li°
, 
cmp
, 
√xt
)

	)

111 
	#LL_SORT2
(
li°
, 
cmp
, 
√xt
) \

113 
	`LDECLTYPE
(
li°
Ë
_ls_p
; \

114 
	`LDECLTYPE
(
li°
Ë
_ls_q
; \

115 
	`LDECLTYPE
(
li°
Ë
_ls_e
; \

116 
	`LDECLTYPE
(
li°
Ë
_ls_èû
; \

117 
	`IF_NO_DECLTYPE
(
	`LDECLTYPE
(
li°
Ë
_tmp
;) \

118 
_ls_ösize
, 
_ls_nmîges
, 
_ls_psize
, 
_ls_qsize
, 
_ls_i
, 
_ls_lo›ög
; \

119 i‡(
li°
) { \

120 
_ls_ösize
 = 1; \

121 
_ls_lo›ög
 = 1; \

122 
_ls_lo›ög
) { \

123 
	`UTLIST_CASTASGN
(
_ls_p
,
li°
); \

124 (
li°
Ë
NULL
; \

125 
_ls_èû
 = 
NULL
; \

126 
_ls_nmîges
 = 0; \

127 
_ls_p
) { \

128 
_ls_nmîges
++; \

129 
_ls_q
 = 
_ls_p
; \

130 
_ls_psize
 = 0; \

131 
_ls_i
 = 0; _ls_ò< 
_ls_ösize
; _ls_i++) { \

132 
_ls_psize
++; \

133 
	`UTLIST_SV
(
_ls_q
,
li°
); _ls_q = 
	`UTLIST_NEXT
(_ls_q,li°,
√xt
); 
	`UTLIST_RS
(list); \

134 i‡(!
_ls_q
) ; \

136 
_ls_qsize
 = 
_ls_ösize
; \

137 
_ls_psize
 > 0 || (
_ls_qsize
 > 0 && 
_ls_q
)) { \

138 i‡(
_ls_psize
 == 0) { \

139 
_ls_e
 = 
_ls_q
; 
	`UTLIST_SV
(_ls_q,
li°
); _ls_q = \

140 
	`UTLIST_NEXT
(
_ls_q
,
li°
,
√xt
); 
	`UTLIST_RS
÷i°); 
_ls_qsize
--; \

141 } i‡(
_ls_qsize
 =0 || !
_ls_q
) { \

142 
_ls_e
 = 
_ls_p
; 
	`UTLIST_SV
(_ls_p,
li°
); _ls_p = \

143 
	`UTLIST_NEXT
(
_ls_p
,
li°
,
√xt
); 
	`UTLIST_RS
÷i°); 
_ls_psize
--; \

144 } i‡(
	`cmp
(
_ls_p
,
_ls_q
) <= 0) { \

145 
_ls_e
 = 
_ls_p
; 
	`UTLIST_SV
(_ls_p,
li°
); _ls_p = \

146 
	`UTLIST_NEXT
(
_ls_p
,
li°
,
√xt
); 
	`UTLIST_RS
÷i°); 
_ls_psize
--; \

148 
_ls_e
 = 
_ls_q
; 
	`UTLIST_SV
(_ls_q,
li°
); _ls_q = \

149 
	`UTLIST_NEXT
(
_ls_q
,
li°
,
√xt
); 
	`UTLIST_RS
÷i°); 
_ls_qsize
--; \

151 i‡(
_ls_èû
) { \

152 
	`UTLIST_SV
(
_ls_èû
,
li°
); 
	`UTLIST_NEXTASGN
(_ls_èû,li°,
_ls_e
,
√xt
); 
	`UTLIST_RS
(list); \

154 
	`UTLIST_CASTASGN
(
li°
,
_ls_e
); \

156 
_ls_èû
 = 
_ls_e
; \

158 
_ls_p
 = 
_ls_q
; \

160 i‡(
_ls_èû
) { \

161 
	`UTLIST_SV
(
_ls_èû
,
li°
); 
	`UTLIST_NEXTASGN
(_ls_èû,li°,
NULL
,
√xt
); 
	`UTLIST_RS
(list); \

163 i‡(
_ls_nmîges
 <= 1) { \

164 
_ls_lo›ög
=0; \

166 
_ls_ösize
 *= 2; \

169 } 0)

	)

172 
	#DL_SORT
(
li°
, 
cmp
) \

173 
	`DL_SORT2
(
li°
, 
cmp
, 
¥ev
, 
√xt
)

	)

175 
	#DL_SORT2
(
li°
, 
cmp
, 
¥ev
, 
√xt
) \

177 
	`LDECLTYPE
(
li°
Ë
_ls_p
; \

178 
	`LDECLTYPE
(
li°
Ë
_ls_q
; \

179 
	`LDECLTYPE
(
li°
Ë
_ls_e
; \

180 
	`LDECLTYPE
(
li°
Ë
_ls_èû
; \

181 
	`IF_NO_DECLTYPE
(
	`LDECLTYPE
(
li°
Ë
_tmp
;) \

182 
_ls_ösize
, 
_ls_nmîges
, 
_ls_psize
, 
_ls_qsize
, 
_ls_i
, 
_ls_lo›ög
; \

183 i‡(
li°
) { \

184 
_ls_ösize
 = 1; \

185 
_ls_lo›ög
 = 1; \

186 
_ls_lo›ög
) { \

187 
	`UTLIST_CASTASGN
(
_ls_p
,
li°
); \

188 (
li°
Ë
NULL
; \

189 
_ls_èû
 = 
NULL
; \

190 
_ls_nmîges
 = 0; \

191 
_ls_p
) { \

192 
_ls_nmîges
++; \

193 
_ls_q
 = 
_ls_p
; \

194 
_ls_psize
 = 0; \

195 
_ls_i
 = 0; _ls_ò< 
_ls_ösize
; _ls_i++) { \

196 
_ls_psize
++; \

197 
	`UTLIST_SV
(
_ls_q
,
li°
); _ls_q = 
	`UTLIST_NEXT
(_ls_q,li°,
√xt
); 
	`UTLIST_RS
(list); \

198 i‡(!
_ls_q
) ; \

200 
_ls_qsize
 = 
_ls_ösize
; \

201 (
_ls_psize
 > 0Ë|| ((
_ls_qsize
 > 0Ë&& 
_ls_q
)) { \

202 i‡(
_ls_psize
 == 0) { \

203 
_ls_e
 = 
_ls_q
; 
	`UTLIST_SV
(_ls_q,
li°
); _ls_q = \

204 
	`UTLIST_NEXT
(
_ls_q
,
li°
,
√xt
); 
	`UTLIST_RS
÷i°); 
_ls_qsize
--; \

205 } i‡((
_ls_qsize
 =0Ë|| (!
_ls_q
)) { \

206 
_ls_e
 = 
_ls_p
; 
	`UTLIST_SV
(_ls_p,
li°
); _ls_p = \

207 
	`UTLIST_NEXT
(
_ls_p
,
li°
,
√xt
); 
	`UTLIST_RS
÷i°); 
_ls_psize
--; \

208 } i‡(
	`cmp
(
_ls_p
,
_ls_q
) <= 0) { \

209 
_ls_e
 = 
_ls_p
; 
	`UTLIST_SV
(_ls_p,
li°
); _ls_p = \

210 
	`UTLIST_NEXT
(
_ls_p
,
li°
,
√xt
); 
	`UTLIST_RS
÷i°); 
_ls_psize
--; \

212 
_ls_e
 = 
_ls_q
; 
	`UTLIST_SV
(_ls_q,
li°
); _ls_q = \

213 
	`UTLIST_NEXT
(
_ls_q
,
li°
,
√xt
); 
	`UTLIST_RS
÷i°); 
_ls_qsize
--; \

215 i‡(
_ls_èû
) { \

216 
	`UTLIST_SV
(
_ls_èû
,
li°
); 
	`UTLIST_NEXTASGN
(_ls_èû,li°,
_ls_e
,
√xt
); 
	`UTLIST_RS
(list); \

218 
	`UTLIST_CASTASGN
(
li°
,
_ls_e
); \

220 
	`UTLIST_SV
(
_ls_e
,
li°
); 
	`UTLIST_PREVASGN
(_ls_e,li°,
_ls_èû
,
¥ev
); 
	`UTLIST_RS
(list); \

221 
_ls_èû
 = 
_ls_e
; \

223 
_ls_p
 = 
_ls_q
; \

225 
	`UTLIST_CASTASGN
((
li°
)->
¥ev
, 
_ls_èû
); \

226 
	`UTLIST_SV
(
_ls_èû
,
li°
); 
	`UTLIST_NEXTASGN
(_ls_èû,li°,
NULL
,
√xt
); 
	`UTLIST_RS
(list); \

227 i‡(
_ls_nmîges
 <= 1) { \

228 
_ls_lo›ög
=0; \

230 
_ls_ösize
 *= 2; \

233 } 0)

	)

235 
	#CDL_SORT
(
li°
, 
cmp
) \

236 
	`CDL_SORT2
(
li°
, 
cmp
, 
¥ev
, 
√xt
)

	)

238 
	#CDL_SORT2
(
li°
, 
cmp
, 
¥ev
, 
√xt
) \

240 
	`LDECLTYPE
(
li°
Ë
_ls_p
; \

241 
	`LDECLTYPE
(
li°
Ë
_ls_q
; \

242 
	`LDECLTYPE
(
li°
Ë
_ls_e
; \

243 
	`LDECLTYPE
(
li°
Ë
_ls_èû
; \

244 
	`LDECLTYPE
(
li°
Ë
_ls_ﬁdhód
; \

245 
	`LDECLTYPE
(
li°
Ë
_tmp
; \

246 
_ls_ösize
, 
_ls_nmîges
, 
_ls_psize
, 
_ls_qsize
, 
_ls_i
, 
_ls_lo›ög
; \

247 i‡(
li°
) { \

248 
_ls_ösize
 = 1; \

249 
_ls_lo›ög
 = 1; \

250 
_ls_lo›ög
) { \

251 
	`UTLIST_CASTASGN
(
_ls_p
,
li°
); \

252 
	`UTLIST_CASTASGN
(
_ls_ﬁdhód
,
li°
); \

253 (
li°
Ë
NULL
; \

254 
_ls_èû
 = 
NULL
; \

255 
_ls_nmîges
 = 0; \

256 
_ls_p
) { \

257 
_ls_nmîges
++; \

258 
_ls_q
 = 
_ls_p
; \

259 
_ls_psize
 = 0; \

260 
_ls_i
 = 0; _ls_ò< 
_ls_ösize
; _ls_i++) { \

261 
_ls_psize
++; \

262 
	`UTLIST_SV
(
_ls_q
,
li°
); \

263 i‡(
	`UTLIST_NEXT
(
_ls_q
,
li°
,
√xt
Ë=
_ls_ﬁdhód
) { \

264 
_ls_q
 = 
NULL
; \

266 
_ls_q
 = 
	`UTLIST_NEXT
(_ls_q,
li°
,
√xt
); \

268 
	`UTLIST_RS
(
li°
); \

269 i‡(!
_ls_q
) ; \

271 
_ls_qsize
 = 
_ls_ösize
; \

272 
_ls_psize
 > 0 || (
_ls_qsize
 > 0 && 
_ls_q
)) { \

273 i‡(
_ls_psize
 == 0) { \

274 
_ls_e
 = 
_ls_q
; 
	`UTLIST_SV
(_ls_q,
li°
); _ls_q = \

275 
	`UTLIST_NEXT
(
_ls_q
,
li°
,
√xt
); 
	`UTLIST_RS
÷i°); 
_ls_qsize
--; \

276 i‡(
_ls_q
 =
_ls_ﬁdhód
Ë{ _ls_q = 
NULL
; } \

277 } i‡(
_ls_qsize
 =0 || !
_ls_q
) { \

278 
_ls_e
 = 
_ls_p
; 
	`UTLIST_SV
(_ls_p,
li°
); _ls_p = \

279 
	`UTLIST_NEXT
(
_ls_p
,
li°
,
√xt
); 
	`UTLIST_RS
÷i°); 
_ls_psize
--; \

280 i‡(
_ls_p
 =
_ls_ﬁdhód
Ë{ _ls_∞
NULL
; } \

281 } i‡(
	`cmp
(
_ls_p
,
_ls_q
) <= 0) { \

282 
_ls_e
 = 
_ls_p
; 
	`UTLIST_SV
(_ls_p,
li°
); _ls_p = \

283 
	`UTLIST_NEXT
(
_ls_p
,
li°
,
√xt
); 
	`UTLIST_RS
÷i°); 
_ls_psize
--; \

284 i‡(
_ls_p
 =
_ls_ﬁdhód
Ë{ _ls_∞
NULL
; } \

286 
_ls_e
 = 
_ls_q
; 
	`UTLIST_SV
(_ls_q,
li°
); _ls_q = \

287 
	`UTLIST_NEXT
(
_ls_q
,
li°
,
√xt
); 
	`UTLIST_RS
÷i°); 
_ls_qsize
--; \

288 i‡(
_ls_q
 =
_ls_ﬁdhód
Ë{ _ls_q = 
NULL
; } \

290 i‡(
_ls_èû
) { \

291 
	`UTLIST_SV
(
_ls_èû
,
li°
); 
	`UTLIST_NEXTASGN
(_ls_èû,li°,
_ls_e
,
√xt
); 
	`UTLIST_RS
(list); \

293 
	`UTLIST_CASTASGN
(
li°
,
_ls_e
); \

295 
	`UTLIST_SV
(
_ls_e
,
li°
); 
	`UTLIST_PREVASGN
(_ls_e,li°,
_ls_èû
,
¥ev
); 
	`UTLIST_RS
(list); \

296 
_ls_èû
 = 
_ls_e
; \

298 
_ls_p
 = 
_ls_q
; \

300 
	`UTLIST_CASTASGN
((
li°
)->
¥ev
,
_ls_èû
); \

301 
	`UTLIST_CASTASGN
(
_tmp
,
li°
); \

302 
	`UTLIST_SV
(
_ls_èû
,
li°
); 
	`UTLIST_NEXTASGN
(_ls_èû,li°,
_tmp
,
√xt
); 
	`UTLIST_RS
(list); \

303 i‡(
_ls_nmîges
 <= 1) { \

304 
_ls_lo›ög
=0; \

306 
_ls_ösize
 *= 2; \

309 } 0)

	)

314 
	#LL_PREPEND
(
hód
,
add
) \

315 
	`LL_PREPEND2
(
hód
,
add
,
√xt
)

	)

317 
	#LL_PREPEND2
(
hód
,
add
,
√xt
) \

319 (
add
)->
√xt
 = (
hód
); \

320 (
hód
Ë(
add
); \

321 } 0)

	)

323 
	#LL_CONCAT
(
hód1
,
hód2
) \

324 
	`LL_CONCAT2
(
hód1
,
hód2
,
√xt
)

	)

326 
	#LL_CONCAT2
(
hód1
,
hód2
,
√xt
) \

328 
	`LDECLTYPE
(
hód1
Ë
_tmp
; \

329 i‡(
hód1
) { \

330 
_tmp
 = (
hód1
); \

331 
_tmp
->
√xt
) { _tmp = _tmp->next; } \

332 
_tmp
->
√xt
=(
hód2
); \

334 (
hód1
)=(
hód2
); \

336 } 0)

	)

338 
	#LL_APPEND
(
hód
,
add
) \

339 
	`LL_APPEND2
(
hód
,
add
,
√xt
)

	)

341 
	#LL_APPEND2
(
hód
,
add
,
√xt
) \

343 
	`LDECLTYPE
(
hód
Ë
_tmp
; \

344 (
add
)->
√xt
=
NULL
; \

345 i‡(
hód
) { \

346 
_tmp
 = (
hód
); \

347 
_tmp
->
√xt
) { _tmp = _tmp->next; } \

348 
_tmp
->
√xt
=(
add
); \

350 (
hód
)=(
add
); \

352 } 0)

	)

354 
	#LL_INSERT_INORDER
(
hód
,
add
,
cmp
) \

355 
	`LL_INSERT_INORDER2
(
hód
,
add
,
cmp
,
√xt
)

	)

357 
	#LL_INSERT_INORDER2
(
hód
,
add
,
cmp
,
√xt
) \

359 
	`LDECLTYPE
(
hód
Ë
_tmp
; \

360 i‡(
hód
) { \

361 
	`LL_LOWER_BOUND2
(
hód
, 
_tmp
, 
add
, 
cmp
, 
√xt
); \

362 
	`LL_APPEND_ELEM2
(
hód
, 
_tmp
, 
add
, 
√xt
); \

364 (
hód
Ë(
add
); \

365 (
hód
)->
√xt
 = 
NULL
; \

367 } 0)

	)

369 
	#LL_LOWER_BOUND
(
hód
,
ñt
,
like
,
cmp
) \

370 
	`LL_LOWER_BOUND2
(
hód
,
ñt
,
like
,
cmp
,
√xt
)

	)

372 
	#LL_LOWER_BOUND2
(
hód
,
ñt
,
like
,
cmp
,
√xt
) \

374 i‡((
hód
Ë=
NULL
 || (
	`cmp
(hód, 
like
)) >= 0) { \

375 (
ñt
Ë
NULL
; \

377 (
ñt
Ë(
hód
); (ñt)->
√xt
 !
NULL
; (elt) = (elt)->next) { \

378 i‡(
	`cmp
((
ñt
)->
√xt
, 
like
) >= 0) { \

383 } 0)

	)

385 
	#LL_DELETE
(
hód
,
dñ
) \

386 
	`LL_DELETE2
(
hód
,
dñ
,
√xt
)

	)

388 
	#LL_DELETE2
(
hód
,
dñ
,
√xt
) \

390 
	`LDECLTYPE
(
hód
Ë
_tmp
; \

391 i‡((
hód
Ë=(
dñ
)) { \

392 (
hód
)=(hód)->
√xt
; \

394 
_tmp
 = (
hód
); \

395 
_tmp
->
√xt
 && (_tmp->√xà!(
dñ
))) { \

396 
_tmp
 = _tmp->
√xt
; \

398 i‡(
_tmp
->
√xt
) { \

399 
_tmp
->
√xt
 = (
dñ
)->next; \

402 } 0)

	)

404 
	#LL_COUNT
(
hód
,
ñ
,
cou¡î
) \

405 
	`LL_COUNT2
(
hód
,
ñ
,
cou¡î
,
√xt
) \

406 

	)

407 
	#LL_COUNT2
(
hód
,
ñ
,
cou¡î
,
√xt
) \

409 (
cou¡î
) = 0; \

410 
	`LL_FOREACH2
(
hód
,
ñ
,
√xt
Ë{ ++(
cou¡î
); } \

411 } 0)

	)

413 
	#LL_FOREACH
(
hód
,
ñ
) \

414 
	`LL_FOREACH2
(
hód
,
ñ
,
√xt
)

	)

416 
	#LL_FOREACH2
(
hód
,
ñ
,
√xt
) \

417 (
ñ
Ë(
hód
);Él; (ñË”l)->
√xt
)

	)

419 
	#LL_FOREACH_SAFE
(
hód
,
ñ
,
tmp
) \

420 
	`LL_FOREACH_SAFE2
(
hód
,
ñ
,
tmp
,
√xt
)

	)

422 
	#LL_FOREACH_SAFE2
(
hód
,
ñ
,
tmp
,
√xt
) \

423 (
ñ
Ë(
hód
); (ñË&& ((
tmp
Ë”l)->
√xt
, 1); (ñË—mp))

	)

425 
	#LL_SEARCH_SCALAR
(
hód
,
out
,
fõld
,
vÆ
) \

426 
	`LL_SEARCH_SCALAR2
(
hód
,
out
,
fõld
,
vÆ
,
√xt
)

	)

428 
	#LL_SEARCH_SCALAR2
(
hód
,
out
,
fõld
,
vÆ
,
√xt
) \

430 
	`LL_FOREACH2
(
hód
,
out
,
√xt
) { \

431 i‡((
out
)->
fõld
 =(
vÆ
)) ; \

433 } 0)

	)

435 
	#LL_SEARCH
(
hód
,
out
,
ñt
,
cmp
) \

436 
	`LL_SEARCH2
(
hód
,
out
,
ñt
,
cmp
,
√xt
)

	)

438 
	#LL_SEARCH2
(
hód
,
out
,
ñt
,
cmp
,
√xt
) \

440 
	`LL_FOREACH2
(
hód
,
out
,
√xt
) { \

441 i‡((
	`cmp
(
out
,
ñt
))==0) ; \

443 } 0)

	)

445 
	#LL_REPLACE_ELEM2
(
hód
, 
ñ
, 
add
, 
√xt
) \

447 
	`LDECLTYPE
(
hód
Ë
_tmp
; \

448 
	`as£π
((
hód
Ë!
NULL
); \

449 
	`as£π
((
ñ
Ë!
NULL
); \

450 
	`as£π
((
add
Ë!
NULL
); \

451 (
add
)->
√xt
 = (
ñ
)->next; \

452 i‡((
hód
Ë=(
ñ
)) { \

453 (
hód
Ë(
add
); \

455 
_tmp
 = (
hód
); \

456 
_tmp
->
√xt
 && (_tmp->√xà!(
ñ
))) { \

457 
_tmp
 = _tmp->
√xt
; \

459 i‡(
_tmp
->
√xt
) { \

460 
_tmp
->
√xt
 = (
add
); \

463 } 0)

	)

465 
	#LL_REPLACE_ELEM
(
hód
, 
ñ
, 
add
) \

466 
	`LL_REPLACE_ELEM2
(
hód
, 
ñ
, 
add
, 
√xt
)

	)

468 
	#LL_PREPEND_ELEM2
(
hód
, 
ñ
, 
add
, 
√xt
) \

470 i‡(
ñ
) { \

471 
	`LDECLTYPE
(
hód
Ë
_tmp
; \

472 
	`as£π
((
hód
Ë!
NULL
); \

473 
	`as£π
((
add
Ë!
NULL
); \

474 (
add
)->
√xt
 = (
ñ
); \

475 i‡((
hód
Ë=(
ñ
)) { \

476 (
hód
Ë(
add
); \

478 
_tmp
 = (
hód
); \

479 
_tmp
->
√xt
 && (_tmp->√xà!(
ñ
))) { \

480 
_tmp
 = _tmp->
√xt
; \

482 i‡(
_tmp
->
√xt
) { \

483 
_tmp
->
√xt
 = (
add
); \

487 
	`LL_APPEND2
(
hód
, 
add
, 
√xt
); \

490 

	)

491 
	#LL_PREPEND_ELEM
(
hód
, 
ñ
, 
add
) \

492 
	`LL_PREPEND_ELEM2
(
hód
, 
ñ
, 
add
, 
√xt
)

	)

494 
	#LL_APPEND_ELEM2
(
hód
, 
ñ
, 
add
, 
√xt
) \

496 i‡(
ñ
) { \

497 
	`as£π
((
hód
Ë!
NULL
); \

498 
	`as£π
((
add
Ë!
NULL
); \

499 (
add
)->
√xt
 = (
ñ
)->next; \

500 (
ñ
)->
√xt
 = (
add
); \

502 
	`LL_PREPEND2
(
hód
, 
add
, 
√xt
); \

505 

	)

506 
	#LL_APPEND_ELEM
(
hód
, 
ñ
, 
add
) \

507 
	`LL_APPEND_ELEM2
(
hód
, 
ñ
, 
add
, 
√xt
)

	)

509 #ifde‡
NO_DECLTYPE


512 #unde‡
LL_CONCAT2


513 
	#LL_CONCAT2
(
hód1
,
hód2
,
√xt
) \

515 *
_tmp
; \

516 i‡(
hód1
) { \

517 
_tmp
 = (*)(
hód1
); \

518 (
hód1
)->
√xt
) { (head1) = (head1)->next; } \

519 (
hód1
)->
√xt
 = (
hód2
); \

520 
	`UTLIST_RS
(
hód1
); \

522 (
hód1
)=(
hód2
); \

524 } 0)

	)

526 #unde‡
LL_APPEND2


527 
	#LL_APPEND2
(
hód
,
add
,
√xt
) \

529 i‡(
hód
) { \

530 (
add
)->
√xt
 = 
hód
; \

531 (
add
)->
√xt
->next) { (add)->next = (add)->next->next; } \

532 (
add
)->
√xt
->next=(add); \

534 (
hód
)=(
add
); \

536 (
add
)->
√xt
=
NULL
; \

537 } 0)

	)

539 #unde‡
LL_INSERT_INORDER2


540 
	#LL_INSERT_INORDER2
(
hód
,
add
,
cmp
,
√xt
) \

542 i‡((
hód
Ë=
NULL
 || (
	`cmp
(hód, 
add
)) >= 0) { \

543 (
add
)->
√xt
 = (
hód
); \

544 (
hód
Ë(
add
); \

546 *
_tmp
 = (*)(
hód
); \

547 (
hód
)->
√xt
 !
NULL
 && (
	`cmp
((hód)->√xt, 
add
)) < 0) { \

548 (
hód
Ë(hód)->
√xt
; \

550 (
add
)->
√xt
 = (
hód
)->next; \

551 (
hód
)->
√xt
 = (
add
); \

552 
	`UTLIST_RS
(
hód
); \

554 } 0)

	)

556 #unde‡
LL_DELETE2


557 
	#LL_DELETE2
(
hód
,
dñ
,
√xt
) \

559 i‡((
hód
Ë=(
dñ
)) { \

560 (
hód
)=(hód)->
√xt
; \

562 *
_tmp
 = (*)(
hód
); \

563 (
hód
)->
√xt
 && ((hód)->√xà!(
dñ
))) { \

564 (
hód
Ë(hód)->
√xt
; \

566 i‡((
hód
)->
√xt
) { \

567 (
hód
)->
√xt
 = ((
dñ
)->next); \

569 
	`UTLIST_RS
(
hód
); \

571 } 0)

	)

573 #unde‡
LL_REPLACE_ELEM2


574 
	#LL_REPLACE_ELEM2
(
hód
, 
ñ
, 
add
, 
√xt
) \

576 
	`as£π
((
hód
Ë!
NULL
); \

577 
	`as£π
((
ñ
Ë!
NULL
); \

578 
	`as£π
((
add
Ë!
NULL
); \

579 i‡((
hód
Ë=(
ñ
)) { \

580 (
hód
Ë(
add
); \

582 (
add
)->
√xt
 = 
hód
; \

583 (
add
)->
√xt
->√xà&& (◊dd)->√xt->√xà!(
ñ
))) { \

584 (
add
)->
√xt
 = (add)->next->next; \

586 i‡((
add
)->
√xt
->next) { \

587 (
add
)->
√xt
->next = (add); \

590 (
add
)->
√xt
 = (
ñ
)->next; \

591 } 0)

	)

593 #unde‡
LL_PREPEND_ELEM2


594 
	#LL_PREPEND_ELEM2
(
hód
, 
ñ
, 
add
, 
√xt
) \

596 i‡(
ñ
) { \

597 
	`as£π
((
hód
Ë!
NULL
); \

598 
	`as£π
((
add
Ë!
NULL
); \

599 i‡((
hód
Ë=(
ñ
)) { \

600 (
hód
Ë(
add
); \

602 (
add
)->
√xt
 = (
hód
); \

603 (
add
)->
√xt
->√xà&& (◊dd)->√xt->√xà!(
ñ
))) { \

604 (
add
)->
√xt
 = (add)->next->next; \

606 i‡((
add
)->
√xt
->next) { \

607 (
add
)->
√xt
->next = (add); \

610 (
add
)->
√xt
 = (
ñ
); \

612 
	`LL_APPEND2
(
hód
, 
add
, 
√xt
); \

615 

	)

621 
	#DL_PREPEND
(
hód
,
add
) \

622 
	`DL_PREPEND2
(
hód
,
add
,
¥ev
,
√xt
)

	)

624 
	#DL_PREPEND2
(
hód
,
add
,
¥ev
,
√xt
) \

626 (
add
)->
√xt
 = (
hód
); \

627 i‡(
hód
) { \

628 (
add
)->
¥ev
 = (
hód
)->prev; \

629 (
hód
)->
¥ev
 = (
add
); \

631 (
add
)->
¥ev
 = (add); \

633 (
hód
Ë(
add
); \

634 } 0)

	)

636 
	#DL_APPEND
(
hód
,
add
) \

637 
	`DL_APPEND2
(
hód
,
add
,
¥ev
,
√xt
)

	)

639 
	#DL_APPEND2
(
hód
,
add
,
¥ev
,
√xt
) \

641 i‡(
hód
) { \

642 (
add
)->
¥ev
 = (
hód
)->prev; \

643 (
hód
)->
¥ev
->
√xt
 = (
add
); \

644 (
hód
)->
¥ev
 = (
add
); \

645 (
add
)->
√xt
 = 
NULL
; \

647 (
hód
)=(
add
); \

648 (
hód
)->
¥ev
 = (head); \

649 (
hód
)->
√xt
 = 
NULL
; \

651 } 0)

	)

653 
	#DL_INSERT_INORDER
(
hód
,
add
,
cmp
) \

654 
	`DL_INSERT_INORDER2
(
hód
,
add
,
cmp
,
¥ev
,
√xt
)

	)

656 
	#DL_INSERT_INORDER2
(
hód
,
add
,
cmp
,
¥ev
,
√xt
) \

658 
	`LDECLTYPE
(
hód
Ë
_tmp
; \

659 i‡(
hód
) { \

660 
	`DL_LOWER_BOUND2
(
hód
, 
_tmp
, 
add
, 
cmp
, 
√xt
); \

661 
	`DL_APPEND_ELEM2
(
hód
, 
_tmp
, 
add
, 
¥ev
, 
√xt
); \

663 (
hód
Ë(
add
); \

664 (
hód
)->
¥ev
 = (head); \

665 (
hód
)->
√xt
 = 
NULL
; \

667 } 0)

	)

669 
	#DL_LOWER_BOUND
(
hód
,
ñt
,
like
,
cmp
) \

670 
	`DL_LOWER_BOUND2
(
hód
,
ñt
,
like
,
cmp
,
√xt
)

	)

672 
	#DL_LOWER_BOUND2
(
hód
,
ñt
,
like
,
cmp
,
√xt
) \

674 i‡((
hód
Ë=
NULL
 || (
	`cmp
(hód, 
like
)) >= 0) { \

675 (
ñt
Ë
NULL
; \

677 (
ñt
Ë(
hód
); (ñt)->
√xt
 !
NULL
; (elt) = (elt)->next) { \

678 i‡((
	`cmp
((
ñt
)->
√xt
, 
like
)) >= 0) { \

683 } 0)

	)

685 
	#DL_CONCAT
(
hód1
,
hód2
) \

686 
	`DL_CONCAT2
(
hód1
,
hód2
,
¥ev
,
√xt
)

	)

688 
	#DL_CONCAT2
(
hód1
,
hód2
,
¥ev
,
√xt
) \

690 
	`LDECLTYPE
(
hód1
Ë
_tmp
; \

691 i‡(
hód2
) { \

692 i‡(
hód1
) { \

693 
	`UTLIST_CASTASGN
(
_tmp
, (
hód2
)->
¥ev
); \

694 (
hód2
)->
¥ev
 = (
hód1
)->prev; \

695 (
hód1
)->
¥ev
->
√xt
 = (
hód2
); \

696 
	`UTLIST_CASTASGN
((
hód1
)->
¥ev
, 
_tmp
); \

698 (
hód1
)=(
hód2
); \

701 } 0)

	)

703 
	#DL_DELETE
(
hód
,
dñ
) \

704 
	`DL_DELETE2
(
hód
,
dñ
,
¥ev
,
√xt
)

	)

706 
	#DL_DELETE2
(
hód
,
dñ
,
¥ev
,
√xt
) \

708 
	`as£π
((
hód
Ë!
NULL
); \

709 
	`as£π
((
dñ
)->
¥ev
 !
NULL
); \

710 i‡((
dñ
)->
¥ev
 == (del)) { \

711 (
hód
)=
NULL
; \

712 } i‡((
dñ
)==(
hód
)) { \

713 (
dñ
)->
√xt
->
¥ev
 = (del)->prev; \

714 (
hód
Ë(
dñ
)->
√xt
; \

716 (
dñ
)->
¥ev
->
√xt
 = (del)->next; \

717 i‡((
dñ
)->
√xt
) { \

718 (
dñ
)->
√xt
->
¥ev
 = (del)->prev; \

720 (
hód
)->
¥ev
 = (
dñ
)->prev; \

723 } 0)

	)

725 
	#DL_COUNT
(
hód
,
ñ
,
cou¡î
) \

726 
	`DL_COUNT2
(
hód
,
ñ
,
cou¡î
,
√xt
) \

727 

	)

728 
	#DL_COUNT2
(
hód
,
ñ
,
cou¡î
,
√xt
) \

730 (
cou¡î
) = 0; \

731 
	`DL_FOREACH2
(
hód
,
ñ
,
√xt
Ë{ ++(
cou¡î
); } \

732 } 0)

	)

734 
	#DL_FOREACH
(
hód
,
ñ
) \

735 
	`DL_FOREACH2
(
hód
,
ñ
,
√xt
)

	)

737 
	#DL_FOREACH2
(
hód
,
ñ
,
√xt
) \

738 (
ñ
Ë(
hód
);Él; (ñË”l)->
√xt
)

	)

741 
	#DL_FOREACH_SAFE
(
hód
,
ñ
,
tmp
) \

742 
	`DL_FOREACH_SAFE2
(
hód
,
ñ
,
tmp
,
√xt
)

	)

744 
	#DL_FOREACH_SAFE2
(
hód
,
ñ
,
tmp
,
√xt
) \

745 (
ñ
Ë(
hód
); (ñË&& ((
tmp
Ë”l)->
√xt
, 1); (ñË—mp))

	)

748 
	#DL_SEARCH_SCALAR
 
LL_SEARCH_SCALAR


	)

749 
	#DL_SEARCH
 
LL_SEARCH


	)

750 
	#DL_SEARCH_SCALAR2
 
LL_SEARCH_SCALAR2


	)

751 
	#DL_SEARCH2
 
LL_SEARCH2


	)

753 
	#DL_REPLACE_ELEM2
(
hód
, 
ñ
, 
add
, 
¥ev
, 
√xt
) \

755 
	`as£π
((
hód
Ë!
NULL
); \

756 
	`as£π
((
ñ
Ë!
NULL
); \

757 
	`as£π
((
add
Ë!
NULL
); \

758 i‡((
hód
Ë=(
ñ
)) { \

759 (
hód
Ë(
add
); \

760 (
add
)->
√xt
 = (
ñ
)->next; \

761 i‡((
ñ
)->
√xt
 =
NULL
) { \

762 (
add
)->
¥ev
 = (add); \

764 (
add
)->
¥ev
 = (
ñ
)->prev; \

765 (
add
)->
√xt
->
¥ev
 = (add); \

768 (
add
)->
√xt
 = (
ñ
)->next; \

769 (
add
)->
¥ev
 = (
ñ
)->prev; \

770 (
add
)->
¥ev
->
√xt
 = (add); \

771 i‡((
ñ
)->
√xt
 =
NULL
) { \

772 (
hód
)->
¥ev
 = (
add
); \

774 (
add
)->
√xt
->
¥ev
 = (add); \

777 } 0)

	)

779 
	#DL_REPLACE_ELEM
(
hód
, 
ñ
, 
add
) \

780 
	`DL_REPLACE_ELEM2
(
hód
, 
ñ
, 
add
, 
¥ev
, 
√xt
)

	)

782 
	#DL_PREPEND_ELEM2
(
hód
, 
ñ
, 
add
, 
¥ev
, 
√xt
) \

784 i‡(
ñ
) { \

785 
	`as£π
((
hód
Ë!
NULL
); \

786 
	`as£π
((
add
Ë!
NULL
); \

787 (
add
)->
√xt
 = (
ñ
); \

788 (
add
)->
¥ev
 = (
ñ
)->prev; \

789 (
ñ
)->
¥ev
 = (
add
); \

790 i‡((
hód
Ë=(
ñ
)) { \

791 (
hód
Ë(
add
); \

793 (
add
)->
¥ev
->
√xt
 = (add); \

796 
	`DL_APPEND2
(
hód
, 
add
, 
¥ev
, 
√xt
); \

799 

	)

800 
	#DL_PREPEND_ELEM
(
hód
, 
ñ
, 
add
) \

801 
	`DL_PREPEND_ELEM2
(
hód
, 
ñ
, 
add
, 
¥ev
, 
√xt
)

	)

803 
	#DL_APPEND_ELEM2
(
hód
, 
ñ
, 
add
, 
¥ev
, 
√xt
) \

805 i‡(
ñ
) { \

806 
	`as£π
((
hód
Ë!
NULL
); \

807 
	`as£π
((
add
Ë!
NULL
); \

808 (
add
)->
√xt
 = (
ñ
)->next; \

809 (
add
)->
¥ev
 = (
ñ
); \

810 (
ñ
)->
√xt
 = (
add
); \

811 i‡((
add
)->
√xt
) { \

812 (
add
)->
√xt
->
¥ev
 = (add); \

814 (
hód
)->
¥ev
 = (
add
); \

817 
	`DL_PREPEND2
(
hód
, 
add
, 
¥ev
, 
√xt
); \

820 

	)

821 
	#DL_APPEND_ELEM
(
hód
, 
ñ
, 
add
) \

822 
	`DL_APPEND_ELEM2
(
hód
, 
ñ
, 
add
, 
¥ev
, 
√xt
)

	)

824 #ifde‡
NO_DECLTYPE


827 #unde‡
DL_INSERT_INORDER2


828 
	#DL_INSERT_INORDER2
(
hód
,
add
,
cmp
,
¥ev
,
√xt
) \

830 i‡((
hód
Ë=
NULL
) { \

831 (
add
)->
¥ev
 = (add); \

832 (
add
)->
√xt
 = 
NULL
; \

833 (
hód
Ë(
add
); \

834 } i‡((
	`cmp
(
hód
, 
add
)) >= 0) { \

835 (
add
)->
¥ev
 = (
hód
)->prev; \

836 (
add
)->
√xt
 = (
hód
); \

837 (
hód
)->
¥ev
 = (
add
); \

838 (
hód
Ë(
add
); \

840 *
_tmp
 = (*)(
hód
); \

841 (
hód
)->
√xt
 && (
	`cmp
((hód)->√xt, 
add
)) < 0) { \

842 (
hód
Ë(hód)->
√xt
; \

844 (
add
)->
¥ev
 = (
hód
); \

845 (
add
)->
√xt
 = (
hód
)->next; \

846 (
hód
)->
√xt
 = (
add
); \

847 
	`UTLIST_RS
(
hód
); \

848 i‡((
add
)->
√xt
) { \

849 (
add
)->
√xt
->
¥ev
 = (add); \

851 (
hód
)->
¥ev
 = (
add
); \

854 } 0)

	)

860 
	#CDL_APPEND
(
hód
,
add
) \

861 
	`CDL_APPEND2
(
hód
,
add
,
¥ev
,
√xt
)

	)

863 
	#CDL_APPEND2
(
hód
,
add
,
¥ev
,
√xt
) \

865 i‡(
hód
) { \

866 (
add
)->
¥ev
 = (
hód
)->prev; \

867 (
add
)->
√xt
 = (
hód
); \

868 (
hód
)->
¥ev
 = (
add
); \

869 (
add
)->
¥ev
->
√xt
 = (add); \

871 (
add
)->
¥ev
 = (add); \

872 (
add
)->
√xt
 = (add); \

873 (
hód
Ë(
add
); \

875 } 0)

	)

877 
	#CDL_PREPEND
(
hód
,
add
) \

878 
	`CDL_PREPEND2
(
hód
,
add
,
¥ev
,
√xt
)

	)

880 
	#CDL_PREPEND2
(
hód
,
add
,
¥ev
,
√xt
) \

882 i‡(
hód
) { \

883 (
add
)->
¥ev
 = (
hód
)->prev; \

884 (
add
)->
√xt
 = (
hód
); \

885 (
hód
)->
¥ev
 = (
add
); \

886 (
add
)->
¥ev
->
√xt
 = (add); \

888 (
add
)->
¥ev
 = (add); \

889 (
add
)->
√xt
 = (add); \

891 (
hód
Ë(
add
); \

892 } 0)

	)

894 
	#CDL_INSERT_INORDER
(
hód
,
add
,
cmp
) \

895 
	`CDL_INSERT_INORDER2
(
hód
,
add
,
cmp
,
¥ev
,
√xt
)

	)

897 
	#CDL_INSERT_INORDER2
(
hód
,
add
,
cmp
,
¥ev
,
√xt
) \

899 
	`LDECLTYPE
(
hód
Ë
_tmp
; \

900 i‡(
hód
) { \

901 
	`CDL_LOWER_BOUND2
(
hód
, 
_tmp
, 
add
, 
cmp
, 
√xt
); \

902 
	`CDL_APPEND_ELEM2
(
hód
, 
_tmp
, 
add
, 
¥ev
, 
√xt
); \

904 (
hód
Ë(
add
); \

905 (
hód
)->
√xt
 = (head); \

906 (
hód
)->
¥ev
 = (head); \

908 } 0)

	)

910 
	#CDL_LOWER_BOUND
(
hód
,
ñt
,
like
,
cmp
) \

911 
	`CDL_LOWER_BOUND2
(
hód
,
ñt
,
like
,
cmp
,
√xt
)

	)

913 
	#CDL_LOWER_BOUND2
(
hód
,
ñt
,
like
,
cmp
,
√xt
) \

915 i‡((
hód
Ë=
NULL
 || (
	`cmp
(hód, 
like
)) >= 0) { \

916 (
ñt
Ë
NULL
; \

918 (
ñt
Ë(
hód
); (ñt)->
√xt
 != (head); (elt) = (elt)->next) { \

919 i‡((
	`cmp
((
ñt
)->
√xt
, 
like
)) >= 0) { \

924 } 0)

	)

926 
	#CDL_DELETE
(
hód
,
dñ
) \

927 
	`CDL_DELETE2
(
hód
,
dñ
,
¥ev
,
√xt
)

	)

929 
	#CDL_DELETE2
(
hód
,
dñ
,
¥ev
,
√xt
) \

931 i‡(((
hód
)==(
dñ
)Ë&& ((hód)->
√xt
 == (head))) { \

932 (
hód
Ë
NULL
; \

934 (
dñ
)->
√xt
->
¥ev
 = (del)->prev; \

935 (
dñ
)->
¥ev
->
√xt
 = (del)->next; \

936 i‡((
dñ
Ë=(
hód
)Ë(hód)=(dñ)->
√xt
; \

938 } 0)

	)

940 
	#CDL_COUNT
(
hód
,
ñ
,
cou¡î
) \

941 
	`CDL_COUNT2
(
hód
,
ñ
,
cou¡î
,
√xt
) \

942 

	)

943 
	#CDL_COUNT2
(
hód
, 
ñ
, 
cou¡î
,
√xt
) \

945 (
cou¡î
) = 0; \

946 
	`CDL_FOREACH2
(
hód
,
ñ
,
√xt
Ë{ ++(
cou¡î
); } \

947 } 0)

	)

949 
	#CDL_FOREACH
(
hód
,
ñ
) \

950 
	`CDL_FOREACH2
(
hód
,
ñ
,
√xt
)

	)

952 
	#CDL_FOREACH2
(
hód
,
ñ
,
√xt
) \

953 (
ñ
)=(
hód
);ñ;”l)=((”l)->
√xt
==(hód)Ë? 
NULL
 : (ñ)->√xt))

	)

955 
	#CDL_FOREACH_SAFE
(
hód
,
ñ
,
tmp1
,
tmp2
) \

956 
	`CDL_FOREACH_SAFE2
(
hód
,
ñ
,
tmp1
,
tmp2
,
¥ev
,
√xt
)

	)

958 
	#CDL_FOREACH_SAFE2
(
hód
,
ñ
,
tmp1
,
tmp2
,
¥ev
,
√xt
) \

959 (
ñ
Ë(
hód
), (
tmp1
Ë(hódË? (hód)->
¥ev
 : 
NULL
; \

960 (
ñ
Ë&& ((
tmp2
Ë”l)->
√xt
, 1); \

961 (
ñ
Ë(”lË=(
tmp1
Ë? 
NULL
 : (
tmp2
)))

	)

963 
	#CDL_SEARCH_SCALAR
(
hód
,
out
,
fõld
,
vÆ
) \

964 
	`CDL_SEARCH_SCALAR2
(
hód
,
out
,
fõld
,
vÆ
,
√xt
)

	)

966 
	#CDL_SEARCH_SCALAR2
(
hód
,
out
,
fõld
,
vÆ
,
√xt
) \

968 
	`CDL_FOREACH2
(
hód
,
out
,
√xt
) { \

969 i‡((
out
)->
fõld
 =(
vÆ
)) ; \

971 } 0)

	)

973 
	#CDL_SEARCH
(
hód
,
out
,
ñt
,
cmp
) \

974 
	`CDL_SEARCH2
(
hód
,
out
,
ñt
,
cmp
,
√xt
)

	)

976 
	#CDL_SEARCH2
(
hód
,
out
,
ñt
,
cmp
,
√xt
) \

978 
	`CDL_FOREACH2
(
hód
,
out
,
√xt
) { \

979 i‡((
	`cmp
(
out
,
ñt
))==0) ; \

981 } 0)

	)

983 
	#CDL_REPLACE_ELEM2
(
hód
, 
ñ
, 
add
, 
¥ev
, 
√xt
) \

985 
	`as£π
((
hód
Ë!
NULL
); \

986 
	`as£π
((
ñ
Ë!
NULL
); \

987 
	`as£π
((
add
Ë!
NULL
); \

988 i‡((
ñ
)->
√xt
 == (el)) { \

989 (
add
)->
√xt
 = (add); \

990 (
add
)->
¥ev
 = (add); \

991 (
hód
Ë(
add
); \

993 (
add
)->
√xt
 = (
ñ
)->next; \

994 (
add
)->
¥ev
 = (
ñ
)->prev; \

995 (
add
)->
√xt
->
¥ev
 = (add); \

996 (
add
)->
¥ev
->
√xt
 = (add); \

997 i‡((
hód
Ë=(
ñ
)) { \

998 (
hód
Ë(
add
); \

1001 } 0)

	)

1003 
	#CDL_REPLACE_ELEM
(
hód
, 
ñ
, 
add
) \

1004 
	`CDL_REPLACE_ELEM2
(
hód
, 
ñ
, 
add
, 
¥ev
, 
√xt
)

	)

1006 
	#CDL_PREPEND_ELEM2
(
hód
, 
ñ
, 
add
, 
¥ev
, 
√xt
) \

1008 i‡(
ñ
) { \

1009 
	`as£π
((
hód
Ë!
NULL
); \

1010 
	`as£π
((
add
Ë!
NULL
); \

1011 (
add
)->
√xt
 = (
ñ
); \

1012 (
add
)->
¥ev
 = (
ñ
)->prev; \

1013 (
ñ
)->
¥ev
 = (
add
); \

1014 (
add
)->
¥ev
->
√xt
 = (add); \

1015 i‡((
hód
Ë=(
ñ
)) { \

1016 (
hód
Ë(
add
); \

1019 
	`CDL_APPEND2
(
hód
, 
add
, 
¥ev
, 
√xt
); \

1021 } 0)

	)

1023 
	#CDL_PREPEND_ELEM
(
hód
, 
ñ
, 
add
) \

1024 
	`CDL_PREPEND_ELEM2
(
hód
, 
ñ
, 
add
, 
¥ev
, 
√xt
)

	)

1026 
	#CDL_APPEND_ELEM2
(
hód
, 
ñ
, 
add
, 
¥ev
, 
√xt
) \

1028 i‡(
ñ
) { \

1029 
	`as£π
((
hód
Ë!
NULL
); \

1030 
	`as£π
((
add
Ë!
NULL
); \

1031 (
add
)->
√xt
 = (
ñ
)->next; \

1032 (
add
)->
¥ev
 = (
ñ
); \

1033 (
ñ
)->
√xt
 = (
add
); \

1034 (
add
)->
√xt
->
¥ev
 = (add); \

1036 
	`CDL_PREPEND2
(
hód
, 
add
, 
¥ev
, 
√xt
); \

1038 } 0)

	)

1040 
	#CDL_APPEND_ELEM
(
hód
, 
ñ
, 
add
) \

1041 
	`CDL_APPEND_ELEM2
(
hód
, 
ñ
, 
add
, 
¥ev
, 
√xt
)

	)

1043 #ifde‡
NO_DECLTYPE


1046 #unde‡
CDL_INSERT_INORDER2


1047 
	#CDL_INSERT_INORDER2
(
hód
,
add
,
cmp
,
¥ev
,
√xt
) \

1049 i‡((
hód
Ë=
NULL
) { \

1050 (
add
)->
¥ev
 = (add); \

1051 (
add
)->
√xt
 = (add); \

1052 (
hód
Ë(
add
); \

1053 } i‡((
	`cmp
(
hód
, 
add
)) >= 0) { \

1054 (
add
)->
¥ev
 = (
hód
)->prev; \

1055 (
add
)->
√xt
 = (
hód
); \

1056 (
add
)->
¥ev
->
√xt
 = (add); \

1057 (
hód
)->
¥ev
 = (
add
); \

1058 (
hód
Ë(
add
); \

1060 *
_tmp
 = (*)(
hód
); \

1061 (*)(
hód
)->
√xt
 !
_tmp
 && (
	`cmp
((hód)->√xt, 
add
)) < 0) { \

1062 (
hód
Ë(hód)->
√xt
; \

1064 (
add
)->
¥ev
 = (
hód
); \

1065 (
add
)->
√xt
 = (
hód
)->next; \

1066 (
add
)->
√xt
->
¥ev
 = (add); \

1067 (
hód
)->
√xt
 = (
add
); \

1068 
	`UTLIST_RS
(
hód
); \

1070 } 0)

	)

	@open_source_lib/mosquitto/mosquitto-2.0.15/examples/mysql_log/mysql_log.c

1 
	~<sig«l.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

5 #i‚de‡
WIN32


6 
	~<uni°d.h
>

8 
	~<¥o˚ss.h
>

9 
	#¢¥ötf
 
•rötf_s


	)

12 
	~<mosquôto.h
>

13 
	~<mysql/mysql.h
>

15 
	#db_ho°
 "loˇlho°"

	)

16 
	#db_u£∫ame
 "mqâ_log"

	)

17 
	#db_∑ssw‹d
 "∑ssw‹d"

	)

18 
	#db_d©aba£
 "mqâ_log"

	)

19 
	#db_p‹t
 3306

	)

21 
	#db_quîy
 "INSERT INTO mqâ_log (t›ic,ÖaylﬂdËVALUES (?,?)"

	)

23 
	#mqâ_ho°
 "loˇlho°"

	)

24 
	#mqâ_p‹t
 1883

	)

26 
	grun
 = 1;

27 
MYSQL_STMT
 *
	g°mt
 = 
NULL
;

29 
	$h™dÀ_sig«l
(
s
)

31 
run
 = 0;

32 
	}
}

34 
	$c⁄√˘_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
ªsu…
)

36 
	}
}

38 
	$mesßge_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
mesßge
)

40 
MYSQL_BIND
 
böd
[2];

42 
	`mem£t
(
böd
, 0, (bind));

44 
böd
[0].
buf„r_ty≥
 = 
MYSQL_TYPE_STRING
;

45 
böd
[0].
buf„r
 = 
mesßge
->
t›ic
;

46 
böd
[0].
buf„r_Àngth
 = 
	`°æí
(
mesßge
->
t›ic
);

50 
böd
[1].
buf„r_ty≥
 = 
MYSQL_TYPE_STRING
;

51 
böd
[1].
buf„r
 = 
mesßge
->
∑ylﬂd
;

52 
böd
[1].
buf„r_Àngth
 = 
mesßge
->
∑ylﬂdÀn
;

54 
	`mysql_°mt_böd_∑øm
(
°mt
, 
böd
);

55 
	`mysql_°mt_execuã
(
°mt
);

56 
	}
}

58 
	$maö
(
¨gc
, *
¨gv
[])

60 
MYSQL
 *
c⁄√˘i⁄
;

61 
my_boﬁ
 
ªc⁄√˘
 = 
åue
;

62 
˛õ¡id
[24];

63 
mosquôto
 *
mosq
;

64 
rc
 = 0;

66 
	`sig«l
(
SIGINT
, 
h™dÀ_sig«l
);

67 
	`sig«l
(
SIGTERM
, 
h™dÀ_sig«l
);

69 
	`mysql_libøry_öô
(0, 
NULL
, NULL);

70 
	`mosquôto_lib_öô
();

72 
c⁄√˘i⁄
 = 
	`mysql_öô
(
NULL
);

74 if(
c⁄√˘i⁄
){

75 
	`mysql_›ti⁄s
(
c⁄√˘i⁄
, 
MYSQL_OPT_RECONNECT
, &
ªc⁄√˘
);

77 
c⁄√˘i⁄
 = 
	`mysql_ªÆ_c⁄√˘
(c⁄√˘i⁄, 
db_ho°
, 
db_u£∫ame
, 
db_∑ssw‹d
, 
db_d©aba£
, 
db_p‹t
, 
NULL
, 0);

79 if(
c⁄√˘i⁄
){

80 
°mt
 = 
	`mysql_°mt_öô
(
c⁄√˘i⁄
);

82 
	`mysql_°mt_¥ï¨e
(
°mt
, 
db_quîy
, 
	`°æí
(db_query));

84 
	`mem£t
(
˛õ¡id
, 0, 24);

85 
	`¢¥ötf
(
˛õ¡id
, 23, "mysql_log_%d", 
	`gëpid
());

86 
mosq
 = 
	`mosquôto_√w
(
˛õ¡id
, 
åue
, 
c⁄√˘i⁄
);

87 if(
mosq
){

88 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
c⁄√˘_ˇŒback
);

89 
	`mosquôto_mesßge_ˇŒback_£t
(
mosq
, 
mesßge_ˇŒback
);

92 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, 
mqâ_ho°
, 
mqâ_p‹t
, 60);

94 
	`mosquôto_subs¸ibe
(
mosq
, 
NULL
, "#", 0);

96 
run
){

97 
rc
 = 
	`mosquôto_lo›
(
mosq
, -1, 1);

98 if(
run
 && 
rc
){

99 
	`¶ìp
(20);

100 
	`mosquôto_ªc⁄√˘
(
mosq
);

103 
	`mosquôto_de°roy
(
mosq
);

105 
	`mysql_°mt_˛o£
(
°mt
);

107 
	`mysql_˛o£
(
c⁄√˘i⁄
);

109 
	`Ârötf
(
°dîr
, "Error: UnableÅo connectÅo database.\n");

110 
	`¥ötf
("%s\n", 
	`mysql_îr‹
(
c⁄√˘i⁄
));

111 
rc
 = 1;

114 
	`Ârötf
(
°dîr
, "Error: UnableÅo start mysql.\n");

115 
rc
 = 1;

118 
	`mysql_libøry_íd
();

119 
	`mosquôto_lib_˛ónup
();

121  
rc
;

122 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/examples/publish/basic-1.c

5 
	~<mosquôto.h
>

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

9 
	~<uni°d.h
>

13 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
ªas⁄_code
)

19 
	`¥ötf
("⁄_c⁄√˘: %s\n", 
	`mosquôto_c⁄«ck_°rög
(
ªas⁄_code
));

20 if(
ªas⁄_code
 != 0){

24 
	`mosquôto_disc⁄√˘
(
mosq
);

29 
	}
}

37 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

39 
	`¥ötf
("Mesßgêwôh mid %d ha†bì¿published.\n", 
mid
);

40 
	}
}

43 
	$gë_ãm≥øtuª
()

45 
	`¶ìp
(1);

46  
	`øndom
()%100;

47 
	}
}

50 
	$publish_£ns‹_d©a
(
mosquôto
 *
mosq
)

52 
∑ylﬂd
[20];

53 
ãmp
;

54 
rc
;

57 
ãmp
 = 
	`gë_ãm≥øtuª
();

60 
	`¢¥ötf
(
∑ylﬂd
, ’aylﬂd), "%d", 
ãmp
);

71 
rc
 = 
	`mosquôto_publish
(
mosq
, 
NULL
, "exam∂e/ãm≥øtuª", 
	`°æí
(
∑ylﬂd
),Öaylﬂd, 2, 
Ál£
);

72 if(
rc
 !
MOSQ_ERR_SUCCESS
){

73 
	`Ârötf
(
°dîr
, "Eº‹Öublishög: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

75 
	}
}

78 
	$maö
(
¨gc
, *
¨gv
[])

80 
mosquôto
 *
mosq
;

81 
rc
;

84 
	`mosquôto_lib_öô
();

91 
mosq
 = 
	`mosquôto_√w
(
NULL
, 
åue
, NULL);

92 if(
mosq
 =
NULL
){

93 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

98 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

99 
	`mosquôto_publish_ˇŒback_£t
(
mosq
, 
⁄_publish
);

105 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "test.mosquitto.org", 1883, 60);

106 if(
rc
 !
MOSQ_ERR_SUCCESS
){

107 
	`mosquôto_de°roy
(
mosq
);

108 
	`Ârötf
(
°dîr
, "Eº‹: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

113 
rc
 = 
	`mosquôto_lo›_°¨t
(
mosq
);

114 if(
rc
 !
MOSQ_ERR_SUCCESS
){

115 
	`mosquôto_de°roy
(
mosq
);

116 
	`Ârötf
(
°dîr
, "Eº‹: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

128 
	`publish_£ns‹_d©a
(
mosq
);

131 
	`mosquôto_lib_˛ónup
();

133 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/examples/subscribe/basic-1.c

6 
	~<mosquôto.h
>

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	~<uni°d.h
>

14 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
ªas⁄_code
)

16 
rc
;

21 
	`¥ötf
("⁄_c⁄√˘: %s\n", 
	`mosquôto_c⁄«ck_°rög
(
ªas⁄_code
));

22 if(
ªas⁄_code
 != 0){

26 
	`mosquôto_disc⁄√˘
(
mosq
);

32 
rc
 = 
	`mosquôto_subs¸ibe
(
mosq
, 
NULL
, "example/temperature", 1);

33 if(
rc
 !
MOSQ_ERR_SUCCESS
){

34 
	`Ârötf
(
°dîr
, "Eº‹ subs¸ibög: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

36 
	`mosquôto_disc⁄√˘
(
mosq
);

38 
	}
}

42 
	$⁄_subs¸ibe
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

44 
i
;

45 
boﬁ
 
have_subs¸ùti⁄
 = 
Ál£
;

50 
i
=0; i<
qos_cou¡
; i++){

51 
	`¥ötf
("⁄_subs¸ibe: %d:gø¡ed qo†%d\n", 
i
, 
gø¡ed_qos
[i]);

52 if(
gø¡ed_qos
[
i
] <= 2){

53 
have_subs¸ùti⁄
 = 
åue
;

56 if(
have_subs¸ùti⁄
 =
Ál£
){

59 
	`Ârötf
(
°dîr
, "Error: All subscriptionsÑejected.\n");

60 
	`mosquôto_disc⁄√˘
(
mosq
);

62 
	}
}

66 
	$⁄_mesßge
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
msg
)

69 
	`¥ötf
("%†%d %s\n", 
msg
->
t›ic
, msg->
qos
, (*)msg->
∑ylﬂd
);

70 
	}
}

73 
	$maö
(
¨gc
, *
¨gv
[])

75 
mosquôto
 *
mosq
;

76 
rc
;

79 
	`mosquôto_lib_öô
();

86 
mosq
 = 
	`mosquôto_√w
(
NULL
, 
åue
, NULL);

87 if(
mosq
 =
NULL
){

88 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

93 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

94 
	`mosquôto_subs¸ibe_ˇŒback_£t
(
mosq
, 
⁄_subs¸ibe
);

95 
	`mosquôto_mesßge_ˇŒback_£t
(
mosq
, 
⁄_mesßge
);

101 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "test.mosquitto.org", 1883, 60);

102 if(
rc
 !
MOSQ_ERR_SUCCESS
){

103 
	`mosquôto_de°roy
(
mosq
);

104 
	`Ârötf
(
°dîr
, "Eº‹: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

114 
	`mosquôto_lo›_f‹evî
(
mosq
, -1, 1);

116 
	`mosquôto_lib_˛ónup
();

118 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/examples/subscribe_simple/callback.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~"mosquôto.h
"

5 
	$⁄_mesßge
(
mosquôto
 *
mosq
, *
u£rd©a
, c⁄° 
mosquôto_mesßge
 *
msg
)

7 
	`¥ötf
("%†%†(%d)\n", 
msg
->
t›ic
, (c⁄° *)msg->
∑ylﬂd
, msg->
∑ylﬂdÀn
);

9 
	}
}

12 
	$maö
(
¨gc
, *
¨gv
[])

14 
rc
;

16 
	`mosquôto_lib_öô
();

18 
rc
 = 
	`mosquôto_subs¸ibe_ˇŒback
(

19 
⁄_mesßge
, 
NULL
,

22 
NULL
, 60, 
åue
,

23 
NULL
, NULL,

24 
NULL
, NULL);

26 if(
rc
){

27 
	`¥ötf
("Eº‹: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

30 
	`mosquôto_lib_˛ónup
();

32  
rc
;

33 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/examples/subscribe_simple/multiple.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~"mosquôto.h
"

5 
	#COUNT
 3

	)

7 
	$maö
(
¨gc
, *
¨gv
[])

9 
rc
;

10 
i
;

11 
mosquôto_mesßge
 *
msg
;

13 
	`mosquôto_lib_öô
();

15 
rc
 = 
	`mosquôto_subs¸ibe_sim∂e
(

16 &
msg
, 
COUNT
, 
åue
,

19 
NULL
, 60, 
åue
,

20 
NULL
, NULL,

21 
NULL
, NULL);

23 if(
rc
){

24 
	`¥ötf
("Eº‹: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

25 
	`mosquôto_lib_˛ónup
();

26  
rc
;

29 
i
=0; i<
COUNT
; i++){

30 
	`¥ötf
("%†%s\n", 
msg
[
i
].
t›ic
, (*)msg[i].
∑ylﬂd
);

31 
	`mosquôto_mesßge_‰ì_c⁄ã¡s
(&
msg
[
i
]);

33 
	`‰ì
(
msg
);

35 
	`mosquôto_lib_˛ónup
();

38 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/examples/subscribe_simple/single.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~"mosquôto.h
"

5 
	$maö
(
¨gc
, *
¨gv
[])

7 
rc
;

8 
mosquôto_mesßge
 *
msg
;

10 
	`mosquôto_lib_öô
();

12 
rc
 = 
	`mosquôto_subs¸ibe_sim∂e
(

13 &
msg
, 1, 
åue
,

16 
NULL
, 60, 
åue
,

17 
NULL
, NULL,

18 
NULL
, NULL);

20 if(
rc
){

21 
	`¥ötf
("Eº‹: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

22 
	`mosquôto_lib_˛ónup
();

23  
rc
;

26 
	`¥ötf
("%†%s\n", 
msg
->
t›ic
, (*)msg->
∑ylﬂd
);

27 
	`mosquôto_mesßge_‰ì
(&
msg
);

29 
	`mosquôto_lib_˛ónup
();

32 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/examples/temperature_conversion/main.cpp

1 
	~"ãm≥øtuª_c⁄vîsi⁄.h
"

3 
	$maö
(
¨gc
, *
¨gv
[])

5 
˛ass
 
mqâ_ãmpc⁄v
 *
ãmpc⁄v
;

6 
rc
;

8 
mosqµ
::
	`lib_öô
();

10 
ãmpc⁄v
 = 
√w
 
	`mqâ_ãmpc⁄v
("tempconv", "localhost", 1883);

11 
ãmpc⁄v
->
	`lo›_f‹evî
();

13 
mosqµ
::
	`lib_˛ónup
();

16 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/examples/temperature_conversion/temperature_conversion.cpp

1 
	~<c°dio
>

2 
	~<c°rög
>

4 
	~"ãm≥øtuª_c⁄vîsi⁄.h
"

5 
	~<mosquôt›p.h
>

7 
	gmqâ_ãmpc⁄v
::
	$mqâ_ãmpc⁄v
(c⁄° *
id
, c⁄° *
ho°
, 
p‹t
Ë: 
	$mosquôt›p
(
id
)

9 
kì∑live
 = 60;

13 
	`c⁄√˘
(
ho°
, 
p‹t
, 
kì∑live
);

14 
	}
};

16 
	gmqâ_ãmpc⁄v
::~
	$mqâ_ãmpc⁄v
()

18 
	}
}

20 
mqâ_ãmpc⁄v
::
	$⁄_c⁄√˘
(
rc
)

22 
	`¥ötf
("C⁄√˘ed wôh codê%d.\n", 
rc
);

23 if(
rc
 == 0){

25 
	`subs¸ibe
(
NULL
, "temperature/celsius");

27 
	}
}

29 
	gmqâ_ãmpc⁄v
::
	$⁄_mesßge
(c⁄° 
mosquôto_mesßge
 *
mesßge
)

31 
ãmp_˚lsius
, 
ãmp_Áhªnheô
;

32 
buf
[51];

34 if(!
	`°rcmp
(
mesßge
->
t›ic
, "temperature/celsius")){

35 
	`mem£t
(
buf
, 0, 51*());

37 
	`mem˝y
(
buf
, 
mesßge
->
∑ylﬂd
, 50*());

38 
ãmp_˚lsius
 = 
	`©of
(
buf
);

39 
ãmp_Áhªnheô
 = 
ãmp_˚lsius
*9.0/5.0 + 32.0;

40 
	`¢¥ötf
(
buf
, 50, "%f", 
ãmp_Áhªnheô
);

41 
	`publish
(
NULL
, "ãm≥øtuª/Áhªnheô", 
	`°æí
(
buf
), buf);

43 
	}
}

45 
	gmqâ_ãmpc⁄v
::
	$⁄_subs¸ibe
(
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

47 
	`¥ötf
("Subscription succeeded.\n");

48 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/examples/temperature_conversion/temperature_conversion.h

1 #i‚de‡
TEMPERATURE_CONVERSION_H


2 
	#TEMPERATURE_CONVERSION_H


	)

4 
	~<mosquôt›p.h
>

6 ˛as†
	cmqâ_ãmpc⁄v
 : 
public
 
mosqµ
::
mosquôt›p


8 
public
:

9 
mqâ_ãmpc⁄v
(c⁄° *
id
, c⁄° *
ho°
, 
p‹t
);

10 ~
mqâ_ãmpc⁄v
();

12 
⁄_c⁄√˘
(
rc
);

13 
⁄_mesßge
(c⁄° 
mosquôto_mesßge
 *
mesßge
);

14 
⁄_subs¸ibe
(
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/include/mosquitto.h

19 #i‚de‡
MOSQUITTO_H


20 
	#MOSQUITTO_H


	)

29 #ifde‡
__˝lu•lus


34 #ifde‡
WIN32


35 #ifde‡
mosquôto_EXPORTS


36 
	#libmosq_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

38 #i‚de‡
LIBMOSQUITTO_STATIC


39 #ifde‡
libmosquôto_EXPORTS


40 
	#libmosq_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

42 
	#libmosq_EXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

45 
	#libmosq_EXPORT


	)

49 
	#libmosq_EXPORT


	)

52 #i‡
deföed
(
_MSC_VER
Ë&& _MSC_VER < 1900 && !deföed(
boﬁ
)

53 #i‚de‡
__˝lu•lus


54 
	#boﬁ
 

	)

55 
	#åue
 1

	)

56 
	#Ál£
 0

	)

59 #i‚de‡
__˝lu•lus


60 
	~<°dboﬁ.h
>

64 
	~<°ddef.h
>

65 
	~<°döt.h
>

67 
	#LIBMOSQUITTO_MAJOR
 2

	)

68 
	#LIBMOSQUITTO_MINOR
 0

	)

69 
	#LIBMOSQUITTO_REVISION
 15

	)

71 
	#LIBMOSQUITTO_VERSION_NUMBER
 (
LIBMOSQUITTO_MAJOR
*1000000+
LIBMOSQUITTO_MINOR
*1000+
LIBMOSQUITTO_REVISION
)

	)

74 
	#MOSQ_LOG_NONE
 0

	)

75 
	#MOSQ_LOG_INFO
 (1<<0)

	)

76 
	#MOSQ_LOG_NOTICE
 (1<<1)

	)

77 
	#MOSQ_LOG_WARNING
 (1<<2)

	)

78 
	#MOSQ_LOG_ERR
 (1<<3)

	)

79 
	#MOSQ_LOG_DEBUG
 (1<<4)

	)

80 
	#MOSQ_LOG_SUBSCRIBE
 (1<<5)

	)

81 
	#MOSQ_LOG_UNSUBSCRIBE
 (1<<6)

	)

82 
	#MOSQ_LOG_WEBSOCKETS
 (1<<7)

	)

83 
	#MOSQ_LOG_INTERNAL
 0x80000000U

	)

84 
	#MOSQ_LOG_ALL
 0xFFFFFFFFU

	)

88 
	emosq_îr_t
 {

89 
MOSQ_ERR_AUTH_CONTINUE
 = -4,

90 
MOSQ_ERR_NO_SUBSCRIBERS
 = -3,

91 
MOSQ_ERR_SUB_EXISTS
 = -2,

92 
MOSQ_ERR_CONN_PENDING
 = -1,

93 
MOSQ_ERR_SUCCESS
 = 0,

94 
MOSQ_ERR_NOMEM
 = 1,

95 
MOSQ_ERR_PROTOCOL
 = 2,

96 
MOSQ_ERR_INVAL
 = 3,

97 
MOSQ_ERR_NO_CONN
 = 4,

98 
MOSQ_ERR_CONN_REFUSED
 = 5,

99 
MOSQ_ERR_NOT_FOUND
 = 6,

100 
MOSQ_ERR_CONN_LOST
 = 7,

101 
MOSQ_ERR_TLS
 = 8,

102 
MOSQ_ERR_PAYLOAD_SIZE
 = 9,

103 
MOSQ_ERR_NOT_SUPPORTED
 = 10,

104 
MOSQ_ERR_AUTH
 = 11,

105 
MOSQ_ERR_ACL_DENIED
 = 12,

106 
MOSQ_ERR_UNKNOWN
 = 13,

107 
MOSQ_ERR_ERRNO
 = 14,

108 
MOSQ_ERR_EAI
 = 15,

109 
MOSQ_ERR_PROXY
 = 16,

110 
MOSQ_ERR_PLUGIN_DEFER
 = 17,

111 
MOSQ_ERR_MALFORMED_UTF8
 = 18,

112 
MOSQ_ERR_KEEPALIVE
 = 19,

113 
MOSQ_ERR_LOOKUP
 = 20,

114 
MOSQ_ERR_MALFORMED_PACKET
 = 21,

115 
MOSQ_ERR_DUPLICATE_PROPERTY
 = 22,

116 
MOSQ_ERR_TLS_HANDSHAKE
 = 23,

117 
MOSQ_ERR_QOS_NOT_SUPPORTED
 = 24,

118 
MOSQ_ERR_OVERSIZE_PACKET
 = 25,

119 
MOSQ_ERR_OCSP
 = 26,

120 
MOSQ_ERR_TIMEOUT
 = 27,

121 
MOSQ_ERR_RETAIN_NOT_SUPPORTED
 = 28,

122 
MOSQ_ERR_TOPIC_ALIAS_INVALID
 = 29,

123 
MOSQ_ERR_ADMINISTRATIVE_ACTION
 = 30,

124 
MOSQ_ERR_ALREADY_EXISTS
 = 31,

133 
	emosq_›t_t
 {

134 
MOSQ_OPT_PROTOCOL_VERSION
 = 1,

135 
MOSQ_OPT_SSL_CTX
 = 2,

136 
MOSQ_OPT_SSL_CTX_WITH_DEFAULTS
 = 3,

137 
MOSQ_OPT_RECEIVE_MAXIMUM
 = 4,

138 
MOSQ_OPT_SEND_MAXIMUM
 = 5,

139 
MOSQ_OPT_TLS_KEYFORM
 = 6,

140 
MOSQ_OPT_TLS_ENGINE
 = 7,

141 
MOSQ_OPT_TLS_ENGINE_KPASS_SHA1
 = 8,

142 
MOSQ_OPT_TLS_OCSP_REQUIRED
 = 9,

143 
MOSQ_OPT_TLS_ALPN
 = 10,

144 
MOSQ_OPT_TCP_NODELAY
 = 11,

145 
MOSQ_OPT_BIND_ADDRESS
 = 12,

146 
MOSQ_OPT_TLS_USE_OS_CERTS
 = 13,

151 
	#MOSQ_MQTT_ID_MAX_LENGTH
 23

	)

153 
	#MQTT_PROTOCOL_V31
 3

	)

154 
	#MQTT_PROTOCOL_V311
 4

	)

155 
	#MQTT_PROTOCOL_V5
 5

	)

175 
	smosquôto_mesßge
{

176 
mid
;

177 *
t›ic
;

178 *
∑ylﬂd
;

179 
∑ylﬂdÀn
;

180 
qos
;

181 
boﬁ
 
ªèö
;

184 
mosquôto
;

185 
mqâ5__¥›îty
 
	tmosquôto_¥›îty
;

248 
libmosq_EXPORT
 
mosquôto_lib_vîsi⁄
(*
maj‹
, *
mö‹
, *
ªvisi⁄
);

264 
libmosq_EXPORT
 
mosquôto_lib_öô
();

277 
libmosq_EXPORT
 
mosquôto_lib_˛ónup
();

314 
libmosq_EXPORT
 
mosquôto
 *
mosquôto_√w
(c⁄° *
id
, 
boﬁ
 
˛ón_£ssi⁄
, *
obj
);

327 
libmosq_EXPORT
 
mosquôto_de°roy
(
mosquôto
 *
mosq
);

357 
libmosq_EXPORT
 
mosquôto_ªöôüli£
(
mosquôto
 *
mosq
, c⁄° *
id
, 
boﬁ
 
˛ón_£ssi⁄
, *
obj
);

392 
libmosq_EXPORT
 
mosquôto_wûl_£t
(
mosquôto
 *
mosq
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
);

435 
libmosq_EXPORT
 
mosquôto_wûl_£t_v5
(
mosquôto
 *
mosq
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
, 
mosquôto_¥›îty
 *
¥›îtõs
);

450 
libmosq_EXPORT
 
mosquôto_wûl_˛ór
(
mosquôto
 *
mosq
);

479 
libmosq_EXPORT
 
mosquôto_u£∫ame_pw_£t
(
mosquôto
 *
mosq
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
);

519 
libmosq_EXPORT
 
mosquôto_c⁄√˘
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
);

550 
libmosq_EXPORT
 
mosquôto_c⁄√˘_böd
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
, c⁄° *
böd_addªss
);

601 
libmosq_EXPORT
 
mosquôto_c⁄√˘_böd_v5
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
, c⁄° *
böd_addªss
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

632 
libmosq_EXPORT
 
mosquôto_c⁄√˘_async
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
);

674 
libmosq_EXPORT
 
mosquôto_c⁄√˘_böd_async
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
, c⁄° *
böd_addªss
);

713 
libmosq_EXPORT
 
mosquôto_c⁄√˘_§v
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
kì∑live
, c⁄° *
böd_addªss
);

740 
libmosq_EXPORT
 
mosquôto_ªc⁄√˘
(
mosquôto
 *
mosq
);

767 
libmosq_EXPORT
 
mosquôto_ªc⁄√˘_async
(
mosquôto
 *
mosq
);

786 
libmosq_EXPORT
 
mosquôto_disc⁄√˘
(
mosquôto
 *
mosq
);

817 
libmosq_EXPORT
 
mosquôto_disc⁄√˘_v5
(
mosquôto
 *
mosq
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

869 
libmosq_EXPORT
 
mosquôto_publish
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
);

924 
libmosq_EXPORT
 
mosquôto_publish_v5
(

925 
mosquôto
 *
mosq
,

926 *
mid
,

927 c⁄° *
t›ic
,

928 
∑ylﬂdÀn
,

929 c⁄° *
∑ylﬂd
,

930 
qos
,

931 
boﬁ
 
ªèö
,

932 c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

962 
libmosq_EXPORT
 
mosquôto_subs¸ibe
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
sub
, 
qos
);

1004 
libmosq_EXPORT
 
mosquôto_subs¸ibe_v5
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
sub
, 
qos
, 
›ti⁄s
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

1039 
libmosq_EXPORT
 
mosquôto_subs¸ibe_mu…ùÀ
(
mosquôto
 *
mosq
, *
mid
, 
sub_cou¡
, *c⁄° *c⁄° 
sub
, 
qos
, 
›ti⁄s
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

1063 
libmosq_EXPORT
 
mosquôto_unsubs¸ibe
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
sub
);

1107 
libmosq_EXPORT
 
mosquôto_unsubs¸ibe_v5
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
sub
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

1138 
libmosq_EXPORT
 
mosquôto_unsubs¸ibe_mu…ùÀ
(
mosquôto
 *
mosq
, *
mid
, 
sub_cou¡
, *c⁄° *c⁄° 
sub
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

1164 
libmosq_EXPORT
 
mosquôto_mesßge_c›y
(
mosquôto_mesßge
 *
d°
, c⁄° mosquôto_mesßgê*
§c
);

1177 
libmosq_EXPORT
 
mosquôto_mesßge_‰ì
(
mosquôto_mesßge
 **
mesßge
);

1190 
libmosq_EXPORT
 
mosquôto_mesßge_‰ì_c⁄ã¡s
(
mosquôto_mesßge
 *
mesßge
);

1242 
libmosq_EXPORT
 
mosquôto_lo›_f‹evî
(
mosquôto
 *
mosq
, 
timeout
, 
max_∑ckës
);

1262 
libmosq_EXPORT
 
mosquôto_lo›_°¨t
(
mosquôto
 *
mosq
);

1286 
libmosq_EXPORT
 
mosquôto_lo›_°›
(
mosquôto
 *
mosq
, 
boﬁ
 
f‹˚
);

1333 
libmosq_EXPORT
 
mosquôto_lo›
(
mosquôto
 *
mosq
, 
timeout
, 
max_∑ckës
);

1368 
libmosq_EXPORT
 
mosquôto_lo›_ªad
(
mosquôto
 *
mosq
, 
max_∑ckës
);

1398 
libmosq_EXPORT
 
mosquôto_lo›_wrôe
(
mosquôto
 *
mosq
, 
max_∑ckës
);

1422 
libmosq_EXPORT
 
mosquôto_lo›_misc
(
mosquôto
 *
mosq
);

1442 
libmosq_EXPORT
 
mosquôto_sockë
(
mosquôto
 *
mosq
);

1455 
libmosq_EXPORT
 
boﬁ
 
mosquôto_w™t_wrôe
(
mosquôto
 *
mosq
);

1472 
libmosq_EXPORT
 
mosquôto_thªaded_£t
(
mosquôto
 *
mosq
, 
boﬁ
 
thªaded
);

1518 
libmosq_EXPORT
 
mosquôto_›ts_£t
(
mosquôto
 *
mosq
, 
mosq_›t_t
 
›ti⁄
, *
vÆue
);

1576 
libmosq_EXPORT
 
mosquôto_öt_›ti⁄
(
mosquôto
 *
mosq
, 
mosq_›t_t
 
›ti⁄
, 
vÆue
);

1617 
libmosq_EXPORT
 
mosquôto_°rög_›ti⁄
(
mosquôto
 *
mosq
, 
mosq_›t_t
 
›ti⁄
, c⁄° *
vÆue
);

1640 
libmosq_EXPORT
 
mosquôto_void_›ti⁄
(
mosquôto
 *
mosq
, 
mosq_›t_t
 
›ti⁄
, *
vÆue
);

1677 
libmosq_EXPORT
 
mosquôto_ªc⁄√˘_dñay_£t
(
mosquôto
 *
mosq
, 
ªc⁄√˘_dñay
, 
ªc⁄√˘_dñay_max
, 
boﬁ
 
ªc⁄√˘_exp⁄ítül_backoff
);

1705 
libmosq_EXPORT
 
mosquôto_max_öÊight_mesßges_£t
(
mosquôto
 *
mosq
, 
max_öÊight_mesßges
);

1712 
libmosq_EXPORT
 
mosquôto_mesßge_ªåy_£t
(
mosquôto
 *
mosq
, 
mesßge_ªåy
);

1728 
libmosq_EXPORT
 
mosquôto_u£r_d©a_£t
(
mosquôto
 *
mosq
, *
obj
);

1740 
libmosq_EXPORT
 *
mosquôto_u£rd©a
(
mosquôto
 *
mosq
);

1796 
libmosq_EXPORT
 
mosquôto_és_£t
(
mosquôto
 *
mosq
,

1797 c⁄° *
ˇfûe
, c⁄° *
ˇ∑th
,

1798 c⁄° *
˚πfûe
, c⁄° *
keyfûe
,

1799 (*
pw_ˇŒback
)(*
buf
, 
size
, 
rwÊag
, *
u£rd©a
));

1826 
libmosq_EXPORT
 
mosquôto_és_ö£cuª_£t
(
mosquôto
 *
mosq
, 
boﬁ
 
vÆue
);

1860 
libmosq_EXPORT
 
mosquôto_és_›ts_£t
(
mosquôto
 *
mosq
, 
˚π_ªqs
, c⁄° *
és_vîsi⁄
, c⁄° *
cùhîs
);

1887 
libmosq_EXPORT
 
mosquôto_és_psk_£t
(
mosquôto
 *
mosq
, c⁄° *
psk
, c⁄° *
idítôy
, c⁄° *
cùhîs
);

1904 
libmosq_EXPORT
 *
mosquôto_s¶_gë
(
mosquôto
 *
mosq
);

1931 
libmosq_EXPORT
 
mosquôto_c⁄√˘_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_c⁄√˘
)(mosquitto *, *, ));

1953 
libmosq_EXPORT
 
mosquôto_c⁄√˘_wôh_Êags_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_c⁄√˘
)(mosquitto *, *, , ));

1981 
libmosq_EXPORT
 
mosquôto_c⁄√˘_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_c⁄√˘
)(mosquôtÿ*, *, , , c⁄° 
mosquôto_¥›îty
 *
¥›s
));

2001 
libmosq_EXPORT
 
mosquôto_disc⁄√˘_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_disc⁄√˘
)(mosquitto *, *, ));

2026 
libmosq_EXPORT
 
mosquôto_disc⁄√˘_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_disc⁄√˘
)(mosquôtÿ*, *, , c⁄° 
mosquôto_¥›îty
 *
¥›s
));

2052 
libmosq_EXPORT
 
mosquôto_publish_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_publish
)(mosquitto *, *, ));

2087 
libmosq_EXPORT
 
mosquôto_publish_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_publish
)(mosquôtÿ*, *, , , c⁄° 
mosquôto_¥›îty
 *
¥›s
));

2110 
libmosq_EXPORT
 
mosquôto_mesßge_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_mesßge
)(mosquôtÿ*, *, c⁄° 
mosquôto_mesßge
 *));

2138 
libmosq_EXPORT
 
mosquôto_mesßge_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_mesßge
)(mosquôtÿ*, *, c⁄° 
mosquôto_mesßge
 *, c⁄° 
mosquôto_¥›îty
 *
¥›s
));

2159 
libmosq_EXPORT
 
mosquôto_subs¸ibe_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_subs¸ibe
)(mosquitto *, *, , , const *));

2185 
libmosq_EXPORT
 
mosquôto_subs¸ibe_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_subs¸ibe
)(mosquôtÿ*, *, , , c⁄° *, c⁄° 
mosquôto_¥›îty
 *
¥›s
));

2203 
libmosq_EXPORT
 
mosquôto_unsubs¸ibe_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_unsubs¸ibe
)(mosquitto *, *, ));

2226 
libmosq_EXPORT
 
mosquôto_unsubs¸ibe_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_unsubs¸ibe
)(mosquôtÿ*, *, , c⁄° 
mosquôto_¥›îty
 *
¥›s
));

2249 
libmosq_EXPORT
 
mosquôto_log_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_log
)(mosquitto *, *, , const *));

2274 
libmosq_EXPORT
 
mosquôto_socks5_£t
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
);

2295 
libmosq_EXPORT
 c⁄° *
mosquôto_°ªº‹
(
mosq_î∫o
);

2308 
libmosq_EXPORT
 c⁄° *
mosquôto_c⁄«ck_°rög
(
c⁄«ck_code
);

2321 
libmosq_EXPORT
 c⁄° *
mosquôto_ªas⁄_°rög
(
ªas⁄_code
);

2342 
libmosq_EXPORT
 
mosquôto_°rög_to_comm™d
(c⁄° *
°r
, *
cmd
);

2398 
libmosq_EXPORT
 
mosquôto_sub_t›ic_tokíi£
(c⁄° *
subt›ic
, ***
t›ics
, *
cou¡
);

2416 
libmosq_EXPORT
 
mosquôto_sub_t›ic_tokís_‰ì
(***
t›ics
, 
cou¡
);

2439 
libmosq_EXPORT
 
mosquôto_t›ic_m©ches_sub
(c⁄° *
sub
, c⁄° *
t›ic
, 
boﬁ
 *
ªsu…
);

2465 
libmosq_EXPORT
 
mosquôto_t›ic_m©ches_sub2
(c⁄° *
sub
, 
size_t
 
subÀn
, c⁄° *
t›ic
, size_à
t›i˛í
, 
boﬁ
 *
ªsu…
);

2490 
libmosq_EXPORT
 
mosquôto_pub_t›ic_check
(c⁄° *
t›ic
);

2516 
libmosq_EXPORT
 
mosquôto_pub_t›ic_check2
(c⁄° *
t›ic
, 
size_t
 
t›i˛í
);

2544 
libmosq_EXPORT
 
mosquôto_sub_t›ic_check
(c⁄° *
t›ic
);

2573 
libmosq_EXPORT
 
mosquôto_sub_t›ic_check2
(c⁄° *
t›ic
, 
size_t
 
t›i˛í
);

2591 
libmosq_EXPORT
 
mosquôto_vÆid©e_utf8
(c⁄° *
°r
, 
Àn
);

2601 
	slibmosquôto_wûl
 {

2602 *
t›ic
;

2603 *
∑ylﬂd
;

2604 
∑ylﬂdÀn
;

2605 
qos
;

2606 
boﬁ
 
ªèö
;

2609 
	slibmosquôto_auth
 {

2610 *
u£∫ame
;

2611 *
∑ssw‹d
;

2614 
	slibmosquôto_és
 {

2615 *
ˇfûe
;

2616 *
ˇ∑th
;

2617 *
˚πfûe
;

2618 *
keyfûe
;

2619 *
cùhîs
;

2620 *
és_vîsi⁄
;

2621 (*
pw_ˇŒback
)(*
buf
, 
size
, 
rwÊag
, *
u£rd©a
);

2622 
˚π_ªqs
;

2662 
libmosq_EXPORT
 
mosquôto_subs¸ibe_sim∂e
(

2663 
mosquôto_mesßge
 **
mesßges
,

2664 
msg_cou¡
,

2665 
boﬁ
 
w™t_ªèöed
,

2666 c⁄° *
t›ic
,

2667 
qos
,

2668 c⁄° *
ho°
,

2669 
p‹t
,

2670 c⁄° *
˛õ¡_id
,

2671 
kì∑live
,

2672 
boﬁ
 
˛ón_£ssi⁄
,

2673 c⁄° *
u£∫ame
,

2674 c⁄° *
∑ssw‹d
,

2675 c⁄° 
libmosquôto_wûl
 *
wûl
,

2676 c⁄° 
libmosquôto_és
 *
és
);

2715 
libmosq_EXPORT
 
mosquôto_subs¸ibe_ˇŒback
(

2716 (*
ˇŒback
)(
mosquôto
 *, *, c⁄° 
mosquôto_mesßge
 *),

2717 *
u£rd©a
,

2718 c⁄° *
t›ic
,

2719 
qos
,

2720 c⁄° *
ho°
,

2721 
p‹t
,

2722 c⁄° *
˛õ¡_id
,

2723 
kì∑live
,

2724 
boﬁ
 
˛ón_£ssi⁄
,

2725 c⁄° *
u£∫ame
,

2726 c⁄° *
∑ssw‹d
,

2727 c⁄° 
libmosquôto_wûl
 *
wûl
,

2728 c⁄° 
libmosquôto_és
 *
és
);

2761 
libmosq_EXPORT
 
mosquôto_¥›îty_add_byã
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, 
uöt8_t
 
vÆue
);

2785 
libmosq_EXPORT
 
mosquôto_¥›îty_add_öt16
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, 
uöt16_t
 
vÆue
);

2809 
libmosq_EXPORT
 
mosquôto_¥›îty_add_öt32
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, 
uöt32_t
 
vÆue
);

2833 
libmosq_EXPORT
 
mosquôto_¥›îty_add_v¨öt
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, 
uöt32_t
 
vÆue
);

2858 
libmosq_EXPORT
 
mosquôto_¥›îty_add_bö¨y
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, c⁄° *
vÆue
, 
uöt16_t
 
Àn
);

2883 
libmosq_EXPORT
 
mosquôto_¥›îty_add_°rög
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, c⁄° *
vÆue
);

2909 
libmosq_EXPORT
 
mosquôto_¥›îty_add_°rög_∑ú
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, c⁄° *
«me
, c⁄° *
vÆue
);

2924 
libmosq_EXPORT
 
mosquôto_¥›îty_idítifõr
(c⁄° 
mosquôto_¥›îty
 *
¥›îty
);

2948 
libmosq_EXPORT
 c⁄° 
mosquôto_¥›îty
 *
mosquôto_¥›îty_√xt
(c⁄° mosquôto_¥›îty *
¥›li°
);

2990 
libmosq_EXPORT
 c⁄° 
mosquôto_¥›îty
 *
mosquôto_¥›îty_ªad_byã
(

2991 c⁄° 
mosquôto_¥›îty
 *
¥›li°
,

2992 
idítifõr
,

2993 
uöt8_t
 *
vÆue
,

2994 
boﬁ
 
skù_fú°
);

3015 
libmosq_EXPORT
 c⁄° 
mosquôto_¥›îty
 *
mosquôto_¥›îty_ªad_öt16
(

3016 c⁄° 
mosquôto_¥›îty
 *
¥›li°
,

3017 
idítifõr
,

3018 
uöt16_t
 *
vÆue
,

3019 
boﬁ
 
skù_fú°
);

3040 
libmosq_EXPORT
 c⁄° 
mosquôto_¥›îty
 *
mosquôto_¥›îty_ªad_öt32
(

3041 c⁄° 
mosquôto_¥›îty
 *
¥›li°
,

3042 
idítifõr
,

3043 
uöt32_t
 *
vÆue
,

3044 
boﬁ
 
skù_fú°
);

3065 
libmosq_EXPORT
 c⁄° 
mosquôto_¥›îty
 *
mosquôto_¥›îty_ªad_v¨öt
(

3066 c⁄° 
mosquôto_¥›îty
 *
¥›li°
,

3067 
idítifõr
,

3068 
uöt32_t
 *
vÆue
,

3069 
boﬁ
 
skù_fú°
);

3092 
libmosq_EXPORT
 c⁄° 
mosquôto_¥›îty
 *
mosquôto_¥›îty_ªad_bö¨y
(

3093 c⁄° 
mosquôto_¥›îty
 *
¥›li°
,

3094 
idítifõr
,

3095 **
vÆue
,

3096 
uöt16_t
 *
Àn
,

3097 
boﬁ
 
skù_fú°
);

3121 
libmosq_EXPORT
 c⁄° 
mosquôto_¥›îty
 *
mosquôto_¥›îty_ªad_°rög
(

3122 c⁄° 
mosquôto_¥›îty
 *
¥›li°
,

3123 
idítifõr
,

3124 **
vÆue
,

3125 
boﬁ
 
skù_fú°
);

3151 
libmosq_EXPORT
 c⁄° 
mosquôto_¥›îty
 *
mosquôto_¥›îty_ªad_°rög_∑ú
(

3152 c⁄° 
mosquôto_¥›îty
 *
¥›li°
,

3153 
idítifõr
,

3154 **
«me
,

3155 **
vÆue
,

3156 
boﬁ
 
skù_fú°
);

3171 
libmosq_EXPORT
 
mosquôto_¥›îty_‰ì_Æl
(
mosquôto_¥›îty
 **
¥›îtõs
);

3185 
libmosq_EXPORT
 
mosquôto_¥›îty_c›y_Æl
(
mosquôto_¥›îty
 **
de°
, c⁄° mosquôto_¥›îty *
§c
);

3200 
libmosq_EXPORT
 
mosquôto_¥›îty_check_comm™d
(
comm™d
, 
idítifõr
);

3223 
libmosq_EXPORT
 
mosquôto_¥›îty_check_Æl
(
comm™d
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

3239 
libmosq_EXPORT
 c⁄° *
mosquôto_¥›îty_idítifõr_to_°rög
(
idítifõr
);

3264 
libmosq_EXPORT
 
mosquôto_°rög_to_¥›îty_öfo
(c⁄° *
¥›«me
, *
idítifõr
, *
ty≥
);

3267 #ifde‡
__˝lu•lus


	@open_source_lib/mosquitto/mosquitto-2.0.15/include/mosquitto_broker.h

24 #i‚de‡
MOSQUITTO_BROKER_H


25 
	#MOSQUITTO_BROKER_H


	)

27 #ifde‡
__˝lu•lus


31 #i‡
deföed
(
WIN32
Ë&& deföed(
mosquôto_EXPORTS
)

32 
	#mosq_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

34 
	#mosq_EXPORT


	)

37 
	~<°dboﬁ.h
>

38 
	~<°ddef.h
>

39 
	~<°döt.h
>

40 
	~<time.h
>

42 
mosquôto
;

43 
mqâ5__¥›îty
 
	tmosquôto_¥›îty
;

45 
	emosquôto_¥Ÿocﬁ
 {

46 
mp_mqâ
,

47 
mp_mqâ¢
,

48 
mp_websockës


58 
	emosquôto_∂ugö_evít
 {

59 
MOSQ_EVT_RELOAD
 = 1,

60 
MOSQ_EVT_ACL_CHECK
 = 2,

61 
MOSQ_EVT_BASIC_AUTH
 = 3,

62 
MOSQ_EVT_EXT_AUTH_START
 = 4,

63 
MOSQ_EVT_EXT_AUTH_CONTINUE
 = 5,

64 
MOSQ_EVT_CONTROL
 = 6,

65 
MOSQ_EVT_MESSAGE
 = 7,

66 
MOSQ_EVT_PSK_KEY
 = 8,

67 
MOSQ_EVT_TICK
 = 9,

68 
MOSQ_EVT_DISCONNECT
 = 10,

72 
	smosquôto_evt_ªlﬂd
 {

73 *
futuª
;

74 
mosquôto_›t
 *
›ti⁄s
;

75 
›ti⁄_cou¡
;

76 *
futuª2
[4];

80 
	smosquôto_evt_a˛_check
 {

81 *
futuª
;

82 
mosquôto
 *
˛õ¡
;

83 c⁄° *
t›ic
;

84 c⁄° *
∑ylﬂd
;

85 
mosquôto_¥›îty
 *
¥›îtõs
;

86 
ac˚ss
;

87 
uöt32_t
 
∑ylﬂdÀn
;

88 
uöt8_t
 
qos
;

89 
boﬁ
 
ªèö
;

90 *
futuª2
[4];

94 
	smosquôto_evt_basic_auth
 {

95 *
futuª
;

96 
mosquôto
 *
˛õ¡
;

97 *
u£∫ame
;

98 *
∑ssw‹d
;

99 *
futuª2
[4];

103 
	smosquôto_evt_psk_key
 {

104 *
futuª
;

105 
mosquôto
 *
˛õ¡
;

106 c⁄° *
höt
;

107 c⁄° *
idítôy
;

108 *
key
;

109 
max_key_Àn
;

110 *
futuª2
[4];

114 
	smosquôto_evt_exãnded_auth
 {

115 *
futuª
;

116 
mosquôto
 *
˛õ¡
;

117 c⁄° *
d©a_ö
;

118 *
d©a_out
;

119 
uöt16_t
 
d©a_ö_Àn
;

120 
uöt16_t
 
d©a_out_Àn
;

121 c⁄° *
auth_mëhod
;

122 *
futuª2
[3];

126 
	smosquôto_evt_c⁄åﬁ
 {

127 *
futuª
;

128 
mosquôto
 *
˛õ¡
;

129 c⁄° *
t›ic
;

130 c⁄° *
∑ylﬂd
;

131 c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
;

132 *
ªas⁄_°rög
;

133 
uöt32_t
 
∑ylﬂdÀn
;

134 
uöt8_t
 
qos
;

135 
uöt8_t
 
ªas⁄_code
;

136 
boﬁ
 
ªèö
;

137 *
futuª2
[4];

141 
	smosquôto_evt_mesßge
 {

142 *
futuª
;

143 
mosquôto
 *
˛õ¡
;

144 *
t›ic
;

145 *
∑ylﬂd
;

146 
mosquôto_¥›îty
 *
¥›îtõs
;

147 *
ªas⁄_°rög
;

148 
uöt32_t
 
∑ylﬂdÀn
;

149 
uöt8_t
 
qos
;

150 
uöt8_t
 
ªas⁄_code
;

151 
boﬁ
 
ªèö
;

152 *
futuª2
[4];

157 
	smosquôto_evt_tick
 {

158 *
futuª
;

159 
now_ns
;

160 
√xt_ns
;

161 
time_t
 
now_s
;

162 
time_t
 
√xt_s
;

163 *
futuª2
[4];

167 
	smosquôto_evt_disc⁄√˘
 {

168 *
futuª
;

169 
mosquôto
 *
˛õ¡
;

170 
ªas⁄
;

171 *
futuª2
[4];

176 (*
MOSQ_FUNC_gíîic_ˇŒback
)(, *, *);

178 
mosquôto_∂ugö_id_t
 
	tmosquôto_∂ugö_id_t
;

208 
mosq_EXPORT
 
mosquôto_ˇŒback_ªgi°î
(

209 
mosquôto_∂ugö_id_t
 *
idítifõr
,

210 
evít
,

211 
MOSQ_FUNC_gíîic_ˇŒback
 
cb_func
,

212 c⁄° *
evít_d©a
,

213 *
u£rd©a
);

242 
mosq_EXPORT
 
mosquôto_ˇŒback_uƒegi°î
(

243 
mosquôto_∂ugö_id_t
 *
idítifõr
,

244 
evít
,

245 
MOSQ_FUNC_gíîic_ˇŒback
 
cb_func
,

246 c⁄° *
evít_d©a
);

261 
mosq_EXPORT
 *
mosquôto_ˇŒoc
(
size_t
 
nmemb
, size_à
size
);

266 
mosq_EXPORT
 
mosquôto_‰ì
(*
mem
);

271 
mosq_EXPORT
 *
mosquôto_mÆloc
(
size_t
 
size
);

276 
mosq_EXPORT
 *
mosquôto_ªÆloc
(*
±r
, 
size_t
 
size
);

281 
mosq_EXPORT
 *
mosquôto_°rdup
(c⁄° *
s
);

312 
mosq_EXPORT
 
mosquôto_log_¥ötf
(
Àvñ
, c⁄° *
fmt
, ...);

328 
mosq_EXPORT
 c⁄° *
mosquôto_˛õ¡_addªss
(c⁄° 
mosquôto
 *
˛õ¡
);

336 
mosq_EXPORT
 
boﬁ
 
mosquôto_˛õ¡_˛ón_£ssi⁄
(c⁄° 
mosquôto
 *
˛õ¡
);

344 
mosq_EXPORT
 c⁄° *
mosquôto_˛õ¡_id
(c⁄° 
mosquôto
 *
˛õ¡
);

352 
mosq_EXPORT
 
mosquôto_˛õ¡_kì∑live
(c⁄° 
mosquôto
 *
˛õ¡
);

368 
mosq_EXPORT
 *
mosquôto_˛õ¡_˚πifiˇã
(c⁄° 
mosquôto
 *
˛õ¡
);

380 
mosq_EXPORT
 
mosquôto_˛õ¡_¥Ÿocﬁ
(c⁄° 
mosquôto
 *
˛õ¡
);

393 
mosq_EXPORT
 
mosquôto_˛õ¡_¥Ÿocﬁ_vîsi⁄
(c⁄° 
mosquôto
 *
˛õ¡
);

401 
mosq_EXPORT
 
mosquôto_˛õ¡_sub_cou¡
(c⁄° 
mosquôto
 *
˛õ¡
);

409 
mosq_EXPORT
 c⁄° *
mosquôto_˛õ¡_u£∫ame
(c⁄° 
mosquôto
 *
˛õ¡
);

429 
mosq_EXPORT
 
mosquôto_£t_u£∫ame
(
mosquôto
 *
˛õ¡
, c⁄° *
u£∫ame
);

449 
mosq_EXPORT
 
mosquôto_kick_˛õ¡_by_˛õ¡id
(c⁄° *
˛õ¡id
, 
boﬁ
 
wôh_wûl
);

463 
mosq_EXPORT
 
mosquôto_kick_˛õ¡_by_u£∫ame
(c⁄° *
u£∫ame
, 
boﬁ
 
wôh_wûl
);

509 
mosq_EXPORT
 
mosquôto_brokî_publish
(

510 c⁄° *
˛õ¡id
,

511 c⁄° *
t›ic
,

512 
∑ylﬂdÀn
,

513 *
∑ylﬂd
,

514 
qos
,

515 
boﬁ
 
ªèö
,

516 
mosquôto_¥›îty
 *
¥›îtõs
);

548 
mosq_EXPORT
 
mosquôto_brokî_publish_c›y
(

549 c⁄° *
˛õ¡id
,

550 c⁄° *
t›ic
,

551 
∑ylﬂdÀn
,

552 c⁄° *
∑ylﬂd
,

553 
qos
,

554 
boﬁ
 
ªèö
,

555 
mosquôto_¥›îty
 *
¥›îtõs
);

557 #ifde‡
__˝lu•lus


	@open_source_lib/mosquitto/mosquitto-2.0.15/include/mosquitto_plugin.h

19 #i‚de‡
MOSQUITTO_PLUGIN_H


20 
	#MOSQUITTO_PLUGIN_H


	)

28 #ifde‡
__˝lu•lus


33 
	#MOSQ_PLUGIN_VERSION
 5

	)

36 
	#MOSQ_AUTH_PLUGIN_VERSION
 4

	)

38 
	#MOSQ_ACL_NONE
 0x00

	)

39 
	#MOSQ_ACL_READ
 0x01

	)

40 
	#MOSQ_ACL_WRITE
 0x02

	)

41 
	#MOSQ_ACL_SUBSCRIBE
 0x04

	)

42 
	#MOSQ_ACL_UNSUBSCRIBE
 0x08

	)

44 
	~<°dboﬁ.h
>

45 
	~<°döt.h
>

47 
	~<mosquôto_brokî.h
>

49 
mosquôto
;

51 
	smosquôto_›t
 {

52 *
key
;

53 *
vÆue
;

56 
	smosquôto_auth_›t
 {

57 *
key
;

58 *
vÆue
;

61 
	smosquôto_a˛_msg
 {

62 c⁄° *
t›ic
;

63 c⁄° *
∑ylﬂd
;

64 
∑ylﬂdÀn
;

65 
qos
;

66 
boﬁ
 
ªèö
;

69 #ifde‡
WIN32


70 
	#mosq_∂ugö_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

72 
	#mosq_∂ugö_EXPORT


	)

146 
mosq_∂ugö_EXPORT
 
mosquôto_∂ugö_vîsi⁄
(
suµ‹ãd_vîsi⁄_cou¡
, c⁄° *
suµ‹ãd_vîsi⁄s
);

169 
mosq_∂ugö_EXPORT
 
mosquôto_∂ugö_öô
(
mosquôto_∂ugö_id_t
 *
idítifõr
, **
u£rd©a
, 
mosquôto_›t
 *
›ti⁄s
, 
›ti⁄_cou¡
);

189 
mosq_∂ugö_EXPORT
 
mosquôto_∂ugö_˛ónup
(*
u£rd©a
, 
mosquôto_›t
 *
›ti⁄s
, 
›ti⁄_cou¡
);

212 
mosq_∂ugö_EXPORT
 
mosquôto_auth_∂ugö_vîsi⁄
();

234 
mosq_∂ugö_EXPORT
 
mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_›t
 *
›ts
, 
›t_cou¡
);

256 
mosq_∂ugö_EXPORT
 
mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
›ts
, 
›t_cou¡
);

284 
mosq_∂ugö_EXPORT
 
mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_›t
 *
›ts
, 
›t_cou¡
, 
boﬁ
 
ªlﬂd
);

312 
mosq_∂ugö_EXPORT
 
mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
›ts
, 
›t_cou¡
, 
boﬁ
 
ªlﬂd
);

339 
mosq_∂ugö_EXPORT
 
mosquôto_auth_a˛_check
(*
u£r_d©a
, 
ac˚ss
, 
mosquôto
 *
˛õ¡
, c⁄° 
mosquôto_a˛_msg
 *
msg
);

356 
mosq_∂ugö_EXPORT
 
mosquôto_auth_u≈wd_check
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
);

384 
mosq_∂ugö_EXPORT
 
mosquôto_auth_psk_key_gë
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
);

411 
mosq_∂ugö_EXPORT
 
mosquôto_auth_°¨t
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
mëhod
, 
boﬁ
 
ªauth
, c⁄° *
d©a_ö
, 
uöt16_t
 
d©a_ö_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
);

413 
mosq_∂ugö_EXPORT
 
mosquôto_auth_c⁄töue
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
mëhod
, c⁄° *
d©a_ö
, 
uöt16_t
 
d©a_ö_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
);

416 #ifde‡
__˝lu•lus


	@open_source_lib/mosquitto/mosquitto-2.0.15/include/mqtt_protocol.h

19 #i‚de‡
MQTT_PROTOCOL_H


20 
	#MQTT_PROTOCOL_H


	)

27 
	#PROTOCOL_NAME_v31
 "MQIsdp"

	)

28 
	#PROTOCOL_VERSION_v31
 3

	)

30 
	#PROTOCOL_NAME
 "MQTT"

	)

32 
	#PROTOCOL_VERSION_v311
 4

	)

33 
	#PROTOCOL_VERSION_v5
 5

	)

37 
	#CMD_CONNECT
 0x10U

	)

38 
	#CMD_CONNACK
 0x20U

	)

39 
	#CMD_PUBLISH
 0x30U

	)

40 
	#CMD_PUBACK
 0x40U

	)

41 
	#CMD_PUBREC
 0x50U

	)

42 
	#CMD_PUBREL
 0x60U

	)

43 
	#CMD_PUBCOMP
 0x70U

	)

44 
	#CMD_SUBSCRIBE
 0x80U

	)

45 
	#CMD_SUBACK
 0x90U

	)

46 
	#CMD_UNSUBSCRIBE
 0xA0U

	)

47 
	#CMD_UNSUBACK
 0xB0U

	)

48 
	#CMD_PINGREQ
 0xC0U

	)

49 
	#CMD_PINGRESP
 0xD0U

	)

50 
	#CMD_DISCONNECT
 0xE0U

	)

51 
	#CMD_AUTH
 0xF0U

	)

54 
	#CMD_WILL
 0x100

	)

68 
	emqâ311_c⁄«ck_codes
 {

69 
	mCONNACK_ACCEPTED
 = 0,

70 
	mCONNACK_REFUSED_PROTOCOL_VERSION
 = 1,

71 
	mCONNACK_REFUSED_IDENTIFIER_REJECTED
 = 2,

72 
	mCONNACK_REFUSED_SERVER_UNAVAILABLE
 = 3,

73 
	mCONNACK_REFUSED_BAD_USERNAME_PASSWORD
 = 4,

74 
	mCONNACK_REFUSED_NOT_AUTHORIZED
 = 5,

127 
	emqâ5_ªtu∫_codes
 {

128 
	mMQTT_RC_SUCCESS
 = 0,

129 
	mMQTT_RC_NORMAL_DISCONNECTION
 = 0,

130 
	mMQTT_RC_GRANTED_QOS0
 = 0,

131 
	mMQTT_RC_GRANTED_QOS1
 = 1,

132 
	mMQTT_RC_GRANTED_QOS2
 = 2,

133 
	mMQTT_RC_DISCONNECT_WITH_WILL_MSG
 = 4,

134 
	mMQTT_RC_NO_MATCHING_SUBSCRIBERS
 = 16,

135 
	mMQTT_RC_NO_SUBSCRIPTION_EXISTED
 = 17,

136 
	mMQTT_RC_CONTINUE_AUTHENTICATION
 = 24,

137 
	mMQTT_RC_REAUTHENTICATE
 = 25,

139 
	mMQTT_RC_UNSPECIFIED
 = 128,

140 
	mMQTT_RC_MALFORMED_PACKET
 = 129,

141 
	mMQTT_RC_PROTOCOL_ERROR
 = 130,

142 
	mMQTT_RC_IMPLEMENTATION_SPECIFIC
 = 131,

143 
	mMQTT_RC_UNSUPPORTED_PROTOCOL_VERSION
 = 132,

144 
	mMQTT_RC_CLIENTID_NOT_VALID
 = 133,

145 
	mMQTT_RC_BAD_USERNAME_OR_PASSWORD
 = 134,

146 
	mMQTT_RC_NOT_AUTHORIZED
 = 135,

147 
	mMQTT_RC_SERVER_UNAVAILABLE
 = 136,

148 
	mMQTT_RC_SERVER_BUSY
 = 137,

149 
	mMQTT_RC_BANNED
 = 138,

150 
	mMQTT_RC_SERVER_SHUTTING_DOWN
 = 139,

151 
	mMQTT_RC_BAD_AUTHENTICATION_METHOD
 = 140,

152 
	mMQTT_RC_KEEP_ALIVE_TIMEOUT
 = 141,

153 
	mMQTT_RC_SESSION_TAKEN_OVER
 = 142,

154 
	mMQTT_RC_TOPIC_FILTER_INVALID
 = 143,

155 
	mMQTT_RC_TOPIC_NAME_INVALID
 = 144,

156 
	mMQTT_RC_PACKET_ID_IN_USE
 = 145,

157 
	mMQTT_RC_PACKET_ID_NOT_FOUND
 = 146,

158 
	mMQTT_RC_RECEIVE_MAXIMUM_EXCEEDED
 = 147,

159 
	mMQTT_RC_TOPIC_ALIAS_INVALID
 = 148,

160 
	mMQTT_RC_PACKET_TOO_LARGE
 = 149,

161 
	mMQTT_RC_MESSAGE_RATE_TOO_HIGH
 = 150,

162 
	mMQTT_RC_QUOTA_EXCEEDED
 = 151,

163 
	mMQTT_RC_ADMINISTRATIVE_ACTION
 = 152,

164 
	mMQTT_RC_PAYLOAD_FORMAT_INVALID
 = 153,

165 
	mMQTT_RC_RETAIN_NOT_SUPPORTED
 = 154,

166 
	mMQTT_RC_QOS_NOT_SUPPORTED
 = 155,

167 
	mMQTT_RC_USE_ANOTHER_SERVER
 = 156,

168 
	mMQTT_RC_SERVER_MOVED
 = 157,

169 
	mMQTT_RC_SHARED_SUBS_NOT_SUPPORTED
 = 158,

170 
	mMQTT_RC_CONNECTION_RATE_EXCEEDED
 = 159,

171 
	mMQTT_RC_MAXIMUM_CONNECT_TIME
 = 160,

172 
	mMQTT_RC_SUBSCRIPTION_IDS_NOT_SUPPORTED
 = 161,

173 
	mMQTT_RC_WILDCARD_SUBS_NOT_SUPPORTED
 = 162,

208 
	emqâ5_¥›îty
 {

209 
	mMQTT_PROP_PAYLOAD_FORMAT_INDICATOR
 = 1,

210 
	mMQTT_PROP_MESSAGE_EXPIRY_INTERVAL
 = 2,

211 
	mMQTT_PROP_CONTENT_TYPE
 = 3,

212 
	mMQTT_PROP_RESPONSE_TOPIC
 = 8,

213 
	mMQTT_PROP_CORRELATION_DATA
 = 9,

214 
	mMQTT_PROP_SUBSCRIPTION_IDENTIFIER
 = 11,

215 
	mMQTT_PROP_SESSION_EXPIRY_INTERVAL
 = 17,

216 
	mMQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
 = 18,

217 
	mMQTT_PROP_SERVER_KEEP_ALIVE
 = 19,

218 
	mMQTT_PROP_AUTHENTICATION_METHOD
 = 21,

219 
	mMQTT_PROP_AUTHENTICATION_DATA
 = 22,

220 
	mMQTT_PROP_REQUEST_PROBLEM_INFORMATION
 = 23,

221 
	mMQTT_PROP_WILL_DELAY_INTERVAL
 = 24,

222 
	mMQTT_PROP_REQUEST_RESPONSE_INFORMATION
 = 25,

223 
	mMQTT_PROP_RESPONSE_INFORMATION
 = 26,

224 
	mMQTT_PROP_SERVER_REFERENCE
 = 28,

225 
	mMQTT_PROP_REASON_STRING
 = 31,

226 
	mMQTT_PROP_RECEIVE_MAXIMUM
 = 33,

227 
	mMQTT_PROP_TOPIC_ALIAS_MAXIMUM
 = 34,

228 
	mMQTT_PROP_TOPIC_ALIAS
 = 35,

229 
	mMQTT_PROP_MAXIMUM_QOS
 = 36,

230 
	mMQTT_PROP_RETAIN_AVAILABLE
 = 37,

231 
	mMQTT_PROP_USER_PROPERTY
 = 38,

232 
	mMQTT_PROP_MAXIMUM_PACKET_SIZE
 = 39,

233 
	mMQTT_PROP_WILDCARD_SUB_AVAILABLE
 = 40,

234 
	mMQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
 = 41,

235 
	mMQTT_PROP_SHARED_SUB_AVAILABLE
 = 42,

238 
	emqâ5_¥›îty_ty≥
 {

239 
	mMQTT_PROP_TYPE_BYTE
 = 1,

240 
	mMQTT_PROP_TYPE_INT16
 = 2,

241 
	mMQTT_PROP_TYPE_INT32
 = 3,

242 
	mMQTT_PROP_TYPE_VARINT
 = 4,

243 
	mMQTT_PROP_TYPE_BINARY
 = 5,

244 
	mMQTT_PROP_TYPE_STRING
 = 6,

245 
	mMQTT_PROP_TYPE_STRING_PAIR
 = 7

272 
	emqâ5_sub_›ti⁄s
 {

273 
	mMQTT_SUB_OPT_NO_LOCAL
 = 0x04,

274 
	mMQTT_SUB_OPT_RETAIN_AS_PUBLISHED
 = 0x08,

275 
	mMQTT_SUB_OPT_SEND_RETAIN_ALWAYS
 = 0x00,

276 
	mMQTT_SUB_OPT_SEND_RETAIN_NEW
 = 0x10,

277 
	mMQTT_SUB_OPT_SEND_RETAIN_NEVER
 = 0x20,

280 
	#MQTT_MAX_PAYLOAD
 268435455U

	)

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/actions.c

19 
	~"c⁄fig.h
"

21 
	~<°rög.h
>

23 
	~"mosquôto.h
"

24 
	~"mosquôto_öã∫Æ.h
"

25 
	~"mem‹y_mosq.h
"

26 
	~"mesßges_mosq.h
"

27 
	~"mqâ_¥Ÿocﬁ.h
"

28 
	~"√t_mosq.h
"

29 
	~"∑ckë_mosq.h
"

30 
	~"£nd_mosq.h
"

31 
	~"utû_mosq.h
"

34 
	$mosquôto_publish
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
)

36  
	`mosquôto_publish_v5
(
mosq
, 
mid
, 
t›ic
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
, 
NULL
);

37 
	}
}

39 
	$mosquôto_publish_v5
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

41 
mosquôto_mesßge_Æl
 *
mesßge
;

42 
uöt16_t
 
loˇl_mid
;

43 c⁄° 
mosquôto_¥›îty
 *
p
;

44 c⁄° 
mosquôto_¥›îty
 *
outgoög_¥›îtõs
 = 
NULL
;

45 
mosquôto_¥›îty
 *
¥›îtõs_c›y
 = 
NULL
;

46 
mosquôto_¥›îty
 
loˇl_¥›îty
;

47 
boﬁ
 
have_t›ic_Æüs
;

48 
rc
;

49 
size_t
 
éí
 = 0;

50 
uöt32_t
 
ªmaöög_Àngth
;

52 if(!
mosq
 || 
qos
<0 || qos>2Ë 
MOSQ_ERR_INVAL
;

53 if(
mosq
->
¥Ÿocﬁ
 !
mosq_p_mqâ5
 && 
¥›îtõs
Ë 
MOSQ_ERR_NOT_SUPPORTED
;

54 if(
qos
 > 
mosq
->
max_qos
Ë 
MOSQ_ERR_QOS_NOT_SUPPORTED
;

56 if(!
mosq
->
ªèö_avaûabÀ
){

57 
ªèö
 = 
Ál£
;

60 if(
¥›îtõs
){

61 if(
¥›îtõs
->
˛õ¡_gíî©ed
){

62 
outgoög_¥›îtõs
 = 
¥›îtõs
;

64 
	`mem˝y
(&
loˇl_¥›îty
, 
¥›îtõs
, (
mosquôto_¥›îty
));

65 
loˇl_¥›îty
.
˛õ¡_gíî©ed
 = 
åue
;

66 
loˇl_¥›îty
.
√xt
 = 
NULL
;

67 
outgoög_¥›îtõs
 = &
loˇl_¥›îty
;

69 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_PUBLISH
, 
outgoög_¥›îtõs
);

70 if(
rc
) Ñc;

73 if(!
t›ic
 || 
	`STREMPTY
(topic)){

74 if(
t›ic
Ët›i¯
NULL
;

76 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

77 
p
 = 
outgoög_¥›îtõs
;

78 
have_t›ic_Æüs
 = 
Ál£
;

79 
p
){

80 if(
p
->
idítifõr
 =
MQTT_PROP_TOPIC_ALIAS
){

81 
have_t›ic_Æüs
 = 
åue
;

84 
p
 =Ö->
√xt
;

86 if(
have_t›ic_Æüs
 =
Ál£
){

87  
MOSQ_ERR_INVAL
;

90  
MOSQ_ERR_INVAL
;

93 
éí
 = 
	`°æí
(
t›ic
);

94 if(
	`mosquôto_vÆid©e_utf8
(
t›ic
, ()
éí
)Ë 
MOSQ_ERR_MALFORMED_UTF8
;

95 if(
∑ylﬂdÀn
 < 0 ||ÖaylﬂdÀ¿> ()
MQTT_MAX_PAYLOAD
Ë 
MOSQ_ERR_PAYLOAD_SIZE
;

96 if(
	`mosquôto_pub_t›ic_check
(
t›ic
Ë!
MOSQ_ERR_SUCCESS
){

97  
MOSQ_ERR_INVAL
;

101 if(
mosq
->
maximum_∑ckë_size
 > 0){

102 
ªmaöög_Àngth
 = 1 + 2+(
uöt32_t
)
éí
 + (uöt32_t)
∑ylﬂdÀn
 + 
	`¥›îty__gë_Àngth_Æl
(
outgoög_¥›îtõs
);

103 if(
qos
 > 0){

104 
ªmaöög_Àngth
++;

106 if(
	`∑ckë__check_ovîsize
(
mosq
, 
ªmaöög_Àngth
)){

107  
MOSQ_ERR_OVERSIZE_PACKET
;

111 
loˇl_mid
 = 
	`mosquôto__mid_gíî©e
(
mosq
);

112 if(
mid
){

113 *
mid
 = 
loˇl_mid
;

116 if(
qos
 == 0){

117  
	`£nd__publish
(
mosq
, 
loˇl_mid
, 
t›ic
, (
uöt32_t
)
∑ylﬂdÀn
, 
∑ylﬂd
, (
uöt8_t
)
qos
, 
ªèö
, 
Ál£
, 
outgoög_¥›îtõs
, 
NULL
, 0);

119 if(
outgoög_¥›îtõs
){

120 
rc
 = 
	`mosquôto_¥›îty_c›y_Æl
(&
¥›îtõs_c›y
, 
outgoög_¥›îtõs
);

121 if(
rc
) Ñc;

123 
mesßge
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_mesßge_Æl
));

124 if(!
mesßge
){

125 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs_c›y
);

126  
MOSQ_ERR_NOMEM
;

129 
mesßge
->
√xt
 = 
NULL
;

130 
mesßge
->
time°amp
 = 
	`mosquôto_time
();

131 
mesßge
->
msg
.
mid
 = 
loˇl_mid
;

132 if(
t›ic
){

133 
mesßge
->
msg
.
t›ic
 = 
	`mosquôto__°rdup
(topic);

134 if(!
mesßge
->
msg
.
t›ic
){

135 
	`mesßge__˛ónup
(&
mesßge
);

136 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs_c›y
);

137  
MOSQ_ERR_NOMEM
;

140 if(
∑ylﬂdÀn
){

141 
mesßge
->
msg
.
∑ylﬂdÀn
 =Öayloadlen;

142 
mesßge
->
msg
.
∑ylﬂd
 = 
	`mosquôto__mÆloc
(()
∑ylﬂdÀn
*(
uöt8_t
));

143 if(!
mesßge
->
msg
.
∑ylﬂd
){

144 
	`mesßge__˛ónup
(&
mesßge
);

145 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs_c›y
);

146  
MOSQ_ERR_NOMEM
;

148 
	`mem˝y
(
mesßge
->
msg
.
∑ylﬂd
,Öaylﬂd, (
uöt32_t
)
∑ylﬂdÀn
*(
uöt8_t
));

150 
mesßge
->
msg
.
∑ylﬂdÀn
 = 0;

151 
mesßge
->
msg
.
∑ylﬂd
 = 
NULL
;

153 
mesßge
->
msg
.
qos
 = (
uöt8_t
)qos;

154 
mesßge
->
msg
.
ªèö
 =Ñetain;

155 
mesßge
->
dup
 = 
Ál£
;

156 
mesßge
->
¥›îtõs
 = 
¥›îtõs_c›y
;

158 
	`±hªad_muãx_lock
(&
mosq
->
msgs_out
.
muãx
);

159 
mesßge
->
°©e
 = 
mosq_ms_övÆid
;

160 
rc
 = 
	`mesßge__queue
(
mosq
, 
mesßge
, 
mosq_md_out
);

161 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_out
.
muãx
);

162  
rc
;

164 
	}
}

167 
	$mosquôto_subs¸ibe
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
sub
, 
qos
)

169  
	`mosquôto_subs¸ibe_mu…ùÀ
(
mosq
, 
mid
, 1, (*c⁄° *c⁄°)&
sub
, 
qos
, 0, 
NULL
);

170 
	}
}

173 
	$mosquôto_subs¸ibe_v5
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
sub
, 
qos
, 
›ti⁄s
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

175  
	`mosquôto_subs¸ibe_mu…ùÀ
(
mosq
, 
mid
, 1, (*c⁄° *c⁄°)&
sub
, 
qos
, 
›ti⁄s
, 
¥›îtõs
);

176 
	}
}

179 
	$mosquôto_subs¸ibe_mu…ùÀ
(
mosquôto
 *
mosq
, *
mid
, 
sub_cou¡
, *c⁄° *c⁄° 
sub
, 
qos
, 
›ti⁄s
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

181 c⁄° 
mosquôto_¥›îty
 *
outgoög_¥›îtõs
 = 
NULL
;

182 
mosquôto_¥›îty
 
loˇl_¥›îty
;

183 
i
;

184 
rc
;

185 
uöt32_t
 
ªmaöög_Àngth
 = 0;

186 
¶í
;

188 if(!
mosq
 || !
sub_cou¡
 || !
sub
Ë 
MOSQ_ERR_INVAL
;

189 if(
mosq
->
¥Ÿocﬁ
 !
mosq_p_mqâ5
 && 
¥›îtõs
Ë 
MOSQ_ERR_NOT_SUPPORTED
;

190 if(
qos
 < 0 || qo†> 2Ë 
MOSQ_ERR_INVAL
;

191 if((
›ti⁄s
 & 0x30Ë=0x30 || (›ti⁄†& 0xC0Ë!0Ë 
MOSQ_ERR_INVAL
;

192 if(
mosq
->
sock
 =
INVALID_SOCKET
Ë 
MOSQ_ERR_NO_CONN
;

194 if(
¥›îtõs
){

195 if(
¥›îtõs
->
˛õ¡_gíî©ed
){

196 
outgoög_¥›îtõs
 = 
¥›îtõs
;

198 
	`mem˝y
(&
loˇl_¥›îty
, 
¥›îtõs
, (
mosquôto_¥›îty
));

199 
loˇl_¥›îty
.
˛õ¡_gíî©ed
 = 
åue
;

200 
loˇl_¥›îty
.
√xt
 = 
NULL
;

201 
outgoög_¥›îtõs
 = &
loˇl_¥›îty
;

203 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_SUBSCRIBE
, 
outgoög_¥›îtõs
);

204 if(
rc
) Ñc;

207 
i
=0; i<
sub_cou¡
; i++){

208 if(
	`mosquôto_sub_t›ic_check
(
sub
[
i
])Ë 
MOSQ_ERR_INVAL
;

209 
¶í
 = ()
	`°æí
(
sub
[
i
]);

210 if(
	`mosquôto_vÆid©e_utf8
(
sub
[
i
], 
¶í
)Ë 
MOSQ_ERR_MALFORMED_UTF8
;

211 
ªmaöög_Àngth
 +2+(
uöt32_t
)
¶í
 + 1;

214 if(
mosq
->
maximum_∑ckë_size
 > 0){

215 
ªmaöög_Àngth
 +2 + 
	`¥›îty__gë_Àngth_Æl
(
outgoög_¥›îtõs
);

216 if(
	`∑ckë__check_ovîsize
(
mosq
, 
ªmaöög_Àngth
)){

217  
MOSQ_ERR_OVERSIZE_PACKET
;

220 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ311
 || mosq->¥Ÿocﬁ =
mosq_p_mqâ31
){

221 
›ti⁄s
 = 0;

224  
	`£nd__subs¸ibe
(
mosq
, 
mid
, 
sub_cou¡
, 
sub
, 
qos
|
›ti⁄s
, 
outgoög_¥›îtõs
);

225 
	}
}

228 
	$mosquôto_unsubs¸ibe
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
sub
)

230  
	`mosquôto_unsubs¸ibe_mu…ùÀ
(
mosq
, 
mid
, 1, (*c⁄° *c⁄°)&
sub
, 
NULL
);

231 
	}
}

233 
	$mosquôto_unsubs¸ibe_v5
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
sub
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

235  
	`mosquôto_unsubs¸ibe_mu…ùÀ
(
mosq
, 
mid
, 1, (*c⁄° *c⁄°)&
sub
, 
¥›îtõs
);

236 
	}
}

238 
	$mosquôto_unsubs¸ibe_mu…ùÀ
(
mosquôto
 *
mosq
, *
mid
, 
sub_cou¡
, *c⁄° *c⁄° 
sub
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

240 c⁄° 
mosquôto_¥›îty
 *
outgoög_¥›îtõs
 = 
NULL
;

241 
mosquôto_¥›îty
 
loˇl_¥›îty
;

242 
rc
;

243 
i
;

244 
uöt32_t
 
ªmaöög_Àngth
 = 0;

245 
¶í
;

247 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

248 if(
mosq
->
¥Ÿocﬁ
 !
mosq_p_mqâ5
 && 
¥›îtõs
Ë 
MOSQ_ERR_NOT_SUPPORTED
;

249 if(
mosq
->
sock
 =
INVALID_SOCKET
Ë 
MOSQ_ERR_NO_CONN
;

251 if(
¥›îtõs
){

252 if(
¥›îtõs
->
˛õ¡_gíî©ed
){

253 
outgoög_¥›îtõs
 = 
¥›îtõs
;

255 
	`mem˝y
(&
loˇl_¥›îty
, 
¥›îtõs
, (
mosquôto_¥›îty
));

256 
loˇl_¥›îty
.
˛õ¡_gíî©ed
 = 
åue
;

257 
loˇl_¥›îty
.
√xt
 = 
NULL
;

258 
outgoög_¥›îtõs
 = &
loˇl_¥›îty
;

260 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_UNSUBSCRIBE
, 
outgoög_¥›îtõs
);

261 if(
rc
) Ñc;

264 
i
=0; i<
sub_cou¡
; i++){

265 if(
	`mosquôto_sub_t›ic_check
(
sub
[
i
])Ë 
MOSQ_ERR_INVAL
;

266 
¶í
 = ()
	`°æí
(
sub
[
i
]);

267 if(
	`mosquôto_vÆid©e_utf8
(
sub
[
i
], 
¶í
)Ë 
MOSQ_ERR_MALFORMED_UTF8
;

268 
ªmaöög_Àngth
 +2U + (
uöt32_t
)
¶í
;

271 if(
mosq
->
maximum_∑ckë_size
 > 0){

272 
ªmaöög_Àngth
 +2U + 
	`¥›îty__gë_Àngth_Æl
(
outgoög_¥›îtõs
);

273 if(
	`∑ckë__check_ovîsize
(
mosq
, 
ªmaöög_Àngth
)){

274  
MOSQ_ERR_OVERSIZE_PACKET
;

278  
	`£nd__unsubs¸ibe
(
mosq
, 
mid
, 
sub_cou¡
, 
sub
, 
outgoög_¥›îtõs
);

279 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/alias_mosq.c

19 
	~"c⁄fig.h
"

21 
	~"mosquôto.h
"

22 
	~"Æüs_mosq.h
"

23 
	~"mem‹y_mosq.h
"

25 
	$Æüs__add
(
mosquôto
 *
mosq
, c⁄° *
t›ic
, 
uöt16_t
 
Æüs
)

27 
i
;

28 
mosquôto__Æüs
 *
Æü£s
;

30 
i
=0; i<
mosq
->
Æüs_cou¡
; i++){

31 if(
mosq
->
Æü£s
[
i
].
Æüs
 ==álias){

32 
	`mosquôto__‰ì
(
mosq
->
Æü£s
[
i
].
t›ic
);

33 
mosq
->
Æü£s
[
i
].
t›ic
 = 
	`mosquôto__°rdup
(topic);

34 if(
mosq
->
Æü£s
[
i
].
t›ic
){

35  
MOSQ_ERR_SUCCESS
;

37  
MOSQ_ERR_NOMEM
;

43 
Æü£s
 = 
	`mosquôto__ªÆloc
(
mosq
->Æü£s, (
mosquôto__Æüs
)*(
size_t
)(mosq->
Æüs_cou¡
+1));

44 if(!
Æü£s
Ë 
MOSQ_ERR_NOMEM
;

46 
mosq
->
Æü£s
 =áliases;

47 
mosq
->
Æü£s
[mosq->
Æüs_cou¡
].
Æüs
 =álias;

48 
mosq
->
Æü£s
[mosq->
Æüs_cou¡
].
t›ic
 = 
	`mosquôto__°rdup
(topic);

49 if(!
mosq
->
Æü£s
[mosq->
Æüs_cou¡
].
t›ic
){

50  
MOSQ_ERR_NOMEM
;

52 
mosq
->
Æüs_cou¡
++;

54  
MOSQ_ERR_SUCCESS
;

55 
	}
}

58 
	$Æüs__föd
(
mosquôto
 *
mosq
, **
t›ic
, 
uöt16_t
 
Æüs
)

60 
i
;

62 
i
=0; i<
mosq
->
Æüs_cou¡
; i++){

63 if(
mosq
->
Æü£s
[
i
].
Æüs
 ==álias){

64 *
t›ic
 = 
	`mosquôto__°rdup
(
mosq
->
Æü£s
[
i
].topic);

65 if(*
t›ic
){

66  
MOSQ_ERR_SUCCESS
;

68  
MOSQ_ERR_NOMEM
;

72  
MOSQ_ERR_INVAL
;

73 
	}
}

76 
	$Æüs__‰ì_Æl
(
mosquôto
 *
mosq
)

78 
i
;

80 
i
=0; i<
mosq
->
Æüs_cou¡
; i++){

81 
	`mosquôto__‰ì
(
mosq
->
Æü£s
[
i
].
t›ic
);

83 
	`mosquôto__‰ì
(
mosq
->
Æü£s
);

84 
mosq
->
Æü£s
 = 
NULL
;

85 
mosq
->
Æüs_cou¡
 = 0;

86 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/alias_mosq.h

19 #i‚de‡
ALIAS_MOSQ_H


20 
	#ALIAS_MOSQ_H


	)

22 
	~"mosquôto_öã∫Æ.h
"

24 
Æüs__add
(
mosquôto
 *
mosq
, c⁄° *
t›ic
, 
uöt16_t
 
Æüs
);

25 
Æüs__föd
(
mosquôto
 *
mosq
, **
t›ic
, 
uöt16_t
 
Æüs
);

26 
Æüs__‰ì_Æl
(
mosquôto
 *
mosq
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/callbacks.c

19 
	~"c⁄fig.h
"

21 
	~"mosquôto.h
"

22 
	~"mosquôto_öã∫Æ.h
"

25 
	$mosquôto_c⁄√˘_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_c⁄√˘
)(mosquitto *, *, ))

27 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

28 
mosq
->
⁄_c⁄√˘
 = on_connect;

29 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

30 
	}
}

32 
	$mosquôto_c⁄√˘_wôh_Êags_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_c⁄√˘
)(mosquitto *, *, , ))

34 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

35 
mosq
->
⁄_c⁄√˘_wôh_Êags
 = 
⁄_c⁄√˘
;

36 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

37 
	}
}

39 
	$mosquôto_c⁄√˘_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_c⁄√˘
)(mosquôtÿ*, *, , , c⁄° 
mosquôto_¥›îty
 *))

41 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

42 
mosq
->
⁄_c⁄√˘_v5
 = 
⁄_c⁄√˘
;

43 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

44 
	}
}

46 
	$mosquôto_disc⁄√˘_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_disc⁄√˘
)(mosquitto *, *, ))

48 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

49 
mosq
->
⁄_disc⁄√˘
 = on_disconnect;

50 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

51 
	}
}

53 
	$mosquôto_disc⁄√˘_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_disc⁄√˘
)(mosquôtÿ*, *, , c⁄° 
mosquôto_¥›îty
 *))

55 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

56 
mosq
->
⁄_disc⁄√˘_v5
 = 
⁄_disc⁄√˘
;

57 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

58 
	}
}

60 
	$mosquôto_publish_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_publish
)(mosquitto *, *, ))

62 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

63 
mosq
->
⁄_publish
 = on_publish;

64 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

65 
	}
}

67 
	$mosquôto_publish_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_publish
)(mosquôtÿ*, *, , , c⁄° 
mosquôto_¥›îty
 *
¥›s
))

69 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

70 
mosq
->
⁄_publish_v5
 = 
⁄_publish
;

71 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

72 
	}
}

74 
	$mosquôto_mesßge_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_mesßge
)(mosquôtÿ*, *, c⁄° 
mosquôto_mesßge
 *))

76 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

77 
mosq
->
⁄_mesßge
 = on_message;

78 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

79 
	}
}

81 
	$mosquôto_mesßge_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_mesßge
)(mosquôtÿ*, *, c⁄° 
mosquôto_mesßge
 *, c⁄° 
mosquôto_¥›îty
 *
¥›s
))

83 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

84 
mosq
->
⁄_mesßge_v5
 = 
⁄_mesßge
;

85 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

86 
	}
}

88 
	$mosquôto_subs¸ibe_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_subs¸ibe
)(mosquitto *, *, , , const *))

90 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

91 
mosq
->
⁄_subs¸ibe
 = on_subscribe;

92 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

93 
	}
}

95 
	$mosquôto_subs¸ibe_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_subs¸ibe
)(mosquôtÿ*, *, , , c⁄° *, c⁄° 
mosquôto_¥›îty
 *
¥›s
))

97 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

98 
mosq
->
⁄_subs¸ibe_v5
 = 
⁄_subs¸ibe
;

99 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

100 
	}
}

102 
	$mosquôto_unsubs¸ibe_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_unsubs¸ibe
)(mosquitto *, *, ))

104 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

105 
mosq
->
⁄_unsubs¸ibe
 = on_unsubscribe;

106 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

107 
	}
}

109 
	$mosquôto_unsubs¸ibe_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_unsubs¸ibe
)(mosquôtÿ*, *, , c⁄° 
mosquôto_¥›îty
 *
¥›s
))

111 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

112 
mosq
->
⁄_unsubs¸ibe_v5
 = 
⁄_unsubs¸ibe
;

113 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

114 
	}
}

116 
	$mosquôto_log_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_log
)(mosquitto *, *, , const *))

118 
	`±hªad_muãx_lock
(&
mosq
->
log_ˇŒback_muãx
);

119 
mosq
->
⁄_log
 = on_log;

120 
	`±hªad_muãx_u∆ock
(&
mosq
->
log_ˇŒback_muãx
);

121 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/connect.c

19 
	~"c⁄fig.h
"

21 
	~<°rög.h
>

23 
	~"mosquôto.h
"

24 
	~"mosquôto_öã∫Æ.h
"

25 
	~"loggög_mosq.h
"

26 
	~"mesßges_mosq.h
"

27 
	~"mem‹y_mosq.h
"

28 
	~"∑ckë_mosq.h
"

29 
	~"mqâ_¥Ÿocﬁ.h
"

30 
	~"√t_mosq.h
"

31 
	~"£nd_mosq.h
"

32 
	~"socks_mosq.h
"

33 
	~"utû_mosq.h
"

35 
	gÆph™um
[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

37 
mosquôto__ªc⁄√˘
(
mosquôto
 *
mosq
, 
boﬁ
 
blockög
);

38 
mosquôto__c⁄√˘_öô
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
);

41 
	$mosquôto__c⁄√˘_öô
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
)

43 
i
;

44 
rc
;

46 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

47 if(!
ho°
 || 
p‹t
 < 0 ||Ö‹à> 
UINT16_MAX
Ë 
MOSQ_ERR_INVAL
;

48 if(
kì∑live
 !0 && (kì∑livê< 5 || kì∑livê> 
UINT16_MAX
)Ë 
MOSQ_ERR_INVAL
;

51 if(
mosq
->
id
 =
NULL
 && (mosq->
¥Ÿocﬁ
 =
mosq_p_mqâ31
)){

52 
mosq
->
id
 = (*)
	`mosquôto__ˇŒoc
(24, ());

53 if(!
mosq
->
id
){

54  
MOSQ_ERR_NOMEM
;

56 
mosq
->
id
[0] = 'm';

57 
mosq
->
id
[1] = 'o';

58 
mosq
->
id
[2] = 's';

59 
mosq
->
id
[3] = 'q';

60 
mosq
->
id
[4] = '-';

62 
rc
 = 
	`utû__øndom_byãs
(&
mosq
->
id
[5], 18);

63 if(
rc
) Ñc;

65 
i
=5; i<23; i++){

66 
mosq
->
id
[
i
] = 
Æph™um
[(mosq->id[i]&0x7F)%((alphanum)-1)];

70 
	`mosquôto__‰ì
(
mosq
->
ho°
);

71 
mosq
->
ho°
 = 
	`mosquôto__°rdup
(host);

72 if(!
mosq
->
ho°
Ë 
MOSQ_ERR_NOMEM
;

73 
mosq
->
p‹t
 = (
uöt16_t
)port;

75 
mosq
->
kì∑live
 = (
uöt16_t
)keepalive;

76 
mosq
->
msgs_ö
.
öÊight_quŸa
 = mosq->msgs_ö.
öÊight_maximum
;

77 
mosq
->
msgs_out
.
öÊight_quŸa
 = mosq->msgs_out.
öÊight_maximum
;

78 
mosq
->
ªèö_avaûabÀ
 = 1;

79 
	`mosquôto__£t_ªque°_disc⁄√˘
(
mosq
, 
Ál£
);

81  
MOSQ_ERR_SUCCESS
;

82 
	}
}

85 
	$mosquôto_c⁄√˘
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
)

87  
	`mosquôto_c⁄√˘_böd
(
mosq
, 
ho°
, 
p‹t
, 
kì∑live
, 
NULL
);

88 
	}
}

91 
	$mosquôto_c⁄√˘_böd
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
, c⁄° *
böd_addªss
)

93  
	`mosquôto_c⁄√˘_böd_v5
(
mosq
, 
ho°
, 
p‹t
, 
kì∑live
, 
böd_addªss
, 
NULL
);

94 
	}
}

96 
	$mosquôto_c⁄√˘_böd_v5
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
, c⁄° *
böd_addªss
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

98 
rc
;

100 if(
böd_addªss
){

101 
rc
 = 
	`mosquôto_°rög_›ti⁄
(
mosq
, 
MOSQ_OPT_BIND_ADDRESS
, 
böd_addªss
);

102 if(
rc
) Ñc;

105 
	`mosquôto_¥›îty_‰ì_Æl
(&
mosq
->
c⁄√˘_¥›îtõs
);

106 if(
¥›îtõs
){

107 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_CONNECT
, 
¥›îtõs
);

108 if(
rc
) Ñc;

110 
rc
 = 
	`mosquôto_¥›îty_c›y_Æl
(&
mosq
->
c⁄√˘_¥›îtõs
, 
¥›îtõs
);

111 if(
rc
) Ñc;

112 
mosq
->
c⁄√˘_¥›îtõs
->
˛õ¡_gíî©ed
 = 
åue
;

115 
rc
 = 
	`mosquôto__c⁄√˘_öô
(
mosq
, 
ho°
, 
p‹t
, 
kì∑live
);

116 if(
rc
) Ñc;

118 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_√w
);

120  
	`mosquôto__ªc⁄√˘
(
mosq
, 
åue
);

121 
	}
}

124 
	$mosquôto_c⁄√˘_async
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
)

126  
	`mosquôto_c⁄√˘_böd_async
(
mosq
, 
ho°
, 
p‹t
, 
kì∑live
, 
NULL
);

127 
	}
}

130 
	$mosquôto_c⁄√˘_böd_async
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
, c⁄° *
böd_addªss
)

132 
rc
;

134 if(
böd_addªss
){

135 
rc
 = 
	`mosquôto_°rög_›ti⁄
(
mosq
, 
MOSQ_OPT_BIND_ADDRESS
, 
böd_addªss
);

136 if(
rc
) Ñc;

139 
rc
 = 
	`mosquôto__c⁄√˘_öô
(
mosq
, 
ho°
, 
p‹t
, 
kì∑live
);

140 if(
rc
) Ñc;

142  
	`mosquôto__ªc⁄√˘
(
mosq
, 
Ál£
);

143 
	}
}

146 
	$mosquôto_ªc⁄√˘_async
(
mosquôto
 *
mosq
)

148  
	`mosquôto__ªc⁄√˘
(
mosq
, 
Ál£
);

149 
	}
}

152 
	$mosquôto_ªc⁄√˘
(
mosquôto
 *
mosq
)

154  
	`mosquôto__ªc⁄√˘
(
mosq
, 
åue
);

155 
	}
}

158 
	$mosquôto__ªc⁄√˘
(
mosquôto
 *
mosq
, 
boﬁ
 
blockög
)

160 c⁄° 
mosquôto_¥›îty
 *
outgoög_¥›îtõs
 = 
NULL
;

161 
mosquôto_¥›îty
 
loˇl_¥›îty
;

162 
rc
;

164 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

165 if(!
mosq
->
ho°
Ë 
MOSQ_ERR_INVAL
;

167 if(
mosq
->
c⁄√˘_¥›îtõs
){

168 if(
mosq
->
¥Ÿocﬁ
 !
mosq_p_mqâ5
Ë 
MOSQ_ERR_NOT_SUPPORTED
;

170 if(
mosq
->
c⁄√˘_¥›îtõs
->
˛õ¡_gíî©ed
){

171 
outgoög_¥›îtõs
 = 
mosq
->
c⁄√˘_¥›îtõs
;

173 
	`mem˝y
(&
loˇl_¥›îty
, 
mosq
->
c⁄√˘_¥›îtõs
, (
mosquôto_¥›îty
));

174 
loˇl_¥›îty
.
˛õ¡_gíî©ed
 = 
åue
;

175 
loˇl_¥›îty
.
√xt
 = 
NULL
;

176 
outgoög_¥›îtõs
 = &
loˇl_¥›îty
;

178 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_CONNECT
, 
outgoög_¥›îtõs
);

179 if(
rc
) Ñc;

182 
	`±hªad_muãx_lock
(&
mosq
->
msgtime_muãx
);

183 
mosq
->
œ°_msg_ö
 = 
	`mosquôto_time
();

184 
mosq
->
√xt_msg_out
 = mosq->
œ°_msg_ö
 + mosq->
kì∑live
;

185 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgtime_muãx
);

187 
mosq
->
pög_t
 = 0;

189 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

191 
	`∑ckë__˛ónup_Æl
(
mosq
);

193 
	`mesßge__ªc⁄√˘_ª£t
(
mosq
, 
Ál£
);

195 if(
mosq
->
sock
 !
INVALID_SOCKET
){

196 
	`√t__sockë_˛o£
(
mosq
);

199 #ifde‡
WITH_SOCKS


200 if(
mosq
->
socks5_ho°
){

201 
rc
 = 
	`√t__sockë_c⁄√˘
(
mosq
, mosq->
socks5_ho°
, mosq->
socks5_p‹t
, mosq->
böd_addªss
, 
blockög
);

205 
rc
 = 
	`√t__sockë_c⁄√˘
(
mosq
, mosq->
ho°
, mosq->
p‹t
, mosq->
böd_addªss
, 
blockög
);

207 if(
rc
>0){

208 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_c⁄√˘_≥ndög
);

209  
rc
;

212 #ifde‡
WITH_SOCKS


213 if(
mosq
->
socks5_ho°
){

214 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_socks5_√w
);

215  
	`socks5__£nd
(
mosq
);

219 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_c⁄√˘ed
);

220 
rc
 = 
	`£nd__c⁄√˘
(
mosq
, mosq->
kì∑live
, mosq->
˛ón_°¨t
, 
outgoög_¥›îtõs
);

221 if(
rc
){

222 
	`∑ckë__˛ónup_Æl
(
mosq
);

223 
	`√t__sockë_˛o£
(
mosq
);

224 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_√w
);

226  
rc
;

228 
	}
}

231 
	$mosquôto_disc⁄√˘
(
mosquôto
 *
mosq
)

233  
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
NULL
);

234 
	}
}

236 
	$mosquôto_disc⁄√˘_v5
(
mosquôto
 *
mosq
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

238 c⁄° 
mosquôto_¥›îty
 *
outgoög_¥›îtõs
 = 
NULL
;

239 
mosquôto_¥›îty
 
loˇl_¥›îty
;

240 
rc
;

241 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

242 if(
mosq
->
¥Ÿocﬁ
 !
mosq_p_mqâ5
 && 
¥›îtõs
Ë 
MOSQ_ERR_NOT_SUPPORTED
;

243 if(
ªas⁄_code
 < 0 ||Ñós⁄_codê> 
UINT8_MAX
Ë 
MOSQ_ERR_INVAL
;

245 if(
¥›îtõs
){

246 if(
¥›îtõs
->
˛õ¡_gíî©ed
){

247 
outgoög_¥›îtõs
 = 
¥›îtõs
;

249 
	`mem˝y
(&
loˇl_¥›îty
, 
¥›îtõs
, (
mosquôto_¥›îty
));

250 
loˇl_¥›îty
.
˛õ¡_gíî©ed
 = 
åue
;

251 
loˇl_¥›îty
.
√xt
 = 
NULL
;

252 
outgoög_¥›îtõs
 = &
loˇl_¥›îty
;

254 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_DISCONNECT
, 
outgoög_¥›îtõs
);

255 if(
rc
) Ñc;

258 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_disc⁄√˘ed
);

259 
	`mosquôto__£t_ªque°_disc⁄√˘
(
mosq
, 
åue
);

260 if(
mosq
->
sock
 =
INVALID_SOCKET
){

261  
MOSQ_ERR_NO_CONN
;

263  
	`£nd__disc⁄√˘
(
mosq
, (
uöt8_t
)
ªas⁄_code
, 
outgoög_¥›îtõs
);

265 
	}
}

268 
	$do_˛õ¡_disc⁄√˘
(
mosquôto
 *
mosq
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

270 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_disc⁄√˘ed
);

271 
	`√t__sockë_˛o£
(
mosq
);

274 
	`±hªad_muãx_lock
(&
mosq
->
out_∑ckë_muãx
);

275 
mosq
->
cuºít_out_∑ckë
 = mosq->
out_∑ckë
;

276 if(
mosq
->
out_∑ckë
){

277 
mosq
->
out_∑ckë
 = mosq->out_∑ckë->
√xt
;

278 if(!
mosq
->
out_∑ckë
){

279 
mosq
->
out_∑ckë_œ°
 = 
NULL
;

281 
mosq
->
out_∑ckë_cou¡
--;

283 
	`±hªad_muãx_u∆ock
(&
mosq
->
out_∑ckë_muãx
);

285 
	`±hªad_muãx_lock
(&
mosq
->
msgtime_muãx
);

286 
mosq
->
√xt_msg_out
 = 
	`mosquôto_time
(Ë+ mosq->
kì∑live
;

287 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgtime_muãx
);

289 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

290 if(
mosq
->
⁄_disc⁄√˘
){

291 
mosq
->
ö_ˇŒback
 = 
åue
;

292 
mosq
->
	`⁄_disc⁄√˘
(mosq, mosq->
u£rd©a
, 
ªas⁄_code
);

293 
mosq
->
ö_ˇŒback
 = 
Ál£
;

295 if(
mosq
->
⁄_disc⁄√˘_v5
){

296 
mosq
->
ö_ˇŒback
 = 
åue
;

297 
mosq
->
	`⁄_disc⁄√˘_v5
(mosq, mosq->
u£rd©a
, 
ªas⁄_code
, 
¥›îtõs
);

298 
mosq
->
ö_ˇŒback
 = 
Ál£
;

300 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

301 
	`±hªad_muãx_u∆ock
(&
mosq
->
cuºít_out_∑ckë_muãx
);

302 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/cpp/mosquittopp.cpp

17 
	~<c°dlib
>

18 
	~<mosquôto.h
>

19 
	~<mosquôt›p.h
>

21 
	#UNUSED
(
A
Ë()(A)

	)

23 
«me•a˚
 
	gmosqµ
 {

25 
⁄_c⁄√˘_wøµî
(
mosquôto
 *
mosq
, *
u£rd©a
, 
rc
)

27 
˛ass
 
mosquôt›p
 *
	gm
 = (˛as†mosquôt›∞*)
u£rd©a
;

29 
UNUSED
(
mosq
);

31 
	gm
->
⁄_c⁄√˘
(
rc
);

34 
⁄_c⁄√˘_wôh_Êags_wøµî
(
mosquôto
 *
mosq
, *
u£rd©a
, 
rc
, 
Êags
)

36 
˛ass
 
mosquôt›p
 *
	gm
 = (˛as†mosquôt›∞*)
u£rd©a
;

37 
UNUSED
(
mosq
);

38 
	gm
->
⁄_c⁄√˘_wôh_Êags
(
rc
, 
Êags
);

41 
⁄_disc⁄√˘_wøµî
(
mosquôto
 *
mosq
, *
u£rd©a
, 
rc
)

43 
˛ass
 
mosquôt›p
 *
	gm
 = (˛as†mosquôt›∞*)
u£rd©a
;

44 
UNUSED
(
mosq
);

45 
	gm
->
⁄_disc⁄√˘
(
rc
);

48 
⁄_publish_wøµî
(
mosquôto
 *
mosq
, *
u£rd©a
, 
mid
)

50 
˛ass
 
mosquôt›p
 *
	gm
 = (˛as†mosquôt›∞*)
u£rd©a
;

51 
UNUSED
(
mosq
);

52 
	gm
->
⁄_publish
(
mid
);

55 
⁄_mesßge_wøµî
(
mosquôto
 *
mosq
, *
u£rd©a
, c⁄° 
mosquôto_mesßge
 *
mesßge
)

57 
˛ass
 
mosquôt›p
 *
	gm
 = (˛as†mosquôt›∞*)
u£rd©a
;

58 
UNUSED
(
mosq
);

59 
	gm
->
⁄_mesßge
(
mesßge
);

62 
⁄_subs¸ibe_wøµî
(
mosquôto
 *
mosq
, *
u£rd©a
, 
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

64 
˛ass
 
mosquôt›p
 *
	gm
 = (˛as†mosquôt›∞*)
u£rd©a
;

65 
UNUSED
(
mosq
);

66 
	gm
->
⁄_subs¸ibe
(
mid
, 
qos_cou¡
, 
gø¡ed_qos
);

69 
⁄_unsubs¸ibe_wøµî
(
mosquôto
 *
mosq
, *
u£rd©a
, 
mid
)

71 
˛ass
 
mosquôt›p
 *
	gm
 = (˛as†mosquôt›∞*)
u£rd©a
;

72 
UNUSED
(
mosq
);

73 
	gm
->
⁄_unsubs¸ibe
(
mid
);

77 
⁄_log_wøµî
(
mosquôto
 *
mosq
, *
u£rd©a
, 
Àvñ
, c⁄° *
°r
)

79 
˛ass
 
mosquôt›p
 *
	gm
 = (˛as†mosquôt›∞*)
u£rd©a
;

80 
UNUSED
(
mosq
);

81 
	gm
->
⁄_log
(
Àvñ
, 
°r
);

84 
lib_vîsi⁄
(*
maj‹
, *
mö‹
, *
ªvisi⁄
)

86 if(
	gmaj‹
Ë*maj‹ = 
LIBMOSQUITTO_MAJOR
;

87 if(
	gmö‹
Ë*mö‹ = 
LIBMOSQUITTO_MINOR
;

88 if(
	gªvisi⁄
Ë*ªvisi⁄ = 
LIBMOSQUITTO_REVISION
;

89  
	gLIBMOSQUITTO_VERSION_NUMBER
;

92 
lib_öô
()

94  
mosquôto_lib_öô
();

97 
lib_˛ónup
()

99  
mosquôto_lib_˛ónup
();

102 c⁄° * 
°ªº‹
(
mosq_î∫o
)

104  
mosquôto_°ªº‹
(
mosq_î∫o
);

107 c⁄° * 
c⁄«ck_°rög
(
c⁄«ck_code
)

109  
mosquôto_c⁄«ck_°rög
(
c⁄«ck_code
);

112 
sub_t›ic_tokíi£
(c⁄° *
subt›ic
, ***
t›ics
, *
cou¡
)

114  
mosquôto_sub_t›ic_tokíi£
(
subt›ic
, 
t›ics
, 
cou¡
);

117 
sub_t›ic_tokís_‰ì
(***
t›ics
, 
cou¡
)

119  
mosquôto_sub_t›ic_tokís_‰ì
(
t›ics
, 
cou¡
);

122 
t›ic_m©ches_sub
(c⁄° *
sub
, c⁄° *
t›ic
, 
boﬁ
 *
ªsu…
)

124  
mosquôto_t›ic_m©ches_sub
(
sub
, 
t›ic
, 
ªsu…
);

127 
vÆid©e_utf8
(c⁄° *
°r
, 
Àn
)

129  
mosquôto_vÆid©e_utf8
(
°r
, 
Àn
);

132 
subs¸ibe_sim∂e
(

133 
mosquôto_mesßge
 **
mesßges
,

134 
msg_cou¡
,

135 
boﬁ
 
ªèöed
,

136 c⁄° *
t›ic
,

137 
qos
,

138 c⁄° *
ho°
,

139 
p‹t
,

140 c⁄° *
˛õ¡_id
,

141 
kì∑live
,

142 
boﬁ
 
˛ón_£ssi⁄
,

143 c⁄° *
u£∫ame
,

144 c⁄° *
∑ssw‹d
,

145 c⁄° 
libmosquôto_wûl
 *
wûl
,

146 c⁄° 
libmosquôto_és
 *
és
)

148  
mosquôto_subs¸ibe_sim∂e
(

149 
mesßges
, 
msg_cou¡
, 
ªèöed
,

150 
t›ic
, 
qos
,

151 
ho°
, 
p‹t
, 
˛õ¡_id
, 
kì∑live
, 
˛ón_£ssi⁄
,

152 
u£∫ame
, 
∑ssw‹d
,

153 
wûl
, 
és
);

156 
mosqµ_EXPORT
 
subs¸ibe_ˇŒback
(

157 (*
ˇŒback
)(
mosquôto
 *, *, c⁄° 
mosquôto_mesßge
 *),

158 *
u£rd©a
,

159 c⁄° *
t›ic
,

160 
qos
,

161 c⁄° *
ho°
,

162 
p‹t
,

163 c⁄° *
˛õ¡_id
,

164 
kì∑live
,

165 
boﬁ
 
˛ón_£ssi⁄
,

166 c⁄° *
u£∫ame
,

167 c⁄° *
∑ssw‹d
,

168 c⁄° 
libmosquôto_wûl
 *
wûl
,

169 c⁄° 
libmosquôto_és
 *
és
)

171  
mosquôto_subs¸ibe_ˇŒback
(

172 
ˇŒback
, 
u£rd©a
,

173 
t›ic
, 
qos
,

174 
ho°
, 
p‹t
, 
˛õ¡_id
, 
kì∑live
, 
˛ón_£ssi⁄
,

175 
u£∫ame
, 
∑ssw‹d
,

176 
wûl
, 
és
);

180 
	gmosquôt›p
::
mosquôt›p
(c⁄° *
id
, 
boﬁ
 
˛ón_£ssi⁄
)

182 
	gm_mosq
 = 
mosquôto_√w
(
id
, 
˛ón_£ssi⁄
, 
this
);

183 
mosquôto_c⁄√˘_ˇŒback_£t
(
m_mosq
, 
⁄_c⁄√˘_wøµî
);

184 
mosquôto_c⁄√˘_wôh_Êags_ˇŒback_£t
(
m_mosq
, 
⁄_c⁄√˘_wôh_Êags_wøµî
);

185 
mosquôto_disc⁄√˘_ˇŒback_£t
(
m_mosq
, 
⁄_disc⁄√˘_wøµî
);

186 
mosquôto_publish_ˇŒback_£t
(
m_mosq
, 
⁄_publish_wøµî
);

187 
mosquôto_mesßge_ˇŒback_£t
(
m_mosq
, 
⁄_mesßge_wøµî
);

188 
mosquôto_subs¸ibe_ˇŒback_£t
(
m_mosq
, 
⁄_subs¸ibe_wøµî
);

189 
mosquôto_unsubs¸ibe_ˇŒback_£t
(
m_mosq
, 
⁄_unsubs¸ibe_wøµî
);

190 
mosquôto_log_ˇŒback_£t
(
m_mosq
, 
⁄_log_wøµî
);

193 
	gmosquôt›p
::~
mosquôt›p
()

195 
mosquôto_de°roy
(
m_mosq
);

198 
	gmosquôt›p
::
ªöôüli£
(c⁄° *
id
, 
boﬁ
 
˛ón_£ssi⁄
)

200 
	grc
;

201 
	grc
 = 
mosquôto_ªöôüli£
(
m_mosq
, 
id
, 
˛ón_£ssi⁄
, 
this
);

202 if(
	grc
 =
MOSQ_ERR_SUCCESS
){

203 
mosquôto_c⁄√˘_ˇŒback_£t
(
m_mosq
, 
⁄_c⁄√˘_wøµî
);

204 
mosquôto_c⁄√˘_wôh_Êags_ˇŒback_£t
(
m_mosq
, 
⁄_c⁄√˘_wôh_Êags_wøµî
);

205 
mosquôto_disc⁄√˘_ˇŒback_£t
(
m_mosq
, 
⁄_disc⁄√˘_wøµî
);

206 
mosquôto_publish_ˇŒback_£t
(
m_mosq
, 
⁄_publish_wøµî
);

207 
mosquôto_mesßge_ˇŒback_£t
(
m_mosq
, 
⁄_mesßge_wøµî
);

208 
mosquôto_subs¸ibe_ˇŒback_£t
(
m_mosq
, 
⁄_subs¸ibe_wøµî
);

209 
mosquôto_unsubs¸ibe_ˇŒback_£t
(
m_mosq
, 
⁄_unsubs¸ibe_wøµî
);

210 
mosquôto_log_ˇŒback_£t
(
m_mosq
, 
⁄_log_wøµî
);

212  
	grc
;

215 
	gmosquôt›p
::
c⁄√˘
(c⁄° *
ho°
, 
p‹t
, 
kì∑live
)

217  
mosquôto_c⁄√˘
(
m_mosq
, 
ho°
, 
p‹t
, 
kì∑live
);

220 
	gmosquôt›p
::
c⁄√˘
(c⁄° *
ho°
, 
p‹t
, 
kì∑live
, c⁄° *
böd_addªss
)

222  
mosquôto_c⁄√˘_böd
(
m_mosq
, 
ho°
, 
p‹t
, 
kì∑live
, 
böd_addªss
);

225 
	gmosquôt›p
::
c⁄√˘_async
(c⁄° *
ho°
, 
p‹t
, 
kì∑live
)

227  
mosquôto_c⁄√˘_async
(
m_mosq
, 
ho°
, 
p‹t
, 
kì∑live
);

230 
	gmosquôt›p
::
c⁄√˘_async
(c⁄° *
ho°
, 
p‹t
, 
kì∑live
, c⁄° *
böd_addªss
)

232  
mosquôto_c⁄√˘_böd_async
(
m_mosq
, 
ho°
, 
p‹t
, 
kì∑live
, 
böd_addªss
);

235 
	gmosquôt›p
::
ªc⁄√˘
()

237  
mosquôto_ªc⁄√˘
(
m_mosq
);

240 
	gmosquôt›p
::
ªc⁄√˘_async
()

242  
mosquôto_ªc⁄√˘_async
(
m_mosq
);

245 
	gmosquôt›p
::
disc⁄√˘
()

247  
mosquôto_disc⁄√˘
(
m_mosq
);

250 
	gmosquôt›p
::
sockë
()

252  
mosquôto_sockë
(
m_mosq
);

255 
	gmosquôt›p
::
wûl_£t
(c⁄° *
t›ic
, 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
)

257  
mosquôto_wûl_£t
(
m_mosq
, 
t›ic
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
);

260 
	gmosquôt›p
::
wûl_˛ór
()

262  
mosquôto_wûl_˛ór
(
m_mosq
);

265 
	gmosquôt›p
::
u£∫ame_pw_£t
(c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
)

267  
mosquôto_u£∫ame_pw_£t
(
m_mosq
, 
u£∫ame
, 
∑ssw‹d
);

270 
	gmosquôt›p
::
publish
(*
mid
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
)

272  
mosquôto_publish
(
m_mosq
, 
mid
, 
t›ic
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
);

275 
	gmosquôt›p
::
ªc⁄√˘_dñay_£t
(
ªc⁄√˘_dñay
, 
ªc⁄√˘_dñay_max
, 
boﬁ
 
ªc⁄√˘_exp⁄ítül_backoff
)

277 
mosquôto_ªc⁄√˘_dñay_£t
(
m_mosq
, 
ªc⁄√˘_dñay
, 
ªc⁄√˘_dñay_max
, 
ªc⁄√˘_exp⁄ítül_backoff
);

280 
	gmosquôt›p
::
max_öÊight_mesßges_£t
(
max_öÊight_mesßges
)

282  
mosquôto_max_öÊight_mesßges_£t
(
m_mosq
, 
max_öÊight_mesßges
);

285 
	gmosquôt›p
::
mesßge_ªåy_£t
(
mesßge_ªåy
)

287 
mosquôto_mesßge_ªåy_£t
(
m_mosq
, 
mesßge_ªåy
);

290 
	gmosquôt›p
::
subs¸ibe
(*
mid
, c⁄° *
sub
, 
qos
)

292  
mosquôto_subs¸ibe
(
m_mosq
, 
mid
, 
sub
, 
qos
);

295 
	gmosquôt›p
::
unsubs¸ibe
(*
mid
, c⁄° *
sub
)

297  
mosquôto_unsubs¸ibe
(
m_mosq
, 
mid
, 
sub
);

300 
	gmosquôt›p
::
lo›
(
timeout
, 
max_∑ckës
)

302  
mosquôto_lo›
(
m_mosq
, 
timeout
, 
max_∑ckës
);

305 
	gmosquôt›p
::
lo›_misc
()

307  
mosquôto_lo›_misc
(
m_mosq
);

310 
	gmosquôt›p
::
lo›_ªad
(
max_∑ckës
)

312  
mosquôto_lo›_ªad
(
m_mosq
, 
max_∑ckës
);

315 
	gmosquôt›p
::
lo›_wrôe
(
max_∑ckës
)

317  
mosquôto_lo›_wrôe
(
m_mosq
, 
max_∑ckës
);

320 
	gmosquôt›p
::
lo›_f‹evî
(
timeout
, 
max_∑ckës
)

322  
mosquôto_lo›_f‹evî
(
m_mosq
, 
timeout
, 
max_∑ckës
);

325 
	gmosquôt›p
::
lo›_°¨t
()

327  
mosquôto_lo›_°¨t
(
m_mosq
);

330 
	gmosquôt›p
::
lo›_°›
(
boﬁ
 
f‹˚
)

332  
mosquôto_lo›_°›
(
m_mosq
, 
f‹˚
);

335 
boﬁ
 
	gmosquôt›p
::
w™t_wrôe
()

337  
mosquôto_w™t_wrôe
(
m_mosq
);

340 
	gmosquôt›p
::
›ts_£t
(
mosq_›t_t
 
›ti⁄
, *
vÆue
)

342  
mosquôto_›ts_£t
(
m_mosq
, 
›ti⁄
, 
vÆue
);

345 
	gmosquôt›p
::
thªaded_£t
(
boﬁ
 
thªaded
)

347  
mosquôto_thªaded_£t
(
m_mosq
, 
thªaded
);

350 
	gmosquôt›p
::
u£r_d©a_£t
(*
u£rd©a
)

352 
mosquôto_u£r_d©a_£t
(
m_mosq
, 
u£rd©a
);

355 
	gmosquôt›p
::
socks5_£t
(c⁄° *
ho°
, 
p‹t
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
)

357  
mosquôto_socks5_£t
(
m_mosq
, 
ho°
, 
p‹t
, 
u£∫ame
, 
∑ssw‹d
);

361 
	gmosquôt›p
::
és_£t
(c⁄° *
ˇfûe
, c⁄° *
ˇ∑th
, c⁄° *
˚πfûe
, c⁄° *
keyfûe
, (*
pw_ˇŒback
)(*
buf
, 
size
, 
rwÊag
, *
u£rd©a
))

363  
mosquôto_és_£t
(
m_mosq
, 
ˇfûe
, 
ˇ∑th
, 
˚πfûe
, 
keyfûe
, 
pw_ˇŒback
);

366 
	gmosquôt›p
::
és_›ts_£t
(
˚π_ªqs
, c⁄° *
és_vîsi⁄
, c⁄° *
cùhîs
)

368  
mosquôto_és_›ts_£t
(
m_mosq
, 
˚π_ªqs
, 
és_vîsi⁄
, 
cùhîs
);

371 
	gmosquôt›p
::
és_ö£cuª_£t
(
boﬁ
 
vÆue
)

373  
mosquôto_és_ö£cuª_£t
(
m_mosq
, 
vÆue
);

376 
	gmosquôt›p
::
és_psk_£t
(c⁄° *
psk
, c⁄° *
idítôy
, c⁄° *
cùhîs
)

378  
mosquôto_és_psk_£t
(
m_mosq
, 
psk
, 
idítôy
, 
cùhîs
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/cpp/mosquittopp.h

17 #i‚de‡
MOSQUITTOPP_H


18 
	#MOSQUITTOPP_H


	)

20 #i‡
deföed
(
_WIN32
Ë&& !deföed(
LIBMOSQUITTO_STATIC
)

21 #ifde‡
mosquôt›p_EXPORTS


22 
	#mosqµ_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

24 
	#mosqµ_EXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

27 
	#mosqµ_EXPORT


	)

30 
	~<c°dlib
>

31 
	~<mosquôto.h
>

32 
	~<time.h
>

34 
«me•a˚
 
	gmosqµ
 {

37 
mosqµ_EXPORT
 c⁄° * 
°ªº‹
(
mosq_î∫o
);

38 
mosqµ_EXPORT
 c⁄° * 
c⁄«ck_°rög
(
c⁄«ck_code
);

39 
mosqµ_EXPORT
 
sub_t›ic_tokíi£
(c⁄° *
subt›ic
, ***
t›ics
, *
cou¡
);

40 
mosqµ_EXPORT
 
sub_t›ic_tokís_‰ì
(***
t›ics
, 
cou¡
);

41 
mosqµ_EXPORT
 
lib_vîsi⁄
(*
maj‹
, *
mö‹
, *
ªvisi⁄
);

42 
mosqµ_EXPORT
 
lib_öô
();

43 
mosqµ_EXPORT
 
lib_˛ónup
();

44 
mosqµ_EXPORT
 
t›ic_m©ches_sub
(c⁄° *
sub
, c⁄° *
t›ic
, 
boﬁ
 *
ªsu…
);

45 
mosqµ_EXPORT
 
vÆid©e_utf8
(c⁄° *
°r
, 
Àn
);

46 
mosqµ_EXPORT
 
subs¸ibe_sim∂e
(

47 
mosquôto_mesßge
 **
mesßges
,

48 
msg_cou¡
,

49 
boﬁ
 
ªèöed
,

50 c⁄° *
t›ic
,

51 
qos
=0,

52 c⁄° *
ho°
="localhost",

53 
p‹t
=1883,

54 c⁄° *
˛õ¡_id
=
NULL
,

55 
kì∑live
=60,

56 
boﬁ
 
˛ón_£ssi⁄
=
åue
,

57 c⁄° *
u£∫ame
=
NULL
,

58 c⁄° *
∑ssw‹d
=
NULL
,

59 c⁄° 
libmosquôto_wûl
 *
wûl
=
NULL
,

60 c⁄° 
libmosquôto_és
 *
és
=
NULL
);

62 
mosqµ_EXPORT
 
subs¸ibe_ˇŒback
(

63 (*
ˇŒback
)(
mosquôto
 *, *, c⁄° 
mosquôto_mesßge
 *),

64 *
u£rd©a
,

65 c⁄° *
t›ic
,

66 
qos
=0,

67 c⁄° *
ho°
="localhost",

68 
p‹t
=1883,

69 c⁄° *
˛õ¡_id
=
NULL
,

70 
kì∑live
=60,

71 
boﬁ
 
˛ón_£ssi⁄
=
åue
,

72 c⁄° *
u£∫ame
=
NULL
,

73 c⁄° *
∑ssw‹d
=
NULL
,

74 c⁄° 
libmosquôto_wûl
 *
wûl
=
NULL
,

75 c⁄° 
libmosquôto_és
 *
és
=
NULL
);

83 ˛as†
	cmosqµ_EXPORT
 
	gmosquôt›p
 {

84 
	g¥iv©e
:

85 
mosquôto
 *
m_mosq
;

86 
	gpublic
:

87 
mosquôt›p
(c⁄° *
id
=
NULL
, 
boﬁ
 
˛ón_£ssi⁄
=
åue
);

88 
	gvútuÆ
 ~
mosquôt›p
();

90 
ªöôüli£
(c⁄° *
id
, 
boﬁ
 
˛ón_£ssi⁄
);

91 
sockë
();

92 
wûl_£t
(c⁄° *
t›ic
, 
∑ylﬂdÀn
=0, c⁄° *
∑ylﬂd
=
NULL
, 
qos
=0, 
boﬁ
 
ªèö
=
Ál£
);

93 
wûl_˛ór
();

94 
u£∫ame_pw_£t
(c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
=
NULL
);

95 
c⁄√˘
(c⁄° *
ho°
, 
p‹t
=1883, 
kì∑live
=60);

96 
c⁄√˘_async
(c⁄° *
ho°
, 
p‹t
=1883, 
kì∑live
=60);

97 
c⁄√˘
(c⁄° *
ho°
, 
p‹t
, 
kì∑live
, c⁄° *
böd_addªss
);

98 
c⁄√˘_async
(c⁄° *
ho°
, 
p‹t
, 
kì∑live
, c⁄° *
böd_addªss
);

99 
ªc⁄√˘
();

100 
ªc⁄√˘_async
();

101 
disc⁄√˘
();

102 
publish
(*
mid
, c⁄° *
t›ic
, 
∑ylﬂdÀn
=0, c⁄° *
∑ylﬂd
=
NULL
, 
qos
=0, 
boﬁ
 
ªèö
=
Ál£
);

103 
subs¸ibe
(*
mid
, c⁄° *
sub
, 
qos
=0);

104 
unsubs¸ibe
(*
mid
, c⁄° *
sub
);

105 
ªc⁄√˘_dñay_£t
(
ªc⁄√˘_dñay
, 
ªc⁄√˘_dñay_max
, 
boﬁ
 
ªc⁄√˘_exp⁄ítül_backoff
);

106 
max_öÊight_mesßges_£t
(
max_öÊight_mesßges
);

107 
mesßge_ªåy_£t
(
mesßge_ªåy
);

108 
u£r_d©a_£t
(*
u£rd©a
);

109 
és_£t
(c⁄° *
ˇfûe
, c⁄° *
ˇ∑th
=
NULL
, c⁄° *
˚πfûe
=NULL, c⁄° *
keyfûe
=NULL, (*
pw_ˇŒback
)(*
buf
, 
size
, 
rwÊag
, *
u£rd©a
)=NULL);

110 
és_›ts_£t
(
˚π_ªqs
, c⁄° *
és_vîsi⁄
=
NULL
, c⁄° *
cùhîs
=NULL);

111 
és_ö£cuª_£t
(
boﬁ
 
vÆue
);

112 
és_psk_£t
(c⁄° *
psk
, c⁄° *
idítôy
, c⁄° *
cùhîs
=
NULL
);

113 
›ts_£t
(
mosq_›t_t
 
›ti⁄
, *
vÆue
);

115 
lo›
(
timeout
=-1, 
max_∑ckës
=1);

116 
lo›_misc
();

117 
lo›_ªad
(
max_∑ckës
=1);

118 
lo›_wrôe
(
max_∑ckës
=1);

119 
lo›_f‹evî
(
timeout
=-1, 
max_∑ckës
=1);

120 
lo›_°¨t
();

121 
lo›_°›
(
boﬁ
 
f‹˚
=
Ál£
);

122 
boﬁ
 
w™t_wrôe
();

123 
thªaded_£t
(
boﬁ
 
thªaded
=
åue
);

124 
socks5_£t
(c⁄° *
ho°
, 
p‹t
=1080, c⁄° *
u£∫ame
=
NULL
, c⁄° *
∑ssw‹d
=NULL);

127 
vútuÆ
 
⁄_c⁄√˘
() {;}

128 
vútuÆ
 
⁄_c⁄√˘_wôh_Êags
(, ) {;}

129 
vútuÆ
 
⁄_disc⁄√˘
() {;}

130 
vútuÆ
 
⁄_publish
() {;}

131 
vútuÆ
 
⁄_mesßge
(c⁄° 
mosquôto_mesßge
 * ) {;}

132 
vútuÆ
 
⁄_subs¸ibe
(, , const * ) {;}

133 
vútuÆ
 
⁄_unsubs¸ibe
() {;}

134 
vútuÆ
 
⁄_log
(, const * ) {;}

135 
vútuÆ
 
⁄_îr‹
() {;}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/dummypthread.h

1 #i‚de‡
DUMMYPTHREAD_H


2 
	#DUMMYPTHREAD_H


	)

4 
	#±hªad_¸óã
(
A
, 
B
, 
C
, 
D
)

	)

5 
	#±hªad_joö
(
A
, 
B
)

	)

6 
	#±hªad_ˇn˚l
(
A
)

	)

7 
	#±hªad_ã°ˇn˚l
()

	)

9 
	#±hªad_muãx_öô
(
A
, 
B
)

	)

10 
	#±hªad_muãx_de°roy
(
A
)

	)

11 
	#±hªad_muãx_lock
(
A
)

	)

12 
	#±hªad_muãx_u∆ock
(
A
)

	)

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_auth.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°rög.h
>

24 
	~"loggög_mosq.h
"

25 
	~"mosquôto_öã∫Æ.h
"

26 
	~"mqâ_¥Ÿocﬁ.h
"

27 
	~"∑ckë_mosq.h
"

28 
	~"¥›îty_mosq.h
"

29 
	~"ªad_h™dÀ.h
"

32 
	$h™dÀ__auth
(
mosquôto
 *
mosq
)

34 
rc
 = 0;

35 
uöt8_t
 
ªas⁄_code
;

36 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

38 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

39 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†ª˚ived AUTH", 
	`SAFE_PRINT
(mosq->
id
));

41 if(
mosq
->
¥Ÿocﬁ
 !
mosq_p_mqâ5
){

42  
MOSQ_ERR_PROTOCOL
;

44 if(
mosq
->
ö_∑ckë
.
comm™d
 !
CMD_AUTH
){

45  
MOSQ_ERR_MALFORMED_PACKET
;

48 if(
	`∑ckë__ªad_byã
(&
mosq
->
ö_∑ckë
, &
ªas⁄_code
))  1;

50 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_AUTH
, &
mosq
->
ö_∑ckë
, &
¥›îtõs
);

51 if(
rc
) Ñc;

52 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

54  
MOSQ_ERR_SUCCESS
;

55 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_connack.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

23 
	~"mosquôto.h
"

24 
	~"loggög_mosq.h
"

25 
	~"mem‹y_mosq.h
"

26 
	~"mesßges_mosq.h
"

27 
	~"mqâ_¥Ÿocﬁ.h
"

28 
	~"√t_mosq.h
"

29 
	~"∑ckë_mosq.h
"

30 
	~"¥›îty_mosq.h
"

31 
	~"ªad_h™dÀ.h
"

33 
	$c⁄«ck_ˇŒback
(
mosquôto
 *
mosq
, 
uöt8_t
 
ªas⁄_code
, uöt8_à
c⁄√˘_Êags
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

35 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†ª˚ived CONNACK (%d)", 
	`SAFE_PRINT
(mosq->
id
), 
ªas⁄_code
);

36 if(
ªas⁄_code
 =
MQTT_RC_SUCCESS
){

37 
mosq
->
ªc⁄√˘s
 = 0;

39 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

40 if(
mosq
->
⁄_c⁄√˘
){

41 
mosq
->
ö_ˇŒback
 = 
åue
;

42 
mosq
->
	`⁄_c⁄√˘
(mosq, mosq->
u£rd©a
, 
ªas⁄_code
);

43 
mosq
->
ö_ˇŒback
 = 
Ál£
;

45 if(
mosq
->
⁄_c⁄√˘_wôh_Êags
){

46 
mosq
->
ö_ˇŒback
 = 
åue
;

47 
mosq
->
	`⁄_c⁄√˘_wôh_Êags
(mosq, mosq->
u£rd©a
, 
ªas⁄_code
, 
c⁄√˘_Êags
);

48 
mosq
->
ö_ˇŒback
 = 
Ál£
;

50 if(
mosq
->
⁄_c⁄√˘_v5
){

51 
mosq
->
ö_ˇŒback
 = 
åue
;

52 
mosq
->
	`⁄_c⁄√˘_v5
(mosq, mosq->
u£rd©a
, 
ªas⁄_code
, 
c⁄√˘_Êags
, 
¥›îtõs
);

53 
mosq
->
ö_ˇŒback
 = 
Ál£
;

55 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

56 
	}
}

59 
	$h™dÀ__c⁄«ck
(
mosquôto
 *
mosq
)

61 
uöt8_t
 
c⁄√˘_Êags
;

62 
uöt8_t
 
ªas⁄_code
;

63 
rc
;

64 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

65 *
˛õ¡id
 = 
NULL
;

67 
	`as£π
(
mosq
);

68 if(
mosq
->
ö_∑ckë
.
comm™d
 !
CMD_CONNACK
){

69  
MOSQ_ERR_MALFORMED_PACKET
;

72 
rc
 = 
	`∑ckë__ªad_byã
(&
mosq
->
ö_∑ckë
, &
c⁄√˘_Êags
);

73 if(
rc
) Ñc;

74 
rc
 = 
	`∑ckë__ªad_byã
(&
mosq
->
ö_∑ckë
, &
ªas⁄_code
);

75 if(
rc
) Ñc;

77 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

78 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_CONNACK
, &
mosq
->
ö_∑ckë
, &
¥›îtõs
);

80 if(
rc
 =
MOSQ_ERR_PROTOCOL
 && 
ªas⁄_code
 =
CONNACK_REFUSED_PROTOCOL_VERSION
){

85 
	`c⁄«ck_ˇŒback
(
mosq
, 
MQTT_RC_UNSUPPORTED_PROTOCOL_VERSION
, 
c⁄√˘_Êags
, 
NULL
);

86  
rc
;

87 }if(
rc
){

88  
rc
;

92 
	`mosquôto_¥›îty_ªad_°rög
(
¥›îtõs
, 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
, &
˛õ¡id
, 
Ál£
);

93 if(
˛õ¡id
){

94 if(
mosq
->
id
){

97 
	`‰ì
(
˛õ¡id
);

98 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

99  
MOSQ_ERR_PROTOCOL
;

101 
mosq
->
id
 = 
˛õ¡id
;

102 
˛õ¡id
 = 
NULL
;

106 
	`mosquôto_¥›îty_ªad_byã
(
¥›îtõs
, 
MQTT_PROP_RETAIN_AVAILABLE
, &
mosq
->
ªèö_avaûabÀ
, 
Ál£
);

107 
	`mosquôto_¥›îty_ªad_byã
(
¥›îtõs
, 
MQTT_PROP_MAXIMUM_QOS
, &
mosq
->
max_qos
, 
Ál£
);

108 
	`mosquôto_¥›îty_ªad_öt16
(
¥›îtõs
, 
MQTT_PROP_RECEIVE_MAXIMUM
, &
mosq
->
msgs_out
.
öÊight_maximum
, 
Ál£
);

109 
	`mosquôto_¥›îty_ªad_öt16
(
¥›îtõs
, 
MQTT_PROP_SERVER_KEEP_ALIVE
, &
mosq
->
kì∑live
, 
Ál£
);

110 
	`mosquôto_¥›îty_ªad_öt32
(
¥›îtõs
, 
MQTT_PROP_MAXIMUM_PACKET_SIZE
, &
mosq
->
maximum_∑ckë_size
, 
Ál£
);

112 
mosq
->
msgs_out
.
öÊight_quŸa
 = mosq->msgs_out.
öÊight_maximum
;

113 
	`mesßge__ªc⁄√˘_ª£t
(
mosq
, 
åue
);

115 
	`c⁄«ck_ˇŒback
(
mosq
, 
ªas⁄_code
, 
c⁄√˘_Êags
, 
¥›îtõs
);

116 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

118 
ªas⁄_code
){

120 
	`±hªad_muãx_lock
(&
mosq
->
°©e_muãx
);

121 if(
mosq
->
°©e
 !
mosq_cs_disc⁄√˘ög
){

122 
mosq
->
°©e
 = 
mosq_cs_a˘ive
;

124 
	`±hªad_muãx_u∆ock
(&
mosq
->
°©e_muãx
);

125 
	`mesßge__ªåy_check
(
mosq
);

126  
MOSQ_ERR_SUCCESS
;

132  
MOSQ_ERR_CONN_REFUSED
;

134  
MOSQ_ERR_PROTOCOL
;

136 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_disconnect.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°rög.h
>

24 
	~"loggög_mosq.h
"

25 
	~"mqâ_¥Ÿocﬁ.h
"

26 
	~"mem‹y_mosq.h
"

27 
	~"√t_mosq.h
"

28 
	~"∑ckë_mosq.h
"

29 
	~"¥›îty_mosq.h
"

30 
	~"ªad_h™dÀ.h
"

31 
	~"£nd_mosq.h
"

32 
	~"utû_mosq.h
"

34 
	$h™dÀ__disc⁄√˘
(
mosquôto
 *
mosq
)

36 
rc
;

37 
uöt8_t
 
ªas⁄_code
;

38 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

40 if(!
mosq
){

41  
MOSQ_ERR_INVAL
;

44 if(
mosq
->
¥Ÿocﬁ
 !
mosq_p_mqâ5
){

45  
MOSQ_ERR_PROTOCOL
;

47 if(
mosq
->
ö_∑ckë
.
comm™d
 !
CMD_DISCONNECT
){

48  
MOSQ_ERR_MALFORMED_PACKET
;

51 
rc
 = 
	`∑ckë__ªad_byã
(&
mosq
->
ö_∑ckë
, &
ªas⁄_code
);

52 if(
rc
) Ñc;

54 if(
mosq
->
ö_∑ckë
.
ªmaöög_Àngth
 > 2){

55 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_DISCONNECT
, &
mosq
->
ö_∑ckë
, &
¥›îtõs
);

56 if(
rc
) Ñc;

57 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

60 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Re˚ived DISCONNECT (%d)", 
ªas⁄_code
);

62 
	`do_˛õ¡_disc⁄√˘
(
mosq
, 
ªas⁄_code
, 
¥›îtõs
);

64 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

66  
MOSQ_ERR_SUCCESS
;

67 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_ping.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

25 #ifde‡
WITH_BROKER


26 
	~"mosquôto_brokî_öã∫Æ.h
"

29 
	~"mosquôto.h
"

30 
	~"loggög_mosq.h
"

31 
	~"mem‹y_mosq.h
"

32 
	~"mesßges_mosq.h
"

33 
	~"mqâ_¥Ÿocﬁ.h
"

34 
	~"√t_mosq.h
"

35 
	~"∑ckë_mosq.h
"

36 
	~"ªad_h™dÀ.h
"

37 
	~"£nd_mosq.h
"

38 
	~"utû_mosq.h
"

40 
	$h™dÀ__pögªq
(
mosquôto
 *
mosq
)

42 
	`as£π
(
mosq
);

44 if(
	`mosquôto__gë_°©e
(
mosq
Ë!
mosq_cs_a˘ive
){

45  
MOSQ_ERR_PROTOCOL
;

47 if(
mosq
->
ö_∑ckë
.
comm™d
 !
CMD_PINGREQ
){

48  
MOSQ_ERR_MALFORMED_PACKET
;

51 #ifde‡
WITH_BROKER


52 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Re˚ived PINGREQ from %s", 
	`SAFE_PRINT
(
mosq
->
id
));

54  
MOSQ_ERR_PROTOCOL
;

56  
	`£nd__pögª•
(
mosq
);

57 
	}
}

59 
	$h™dÀ__pögª•
(
mosquôto
 *
mosq
)

61 
	`as£π
(
mosq
);

63 if(
	`mosquôto__gë_°©e
(
mosq
Ë!
mosq_cs_a˘ive
){

64  
MOSQ_ERR_PROTOCOL
;

67 
mosq
->
pög_t
 = 0;

68 #ifde‡
WITH_BROKER


69 if(
mosq
->
bridge
 =
NULL
){

70  
MOSQ_ERR_PROTOCOL
;

72 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Re˚ived PINGRESP from %s", 
	`SAFE_PRINT
(
mosq
->
id
));

74 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†ª˚ived PINGRESP", 
	`SAFE_PRINT
(mosq->
id
));

76  
MOSQ_ERR_SUCCESS
;

77 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_pubackcomp.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

25 #ifde‡
WITH_BROKER


26 
	~"mosquôto_brokî_öã∫Æ.h
"

29 
	~"mosquôto.h
"

30 
	~"loggög_mosq.h
"

31 
	~"mem‹y_mosq.h
"

32 
	~"mesßges_mosq.h
"

33 
	~"mqâ_¥Ÿocﬁ.h
"

34 
	~"√t_mosq.h
"

35 
	~"∑ckë_mosq.h
"

36 
	~"ªad_h™dÀ.h
"

37 
	~"£nd_mosq.h
"

38 
	~"utû_mosq.h
"

41 
	$h™dÀ__pubackcomp
(
mosquôto
 *
mosq
, c⁄° *
ty≥
)

43 
uöt8_t
 
ªas⁄_code
 = 0;

44 
uöt16_t
 
mid
;

45 
rc
;

46 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

47 
qos
;

49 
	`as£π
(
mosq
);

51 if(
	`mosquôto__gë_°©e
(
mosq
Ë!
mosq_cs_a˘ive
){

52  
MOSQ_ERR_PROTOCOL
;

54 if(
mosq
->
¥Ÿocﬁ
 !
mosq_p_mqâ31
){

55 if((
mosq
->
ö_∑ckë
.
comm™d
&0x0F) != 0x00){

56  
MOSQ_ERR_MALFORMED_PACKET
;

60 
	`±hªad_muãx_lock
(&
mosq
->
msgs_out
.
muãx
);

61 
	`utû__ö¸emít_£nd_quŸa
(
mosq
);

62 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_out
.
muãx
);

64 
rc
 = 
	`∑ckë__ªad_uöt16
(&
mosq
->
ö_∑ckë
, &
mid
);

65 if(
rc
) Ñc;

66 if(
ty≥
[3] == 'A'){

67 if(
mosq
->
ö_∑ckë
.
comm™d
 !
CMD_PUBACK
){

68  
MOSQ_ERR_MALFORMED_PACKET
;

70 
qos
 = 1;

72 if(
mosq
->
ö_∑ckë
.
comm™d
 !
CMD_PUBCOMP
){

73  
MOSQ_ERR_MALFORMED_PACKET
;

75 
qos
 = 2;

77 if(
mid
 == 0){

78  
MOSQ_ERR_PROTOCOL
;

81 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
 && mosq->
ö_∑ckë
.
ªmaöög_Àngth
 > 2){

82 
rc
 = 
	`∑ckë__ªad_byã
(&
mosq
->
ö_∑ckë
, &
ªas⁄_code
);

83 if(
rc
){

84  
rc
;

87 if(
mosq
->
ö_∑ckë
.
ªmaöög_Àngth
 > 3){

88 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_PUBACK
, &
mosq
->
ö_∑ckë
, &
¥›îtõs
);

89 if(
rc
) Ñc;

91 if(
ty≥
[3] == 'A'){

92 if(
ªas⁄_code
 !
MQTT_RC_SUCCESS


93 && 
ªas⁄_code
 !
MQTT_RC_NO_MATCHING_SUBSCRIBERS


94 && 
ªas⁄_code
 !
MQTT_RC_UNSPECIFIED


95 && 
ªas⁄_code
 !
MQTT_RC_IMPLEMENTATION_SPECIFIC


96 && 
ªas⁄_code
 !
MQTT_RC_NOT_AUTHORIZED


97 && 
ªas⁄_code
 !
MQTT_RC_TOPIC_NAME_INVALID


98 && 
ªas⁄_code
 !
MQTT_RC_PACKET_ID_IN_USE


99 && 
ªas⁄_code
 !
MQTT_RC_QUOTA_EXCEEDED


100 && 
ªas⁄_code
 !
MQTT_RC_PAYLOAD_FORMAT_INVALID


103  
MOSQ_ERR_PROTOCOL
;

106 if(
ªas⁄_code
 !
MQTT_RC_SUCCESS


107 && 
ªas⁄_code
 !
MQTT_RC_PACKET_ID_NOT_FOUND


110  
MOSQ_ERR_PROTOCOL
;

114 if(
mosq
->
ö_∑ckë
.
pos
 < mosq->ö_∑ckë.
ªmaöög_Àngth
){

115 #ifde‡
WITH_BROKER


116 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

118  
MOSQ_ERR_MALFORMED_PACKET
;

121 #ifde‡
WITH_BROKER


122 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Re˚ived %†‰om %†(Mid: %d, RC:%d)", 
ty≥
, 
	`SAFE_PRINT
(
mosq
->
id
), 
mid
, 
ªas⁄_code
);

125 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

127 
rc
 = 
	`db__mesßge_dñëe_outgoög
(
mosq
, 
mid
, 
mosq_ms_waô_f‹_pubcomp
, 
qos
);

128 if(
rc
 =
MOSQ_ERR_NOT_FOUND
){

129 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_WARNING
, "W¨nög: Re˚ived %†‰om %†f‹á¿unknow¿∑ckë idítifõ∏%d.", 
ty≥
, 
	`SAFE_PRINT
(mosq->
id
), 
mid
);

130  
MOSQ_ERR_SUCCESS
;

132  
rc
;

135 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†ª˚ived %†(Mid: %d, RC:%d)", 
	`SAFE_PRINT
(mosq->
id
), 
ty≥
, 
mid
, 
ªas⁄_code
);

137 
rc
 = 
	`mesßge__dñëe
(
mosq
, 
mid
, 
mosq_md_out
, 
qos
);

138 if(
rc
 =
MOSQ_ERR_SUCCESS
){

140 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

141 if(
mosq
->
⁄_publish
){

142 
mosq
->
ö_ˇŒback
 = 
åue
;

143 
mosq
->
	`⁄_publish
(mosq, mosq->
u£rd©a
, 
mid
);

144 
mosq
->
ö_ˇŒback
 = 
Ál£
;

146 if(
mosq
->
⁄_publish_v5
){

147 
mosq
->
ö_ˇŒback
 = 
åue
;

148 
mosq
->
	`⁄_publish_v5
(mosq, mosq->
u£rd©a
, 
mid
, 
ªas⁄_code
, 
¥›îtõs
);

149 
mosq
->
ö_ˇŒback
 = 
Ál£
;

151 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

152 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

153 }if(
rc
 !
MOSQ_ERR_NOT_FOUND
){

154  
rc
;

156 
	`±hªad_muãx_lock
(&
mosq
->
msgs_out
.
muãx
);

157 
	`mesßge__ªÀa£_to_öÊight
(
mosq
, 
mosq_md_out
);

158 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_out
.
muãx
);

160  
MOSQ_ERR_SUCCESS
;

162 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_publish.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°rög.h
>

24 
	~"mosquôto.h
"

25 
	~"mosquôto_öã∫Æ.h
"

26 
	~"loggög_mosq.h
"

27 
	~"mem‹y_mosq.h
"

28 
	~"mqâ_¥Ÿocﬁ.h
"

29 
	~"mesßges_mosq.h
"

30 
	~"∑ckë_mosq.h
"

31 
	~"¥›îty_mosq.h
"

32 
	~"ªad_h™dÀ.h
"

33 
	~"£nd_mosq.h
"

34 
	~"time_mosq.h
"

35 
	~"utû_mosq.h
"

38 
	$h™dÀ__publish
(
mosquôto
 *
mosq
)

40 
uöt8_t
 
hódî
;

41 
mosquôto_mesßge_Æl
 *
mesßge
;

42 
rc
 = 0;

43 
uöt16_t
 
mid
 = 0;

44 
uöt16_t
 
¶í
;

45 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

47 
	`as£π
(
mosq
);

49 if(
	`mosquôto__gë_°©e
(
mosq
Ë!
mosq_cs_a˘ive
){

50  
MOSQ_ERR_PROTOCOL
;

53 
mesßge
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_mesßge_Æl
));

54 if(!
mesßge
Ë 
MOSQ_ERR_NOMEM
;

56 
hódî
 = 
mosq
->
ö_∑ckë
.
comm™d
;

58 
mesßge
->
dup
 = (
hódî
 & 0x08)>>3;

59 
mesßge
->
msg
.
qos
 = (
hódî
 & 0x06)>>1;

60 
mesßge
->
msg
.
ªèö
 = (
hódî
 & 0x01);

62 
rc
 = 
	`∑ckë__ªad_°rög
(&
mosq
->
ö_∑ckë
, &
mesßge
->
msg
.
t›ic
, &
¶í
);

63 if(
rc
){

64 
	`mesßge__˛ónup
(&
mesßge
);

65  
rc
;

67 if(!
¶í
){

68 
	`mesßge__˛ónup
(&
mesßge
);

69  
MOSQ_ERR_PROTOCOL
;

72 if(
mesßge
->
msg
.
qos
 > 0){

73 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

74 if(
mosq
->
msgs_ö
.
öÊight_quŸa
 == 0){

75 
	`mesßge__˛ónup
(&
mesßge
);

77  
MOSQ_ERR_PROTOCOL
;

81 
rc
 = 
	`∑ckë__ªad_uöt16
(&
mosq
->
ö_∑ckë
, &
mid
);

82 if(
rc
){

83 
	`mesßge__˛ónup
(&
mesßge
);

84  
rc
;

86 if(
mid
 == 0){

87 
	`mesßge__˛ónup
(&
mesßge
);

88  
MOSQ_ERR_PROTOCOL
;

90 
mesßge
->
msg
.
mid
 = ()mid;

93 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

94 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_PUBLISH
, &
mosq
->
ö_∑ckë
, &
¥›îtõs
);

95 if(
rc
){

96 
	`mesßge__˛ónup
(&
mesßge
);

97  
rc
;

101 
mesßge
->
msg
.
∑ylﬂdÀn
 = ()(
mosq
->
ö_∑ckë
.
ªmaöög_Àngth
 - mosq->ö_∑ckë.
pos
);

102 if(
mesßge
->
msg
.
∑ylﬂdÀn
){

103 
mesßge
->
msg
.
∑ylﬂd
 = 
	`mosquôto__ˇŒoc
((
size_t
)mesßge->msg.
∑ylﬂdÀn
+1, (
uöt8_t
));

104 if(!
mesßge
->
msg
.
∑ylﬂd
){

105 
	`mesßge__˛ónup
(&
mesßge
);

106 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

107  
MOSQ_ERR_NOMEM
;

109 
rc
 = 
	`∑ckë__ªad_byãs
(&
mosq
->
ö_∑ckë
, 
mesßge
->
msg
.
∑ylﬂd
, (
uöt32_t
)mesßge->msg.
∑ylﬂdÀn
);

110 if(
rc
){

111 
	`mesßge__˛ónup
(&
mesßge
);

112 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

113  
rc
;

116 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
,

118 
	`SAFE_PRINT
(
mosq
->
id
), 
mesßge
->
dup
, mesßge->
msg
.
qos
, mesßge->msg.
ªèö
,

119 
mesßge
->
msg
.
mid
, mesßge->msg.
t›ic
,

120 ()
mesßge
->
msg
.
∑ylﬂdÀn
);

122 
mesßge
->
time°amp
 = 
	`mosquôto_time
();

123 
mesßge
->
msg
.
qos
){

125 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

126 if(
mosq
->
⁄_mesßge
){

127 
mosq
->
ö_ˇŒback
 = 
åue
;

128 
mosq
->
	`⁄_mesßge
(mosq, mosq->
u£rd©a
, &
mesßge
->
msg
);

129 
mosq
->
ö_ˇŒback
 = 
Ál£
;

131 if(
mosq
->
⁄_mesßge_v5
){

132 
mosq
->
ö_ˇŒback
 = 
åue
;

133 
mosq
->
	`⁄_mesßge_v5
(mosq, mosq->
u£rd©a
, &
mesßge
->
msg
, 
¥›îtõs
);

134 
mosq
->
ö_ˇŒback
 = 
Ál£
;

136 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

137 
	`mesßge__˛ónup
(&
mesßge
);

138 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

139  
MOSQ_ERR_SUCCESS
;

141 
	`utû__de¸emít_ª˚ive_quŸa
(
mosq
);

142 
rc
 = 
	`£nd__puback
(
mosq
, 
mid
, 0, 
NULL
);

143 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

144 if(
mosq
->
⁄_mesßge
){

145 
mosq
->
ö_ˇŒback
 = 
åue
;

146 
mosq
->
	`⁄_mesßge
(mosq, mosq->
u£rd©a
, &
mesßge
->
msg
);

147 
mosq
->
ö_ˇŒback
 = 
Ál£
;

149 if(
mosq
->
⁄_mesßge_v5
){

150 
mosq
->
ö_ˇŒback
 = 
åue
;

151 
mosq
->
	`⁄_mesßge_v5
(mosq, mosq->
u£rd©a
, &
mesßge
->
msg
, 
¥›îtõs
);

152 
mosq
->
ö_ˇŒback
 = 
Ál£
;

154 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

155 
	`mesßge__˛ónup
(&
mesßge
);

156 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

157  
rc
;

159 
mesßge
->
¥›îtõs
 =Öroperties;

160 
	`utû__de¸emít_ª˚ive_quŸa
(
mosq
);

161 
rc
 = 
	`£nd__pubªc
(
mosq
, 
mid
, 0, 
NULL
);

162 
	`±hªad_muãx_lock
(&
mosq
->
msgs_ö
.
muãx
);

163 
mesßge
->
°©e
 = 
mosq_ms_waô_f‹_pubªl
;

164 
	`mesßge__queue
(
mosq
, 
mesßge
, 
mosq_md_ö
);

165 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_ö
.
muãx
);

166  
rc
;

168 
	`mesßge__˛ónup
(&
mesßge
);

169 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

170  
MOSQ_ERR_PROTOCOL
;

172 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_pubrec.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

25 #ifde‡
WITH_BROKER


26 
	~"mosquôto_brokî_öã∫Æ.h
"

29 
	~"mosquôto.h
"

30 
	~"loggög_mosq.h
"

31 
	~"mem‹y_mosq.h
"

32 
	~"mesßges_mosq.h
"

33 
	~"mqâ_¥Ÿocﬁ.h
"

34 
	~"√t_mosq.h
"

35 
	~"∑ckë_mosq.h
"

36 
	~"ªad_h™dÀ.h
"

37 
	~"£nd_mosq.h
"

38 
	~"utû_mosq.h
"

40 
	$h™dÀ__pubªc
(
mosquôto
 *
mosq
)

42 
uöt8_t
 
ªas⁄_code
 = 0;

43 
uöt16_t
 
mid
;

44 
rc
;

45 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

47 
	`as£π
(
mosq
);

49 if(
	`mosquôto__gë_°©e
(
mosq
Ë!
mosq_cs_a˘ive
){

50  
MOSQ_ERR_PROTOCOL
;

52 if(
mosq
->
ö_∑ckë
.
comm™d
 !
CMD_PUBREC
){

53  
MOSQ_ERR_MALFORMED_PACKET
;

56 
rc
 = 
	`∑ckë__ªad_uöt16
(&
mosq
->
ö_∑ckë
, &
mid
);

57 if(
rc
) Ñc;

58 if(
mid
 =0Ë 
MOSQ_ERR_PROTOCOL
;

60 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
 && mosq->
ö_∑ckë
.
ªmaöög_Àngth
 > 2){

61 
rc
 = 
	`∑ckë__ªad_byã
(&
mosq
->
ö_∑ckë
, &
ªas⁄_code
);

62 if(
rc
) Ñc;

64 if(
ªas⁄_code
 !
MQTT_RC_SUCCESS


65 && 
ªas⁄_code
 !
MQTT_RC_NO_MATCHING_SUBSCRIBERS


66 && 
ªas⁄_code
 !
MQTT_RC_UNSPECIFIED


67 && 
ªas⁄_code
 !
MQTT_RC_IMPLEMENTATION_SPECIFIC


68 && 
ªas⁄_code
 !
MQTT_RC_NOT_AUTHORIZED


69 && 
ªas⁄_code
 !
MQTT_RC_TOPIC_NAME_INVALID


70 && 
ªas⁄_code
 !
MQTT_RC_PACKET_ID_IN_USE


71 && 
ªas⁄_code
 !
MQTT_RC_QUOTA_EXCEEDED
){

73  
MOSQ_ERR_PROTOCOL
;

76 if(
mosq
->
ö_∑ckë
.
ªmaöög_Àngth
 > 3){

77 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_PUBREC
, &
mosq
->
ö_∑ckë
, &
¥›îtõs
);

78 if(
rc
) Ñc;

81 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

85 if(
mosq
->
ö_∑ckë
.
pos
 < mosq->ö_∑ckë.
ªmaöög_Àngth
){

86 #ifde‡
WITH_BROKER


87 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

89  
MOSQ_ERR_MALFORMED_PACKET
;

92 #ifde‡
WITH_BROKER


93 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Re˚ived PUBREC from %†(Mid: %d)", 
	`SAFE_PRINT
(
mosq
->
id
), 
mid
);

95 if(
ªas⁄_code
 < 0x80){

96 
rc
 = 
	`db__mesßge_upd©e_outgoög
(
mosq
, 
mid
, 
mosq_ms_waô_f‹_pubcomp
, 2);

98  
	`db__mesßge_dñëe_outgoög
(
mosq
, 
mid
, 
mosq_ms_waô_f‹_pubªc
, 2);

102 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†ª˚ived PUBREC (Mid: %d)", 
	`SAFE_PRINT
(mosq->
id
), 
mid
);

104 if(
ªas⁄_code
 < 0x80 || 
mosq
->
¥Ÿocﬁ
 !
mosq_p_mqâ5
){

105 
rc
 = 
	`mesßge__out_upd©e
(
mosq
, 
mid
, 
mosq_ms_waô_f‹_pubcomp
, 2);

107 if(!
	`mesßge__dñëe
(
mosq
, 
mid
, 
mosq_md_out
, 2)){

109 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

110 if(
mosq
->
⁄_publish_v5
){

111 
mosq
->
ö_ˇŒback
 = 
åue
;

112 
mosq
->
	`⁄_publish_v5
(mosq, mosq->
u£rd©a
, 
mid
, 
ªas⁄_code
, 
¥›îtõs
);

113 
mosq
->
ö_ˇŒback
 = 
Ál£
;

115 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

117 
	`utû__ö¸emít_£nd_quŸa
(
mosq
);

118 
	`±hªad_muãx_lock
(&
mosq
->
msgs_out
.
muãx
);

119 
	`mesßge__ªÀa£_to_öÊight
(
mosq
, 
mosq_md_out
);

120 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_out
.
muãx
);

121  
MOSQ_ERR_SUCCESS
;

124 if(
rc
 =
MOSQ_ERR_NOT_FOUND
){

125 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_WARNING
, "W¨nög: Re˚ived PUBREC from %†f‹á¿unknow¿∑ckë idítifõ∏%d.", 
	`SAFE_PRINT
(mosq->
id
), 
mid
);

126 }if(
rc
 !
MOSQ_ERR_SUCCESS
){

127  
rc
;

129 
rc
 = 
	`£nd__pubªl
(
mosq
, 
mid
, 
NULL
);

130 if(
rc
) Ñc;

132  
MOSQ_ERR_SUCCESS
;

133 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_pubrel.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

25 #ifde‡
WITH_BROKER


26 
	~"mosquôto_brokî_öã∫Æ.h
"

29 
	~"mosquôto.h
"

30 
	~"loggög_mosq.h
"

31 
	~"mem‹y_mosq.h
"

32 
	~"mesßges_mosq.h
"

33 
	~"mqâ_¥Ÿocﬁ.h
"

34 
	~"√t_mosq.h
"

35 
	~"∑ckë_mosq.h
"

36 
	~"ªad_h™dÀ.h
"

37 
	~"£nd_mosq.h
"

38 
	~"utû_mosq.h
"

41 
	$h™dÀ__pubªl
(
mosquôto
 *
mosq
)

43 
uöt8_t
 
ªas⁄_code
;

44 
uöt16_t
 
mid
;

45 #i‚de‡
WITH_BROKER


46 
mosquôto_mesßge_Æl
 *
mesßge
 = 
NULL
;

48 
rc
;

49 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

51 
	`as£π
(
mosq
);

53 if(
	`mosquôto__gë_°©e
(
mosq
Ë!
mosq_cs_a˘ive
){

54  
MOSQ_ERR_PROTOCOL
;

56 if(
mosq
->
¥Ÿocﬁ
 !
mosq_p_mqâ31
 && mosq->
ö_∑ckë
.
comm™d
 !(
CMD_PUBREL
|2)){

57  
MOSQ_ERR_MALFORMED_PACKET
;

60 if(
mosq
->
¥Ÿocﬁ
 !
mosq_p_mqâ31
){

61 if((
mosq
->
ö_∑ckë
.
comm™d
&0x0F) != 0x02){

62  
MOSQ_ERR_PROTOCOL
;

65 
rc
 = 
	`∑ckë__ªad_uöt16
(&
mosq
->
ö_∑ckë
, &
mid
);

66 if(
rc
) Ñc;

67 if(
mid
 =0Ë 
MOSQ_ERR_PROTOCOL
;

69 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
 && mosq->
ö_∑ckë
.
ªmaöög_Àngth
 > 2){

70 
rc
 = 
	`∑ckë__ªad_byã
(&
mosq
->
ö_∑ckë
, &
ªas⁄_code
);

71 if(
rc
) Ñc;

73 if(
ªas⁄_code
 !
MQTT_RC_SUCCESS
 &&Ñós⁄_codê!
MQTT_RC_PACKET_ID_NOT_FOUND
){

74  
MOSQ_ERR_PROTOCOL
;

77 if(
mosq
->
ö_∑ckë
.
ªmaöög_Àngth
 > 3){

78 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_PUBREL
, &
mosq
->
ö_∑ckë
, &
¥›îtõs
);

79 if(
rc
) Ñc;

83 if(
mosq
->
ö_∑ckë
.
pos
 < mosq->ö_∑ckë.
ªmaöög_Àngth
){

84 #ifde‡
WITH_BROKER


85 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

87  
MOSQ_ERR_MALFORMED_PACKET
;

90 #ifde‡
WITH_BROKER


91 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Re˚ived PUBREL from %†(Mid: %d)", 
	`SAFE_PRINT
(
mosq
->
id
), 
mid
);

94 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

96 
rc
 = 
	`db__mesßge_ªÀa£_öcomög
(
mosq
, 
mid
);

97 if(
rc
 =
MOSQ_ERR_NOT_FOUND
){

100 }if(
rc
 !
MOSQ_ERR_SUCCESS
){

101  
rc
;

104 
rc
 = 
	`£nd__pubcomp
(
mosq
, 
mid
, 
NULL
);

105 if(
rc
) Ñc;

107 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†ª˚ived PUBREL (Mid: %d)", 
	`SAFE_PRINT
(mosq->
id
), 
mid
);

109 
rc
 = 
	`£nd__pubcomp
(
mosq
, 
mid
, 
NULL
);

110 if(
rc
){

111 
	`mesßge__ªmove
(
mosq
, 
mid
, 
mosq_md_ö
, &
mesßge
, 2);

112  
rc
;

115 
rc
 = 
	`mesßge__ªmove
(
mosq
, 
mid
, 
mosq_md_ö
, &
mesßge
, 2);

116 if(
rc
 =
MOSQ_ERR_SUCCESS
){

119 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

120 if(
mosq
->
⁄_mesßge
){

121 
mosq
->
ö_ˇŒback
 = 
åue
;

122 
mosq
->
	`⁄_mesßge
(mosq, mosq->
u£rd©a
, &
mesßge
->
msg
);

123 
mosq
->
ö_ˇŒback
 = 
Ál£
;

125 if(
mosq
->
⁄_mesßge_v5
){

126 
mosq
->
ö_ˇŒback
 = 
åue
;

127 
mosq
->
	`⁄_mesßge_v5
(mosq, mosq->
u£rd©a
, &
mesßge
->
msg
, mesßge->
¥›îtõs
);

128 
mosq
->
ö_ˇŒback
 = 
Ál£
;

130 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

131 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

132 
	`mesßge__˛ónup
(&
mesßge
);

133 }if(
rc
 =
MOSQ_ERR_NOT_FOUND
){

134  
MOSQ_ERR_SUCCESS
;

136  
rc
;

140  
MOSQ_ERR_SUCCESS
;

141 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_suback.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

23 #ifde‡
WITH_BROKER


24 
	~"mosquôto_brokî_öã∫Æ.h
"

27 
	~"mosquôto.h
"

28 
	~"mosquôto_öã∫Æ.h
"

29 
	~"loggög_mosq.h
"

30 
	~"mem‹y_mosq.h
"

31 
	~"mqâ_¥Ÿocﬁ.h
"

32 
	~"∑ckë_mosq.h
"

33 
	~"¥›îty_mosq.h
"

34 
	~"ªad_h™dÀ.h
"

35 
	~"utû_mosq.h
"

38 
	$h™dÀ__suback
(
mosquôto
 *
mosq
)

40 
uöt16_t
 
mid
;

41 
uöt8_t
 
qos
;

42 *
gø¡ed_qos
;

43 
qos_cou¡
;

44 
i
 = 0;

45 
rc
;

46 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

48 
	`as£π
(
mosq
);

50 if(
	`mosquôto__gë_°©e
(
mosq
Ë!
mosq_cs_a˘ive
){

51  
MOSQ_ERR_PROTOCOL
;

53 if(
mosq
->
ö_∑ckë
.
comm™d
 !
CMD_SUBACK
){

54  
MOSQ_ERR_MALFORMED_PACKET
;

57 #ifde‡
WITH_BROKER


58 if(
mosq
->
bridge
 =
NULL
){

60  
MOSQ_ERR_PROTOCOL
;

62 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Re˚ived SUBACK from %s", 
	`SAFE_PRINT
(
mosq
->
id
));

64 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†ª˚ived SUBACK", 
	`SAFE_PRINT
(mosq->
id
));

66 
rc
 = 
	`∑ckë__ªad_uöt16
(&
mosq
->
ö_∑ckë
, &
mid
);

67 if(
rc
) Ñc;

68 if(
mid
 =0Ë 
MOSQ_ERR_PROTOCOL
;

70 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

71 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_SUBACK
, &
mosq
->
ö_∑ckë
, &
¥›îtõs
);

72 if(
rc
) Ñc;

75 
qos_cou¡
 = ()(
mosq
->
ö_∑ckë
.
ªmaöög_Àngth
 - mosq->ö_∑ckë.
pos
);

76 
gø¡ed_qos
 = 
	`mosquôto__mÆloc
((
size_t
)
qos_cou¡
*());

77 if(!
gø¡ed_qos
){

78 #ifde‡
WITH_BROKER


79 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

81  
MOSQ_ERR_NOMEM
;

83 
mosq
->
ö_∑ckë
.
pos
 < mosq->ö_∑ckë.
ªmaöög_Àngth
){

84 
rc
 = 
	`∑ckë__ªad_byã
(&
mosq
->
ö_∑ckë
, &
qos
);

85 if(
rc
){

86 
	`mosquôto__‰ì
(
gø¡ed_qos
);

87 #ifde‡
WITH_BROKER


88 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

90  
rc
;

92 
gø¡ed_qos
[
i
] = ()
qos
;

93 
i
++;

95 #ifde‡
WITH_BROKER


97 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

99 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

100 if(
mosq
->
⁄_subs¸ibe
){

101 
mosq
->
ö_ˇŒback
 = 
åue
;

102 
mosq
->
	`⁄_subs¸ibe
(mosq, mosq->
u£rd©a
, 
mid
, 
qos_cou¡
, 
gø¡ed_qos
);

103 
mosq
->
ö_ˇŒback
 = 
Ál£
;

105 if(
mosq
->
⁄_subs¸ibe_v5
){

106 
mosq
->
ö_ˇŒback
 = 
åue
;

107 
mosq
->
	`⁄_subs¸ibe_v5
(mosq, mosq->
u£rd©a
, 
mid
, 
qos_cou¡
, 
gø¡ed_qos
, 
¥›îtõs
);

108 
mosq
->
ö_ˇŒback
 = 
Ál£
;

110 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

111 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

113 
	`mosquôto__‰ì
(
gø¡ed_qos
);

115  
MOSQ_ERR_SUCCESS
;

116 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_unsuback.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

25 #ifde‡
WITH_BROKER


26 
	~"mosquôto_brokî_öã∫Æ.h
"

29 
	~"mosquôto.h
"

30 
	~"loggög_mosq.h
"

31 
	~"mem‹y_mosq.h
"

32 
	~"mesßges_mosq.h
"

33 
	~"mqâ_¥Ÿocﬁ.h
"

34 
	~"√t_mosq.h
"

35 
	~"∑ckë_mosq.h
"

36 
	~"¥›îty_mosq.h
"

37 
	~"ªad_h™dÀ.h
"

38 
	~"£nd_mosq.h
"

39 
	~"utû_mosq.h
"

42 
	$h™dÀ__unsuback
(
mosquôto
 *
mosq
)

44 
uöt16_t
 
mid
;

45 
rc
;

46 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

48 
	`as£π
(
mosq
);

50 if(
	`mosquôto__gë_°©e
(
mosq
Ë!
mosq_cs_a˘ive
){

51  
MOSQ_ERR_PROTOCOL
;

53 if(
mosq
->
ö_∑ckë
.
comm™d
 !
CMD_UNSUBACK
){

54  
MOSQ_ERR_MALFORMED_PACKET
;

57 #ifde‡
WITH_BROKER


58 if(
mosq
->
bridge
 =
NULL
){

60  
MOSQ_ERR_PROTOCOL
;

62 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Re˚ived UNSUBACK from %s", 
	`SAFE_PRINT
(
mosq
->
id
));

64 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†ª˚ived UNSUBACK", 
	`SAFE_PRINT
(mosq->
id
));

66 
rc
 = 
	`∑ckë__ªad_uöt16
(&
mosq
->
ö_∑ckë
, &
mid
);

67 if(
rc
) Ñc;

68 if(
mid
 =0Ë 
MOSQ_ERR_PROTOCOL
;

70 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

71 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_UNSUBACK
, &
mosq
->
ö_∑ckë
, &
¥›îtõs
);

72 if(
rc
) Ñc;

75 #ifde‡
WITH_BROKER


77 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

79 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

80 if(
mosq
->
⁄_unsubs¸ibe
){

81 
mosq
->
ö_ˇŒback
 = 
åue
;

82 
mosq
->
	`⁄_unsubs¸ibe
(mosq, mosq->
u£rd©a
, 
mid
);

83 
mosq
->
ö_ˇŒback
 = 
Ál£
;

85 if(
mosq
->
⁄_unsubs¸ibe_v5
){

86 
mosq
->
ö_ˇŒback
 = 
åue
;

87 
mosq
->
	`⁄_unsubs¸ibe_v5
(mosq, mosq->
u£rd©a
, 
mid
, 
¥›îtõs
);

88 
mosq
->
ö_ˇŒback
 = 
Ál£
;

90 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

91 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

94  
MOSQ_ERR_SUCCESS
;

95 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/helpers.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 
	~<°dboﬁ.h
>

24 
	~"mosquôto.h
"

25 
	~"mosquôto_öã∫Æ.h
"

27 
	su£rd©a__ˇŒback
 {

28 c⁄° *
	mt›ic
;

29 (*
	mˇŒback
)(
	mmosquôto
 *, *, c⁄° 
	mmosquôto_mesßge
 *);

30 *
	mu£rd©a
;

31 
	mqos
;

34 
	su£rd©a__sim∂e
 {

35 
mosquôto_mesßge
 *
	mmesßges
;

36 
	mmax_msg_cou¡
;

37 
	mmesßge_cou¡
;

38 
boﬁ
 
	mw™t_ªèöed
;

42 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

44 
u£rd©a__ˇŒback
 *
u£rd©a
 = 
obj
;

46 
	`UNUSED
(
rc
);

48 
	`mosquôto_subs¸ibe
(
mosq
, 
NULL
, 
u£rd©a
->
t›ic
, u£rd©a->
qos
);

49 
	}
}

52 
	$⁄_mesßge_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
mesßge
)

54 
rc
;

55 
u£rd©a__ˇŒback
 *
u£rd©a
 = 
obj
;

57 
rc
 = 
u£rd©a
->
	`ˇŒback
(
mosq
, u£rd©a->u£rd©a, 
mesßge
);

58 if(
rc
){

59 
	`mosquôto_disc⁄√˘
(
mosq
);

61 
	}
}

63 
	$⁄_mesßge_sim∂e
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
mesßge
)

65 
u£rd©a__sim∂e
 *
u£rd©a
 = 
obj
;

66 
rc
;

68 if(
u£rd©a
->
max_msg_cou¡
 == 0){

73 if(!
u£rd©a
->
w™t_ªèöed
 && 
mesßge
->
ªèö
){

77 
u£rd©a
->
max_msg_cou¡
--;

79 
rc
 = 
	`mosquôto_mesßge_c›y
(&
u£rd©a
->
mesßges
[u£rd©a->
mesßge_cou¡
], 
mesßge
);

80 if(
rc
){

81  
rc
;

83 
u£rd©a
->
mesßge_cou¡
++;

84 if(
u£rd©a
->
max_msg_cou¡
 == 0){

85 
	`mosquôto_disc⁄√˘
(
mosq
);

88 
	}
}

91 
libmosq_EXPORT
 
	$mosquôto_subs¸ibe_sim∂e
(

92 
mosquôto_mesßge
 **
mesßges
,

93 
msg_cou¡
,

94 
boﬁ
 
w™t_ªèöed
,

95 c⁄° *
t›ic
,

96 
qos
,

97 c⁄° *
ho°
,

98 
p‹t
,

99 c⁄° *
˛õ¡_id
,

100 
kì∑live
,

101 
boﬁ
 
˛ón_£ssi⁄
,

102 c⁄° *
u£∫ame
,

103 c⁄° *
∑ssw‹d
,

104 c⁄° 
libmosquôto_wûl
 *
wûl
,

105 c⁄° 
libmosquôto_és
 *
és
)

107 
u£rd©a__sim∂e
 
u£rd©a
;

108 
rc
;

109 
i
;

111 if(!
t›ic
 || 
msg_cou¡
 < 1 || !
mesßges
){

112  
MOSQ_ERR_INVAL
;

115 *
mesßges
 = 
NULL
;

117 
u£rd©a
.
mesßges
 = 
	`ˇŒoc
((
mosquôto_mesßge
), (
size_t
)
msg_cou¡
);

118 if(!
u£rd©a
.
mesßges
){

119  
MOSQ_ERR_NOMEM
;

121 
u£rd©a
.
mesßge_cou¡
 = 0;

122 
u£rd©a
.
max_msg_cou¡
 = 
msg_cou¡
;

123 
u£rd©a
.
w™t_ªèöed
 = want_retained;

125 
rc
 = 
	`mosquôto_subs¸ibe_ˇŒback
(

126 
⁄_mesßge_sim∂e
, &
u£rd©a
,

127 
t›ic
, 
qos
,

128 
ho°
, 
p‹t
,

129 
˛õ¡_id
, 
kì∑live
, 
˛ón_£ssi⁄
,

130 
u£∫ame
, 
∑ssw‹d
,

131 
wûl
, 
és
);

133 if(!
rc
 && 
u£rd©a
.
max_msg_cou¡
 == 0){

134 *
mesßges
 = 
u£rd©a
.messages;

135  
MOSQ_ERR_SUCCESS
;

137 
i
=0; i<
msg_cou¡
; i++){

138 
	`mosquôto_mesßge_‰ì_c⁄ã¡s
(&
u£rd©a
.
mesßges
[
i
]);

140 
	`‰ì
(
u£rd©a
.
mesßges
);

141 
u£rd©a
.
mesßges
 = 
NULL
;

142  
rc
;

144 
	}
}

147 
libmosq_EXPORT
 
	$mosquôto_subs¸ibe_ˇŒback
(

148 (*
ˇŒback
)(
mosquôto
 *, *, c⁄° 
mosquôto_mesßge
 *),

149 *
u£rd©a
,

150 c⁄° *
t›ic
,

151 
qos
,

152 c⁄° *
ho°
,

153 
p‹t
,

154 c⁄° *
˛õ¡_id
,

155 
kì∑live
,

156 
boﬁ
 
˛ón_£ssi⁄
,

157 c⁄° *
u£∫ame
,

158 c⁄° *
∑ssw‹d
,

159 c⁄° 
libmosquôto_wûl
 *
wûl
,

160 c⁄° 
libmosquôto_és
 *
és
)

162 
mosquôto
 *
mosq
;

163 
u£rd©a__ˇŒback
 
cb_u£rd©a
;

164 
rc
;

166 if(!
ˇŒback
 || !
t›ic
){

167  
MOSQ_ERR_INVAL
;

170 
cb_u£rd©a
.
t›ic
 =Åopic;

171 
cb_u£rd©a
.
qos
 = qos;

172 
cb_u£rd©a
.
u£rd©a
 = userdata;

173 
cb_u£rd©a
.
ˇŒback
 = callback;

175 
mosq
 = 
	`mosquôto_√w
(
˛õ¡_id
, 
˛ón_£ssi⁄
, &
cb_u£rd©a
);

176 if(!
mosq
){

177  
MOSQ_ERR_NOMEM
;

180 if(
wûl
){

181 
rc
 = 
	`mosquôto_wûl_£t
(
mosq
, 
wûl
->
t›ic
, wûl->
∑ylﬂdÀn
, wûl->
∑ylﬂd
, wûl->
qos
, wûl->
ªèö
);

182 if(
rc
){

183 
	`mosquôto_de°roy
(
mosq
);

184  
rc
;

187 if(
u£∫ame
){

188 
rc
 = 
	`mosquôto_u£∫ame_pw_£t
(
mosq
, 
u£∫ame
, 
∑ssw‹d
);

189 if(
rc
){

190 
	`mosquôto_de°roy
(
mosq
);

191  
rc
;

194 if(
és
){

195 
rc
 = 
	`mosquôto_és_£t
(
mosq
, 
és
->
ˇfûe
,Åls->
ˇ∑th
,Åls->
˚πfûe
,Åls->
keyfûe
,Åls->
pw_ˇŒback
);

196 if(
rc
){

197 
	`mosquôto_de°roy
(
mosq
);

198  
rc
;

200 
rc
 = 
	`mosquôto_és_›ts_£t
(
mosq
, 
és
->
˚π_ªqs
,Åls->
és_vîsi⁄
,Åls->
cùhîs
);

201 if(
rc
){

202 
	`mosquôto_de°roy
(
mosq
);

203  
rc
;

207 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

208 
	`mosquôto_mesßge_ˇŒback_£t
(
mosq
, 
⁄_mesßge_ˇŒback
);

210 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, 
ho°
, 
p‹t
, 
kì∑live
);

211 if(
rc
){

212 
	`mosquôto_de°roy
(
mosq
);

213  
rc
;

215 
rc
 = 
	`mosquôto_lo›_f‹evî
(
mosq
, -1, 1);

216 
	`mosquôto_de°roy
(
mosq
);

217  
rc
;

218 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/logging_mosq.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°d¨g.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

26 
	~"loggög_mosq.h
"

27 
	~"mosquôto_öã∫Æ.h
"

28 
	~"mosquôto.h
"

29 
	~"mem‹y_mosq.h
"

31 
	$log__¥ötf
(
mosquôto
 *
mosq
, 
¥i‹ôy
, c⁄° *
fmt
, ...)

33 
va_li°
 
va
;

34 *
s
;

35 
size_t
 
Àn
;

37 
	`as£π
(
mosq
);

38 
	`as£π
(
fmt
);

40 
	`±hªad_muãx_lock
(&
mosq
->
log_ˇŒback_muãx
);

41 if(
mosq
->
⁄_log
){

42 
Àn
 = 
	`°æí
(
fmt
) + 500;

43 
s
 = 
	`mosquôto__mÆloc
(
Àn
*());

44 if(!
s
){

45 
	`±hªad_muãx_u∆ock
(&
mosq
->
log_ˇŒback_muãx
);

46  
MOSQ_ERR_NOMEM
;

49 
	`va_°¨t
(
va
, 
fmt
);

50 
	`v¢¥ötf
(
s
, 
Àn
, 
fmt
, 
va
);

51 
	`va_íd
(
va
);

52 
s
[
Àn
-1] = '\0';

54 
mosq
->
	`⁄_log
(mosq, mosq->
u£rd©a
, ()
¥i‹ôy
, 
s
);

56 
	`mosquôto__‰ì
(
s
);

58 
	`±hªad_muãx_u∆ock
(&
mosq
->
log_ˇŒback_muãx
);

60  
MOSQ_ERR_SUCCESS
;

61 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/logging_mosq.h

18 #i‚de‡
LOGGING_MOSQ_H


19 
	#LOGGING_MOSQ_H


	)

21 
	~"mosquôto.h
"

23 #i‚de‡
__GNUC__


24 
	#__©åibuã__
(
©åib
)

	)

27 
	$log__¥ötf
(
mosquôto
 *
mosq
, 
Àvñ
, c⁄° *
fmt
, ...Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 3, 4)));

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/loop.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 #i‚de‡
WIN32


23 
	~<sys/£À˘.h
>

24 
	~<time.h
>

27 
	~"mosquôto.h
"

28 
	~"mosquôto_öã∫Æ.h
"

29 
	~"√t_mosq.h
"

30 
	~"∑ckë_mosq.h
"

31 
	~"socks_mosq.h
"

32 
	~"és_mosq.h
"

33 
	~"utû_mosq.h
"

35 #i‡!
deföed
(
WIN32
Ë&& !deföed(
__SYMBIAN32__
Ë&& !deföed(
__QNX__
)

36 
	#HAVE_PSELECT


	)

39 
	$mosquôto_lo›
(
mosquôto
 *
mosq
, 
timeout
, 
max_∑ckës
)

41 #ifde‡
HAVE_PSELECT


42 
time•ec
 
loˇl_timeout
;

44 
timevÆ
 
loˇl_timeout
;

46 
fd_£t
 
ªadfds
, 
wrôefds
;

47 
fdcou¡
;

48 
rc
;

49 
∑úbuf
;

50 
maxfd
 = 0;

51 
time_t
 
now
;

52 
time_t
 
timeout_ms
;

54 if(!
mosq
 || 
max_∑ckës
 < 1Ë 
MOSQ_ERR_INVAL
;

55 #i‚de‡
WIN32


56 if(
mosq
->
sock
 >
FD_SETSIZE
 || mosq->
sock∑úR
 >= FD_SETSIZE){

57  
MOSQ_ERR_INVAL
;

61 
	`FD_ZERO
(&
ªadfds
);

62 
	`FD_ZERO
(&
wrôefds
);

63 if(
mosq
->
sock
 !
INVALID_SOCKET
){

64 
maxfd
 = 
mosq
->
sock
;

65 
	`FD_SET
(
mosq
->
sock
, &
ªadfds
);

66 
	`±hªad_muãx_lock
(&
mosq
->
cuºít_out_∑ckë_muãx
);

67 
	`±hªad_muãx_lock
(&
mosq
->
out_∑ckë_muãx
);

68 if(
mosq
->
out_∑ckë
 || mosq->
cuºít_out_∑ckë
){

69 
	`FD_SET
(
mosq
->
sock
, &
wrôefds
);

71 #ifde‡
WITH_TLS


72 if(
mosq
->
s¶
){

73 if(
mosq
->
w™t_wrôe
){

74 
	`FD_SET
(
mosq
->
sock
, &
wrôefds
);

78 
	`±hªad_muãx_u∆ock
(&
mosq
->
out_∑ckë_muãx
);

79 
	`±hªad_muãx_u∆ock
(&
mosq
->
cuºít_out_∑ckë_muãx
);

81 #ifde‡
WITH_SRV


82 if(
mosq
->
ach™
){

83 if(
	`mosquôto__gë_°©e
(
mosq
Ë=
mosq_cs_c⁄√˘_§v
){

84 
rc
 = 
	`¨es_fds
(
mosq
->
ach™
, &
ªadfds
, &
wrôefds
);

85 if(
rc
 > 
maxfd
){

86 
maxfd
 = 
rc
;

89  
MOSQ_ERR_NO_CONN
;

93  
MOSQ_ERR_NO_CONN
;

96 if(
mosq
->
sock∑úR
 !
INVALID_SOCKET
){

99 
	`FD_SET
(
mosq
->
sock∑úR
, &
ªadfds
);

100 if(()
mosq
->
sock∑úR
 > 
maxfd
){

101 
maxfd
 = 
mosq
->
sock∑úR
;

105 
timeout_ms
 = 
timeout
;

106 if(
timeout_ms
 < 0){

107 
timeout_ms
 = 1000;

110 
now
 = 
	`mosquôto_time
();

111 
	`±hªad_muãx_lock
(&
mosq
->
msgtime_muãx
);

112 if(
mosq
->
√xt_msg_out
 && 
now
 + 
timeout_ms
/1000 > mosq->next_msg_out){

113 
timeout_ms
 = (
mosq
->
√xt_msg_out
 - 
now
)*1000;

115 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgtime_muãx
);

117 if(
timeout_ms
 < 0){

120 
timeout_ms
 = 0;

123 
loˇl_timeout
.
tv_£c
 = 
timeout_ms
/1000;

124 #ifde‡
HAVE_PSELECT


125 
loˇl_timeout
.
tv_n£c
 = (
timeout_ms
-loˇl_timeout.
tv_£c
*1000)*1000000;

127 
loˇl_timeout
.
tv_u£c
 = (
timeout_ms
-loˇl_timeout.
tv_£c
*1000)*1000;

130 #ifde‡
HAVE_PSELECT


131 
fdcou¡
 = 
	`p£À˘
(
maxfd
+1, &
ªadfds
, &
wrôefds
, 
NULL
, &
loˇl_timeout
, NULL);

133 
fdcou¡
 = 
	`£À˘
(
maxfd
+1, &
ªadfds
, &
wrôefds
, 
NULL
, &
loˇl_timeout
);

135 if(
fdcou¡
 == -1){

136 #ifde‡
WIN32


137 
î∫o
 = 
	`WSAGëLa°Eº‹
();

139 if(
î∫o
 =
EINTR
){

140  
MOSQ_ERR_SUCCESS
;

142  
MOSQ_ERR_ERRNO
;

145 if(
mosq
->
sock
 !
INVALID_SOCKET
){

146 if(
	`FD_ISSET
(
mosq
->
sock
, &
ªadfds
)){

147 
rc
 = 
	`mosquôto_lo›_ªad
(
mosq
, 
max_∑ckës
);

148 if(
rc
 || 
mosq
->
sock
 =
INVALID_SOCKET
){

149  
rc
;

152 if(
mosq
->
sock∑úR
 !
INVALID_SOCKET
 && 
	`FD_ISSET
(mosq->sock∑úR, &
ªadfds
)){

153 #i‚de‡
WIN32


154 if(
	`ªad
(
mosq
->
sock∑úR
, &
∑úbuf
, 1) == 0){

157 
	`ªcv
(
mosq
->
sock∑úR
, &
∑úbuf
, 1, 0);

162 if(
mosq
->
sock
 !
INVALID_SOCKET
)

163 
	`FD_SET
(
mosq
->
sock
, &
wrôefds
);

165 if(
mosq
->
sock
 !
INVALID_SOCKET
 && 
	`FD_ISSET
(mosq->sock, &
wrôefds
)){

166 
rc
 = 
	`mosquôto_lo›_wrôe
(
mosq
, 
max_∑ckës
);

167 if(
rc
 || 
mosq
->
sock
 =
INVALID_SOCKET
){

168  
rc
;

172 #ifde‡
WITH_SRV


173 if(
mosq
->
ach™
){

174 
	`¨es_¥o˚ss
(
mosq
->
ach™
, &
ªadfds
, &
wrôefds
);

178  
	`mosquôto_lo›_misc
(
mosq
);

179 
	}
}

182 
	$öãºu±ibÀ_¶ìp
(
mosquôto
 *
mosq
, 
time_t
 
ªc⁄√˘_dñay
)

184 #ifde‡
HAVE_PSELECT


185 
time•ec
 
loˇl_timeout
;

187 
timevÆ
 
loˇl_timeout
;

189 
fd_£t
 
ªadfds
;

190 
fdcou¡
;

191 
∑úbuf
;

192 
maxfd
 = 0;

194 #i‚de‡
WIN32


195 
mosq
->
sock∑úR
 !
INVALID_SOCKET
 && 
	`ªad
(mosq->sock∑úR, &
∑úbuf
, 1) > 0);

197 
mosq
->
sock∑úR
 !
INVALID_SOCKET
 && 
	`ªcv
(mosq->sock∑úR, &
∑úbuf
, 1, 0) > 0);

200 
loˇl_timeout
.
tv_£c
 = 
ªc⁄√˘_dñay
;

201 #ifde‡
HAVE_PSELECT


202 
loˇl_timeout
.
tv_n£c
 = 0;

204 
loˇl_timeout
.
tv_u£c
 = 0;

206 
	`FD_ZERO
(&
ªadfds
);

207 
maxfd
 = 0;

208 if(
mosq
->
sock∑úR
 !
INVALID_SOCKET
){

211 
	`FD_SET
(
mosq
->
sock∑úR
, &
ªadfds
);

212 
maxfd
 = 
mosq
->
sock∑úR
;

214 #ifde‡
HAVE_PSELECT


215 
fdcou¡
 = 
	`p£À˘
(
maxfd
+1, &
ªadfds
, 
NULL
, NULL, &
loˇl_timeout
, NULL);

217 
fdcou¡
 = 
	`£À˘
(
maxfd
+1, &
ªadfds
, 
NULL
, NULL, &
loˇl_timeout
);

219 if(
fdcou¡
 == -1){

220 #ifde‡
WIN32


221 
î∫o
 = 
	`WSAGëLa°Eº‹
();

223 if(
î∫o
 =
EINTR
){

224  
MOSQ_ERR_SUCCESS
;

226  
MOSQ_ERR_ERRNO
;

228 }if(
mosq
->
sock∑úR
 !
INVALID_SOCKET
 && 
	`FD_ISSET
(mosq->sock∑úR, &
ªadfds
)){

229 #i‚de‡
WIN32


230 if(
	`ªad
(
mosq
->
sock∑úR
, &
∑úbuf
, 1) == 0){

233 
	`ªcv
(
mosq
->
sock∑úR
, &
∑úbuf
, 1, 0);

236  
MOSQ_ERR_SUCCESS
;

237 
	}
}

240 
	$mosquôto_lo›_f‹evî
(
mosquôto
 *
mosq
, 
timeout
, 
max_∑ckës
)

242 
run
 = 1;

243 
rc
 = 
MOSQ_ERR_SUCCESS
;

244 
ªc⁄√˘_dñay
;

246 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

248 
mosq
->
ªc⁄√˘s
 = 0;

250 
run
){

252 #ifde‡
HAVE_PTHREAD_CANCEL


253 
	`±hªad_ã°ˇn˚l
();

255 
rc
 = 
	`mosquôto_lo›
(
mosq
, 
timeout
, 
max_∑ckës
);

256 }
run
 && 
rc
 =
MOSQ_ERR_SUCCESS
);

258 
rc
){

259 
MOSQ_ERR_NOMEM
:

260 
MOSQ_ERR_PROTOCOL
:

261 
MOSQ_ERR_INVAL
:

262 
MOSQ_ERR_NOT_FOUND
:

263 
MOSQ_ERR_TLS
:

264 
MOSQ_ERR_PAYLOAD_SIZE
:

265 
MOSQ_ERR_NOT_SUPPORTED
:

266 
MOSQ_ERR_AUTH
:

267 
MOSQ_ERR_ACL_DENIED
:

268 
MOSQ_ERR_UNKNOWN
:

269 
MOSQ_ERR_EAI
:

270 
MOSQ_ERR_PROXY
:

271  
rc
;

272 
MOSQ_ERR_ERRNO
:

275 if(
î∫o
 =
EPROTO
){

276  
rc
;

279 #ifde‡
HAVE_PTHREAD_CANCEL


280 
	`±hªad_ã°ˇn˚l
();

282 
rc
 = 
MOSQ_ERR_SUCCESS
;

283 if(
	`mosquôto__gë_ªque°_disc⁄√˘
(
mosq
)){

284 
run
 = 0;

286 if(
mosq
->
ªc⁄√˘_dñay_max
 > mosq->
ªc⁄√˘_dñay
){

287 if(
mosq
->
ªc⁄√˘_exp⁄ítül_backoff
){

288 
ªc⁄√˘_dñay
 = 
mosq
->ªc⁄√˘_dñay*(mosq->
ªc⁄√˘s
+1)*(mosq->reconnects+1);

290 
ªc⁄√˘_dñay
 = 
mosq
->ªc⁄√˘_dñay*(mosq->
ªc⁄√˘s
+1);

293 
ªc⁄√˘_dñay
 = 
mosq
->reconnect_delay;

296 if(
ªc⁄√˘_dñay
 > 
mosq
->
ªc⁄√˘_dñay_max
){

297 
ªc⁄√˘_dñay
 = 
mosq
->
ªc⁄√˘_dñay_max
;

299 
mosq
->
ªc⁄√˘s
++;

302 
rc
 = 
	`öãºu±ibÀ_¶ìp
(
mosq
, (
time_t
)
ªc⁄√˘_dñay
);

303 if(
rc
) Ñc;

305 if(
	`mosquôto__gë_ªque°_disc⁄√˘
(
mosq
)){

306 
run
 = 0;

308 
rc
 = 
	`mosquôto_ªc⁄√˘
(
mosq
);

311 }
run
 && 
rc
 !
MOSQ_ERR_SUCCESS
);

313  
rc
;

314 
	}
}

317 
	$mosquôto_lo›_misc
(
mosquôto
 *
mosq
)

319 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

320 if(
mosq
->
sock
 =
INVALID_SOCKET
Ë 
MOSQ_ERR_NO_CONN
;

322  
	`mosquôto__check_kì∑live
(
mosq
);

323 
	}
}

326 
	$mosquôto__lo›_rc_h™dÀ
(
mosquôto
 *
mosq
, 
rc
)

328 
mosquôto_˛õ¡_°©e
 
°©e
;

330 if(
rc
){

331 
	`√t__sockë_˛o£
(
mosq
);

332 
°©e
 = 
	`mosquôto__gë_°©e
(
mosq
);

333 if(
°©e
 =
mosq_cs_disc⁄√˘ög
 || sèã =
mosq_cs_disc⁄√˘ed
){

334 
rc
 = 
MOSQ_ERR_SUCCESS
;

336 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

337 if(
mosq
->
⁄_disc⁄√˘
){

338 
mosq
->
ö_ˇŒback
 = 
åue
;

339 
mosq
->
	`⁄_disc⁄√˘
(mosq, mosq->
u£rd©a
, 
rc
);

340 
mosq
->
ö_ˇŒback
 = 
Ál£
;

342 if(
mosq
->
⁄_disc⁄√˘_v5
){

343 
mosq
->
ö_ˇŒback
 = 
åue
;

344 
mosq
->
	`⁄_disc⁄√˘_v5
(mosq, mosq->
u£rd©a
, 
rc
, 
NULL
);

345 
mosq
->
ö_ˇŒback
 = 
Ál£
;

347 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

349  
rc
;

350 
	}
}

353 
	$mosquôto_lo›_ªad
(
mosquôto
 *
mosq
, 
max_∑ckës
)

355 
rc
 = 
MOSQ_ERR_SUCCESS
;

356 
i
;

357 if(
max_∑ckës
 < 1Ë 
MOSQ_ERR_INVAL
;

359 
	`±hªad_muãx_lock
(&
mosq
->
msgs_out
.
muãx
);

360 
max_∑ckës
 = 
mosq
->
msgs_out
.
queue_Àn
;

361 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_out
.
muãx
);

363 
	`±hªad_muãx_lock
(&
mosq
->
msgs_ö
.
muãx
);

364 
max_∑ckës
 +
mosq
->
msgs_ö
.
queue_Àn
;

365 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_ö
.
muãx
);

367 if(
max_∑ckës
 < 1) max_packets = 1;

371 
i
=0; i<
max_∑ckës
 || 
	`SSL_DATA_PENDING
(
mosq
); i++){

372 #ifde‡
WITH_SOCKS


373 if(
mosq
->
socks5_ho°
){

374 
rc
 = 
	`socks5__ªad
(
mosq
);

378 
rc
 = 
	`∑ckë__ªad
(
mosq
);

380 if(
rc
 || 
î∫o
 =
EAGAIN
 ||Éºnÿ=
COMPAT_EWOULDBLOCK
){

381  
	`mosquôto__lo›_rc_h™dÀ
(
mosq
, 
rc
);

384  
rc
;

385 
	}
}

388 
	$mosquôto_lo›_wrôe
(
mosquôto
 *
mosq
, 
max_∑ckës
)

390 
rc
 = 
MOSQ_ERR_SUCCESS
;

391 
i
;

392 if(
max_∑ckës
 < 1Ë 
MOSQ_ERR_INVAL
;

394 
i
=0; i<
max_∑ckës
; i++){

395 
rc
 = 
	`∑ckë__wrôe
(
mosq
);

396 if(
rc
 || 
î∫o
 =
EAGAIN
 ||Éºnÿ=
COMPAT_EWOULDBLOCK
){

397  
	`mosquôto__lo›_rc_h™dÀ
(
mosq
, 
rc
);

400  
rc
;

401 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/memory_mosq.c

19 
	~"c⁄fig.h
"

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

24 
	~"mem‹y_mosq.h
"

26 #ifde‡
REAL_WITH_MEMORY_TRACKING


27 #i‡
deföed
(
__APPLE__
)

28 
	~<mÆloc/mÆloc.h
>

29 
	#mÆloc_ußbÀ_size
 
mÆloc_size


	)

30 #ñi‡
deföed
(
__FªeBSD__
)

31 
	~<mÆloc_≈.h
>

33 
	~<mÆloc.h
>

37 #ifde‡
REAL_WITH_MEMORY_TRACKING


38 
	gmemcou¡
 = 0;

39 
	gmax_memcou¡
 = 0;

42 #ifde‡
WITH_BROKER


43 
size_t
 
	gmem_limô
 = 0;

44 
	$mem‹y__£t_limô
(
size_t
 
lim
)

46 
mem_limô
 = 
lim
;

47 
	}
}

50 *
	$mosquôto__ˇŒoc
(
size_t
 
nmemb
, size_à
size
)

52 *
mem
;

53 #ifde‡
REAL_WITH_MEMORY_TRACKING


54 if(
mem_limô
 && 
memcou¡
 + 
size
 > mem_limit){

55  
NULL
;

58 
mem
 = 
	`ˇŒoc
(
nmemb
, 
size
);

60 #ifde‡
REAL_WITH_MEMORY_TRACKING


61 if(
mem
){

62 
memcou¡
 +
	`mÆloc_ußbÀ_size
(
mem
);

63 if(
memcou¡
 > 
max_memcou¡
){

64 
max_memcou¡
 = 
memcou¡
;

69  
mem
;

70 
	}
}

72 
	$mosquôto__‰ì
(*
mem
)

74 #ifde‡
REAL_WITH_MEMORY_TRACKING


75 if(!
mem
){

78 
memcou¡
 -
	`mÆloc_ußbÀ_size
(
mem
);

80 
	`‰ì
(
mem
);

81 
	}
}

83 *
	$mosquôto__mÆloc
(
size_t
 
size
)

85 *
mem
;

87 #ifde‡
REAL_WITH_MEMORY_TRACKING


88 if(
mem_limô
 && 
memcou¡
 + 
size
 > mem_limit){

89  
NULL
;

93 
mem
 = 
	`mÆloc
(
size
);

95 #ifde‡
REAL_WITH_MEMORY_TRACKING


96 if(
mem
){

97 
memcou¡
 +
	`mÆloc_ußbÀ_size
(
mem
);

98 if(
memcou¡
 > 
max_memcou¡
){

99 
max_memcou¡
 = 
memcou¡
;

104  
mem
;

105 
	}
}

107 #ifde‡
REAL_WITH_MEMORY_TRACKING


108 
	$mosquôto__mem‹y_u£d
()

110  
memcou¡
;

111 
	}
}

113 
	$mosquôto__max_mem‹y_u£d
()

115  
max_memcou¡
;

116 
	}
}

119 *
	$mosquôto__ªÆloc
(*
±r
, 
size_t
 
size
)

121 *
mem
;

122 #ifde‡
REAL_WITH_MEMORY_TRACKING


123 if(
mem_limô
 && 
memcou¡
 + 
size
 > mem_limit){

124  
NULL
;

126 if(
±r
){

127 
memcou¡
 -
	`mÆloc_ußbÀ_size
(
±r
);

130 
mem
 = 
	`ªÆloc
(
±r
, 
size
);

132 #ifde‡
REAL_WITH_MEMORY_TRACKING


133 if(
mem
){

134 
memcou¡
 +
	`mÆloc_ußbÀ_size
(
mem
);

135 if(
memcou¡
 > 
max_memcou¡
){

136 
max_memcou¡
 = 
memcou¡
;

141  
mem
;

142 
	}
}

144 *
	$mosquôto__°rdup
(c⁄° *
s
)

146 *
°r
;

147 #ifde‡
REAL_WITH_MEMORY_TRACKING


148 if(
mem_limô
 && 
memcou¡
 + 
	`°æí
(
s
) > mem_limit){

149  
NULL
;

152 
°r
 = 
	`°rdup
(
s
);

154 #ifde‡
REAL_WITH_MEMORY_TRACKING


155 if(
°r
){

156 
memcou¡
 +
	`mÆloc_ußbÀ_size
(
°r
);

157 if(
memcou¡
 > 
max_memcou¡
){

158 
max_memcou¡
 = 
memcou¡
;

163  
°r
;

164 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/memory_mosq.h

19 #i‚de‡
MEMORY_MOSQ_H


20 
	#MEMORY_MOSQ_H


	)

22 
	~<°dio.h
>

23 
	~<sys/ty≥s.h
>

25 #i‡
deföed
(
WITH_MEMORY_TRACKING
Ë&& deföed(
WITH_BROKER
)

26 #i‡
deföed
(
__APPLE__
Ë|| deföed(
__FªeBSD__
Ë|| deföed(
__GLIBC__
)

27 
	#REAL_WITH_MEMORY_TRACKING


	)

31 *
mosquôto__ˇŒoc
(
size_t
 
nmemb
, size_à
size
);

32 
mosquôto__‰ì
(*
mem
);

33 *
mosquôto__mÆloc
(
size_t
 
size
);

34 #ifde‡
REAL_WITH_MEMORY_TRACKING


35 
mosquôto__mem‹y_u£d
();

36 
mosquôto__max_mem‹y_u£d
();

38 *
mosquôto__ªÆloc
(*
±r
, 
size_t
 
size
);

39 *
mosquôto__°rdup
(c⁄° *
s
);

41 #ifde‡
WITH_BROKER


42 
mem‹y__£t_limô
(
size_t
 
lim
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/messages_mosq.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<uéi°.h
>

26 
	~"mosquôto_öã∫Æ.h
"

27 
	~"mosquôto.h
"

28 
	~"mem‹y_mosq.h
"

29 
	~"mesßges_mosq.h
"

30 
	~"£nd_mosq.h
"

31 
	~"time_mosq.h
"

32 
	~"utû_mosq.h
"

34 
	$mesßge__˛ónup
(
mosquôto_mesßge_Æl
 **
mesßge
)

36 
mosquôto_mesßge_Æl
 *
msg
;

38 if(!
mesßge
 || !*message) ;

40 
msg
 = *
mesßge
;

42 
	`mosquôto__‰ì
(
msg
->msg.
t›ic
);

43 
	`mosquôto__‰ì
(
msg
->msg.
∑ylﬂd
);

44 
	`mosquôto_¥›îty_‰ì_Æl
(&
msg
->
¥›îtõs
);

45 
	`mosquôto__‰ì
(
msg
);

46 
	}
}

48 
	$mesßge__˛ónup_Æl
(
mosquôto
 *
mosq
)

50 
mosquôto_mesßge_Æl
 *
èû
, *
tmp
;

52 
	`as£π
(
mosq
);

54 
	`DL_FOREACH_SAFE
(
mosq
->
msgs_ö
.
öÊight
, 
èû
, 
tmp
){

55 
	`DL_DELETE
(
mosq
->
msgs_ö
.
öÊight
, 
èû
);

56 
	`mesßge__˛ónup
(&
èû
);

58 
	`DL_FOREACH_SAFE
(
mosq
->
msgs_out
.
öÊight
, 
èû
, 
tmp
){

59 
	`DL_DELETE
(
mosq
->
msgs_out
.
öÊight
, 
èû
);

60 
	`mesßge__˛ónup
(&
èû
);

62 
	}
}

64 
	$mosquôto_mesßge_c›y
(
mosquôto_mesßge
 *
d°
, c⁄° mosquôto_mesßgê*
§c
)

66 if(!
d°
 || !
§c
Ë 
MOSQ_ERR_INVAL
;

68 
d°
->
mid
 = 
§c
->mid;

69 
d°
->
t›ic
 = 
	`mosquôto__°rdup
(
§c
->topic);

70 if(!
d°
->
t›ic
Ë 
MOSQ_ERR_NOMEM
;

71 
d°
->
qos
 = 
§c
->qos;

72 
d°
->
ªèö
 = 
§c
->retain;

73 if(
§c
->
∑ylﬂdÀn
){

74 
d°
->
∑ylﬂd
 = 
	`mosquôto__ˇŒoc
(()
§c
->
∑ylﬂdÀn
+1, (
uöt8_t
));

75 if(!
d°
->
∑ylﬂd
){

76 
	`mosquôto__‰ì
(
d°
->
t›ic
);

77  
MOSQ_ERR_NOMEM
;

79 
	`mem˝y
(
d°
->
∑ylﬂd
, 
§c
->∑ylﬂd, ()§c->
∑ylﬂdÀn
);

80 
d°
->
∑ylﬂdÀn
 = 
§c
->payloadlen;

82 
d°
->
∑ylﬂdÀn
 = 0;

83 
d°
->
∑ylﬂd
 = 
NULL
;

85  
MOSQ_ERR_SUCCESS
;

86 
	}
}

88 
	$mesßge__dñëe
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, 
mosquôto_msg_dúe˘i⁄
 
dú
, 
qos
)

90 
mosquôto_mesßge_Æl
 *
mesßge
;

91 
rc
;

92 
	`as£π
(
mosq
);

94 
rc
 = 
	`mesßge__ªmove
(
mosq
, 
mid
, 
dú
, &
mesßge
, 
qos
);

95 if(
rc
 =
MOSQ_ERR_SUCCESS
){

96 
	`mesßge__˛ónup
(&
mesßge
);

98  
rc
;

99 
	}
}

101 
	$mosquôto_mesßge_‰ì
(
mosquôto_mesßge
 **
mesßge
)

103 
mosquôto_mesßge
 *
msg
;

105 if(!
mesßge
 || !*message) ;

107 
msg
 = *
mesßge
;

109 
	`mosquôto__‰ì
(
msg
->
t›ic
);

110 
	`mosquôto__‰ì
(
msg
->
∑ylﬂd
);

111 
	`mosquôto__‰ì
(
msg
);

112 
	}
}

114 
	$mosquôto_mesßge_‰ì_c⁄ã¡s
(
mosquôto_mesßge
 *
mesßge
)

116 if(!
mesßge
) ;

118 
	`mosquôto__‰ì
(
mesßge
->
t›ic
);

119 
	`mosquôto__‰ì
(
mesßge
->
∑ylﬂd
);

120 
	}
}

122 
	$mesßge__queue
(
mosquôto
 *
mosq
, 
mosquôto_mesßge_Æl
 *
mesßge
, 
mosquôto_msg_dúe˘i⁄
 
dú
)

125 
	`as£π
(
mosq
);

126 
	`as£π
(
mesßge
);

127 
	`as£π
(
mesßge
->
msg
.
qos
 != 0);

129 if(
dú
 =
mosq_md_out
){

130 
	`DL_APPEND
(
mosq
->
msgs_out
.
öÊight
, 
mesßge
);

131 
mosq
->
msgs_out
.
queue_Àn
++;

133 
	`DL_APPEND
(
mosq
->
msgs_ö
.
öÊight
, 
mesßge
);

134 
mosq
->
msgs_ö
.
queue_Àn
++;

137  
	`mesßge__ªÀa£_to_öÊight
(
mosq
, 
dú
);

138 
	}
}

140 
	$mesßge__ªc⁄√˘_ª£t
(
mosquôto
 *
mosq
, 
boﬁ
 
upd©e_quŸa_⁄ly
)

142 
mosquôto_mesßge_Æl
 *
mesßge
, *
tmp
;

143 
	`as£π
(
mosq
);

145 
	`±hªad_muãx_lock
(&
mosq
->
msgs_ö
.
muãx
);

146 
mosq
->
msgs_ö
.
öÊight_quŸa
 = mosq->msgs_ö.
öÊight_maximum
;

147 
mosq
->
msgs_ö
.
queue_Àn
 = 0;

148 
	`DL_FOREACH_SAFE
(
mosq
->
msgs_ö
.
öÊight
, 
mesßge
, 
tmp
){

149 
mosq
->
msgs_ö
.
queue_Àn
++;

150 
mesßge
->
time°amp
 = 0;

151 if(
mesßge
->
msg
.
qos
 != 2){

152 
	`DL_DELETE
(
mosq
->
msgs_ö
.
öÊight
, 
mesßge
);

153 
	`mesßge__˛ónup
(&
mesßge
);

157 
	`utû__de¸emít_ª˚ive_quŸa
(
mosq
);

160 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_ö
.
muãx
);

163 
	`±hªad_muãx_lock
(&
mosq
->
msgs_out
.
muãx
);

164 
mosq
->
msgs_out
.
öÊight_quŸa
 = mosq->msgs_out.
öÊight_maximum
;

165 
mosq
->
msgs_out
.
queue_Àn
 = 0;

166 
	`DL_FOREACH_SAFE
(
mosq
->
msgs_out
.
öÊight
, 
mesßge
, 
tmp
){

167 
mosq
->
msgs_out
.
queue_Àn
++;

169 
mesßge
->
time°amp
 = 0;

170 if(
mosq
->
msgs_out
.
öÊight_quŸa
 != 0){

171 
	`utû__de¸emít_£nd_quŸa
(
mosq
);

172 i‡(
upd©e_quŸa_⁄ly
 =
Ál£
){

173 if(
mesßge
->
msg
.
qos
 == 1){

174 
mesßge
->
°©e
 = 
mosq_ms_publish_qos1
;

175 }if(
mesßge
->
msg
.
qos
 == 2){

176 if(
mesßge
->
°©e
 =
mosq_ms_waô_f‹_pubªc
){

177 
mesßge
->
°©e
 = 
mosq_ms_publish_qos2
;

178 }if(
mesßge
->
°©e
 =
mosq_ms_waô_f‹_pubcomp
){

179 
mesßge
->
°©e
 = 
mosq_ms_ª£nd_pubªl
;

185 
mesßge
->
°©e
 = 
mosq_ms_övÆid
;

188 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_out
.
muãx
);

189 
	}
}

192 
	$mesßge__ªÀa£_to_öÊight
(
mosquôto
 *
mosq
, 
mosquôto_msg_dúe˘i⁄
 
dú
)

195 
mosquôto_mesßge_Æl
 *
cur
, *
tmp
;

196 
rc
 = 
MOSQ_ERR_SUCCESS
;

198 if(
dú
 =
mosq_md_out
){

199 
	`DL_FOREACH_SAFE
(
mosq
->
msgs_out
.
öÊight
, 
cur
, 
tmp
){

200 if(
mosq
->
msgs_out
.
öÊight_quŸa
 > 0){

201 if(
cur
->
msg
.
qos
 > 0 && cur->
°©e
 =
mosq_ms_övÆid
){

202 if(
cur
->
msg
.
qos
 == 1){

203 
cur
->
°©e
 = 
mosq_ms_waô_f‹_puback
;

204 }if(
cur
->
msg
.
qos
 == 2){

205 
cur
->
°©e
 = 
mosq_ms_waô_f‹_pubªc
;

207 
rc
 = 
	`£nd__publish
(
mosq
, (
uöt16_t
)
cur
->
msg
.
mid
, cur->msg.
t›ic
, (
uöt32_t
)cur->msg.
∑ylﬂdÀn
, cur->msg.
∑ylﬂd
, (
uöt8_t
)cur->msg.
qos
, cur->msg.
ªèö
, cur->
dup
, cur->
¥›îtõs
, 
NULL
, 0);

208 if(
rc
){

209  
rc
;

211 
	`utû__de¸emít_£nd_quŸa
(
mosq
);

214  
MOSQ_ERR_SUCCESS
;

219  
rc
;

220 
	}
}

223 
	$mesßge__ªmove
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, 
mosquôto_msg_dúe˘i⁄
 
dú
, 
mosquôto_mesßge_Æl
 **
mesßge
, 
qos
)

225 
mosquôto_mesßge_Æl
 *
cur
, *
tmp
;

226 
boﬁ
 
found
 = 
Ál£
;

227 
	`as£π
(
mosq
);

228 
	`as£π
(
mesßge
);

230 if(
dú
 =
mosq_md_out
){

231 
	`±hªad_muãx_lock
(&
mosq
->
msgs_out
.
muãx
);

233 
	`DL_FOREACH_SAFE
(
mosq
->
msgs_out
.
öÊight
, 
cur
, 
tmp
){

234 if(
found
 =
Ál£
 && 
cur
->
msg
.
mid
 == mid){

235 if(
cur
->
msg
.
qos
 != qos){

236 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_out
.
muãx
);

237  
MOSQ_ERR_PROTOCOL
;

239 
	`DL_DELETE
(
mosq
->
msgs_out
.
öÊight
, 
cur
);

241 *
mesßge
 = 
cur
;

242 
mosq
->
msgs_out
.
queue_Àn
--;

243 
found
 = 
åue
;

247 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_out
.
muãx
);

248 if(
found
){

249  
MOSQ_ERR_SUCCESS
;

251  
MOSQ_ERR_NOT_FOUND
;

254 
	`±hªad_muãx_lock
(&
mosq
->
msgs_ö
.
muãx
);

255 
	`DL_FOREACH_SAFE
(
mosq
->
msgs_ö
.
öÊight
, 
cur
, 
tmp
){

256 if(
cur
->
msg
.
mid
 == mid){

257 if(
cur
->
msg
.
qos
 != qos){

258 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_ö
.
muãx
);

259  
MOSQ_ERR_PROTOCOL
;

261 
	`DL_DELETE
(
mosq
->
msgs_ö
.
öÊight
, 
cur
);

262 *
mesßge
 = 
cur
;

263 
mosq
->
msgs_ö
.
queue_Àn
--;

264 
found
 = 
åue
;

269 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_ö
.
muãx
);

270 if(
found
){

271  
MOSQ_ERR_SUCCESS
;

273  
MOSQ_ERR_NOT_FOUND
;

276 
	}
}

278 
	$mesßge__ªåy_check
(
mosquôto
 *
mosq
)

280 
mosquôto_mesßge_Æl
 *
msg
;

281 
time_t
 
now
 = 
	`mosquôto_time
();

282 
	`as£π
(
mosq
);

284 #ifde‡
WITH_THREADING


285 
	`±hªad_muãx_lock
(&
mosq
->
msgs_out
.
muãx
);

288 
	`DL_FOREACH
(
mosq
->
msgs_out
.
öÊight
, 
msg
){

289 
msg
->
°©e
){

290 
mosq_ms_publish_qos1
:

291 
mosq_ms_publish_qos2
:

292 
msg
->
time°amp
 = 
now
;

293 
msg
->
dup
 = 
åue
;

294 
	`£nd__publish
(
mosq
, (
uöt16_t
)
msg
->msg.
mid
, msg->msg.
t›ic
, (
uöt32_t
)msg->msg.
∑ylﬂdÀn
, msg->msg.
∑ylﬂd
, (
uöt8_t
)msg->msg.
qos
, msg->msg.
ªèö
, msg->
dup
, msg->
¥›îtõs
, 
NULL
, 0);

296 
mosq_ms_waô_f‹_pubªl
:

297 
msg
->
time°amp
 = 
now
;

298 
msg
->
dup
 = 
åue
;

299 
	`£nd__pubªc
(
mosq
, (
uöt16_t
)
msg
->msg.
mid
, 0, 
NULL
);

301 
mosq_ms_ª£nd_pubªl
:

302 
mosq_ms_waô_f‹_pubcomp
:

303 
msg
->
time°amp
 = 
now
;

304 
msg
->
dup
 = 
åue
;

305 
	`£nd__pubªl
(
mosq
, (
uöt16_t
)
msg
->msg.
mid
, 
NULL
);

311 #ifde‡
WITH_THREADING


312 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_out
.
muãx
);

314 
	}
}

317 
	$mosquôto_mesßge_ªåy_£t
(
mosquôto
 *
mosq
, 
mesßge_ªåy
)

319 
	`UNUSED
(
mosq
);

320 
	`UNUSED
(
mesßge_ªåy
);

321 
	}
}

323 
	$mesßge__out_upd©e
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, 
mosquôto_msg_°©e
 
°©e
, 
qos
)

325 
mosquôto_mesßge_Æl
 *
mesßge
, *
tmp
;

326 
	`as£π
(
mosq
);

328 
	`±hªad_muãx_lock
(&
mosq
->
msgs_out
.
muãx
);

329 
	`DL_FOREACH_SAFE
(
mosq
->
msgs_out
.
öÊight
, 
mesßge
, 
tmp
){

330 if(
mesßge
->
msg
.
mid
 == mid){

331 if(
mesßge
->
msg
.
qos
 != qos){

332 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_out
.
muãx
);

333  
MOSQ_ERR_PROTOCOL
;

335 
mesßge
->
°©e
 = state;

336 
mesßge
->
time°amp
 = 
	`mosquôto_time
();

337 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_out
.
muãx
);

338  
MOSQ_ERR_SUCCESS
;

341 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgs_out
.
muãx
);

342  
MOSQ_ERR_NOT_FOUND
;

343 
	}
}

345 
	$mosquôto_max_öÊight_mesßges_£t
(
mosquôto
 *
mosq
, 
max_öÊight_mesßges
)

347  
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_SEND_MAXIMUM
, ()
max_öÊight_mesßges
);

348 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/messages_mosq.h

18 #i‚de‡
MESSAGES_MOSQ_H


19 
	#MESSAGES_MOSQ_H


	)

21 
	~"mosquôto_öã∫Æ.h
"

22 
	~"mosquôto.h
"

24 
mesßge__˛ónup_Æl
(
mosquôto
 *
mosq
);

25 
mesßge__˛ónup
(
mosquôto_mesßge_Æl
 **
mesßge
);

26 
mesßge__dñëe
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, 
mosquôto_msg_dúe˘i⁄
 
dú
, 
qos
);

27 
mesßge__queue
(
mosquôto
 *
mosq
, 
mosquôto_mesßge_Æl
 *
mesßge
, 
mosquôto_msg_dúe˘i⁄
 
dú
);

28 
mesßge__ªc⁄√˘_ª£t
(
mosquôto
 *
mosq
, 
boﬁ
 
upd©e_quŸa_⁄ly
);

29 
mesßge__ªÀa£_to_öÊight
(
mosquôto
 *
mosq
, 
mosquôto_msg_dúe˘i⁄
 
dú
);

30 
mesßge__ªmove
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, 
mosquôto_msg_dúe˘i⁄
 
dú
, 
mosquôto_mesßge_Æl
 **
mesßge
, 
qos
);

31 
mesßge__ªåy_check
(
mosquôto
 *
mosq
);

32 
mesßge__out_upd©e
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, 
mosquôto_msg_°©e
 
°©e
, 
qos
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/misc_mosq.c

22 
	~"c⁄fig.h
"

24 
	~<˘y≥.h
>

25 
	~<°dboﬁ.h
>

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

30 #ifde‡
WIN32


31 
	~<wösock2.h
>

32 
	~<a˛≠i.h
>

33 
	~<io.h
>

34 
	~<lmc⁄s.h
>

35 
	~<f˙é.h
>

37 
	~<sys/°©.h
>

40 
	~"misc_mosq.h
"

41 
	~"loggög_mosq.h
"

44 
FILE
 *
	$mosquôto__f›í
(c⁄° *
∑th
, c⁄° *
mode
, 
boﬁ
 
ª°ri˘_ªad
)

46 #ifde‡
WIN32


47 
buf
[4096];

48 
rc
;

49 
Êags
 = 0;

51 
rc
 = 
	`Ex∑ndEnvú⁄mítSåögsA
(
∑th
, 
buf
, 4096);

52 if(
rc
 == 0 ||Ñc > 4096){

53  
NULL
;

55 i‡(
ª°ri˘_ªad
) {

56 
HANDLE
 
hfûe
;

57 
SECURITY_ATTRIBUTES
 
£c
;

58 
EXPLICIT_ACCESS_A
 
ó
;

59 
PACL
 
∑˛
 = 
NULL
;

60 
u£∫ame
[
UNLEN
 + 1];

61 
DWORD
 
uÀn
 = 
UNLEN
;

62 
SECURITY_DESCRIPTOR
 
sd
;

63 
DWORD
 
dwCª©i⁄Di•osôi⁄
;

64 
fd
;

65 
FILE
 *
Âå
;

67 
mode
[0]){

69 
dwCª©i⁄Di•osôi⁄
 = 
OPEN_ALWAYS
;

70 
Êags
 = 
_O_APPEND
;

73 
dwCª©i⁄Di•osôi⁄
 = 
OPEN_EXISTING
;

74 
Êags
 = 
_O_RDONLY
;

77 
dwCª©i⁄Di•osôi⁄
 = 
CREATE_ALWAYS
;

80  
NULL
;

83 
	`GëU£rNameA
(
u£∫ame
, &
uÀn
);

84 i‡(!
	`InôülizeSecurôyDes¸ùt‹
(&
sd
, 
SECURITY_DESCRIPTOR_REVISION
)) {

85  
NULL
;

87 
	`BuûdEx∂icôAc˚ssWôhNameA
(&
ó
, 
u£∫ame
, 
GENERIC_ALL
, 
SET_ACCESS
, 
NO_INHERITANCE
);

88 i‡(
	`SëE¡rõsInA˛A
(1, &
ó
, 
NULL
, &
∑˛
Ë!
ERROR_SUCCESS
) {

89  
NULL
;

91 i‡(!
	`SëSecurôyDes¸ùt‹Da˛
(&
sd
, 
TRUE
, 
∑˛
, 
FALSE
)) {

92 
	`LoˇlFªe
(
∑˛
);

93  
NULL
;

96 
	`mem£t
(&
£c
, 0, (sec));

97 
£c
.
nLígth
 = (
SECURITY_ATTRIBUTES
);

98 
£c
.
bInhîôH™dÀ
 = 
FALSE
;

99 
£c
.
ÕSecurôyDes¸ùt‹
 = &
sd
;

101 
hfûe
 = 
	`Cª©eFûeA
(
buf
, 
GENERIC_READ
 | 
GENERIC_WRITE
, 
FILE_SHARE_READ
,

102 &
£c
,

103 
dwCª©i⁄Di•osôi⁄
,

104 
FILE_ATTRIBUTE_NORMAL
,

105 
NULL
);

107 
	`LoˇlFªe
(
∑˛
);

109 
fd
 = 
	`_›í_osfh™dÀ
((
öçå_t
)
hfûe
, 
Êags
);

110 i‡(
fd
 < 0) {

111  
NULL
;

114 
Âå
 = 
	`_fd›í
(
fd
, 
mode
);

115 i‡(!
Âå
) {

116 
	`_˛o£
(
fd
);

117  
NULL
;

119 if(
mode
[0] == 'a'){

120 
	`f£ek
(
Âå
, 0, 
SEEK_END
);

122  
Âå
;

125  
	`f›í
(
buf
, 
mode
);

129 if(
mode
[0] == 'r'){

130 
°©
 
°©buf
;

131 if(
	`°©
(
∑th
, &
°©buf
) < 0){

132  
NULL
;

135 if(!
	`S_ISREG
(
°©buf
.
°_mode
Ë&& !
	`S_ISLNK
(statbuf.st_mode)){

136 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %†i†nŸá fûe.", 
∑th
);

137  
NULL
;

141 i‡(
ª°ri˘_ªad
) {

142 
FILE
 *
Âå
;

143 
mode_t
 
ﬁd_mask
;

145 
ﬁd_mask
 = 
	`umask
(0077);

146 
Âå
 = 
	`f›í
(
∑th
, 
mode
);

147 
	`umask
(
ﬁd_mask
);

149  
Âå
;

151  
	`f›í
(
∑th
, 
mode
);

154 
	}
}

157 *
	$misc__åimbœnks
(*
°r
)

159 *
íd±r
;

161 if(
°r
 =
NULL
)  NULL;

163 
	`is•a˚
(
°r
[0])){

164 
°r
++;

166 
íd±r
 = &
°r
[
	`°æí
(str)-1];

167 
íd±r
 > 
°r
 && 
	`is•a˚
(endptr[0])){

168 
íd±r
[0] = '\0';

169 
íd±r
--;

171  
°r
;

172 
	}
}

175 *
	$fgës_exãndög
(**
buf
, *
buÊí
, 
FILE
 *
°ªam
)

177 *
rc
;

178 
ídch¨
;

179 
off£t
 = 0;

180 *
√wbuf
;

181 
size_t
 
Àn
;

183 if(
°ªam
 =
NULL
 || 
buf
 =NULL || 
buÊí
 == NULL || *buflen < 1){

184  
NULL
;

188 
rc
 = 
	`fgës
(&((*
buf
)[
off£t
]), (*
buÊí
)-off£t, 
°ªam
);

189 if(
	`„of
(
°ªam
Ë|| 
rc
 =
NULL
){

190  
rc
;

193 
Àn
 = 
	`°æí
(*
buf
);

194 if(
Àn
 == 0){

195  
rc
;

197 
ídch¨
 = (*
buf
)[
Àn
-1];

198 if(
ídch¨
 == '\n'){

199  
rc
;

202 
off£t
 = (*
buÊí
)-1;

203 *
buÊí
 += 1000;

204 
√wbuf
 = 
	`ªÆloc
(*
buf
, (
size_t
)*
buÊí
);

205 if(!
√wbuf
){

206  
NULL
;

208 *
buf
 = 
√wbuf
;

210 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/misc_mosq.h

18 #i‚de‡
MISC_MOSQ_H


19 
	#MISC_MOSQ_H


	)

21 
	~<°dboﬁ.h
>

22 
	~<°dio.h
>

24 
FILE
 *
mosquôto__f›í
(c⁄° *
∑th
, c⁄° *
mode
, 
boﬁ
 
ª°ri˘_ªad
);

25 *
misc__åimbœnks
(*
°r
);

26 *
fgës_exãndög
(**
buf
, *
buÊí
, 
FILE
 *
°ªam
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/mosquitto.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 
	~<sig«l.h
>

23 
	~<°rög.h
>

24 #i‚de‡
WIN32


25 
	~<sys/time.h
>

26 
	~<°rögs.h
>

29 #i‡
deföed
(
__APPLE__
)

30 
	~<mach/mach_time.h
>

33 
	~"loggög_mosq.h
"

34 
	~"mosquôto.h
"

35 
	~"mosquôto_öã∫Æ.h
"

36 
	~"mem‹y_mosq.h
"

37 
	~"mesßges_mosq.h
"

38 
	~"mqâ_¥Ÿocﬁ.h
"

39 
	~"√t_mosq.h
"

40 
	~"∑ckë_mosq.h
"

41 
	~"wûl_mosq.h
"

43 
	göô_ªfcou¡
 = 0;

45 
mosquôto__de°roy
(
mosquôto
 *
mosq
);

47 
	$mosquôto_lib_vîsi⁄
(*
maj‹
, *
mö‹
, *
ªvisi⁄
)

49 if(
maj‹
Ë*maj‹ = 
LIBMOSQUITTO_MAJOR
;

50 if(
mö‹
Ë*mö‹ = 
LIBMOSQUITTO_MINOR
;

51 if(
ªvisi⁄
Ë*ªvisi⁄ = 
LIBMOSQUITTO_REVISION
;

52  
LIBMOSQUITTO_VERSION_NUMBER
;

53 
	}
}

55 
	$mosquôto_lib_öô
()

57 
rc
;

59 i‡(
öô_ªfcou¡
 == 0) {

60 #ifde‡
WIN32


61 
	`§™d
(()
	`GëTickCou¡64
());

62 #ñi‡
_POSIX_TIMERS
>0 && 
	`deföed
(
_POSIX_MONOTONIC_CLOCK
)

63 
time•ec
 
ç
;

65 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ç
);

66 
	`§™d
(()
ç
.
tv_n£c
);

67 #ñi‡
	`deföed
(
__APPLE__
)

68 
uöt64_t
 
ticks
;

70 
ticks
 = 
	`mach_absﬁuã_time
();

71 
	`§™d
(()
ticks
);

73 
timevÆ
 
tv
;

75 
	`gëtimeofday
(&
tv
, 
NULL
);

76 
	`§™d
(
tv
.
tv_£c
*1000 +Åv.
tv_u£c
/1000);

79 
rc
 = 
	`√t__öô
();

80 i‡(
rc
 !
MOSQ_ERR_SUCCESS
) {

81  
rc
;

85 
öô_ªfcou¡
++;

86  
MOSQ_ERR_SUCCESS
;

87 
	}
}

89 
	$mosquôto_lib_˛ónup
()

91 i‡(
öô_ªfcou¡
 == 1) {

92 
	`√t__˛ónup
();

95 i‡(
öô_ªfcou¡
 > 0) {

96 --
öô_ªfcou¡
;

99  
MOSQ_ERR_SUCCESS
;

100 
	}
}

102 
mosquôto
 *
	$mosquôto_√w
(c⁄° *
id
, 
boﬁ
 
˛ón_°¨t
, *
u£rd©a
)

104 
mosquôto
 *
mosq
 = 
NULL
;

105 
rc
;

107 if(
˛ón_°¨t
 =
Ál£
 && 
id
 =
NULL
){

108 
î∫o
 = 
EINVAL
;

109  
NULL
;

112 
mosq
 = (
mosquôto
 *)
	`mosquôto__ˇŒoc
(1, (mosquitto));

113 if(
mosq
){

114 
mosq
->
sock
 = 
INVALID_SOCKET
;

115 #ifde‡
WITH_THREADING


116 
mosq
->
thªad_id
 = 
	`±hªad_£lf
();

118 
mosq
->
sock∑úR
 = 
INVALID_SOCKET
;

119 
mosq
->
sock∑úW
 = 
INVALID_SOCKET
;

120 
rc
 = 
	`mosquôto_ªöôüli£
(
mosq
, 
id
, 
˛ón_°¨t
, 
u£rd©a
);

121 if(
rc
){

122 
	`mosquôto_de°roy
(
mosq
);

123 if(
rc
 =
MOSQ_ERR_INVAL
){

124 
î∫o
 = 
EINVAL
;

125 }if(
rc
 =
MOSQ_ERR_NOMEM
){

126 
î∫o
 = 
ENOMEM
;

128  
NULL
;

131 
î∫o
 = 
ENOMEM
;

133  
mosq
;

134 
	}
}

136 
	$mosquôto_ªöôüli£
(
mosquôto
 *
mosq
, c⁄° *
id
, 
boﬁ
 
˛ón_°¨t
, *
u£rd©a
)

138 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

140 if(
˛ón_°¨t
 =
Ál£
 && 
id
 =
NULL
){

141  
MOSQ_ERR_INVAL
;

144 
	`mosquôto__de°roy
(
mosq
);

145 
	`mem£t
(
mosq
, 0, (
mosquôto
));

147 if(
u£rd©a
){

148 
mosq
->
u£rd©a
 = userdata;

150 
mosq
->
u£rd©a
 = mosq;

152 
mosq
->
¥Ÿocﬁ
 = 
mosq_p_mqâ311
;

153 
mosq
->
sock
 = 
INVALID_SOCKET
;

154 
mosq
->
sock∑úR
 = 
INVALID_SOCKET
;

155 
mosq
->
sock∑úW
 = 
INVALID_SOCKET
;

156 
mosq
->
kì∑live
 = 60;

157 
mosq
->
˛ón_°¨t
 = clean_start;

158 if(
id
){

159 if(
	`STREMPTY
(
id
)){

160  
MOSQ_ERR_INVAL
;

162 if(
	`mosquôto_vÆid©e_utf8
(
id
, ()
	`°æí
(id))){

163  
MOSQ_ERR_MALFORMED_UTF8
;

165 
mosq
->
id
 = 
	`mosquôto__°rdup
(id);

166 if(!
mosq
->
id
){

167  
MOSQ_ERR_NOMEM
;

170 
mosq
->
ö_∑ckë
.
∑ylﬂd
 = 
NULL
;

171 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

172 
mosq
->
out_∑ckë
 = 
NULL
;

173 
mosq
->
out_∑ckë_cou¡
 = 0;

174 
mosq
->
cuºít_out_∑ckë
 = 
NULL
;

175 
mosq
->
œ°_msg_ö
 = 
	`mosquôto_time
();

176 
mosq
->
√xt_msg_out
 = 
	`mosquôto_time
(Ë+ mosq->
kì∑live
;

177 
mosq
->
pög_t
 = 0;

178 
mosq
->
œ°_mid
 = 0;

179 
mosq
->
°©e
 = 
mosq_cs_√w
;

180 
mosq
->
max_qos
 = 2;

181 
mosq
->
msgs_ö
.
öÊight_maximum
 = 20;

182 
mosq
->
msgs_out
.
öÊight_maximum
 = 20;

183 
mosq
->
msgs_ö
.
öÊight_quŸa
 = 20;

184 
mosq
->
msgs_out
.
öÊight_quŸa
 = 20;

185 
mosq
->
wûl
 = 
NULL
;

186 
mosq
->
⁄_c⁄√˘
 = 
NULL
;

187 
mosq
->
⁄_publish
 = 
NULL
;

188 
mosq
->
⁄_mesßge
 = 
NULL
;

189 
mosq
->
⁄_subs¸ibe
 = 
NULL
;

190 
mosq
->
⁄_unsubs¸ibe
 = 
NULL
;

191 
mosq
->
ho°
 = 
NULL
;

192 
mosq
->
p‹t
 = 1883;

193 
mosq
->
ö_ˇŒback
 = 
Ál£
;

194 
mosq
->
ªc⁄√˘_dñay
 = 1;

195 
mosq
->
ªc⁄√˘_dñay_max
 = 1;

196 
mosq
->
ªc⁄√˘_exp⁄ítül_backoff
 = 
Ál£
;

197 
mosq
->
thªaded
 = 
mosq_ts_n⁄e
;

198 #ifde‡
WITH_TLS


199 
mosq
->
s¶
 = 
NULL
;

200 
mosq
->
s¶_˘x
 = 
NULL
;

201 
mosq
->
s¶_˘x_deÁu…s
 = 
åue
;

202 
mosq
->
és_˚π_ªqs
 = 
SSL_VERIFY_PEER
;

203 
mosq
->
és_ö£cuª
 = 
Ál£
;

204 
mosq
->
w™t_wrôe
 = 
Ál£
;

205 
mosq
->
és_oc•_ªquúed
 = 
Ál£
;

207 #ifde‡
WITH_THREADING


208 
	`±hªad_muãx_öô
(&
mosq
->
ˇŒback_muãx
, 
NULL
);

209 
	`±hªad_muãx_öô
(&
mosq
->
log_ˇŒback_muãx
, 
NULL
);

210 
	`±hªad_muãx_öô
(&
mosq
->
°©e_muãx
, 
NULL
);

211 
	`±hªad_muãx_öô
(&
mosq
->
out_∑ckë_muãx
, 
NULL
);

212 
	`±hªad_muãx_öô
(&
mosq
->
cuºít_out_∑ckë_muãx
, 
NULL
);

213 
	`±hªad_muãx_öô
(&
mosq
->
msgtime_muãx
, 
NULL
);

214 
	`±hªad_muãx_öô
(&
mosq
->
msgs_ö
.
muãx
, 
NULL
);

215 
	`±hªad_muãx_öô
(&
mosq
->
msgs_out
.
muãx
, 
NULL
);

216 
	`±hªad_muãx_öô
(&
mosq
->
mid_muãx
, 
NULL
);

217 
mosq
->
thªad_id
 = 
	`±hªad_£lf
();

221 if(
	`√t__sockë∑ú
(&
mosq
->
sock∑úR
, &mosq->
sock∑úW
)){

222 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_WARNING
,

226  
MOSQ_ERR_SUCCESS
;

227 
	}
}

230 
	$mosquôto__de°roy
(
mosquôto
 *
mosq
)

232 if(!
mosq
) ;

234 #ifde‡
WITH_THREADING


235 #ifde‡
HAVE_PTHREAD_CANCEL


236 if(
mosq
->
thªaded
 =
mosq_ts_£lf
 && !
	`±hªad_equÆ
(mosq->
thªad_id
, 
	`±hªad_£lf
())){

237 
	`±hªad_ˇn˚l
(
mosq
->
thªad_id
);

238 
	`±hªad_joö
(
mosq
->
thªad_id
, 
NULL
);

239 
mosq
->
thªaded
 = 
mosq_ts_n⁄e
;

243 if(
mosq
->
id
){

247 
	`±hªad_muãx_de°roy
(&
mosq
->
ˇŒback_muãx
);

248 
	`±hªad_muãx_de°roy
(&
mosq
->
log_ˇŒback_muãx
);

249 
	`±hªad_muãx_de°roy
(&
mosq
->
°©e_muãx
);

250 
	`±hªad_muãx_de°roy
(&
mosq
->
out_∑ckë_muãx
);

251 
	`±hªad_muãx_de°roy
(&
mosq
->
cuºít_out_∑ckë_muãx
);

252 
	`±hªad_muãx_de°roy
(&
mosq
->
msgtime_muãx
);

253 
	`±hªad_muãx_de°roy
(&
mosq
->
msgs_ö
.
muãx
);

254 
	`±hªad_muãx_de°roy
(&
mosq
->
msgs_out
.
muãx
);

255 
	`±hªad_muãx_de°roy
(&
mosq
->
mid_muãx
);

258 if(
mosq
->
sock
 !
INVALID_SOCKET
){

259 
	`√t__sockë_˛o£
(
mosq
);

261 
	`mesßge__˛ónup_Æl
(
mosq
);

262 
	`wûl__˛ór
(
mosq
);

263 #ifde‡
WITH_TLS


264 if(
mosq
->
s¶
){

265 
	`SSL_‰ì
(
mosq
->
s¶
);

267 if(
mosq
->
s¶_˘x
){

268 
	`SSL_CTX_‰ì
(
mosq
->
s¶_˘x
);

270 
	`mosquôto__‰ì
(
mosq
->
és_ˇfûe
);

271 
	`mosquôto__‰ì
(
mosq
->
és_ˇ∑th
);

272 
	`mosquôto__‰ì
(
mosq
->
és_˚πfûe
);

273 
	`mosquôto__‰ì
(
mosq
->
és_keyfûe
);

274 if(
mosq
->
és_pw_ˇŒback
Ëmosq->és_pw_ˇŒback = 
NULL
;

275 
	`mosquôto__‰ì
(
mosq
->
és_vîsi⁄
);

276 
	`mosquôto__‰ì
(
mosq
->
és_cùhîs
);

277 
	`mosquôto__‰ì
(
mosq
->
és_psk
);

278 
	`mosquôto__‰ì
(
mosq
->
és_psk_idítôy
);

279 
	`mosquôto__‰ì
(
mosq
->
és_Æ≤
);

282 
	`mosquôto__‰ì
(
mosq
->
addªss
);

283 
mosq
->
addªss
 = 
NULL
;

285 
	`mosquôto__‰ì
(
mosq
->
id
);

286 
mosq
->
id
 = 
NULL
;

288 
	`mosquôto__‰ì
(
mosq
->
u£∫ame
);

289 
mosq
->
u£∫ame
 = 
NULL
;

291 
	`mosquôto__‰ì
(
mosq
->
∑ssw‹d
);

292 
mosq
->
∑ssw‹d
 = 
NULL
;

294 
	`mosquôto__‰ì
(
mosq
->
ho°
);

295 
mosq
->
ho°
 = 
NULL
;

297 
	`mosquôto__‰ì
(
mosq
->
böd_addªss
);

298 
mosq
->
böd_addªss
 = 
NULL
;

300 
	`mosquôto_¥›îty_‰ì_Æl
(&
mosq
->
c⁄√˘_¥›îtõs
);

302 
	`∑ckë__˛ónup_Æl_no_locks
(
mosq
);

304 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

305 if(
mosq
->
sock∑úR
 !
INVALID_SOCKET
){

306 
	`COMPAT_CLOSE
(
mosq
->
sock∑úR
);

307 
mosq
->
sock∑úR
 = 
INVALID_SOCKET
;

309 if(
mosq
->
sock∑úW
 !
INVALID_SOCKET
){

310 
	`COMPAT_CLOSE
(
mosq
->
sock∑úW
);

311 
mosq
->
sock∑úW
 = 
INVALID_SOCKET
;

313 
	}
}

315 
	$mosquôto_de°roy
(
mosquôto
 *
mosq
)

317 if(!
mosq
) ;

319 
	`mosquôto__de°roy
(
mosq
);

320 
	`mosquôto__‰ì
(
mosq
);

321 
	}
}

323 
	$mosquôto_sockë
(
mosquôto
 *
mosq
)

325 if(!
mosq
Ë 
INVALID_SOCKET
;

326  
mosq
->
sock
;

327 
	}
}

330 
boﬁ
 
	$mosquôto_w™t_wrôe
(
mosquôto
 *
mosq
)

332 
boﬁ
 
ªsu…
 = 
Ál£
;

333 if(
mosq
->
out_∑ckë
 || mosq->
cuºít_out_∑ckë
){

334 
ªsu…
 = 
åue
;

336 #ifde‡
WITH_TLS


337 if(
mosq
->
s¶
){

338 i‡(
mosq
->
w™t_wrôe
) {

339 
ªsu…
 = 
åue
;

343  
ªsu…
;

344 
	}
}

347 
	$mosquôto_sub_t›ic_tokíi£
(c⁄° *
subt›ic
, ***
t›ics
, *
cou¡
)

349 
size_t
 
Àn
;

350 
size_t
 
hõr_cou¡
 = 1;

351 
size_t
 
°¨t
, 
°›
;

352 
size_t
 
hõr
;

353 
size_t
 
éí
;

354 
size_t
 
i
, 
j
;

356 if(!
subt›ic
 || !
t›ics
 || !
cou¡
Ë 
MOSQ_ERR_INVAL
;

358 
Àn
 = 
	`°æí
(
subt›ic
);

360 
i
=0; i<
Àn
; i++){

361 if(
subt›ic
[
i
] == '/'){

362 if(
i
 > 
Àn
-1){

365 
hõr_cou¡
++;

370 (*
t›ics
Ë
	`mosquôto__ˇŒoc
(
hõr_cou¡
, (*));

371 if(!(*
t›ics
)Ë 
MOSQ_ERR_NOMEM
;

373 
°¨t
 = 0;

374 
hõr
 = 0;

376 
i
=0; i<
Àn
+1; i++){

377 if(
subt›ic
[
i
] == '/' || subtopic[i] == '\0'){

378 
°›
 = 
i
;

379 if(
°¨t
 !
°›
){

380 
éí
 = 
°›
-
°¨t
 + 1;

381 (*
t›ics
)[
hõr
] = 
	`mosquôto__ˇŒoc
(
éí
, ());

382 if(!(*
t›ics
)[
hõr
]){

383 
j
=0; j<
hõr
; j++){

384 
	`mosquôto__‰ì
((*
t›ics
)[
j
]);

386 
	`mosquôto__‰ì
((*
t›ics
));

387  
MOSQ_ERR_NOMEM
;

389 
j
=
°¨t
; j<
°›
; j++){

390 (*
t›ics
)[
hõr
][
j
-
°¨t
] = 
subt›ic
[j];

393 
°¨t
 = 
i
+1;

394 
hõr
++;

398 *
cou¡
 = ()
hõr_cou¡
;

400  
MOSQ_ERR_SUCCESS
;

401 
	}
}

403 
	$mosquôto_sub_t›ic_tokís_‰ì
(***
t›ics
, 
cou¡
)

405 
i
;

407 if(!
t›ics
 || !(*t›icsË|| 
cou¡
<1Ë 
MOSQ_ERR_INVAL
;

409 
i
=0; i<
cou¡
; i++){

410 
	`mosquôto__‰ì
((*
t›ics
)[
i
]);

412 
	`mosquôto__‰ì
(*
t›ics
);

414  
MOSQ_ERR_SUCCESS
;

415 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/mosquitto_internal.h

20 #i‚de‡
MOSQUITTO_INTERNAL_H


21 
	#MOSQUITTO_INTERNAL_H


	)

23 
	~"c⁄fig.h
"

25 #ifde‡
WIN32


26 
	~<wösock2.h
>

29 #ifde‡
WITH_TLS


30 
	~<›ís¶/s¶.h
>

32 
	~<time.h
>

34 
	~<°dlib.h
>

36 #i‡
deföed
(
WITH_THREADING
Ë&& !deföed(
WITH_BROKER
)

37 
	~<±hªad.h
>

39 
	~<dummy±hªad.h
>

42 #ifde‡
WITH_SRV


43 
	~<¨es.h
>

46 #ifde‡
WIN32


47 #i‡
_MSC_VER
 < 1600

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 
	tuöt32_t
;

51 
	tuöt64_t
;

53 
	~<°döt.h
>

56 
	~<°döt.h
>

59 
	~"mosquôto.h
"

60 
	~"time_mosq.h
"

61 #ifde‡
WITH_BROKER


62 #ifde‡
__löux__


63 
	~<√tdb.h
>

65 
	~"uthash.h
"

66 
	gmosquôto_˛õ¡_msg
;

69 #ifde‡
WIN32


70 
SOCKET
 
	tmosq_sock_t
;

72 
	tmosq_sock_t
;

75 
	#SAFE_PRINT
(
A
Ë(A)?(A):"nuŒ"

	)

77 
	emosquôto_msg_dúe˘i⁄
 {

78 
	mmosq_md_ö
 = 0,

79 
	mmosq_md_out
 = 1

82 
	emosquôto_msg_°©e
 {

83 
	mmosq_ms_övÆid
 = 0,

84 
	mmosq_ms_publish_qos0
 = 1,

85 
	mmosq_ms_publish_qos1
 = 2,

86 
	mmosq_ms_waô_f‹_puback
 = 3,

87 
	mmosq_ms_publish_qos2
 = 4,

88 
	mmosq_ms_waô_f‹_pubªc
 = 5,

89 
	mmosq_ms_ª£nd_pubªl
 = 6,

90 
	mmosq_ms_waô_f‹_pubªl
 = 7,

91 
	mmosq_ms_ª£nd_pubcomp
 = 8,

92 
	mmosq_ms_waô_f‹_pubcomp
 = 9,

93 
	mmosq_ms_£nd_pubªc
 = 10,

94 
	mmosq_ms_queued
 = 11

97 
	emosquôto_˛õ¡_°©e
 {

98 
	mmosq_cs_√w
 = 0,

99 
	mmosq_cs_c⁄√˘ed
 = 1,

100 
	mmosq_cs_disc⁄√˘ög
 = 2,

101 
	mmosq_cs_a˘ive
 = 3,

102 
	mmosq_cs_c⁄√˘_≥ndög
 = 4,

103 
	mmosq_cs_c⁄√˘_§v
 = 5,

104 
	mmosq_cs_disc⁄√˘_ws
 = 6,

105 
	mmosq_cs_disc⁄√˘ed
 = 7,

106 
	mmosq_cs_socks5_√w
 = 8,

107 
	mmosq_cs_socks5_°¨t
 = 9,

108 
	mmosq_cs_socks5_ªque°
 = 10,

109 
	mmosq_cs_socks5_ª∂y
 = 11,

110 
	mmosq_cs_socks5_auth_ok
 = 12,

111 
	mmosq_cs_socks5_u£Ωass_ª∂y
 = 13,

112 
	mmosq_cs_socks5_£nd_u£Ωass
 = 14,

113 
	mmosq_cs_expúög
 = 15,

114 
	mmosq_cs_du∂iˇã
 = 17,

115 
	mmosq_cs_disc⁄√˘_wôh_wûl
 = 18,

116 
	mmosq_cs_disu£d
 = 19,

117 
	mmosq_cs_authítiˇtög
 = 20,

118 
	mmosq_cs_ªauthítiˇtög
 = 21,

121 
	emosquôto__¥Ÿocﬁ
 {

122 
	mmosq_p_övÆid
 = 0,

123 
	mmosq_p_mqâ31
 = 1,

124 
	mmosq_p_mqâ311
 = 2,

125 
	mmosq_p_mqâs
 = 3,

126 
	mmosq_p_mqâ5
 = 5,

129 
	emosquôto__thªaded_°©e
 {

130 
	mmosq_ts_n⁄e
,

131 
	mmosq_ts_£lf
,

132 
	mmosq_ts_exã∫Æ


135 
	emosquôto__å™•‹t
 {

136 
	mmosq_t_övÆid
 = 0,

137 
	mmosq_t_t˝
 = 1,

138 
	mmosq_t_ws
 = 2,

139 
	mmosq_t_s˘p
 = 3

143 
	smosquôto__Æüs
{

144 *
	mt›ic
;

145 
uöt16_t
 
	mÆüs
;

148 
	s£ssi⁄_expúy_li°
 {

149 
mosquôto
 *
	mc⁄ãxt
;

150 
£ssi⁄_expúy_li°
 *
	m¥ev
;

151 
£ssi⁄_expúy_li°
 *
	m√xt
;

154 
	smosquôto__∑ckë
{

155 
uöt8_t
 *
	m∑ylﬂd
;

156 
mosquôto__∑ckë
 *
	m√xt
;

157 
uöt32_t
 
	mªmaöög_mu…
;

158 
uöt32_t
 
	mªmaöög_Àngth
;

159 
uöt32_t
 
	m∑ckë_Àngth
;

160 
uöt32_t
 
	mto_¥o˚ss
;

161 
uöt32_t
 
	mpos
;

162 
uöt16_t
 
	mmid
;

163 
uöt8_t
 
	mcomm™d
;

164 
öt8_t
 
	mªmaöög_cou¡
;

167 
	smosquôto_mesßge_Æl
{

168 
mosquôto_mesßge_Æl
 *
	m√xt
;

169 
mosquôto_mesßge_Æl
 *
	m¥ev
;

170 
mosquôto_¥›îty
 *
	m¥›îtõs
;

171 
time_t
 
	mtime°amp
;

172 
mosquôto_msg_°©e
 
	m°©e
;

173 
boﬁ
 
	mdup
;

174 
mosquôto_mesßge
 
	mmsg
;

175 
uöt32_t
 
	mexpúy_öãrvÆ
;

178 #ifde‡
WITH_TLS


179 
	emosquôto__keyf‹m
 {

180 
	mmosq_k_≥m
 = 0,

181 
	mmosq_k_ígöe
 = 1,

185 
	swûl_dñay_li°
 {

186 
mosquôto
 *
	mc⁄ãxt
;

187 
wûl_dñay_li°
 *
	m¥ev
;

188 
wûl_dñay_li°
 *
	m√xt
;

191 
	smosquôto_msg_d©a
{

192 #ifde‡
WITH_BROKER


193 
mosquôto_˛õ¡_msg
 *
	möÊight
;

194 
mosquôto_˛õ¡_msg
 *
	mqueued
;

195 
	möÊight_byãs
;

196 
	möÊight_byãs12
;

197 
	möÊight_cou¡
;

198 
	möÊight_cou¡12
;

199 
	mqueued_byãs
;

200 
	mqueued_byãs12
;

201 
	mqueued_cou¡
;

202 
	mqueued_cou¡12
;

204 
mosquôto_mesßge_Æl
 *
	möÊight
;

205 
	mqueue_Àn
;

206 #ifde‡
WITH_THREADING


207 
±hªad_muãx_t
 
	mmuãx
;

210 
	möÊight_quŸa
;

211 
uöt16_t
 
	möÊight_maximum
;

215 
	smosquôto
 {

216 #i‡
deföed
(
WITH_BROKER
Ë&& deföed(
WITH_EPOLL
)

218 
	midít
;

220 
mosq_sock_t
 
	msock
;

221 #i‚de‡
WITH_BROKER


222 
mosq_sock_t
 
	msock∑úR
, 
	msock∑úW
;

224 
uöt32_t
 
	mmaximum_∑ckë_size
;

225 #i‡
deföed
(
__GLIBC__
Ë&& deföed(
WITH_ADNS
)

226 
gaicb
 *
	madns
;

228 
mosquôto__¥Ÿocﬁ
 
	m¥Ÿocﬁ
;

229 *
	maddªss
;

230 *
	mid
;

231 *
	mu£∫ame
;

232 *
	m∑ssw‹d
;

233 
uöt16_t
 
	mkì∑live
;

234 
uöt16_t
 
	mœ°_mid
;

235 
mosquôto_˛õ¡_°©e
 
	m°©e
;

236 
time_t
 
	mœ°_msg_ö
;

237 
time_t
 
	m√xt_msg_out
;

238 
time_t
 
	mpög_t
;

239 
mosquôto__∑ckë
 
	mö_∑ckë
;

240 
mosquôto__∑ckë
 *
	mcuºít_out_∑ckë
;

241 
mosquôto__∑ckë
 *
	mout_∑ckë
;

242 
mosquôto_mesßge_Æl
 *
	mwûl
;

243 
mosquôto__Æüs
 *
	mÆü£s
;

244 
wûl_dñay_li°
 *
	mwûl_dñay_íåy
;

245 
	mÆüs_cou¡
;

246 
	mout_∑ckë_cou¡
;

247 
uöt32_t
 
	mwûl_dñay_öãrvÆ
;

248 
time_t
 
	mwûl_dñay_time
;

249 #ifde‡
WITH_TLS


250 
SSL
 *
	ms¶
;

251 
SSL_CTX
 *
	ms¶_˘x
;

252 #i‚de‡
WITH_BROKER


253 
SSL_CTX
 *
	mu£r_s¶_˘x
;

255 *
	més_ˇfûe
;

256 *
	més_ˇ∑th
;

257 *
	més_˚πfûe
;

258 *
	més_keyfûe
;

259 (*
	més_pw_ˇŒback
)(*
	mbuf
, 
	msize
, 
	mrwÊag
, *
	mu£rd©a
);

260 *
	més_vîsi⁄
;

261 *
	més_cùhîs
;

262 *
	més_psk
;

263 *
	més_psk_idítôy
;

264 *
	més_ígöe
;

265 *
	més_ígöe_k∑ss_sha1
;

266 *
	més_Æ≤
;

267 
	més_˚π_ªqs
;

268 
boﬁ
 
	més_ö£cuª
;

269 
boﬁ
 
	ms¶_˘x_deÁu…s
;

270 
boﬁ
 
	més_oc•_ªquúed
;

271 
boﬁ
 
	més_u£_os_˚πs
;

272 
mosquôto__keyf‹m
 
	més_keyf‹m
;

274 
boﬁ
 
	mw™t_wrôe
;

275 #i‡
deföed
(
WITH_THREADING
Ë&& !deföed(
WITH_BROKER
)

276 
±hªad_muãx_t
 
	mˇŒback_muãx
;

277 
±hªad_muãx_t
 
	mlog_ˇŒback_muãx
;

278 
±hªad_muãx_t
 
	mmsgtime_muãx
;

279 
±hªad_muãx_t
 
	mout_∑ckë_muãx
;

280 
±hªad_muãx_t
 
	mcuºít_out_∑ckë_muãx
;

281 
±hªad_muãx_t
 
	m°©e_muãx
;

282 
±hªad_muãx_t
 
	mmid_muãx
;

283 
±hªad_t
 
	mthªad_id
;

285 
boﬁ
 
	m˛ón_°¨t
;

286 
time_t
 
	m£ssi⁄_expúy_time
;

287 
uöt32_t
 
	m£ssi⁄_expúy_öãrvÆ
;

288 #ifde‡
WITH_BROKER


289 
boﬁ
 
	mö_by_id
;

290 
boﬁ
 
	mis_dr›pög
;

291 
boﬁ
 
	mis_bridge
;

292 
mosquôto__bridge
 *
	mbridge
;

293 
mosquôto_msg_d©a
 
	mmsgs_ö
;

294 
mosquôto_msg_d©a
 
	mmsgs_out
;

295 
mosquôto__a˛_u£r
 *
	ma˛_li°
;

296 
mosquôto__li°íî
 *
	mli°íî
;

297 
mosquôto__∑ckë
 *
	mout_∑ckë_œ°
;

298 
mosquôto__˛õ¡_sub
 **
	msubs
;

299 *
	mauth_mëhod
;

300 
	msub_cou¡
;

301 #i‚de‡
WITH_EPOLL


302 
	mpﬁlfd_ödex
;

304 #ifde‡
WITH_WEBSOCKETS


305 
lws
 *
	mwsi
;

307 
boﬁ
 
	mws_w™t_wrôe
;

308 
boﬁ
 
	massig√d_id
;

310 #ifde‡
WITH_SOCKS


311 *
	msocks5_ho°
;

312 
uöt16_t
 
	msocks5_p‹t
;

313 *
	msocks5_u£∫ame
;

314 *
	msocks5_∑ssw‹d
;

316 *
	mu£rd©a
;

317 
boﬁ
 
	mö_ˇŒback
;

318 
mosquôto_msg_d©a
 
	mmsgs_ö
;

319 
mosquôto_msg_d©a
 
	mmsgs_out
;

320 (*
	m⁄_c⁄√˘
)(
	mmosquôto
 *, *
	mu£rd©a
, 
	mrc
);

321 (*
	m⁄_c⁄√˘_wôh_Êags
)(
	mmosquôto
 *, *
	mu£rd©a
, 
	mrc
, 
	mÊags
);

322 (*
	m⁄_c⁄√˘_v5
)(
	mmosquôto
 *, *
	mu£rd©a
, 
	mrc
, 
	mÊags
, c⁄° 
mosquôto_¥›îty
 *
	m¥›s
);

323 (*
	m⁄_disc⁄√˘
)(
	mmosquôto
 *, *
	mu£rd©a
, 
	mrc
);

324 (*
	m⁄_disc⁄√˘_v5
)(
	mmosquôto
 *, *
	mu£rd©a
, 
	mrc
, c⁄° 
mosquôto_¥›îty
 *
	m¥›s
);

325 (*
	m⁄_publish
)(
	mmosquôto
 *, *
	mu£rd©a
, 
	mmid
);

326 (*
	m⁄_publish_v5
)(
	mmosquôto
 *, *
	mu£rd©a
, 
	mmid
, 
	mªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
	m¥›s
);

327 (*
	m⁄_mesßge
)(
	mmosquôto
 *, *
	mu£rd©a
, c⁄° 
mosquôto_mesßge
 *
	mmesßge
);

328 (*
	m⁄_mesßge_v5
)(
	mmosquôto
 *, *
	mu£rd©a
, c⁄° 
mosquôto_mesßge
 *
	mmesßge
, c⁄° 
mosquôto_¥›îty
 *
	m¥›s
);

329 (*
	m⁄_subs¸ibe
)(
	mmosquôto
 *, *
	mu£rd©a
, 
	mmid
, 
	mqos_cou¡
, c⁄° *
	mgø¡ed_qos
);

330 (*
	m⁄_subs¸ibe_v5
)(
	mmosquôto
 *, *
	mu£rd©a
, 
	mmid
, 
	mqos_cou¡
, c⁄° *
	mgø¡ed_qos
, c⁄° 
mosquôto_¥›îty
 *
	m¥›s
);

331 (*
	m⁄_unsubs¸ibe
)(
	mmosquôto
 *, *
	mu£rd©a
, 
	mmid
);

332 (*
	m⁄_unsubs¸ibe_v5
)(
	mmosquôto
 *, *
	mu£rd©a
, 
	mmid
, c⁄° 
mosquôto_¥›îty
 *
	m¥›s
);

333 (*
	m⁄_log
)(
	mmosquôto
 *, *
	mu£rd©a
, 
	mÀvñ
, c⁄° *
	m°r
);

335 *
	mho°
;

336 
uöt16_t
 
	mp‹t
;

337 *
	mböd_addªss
;

338 
	mªc⁄√˘s
;

339 
	mªc⁄√˘_dñay
;

340 
	mªc⁄√˘_dñay_max
;

341 
boﬁ
 
	mªc⁄√˘_exp⁄ítül_backoff
;

342 
boﬁ
 
	mªque°_disc⁄√˘
;

343 
	mthªaded
;

344 
mosquôto__∑ckë
 *
	mout_∑ckë_œ°
;

345 
mosquôto_¥›îty
 *
	mc⁄√˘_¥›îtõs
;

346 #ifde‡
WITH_SRV


347 
¨es_ch™√l
 
	mach™
;

350 
uöt8_t
 
	mmax_qos
;

351 
uöt8_t
 
	mªèö_avaûabÀ
;

352 
boﬁ
 
	mt˝_nodñay
;

354 #ifde‡
WITH_BROKER


355 
UT_hash_h™dÀ
 
	mhh_id
;

356 
UT_hash_h™dÀ
 
	mhh_sock
;

357 
mosquôto
 *
	mf‹_‰ì_√xt
;

358 
£ssi⁄_expúy_li°
 *
	mexpúy_li°_ôem
;

359 
uöt16_t
 
	mªmŸe_p‹t
;

361 
uöt32_t
 
	mevíts
;

364 
	#STREMPTY
(
°r
Ë(°r[0] ='\0')

	)

366 
do_˛õ¡_disc⁄√˘
(
mosquôto
 *
mosq
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/net_mosq.c

19 
	#_GNU_SOURCE


	)

20 
	~"c⁄fig.h
"

22 
	~<as£π.h
>

23 
	~<î∫o.h
>

24 
	~<f˙é.h
>

25 
	~<°dio.h
>

26 
	~<°rög.h
>

27 #i‚de‡
WIN32


28 
	#_GNU_SOURCE


	)

29 
	~<√tdb.h
>

30 
	~<√töë/t˝.h
>

31 
	~<sys/sockë.h
>

32 
	~<uni°d.h
>

34 
	~<wösock2.h
>

35 
	~<ws2t˝ù.h
>

38 #ifde‡
__ANDROID__


39 
	~<löux/ö.h
>

40 
	~<löux/ö6.h
>

41 
	~<sys/ídün.h
>

44 #ifde‡
HAVE_NETINET_IN_H


45 
	~<√töë/ö.h
>

48 #ifde‡
WITH_UNIX_SOCKETS


49 
	~<sys/un.h
>

52 #ifde‡
__QNX__


53 
	~<√t/√tbyã.h
>

56 #ifde‡
WITH_TLS


57 
	~<›ís¶/c⁄f.h
>

58 
	~<›ís¶/ígöe.h
>

59 
	~<›ís¶/îr.h
>

60 
	~<›ís¶/ui.h
>

61 
	~<és_mosq.h
>

64 #ifde‡
WITH_BROKER


65 
	~"mosquôto_brokî_öã∫Æ.h
"

66 #ifde‡
WITH_WEBSOCKETS


67 
	~<libwebsockës.h
>

70 
	~"ªad_h™dÀ.h
"

73 
	~"loggög_mosq.h
"

74 
	~"mem‹y_mosq.h
"

75 
	~"mqâ_¥Ÿocﬁ.h
"

76 
	~"√t_mosq.h
"

77 
	~"time_mosq.h
"

78 
	~"utû_mosq.h
"

80 #ifde‡
WITH_TLS


81 
	gés_ex_ödex_mosq
 = -1;

82 
UI_METHOD
 *
	g_ui_mëhod
 = 
NULL
;

84 
boﬁ
 
	gis_és_öôülized
 = 
Ál£
;

87 
	$ui_›í
(
UI
 *
ui
)

89  
	`UI_mëhod_gë_›íî
(
	`UI_O≥nSSL
())(
ui
);

90 
	}
}

92 
	$ui_ªad
(
UI
 *
ui
, 
UI_STRING
 *
uis
)

94  
	`UI_mëhod_gë_ªadî
(
	`UI_O≥nSSL
())(
ui
, 
uis
);

95 
	}
}

97 
	$ui_wrôe
(
UI
 *
ui
, 
UI_STRING
 *
uis
)

99  
	`UI_mëhod_gë_wrôî
(
	`UI_O≥nSSL
())(
ui
, 
uis
);

100 
	}
}

102 
	$ui_˛o£
(
UI
 *
ui
)

104  
	`UI_mëhod_gë_˛o£r
(
	`UI_O≥nSSL
())(
ui
);

105 
	}
}

107 
	$£tup_ui_mëhod
()

109 
_ui_mëhod
 = 
	`UI_¸óã_mëhod
("OpenSSLápplication user interface");

110 
	`UI_mëhod_£t_›íî
(
_ui_mëhod
, 
ui_›í
);

111 
	`UI_mëhod_£t_ªadî
(
_ui_mëhod
, 
ui_ªad
);

112 
	`UI_mëhod_£t_wrôî
(
_ui_mëhod
, 
ui_wrôe
);

113 
	`UI_mëhod_£t_˛o£r
(
_ui_mëhod
, 
ui_˛o£
);

114 
	}
}

116 
	$˛ónup_ui_mëhod
()

118 if(
_ui_mëhod
){

119 
	`UI_de°roy_mëhod
(
_ui_mëhod
);

120 
_ui_mëhod
 = 
NULL
;

122 
	}
}

124 
UI_METHOD
 *
	$√t__gë_ui_mëhod
()

126  
_ui_mëhod
;

127 
	}
}

131 
	$√t__öô
()

133 #ifde‡
WIN32


134 
WSADATA
 
wßD©a
;

135 if(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0){

136  
MOSQ_ERR_UNKNOWN
;

140 #ifde‡
WITH_SRV


141 
	`¨es_libøry_öô
(
ARES_LIB_INIT_ALL
);

144  
MOSQ_ERR_SUCCESS
;

145 
	}
}

147 
	$√t__˛ónup
()

149 #ifde‡
WITH_TLS


150 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

151 
	`CRYPTO_˛ónup_Æl_ex_d©a
();

152 
	`ERR_‰ì_°rögs
();

153 
	`ERR_ªmove_thªad_°©e
(
NULL
);

154 
	`EVP_˛ónup
();

156 #i‡!
	`deföed
(
OPENSSL_NO_ENGINE
)

157 
	`ENGINE_˛ónup
();

159 
is_és_öôülized
 = 
Ál£
;

162 
	`CONF_moduÀs_u∆ﬂd
(1);

163 
	`˛ónup_ui_mëhod
();

166 #ifde‡
WITH_SRV


167 
	`¨es_libøry_˛ónup
();

170 #ifde‡
WIN32


171 
	`WSACÀ™up
();

173 
	}
}

175 #ifde‡
WITH_TLS


176 
	$√t__öô_és
()

178 if(
is_és_öôülized
) ;

180 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

181 
	`SSL_lﬂd_îr‹_°rögs
();

182 
	`SSL_libøry_öô
();

183 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

185 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
 \

186 | 
OPENSSL_INIT_ADD_ALL_DIGESTS
 \

187 | 
OPENSSL_INIT_LOAD_CONFIG
, 
NULL
);

189 #i‡!
	`deföed
(
OPENSSL_NO_ENGINE
)

190 
	`ENGINE_lﬂd_buûtö_ígöes
();

192 
	`£tup_ui_mëhod
();

193 if(
és_ex_ödex_mosq
 == -1){

194 
és_ex_ödex_mosq
 = 
	`SSL_gë_ex_√w_ödex
(0, "˛õ¡ c⁄ãxt", 
NULL
, NULL, NULL);

197 
is_és_öôülized
 = 
åue
;

198 
	}
}

205 
	$√t__sockë_˛o£
(
mosquôto
 *
mosq
)

207 
rc
 = 0;

208 #ifde‡
WITH_BROKER


209 
mosquôto
 *
mosq_found
;

212 
	`as£π
(
mosq
);

213 #ifde‡
WITH_TLS


214 #ifde‡
WITH_WEBSOCKETS


215 if(!
mosq
->
wsi
)

218 if(
mosq
->
s¶
){

219 if(!
	`SSL_ö_öô
(
mosq
->
s¶
)){

220 
	`SSL_shutdown
(
mosq
->
s¶
);

222 
	`SSL_‰ì
(
mosq
->
s¶
);

223 
mosq
->
s¶
 = 
NULL
;

228 #ifde‡
WITH_WEBSOCKETS


229 if(
mosq
->
wsi
)

231 if(
mosq
->
°©e
 !
mosq_cs_disc⁄√˘ög
){

232 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_disc⁄√˘_ws
);

234 
	`lws_ˇŒback_⁄_wrôabÀ
(
mosq
->
wsi
);

238 if(
mosq
->
sock
 !
INVALID_SOCKET
){

239 #ifde‡
WITH_BROKER


240 
	`HASH_FIND
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, &
mosq
->
sock
, (mosq->sock), 
mosq_found
);

241 if(
mosq_found
){

242 
	`HASH_DELETE
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, 
mosq_found
);

245 
rc
 = 
	`COMPAT_CLOSE
(
mosq
->
sock
);

246 
mosq
->
sock
 = 
INVALID_SOCKET
;

250 #ifde‡
WITH_BROKER


251 if(
mosq
->
li°íî
){

252 
mosq
->
li°íî
->
˛õ¡_cou¡
--;

253 
mosq
->
li°íî
 = 
NULL
;

257  
rc
;

258 
	}
}

261 #ifde‡
FINAL_WITH_TLS_PSK


262 
	$psk_˛õ¡_ˇŒback
(
SSL
 *
s¶
, c⁄° *
höt
,

263 *
idítôy
, 
max_idítôy_Àn
,

264 *
psk
, 
max_psk_Àn
)

266 
mosquôto
 *
mosq
;

267 
Àn
;

269 
	`UNUSED
(
höt
);

271 
mosq
 = 
	`SSL_gë_ex_d©a
(
s¶
, 
és_ex_ödex_mosq
);

272 if(!
mosq
)  0;

274 
	`¢¥ötf
(
idítôy
, 
max_idítôy_Àn
, "%s", 
mosq
->
és_psk_idítôy
);

276 
Àn
 = 
	`mosquôto__hex2bö
(
mosq
->
és_psk
, 
psk
, ()
max_psk_Àn
);

277 i‡(
Àn
 < 0)  0;

278  ()
Àn
;

279 
	}
}

282 #i‡
deföed
(
WITH_BROKER
Ë&& deföed(
__GLIBC__
Ë&& deföed(
WITH_ADNS
)

284 
	$√t__åy_c⁄√˘_°ï1
(
mosquôto
 *
mosq
, c⁄° *
ho°
)

286 
s
;

287 *
£vp
 = 
NULL
;

288 
addröfo
 *
höts
;

290 if(
mosq
->
adns
){

291 
	`gai_ˇn˚l
(
mosq
->
adns
);

292 
	`mosquôto__‰ì
((
addröfo
 *)
mosq
->
adns
->
¨_ªque°
);

293 
	`mosquôto__‰ì
(
mosq
->
adns
);

295 
mosq
->
adns
 = 
	`mosquôto__ˇŒoc
(1, (
gaicb
));

296 if(!
mosq
->
adns
){

297  
MOSQ_ERR_NOMEM
;

300 
höts
 = 
	`mosquôto__ˇŒoc
(1, (
addröfo
));

301 if(!
höts
){

302 
	`mosquôto__‰ì
(
mosq
->
adns
);

303 
mosq
->
adns
 = 
NULL
;

304  
MOSQ_ERR_NOMEM
;

307 
höts
->
ai_Ámûy
 = 
AF_UNSPEC
;

308 
höts
->
ai_sockty≥
 = 
SOCK_STREAM
;

310 
mosq
->
adns
->
¨_«me
 = 
ho°
;

311 
mosq
->
adns
->
¨_ªque°
 = 
höts
;

313 
s
 = 
	`gëaddröfo_a
(
GAI_NOWAIT
, &
mosq
->
adns
, 1, 
£vp
);

314 if(
s
){

315 
î∫o
 = 
s
;

316 if(
mosq
->
adns
){

317 
	`mosquôto__‰ì
((
addröfo
 *)
mosq
->
adns
->
¨_ªque°
);

318 
	`mosquôto__‰ì
(
mosq
->
adns
);

319 
mosq
->
adns
 = 
NULL
;

321  
MOSQ_ERR_EAI
;

324  
MOSQ_ERR_SUCCESS
;

325 
	}
}

328 
	$√t__åy_c⁄√˘_°ï2
(
mosquôto
 *
mosq
, 
uöt16_t
 
p‹t
, 
mosq_sock_t
 *
sock
)

330 
addröfo
 *
aöfo
, *
Ω
;

331 
rc
;

333 
aöfo
 = 
mosq
->
adns
->
¨_ªsu…
;

335 
Ω
 = 
aöfo
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
){

336 *
sock
 = 
	`sockë
(
Ω
->
ai_Ámûy
,Ñp->
ai_sockty≥
,Ñp->
ai_¥Ÿocﬁ
);

337 if(*
sock
 =
INVALID_SOCKET
) ;

339 if(
Ω
->
ai_Ámûy
 =
AF_INET
){

340 ((
sockaddr_ö
 *)
Ω
->
ai_addr
)->
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

341 }if(
Ω
->
ai_Ámûy
 =
AF_INET6
){

342 ((
sockaddr_ö6
 *)
Ω
->
ai_addr
)->
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

344 
	`COMPAT_CLOSE
(*
sock
);

345 *
sock
 = 
INVALID_SOCKET
;

350 if(
	`√t__sockë_n⁄block
(
sock
)){

354 
rc
 = 
	`c⁄√˘
(*
sock
, 
Ω
->
ai_addr
,Ñp->
ai_addæí
);

355 #ifde‡
WIN32


356 
î∫o
 = 
	`WSAGëLa°Eº‹
();

358 if(
rc
 =0 || 
î∫o
 =
EINPROGRESS
 ||Éºnÿ=
COMPAT_EWOULDBLOCK
){

359 if(
rc
 < 0 && (
î∫o
 =
EINPROGRESS
 ||Éºnÿ=
COMPAT_EWOULDBLOCK
)){

360 
rc
 = 
MOSQ_ERR_CONN_PENDING
;

364 if(
	`√t__sockë_n⁄block
(
sock
)){

370 
	`COMPAT_CLOSE
(*
sock
);

371 *
sock
 = 
INVALID_SOCKET
;

373 
	`‰ìaddröfo
(
mosq
->
adns
->
¨_ªsu…
);

374 
mosq
->
adns
->
¨_ªsu…
 = 
NULL
;

376 
	`mosquôto__‰ì
((
addröfo
 *)
mosq
->
adns
->
¨_ªque°
);

377 
	`mosquôto__‰ì
(
mosq
->
adns
);

378 
mosq
->
adns
 = 
NULL
;

380 if(!
Ω
){

381  
MOSQ_ERR_ERRNO
;

384  
rc
;

385 
	}
}

390 
	$√t__åy_c⁄√˘_t˝
(c⁄° *
ho°
, 
uöt16_t
 
p‹t
, 
mosq_sock_t
 *
sock
, c⁄° *
böd_addªss
, 
boﬁ
 
blockög
)

392 
addröfo
 
höts
;

393 
addröfo
 *
aöfo
, *
Ω
;

394 
addröfo
 *
aöfo_böd
, *
Ω_böd
;

395 
s
;

396 
rc
 = 
MOSQ_ERR_SUCCESS
;

398 
aöfo_böd
 = 
NULL
;

400 *
sock
 = 
INVALID_SOCKET
;

401 
	`mem£t
(&
höts
, 0, (
addröfo
));

402 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

403 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

405 
s
 = 
	`gëaddröfo
(
ho°
, 
NULL
, &
höts
, &
aöfo
);

406 if(
s
){

407 
î∫o
 = 
s
;

408  
MOSQ_ERR_EAI
;

411 if(
böd_addªss
){

412 
s
 = 
	`gëaddröfo
(
böd_addªss
, 
NULL
, &
höts
, &
aöfo_böd
);

413 if(
s
){

414 
	`‰ìaddröfo
(
aöfo
);

415 
î∫o
 = 
s
;

416  
MOSQ_ERR_EAI
;

420 
Ω
 = 
aöfo
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
){

421 *
sock
 = 
	`sockë
(
Ω
->
ai_Ámûy
,Ñp->
ai_sockty≥
,Ñp->
ai_¥Ÿocﬁ
);

422 if(*
sock
 =
INVALID_SOCKET
) ;

424 if(
Ω
->
ai_Ámûy
 =
AF_INET
){

425 ((
sockaddr_ö
 *)
Ω
->
ai_addr
)->
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

426 }if(
Ω
->
ai_Ámûy
 =
AF_INET6
){

427 ((
sockaddr_ö6
 *)
Ω
->
ai_addr
)->
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

429 
	`COMPAT_CLOSE
(*
sock
);

430 *
sock
 = 
INVALID_SOCKET
;

434 if(
böd_addªss
){

435 
Ω_böd
 = 
aöfo_böd
;Ñp_böd !
NULL
;Ñp_böd =Ñp_böd->
ai_√xt
){

436 if(
	`böd
(*
sock
, 
Ω_böd
->
ai_addr
,Ñp_böd->
ai_addæí
) == 0){

440 if(!
Ω_böd
){

441 
	`COMPAT_CLOSE
(*
sock
);

442 *
sock
 = 
INVALID_SOCKET
;

447 if(!
blockög
){

449 if(
	`√t__sockë_n⁄block
(
sock
)){

454 
rc
 = 
	`c⁄√˘
(*
sock
, 
Ω
->
ai_addr
,Ñp->
ai_addæí
);

455 #ifde‡
WIN32


456 
î∫o
 = 
	`WSAGëLa°Eº‹
();

458 if(
rc
 =0 || 
î∫o
 =
EINPROGRESS
 ||Éºnÿ=
COMPAT_EWOULDBLOCK
){

459 if(
rc
 < 0 && (
î∫o
 =
EINPROGRESS
 ||Éºnÿ=
COMPAT_EWOULDBLOCK
)){

460 
rc
 = 
MOSQ_ERR_CONN_PENDING
;

463 if(
blockög
){

465 if(
	`√t__sockë_n⁄block
(
sock
)){

472 
	`COMPAT_CLOSE
(*
sock
);

473 *
sock
 = 
INVALID_SOCKET
;

475 
	`‰ìaddröfo
(
aöfo
);

476 if(
böd_addªss
){

477 
	`‰ìaddröfo
(
aöfo_böd
);

479 if(!
Ω
){

480  
MOSQ_ERR_ERRNO
;

482  
rc
;

483 
	}
}

486 #ifde‡
WITH_UNIX_SOCKETS


487 
	$√t__åy_c⁄√˘_unix
(c⁄° *
ho°
, 
mosq_sock_t
 *
sock
)

489 
sockaddr_un
 
addr
;

490 
s
;

491 
rc
;

493 if(
ho°
 =
NULL
 || 
	`°æí
(ho°Ë=0 || såÀn(ho°Ë> (
addr
.
sun_∑th
)-1){

494  
MOSQ_ERR_INVAL
;

497 
	`mem£t
(&
addr
, 0, (
sockaddr_un
));

498 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

499 
	`°∫˝y
(
addr
.
sun_∑th
, 
ho°
, (addr.sun_path)-1);

501 
s
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

502 if(
s
 < 0){

503  
MOSQ_ERR_ERRNO
;

505 
rc
 = 
	`√t__sockë_n⁄block
(&
s
);

506 if(
rc
) Ñc;

508 
rc
 = 
	`c⁄√˘
(
s
, (
sockaddr
 *)&
addr
, (
sockaddr_un
));

509 if(
rc
 < 0){

510 
	`˛o£
(
s
);

511  
MOSQ_ERR_ERRNO
;

514 *
sock
 = 
s
;

517 
	}
}

521 
	$√t__åy_c⁄√˘
(c⁄° *
ho°
, 
uöt16_t
 
p‹t
, 
mosq_sock_t
 *
sock
, c⁄° *
böd_addªss
, 
boﬁ
 
blockög
)

523 if(
p‹t
 == 0){

524 #ifde‡
WITH_UNIX_SOCKETS


525  
	`√t__åy_c⁄√˘_unix
(
ho°
, 
sock
);

527  
MOSQ_ERR_NOT_SUPPORTED
;

530  
	`√t__åy_c⁄√˘_t˝
(
ho°
, 
p‹t
, 
sock
, 
böd_addªss
, 
blockög
);

532 
	}
}

535 #ifde‡
WITH_TLS


536 
	$√t__¥öt_s¶_îr‹
(
mosquôto
 *
mosq
)

538 
ebuf
[256];

539 
e
;

540 
num
 = 0;

542 
e
 = 
	`ERR_gë_îr‹
();

543 
e
){

544 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "O≥nSSL Eº‹[%d]: %s", 
num
, 
	`ERR_îr‹_°rög
(
e
, 
ebuf
));

545 
e
 = 
	`ERR_gë_îr‹
();

546 
num
++;

548 
	}
}

551 
	$√t__sockë_c⁄√˘_és
(
mosquôto
 *
mosq
)

553 
ªt
, 
îr
;

554 
ªs
;

556 
	`ERR_˛ór_îr‹
();

557 i‡(
mosq
->
és_oc•_ªquúed
) {

559 i‡((
ªs
=
	`SSL_£t_é£xt_°©us_ty≥
(
mosq
->
s¶
, 
TLSEXT_STATUSTYPE_oc•
)) != 1) {

560 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "CouldÇŸá˘iv©êOCSP (îr‹: %ld)", 
ªs
);

561  
MOSQ_ERR_OCSP
;

563 i‡((
ªs
=
	`SSL_CTX_£t_é£xt_°©us_cb
(
mosq
->
s¶_˘x
, 
mosquôto__vîify_oc•_°©us_cb
)) != 1) {

564 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "CouldÇŸá˘iv©êOCSP (îr‹: %ld)", 
ªs
);

565  
MOSQ_ERR_OCSP
;

567 i‡((
ªs
=
	`SSL_CTX_£t_é£xt_°©us_¨g
(
mosq
->
s¶_˘x
, mosq)) != 1) {

568 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "CouldÇŸá˘iv©êOCSP (îr‹: %ld)", 
ªs
);

569  
MOSQ_ERR_OCSP
;

572 
	`SSL_£t_c⁄√˘_°©e
(
mosq
->
s¶
);

573  
MOSQ_ERR_SUCCESS
;

574 
	}
}

578 #ifde‡
WITH_TLS


579 
	$√t__és_lﬂd_ˇ
(
mosquôto
 *
mosq
)

581 
ªt
;

583 if(
mosq
->
és_u£_os_˚πs
){

584 
	`SSL_CTX_£t_deÁu…_vîify_∑ths
(
mosq
->
s¶_˘x
);

586 #i‡
OPENSSL_VERSION_NUMBER
 < 0x30000000L

587 if(
mosq
->
és_ˇfûe
 || mosq->
és_ˇ∑th
){

588 
ªt
 = 
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
mosq
->
s¶_˘x
, mosq->
és_ˇfûe
, mosq->
és_ˇ∑th
);

589 if(
ªt
 == 0){

590 #ifde‡
WITH_BROKER


591 if(
mosq
->
és_ˇfûe
 && mosq->
és_ˇ∑th
){

592 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd CA cîtifiˇãs, check bridge_ˇfûê\"%s\"ánd bridge_ˇ∑th \"%s\".", mosq->
és_ˇfûe
, mosq->
és_ˇ∑th
);

593 }if(
mosq
->
és_ˇfûe
){

594 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd CA cîtifiˇãs, check bridge_ˇfûê\"%s\".", mosq->
és_ˇfûe
);

596 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd CA cîtifiˇãs, check bridge_ˇ∑th \"%s\".", mosq->
és_ˇ∑th
);

599 if(
mosq
->
és_ˇfûe
 && mosq->
és_ˇ∑th
){

600 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd CA cîtifiˇãs, check cafûê\"%s\"ánd c≠©h \"%s\".", mosq->
és_ˇfûe
, mosq->
és_ˇ∑th
);

601 }if(
mosq
->
és_ˇfûe
){

602 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd CA cîtifiˇãs, check cafûê\"%s\".", mosq->
és_ˇfûe
);

604 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd CA cîtifiˇãs, check c≠©h \"%s\".", mosq->
és_ˇ∑th
);

607  
MOSQ_ERR_TLS
;

611 if(
mosq
->
és_ˇfûe
){

612 
ªt
 = 
	`SSL_CTX_lﬂd_vîify_fûe
(
mosq
->
s¶_˘x
, mosq->
és_ˇfûe
);

613 if(
ªt
 == 0){

614 #ifde‡
WITH_BROKER


615 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd CA cîtifiˇãs, check bridge_ˇfûê\"%s\".", mosq->
és_ˇfûe
);

617 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd CA cîtifiˇãs, check cafûê\"%s\".", mosq->
és_ˇfûe
);

619  
MOSQ_ERR_TLS
;

622 if(
mosq
->
és_ˇ∑th
){

623 
ªt
 = 
	`SSL_CTX_lﬂd_vîify_dú
(
mosq
->
s¶_˘x
, mosq->
és_ˇ∑th
);

624 if(
ªt
 == 0){

625 #ifde‡
WITH_BROKER


626 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd CA cîtifiˇãs, check bridge_ˇ∑th \"%s\".", mosq->
és_ˇ∑th
);

628 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd CA cîtifiˇãs, check c≠©h \"%s\".", mosq->
és_ˇ∑th
);

630  
MOSQ_ERR_TLS
;

634  
MOSQ_ERR_SUCCESS
;

635 
	}
}

638 
	$√t__öô_s¶_˘x
(
mosquôto
 *
mosq
)

640 
ªt
;

641 
ENGINE
 *
ígöe
 = 
NULL
;

642 
uöt8_t
 
és_Æ≤_wúe
[256];

643 
uöt8_t
 
és_Æ≤_Àn
;

644 #i‡!
	`deföed
(
OPENSSL_NO_ENGINE
)

645 
EVP_PKEY
 *
pkey
;

648 #i‚de‡
WITH_BROKER


649 if(
mosq
->
u£r_s¶_˘x
){

650 
mosq
->
s¶_˘x
 = mosq->
u£r_s¶_˘x
;

651 if(!
mosq
->
s¶_˘x_deÁu…s
){

652  
MOSQ_ERR_SUCCESS
;

653 }if(!
mosq
->
és_ˇfûe
 && !mosq->
és_ˇ∑th
 && !mosq->
és_psk
){

654 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Error: If you use MOSQ_OPT_SSL_CTXÅhen MOSQ_OPT_SSL_CTX_WITH_DEFAULTS must beÅrue, orátÜeast one of cafile, capath orÖsk must be specified.");

655  
MOSQ_ERR_INVAL
;

663 if(
mosq
->
és_ˇfûe
 || mosq->
és_ˇ∑th
 || mosq->
és_psk
 || mosq->
és_u£_os_˚πs
){

664 
	`√t__öô_és
();

665 if(!
mosq
->
s¶_˘x
){

667 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

668 
mosq
->
s¶_˘x
 = 
	`SSL_CTX_√w
(
	`SSLv23_˛õ¡_mëhod
());

670 
mosq
->
s¶_˘x
 = 
	`SSL_CTX_√w
(
	`TLS_˛õ¡_mëhod
());

673 if(!
mosq
->
s¶_˘x
){

674 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Error: UnableÅo create TLS context.");

675 
	`√t__¥öt_s¶_îr‹
(
mosq
);

676  
MOSQ_ERR_TLS
;

680 #ifde‡
SSL_OP_NO_TLSv1_3


681 if(
mosq
->
és_psk
){

682 
	`SSL_CTX_£t_›ti⁄s
(
mosq
->
s¶_˘x
, 
SSL_OP_NO_TLSv1_3
);

686 if(!
mosq
->
és_vîsi⁄
){

687 
	`SSL_CTX_£t_›ti⁄s
(
mosq
->
s¶_˘x
, 
SSL_OP_NO_SSLv3
 | 
SSL_OP_NO_TLSv1
);

688 #ifde‡
SSL_OP_NO_TLSv1_3


689 }if(!
	`°rcmp
(
mosq
->
és_vîsi⁄
, "tlsv1.3")){

690 
	`SSL_CTX_£t_›ti⁄s
(
mosq
->
s¶_˘x
, 
SSL_OP_NO_SSLv3
 | 
SSL_OP_NO_TLSv1
 | 
SSL_OP_NO_TLSv1_1
 | 
SSL_OP_NO_TLSv1_2
);

692 }if(!
	`°rcmp
(
mosq
->
és_vîsi⁄
, "tlsv1.2")){

693 
	`SSL_CTX_£t_›ti⁄s
(
mosq
->
s¶_˘x
, 
SSL_OP_NO_SSLv3
 | 
SSL_OP_NO_TLSv1
 | 
SSL_OP_NO_TLSv1_1
);

694 }if(!
	`°rcmp
(
mosq
->
és_vîsi⁄
, "tlsv1.1")){

695 
	`SSL_CTX_£t_›ti⁄s
(
mosq
->
s¶_˘x
, 
SSL_OP_NO_SSLv3
 | 
SSL_OP_NO_TLSv1
);

697 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: PrŸocﬁ %†nŸ suµ‹ãd.", mosq->
és_vîsi⁄
);

698  
MOSQ_ERR_INVAL
;

701 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10100000L

703 
	`SSL_CTX_£t_dh_auto
(
mosq
->
s¶_˘x
, 1);

706 
	`SSL_CTX_£t_›ti⁄s
(
mosq
->
s¶_˘x
, 
SSL_OP_NO_COMPRESSION
);

709 if(
mosq
->
és_Æ≤
) {

710 
és_Æ≤_Àn
 = (
uöt8_t
Ë
	`°∫Àn
(
mosq
->
és_Æ≤
, 254);

711 
és_Æ≤_wúe
[0] = 
és_Æ≤_Àn
;

712 
	`mem˝y
(
és_Æ≤_wúe
 + 1, 
mosq
->
és_Æ≤
, 
és_Æ≤_Àn
);

713 
	`SSL_CTX_£t_Æ≤_¥Ÿos
(
mosq
->
s¶_˘x
, 
és_Æ≤_wúe
, 
és_Æ≤_Àn
 + 1U);

716 #ifde‡
SSL_MODE_RELEASE_BUFFERS


718 
	`SSL_CTX_£t_mode
(
mosq
->
s¶_˘x
, 
SSL_MODE_RELEASE_BUFFERS
);

721 #i‡!
	`deföed
(
OPENSSL_NO_ENGINE
)

722 if(
mosq
->
és_ígöe
){

723 
ígöe
 = 
	`ENGINE_by_id
(
mosq
->
és_ígöe
);

724 if(!
ígöe
){

725 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹Üﬂdög %†ígöe\n", mosq->
és_ígöe
);

726  
MOSQ_ERR_TLS
;

728 if(!
	`ENGINE_öô
(
ígöe
)){

729 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "FailedÉngine initialisation\n");

730 
	`ENGINE_‰ì
(
ígöe
);

731  
MOSQ_ERR_TLS
;

733 
	`ENGINE_£t_deÁu…
(
ígöe
, 
ENGINE_METHOD_ALL
);

734 
	`ENGINE_‰ì
(
ígöe
);

738 if(
mosq
->
és_cùhîs
){

739 
ªt
 = 
	`SSL_CTX_£t_cùhî_li°
(
mosq
->
s¶_˘x
, mosq->
és_cùhîs
);

740 if(
ªt
 == 0){

741 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿ£àTLS cùhîs. Check cùhîÜi° \"%s\".", mosq->
és_cùhîs
);

742 #i‡!
	`deföed
(
OPENSSL_NO_ENGINE
)

743 
	`ENGINE_FINISH
(
ígöe
);

745 
	`√t__¥öt_s¶_îr‹
(
mosq
);

746  
MOSQ_ERR_TLS
;

749 if(
mosq
->
és_ˇfûe
 || mosq->
és_ˇ∑th
 || mosq->
és_u£_os_˚πs
){

750 
ªt
 = 
	`√t__és_lﬂd_ˇ
(
mosq
);

751 if(
ªt
 !
MOSQ_ERR_SUCCESS
){

752 #i‡!
	`deföed
(
OPENSSL_NO_ENGINE
)

753 
	`ENGINE_FINISH
(
ígöe
);

755 
	`√t__¥öt_s¶_îr‹
(
mosq
);

756  
MOSQ_ERR_TLS
;

758 if(
mosq
->
és_˚π_ªqs
 == 0){

759 
	`SSL_CTX_£t_vîify
(
mosq
->
s¶_˘x
, 
SSL_VERIFY_NONE
, 
NULL
);

761 
	`SSL_CTX_£t_vîify
(
mosq
->
s¶_˘x
, 
SSL_VERIFY_PEER
, 
mosquôto__£rvî_˚πifiˇã_vîify
);

764 if(
mosq
->
és_pw_ˇŒback
){

765 
	`SSL_CTX_£t_deÁu…_∑sswd_cb
(
mosq
->
s¶_˘x
, mosq->
és_pw_ˇŒback
);

766 
	`SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
mosq
->
s¶_˘x
, mosq);

769 if(
mosq
->
és_˚πfûe
){

770 
ªt
 = 
	`SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
mosq
->
s¶_˘x
, mosq->
és_˚πfûe
);

771 if(
ªt
 != 1){

772 #ifde‡
WITH_BROKER


773 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd clõ¡ cîtifiˇã, check bridge_˚πfûê\"%s\".", mosq->
és_˚πfûe
);

775 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd clõ¡ cîtifiˇã \"%s\".", mosq->
és_˚πfûe
);

777 #i‡!
	`deföed
(
OPENSSL_NO_ENGINE
)

778 
	`ENGINE_FINISH
(
ígöe
);

780 
	`√t__¥öt_s¶_îr‹
(
mosq
);

781  
MOSQ_ERR_TLS
;

784 if(
mosq
->
és_keyfûe
){

785 if(
mosq
->
és_keyf‹m
 =
mosq_k_ígöe
){

786 #i‡!
	`deföed
(
OPENSSL_NO_ENGINE
)

787 
UI_METHOD
 *
ui_mëhod
 = 
	`√t__gë_ui_mëhod
();

788 if(
mosq
->
és_ígöe_k∑ss_sha1
){

789 if(!
	`ENGINE_˘æ_cmd
(
ígöe
, 
ENGINE_SECRET_MODE
, 
ENGINE_SECRET_MODE_SHA
, 
NULL
, NULL, 0)){

790 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Error: UnableÅo setÉngine secret mode sha1");

791 
	`ENGINE_FINISH
(
ígöe
);

792 
	`√t__¥öt_s¶_îr‹
(
mosq
);

793  
MOSQ_ERR_TLS
;

795 if(!
	`ENGINE_˘æ_cmd
(
ígöe
, 
ENGINE_PIN
, 0, 
mosq
->
és_ígöe_k∑ss_sha1
, 
NULL
, 0)){

796 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Error: UnableÅo setÉngineÖin");

797 
	`ENGINE_FINISH
(
ígöe
);

798 
	`√t__¥öt_s¶_îr‹
(
mosq
);

799  
MOSQ_ERR_TLS
;

801 
ui_mëhod
 = 
NULL
;

803 
pkey
 = 
	`ENGINE_lﬂd_¥iv©e_key
(
ígöe
, 
mosq
->
és_keyfûe
, 
ui_mëhod
, 
NULL
);

804 if(!
pkey
){

805 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂdÉngöê¥iv©êkey fûê\"%s\".", mosq->
és_keyfûe
);

806 
	`ENGINE_FINISH
(
ígöe
);

807 
	`√t__¥öt_s¶_îr‹
(
mosq
);

808  
MOSQ_ERR_TLS
;

810 if(
	`SSL_CTX_u£_Priv©eKey
(
mosq
->
s¶_˘x
, 
pkey
) <= 0){

811 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿu£Éngöê¥iv©êkey fûê\"%s\".", mosq->
és_keyfûe
);

812 
	`ENGINE_FINISH
(
ígöe
);

813 
	`√t__¥öt_s¶_îr‹
(
mosq
);

814  
MOSQ_ERR_TLS
;

818 
ªt
 = 
	`SSL_CTX_u£_Priv©eKey_fûe
(
mosq
->
s¶_˘x
, mosq->
és_keyfûe
, 
SSL_FILETYPE_PEM
);

819 if(
ªt
 != 1){

820 #ifde‡
WITH_BROKER


821 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd clõ¡ key fûe, check bridge_keyfûê\"%s\".", mosq->
és_keyfûe
);

823 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd clõ¡ key fûê\"%s\".", mosq->
és_keyfûe
);

825 #i‡!
	`deföed
(
OPENSSL_NO_ENGINE
)

826 
	`ENGINE_FINISH
(
ígöe
);

828 
	`√t__¥öt_s¶_îr‹
(
mosq
);

829  
MOSQ_ERR_TLS
;

832 
ªt
 = 
	`SSL_CTX_check_¥iv©e_key
(
mosq
->
s¶_˘x
);

833 if(
ªt
 != 1){

834 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Error: Client certificate/keyáre inconsistent.");

835 #i‡!
	`deföed
(
OPENSSL_NO_ENGINE
)

836 
	`ENGINE_FINISH
(
ígöe
);

838 
	`√t__¥öt_s¶_îr‹
(
mosq
);

839  
MOSQ_ERR_TLS
;

842 #ifde‡
FINAL_WITH_TLS_PSK


843 }if(
mosq
->
és_psk
){

844 
	`SSL_CTX_£t_psk_˛õ¡_ˇŒback
(
mosq
->
s¶_˘x
, 
psk_˛õ¡_ˇŒback
);

845 if(
mosq
->
és_cùhîs
 =
NULL
){

846 
	`SSL_CTX_£t_cùhî_li°
(
mosq
->
s¶_˘x
, "PSK");

852  
MOSQ_ERR_SUCCESS
;

853 
	}
}

857 
	$√t__sockë_c⁄√˘_°ï3
(
mosquôto
 *
mosq
, c⁄° *
ho°
)

859 #ifde‡
WITH_TLS


860 
BIO
 *
bio
;

862 
rc
 = 
	`√t__öô_s¶_˘x
(
mosq
);

863 if(
rc
){

864 
	`√t__sockë_˛o£
(
mosq
);

865  
rc
;

868 if(
mosq
->
s¶_˘x
){

869 if(
mosq
->
s¶
){

870 
	`SSL_‰ì
(
mosq
->
s¶
);

872 
mosq
->
s¶
 = 
	`SSL_√w
(mosq->
s¶_˘x
);

873 if(!
mosq
->
s¶
){

874 
	`√t__sockë_˛o£
(
mosq
);

875 
	`√t__¥öt_s¶_îr‹
(
mosq
);

876  
MOSQ_ERR_TLS
;

879 
	`SSL_£t_ex_d©a
(
mosq
->
s¶
, 
és_ex_ödex_mosq
, mosq);

880 
bio
 = 
	`BIO_√w_sockë
(
mosq
->
sock
, 
BIO_NOCLOSE
);

881 if(!
bio
){

882 
	`√t__sockë_˛o£
(
mosq
);

883 
	`√t__¥öt_s¶_îr‹
(
mosq
);

884  
MOSQ_ERR_TLS
;

886 
	`SSL_£t_bio
(
mosq
->
s¶
, 
bio
, bio);

891 if(
	`SSL_£t_é£xt_ho°_«me
(
mosq
->
s¶
, 
ho°
) != 1) {

892 
	`√t__sockë_˛o£
(
mosq
);

893  
MOSQ_ERR_TLS
;

896 if(
	`√t__sockë_c⁄√˘_és
(
mosq
)){

897 
	`√t__sockë_˛o£
(
mosq
);

898  
MOSQ_ERR_TLS
;

903 
	`UNUSED
(
mosq
);

904 
	`UNUSED
(
ho°
);

906  
MOSQ_ERR_SUCCESS
;

907 
	}
}

910 
	$√t__sockë_c⁄√˘
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
uöt16_t
 
p‹t
, c⁄° *
böd_addªss
, 
boﬁ
 
blockög
)

912 
rc
, 
rc2
;

914 if(!
mosq
 || !
ho°
Ë 
MOSQ_ERR_INVAL
;

916 
rc
 = 
	`√t__åy_c⁄√˘
(
ho°
, 
p‹t
, &
mosq
->
sock
, 
böd_addªss
, 
blockög
);

917 if(
rc
 > 0) Ñc;

919 if(
mosq
->
t˝_nodñay
){

920 
Êag
 = 1;

921 if(
	`£tsock›t
(
mosq
->
sock
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (c⁄° *)&
Êag
, ()) != 0){

922 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_WARNING
, "Warning: UnableÅo set TCP_NODELAY.");

926 #i‡
	`deföed
(
WITH_SOCKS
Ë&& !deföed(
WITH_BROKER
)

927 if(!
mosq
->
socks5_ho°
)

930 
rc2
 = 
	`√t__sockë_c⁄√˘_°ï3
(
mosq
, 
ho°
);

931 if(
rc2
) Ñc2;

934  
rc
;

935 
	}
}

938 #ifde‡
WITH_TLS


939 
	$√t__h™dÀ_s¶
(
mosquôto
* 
mosq
, 
ªt
)

941 
îr
;

943 
îr
 = 
	`SSL_gë_îr‹
(
mosq
->
s¶
, 
ªt
);

944 i‡(
îr
 =
SSL_ERROR_WANT_READ
) {

945 
ªt
 = -1;

946 
î∫o
 = 
EAGAIN
;

948 i‡(
îr
 =
SSL_ERROR_WANT_WRITE
) {

949 
ªt
 = -1;

950 #ifde‡
WITH_BROKER


951 
	`mux__add_out
(
mosq
);

953 
mosq
->
w™t_wrôe
 = 
åue
;

955 
î∫o
 = 
EAGAIN
;

958 
	`√t__¥öt_s¶_îr‹
(
mosq
);

959 
î∫o
 = 
EPROTO
;

961 
	`ERR_˛ór_îr‹
();

962 #ifde‡
WIN32


963 
	`WSASëLa°Eº‹
(
î∫o
);

966  
ªt
;

967 
	}
}

970 
ssize_t
 
	$√t__ªad
(
mosquôto
 *
mosq
, *
buf
, 
size_t
 
cou¡
)

972 #ifde‡
WITH_TLS


973 
ªt
;

975 
	`as£π
(
mosq
);

976 
î∫o
 = 0;

977 #ifde‡
WITH_TLS


978 if(
mosq
->
s¶
){

979 
ªt
 = 
	`SSL_ªad
(
mosq
->
s¶
, 
buf
, ()
cou¡
);

980 if(
ªt
 <= 0){

981 
ªt
 = 
	`√t__h™dÀ_s¶
(
mosq
,Ñet);

983  (
ssize_t
 )
ªt
;

989 #i‚de‡
WIN32


990  
	`ªad
(
mosq
->
sock
, 
buf
, 
cou¡
);

992  
	`ªcv
(
mosq
->
sock
, 
buf
, 
cou¡
, 0);

995 #ifde‡
WITH_TLS


998 
	}
}

1000 
ssize_t
 
	$√t__wrôe
(
mosquôto
 *
mosq
, c⁄° *
buf
, 
size_t
 
cou¡
)

1002 #ifde‡
WITH_TLS


1003 
ªt
;

1005 
	`as£π
(
mosq
);

1007 
î∫o
 = 0;

1008 #ifde‡
WITH_TLS


1009 if(
mosq
->
s¶
){

1010 
mosq
->
w™t_wrôe
 = 
Ál£
;

1011 
ªt
 = 
	`SSL_wrôe
(
mosq
->
s¶
, 
buf
, ()
cou¡
);

1012 if(
ªt
 < 0){

1013 
ªt
 = 
	`√t__h™dÀ_s¶
(
mosq
,Ñet);

1015  (
ssize_t
 )
ªt
;

1020  
	`£nd
(
mosq
->
sock
, 
buf
, 
cou¡
, 
MSG_NOSIGNAL
);

1022 #ifde‡
WITH_TLS


1025 
	}
}

1028 
	$√t__sockë_n⁄block
(
mosq_sock_t
 *
sock
)

1030 #i‚de‡
WIN32


1031 
›t
;

1033 
›t
 = 
	`f˙é
(*
sock
, 
F_GETFL
, 0);

1034 if(
›t
 == -1){

1035 
	`COMPAT_CLOSE
(*
sock
);

1036 *
sock
 = 
INVALID_SOCKET
;

1037  
MOSQ_ERR_ERRNO
;

1039 if(
	`f˙é
(*
sock
, 
F_SETFL
, 
›t
 | 
O_NONBLOCK
) == -1){

1041 
	`COMPAT_CLOSE
(*
sock
);

1042 *
sock
 = 
INVALID_SOCKET
;

1043  
MOSQ_ERR_ERRNO
;

1046 
›t
 = 1;

1047 if(
	`io˘lsockë
(*
sock
, 
FIONBIO
, &
›t
)){

1048 
	`COMPAT_CLOSE
(*
sock
);

1049 *
sock
 = 
INVALID_SOCKET
;

1050  
MOSQ_ERR_ERRNO
;

1053  
MOSQ_ERR_SUCCESS
;

1054 
	}
}

1057 #i‚de‡
WITH_BROKER


1058 
	$√t__sockë∑ú
(
mosq_sock_t
 *
∑úR
, mosq_sock_à*
∑úW
)

1060 #ifde‡
WIN32


1061 
Ámûy
[2] = {
AF_INET
, 
AF_INET6
};

1062 
i
;

1063 
sockaddr_°‹age
 
ss
;

1064 
sockaddr_ö
 *
ß
 = (sockaddr_ö *)&
ss
;

1065 
sockaddr_ö6
 *
ß6
 = (sockaddr_ö6 *)&
ss
;

1066 
sockÀn_t
 
ss_Àn
;

1067 
mosq_sock_t
 
•R
, 
•W
;

1069 
mosq_sock_t
 
li°ísock
;

1071 *
∑úR
 = 
INVALID_SOCKET
;

1072 *
∑úW
 = 
INVALID_SOCKET
;

1074 
i
=0; i<2; i++){

1075 
	`mem£t
(&
ss
, 0, (ss));

1076 if(
Ámûy
[
i
] =
AF_INET
){

1077 
ß
->
sö_Ámûy
 = 
Ámûy
[
i
];

1078 
ß
->
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

1079 
ß
->
sö_p‹t
 = 0;

1080 
ss_Àn
 = (
sockaddr_ö
);

1081 }if(
Ámûy
[
i
] =
AF_INET6
){

1082 
ß6
->
sö6_Ámûy
 = 
Ámûy
[
i
];

1083 
ß6
->
sö6_addr
 = 
ö6addr_lo›back
;

1084 
ß6
->
sö6_p‹t
 = 0;

1085 
ss_Àn
 = (
sockaddr_ö6
);

1087  
MOSQ_ERR_INVAL
;

1090 
li°ísock
 = 
	`sockë
(
Ámûy
[
i
], 
SOCK_STREAM
, 
IPPROTO_TCP
);

1091 if(
li°ísock
 == -1){

1095 if(
	`böd
(
li°ísock
, (
sockaddr
 *)&
ss
, 
ss_Àn
) == -1){

1096 
	`COMPAT_CLOSE
(
li°ísock
);

1100 if(
	`li°í
(
li°ísock
, 1) == -1){

1101 
	`COMPAT_CLOSE
(
li°ísock
);

1104 
	`mem£t
(&
ss
, 0, (ss));

1105 
ss_Àn
 = (
ss
);

1106 if(
	`gësock«me
(
li°ísock
, (
sockaddr
 *)&
ss
, &
ss_Àn
) < 0){

1107 
	`COMPAT_CLOSE
(
li°ísock
);

1111 if(
Ámûy
[
i
] =
AF_INET
){

1112 
ß
->
sö_Ámûy
 = 
Ámûy
[
i
];

1113 
ß
->
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

1114 
ss_Àn
 = (
sockaddr_ö
);

1115 }if(
Ámûy
[
i
] =
AF_INET6
){

1116 
ß6
->
sö6_Ámûy
 = 
Ámûy
[
i
];

1117 
ß6
->
sö6_addr
 = 
ö6addr_lo›back
;

1118 
ss_Àn
 = (
sockaddr_ö6
);

1121 
•R
 = 
	`sockë
(
Ámûy
[
i
], 
SOCK_STREAM
, 
IPPROTO_TCP
);

1122 if(
•R
 == -1){

1123 
	`COMPAT_CLOSE
(
li°ísock
);

1126 if(
	`√t__sockë_n⁄block
(&
•R
)){

1127 
	`COMPAT_CLOSE
(
li°ísock
);

1130 if(
	`c⁄√˘
(
•R
, (
sockaddr
 *)&
ss
, 
ss_Àn
) < 0){

1131 #ifde‡
WIN32


1132 
î∫o
 = 
	`WSAGëLa°Eº‹
();

1134 if(
î∫o
 !
EINPROGRESS
 &&Éºnÿ!
COMPAT_EWOULDBLOCK
){

1135 
	`COMPAT_CLOSE
(
•R
);

1136 
	`COMPAT_CLOSE
(
li°ísock
);

1140 
•W
 = 
	`ac˚±
(
li°ísock
, 
NULL
, 0);

1141 if(
•W
 == -1){

1142 #ifde‡
WIN32


1143 
î∫o
 = 
	`WSAGëLa°Eº‹
();

1145 if(
î∫o
 !
EINPROGRESS
 &&Éºnÿ!
COMPAT_EWOULDBLOCK
){

1146 
	`COMPAT_CLOSE
(
•R
);

1147 
	`COMPAT_CLOSE
(
li°ísock
);

1152 if(
	`√t__sockë_n⁄block
(&
•W
)){

1153 
	`COMPAT_CLOSE
(
•R
);

1154 
	`COMPAT_CLOSE
(
li°ísock
);

1157 
	`COMPAT_CLOSE
(
li°ísock
);

1159 *
∑úR
 = 
•R
;

1160 *
∑úW
 = 
•W
;

1161  
MOSQ_ERR_SUCCESS
;

1163  
MOSQ_ERR_UNKNOWN
;

1165 
sv
[2];

1167 *
∑úR
 = 
INVALID_SOCKET
;

1168 *
∑úW
 = 
INVALID_SOCKET
;

1170 if(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
sv
) == -1){

1171  
MOSQ_ERR_ERRNO
;

1173 if(
	`√t__sockë_n⁄block
(&
sv
[0])){

1174 
	`COMPAT_CLOSE
(
sv
[1]);

1175  
MOSQ_ERR_ERRNO
;

1177 if(
	`√t__sockë_n⁄block
(&
sv
[1])){

1178 
	`COMPAT_CLOSE
(
sv
[0]);

1179  
MOSQ_ERR_ERRNO
;

1181 *
∑úR
 = 
sv
[0];

1182 *
∑úW
 = 
sv
[1];

1183  
MOSQ_ERR_SUCCESS
;

1185 
	}
}

1188 #i‚de‡
WITH_BROKER


1189 *
	$mosquôto_s¶_gë
(
mosquôto
 *
mosq
)

1191 #ifde‡
WITH_TLS


1192  
mosq
->
s¶
;

1194 
	`UNUSED
(
mosq
);

1196  
NULL
;

1198 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/net_mosq.h

18 #i‚de‡
NET_MOSQ_H


19 
	#NET_MOSQ_H


	)

21 #i‚de‡
WIN32


22 
	~<sys/sockë.h
>

23 
	~<uni°d.h
>

25 
	~<wösock2.h
>

26 #i‚de‡
_SSIZE_T_DEFINED


27 
SSIZE_T
 
	tssize_t
;

28 
	#_SSIZE_T_DEFINED


	)

32 
	~"mosquôto_öã∫Æ.h
"

33 
	~"mosquôto.h
"

35 #ifde‡
WIN32


36 
	#COMPAT_CLOSE
(
a
Ë
	`˛o£sockë
◊)

	)

37 
	#COMPAT_ECONNRESET
 
WSAECONNRESET


	)

38 
	#COMPAT_EINTR
 
WSAEINTR


	)

39 
	#COMPAT_EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

40 #i‚de‡
EINPROGRESS


41 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

44 
	#COMPAT_CLOSE
(
a
Ë
	`˛o£
◊)

	)

45 
	#COMPAT_ECONNRESET
 
ECONNRESET


	)

46 
	#COMPAT_EINTR
 
EINTR


	)

47 
	#COMPAT_EWOULDBLOCK
 
EWOULDBLOCK


	)

51 #i‚de‡
INVALID_SOCKET


52 
	#INVALID_SOCKET
 -1

	)

55 #i‚de‡
MSG_NOSIGNAL


56 
	#MSG_NOSIGNAL
 0

	)

60 
	#MOSQ_MSB
(
A
Ë(
uöt8_t
)((A & 0xFF00Ë>> 8)

	)

61 
	#MOSQ_LSB
(
A
Ë(
uöt8_t
)(A & 0x00FF)

	)

63 
√t__öô
();

64 
√t__˛ónup
();

66 #ifde‡
WITH_TLS


67 
√t__öô_és
();

70 
√t__sockë_c⁄√˘
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
uöt16_t
 
p‹t
, c⁄° *
böd_addªss
, 
boﬁ
 
blockög
);

71 
√t__sockë_˛o£
(
mosquôto
 *
mosq
);

72 
√t__åy_c⁄√˘
(c⁄° *
ho°
, 
uöt16_t
 
p‹t
, 
mosq_sock_t
 *
sock
, c⁄° *
böd_addªss
, 
boﬁ
 
blockög
);

73 
√t__åy_c⁄√˘_°ï1
(
mosquôto
 *
mosq
, c⁄° *
ho°
);

74 
√t__åy_c⁄√˘_°ï2
(
mosquôto
 *
mosq
, 
uöt16_t
 
p‹t
, 
mosq_sock_t
 *
sock
);

75 
√t__sockë_c⁄√˘_°ï3
(
mosquôto
 *
mosq
, c⁄° *
ho°
);

76 
√t__sockë_n⁄block
(
mosq_sock_t
 *
sock
);

77 
√t__sockë∑ú
(
mosq_sock_t
 *
•1
, mosq_sock_à*
•2
);

79 
ssize_t
 
√t__ªad
(
mosquôto
 *
mosq
, *
buf
, 
size_t
 
cou¡
);

80 
ssize_t
 
√t__wrôe
(
mosquôto
 *
mosq
, c⁄° *
buf
, 
size_t
 
cou¡
);

82 #ifde‡
WITH_TLS


83 
√t__¥öt_s¶_îr‹
(
mosquôto
 *
mosq
);

84 
√t__sockë_≠∂y_és
(
mosquôto
 *
mosq
);

85 
√t__sockë_c⁄√˘_és
(
mosquôto
 *
mosq
);

86 
mosquôto__vîify_oc•_°©us_cb
(
SSL
 * 
s¶
, *
¨g
);

87 
UI_METHOD
 *
√t__gë_ui_mëhod
();

88 
	#ENGINE_FINISH
(
e
Ëif”Ë
	`ENGINE_föish
”)

	)

89 
	#ENGINE_SECRET_MODE
 "SECRET_MODE"

	)

90 
	#ENGINE_SECRET_MODE_SHA
 0x1000

	)

91 
	#ENGINE_PIN
 "PIN"

	)

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/net_mosq_ocsp.c

45 
	~"c⁄fig.h
"

47 #ifde‡
WITH_TLS


48 
	~<loggög_mosq.h
>

49 
	~<mosquôto_öã∫Æ.h
>

50 
	~<√t_mosq.h
>

52 
	~<›ís¶/ß„°ack.h
>

53 
	~<›ís¶/és1.h
>

54 
	~<›ís¶/s¶.h
>

55 
	~<›ís¶/oc•.h
>

57 
	$mosquôto__vîify_oc•_°©us_cb
(
SSL
 * 
s¶
, *
¨g
)

59 
mosquôto
 *
mosq
 = (mosquôtÿ*)
¨g
;

60 
oc•_°©us
, 
ªsu…2
, 
i
;

61 *
p
;

62 c⁄° *
˝
;

63 
OCSP_RESPONSE
 *
r•
 = 
NULL
;

64 
OCSP_BASICRESP
 *
br
 = 
NULL
;

65 
X509_STORE
 *
°
 = 
NULL
;

66 
	`STACK_OF
(
X509
Ë*
ch
 = 
NULL
;

67 
Àn
;

69 
	`UNUSED
(
s¶
);

71 
Àn
 = 
	`SSL_gë_é£xt_°©us_oc•_ª•
(
mosq
->
s¶
, &
p
);

72 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "OCSP: SSL_gë_é£xt_°©us_oc•_ª•Ñëu∫ed %ld byãs", 
Àn
);

75 
˝
 = (c⁄° *)
p
;

77 i‡(!
˝
 || 
Àn
 <= 0) {

78 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "OCSP:ÇoÑesponse");

79 
íd
;

83 
r•
 = 
	`d2i_OCSP_RESPONSE
(
NULL
, &
˝
, 
Àn
);

84 i‡(
r•
==
NULL
) {

85 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "OCSP: invalidÑesponse");

86 
íd
;

89 
oc•_°©us
 = 
	`OCSP_ª•⁄£_°©us
(
r•
);

90 if(
oc•_°©us
 !
OCSP_RESPONSE_STATUS_SUCCESSFUL
) {

91 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "OCSP: invalid status: %s (%d)",

92 
	`OCSP_ª•⁄£_°©us_°r
(
oc•_°©us
), ocsp_status);

93 
íd
;

96 
br
 = 
	`OCSP_ª•⁄£_gë1_basic
(
r•
);

97 i‡(!
br
) {

98 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "OCSP: invalidÑesponse");

99 
íd
;

102 
ch
 = 
	`SSL_gë_≥î_˚π_chaö
(
mosq
->
s¶
);

103 i‡(
	`sk_X509_num
(
ch
) <= 0) {

104 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "OCSP: wêdidÇŸÑe˚ivê˚πifiˇã†o‡thê£rvî (num: %d)", 
	`sk_X509_num
(
ch
));

105 
íd
;

108 
°
 = 
	`SSL_CTX_gë_˚π_°‹e
(
mosq
->
s¶_˘x
);

115 i‡((
ªsu…2
=
	`OCSP_basic_vîify
(
br
, 
ch
, 
°
, 0)) <= 0) {

116 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "OCSP:Ñe•⁄£ vîifiˇti⁄ faûed (îr‹: %d)", 
ªsu…2
);

117 
íd
;

120 
i
 = 0; i < 
	`OCSP_ª•_cou¡
(
br
); i++) {

121 
˚π_°©us
, 
¸l_ªas⁄
;

122 
OCSP_SINGLERESP
 *
sögÀ
 = 
NULL
;

124 
ASN1_GENERALIZEDTIME
 *
ªv
, *
thisupd
, *
√xtupd
;

126 
sögÀ
 = 
	`OCSP_ª•_gë0
(
br
, 
i
);

127 if(!
sögÀ
)

130 
˚π_°©us
 = 
	`OCSP_sögÀ_gë0_°©us
(
sögÀ
, &
¸l_ªas⁄
, &
ªv
, &
thisupd
, &
√xtupd
);

132 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "OCSP: SSL certificate status: %s (%d)",

133 
	`OCSP_˚π_°©us_°r
(
˚π_°©us
), cert_status);

135 
˚π_°©us
) {

136 
V_OCSP_CERTSTATUS_GOOD
:

138 if(!
	`OCSP_check_vÆidôy
(
thisupd
, 
√xtupd
, 300L, -1L)) {

139 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "OCSP: OCSPÑesponse hasÉxpired");

140 
íd
;

144 
V_OCSP_CERTSTATUS_REVOKED
:

145 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "OCSP: SSL certificateÑevocationÑeason: %s (%d)",

146 
	`OCSP_¸l_ªas⁄_°r
(
¸l_ªas⁄
), crl_reason);

147 
íd
;

149 
V_OCSP_CERTSTATUS_UNKNOWN
:

150 
íd
;

153 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "OCSP: SSL certificateÑevocation status unknown");

154 
íd
;

158 i‡(
br
!=
NULL
Ë
	`OCSP_BASICRESP_‰ì
(br);

159 i‡(
r•
!=
NULL
Ë
	`OCSP_RESPONSE_‰ì
(rsp);

162 
íd
:

163 i‡(
br
!=
NULL
Ë
	`OCSP_BASICRESP_‰ì
(br);

164 i‡(
r•
!=
NULL
Ë
	`OCSP_RESPONSE_‰ì
(rsp);

166 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/options.c

19 
	~"c⁄fig.h
"

21 #i‚de‡
WIN32


22 
	~<°rögs.h
>

25 
	~<°rög.h
>

27 #ifde‡
WITH_TLS


28 #ifde‡
WIN32


29 
	~<wösock2.h
>

31 
	~<›ís¶/ígöe.h
>

34 
	~"mosquôto.h
"

35 
	~"mosquôto_öã∫Æ.h
"

36 
	~"mem‹y_mosq.h
"

37 
	~"misc_mosq.h
"

38 
	~"mqâ_¥Ÿocﬁ.h
"

39 
	~"utû_mosq.h
"

40 
	~"wûl_mosq.h
"

43 
	$mosquôto_wûl_£t
(
mosquôto
 *
mosq
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
)

45  
	`mosquôto_wûl_£t_v5
(
mosq
, 
t›ic
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
, 
NULL
);

46 
	}
}

49 
	$mosquôto_wûl_£t_v5
(
mosquôto
 *
mosq
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
, 
mosquôto_¥›îty
 *
¥›îtõs
)

51 
rc
;

53 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

55 if(
¥›îtõs
){

56 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_WILL
, 
¥›îtõs
);

57 if(
rc
) Ñc;

60  
	`wûl__£t
(
mosq
, 
t›ic
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
, 
¥›îtõs
);

61 
	}
}

64 
	$mosquôto_wûl_˛ór
(
mosquôto
 *
mosq
)

66 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

67  
	`wûl__˛ór
(
mosq
);

68 
	}
}

71 
	$mosquôto_u£∫ame_pw_£t
(
mosquôto
 *
mosq
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
)

73 
size_t
 
¶í
;

75 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

77 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ311
 || mosq->¥Ÿocﬁ =
mosq_p_mqâ31
){

78 if(
∑ssw‹d
 !
NULL
 && 
u£∫ame
 == NULL){

79  
MOSQ_ERR_INVAL
;

83 
	`mosquôto__‰ì
(
mosq
->
u£∫ame
);

84 
mosq
->
u£∫ame
 = 
NULL
;

86 
	`mosquôto__‰ì
(
mosq
->
∑ssw‹d
);

87 
mosq
->
∑ssw‹d
 = 
NULL
;

89 if(
u£∫ame
){

90 
¶í
 = 
	`°æí
(
u£∫ame
);

91 if(
¶í
 > 
UINT16_MAX
){

92  
MOSQ_ERR_INVAL
;

94 if(
	`mosquôto_vÆid©e_utf8
(
u£∫ame
, ()
¶í
)){

95  
MOSQ_ERR_MALFORMED_UTF8
;

97 
mosq
->
u£∫ame
 = 
	`mosquôto__°rdup
(username);

98 if(!
mosq
->
u£∫ame
Ë 
MOSQ_ERR_NOMEM
;

101 if(
∑ssw‹d
){

102 
mosq
->
∑ssw‹d
 = 
	`mosquôto__°rdup
(password);

103 if(!
mosq
->
∑ssw‹d
){

104 
	`mosquôto__‰ì
(
mosq
->
u£∫ame
);

105 
mosq
->
u£∫ame
 = 
NULL
;

106  
MOSQ_ERR_NOMEM
;

109  
MOSQ_ERR_SUCCESS
;

110 
	}
}

113 
	$mosquôto_ªc⁄√˘_dñay_£t
(
mosquôto
 *
mosq
, 
ªc⁄√˘_dñay
, 
ªc⁄√˘_dñay_max
, 
boﬁ
 
ªc⁄√˘_exp⁄ítül_backoff
)

115 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

117 if(
ªc⁄√˘_dñay
 == 0)Ñeconnect_delay = 1;

119 
mosq
->
ªc⁄√˘_dñay
 =Ñeconnect_delay;

120 
mosq
->
ªc⁄√˘_dñay_max
 =Ñeconnect_delay_max;

121 
mosq
->
ªc⁄√˘_exp⁄ítül_backoff
 =Ñeconnect_exponential_backoff;

123  
MOSQ_ERR_SUCCESS
;

124 
	}
}

127 
	$mosquôto_és_£t
(
mosquôto
 *
mosq
, c⁄° *
ˇfûe
, c⁄° *
ˇ∑th
, c⁄° *
˚πfûe
, c⁄° *
keyfûe
, (*
pw_ˇŒback
)(*
buf
, 
size
, 
rwÊag
, *
u£rd©a
))

129 #ifde‡
WITH_TLS


130 
FILE
 *
Âå
;

132 if(!
mosq
 || (!
ˇfûe
 && !
ˇ∑th
Ë|| (
˚πfûe
 && !
keyfûe
Ë|| (!˚πfûê&& keyfûe)Ë 
MOSQ_ERR_INVAL
;

134 
	`mosquôto__‰ì
(
mosq
->
és_ˇfûe
);

135 
mosq
->
és_ˇfûe
 = 
NULL
;

136 if(
ˇfûe
){

137 
Âå
 = 
	`mosquôto__f›í
(
ˇfûe
, "π", 
Ál£
);

138 if(
Âå
){

139 
	`f˛o£
(
Âå
);

141  
MOSQ_ERR_INVAL
;

143 
mosq
->
és_ˇfûe
 = 
	`mosquôto__°rdup
(
ˇfûe
);

145 if(!
mosq
->
és_ˇfûe
){

146  
MOSQ_ERR_NOMEM
;

150 
	`mosquôto__‰ì
(
mosq
->
és_ˇ∑th
);

151 
mosq
->
és_ˇ∑th
 = 
NULL
;

152 if(
ˇ∑th
){

153 
mosq
->
és_ˇ∑th
 = 
	`mosquôto__°rdup
(
ˇ∑th
);

154 if(!
mosq
->
és_ˇ∑th
){

155  
MOSQ_ERR_NOMEM
;

159 
	`mosquôto__‰ì
(
mosq
->
és_˚πfûe
);

160 
mosq
->
és_˚πfûe
 = 
NULL
;

161 if(
˚πfûe
){

162 
Âå
 = 
	`mosquôto__f›í
(
˚πfûe
, "π", 
Ál£
);

163 if(
Âå
){

164 
	`f˛o£
(
Âå
);

166 
	`mosquôto__‰ì
(
mosq
->
és_ˇfûe
);

167 
mosq
->
és_ˇfûe
 = 
NULL
;

169 
	`mosquôto__‰ì
(
mosq
->
és_ˇ∑th
);

170 
mosq
->
és_ˇ∑th
 = 
NULL
;

171  
MOSQ_ERR_INVAL
;

173 
mosq
->
és_˚πfûe
 = 
	`mosquôto__°rdup
(
˚πfûe
);

174 if(!
mosq
->
és_˚πfûe
){

175  
MOSQ_ERR_NOMEM
;

179 
	`mosquôto__‰ì
(
mosq
->
és_keyfûe
);

180 
mosq
->
és_keyfûe
 = 
NULL
;

181 if(
keyfûe
){

182 
Âå
 = 
	`mosquôto__f›í
(
keyfûe
, "π", 
Ál£
);

183 if(
Âå
){

184 
	`f˛o£
(
Âå
);

186 
	`mosquôto__‰ì
(
mosq
->
és_ˇfûe
);

187 
mosq
->
és_ˇfûe
 = 
NULL
;

189 
	`mosquôto__‰ì
(
mosq
->
és_ˇ∑th
);

190 
mosq
->
és_ˇ∑th
 = 
NULL
;

192 
	`mosquôto__‰ì
(
mosq
->
és_˚πfûe
);

193 
mosq
->
és_˚πfûe
 = 
NULL
;

194  
MOSQ_ERR_INVAL
;

196 
mosq
->
és_keyfûe
 = 
	`mosquôto__°rdup
(
keyfûe
);

197 if(!
mosq
->
és_keyfûe
){

198  
MOSQ_ERR_NOMEM
;

202 
mosq
->
és_pw_ˇŒback
 = 
pw_ˇŒback
;

205  
MOSQ_ERR_SUCCESS
;

207 
	`UNUSED
(
mosq
);

208 
	`UNUSED
(
ˇfûe
);

209 
	`UNUSED
(
ˇ∑th
);

210 
	`UNUSED
(
˚πfûe
);

211 
	`UNUSED
(
keyfûe
);

212 
	`UNUSED
(
pw_ˇŒback
);

214  
MOSQ_ERR_NOT_SUPPORTED
;

217 
	}
}

220 
	$mosquôto_és_›ts_£t
(
mosquôto
 *
mosq
, 
˚π_ªqs
, c⁄° *
és_vîsi⁄
, c⁄° *
cùhîs
)

222 #ifde‡
WITH_TLS


223 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

225 
mosq
->
és_˚π_ªqs
 = 
˚π_ªqs
;

226 if(
és_vîsi⁄
){

227 if(!
	`°rˇ£cmp
(
és_vîsi⁄
, "tlsv1.3")

228 || !
	`°rˇ£cmp
(
és_vîsi⁄
, "tlsv1.2")

229 || !
	`°rˇ£cmp
(
és_vîsi⁄
, "tlsv1.1")){

231 
mosq
->
és_vîsi⁄
 = 
	`mosquôto__°rdup
(tls_version);

232 if(!
mosq
->
és_vîsi⁄
Ë 
MOSQ_ERR_NOMEM
;

234  
MOSQ_ERR_INVAL
;

237 
mosq
->
és_vîsi⁄
 = 
	`mosquôto__°rdup
("tlsv1.2");

238 if(!
mosq
->
és_vîsi⁄
Ë 
MOSQ_ERR_NOMEM
;

240 if(
cùhîs
){

241 
mosq
->
és_cùhîs
 = 
	`mosquôto__°rdup
(
cùhîs
);

242 if(!
mosq
->
és_cùhîs
Ë 
MOSQ_ERR_NOMEM
;

244 
mosq
->
és_cùhîs
 = 
NULL
;

248  
MOSQ_ERR_SUCCESS
;

250 
	`UNUSED
(
mosq
);

251 
	`UNUSED
(
˚π_ªqs
);

252 
	`UNUSED
(
és_vîsi⁄
);

253 
	`UNUSED
(
cùhîs
);

255  
MOSQ_ERR_NOT_SUPPORTED
;

257 
	}
}

260 
	$mosquôto_és_ö£cuª_£t
(
mosquôto
 *
mosq
, 
boﬁ
 
vÆue
)

262 #ifde‡
WITH_TLS


263 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

264 
mosq
->
és_ö£cuª
 = 
vÆue
;

265  
MOSQ_ERR_SUCCESS
;

267 
	`UNUSED
(
mosq
);

268 
	`UNUSED
(
vÆue
);

270  
MOSQ_ERR_NOT_SUPPORTED
;

272 
	}
}

275 
	$mosquôto_°rög_›ti⁄
(
mosquôto
 *
mosq
, 
mosq_›t_t
 
›ti⁄
, c⁄° *
vÆue
)

277 #ifde‡
WITH_TLS


278 
ENGINE
 *
íg
;

279 *
°r
;

282 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

284 
›ti⁄
){

285 
MOSQ_OPT_TLS_ENGINE
:

286 #i‡
	`deföed
(
WITH_TLS
Ë&& !deföed(
OPENSSL_NO_ENGINE
)

287 
	`mosquôto__‰ì
(
mosq
->
és_ígöe
);

288 if(
vÆue
){

289 
íg
 = 
	`ENGINE_by_id
(
vÆue
);

290 if(!
íg
){

291  
MOSQ_ERR_INVAL
;

293 
	`ENGINE_‰ì
(
íg
);

294 
mosq
->
és_ígöe
 = 
	`mosquôto__°rdup
(
vÆue
);

295 if(!
mosq
->
és_ígöe
){

296  
MOSQ_ERR_NOMEM
;

299  
MOSQ_ERR_SUCCESS
;

301  
MOSQ_ERR_NOT_SUPPORTED
;

305 
MOSQ_OPT_TLS_KEYFORM
:

306 #ifde‡
WITH_TLS


307 if(!
vÆue
Ë 
MOSQ_ERR_INVAL
;

308 if(!
	`°rˇ£cmp
(
vÆue
, "pem")){

309 
mosq
->
és_keyf‹m
 = 
mosq_k_≥m
;

310 }i‡(!
	`°rˇ£cmp
(
vÆue
, "engine")){

311 
mosq
->
és_keyf‹m
 = 
mosq_k_ígöe
;

313  
MOSQ_ERR_INVAL
;

315  
MOSQ_ERR_SUCCESS
;

317  
MOSQ_ERR_NOT_SUPPORTED
;

322 
MOSQ_OPT_TLS_ENGINE_KPASS_SHA1
:

323 #ifde‡
WITH_TLS


324 if(
	`mosquôto__hex2bö_sha1
(
vÆue
, (**)&
°r
Ë!
MOSQ_ERR_SUCCESS
){

325  
MOSQ_ERR_INVAL
;

327 
mosq
->
és_ígöe_k∑ss_sha1
 = 
°r
;

328  
MOSQ_ERR_SUCCESS
;

330  
MOSQ_ERR_NOT_SUPPORTED
;

334 
MOSQ_OPT_TLS_ALPN
:

335 #ifde‡
WITH_TLS


336 
mosq
->
és_Æ≤
 = 
	`mosquôto__°rdup
(
vÆue
);

337 if(!
mosq
->
és_Æ≤
){

338  
MOSQ_ERR_NOMEM
;

340  
MOSQ_ERR_SUCCESS
;

342  
MOSQ_ERR_NOT_SUPPORTED
;

346 
MOSQ_OPT_BIND_ADDRESS
:

347 
	`mosquôto__‰ì
(
mosq
->
böd_addªss
);

348 if(
vÆue
){

349 
mosq
->
böd_addªss
 = 
	`mosquôto__°rdup
(
vÆue
);

350 if(
mosq
->
böd_addªss
){

351  
MOSQ_ERR_SUCCESS
;

353  
MOSQ_ERR_NOMEM
;

356  
MOSQ_ERR_SUCCESS
;

361  
MOSQ_ERR_INVAL
;

363 
	}
}

366 
	$mosquôto_és_psk_£t
(
mosquôto
 *
mosq
, c⁄° *
psk
, c⁄° *
idítôy
, c⁄° *
cùhîs
)

368 #ifde‡
FINAL_WITH_TLS_PSK


369 if(!
mosq
 || !
psk
 || !
idítôy
Ë 
MOSQ_ERR_INVAL
;

372 if(
	`°r•n
(
psk
, "0123456789abcdefABCDEF"Ë< 
	`°æí
(psk)){

373  
MOSQ_ERR_INVAL
;

375 
mosq
->
és_psk
 = 
	`mosquôto__°rdup
(
psk
);

376 if(!
mosq
->
és_psk
Ë 
MOSQ_ERR_NOMEM
;

378 
mosq
->
és_psk_idítôy
 = 
	`mosquôto__°rdup
(
idítôy
);

379 if(!
mosq
->
és_psk_idítôy
){

380 
	`mosquôto__‰ì
(
mosq
->
és_psk
);

381  
MOSQ_ERR_NOMEM
;

383 if(
cùhîs
){

384 
mosq
->
és_cùhîs
 = 
	`mosquôto__°rdup
(
cùhîs
);

385 if(!
mosq
->
és_cùhîs
Ë 
MOSQ_ERR_NOMEM
;

387 
mosq
->
és_cùhîs
 = 
NULL
;

390  
MOSQ_ERR_SUCCESS
;

392 
	`UNUSED
(
mosq
);

393 
	`UNUSED
(
psk
);

394 
	`UNUSED
(
idítôy
);

395 
	`UNUSED
(
cùhîs
);

397  
MOSQ_ERR_NOT_SUPPORTED
;

399 
	}
}

402 
	$mosquôto_›ts_£t
(
mosquôto
 *
mosq
, 
mosq_›t_t
 
›ti⁄
, *
vÆue
)

404 
ivÆ
;

406 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

408 
›ti⁄
){

409 
MOSQ_OPT_PROTOCOL_VERSION
:

410 if(
vÆue
 =
NULL
){

411  
MOSQ_ERR_INVAL
;

413 
ivÆ
 = *((*)
vÆue
);

414  
	`mosquôto_öt_›ti⁄
(
mosq
, 
›ti⁄
, 
ivÆ
);

415 
MOSQ_OPT_SSL_CTX
:

416  
	`mosquôto_void_›ti⁄
(
mosq
, 
›ti⁄
, 
vÆue
);

418  
MOSQ_ERR_INVAL
;

420  
MOSQ_ERR_SUCCESS
;

421 
	}
}

424 
	$mosquôto_öt_›ti⁄
(
mosquôto
 *
mosq
, 
mosq_›t_t
 
›ti⁄
, 
vÆue
)

426 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

428 
›ti⁄
){

429 
MOSQ_OPT_PROTOCOL_VERSION
:

430 if(
vÆue
 =
MQTT_PROTOCOL_V31
){

431 
mosq
->
¥Ÿocﬁ
 = 
mosq_p_mqâ31
;

432 }if(
vÆue
 =
MQTT_PROTOCOL_V311
){

433 
mosq
->
¥Ÿocﬁ
 = 
mosq_p_mqâ311
;

434 }if(
vÆue
 =
MQTT_PROTOCOL_V5
){

435 
mosq
->
¥Ÿocﬁ
 = 
mosq_p_mqâ5
;

437  
MOSQ_ERR_INVAL
;

441 
MOSQ_OPT_RECEIVE_MAXIMUM
:

442 if(
vÆue
 < 0 || vÆuê> 
UINT16_MAX
){

443  
MOSQ_ERR_INVAL
;

445 if(
vÆue
 == 0){

446 
mosq
->
msgs_ö
.
öÊight_maximum
 = 
UINT16_MAX
;

448 
mosq
->
msgs_ö
.
öÊight_maximum
 = (
uöt16_t
)
vÆue
;

452 
MOSQ_OPT_SEND_MAXIMUM
:

453 if(
vÆue
 < 0 || vÆuê> 
UINT16_MAX
){

454  
MOSQ_ERR_INVAL
;

456 if(
vÆue
 == 0){

457 
mosq
->
msgs_out
.
öÊight_maximum
 = 
UINT16_MAX
;

459 
mosq
->
msgs_out
.
öÊight_maximum
 = (
uöt16_t
)
vÆue
;

463 
MOSQ_OPT_SSL_CTX_WITH_DEFAULTS
:

464 #i‡
	`deföed
(
WITH_TLS
Ë&& 
OPENSSL_VERSION_NUMBER
 >= 0x10100000L

465 if(
vÆue
){

466 
mosq
->
s¶_˘x_deÁu…s
 = 
åue
;

468 
mosq
->
s¶_˘x_deÁu…s
 = 
Ál£
;

472  
MOSQ_ERR_NOT_SUPPORTED
;

475 
MOSQ_OPT_TLS_USE_OS_CERTS
:

476 #ifde‡
WITH_TLS


477 if(
vÆue
){

478 
mosq
->
és_u£_os_˚πs
 = 
åue
;

480 
mosq
->
és_u£_os_˚πs
 = 
Ál£
;

484  
MOSQ_ERR_NOT_SUPPORTED
;

487 
MOSQ_OPT_TLS_OCSP_REQUIRED
:

488 #ifde‡
WITH_TLS


489 
mosq
->
és_oc•_ªquúed
 = (
boﬁ
)
vÆue
;

491  
MOSQ_ERR_NOT_SUPPORTED
;

495 
MOSQ_OPT_TCP_NODELAY
:

496 
mosq
->
t˝_nodñay
 = (
boﬁ
)
vÆue
;

500  
MOSQ_ERR_INVAL
;

502  
MOSQ_ERR_SUCCESS
;

503 
	}
}

506 
	$mosquôto_void_›ti⁄
(
mosquôto
 *
mosq
, 
mosq_›t_t
 
›ti⁄
, *
vÆue
)

508 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

510 
›ti⁄
){

511 
MOSQ_OPT_SSL_CTX
:

512 #ifde‡
WITH_TLS


513 
mosq
->
u£r_s¶_˘x
 = (
SSL_CTX
 *)
vÆue
;

514 if(
mosq
->
u£r_s¶_˘x
){

515 #i‡(
OPENSSL_VERSION_NUMBER
 >= 0x10100000L)

516 
	`SSL_CTX_up_ªf
(
mosq
->
u£r_s¶_˘x
);

518 
	`CRYPTO_add
(&(
mosq
->
u£r_s¶_˘x
)->
ª„ªn˚s
, 1, 
CRYPTO_LOCK_SSL_CTX
);

523  
MOSQ_ERR_NOT_SUPPORTED
;

526  
MOSQ_ERR_INVAL
;

528  
MOSQ_ERR_SUCCESS
;

529 
	}
}

532 
	$mosquôto_u£r_d©a_£t
(
mosquôto
 *
mosq
, *
u£rd©a
)

534 if(
mosq
){

535 
mosq
->
u£rd©a
 = userdata;

537 
	}
}

539 *
	$mosquôto_u£rd©a
(
mosquôto
 *
mosq
)

541  
mosq
->
u£rd©a
;

542 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/packet_datatypes.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<î∫o.h
>

23 
	~<°rög.h
>

25 #ifde‡
WITH_BROKER


26 
	~"mosquôto_brokî_öã∫Æ.h
"

27 #ifde‡
WITH_WEBSOCKETS


28 
	~<libwebsockës.h
>

31 
	~"ªad_h™dÀ.h
"

34 
	~"mem‹y_mosq.h
"

35 
	~"mqâ_¥Ÿocﬁ.h
"

36 
	~"√t_mosq.h
"

37 
	~"∑ckë_mosq.h
"

38 
	~"ªad_h™dÀ.h
"

39 #ifde‡
WITH_BROKER


40 
	~"sys_åì.h
"

42 
	#G_BYTES_RECEIVED_INC
(
A
)

	)

43 
	#G_BYTES_SENT_INC
(
A
)

	)

44 
	#G_MSGS_SENT_INC
(
A
)

	)

45 
	#G_PUB_MSGS_SENT_INC
(
A
)

	)

49 
	$∑ckë__ªad_byã
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt8_t
 *
byã
)

51 
	`as£π
(
∑ckë
);

52 if(
∑ckë
->
pos
+1 >Öackë->
ªmaöög_Àngth
Ë 
MOSQ_ERR_MALFORMED_PACKET
;

54 *
byã
 = 
∑ckë
->
∑ylﬂd
[∑ckë->
pos
];

55 
∑ckë
->
pos
++;

57  
MOSQ_ERR_SUCCESS
;

58 
	}
}

61 
	$∑ckë__wrôe_byã
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt8_t
 
byã
)

63 
	`as£π
(
∑ckë
);

64 
	`as£π
(
∑ckë
->
pos
+1 <∑ckë->
∑ckë_Àngth
);

66 
∑ckë
->
∑ylﬂd
[∑ckë->
pos
] = 
byã
;

67 
∑ckë
->
pos
++;

68 
	}
}

71 
	$∑ckë__ªad_byãs
(
mosquôto__∑ckë
 *
∑ckë
, *
byãs
, 
uöt32_t
 
cou¡
)

73 
	`as£π
(
∑ckë
);

74 if(
∑ckë
->
pos
+
cou¡
 >Öackë->
ªmaöög_Àngth
Ë 
MOSQ_ERR_MALFORMED_PACKET
;

76 
	`mem˝y
(
byãs
, &(
∑ckë
->
∑ylﬂd
[∑ckë->
pos
]), 
cou¡
);

77 
∑ckë
->
pos
 +
cou¡
;

79  
MOSQ_ERR_SUCCESS
;

80 
	}
}

83 
	$∑ckë__wrôe_byãs
(
mosquôto__∑ckë
 *
∑ckë
, c⁄° *
byãs
, 
uöt32_t
 
cou¡
)

85 
	`as£π
(
∑ckë
);

86 
	`as£π
(
∑ckë
->
pos
+
cou¡
 <∑ckë->
∑ckë_Àngth
);

88 
	`mem˝y
(&(
∑ckë
->
∑ylﬂd
[∑ckë->
pos
]), 
byãs
, 
cou¡
);

89 
∑ckë
->
pos
 +
cou¡
;

90 
	}
}

93 
	$∑ckë__ªad_bö¨y
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt8_t
 **
d©a
, 
uöt16_t
 *
Àngth
)

95 
uöt16_t
 
¶í
;

96 
rc
;

98 
	`as£π
(
∑ckë
);

99 
rc
 = 
	`∑ckë__ªad_uöt16
(
∑ckë
, &
¶í
);

100 if(
rc
) Ñc;

102 if(
¶í
 == 0){

103 *
d©a
 = 
NULL
;

104 *
Àngth
 = 0;

105  
MOSQ_ERR_SUCCESS
;

108 if(
∑ckë
->
pos
+
¶í
 >Öackë->
ªmaöög_Àngth
Ë 
MOSQ_ERR_MALFORMED_PACKET
;

110 *
d©a
 = 
	`mosquôto__mÆloc
(
¶í
+1U);

111 if(*
d©a
){

112 
	`mem˝y
(*
d©a
, &(
∑ckë
->
∑ylﬂd
[∑ckë->
pos
]), 
¶í
);

113 ((
uöt8_t
 *)(*
d©a
))[
¶í
] = '\0';

114 
∑ckë
->
pos
 +
¶í
;

116  
MOSQ_ERR_NOMEM
;

119 *
Àngth
 = 
¶í
;

120  
MOSQ_ERR_SUCCESS
;

121 
	}
}

124 
	$∑ckë__ªad_°rög
(
mosquôto__∑ckë
 *
∑ckë
, **
°r
, 
uöt16_t
 *
Àngth
)

126 
rc
;

128 
rc
 = 
	`∑ckë__ªad_bö¨y
(
∑ckë
, (
uöt8_t
 **)
°r
, 
Àngth
);

129 if(
rc
) Ñc;

130 if(*
Àngth
 =0Ë 
MOSQ_ERR_SUCCESS
;

132 if(
	`mosquôto_vÆid©e_utf8
(*
°r
, *
Àngth
)){

133 
	`mosquôto__‰ì
(*
°r
);

134 *
°r
 = 
NULL
;

135 *
Àngth
 = 0;

136  
MOSQ_ERR_MALFORMED_UTF8
;

139  
MOSQ_ERR_SUCCESS
;

140 
	}
}

143 
	$∑ckë__wrôe_°rög
(
mosquôto__∑ckë
 *
∑ckë
, c⁄° *
°r
, 
uöt16_t
 
Àngth
)

145 
	`as£π
(
∑ckë
);

146 
	`∑ckë__wrôe_uöt16
(
∑ckë
, 
Àngth
);

147 
	`∑ckë__wrôe_byãs
(
∑ckë
, 
°r
, 
Àngth
);

148 
	}
}

151 
	$∑ckë__ªad_uöt16
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt16_t
 *
w‹d
)

153 
uöt8_t
 
msb
, 
lsb
;

155 
	`as£π
(
∑ckë
);

156 if(
∑ckë
->
pos
+2 >Öackë->
ªmaöög_Àngth
Ë 
MOSQ_ERR_MALFORMED_PACKET
;

158 
msb
 = 
∑ckë
->
∑ylﬂd
[∑ckë->
pos
];

159 
∑ckë
->
pos
++;

160 
lsb
 = 
∑ckë
->
∑ylﬂd
[∑ckë->
pos
];

161 
∑ckë
->
pos
++;

163 *
w‹d
 = (
uöt16_t
)((
msb
<<8Ë+ 
lsb
);

165  
MOSQ_ERR_SUCCESS
;

166 
	}
}

169 
	$∑ckë__wrôe_uöt16
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt16_t
 
w‹d
)

171 
	`∑ckë__wrôe_byã
(
∑ckë
, 
	`MOSQ_MSB
(
w‹d
));

172 
	`∑ckë__wrôe_byã
(
∑ckë
, 
	`MOSQ_LSB
(
w‹d
));

173 
	}
}

176 
	$∑ckë__ªad_uöt32
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt32_t
 *
w‹d
)

178 
uöt32_t
 
vÆ
 = 0;

179 
i
;

181 
	`as£π
(
∑ckë
);

182 if(
∑ckë
->
pos
+4 >Öackë->
ªmaöög_Àngth
Ë 
MOSQ_ERR_MALFORMED_PACKET
;

184 
i
=0; i<4; i++){

185 
vÆ
 = (vÆ << 8Ë+ 
∑ckë
->
∑ylﬂd
[∑ckë->
pos
];

186 
∑ckë
->
pos
++;

189 *
w‹d
 = 
vÆ
;

191  
MOSQ_ERR_SUCCESS
;

192 
	}
}

195 
	$∑ckë__wrôe_uöt32
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt32_t
 
w‹d
)

197 
	`∑ckë__wrôe_byã
(
∑ckë
, (
uöt8_t
)((
w‹d
 & 0xFF000000) >> 24));

198 
	`∑ckë__wrôe_byã
(
∑ckë
, (
uöt8_t
)((
w‹d
 & 0x00FF0000) >> 16));

199 
	`∑ckë__wrôe_byã
(
∑ckë
, (
uöt8_t
)((
w‹d
 & 0x0000FF00) >> 8));

200 
	`∑ckë__wrôe_byã
(
∑ckë
, (
uöt8_t
)((
w‹d
 & 0x000000FF)));

201 
	}
}

204 
	$∑ckë__ªad_v¨öt
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt32_t
 *
w‹d
, 
uöt8_t
 *
byãs
)

206 
i
;

207 
uöt8_t
 
byã
;

208 
ªmaöög_mu…
 = 1;

209 
uöt32_t
 
lw‹d
 = 0;

210 
uöt8_t
 
lbyãs
 = 0;

212 
i
=0; i<4; i++){

213 if(
∑ckë
->
pos
 <Öackë->
ªmaöög_Àngth
){

214 
lbyãs
++;

215 
byã
 = 
∑ckë
->
∑ylﬂd
[∑ckë->
pos
];

216 
lw‹d
 +(
byã
 & 127Ë* 
ªmaöög_mu…
;

217 
ªmaöög_mu…
 *= 128;

218 
∑ckë
->
pos
++;

219 if((
byã
 & 128) == 0){

220 if(
lbyãs
 > 1 && 
byã
 == 0){

222  
MOSQ_ERR_MALFORMED_PACKET
;

224 *
w‹d
 = 
lw‹d
;

225 if(
byãs
Ë(*byãsË
lbyãs
;

226  
MOSQ_ERR_SUCCESS
;

230  
MOSQ_ERR_MALFORMED_PACKET
;

233  
MOSQ_ERR_MALFORMED_PACKET
;

234 
	}
}

237 
	$∑ckë__wrôe_v¨öt
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt32_t
 
w‹d
)

239 
uöt8_t
 
byã
;

240 
cou¡
 = 0;

243 
byã
 = (
uöt8_t
)(
w‹d
 % 128);

244 
w‹d
 = word / 128;

246 if(
w‹d
 > 0){

247 
byã
 = byte | 0x80;

249 
	`∑ckë__wrôe_byã
(
∑ckë
, 
byã
);

250 
cou¡
++;

251 }
w‹d
 > 0 && 
cou¡
 < 5);

253 if(
cou¡
 == 5){

254  
MOSQ_ERR_MALFORMED_PACKET
;

256  
MOSQ_ERR_SUCCESS
;

257 
	}
}

260 
	$∑ckë__v¨öt_byãs
(
uöt32_t
 
w‹d
)

262 if(
w‹d
 < 128){

264 }if(
w‹d
 < 16384){

266 }if(
w‹d
 < 2097152){

268 }if(
w‹d
 < 268435456){

273 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/packet_mosq.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<î∫o.h
>

23 
	~<°rög.h
>

25 #ifde‡
WITH_BROKER


26 
	~"mosquôto_brokî_öã∫Æ.h
"

27 #ifde‡
WITH_WEBSOCKETS


28 
	~<libwebsockës.h
>

31 
	~"ªad_h™dÀ.h
"

34 
	~"mem‹y_mosq.h
"

35 
	~"mqâ_¥Ÿocﬁ.h
"

36 
	~"√t_mosq.h
"

37 
	~"∑ckë_mosq.h
"

38 
	~"ªad_h™dÀ.h
"

39 
	~"utû_mosq.h
"

40 #ifde‡
WITH_BROKER


41 
	~"sys_åì.h
"

42 
	~"£nd_mosq.h
"

44 
	#G_BYTES_RECEIVED_INC
(
A
)

	)

45 
	#G_BYTES_SENT_INC
(
A
)

	)

46 
	#G_MSGS_SENT_INC
(
A
)

	)

47 
	#G_PUB_MSGS_SENT_INC
(
A
)

	)

50 
	$∑ckë__Æloc
(
mosquôto__∑ckë
 *
∑ckë
)

52 
uöt8_t
 
ªmaöög_byãs
[5], 
byã
;

53 
uöt32_t
 
ªmaöög_Àngth
;

54 
i
;

56 
	`as£π
(
∑ckë
);

58 
ªmaöög_Àngth
 = 
∑ckë
->remaining_length;

59 
∑ckë
->
∑ylﬂd
 = 
NULL
;

60 
∑ckë
->
ªmaöög_cou¡
 = 0;

62 
byã
 = 
ªmaöög_Àngth
 % 128;

63 
ªmaöög_Àngth
 =Ñemaining_length / 128;

65 if(
ªmaöög_Àngth
 > 0){

66 
byã
 = byte | 0x80;

68 
ªmaöög_byãs
[
∑ckë
->
ªmaöög_cou¡
] = 
byã
;

69 
∑ckë
->
ªmaöög_cou¡
++;

70 }
ªmaöög_Àngth
 > 0 && 
∑ckë
->
ªmaöög_cou¡
 < 5);

71 if(
∑ckë
->
ªmaöög_cou¡
 =5Ë 
MOSQ_ERR_PAYLOAD_SIZE
;

72 
∑ckë
->
∑ckë_Àngth
 =Öackë->
ªmaöög_Àngth
 + 1 + (
uöt8_t
Ìackë->
ªmaöög_cou¡
;

73 #ifde‡
WITH_WEBSOCKETS


74 
∑ckë
->
∑ylﬂd
 = 
	`mosquôto__mÆloc
((
uöt8_t
)*∑ckë->
∑ckë_Àngth
 + 
LWS_PRE
);

76 
∑ckë
->
∑ylﬂd
 = 
	`mosquôto__mÆloc
((
uöt8_t
)*∑ckë->
∑ckë_Àngth
);

78 if(!
∑ckë
->
∑ylﬂd
Ë 
MOSQ_ERR_NOMEM
;

80 
∑ckë
->
∑ylﬂd
[0] =Öackë->
comm™d
;

81 
i
=0; i<
∑ckë
->
ªmaöög_cou¡
; i++){

82 
∑ckë
->
∑ylﬂd
[
i
+1] = 
ªmaöög_byãs
[i];

84 
∑ckë
->
pos
 = 1U + (
uöt8_t
Ìackë->
ªmaöög_cou¡
;

86  
MOSQ_ERR_SUCCESS
;

87 
	}
}

89 
	$∑ckë__˛ónup
(
mosquôto__∑ckë
 *
∑ckë
)

91 if(!
∑ckë
) ;

94 
∑ckë
->
comm™d
 = 0;

95 
∑ckë
->
ªmaöög_cou¡
 = 0;

96 
∑ckë
->
ªmaöög_mu…
 = 1;

97 
∑ckë
->
ªmaöög_Àngth
 = 0;

98 
	`mosquôto__‰ì
(
∑ckë
->
∑ylﬂd
);

99 
∑ckë
->
∑ylﬂd
 = 
NULL
;

100 
∑ckë
->
to_¥o˚ss
 = 0;

101 
∑ckë
->
pos
 = 0;

102 
	}
}

105 
	$∑ckë__˛ónup_Æl_no_locks
(
mosquôto
 *
mosq
)

107 
mosquôto__∑ckë
 *
∑ckë
;

110 if(
mosq
->
out_∑ckë
 && !mosq->
cuºít_out_∑ckë
){

111 
mosq
->
cuºít_out_∑ckë
 = mosq->
out_∑ckë
;

112 
mosq
->
out_∑ckë
 = mosq->out_∑ckë->
√xt
;

114 
mosq
->
cuºít_out_∑ckë
){

115 
∑ckë
 = 
mosq
->
cuºít_out_∑ckë
;

117 
mosq
->
cuºít_out_∑ckë
 = mosq->
out_∑ckë
;

118 if(
mosq
->
out_∑ckë
){

119 
mosq
->
out_∑ckë
 = mosq->out_∑ckë->
√xt
;

122 
	`∑ckë__˛ónup
(
∑ckë
);

123 
	`mosquôto__‰ì
(
∑ckë
);

125 
mosq
->
out_∑ckë_cou¡
 = 0;

127 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

128 
	}
}

130 
	$∑ckë__˛ónup_Æl
(
mosquôto
 *
mosq
)

132 
	`±hªad_muãx_lock
(&
mosq
->
cuºít_out_∑ckë_muãx
);

133 
	`±hªad_muãx_lock
(&
mosq
->
out_∑ckë_muãx
);

135 
	`∑ckë__˛ónup_Æl_no_locks
(
mosq
);

137 
	`±hªad_muãx_u∆ock
(&
mosq
->
out_∑ckë_muãx
);

138 
	`±hªad_muãx_u∆ock
(&
mosq
->
cuºít_out_∑ckë_muãx
);

139 
	}
}

142 
	$∑ckë__queue
(
mosquôto
 *
mosq
, 
mosquôto__∑ckë
 *
∑ckë
)

144 #i‚de‡
WITH_BROKER


145 
sock∑ú_d©a
 = 0;

147 
	`as£π
(
mosq
);

148 
	`as£π
(
∑ckë
);

150 
∑ckë
->
pos
 = 0;

151 
∑ckë
->
to_¥o˚ss
 =Öackë->
∑ckë_Àngth
;

153 
∑ckë
->
√xt
 = 
NULL
;

154 
	`±hªad_muãx_lock
(&
mosq
->
out_∑ckë_muãx
);

155 if(
mosq
->
out_∑ckë
){

156 
mosq
->
out_∑ckë_œ°
->
√xt
 = 
∑ckë
;

158 
mosq
->
out_∑ckë
 = 
∑ckë
;

160 
mosq
->
out_∑ckë_œ°
 = 
∑ckë
;

161 
mosq
->
out_∑ckë_cou¡
++;

162 
	`±hªad_muãx_u∆ock
(&
mosq
->
out_∑ckë_muãx
);

163 #ifde‡
WITH_BROKER


164 #ifde‡
WITH_WEBSOCKETS


165 if(
mosq
->
wsi
){

166 
	`lws_ˇŒback_⁄_wrôabÀ
(
mosq
->
wsi
);

167  
MOSQ_ERR_SUCCESS
;

169  
	`∑ckë__wrôe
(
mosq
);

172  
	`∑ckë__wrôe
(
mosq
);

178 if(
mosq
->
sock∑úW
 !
INVALID_SOCKET
){

179 #i‚de‡
WIN32


180 if(
	`wrôe
(
mosq
->
sock∑úW
, &
sock∑ú_d©a
, 1)){

183 
	`£nd
(
mosq
->
sock∑úW
, &
sock∑ú_d©a
, 1, 0);

187 if(
mosq
->
ö_ˇŒback
 =
Ál£
 && mosq->
thªaded
 =
mosq_ts_n⁄e
){

188  
	`∑ckë__wrôe
(
mosq
);

190  
MOSQ_ERR_SUCCESS
;

193 
	}
}

196 
	$∑ckë__check_ovîsize
(
mosquôto
 *
mosq
, 
uöt32_t
 
ªmaöög_Àngth
)

198 
uöt32_t
 
Àn
;

200 if(
mosq
->
maximum_∑ckë_size
 =0Ë 
MOSQ_ERR_SUCCESS
;

202 
Àn
 = 
ªmaöög_Àngth
 + 
	`∑ckë__v¨öt_byãs
(remaining_length);

203 if(
Àn
 > 
mosq
->
maximum_∑ckë_size
){

204  
MOSQ_ERR_OVERSIZE_PACKET
;

206  
MOSQ_ERR_SUCCESS
;

208 
	}
}

211 
	$∑ckë__wrôe
(
mosquôto
 *
mosq
)

213 
ssize_t
 
wrôe_Àngth
;

214 
mosquôto__∑ckë
 *
∑ckë
;

215 
mosquôto_˛õ¡_°©e
 
°©e
;

217 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

218 if(
mosq
->
sock
 =
INVALID_SOCKET
Ë 
MOSQ_ERR_NO_CONN
;

220 
	`±hªad_muãx_lock
(&
mosq
->
cuºít_out_∑ckë_muãx
);

221 
	`±hªad_muãx_lock
(&
mosq
->
out_∑ckë_muãx
);

222 if(
mosq
->
out_∑ckë
 && !mosq->
cuºít_out_∑ckë
){

223 
mosq
->
cuºít_out_∑ckë
 = mosq->
out_∑ckë
;

224 
mosq
->
out_∑ckë
 = mosq->out_∑ckë->
√xt
;

225 if(!
mosq
->
out_∑ckë
){

226 
mosq
->
out_∑ckë_œ°
 = 
NULL
;

228 
mosq
->
out_∑ckë_cou¡
--;

230 
	`±hªad_muãx_u∆ock
(&
mosq
->
out_∑ckë_muãx
);

232 #ifde‡
WITH_BROKER


233 if(
mosq
->
cuºít_out_∑ckë
){

234 
	`mux__add_out
(
mosq
);

238 
°©e
 = 
	`mosquôto__gë_°©e
(
mosq
);

239 if(
°©e
 =
mosq_cs_c⁄√˘_≥ndög
){

240 
	`±hªad_muãx_u∆ock
(&
mosq
->
cuºít_out_∑ckë_muãx
);

241  
MOSQ_ERR_SUCCESS
;

244 
mosq
->
cuºít_out_∑ckë
){

245 
∑ckë
 = 
mosq
->
cuºít_out_∑ckë
;

247 
∑ckë
->
to_¥o˚ss
 > 0){

248 
wrôe_Àngth
 = 
	`√t__wrôe
(
mosq
, &(
∑ckë
->
∑ylﬂd
[∑ckë->
pos
]),Öackë->
to_¥o˚ss
);

249 if(
wrôe_Àngth
 > 0){

250 
	`G_BYTES_SENT_INC
(
wrôe_Àngth
);

251 
∑ckë
->
to_¥o˚ss
 -(
uöt32_t
)
wrôe_Àngth
;

252 
∑ckë
->
pos
 +(
uöt32_t
)
wrôe_Àngth
;

254 #ifde‡
WIN32


255 
î∫o
 = 
	`WSAGëLa°Eº‹
();

257 if(
î∫o
 =
EAGAIN
 ||Éºnÿ=
COMPAT_EWOULDBLOCK


258 #ifde‡
WIN32


259 || 
î∫o
 =
WSAENOTCONN


262 
	`±hªad_muãx_u∆ock
(&
mosq
->
cuºít_out_∑ckë_muãx
);

263  
MOSQ_ERR_SUCCESS
;

265 
	`±hªad_muãx_u∆ock
(&
mosq
->
cuºít_out_∑ckë_muãx
);

266 
î∫o
){

267 
COMPAT_ECONNRESET
:

268  
MOSQ_ERR_CONN_LOST
;

269 
COMPAT_EINTR
:

270  
MOSQ_ERR_SUCCESS
;

272  
MOSQ_ERR_ERRNO
;

278 
	`G_MSGS_SENT_INC
(1);

279 if(((
∑ckë
->
comm™d
)&0xF6Ë=
CMD_PUBLISH
){

280 
	`G_PUB_MSGS_SENT_INC
(1);

281 #i‚de‡
WITH_BROKER


282 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

283 if(
mosq
->
⁄_publish
){

285 
mosq
->
ö_ˇŒback
 = 
åue
;

286 
mosq
->
	`⁄_publish
(mosq, mosq->
u£rd©a
, 
∑ckë
->
mid
);

287 
mosq
->
ö_ˇŒback
 = 
Ál£
;

289 if(
mosq
->
⁄_publish_v5
){

291 
mosq
->
ö_ˇŒback
 = 
åue
;

292 
mosq
->
	`⁄_publish_v5
(mosq, mosq->
u£rd©a
, 
∑ckë
->
mid
, 0, 
NULL
);

293 
mosq
->
ö_ˇŒback
 = 
Ál£
;

295 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

296 }if(((
∑ckë
->
comm™d
)&0xF0Ë=
CMD_DISCONNECT
){

297 
	`do_˛õ¡_disc⁄√˘
(
mosq
, 
MOSQ_ERR_SUCCESS
, 
NULL
);

298 
	`∑ckë__˛ónup
(
∑ckë
);

299 
	`mosquôto__‰ì
(
∑ckë
);

300  
MOSQ_ERR_SUCCESS
;

302 }if(((
∑ckë
->
comm™d
)&0xF0Ë=
CMD_PUBLISH
){

303 
	`G_PUB_MSGS_SENT_INC
(1);

307 
	`±hªad_muãx_lock
(&
mosq
->
out_∑ckë_muãx
);

308 
mosq
->
cuºít_out_∑ckë
 = mosq->
out_∑ckë
;

309 if(
mosq
->
out_∑ckë
){

310 
mosq
->
out_∑ckë
 = mosq->out_∑ckë->
√xt
;

311 if(!
mosq
->
out_∑ckë
){

312 
mosq
->
out_∑ckë_œ°
 = 
NULL
;

314 
mosq
->
out_∑ckë_cou¡
--;

316 
	`±hªad_muãx_u∆ock
(&
mosq
->
out_∑ckë_muãx
);

318 
	`∑ckë__˛ónup
(
∑ckë
);

319 
	`mosquôto__‰ì
(
∑ckë
);

321 #ifde‡
WITH_BROKER


322 
mosq
->
√xt_msg_out
 = 
db
.
now_s
 + mosq->
kì∑live
;

324 
	`±hªad_muãx_lock
(&
mosq
->
msgtime_muãx
);

325 
mosq
->
√xt_msg_out
 = 
	`mosquôto_time
(Ë+ mosq->
kì∑live
;

326 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgtime_muãx
);

329 #ifde‡
WITH_BROKER


330 i‡(
mosq
->
cuºít_out_∑ckë
 =
NULL
) {

331 
	`mux__ªmove_out
(
mosq
);

334 
	`±hªad_muãx_u∆ock
(&
mosq
->
cuºít_out_∑ckë_muãx
);

335  
MOSQ_ERR_SUCCESS
;

336 
	}
}

339 
	$∑ckë__ªad
(
mosquôto
 *
mosq
)

341 
uöt8_t
 
byã
;

342 
ssize_t
 
ªad_Àngth
;

343 
rc
 = 0;

344 
mosquôto_˛õ¡_°©e
 
°©e
;

346 if(!
mosq
){

347  
MOSQ_ERR_INVAL
;

349 if(
mosq
->
sock
 =
INVALID_SOCKET
){

350  
MOSQ_ERR_NO_CONN
;

353 
°©e
 = 
	`mosquôto__gë_°©e
(
mosq
);

354 if(
°©e
 =
mosq_cs_c⁄√˘_≥ndög
){

355  
MOSQ_ERR_SUCCESS
;

372 if(!
mosq
->
ö_∑ckë
.
comm™d
){

373 
ªad_Àngth
 = 
	`√t__ªad
(
mosq
, &
byã
, 1);

374 if(
ªad_Àngth
 == 1){

375 
mosq
->
ö_∑ckë
.
comm™d
 = 
byã
;

376 #ifde‡
WITH_BROKER


377 
	`G_BYTES_RECEIVED_INC
(1);

379 if(!(
mosq
->
bridge
Ë&& 
°©e
 =
mosq_cs_c⁄√˘ed
 && (
byã
&0xF0Ë!
CMD_CONNECT
){

380  
MOSQ_ERR_PROTOCOL
;

384 if(
ªad_Àngth
 == 0){

385  
MOSQ_ERR_CONN_LOST
;

387 #ifde‡
WIN32


388 
î∫o
 = 
	`WSAGëLa°Eº‹
();

390 if(
î∫o
 =
EAGAIN
 ||Éºnÿ=
COMPAT_EWOULDBLOCK
){

391  
MOSQ_ERR_SUCCESS
;

393 
î∫o
){

394 
COMPAT_ECONNRESET
:

395  
MOSQ_ERR_CONN_LOST
;

396 
COMPAT_EINTR
:

397  
MOSQ_ERR_SUCCESS
;

399  
MOSQ_ERR_ERRNO
;

413 if(
mosq
->
ö_∑ckë
.
ªmaöög_cou¡
 <= 0){

415 
ªad_Àngth
 = 
	`√t__ªad
(
mosq
, &
byã
, 1);

416 if(
ªad_Àngth
 == 1){

417 
mosq
->
ö_∑ckë
.
ªmaöög_cou¡
--;

421 if(
mosq
->
ö_∑ckë
.
ªmaöög_cou¡
 < -4){

422  
MOSQ_ERR_MALFORMED_PACKET
;

425 
	`G_BYTES_RECEIVED_INC
(1);

426 
mosq
->
ö_∑ckë
.
ªmaöög_Àngth
 +(
byã
 & 127Ë* mosq->ö_∑ckë.
ªmaöög_mu…
;

427 
mosq
->
ö_∑ckë
.
ªmaöög_mu…
 *= 128;

429 if(
ªad_Àngth
 == 0){

430  
MOSQ_ERR_CONN_LOST
;

432 #ifde‡
WIN32


433 
î∫o
 = 
	`WSAGëLa°Eº‹
();

435 if(
î∫o
 =
EAGAIN
 ||Éºnÿ=
COMPAT_EWOULDBLOCK
){

436  
MOSQ_ERR_SUCCESS
;

438 
î∫o
){

439 
COMPAT_ECONNRESET
:

440  
MOSQ_ERR_CONN_LOST
;

441 
COMPAT_EINTR
:

442  
MOSQ_ERR_SUCCESS
;

444  
MOSQ_ERR_ERRNO
;

448 }(
byã
 & 128) != 0);

451 
mosq
->
ö_∑ckë
.
ªmaöög_cou¡
 = (
öt8_t
)(mosq->in_packet.remaining_count * -1);

453 #ifde‡
WITH_BROKER


454 
mosq
->
ö_∑ckë
.
comm™d
 & 0xF0){

455 
CMD_CONNECT
:

456 if(
mosq
->
ö_∑ckë
.
ªmaöög_Àngth
 > 100000){

457  
MOSQ_ERR_MALFORMED_PACKET
;

461 
CMD_PUBACK
:

462 
CMD_PUBREC
:

463 
CMD_PUBREL
:

464 
CMD_PUBCOMP
:

465 
CMD_UNSUBACK
:

466 if(
mosq
->
¥Ÿocﬁ
 !
mosq_p_mqâ5
 && mosq->
ö_∑ckë
.
ªmaöög_Àngth
 != 2){

467  
MOSQ_ERR_MALFORMED_PACKET
;

471 
CMD_PINGREQ
:

472 
CMD_PINGRESP
:

473 if(
mosq
->
ö_∑ckë
.
ªmaöög_Àngth
 != 0){

474  
MOSQ_ERR_MALFORMED_PACKET
;

478 
CMD_DISCONNECT
:

479 if(
mosq
->
¥Ÿocﬁ
 !
mosq_p_mqâ5
 && mosq->
ö_∑ckë
.
ªmaöög_Àngth
 != 0){

480  
MOSQ_ERR_MALFORMED_PACKET
;

485 if(
db
.
c⁄fig
->
max_∑ckë_size
 > 0 && 
mosq
->
ö_∑ckë
.
ªmaöög_Àngth
+1 > db.config->max_packet_size){

486 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

487 
	`£nd__disc⁄√˘
(
mosq
, 
MQTT_RC_PACKET_TOO_LARGE
, 
NULL
);

489  
MOSQ_ERR_OVERSIZE_PACKET
;

494 if(
mosq
->
ö_∑ckë
.
ªmaöög_Àngth
 > 0){

495 
mosq
->
ö_∑ckë
.
∑ylﬂd
 = 
	`mosquôto__mÆloc
(mosq->ö_∑ckë.
ªmaöög_Àngth
*(
uöt8_t
));

496 if(!
mosq
->
ö_∑ckë
.
∑ylﬂd
){

497  
MOSQ_ERR_NOMEM
;

499 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 = mosq->ö_∑ckë.
ªmaöög_Àngth
;

502 
mosq
->
ö_∑ckë
.
to_¥o˚ss
>0){

503 
ªad_Àngth
 = 
	`√t__ªad
(
mosq
, &(mosq->
ö_∑ckë
.
∑ylﬂd
[mosq->ö_∑ckë.
pos
]), mosq->ö_∑ckë.
to_¥o˚ss
);

504 if(
ªad_Àngth
 > 0){

505 
	`G_BYTES_RECEIVED_INC
(
ªad_Àngth
);

506 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 -(
uöt32_t
)
ªad_Àngth
;

507 
mosq
->
ö_∑ckë
.
pos
 +(
uöt32_t
)
ªad_Àngth
;

509 #ifde‡
WIN32


510 
î∫o
 = 
	`WSAGëLa°Eº‹
();

512 if(
î∫o
 =
EAGAIN
 ||Éºnÿ=
COMPAT_EWOULDBLOCK
){

513 if(
mosq
->
ö_∑ckë
.
to_¥o˚ss
 > 1000){

519 #ifde‡
WITH_BROKER


520 
	`kì∑live__upd©e
(
mosq
);

522 
	`±hªad_muãx_lock
(&
mosq
->
msgtime_muãx
);

523 
mosq
->
œ°_msg_ö
 = 
	`mosquôto_time
();

524 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgtime_muãx
);

527  
MOSQ_ERR_SUCCESS
;

529 
î∫o
){

530 
COMPAT_ECONNRESET
:

531  
MOSQ_ERR_CONN_LOST
;

532 
COMPAT_EINTR
:

533  
MOSQ_ERR_SUCCESS
;

535  
MOSQ_ERR_ERRNO
;

542 
mosq
->
ö_∑ckë
.
pos
 = 0;

543 #ifde‡
WITH_BROKER


544 
	`G_MSGS_RECEIVED_INC
(1);

545 if(((
mosq
->
ö_∑ckë
.
comm™d
)&0xF0Ë=
CMD_PUBLISH
){

546 
	`G_PUB_MSGS_RECEIVED_INC
(1);

549 
rc
 = 
	`h™dÀ__∑ckë
(
mosq
);

552 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

554 #ifde‡
WITH_BROKER


555 
	`kì∑live__upd©e
(
mosq
);

557 
	`±hªad_muãx_lock
(&
mosq
->
msgtime_muãx
);

558 
mosq
->
œ°_msg_ö
 = 
	`mosquôto_time
();

559 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgtime_muãx
);

561  
rc
;

562 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/packet_mosq.h

18 #i‚de‡
PACKET_MOSQ_H


19 
	#PACKET_MOSQ_H


	)

21 
	~"mosquôto_öã∫Æ.h
"

22 
	~"mosquôto.h
"

24 
∑ckë__Æloc
(
mosquôto__∑ckë
 *
∑ckë
);

25 
∑ckë__˛ónup
(
mosquôto__∑ckë
 *
∑ckë
);

26 
∑ckë__˛ónup_Æl
(
mosquôto
 *
mosq
);

27 
∑ckë__˛ónup_Æl_no_locks
(
mosquôto
 *
mosq
);

28 
∑ckë__queue
(
mosquôto
 *
mosq
, 
mosquôto__∑ckë
 *
∑ckë
);

30 
∑ckë__check_ovîsize
(
mosquôto
 *
mosq
, 
uöt32_t
 
ªmaöög_Àngth
);

32 
∑ckë__ªad_byã
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt8_t
 *
byã
);

33 
∑ckë__ªad_byãs
(
mosquôto__∑ckë
 *
∑ckë
, *
byãs
, 
uöt32_t
 
cou¡
);

34 
∑ckë__ªad_bö¨y
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt8_t
 **
d©a
, 
uöt16_t
 *
Àngth
);

35 
∑ckë__ªad_°rög
(
mosquôto__∑ckë
 *
∑ckë
, **
°r
, 
uöt16_t
 *
Àngth
);

36 
∑ckë__ªad_uöt16
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt16_t
 *
w‹d
);

37 
∑ckë__ªad_uöt32
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt32_t
 *
w‹d
);

38 
∑ckë__ªad_v¨öt
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt32_t
 *
w‹d
, 
uöt8_t
 *
byãs
);

40 
∑ckë__wrôe_byã
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt8_t
 
byã
);

41 
∑ckë__wrôe_byãs
(
mosquôto__∑ckë
 *
∑ckë
, c⁄° *
byãs
, 
uöt32_t
 
cou¡
);

42 
∑ckë__wrôe_°rög
(
mosquôto__∑ckë
 *
∑ckë
, c⁄° *
°r
, 
uöt16_t
 
Àngth
);

43 
∑ckë__wrôe_uöt16
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt16_t
 
w‹d
);

44 
∑ckë__wrôe_uöt32
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt32_t
 
w‹d
);

45 
∑ckë__wrôe_v¨öt
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt32_t
 
w‹d
);

47 
∑ckë__v¨öt_byãs
(
uöt32_t
 
w‹d
);

49 
∑ckë__wrôe
(
mosquôto
 *
mosq
);

50 
∑ckë__ªad
(
mosquôto
 *
mosq
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/property_mosq.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<î∫o.h
>

23 
	~<°rög.h
>

25 #i‚de‡
WIN32


26 
	~<°rögs.h
>

29 
	~"loggög_mosq.h
"

30 
	~"mem‹y_mosq.h
"

31 
	~"mqâ_¥Ÿocﬁ.h
"

32 
	~"∑ckë_mosq.h
"

33 
	~"¥›îty_mosq.h
"

36 
	$¥›îty__ªad
(
mosquôto__∑ckë
 *
∑ckë
, 
uöt32_t
 *
Àn
, 
mosquôto_¥›îty
 *
¥›îty
)

38 
rc
;

39 
uöt32_t
 
¥›îty_idítifõr
;

40 
uöt8_t
 
byã
;

41 
uöt8_t
 
byã_cou¡
;

42 
uöt16_t
 
uöt16
;

43 
uöt32_t
 
uöt32
;

44 
uöt32_t
 
v¨öt
;

45 *
°r1
, *
°r2
;

46 
uöt16_t
 
¶í1
, 
¶í2
;

48 if(!
¥›îty
Ë 
MOSQ_ERR_INVAL
;

50 
rc
 = 
	`∑ckë__ªad_v¨öt
(
∑ckë
, &
¥›îty_idítifõr
, 
NULL
);

51 if(
rc
){

52  
rc
;

54 *
Àn
 -= 1;

56 
	`mem£t
(
¥›îty
, 0, (
mosquôto_¥›îty
));

58 
¥›îty
->
idítifõr
 = (
öt32_t
)
¥›îty_idítifõr
;

60 
¥›îty_idítifõr
){

61 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
:

62 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
:

63 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
:

64 
MQTT_PROP_MAXIMUM_QOS
:

65 
MQTT_PROP_RETAIN_AVAILABLE
:

66 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
:

67 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
:

68 
MQTT_PROP_SHARED_SUB_AVAILABLE
:

69 
rc
 = 
	`∑ckë__ªad_byã
(
∑ckë
, &
byã
);

70 if(
rc
) Ñc;

71 *
Àn
 -= 1;

72 
¥›îty
->
vÆue
.
i8
 = 
byã
;

75 
MQTT_PROP_SERVER_KEEP_ALIVE
:

76 
MQTT_PROP_RECEIVE_MAXIMUM
:

77 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
:

78 
MQTT_PROP_TOPIC_ALIAS
:

79 
rc
 = 
	`∑ckë__ªad_uöt16
(
∑ckë
, &
uöt16
);

80 if(
rc
) Ñc;

81 *
Àn
 -= 2;

82 
¥›îty
->
vÆue
.
i16
 = 
uöt16
;

85 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
:

86 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
:

87 
MQTT_PROP_WILL_DELAY_INTERVAL
:

88 
MQTT_PROP_MAXIMUM_PACKET_SIZE
:

89 
rc
 = 
	`∑ckë__ªad_uöt32
(
∑ckë
, &
uöt32
);

90 if(
rc
) Ñc;

91 *
Àn
 -= 4;

92 
¥›îty
->
vÆue
.
i32
 = 
uöt32
;

95 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
:

96 
rc
 = 
	`∑ckë__ªad_v¨öt
(
∑ckë
, &
v¨öt
, &
byã_cou¡
);

97 if(
rc
) Ñc;

98 *
Àn
 -
byã_cou¡
;

99 
¥›îty
->
vÆue
.
v¨öt
 = varint;

102 
MQTT_PROP_CONTENT_TYPE
:

103 
MQTT_PROP_RESPONSE_TOPIC
:

104 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
:

105 
MQTT_PROP_AUTHENTICATION_METHOD
:

106 
MQTT_PROP_RESPONSE_INFORMATION
:

107 
MQTT_PROP_SERVER_REFERENCE
:

108 
MQTT_PROP_REASON_STRING
:

109 
rc
 = 
	`∑ckë__ªad_°rög
(
∑ckë
, &
°r1
, &
¶í1
);

110 if(
rc
) Ñc;

111 *
Àn
 = (*ÀnË- 2 - 
¶í1
;

112 
¥›îty
->
vÆue
.
s
.
v
 = 
°r1
;

113 
¥›îty
->
vÆue
.
s
.
Àn
 = 
¶í1
;

116 
MQTT_PROP_AUTHENTICATION_DATA
:

117 
MQTT_PROP_CORRELATION_DATA
:

118 
rc
 = 
	`∑ckë__ªad_bö¨y
(
∑ckë
, (
uöt8_t
 **)&
°r1
, &
¶í1
);

119 if(
rc
) Ñc;

120 *
Àn
 = (*ÀnË- 2 - 
¶í1
;

121 
¥›îty
->
vÆue
.
bö
.
v
 = 
°r1
;

122 
¥›îty
->
vÆue
.
bö
.
Àn
 = 
¶í1
;

125 
MQTT_PROP_USER_PROPERTY
:

126 
rc
 = 
	`∑ckë__ªad_°rög
(
∑ckë
, &
°r1
, &
¶í1
);

127 if(
rc
) Ñc;

128 *
Àn
 = (*ÀnË- 2 - 
¶í1
;

130 
rc
 = 
	`∑ckë__ªad_°rög
(
∑ckë
, &
°r2
, &
¶í2
);

131 if(
rc
){

132 
	`mosquôto__‰ì
(
°r1
);

133  
rc
;

135 *
Àn
 = (*ÀnË- 2 - 
¶í2
;

137 
¥›îty
->
«me
.
v
 = 
°r1
;

138 
¥›îty
->
«me
.
Àn
 = 
¶í1
;

139 
¥›îty
->
vÆue
.
s
.
v
 = 
°r2
;

140 
¥›îty
->
vÆue
.
s
.
Àn
 = 
¶í2
;

144 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Unsuµ‹ãdÖr›îtyÅy≥: %d", 
¥›îty_idítifõr
);

145  
MOSQ_ERR_MALFORMED_PACKET
;

148  
MOSQ_ERR_SUCCESS
;

149 
	}
}

152 
	$¥›îty__ªad_Æl
(
comm™d
, 
mosquôto__∑ckë
 *
∑ckë
, 
mosquôto_¥›îty
 **
¥›îtõs
)

154 
rc
;

155 
uöt32_t
 
¥›Àn
;

156 
mosquôto_¥›îty
 *
p
, *
èû
 = 
NULL
;

158 
rc
 = 
	`∑ckë__ªad_v¨öt
(
∑ckë
, &
¥›Àn
, 
NULL
);

159 if(
rc
) Ñc;

161 *
¥›îtõs
 = 
NULL
;

165 
¥›Àn
 > 0){

166 
p
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_¥›îty
));

167 if(!
p
){

168 
	`mosquôto_¥›îty_‰ì_Æl
(
¥›îtõs
);

169  
MOSQ_ERR_NOMEM
;

172 
rc
 = 
	`¥›îty__ªad
(
∑ckë
, &
¥›Àn
, 
p
);

173 if(
rc
){

174 
	`mosquôto__‰ì
(
p
);

175 
	`mosquôto_¥›îty_‰ì_Æl
(
¥›îtõs
);

176  
rc
;

179 if(!(*
¥›îtõs
)){

180 *
¥›îtõs
 = 
p
;

182 
èû
->
√xt
 = 
p
;

184 
èû
 = 
p
;

188 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
comm™d
, *
¥›îtõs
);

189 if(
rc
){

190 
	`mosquôto_¥›îty_‰ì_Æl
(
¥›îtõs
);

191  
rc
;

193  
MOSQ_ERR_SUCCESS
;

194 
	}
}

197 
	$¥›îty__‰ì
(
mosquôto_¥›îty
 **
¥›îty
)

199 if(!
¥›îty
 || !(*property)) ;

201 (*
¥›îty
)->
idítifõr
){

202 
MQTT_PROP_CONTENT_TYPE
:

203 
MQTT_PROP_RESPONSE_TOPIC
:

204 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
:

205 
MQTT_PROP_AUTHENTICATION_METHOD
:

206 
MQTT_PROP_RESPONSE_INFORMATION
:

207 
MQTT_PROP_SERVER_REFERENCE
:

208 
MQTT_PROP_REASON_STRING
:

209 
	`mosquôto__‰ì
((*
¥›îty
)->
vÆue
.
s
.
v
);

212 
MQTT_PROP_AUTHENTICATION_DATA
:

213 
MQTT_PROP_CORRELATION_DATA
:

214 
	`mosquôto__‰ì
((*
¥›îty
)->
vÆue
.
bö
.
v
);

217 
MQTT_PROP_USER_PROPERTY
:

218 
	`mosquôto__‰ì
((*
¥›îty
)->
«me
.
v
);

219 
	`mosquôto__‰ì
((*
¥›îty
)->
vÆue
.
s
.
v
);

222 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
:

223 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
:

224 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
:

225 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
:

226 
MQTT_PROP_SERVER_KEEP_ALIVE
:

227 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
:

228 
MQTT_PROP_WILL_DELAY_INTERVAL
:

229 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
:

230 
MQTT_PROP_RECEIVE_MAXIMUM
:

231 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
:

232 
MQTT_PROP_TOPIC_ALIAS
:

233 
MQTT_PROP_MAXIMUM_QOS
:

234 
MQTT_PROP_RETAIN_AVAILABLE
:

235 
MQTT_PROP_MAXIMUM_PACKET_SIZE
:

236 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
:

237 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
:

238 
MQTT_PROP_SHARED_SUB_AVAILABLE
:

243 
	`‰ì
(*
¥›îty
);

244 *
¥›îty
 = 
NULL
;

245 
	}
}

248 
	$mosquôto_¥›îty_‰ì_Æl
(
mosquôto_¥›îty
 **
¥›îty
)

250 
mosquôto_¥›îty
 *
p
, *
√xt
;

252 if(!
¥›îty
) ;

254 
p
 = *
¥›îty
;

255 
p
){

256 
√xt
 = 
p
->next;

257 
	`¥›îty__‰ì
(&
p
);

258 
p
 = 
√xt
;

260 *
¥›îty
 = 
NULL
;

261 
	}
}

264 
	$¥›îty__gë_Àngth
(c⁄° 
mosquôto_¥›îty
 *
¥›îty
)

266 if(!
¥›îty
)  0;

268 
¥›îty
->
idítifõr
){

270 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
:

271 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
:

272 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
:

273 
MQTT_PROP_MAXIMUM_QOS
:

274 
MQTT_PROP_RETAIN_AVAILABLE
:

275 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
:

276 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
:

277 
MQTT_PROP_SHARED_SUB_AVAILABLE
:

281 
MQTT_PROP_SERVER_KEEP_ALIVE
:

282 
MQTT_PROP_RECEIVE_MAXIMUM
:

283 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
:

284 
MQTT_PROP_TOPIC_ALIAS
:

288 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
:

289 
MQTT_PROP_WILL_DELAY_INTERVAL
:

290 
MQTT_PROP_MAXIMUM_PACKET_SIZE
:

291 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
:

295 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
:

296 if(
¥›îty
->
vÆue
.
v¨öt
 < 128){

298 }if(
¥›îty
->
vÆue
.
v¨öt
 < 16384){

300 }if(
¥›îty
->
vÆue
.
v¨öt
 < 2097152){

302 }if(
¥›îty
->
vÆue
.
v¨öt
 < 268435456){

309 
MQTT_PROP_CORRELATION_DATA
:

310 
MQTT_PROP_AUTHENTICATION_DATA
:

311  3U + 
¥›îty
->
vÆue
.
bö
.
Àn
;

314 
MQTT_PROP_CONTENT_TYPE
:

315 
MQTT_PROP_RESPONSE_TOPIC
:

316 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
:

317 
MQTT_PROP_AUTHENTICATION_METHOD
:

318 
MQTT_PROP_RESPONSE_INFORMATION
:

319 
MQTT_PROP_SERVER_REFERENCE
:

320 
MQTT_PROP_REASON_STRING
:

321  3U + 
¥›îty
->
vÆue
.
s
.
Àn
;

324 
MQTT_PROP_USER_PROPERTY
:

325  5U + 
¥›îty
->
vÆue
.
s
.
Àn
 +Ör›îty->
«me
.len;

331 
	}
}

334 
	$¥›îty__gë_Àngth_Æl
(c⁄° 
mosquôto_¥›îty
 *
¥›îty
)

336 c⁄° 
mosquôto_¥›îty
 *
p
;

337 
Àn
 = 0;

339 
p
 = 
¥›îty
;

340 
p
){

341 
Àn
 +
	`¥›îty__gë_Àngth
(
p
);

342 
p
 =Ö->
√xt
;

344  
Àn
;

345 
	}
}

350 
	$¥›îty__gë_ªmaöög_Àngth
(c⁄° 
mosquôto_¥›îty
 *
¥›s
)

352 
¥›Àn
, 
v¨byãs
;

354 
¥›Àn
 = 
	`¥›îty__gë_Àngth_Æl
(
¥›s
);

355 
v¨byãs
 = 
	`∑ckë__v¨öt_byãs
(
¥›Àn
);

356  
¥›Àn
 + 
v¨byãs
;

357 
	}
}

360 
	$¥›îty__wrôe
(
mosquôto__∑ckë
 *
∑ckë
, c⁄° 
mosquôto_¥›îty
 *
¥›îty
)

362 
rc
;

364 
rc
 = 
	`∑ckë__wrôe_v¨öt
(
∑ckë
, (
uöt32_t
)
¥›îty
->
idítifõr
);

365 if(
rc
) Ñc;

367 
¥›îty
->
idítifõr
){

368 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
:

369 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
:

370 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
:

371 
MQTT_PROP_MAXIMUM_QOS
:

372 
MQTT_PROP_RETAIN_AVAILABLE
:

373 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
:

374 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
:

375 
MQTT_PROP_SHARED_SUB_AVAILABLE
:

376 
	`∑ckë__wrôe_byã
(
∑ckë
, 
¥›îty
->
vÆue
.
i8
);

379 
MQTT_PROP_SERVER_KEEP_ALIVE
:

380 
MQTT_PROP_RECEIVE_MAXIMUM
:

381 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
:

382 
MQTT_PROP_TOPIC_ALIAS
:

383 
	`∑ckë__wrôe_uöt16
(
∑ckë
, 
¥›îty
->
vÆue
.
i16
);

386 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
:

387 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
:

388 
MQTT_PROP_WILL_DELAY_INTERVAL
:

389 
MQTT_PROP_MAXIMUM_PACKET_SIZE
:

390 
	`∑ckë__wrôe_uöt32
(
∑ckë
, 
¥›îty
->
vÆue
.
i32
);

393 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
:

394  
	`∑ckë__wrôe_v¨öt
(
∑ckë
, 
¥›îty
->
vÆue
.
v¨öt
);

396 
MQTT_PROP_CONTENT_TYPE
:

397 
MQTT_PROP_RESPONSE_TOPIC
:

398 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
:

399 
MQTT_PROP_AUTHENTICATION_METHOD
:

400 
MQTT_PROP_RESPONSE_INFORMATION
:

401 
MQTT_PROP_SERVER_REFERENCE
:

402 
MQTT_PROP_REASON_STRING
:

403 
	`∑ckë__wrôe_°rög
(
∑ckë
, 
¥›îty
->
vÆue
.
s
.
v
,Ör›îty->vÆue.s.
Àn
);

406 
MQTT_PROP_AUTHENTICATION_DATA
:

407 
MQTT_PROP_CORRELATION_DATA
:

408 
	`∑ckë__wrôe_uöt16
(
∑ckë
, 
¥›îty
->
vÆue
.
bö
.
Àn
);

409 
	`∑ckë__wrôe_byãs
(
∑ckë
, 
¥›îty
->
vÆue
.
bö
.
v
,Ör›îty->vÆue.bö.
Àn
);

412 
MQTT_PROP_USER_PROPERTY
:

413 
	`∑ckë__wrôe_°rög
(
∑ckë
, 
¥›îty
->
«me
.
v
,Ör›îty->«me.
Àn
);

414 
	`∑ckë__wrôe_°rög
(
∑ckë
, 
¥›îty
->
vÆue
.
s
.
v
,Ör›îty->vÆue.s.
Àn
);

418 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Unsuµ‹ãdÖr›îtyÅy≥: %d", 
¥›îty
->
idítifõr
);

419  
MOSQ_ERR_INVAL
;

422  
MOSQ_ERR_SUCCESS
;

423 
	}
}

426 
	$¥›îty__wrôe_Æl
(
mosquôto__∑ckë
 *
∑ckë
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
, 
boﬁ
 
wrôe_Àn
)

428 
rc
;

429 c⁄° 
mosquôto_¥›îty
 *
p
;

431 if(
wrôe_Àn
){

432 
rc
 = 
	`∑ckë__wrôe_v¨öt
(
∑ckë
, 
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
));

433 if(
rc
) Ñc;

436 
p
 = 
¥›îtõs
;

437 
p
){

438 
rc
 = 
	`¥›îty__wrôe
(
∑ckë
, 
p
);

439 if(
rc
) Ñc;

440 
p
 =Ö->
√xt
;

443  
MOSQ_ERR_SUCCESS
;

444 
	}
}

447 
	$mosquôto_¥›îty_check_comm™d
(
comm™d
, 
idítifõr
)

449 
idítifõr
){

450 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
:

451 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
:

452 
MQTT_PROP_CONTENT_TYPE
:

453 
MQTT_PROP_RESPONSE_TOPIC
:

454 
MQTT_PROP_CORRELATION_DATA
:

455 if(
comm™d
 !
CMD_PUBLISH
 && comm™d !
CMD_WILL
){

456  
MOSQ_ERR_PROTOCOL
;

460 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
:

461 if(
comm™d
 !
CMD_PUBLISH
 && comm™d !
CMD_SUBSCRIBE
){

462  
MOSQ_ERR_PROTOCOL
;

466 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
:

467 if(
comm™d
 !
CMD_CONNECT
 && comm™d !
CMD_CONNACK
 && comm™d !
CMD_DISCONNECT
){

468  
MOSQ_ERR_PROTOCOL
;

472 
MQTT_PROP_AUTHENTICATION_METHOD
:

473 
MQTT_PROP_AUTHENTICATION_DATA
:

474 if(
comm™d
 !
CMD_CONNECT
 && comm™d !
CMD_CONNACK
 && comm™d !
CMD_AUTH
){

475  
MOSQ_ERR_PROTOCOL
;

479 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
:

480 
MQTT_PROP_SERVER_KEEP_ALIVE
:

481 
MQTT_PROP_RESPONSE_INFORMATION
:

482 
MQTT_PROP_MAXIMUM_QOS
:

483 
MQTT_PROP_RETAIN_AVAILABLE
:

484 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
:

485 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
:

486 
MQTT_PROP_SHARED_SUB_AVAILABLE
:

487 if(
comm™d
 !
CMD_CONNACK
){

488  
MOSQ_ERR_PROTOCOL
;

492 
MQTT_PROP_WILL_DELAY_INTERVAL
:

493 if(
comm™d
 !
CMD_WILL
){

494  
MOSQ_ERR_PROTOCOL
;

498 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
:

499 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
:

500 if(
comm™d
 !
CMD_CONNECT
){

501  
MOSQ_ERR_PROTOCOL
;

505 
MQTT_PROP_SERVER_REFERENCE
:

506 if(
comm™d
 !
CMD_CONNACK
 && comm™d !
CMD_DISCONNECT
){

507  
MOSQ_ERR_PROTOCOL
;

511 
MQTT_PROP_REASON_STRING
:

512 if(
comm™d
 =
CMD_CONNECT
 || comm™d =
CMD_PUBLISH
 || comm™d =
CMD_SUBSCRIBE
 || comm™d =
CMD_UNSUBSCRIBE
){

513  
MOSQ_ERR_PROTOCOL
;

517 
MQTT_PROP_RECEIVE_MAXIMUM
:

518 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
:

519 
MQTT_PROP_MAXIMUM_PACKET_SIZE
:

520 if(
comm™d
 !
CMD_CONNECT
 && comm™d !
CMD_CONNACK
){

521  
MOSQ_ERR_PROTOCOL
;

525 
MQTT_PROP_TOPIC_ALIAS
:

526 if(
comm™d
 !
CMD_PUBLISH
){

527  
MOSQ_ERR_PROTOCOL
;

531 
MQTT_PROP_USER_PROPERTY
:

535  
MOSQ_ERR_PROTOCOL
;

537  
MOSQ_ERR_SUCCESS
;

538 
	}
}

541 c⁄° *
	$mosquôto_¥›îty_idítifõr_to_°rög
(
idítifõr
)

543 
idítifõr
){

544 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
:

546 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
:

548 
MQTT_PROP_CONTENT_TYPE
:

550 
MQTT_PROP_RESPONSE_TOPIC
:

552 
MQTT_PROP_CORRELATION_DATA
:

554 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
:

556 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
:

558 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
:

560 
MQTT_PROP_SERVER_KEEP_ALIVE
:

562 
MQTT_PROP_AUTHENTICATION_METHOD
:

564 
MQTT_PROP_AUTHENTICATION_DATA
:

566 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
:

568 
MQTT_PROP_WILL_DELAY_INTERVAL
:

570 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
:

572 
MQTT_PROP_RESPONSE_INFORMATION
:

574 
MQTT_PROP_SERVER_REFERENCE
:

576 
MQTT_PROP_REASON_STRING
:

578 
MQTT_PROP_RECEIVE_MAXIMUM
:

580 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
:

582 
MQTT_PROP_TOPIC_ALIAS
:

584 
MQTT_PROP_MAXIMUM_QOS
:

586 
MQTT_PROP_RETAIN_AVAILABLE
:

588 
MQTT_PROP_USER_PROPERTY
:

590 
MQTT_PROP_MAXIMUM_PACKET_SIZE
:

592 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
:

594 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
:

596 
MQTT_PROP_SHARED_SUB_AVAILABLE
:

599  
NULL
;

601 
	}
}

604 
	$mosquôto_°rög_to_¥›îty_öfo
(c⁄° *
¥›«me
, *
idítifõr
, *
ty≥
)

606 if(!
¥›«me
Ë 
MOSQ_ERR_INVAL
;

608 if(!
	`°rˇ£cmp
(
¥›«me
, "payload-format-indicator")){

609 *
idítifõr
 = 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
;

610 *
ty≥
 = 
MQTT_PROP_TYPE_BYTE
;

611 }if(!
	`°rˇ£cmp
(
¥›«me
, "message-expiry-interval")){

612 *
idítifõr
 = 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
;

613 *
ty≥
 = 
MQTT_PROP_TYPE_INT32
;

614 }if(!
	`°rˇ£cmp
(
¥›«me
, "content-type")){

615 *
idítifõr
 = 
MQTT_PROP_CONTENT_TYPE
;

616 *
ty≥
 = 
MQTT_PROP_TYPE_STRING
;

617 }if(!
	`°rˇ£cmp
(
¥›«me
, "response-topic")){

618 *
idítifõr
 = 
MQTT_PROP_RESPONSE_TOPIC
;

619 *
ty≥
 = 
MQTT_PROP_TYPE_STRING
;

620 }if(!
	`°rˇ£cmp
(
¥›«me
, "correlation-data")){

621 *
idítifõr
 = 
MQTT_PROP_CORRELATION_DATA
;

622 *
ty≥
 = 
MQTT_PROP_TYPE_BINARY
;

623 }if(!
	`°rˇ£cmp
(
¥›«me
, "subscription-identifier")){

624 *
idítifõr
 = 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
;

625 *
ty≥
 = 
MQTT_PROP_TYPE_VARINT
;

626 }if(!
	`°rˇ£cmp
(
¥›«me
, "session-expiry-interval")){

627 *
idítifõr
 = 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
;

628 *
ty≥
 = 
MQTT_PROP_TYPE_INT32
;

629 }if(!
	`°rˇ£cmp
(
¥›«me
, "assigned-client-identifier")){

630 *
idítifõr
 = 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
;

631 *
ty≥
 = 
MQTT_PROP_TYPE_STRING
;

632 }if(!
	`°rˇ£cmp
(
¥›«me
, "server-keep-alive")){

633 *
idítifõr
 = 
MQTT_PROP_SERVER_KEEP_ALIVE
;

634 *
ty≥
 = 
MQTT_PROP_TYPE_INT16
;

635 }if(!
	`°rˇ£cmp
(
¥›«me
, "authentication-method")){

636 *
idítifõr
 = 
MQTT_PROP_AUTHENTICATION_METHOD
;

637 *
ty≥
 = 
MQTT_PROP_TYPE_STRING
;

638 }if(!
	`°rˇ£cmp
(
¥›«me
, "authentication-data")){

639 *
idítifõr
 = 
MQTT_PROP_AUTHENTICATION_DATA
;

640 *
ty≥
 = 
MQTT_PROP_TYPE_BINARY
;

641 }if(!
	`°rˇ£cmp
(
¥›«me
, "request-problem-information")){

642 *
idítifõr
 = 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
;

643 *
ty≥
 = 
MQTT_PROP_TYPE_BYTE
;

644 }if(!
	`°rˇ£cmp
(
¥›«me
, "will-delay-interval")){

645 *
idítifõr
 = 
MQTT_PROP_WILL_DELAY_INTERVAL
;

646 *
ty≥
 = 
MQTT_PROP_TYPE_INT32
;

647 }if(!
	`°rˇ£cmp
(
¥›«me
, "request-response-information")){

648 *
idítifõr
 = 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
;

649 *
ty≥
 = 
MQTT_PROP_TYPE_BYTE
;

650 }if(!
	`°rˇ£cmp
(
¥›«me
, "response-information")){

651 *
idítifõr
 = 
MQTT_PROP_RESPONSE_INFORMATION
;

652 *
ty≥
 = 
MQTT_PROP_TYPE_STRING
;

653 }if(!
	`°rˇ£cmp
(
¥›«me
, "server-reference")){

654 *
idítifõr
 = 
MQTT_PROP_SERVER_REFERENCE
;

655 *
ty≥
 = 
MQTT_PROP_TYPE_STRING
;

656 }if(!
	`°rˇ£cmp
(
¥›«me
, "reason-string")){

657 *
idítifõr
 = 
MQTT_PROP_REASON_STRING
;

658 *
ty≥
 = 
MQTT_PROP_TYPE_STRING
;

659 }if(!
	`°rˇ£cmp
(
¥›«me
, "receive-maximum")){

660 *
idítifõr
 = 
MQTT_PROP_RECEIVE_MAXIMUM
;

661 *
ty≥
 = 
MQTT_PROP_TYPE_INT16
;

662 }if(!
	`°rˇ£cmp
(
¥›«me
, "topic-alias-maximum")){

663 *
idítifõr
 = 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
;

664 *
ty≥
 = 
MQTT_PROP_TYPE_INT16
;

665 }if(!
	`°rˇ£cmp
(
¥›«me
, "topic-alias")){

666 *
idítifõr
 = 
MQTT_PROP_TOPIC_ALIAS
;

667 *
ty≥
 = 
MQTT_PROP_TYPE_INT16
;

668 }if(!
	`°rˇ£cmp
(
¥›«me
, "maximum-qos")){

669 *
idítifõr
 = 
MQTT_PROP_MAXIMUM_QOS
;

670 *
ty≥
 = 
MQTT_PROP_TYPE_BYTE
;

671 }if(!
	`°rˇ£cmp
(
¥›«me
, "retain-available")){

672 *
idítifõr
 = 
MQTT_PROP_RETAIN_AVAILABLE
;

673 *
ty≥
 = 
MQTT_PROP_TYPE_BYTE
;

674 }if(!
	`°rˇ£cmp
(
¥›«me
, "user-property")){

675 *
idítifõr
 = 
MQTT_PROP_USER_PROPERTY
;

676 *
ty≥
 = 
MQTT_PROP_TYPE_STRING_PAIR
;

677 }if(!
	`°rˇ£cmp
(
¥›«me
, "maximum-packet-size")){

678 *
idítifõr
 = 
MQTT_PROP_MAXIMUM_PACKET_SIZE
;

679 *
ty≥
 = 
MQTT_PROP_TYPE_INT32
;

680 }if(!
	`°rˇ£cmp
(
¥›«me
, "wildcard-subscription-available")){

681 *
idítifõr
 = 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
;

682 *
ty≥
 = 
MQTT_PROP_TYPE_BYTE
;

683 }if(!
	`°rˇ£cmp
(
¥›«me
, "subscription-identifier-available")){

684 *
idítifõr
 = 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
;

685 *
ty≥
 = 
MQTT_PROP_TYPE_BYTE
;

686 }if(!
	`°rˇ£cmp
(
¥›«me
, "shared-subscription-available")){

687 *
idítifõr
 = 
MQTT_PROP_SHARED_SUB_AVAILABLE
;

688 *
ty≥
 = 
MQTT_PROP_TYPE_BYTE
;

690  
MOSQ_ERR_INVAL
;

692  
MOSQ_ERR_SUCCESS
;

693 
	}
}

696 
	$¥›îty__add
(
mosquôto_¥›îty
 **
¥›li°
, 
mqâ5__¥›îty
 *
¥›
)

698 
mosquôto_¥›îty
 *
p
;

700 if(!(*
¥›li°
)){

701 *
¥›li°
 = 
¥›
;

704 
p
 = *
¥›li°
;

705 
p
->
√xt
){

706 
p
 =Ö->
√xt
;

708 
p
->
√xt
 = 
¥›
;

709 
¥›
->
√xt
 = 
NULL
;

710 
	}
}

713 
	$mosquôto_¥›îty_add_byã
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, 
uöt8_t
 
vÆue
)

715 
mosquôto_¥›îty
 *
¥›
;

717 if(!
¥›li°
Ë 
MOSQ_ERR_INVAL
;

718 if(
idítifõr
 !
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR


719 && 
idítifõr
 !
MQTT_PROP_REQUEST_PROBLEM_INFORMATION


720 && 
idítifõr
 !
MQTT_PROP_REQUEST_RESPONSE_INFORMATION


721 && 
idítifõr
 !
MQTT_PROP_MAXIMUM_QOS


722 && 
idítifõr
 !
MQTT_PROP_RETAIN_AVAILABLE


723 && 
idítifõr
 !
MQTT_PROP_WILDCARD_SUB_AVAILABLE


724 && 
idítifõr
 !
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE


725 && 
idítifõr
 !
MQTT_PROP_SHARED_SUB_AVAILABLE
){

726  
MOSQ_ERR_INVAL
;

729 
¥›
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_¥›îty
));

730 if(!
¥›
Ë 
MOSQ_ERR_NOMEM
;

732 
¥›
->
˛õ¡_gíî©ed
 = 
åue
;

733 
¥›
->
idítifõr
 = identifier;

734 
¥›
->
vÆue
.
i8
 = value;

736 
	`¥›îty__add
(
¥›li°
, 
¥›
);

737  
MOSQ_ERR_SUCCESS
;

738 
	}
}

741 
	$mosquôto_¥›îty_add_öt16
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, 
uöt16_t
 
vÆue
)

743 
mosquôto_¥›îty
 *
¥›
;

745 if(!
¥›li°
Ë 
MOSQ_ERR_INVAL
;

746 if(
idítifõr
 !
MQTT_PROP_SERVER_KEEP_ALIVE


747 && 
idítifõr
 !
MQTT_PROP_RECEIVE_MAXIMUM


748 && 
idítifõr
 !
MQTT_PROP_TOPIC_ALIAS_MAXIMUM


749 && 
idítifõr
 !
MQTT_PROP_TOPIC_ALIAS
){

750  
MOSQ_ERR_INVAL
;

753 
¥›
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_¥›îty
));

754 if(!
¥›
Ë 
MOSQ_ERR_NOMEM
;

756 
¥›
->
˛õ¡_gíî©ed
 = 
åue
;

757 
¥›
->
idítifõr
 = identifier;

758 
¥›
->
vÆue
.
i16
 = value;

760 
	`¥›îty__add
(
¥›li°
, 
¥›
);

761  
MOSQ_ERR_SUCCESS
;

762 
	}
}

765 
	$mosquôto_¥›îty_add_öt32
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, 
uöt32_t
 
vÆue
)

767 
mosquôto_¥›îty
 *
¥›
;

769 if(!
¥›li°
Ë 
MOSQ_ERR_INVAL
;

770 if(
idítifõr
 !
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL


771 && 
idítifõr
 !
MQTT_PROP_SESSION_EXPIRY_INTERVAL


772 && 
idítifõr
 !
MQTT_PROP_WILL_DELAY_INTERVAL


773 && 
idítifõr
 !
MQTT_PROP_MAXIMUM_PACKET_SIZE
){

775  
MOSQ_ERR_INVAL
;

778 
¥›
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_¥›îty
));

779 if(!
¥›
Ë 
MOSQ_ERR_NOMEM
;

781 
¥›
->
˛õ¡_gíî©ed
 = 
åue
;

782 
¥›
->
idítifõr
 = identifier;

783 
¥›
->
vÆue
.
i32
 = value;

785 
	`¥›îty__add
(
¥›li°
, 
¥›
);

786  
MOSQ_ERR_SUCCESS
;

787 
	}
}

790 
	$mosquôto_¥›îty_add_v¨öt
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, 
uöt32_t
 
vÆue
)

792 
mosquôto_¥›îty
 *
¥›
;

794 if(!
¥›li°
 || 
vÆue
 > 268435455Ë 
MOSQ_ERR_INVAL
;

795 if(
idítifõr
 !
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
Ë 
MOSQ_ERR_INVAL
;

797 
¥›
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_¥›îty
));

798 if(!
¥›
Ë 
MOSQ_ERR_NOMEM
;

800 
¥›
->
˛õ¡_gíî©ed
 = 
åue
;

801 
¥›
->
idítifõr
 = identifier;

802 
¥›
->
vÆue
.
v¨öt
 = value;

804 
	`¥›îty__add
(
¥›li°
, 
¥›
);

805  
MOSQ_ERR_SUCCESS
;

806 
	}
}

809 
	$mosquôto_¥›îty_add_bö¨y
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, c⁄° *
vÆue
, 
uöt16_t
 
Àn
)

811 
mosquôto_¥›îty
 *
¥›
;

813 if(!
¥›li°
Ë 
MOSQ_ERR_INVAL
;

814 if(
idítifõr
 !
MQTT_PROP_CORRELATION_DATA


815 && 
idítifõr
 !
MQTT_PROP_AUTHENTICATION_DATA
){

817  
MOSQ_ERR_INVAL
;

820 
¥›
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_¥›îty
));

821 if(!
¥›
Ë 
MOSQ_ERR_NOMEM
;

823 
¥›
->
˛õ¡_gíî©ed
 = 
åue
;

824 
¥›
->
idítifõr
 = identifier;

826 if(
Àn
){

827 
¥›
->
vÆue
.
bö
.
v
 = 
	`mosquôto__mÆloc
(
Àn
);

828 if(!
¥›
->
vÆue
.
bö
.
v
){

829 
	`mosquôto__‰ì
(
¥›
);

830  
MOSQ_ERR_NOMEM
;

833 
	`mem˝y
(
¥›
->
vÆue
.
bö
.
v
, vÆue, 
Àn
);

834 
¥›
->
vÆue
.
bö
.
Àn
 =Üen;

837 
	`¥›îty__add
(
¥›li°
, 
¥›
);

838  
MOSQ_ERR_SUCCESS
;

839 
	}
}

842 
	$mosquôto_¥›îty_add_°rög
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, c⁄° *
vÆue
)

844 
mosquôto_¥›îty
 *
¥›
;

845 
size_t
 
¶í
 = 0;

847 if(!
¥›li°
Ë 
MOSQ_ERR_INVAL
;

848 if(
vÆue
){

849 
¶í
 = 
	`°æí
(
vÆue
);

850 if(
	`mosquôto_vÆid©e_utf8
(
vÆue
, ()
¶í
)Ë 
MOSQ_ERR_MALFORMED_UTF8
;

853 if(
idítifõr
 !
MQTT_PROP_CONTENT_TYPE


854 && 
idítifõr
 !
MQTT_PROP_RESPONSE_TOPIC


855 && 
idítifõr
 !
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER


856 && 
idítifõr
 !
MQTT_PROP_AUTHENTICATION_METHOD


857 && 
idítifõr
 !
MQTT_PROP_RESPONSE_INFORMATION


858 && 
idítifõr
 !
MQTT_PROP_SERVER_REFERENCE


859 && 
idítifõr
 !
MQTT_PROP_REASON_STRING
){

861  
MOSQ_ERR_INVAL
;

864 
¥›
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_¥›îty
));

865 if(!
¥›
Ë 
MOSQ_ERR_NOMEM
;

867 
¥›
->
˛õ¡_gíî©ed
 = 
åue
;

868 
¥›
->
idítifõr
 = identifier;

869 if(
vÆue
 && 
¶í
 > 0){

870 
¥›
->
vÆue
.
s
.
v
 = 
	`mosquôto__°rdup
(value);

871 if(!
¥›
->
vÆue
.
s
.
v
){

872 
	`mosquôto__‰ì
(
¥›
);

873  
MOSQ_ERR_NOMEM
;

875 
¥›
->
vÆue
.
s
.
Àn
 = (
uöt16_t
)
¶í
;

878 
	`¥›îty__add
(
¥›li°
, 
¥›
);

879  
MOSQ_ERR_SUCCESS
;

880 
	}
}

883 
	$mosquôto_¥›îty_add_°rög_∑ú
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, c⁄° *
«me
, c⁄° *
vÆue
)

885 
mosquôto_¥›îty
 *
¥›
;

886 
size_t
 
¶í_«me
 = 0, 
¶í_vÆue
 = 0;

888 if(!
¥›li°
Ë 
MOSQ_ERR_INVAL
;

889 if(
idítifõr
 !
MQTT_PROP_USER_PROPERTY
Ë 
MOSQ_ERR_INVAL
;

890 if(
«me
){

891 
¶í_«me
 = 
	`°æí
(
«me
);

892 if(
	`mosquôto_vÆid©e_utf8
(
«me
, ()
¶í_«me
)Ë 
MOSQ_ERR_MALFORMED_UTF8
;

894 if(
vÆue
){

895 if(
	`mosquôto_vÆid©e_utf8
(
vÆue
, ()
¶í_vÆue
)Ë 
MOSQ_ERR_MALFORMED_UTF8
;

898 
¥›
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_¥›îty
));

899 if(!
¥›
Ë 
MOSQ_ERR_NOMEM
;

901 
¥›
->
˛õ¡_gíî©ed
 = 
åue
;

902 
¥›
->
idítifõr
 = identifier;

904 if(
«me
){

905 
¥›
->
«me
.
v
 = 
	`mosquôto__°rdup
(name);

906 if(!
¥›
->
«me
.
v
){

907 
	`mosquôto__‰ì
(
¥›
);

908  
MOSQ_ERR_NOMEM
;

910 
¥›
->
«me
.
Àn
 = (
uöt16_t
)
	`°æí
(name);

913 if(
vÆue
){

914 
¥›
->
vÆue
.
s
.
v
 = 
	`mosquôto__°rdup
(value);

915 if(!
¥›
->
vÆue
.
s
.
v
){

916 
	`mosquôto__‰ì
(
¥›
->
«me
.
v
);

917 
	`mosquôto__‰ì
(
¥›
);

918  
MOSQ_ERR_NOMEM
;

920 
¥›
->
vÆue
.
s
.
Àn
 = (
uöt16_t
)
	`°æí
(value);

923 
	`¥›îty__add
(
¥›li°
, 
¥›
);

924  
MOSQ_ERR_SUCCESS
;

925 
	}
}

927 
	$mosquôto_¥›îty_check_Æl
(
comm™d
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

929 c⁄° 
mosquôto_¥›îty
 *
p
, *
èû
;

930 
rc
;

932 
p
 = 
¥›îtõs
;

934 
p
){

936 if(
p
->
idítifõr
 =
MQTT_PROP_REQUEST_PROBLEM_INFORMATION


937 || 
p
->
idítifõr
 =
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR


938 || 
p
->
idítifõr
 =
MQTT_PROP_REQUEST_RESPONSE_INFORMATION


939 || 
p
->
idítifõr
 =
MQTT_PROP_MAXIMUM_QOS


940 || 
p
->
idítifõr
 =
MQTT_PROP_RETAIN_AVAILABLE


941 || 
p
->
idítifõr
 =
MQTT_PROP_WILDCARD_SUB_AVAILABLE


942 || 
p
->
idítifõr
 =
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE


943 || 
p
->
idítifõr
 =
MQTT_PROP_SHARED_SUB_AVAILABLE
){

945 if(
p
->
vÆue
.
i8
 > 1){

946  
MOSQ_ERR_PROTOCOL
;

948 }if(
p
->
idítifõr
 =
MQTT_PROP_MAXIMUM_PACKET_SIZE
){

949 if–
p
->
vÆue
.
i32
 == 0){

950  
MOSQ_ERR_PROTOCOL
;

952 }if(
p
->
idítifõr
 =
MQTT_PROP_RECEIVE_MAXIMUM


953 || 
p
->
idítifõr
 =
MQTT_PROP_TOPIC_ALIAS
){

955 if(
p
->
vÆue
.
i16
 == 0){

956  
MOSQ_ERR_PROTOCOL
;

961 
rc
 = 
	`mosquôto_¥›îty_check_comm™d
(
comm™d
, 
p
->
idítifõr
);

962 if(
rc
) Ñc;

965 if(
p
->
idítifõr
 !
MQTT_PROP_USER_PROPERTY
){

966 
èû
 = 
p
->
√xt
;

967 
èû
){

968 if(
p
->
idítifõr
 =
èû
->identifier){

969  
MOSQ_ERR_DUPLICATE_PROPERTY
;

971 
èû
 =Åaû->
√xt
;

975 
p
 =Ö->
√xt
;

978  
MOSQ_ERR_SUCCESS
;

979 
	}
}

981 c⁄° 
mosquôto_¥›îty
 *
	$¥›îty__gë_¥›îty
(c⁄° 
mosquôto_¥›îty
 *
¥›li°
, 
idítifõr
, 
boﬁ
 
skù_fú°
)

983 c⁄° 
mosquôto_¥›îty
 *
p
;

984 
boﬁ
 
is_fú°
 = 
åue
;

986 
p
 = 
¥›li°
;

988 
p
){

989 if(
p
->
idítifõr
 == identifier){

990 if(!
is_fú°
 || !
skù_fú°
){

991  
p
;

993 
is_fú°
 = 
Ál£
;

995 
p
 =Ö->
√xt
;

997  
NULL
;

998 
	}
}

1001 
	$mosquôto_¥›îty_idítifõr
(c⁄° 
mosquôto_¥›îty
 *
¥›îty
)

1003 if(
¥›îty
 =
NULL
)  0;

1005  
¥›îty
->
idítifõr
;

1006 
	}
}

1009 c⁄° 
mosquôto_¥›îty
 *
	$mosquôto_¥›îty_√xt
(c⁄° 
mosquôto_¥›îty
 *
¥›li°
)

1011 if(
¥›li°
 =
NULL
)  NULL;

1013  
¥›li°
->
√xt
;

1014 
	}
}

1017 c⁄° 
mosquôto_¥›îty
 *
	$mosquôto_¥›îty_ªad_byã
(c⁄° 
mosquôto_¥›îty
 *
¥›li°
, 
idítifõr
, 
uöt8_t
 *
vÆue
, 
boﬁ
 
skù_fú°
)

1019 c⁄° 
mosquôto_¥›îty
 *
p
;

1020 if(!
¥›li°
Ë 
NULL
;

1022 
p
 = 
	`¥›îty__gë_¥›îty
(
¥›li°
, 
idítifõr
, 
skù_fú°
);

1023 if(!
p
Ë 
NULL
;

1024 if(
p
->
idítifõr
 !
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR


1025 && 
p
->
idítifõr
 !
MQTT_PROP_REQUEST_PROBLEM_INFORMATION


1026 && 
p
->
idítifõr
 !
MQTT_PROP_REQUEST_RESPONSE_INFORMATION


1027 && 
p
->
idítifõr
 !
MQTT_PROP_MAXIMUM_QOS


1028 && 
p
->
idítifõr
 !
MQTT_PROP_RETAIN_AVAILABLE


1029 && 
p
->
idítifõr
 !
MQTT_PROP_WILDCARD_SUB_AVAILABLE


1030 && 
p
->
idítifõr
 !
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE


1031 && 
p
->
idítifõr
 !
MQTT_PROP_SHARED_SUB_AVAILABLE
){

1032  
NULL
;

1035 if(
vÆue
Ë*vÆuê
p
->vÆue.
i8
;

1037  
p
;

1038 
	}
}

1041 c⁄° 
mosquôto_¥›îty
 *
	$mosquôto_¥›îty_ªad_öt16
(c⁄° 
mosquôto_¥›îty
 *
¥›li°
, 
idítifõr
, 
uöt16_t
 *
vÆue
, 
boﬁ
 
skù_fú°
)

1043 c⁄° 
mosquôto_¥›îty
 *
p
;

1044 if(!
¥›li°
Ë 
NULL
;

1046 
p
 = 
	`¥›îty__gë_¥›îty
(
¥›li°
, 
idítifõr
, 
skù_fú°
);

1047 if(!
p
Ë 
NULL
;

1048 if(
p
->
idítifõr
 !
MQTT_PROP_SERVER_KEEP_ALIVE


1049 && 
p
->
idítifõr
 !
MQTT_PROP_RECEIVE_MAXIMUM


1050 && 
p
->
idítifõr
 !
MQTT_PROP_TOPIC_ALIAS_MAXIMUM


1051 && 
p
->
idítifõr
 !
MQTT_PROP_TOPIC_ALIAS
){

1052  
NULL
;

1055 if(
vÆue
Ë*vÆuê
p
->vÆue.
i16
;

1057  
p
;

1058 
	}
}

1061 c⁄° 
mosquôto_¥›îty
 *
	$mosquôto_¥›îty_ªad_öt32
(c⁄° 
mosquôto_¥›îty
 *
¥›li°
, 
idítifõr
, 
uöt32_t
 *
vÆue
, 
boﬁ
 
skù_fú°
)

1063 c⁄° 
mosquôto_¥›îty
 *
p
;

1064 if(!
¥›li°
Ë 
NULL
;

1066 
p
 = 
	`¥›îty__gë_¥›îty
(
¥›li°
, 
idítifõr
, 
skù_fú°
);

1067 if(!
p
Ë 
NULL
;

1068 if(
p
->
idítifõr
 !
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL


1069 && 
p
->
idítifõr
 !
MQTT_PROP_SESSION_EXPIRY_INTERVAL


1070 && 
p
->
idítifõr
 !
MQTT_PROP_WILL_DELAY_INTERVAL


1071 && 
p
->
idítifõr
 !
MQTT_PROP_MAXIMUM_PACKET_SIZE
){

1073  
NULL
;

1076 if(
vÆue
Ë*vÆuê
p
->vÆue.
i32
;

1078  
p
;

1079 
	}
}

1082 c⁄° 
mosquôto_¥›îty
 *
	$mosquôto_¥›îty_ªad_v¨öt
(c⁄° 
mosquôto_¥›îty
 *
¥›li°
, 
idítifõr
, 
uöt32_t
 *
vÆue
, 
boﬁ
 
skù_fú°
)

1084 c⁄° 
mosquôto_¥›îty
 *
p
;

1085 if(!
¥›li°
Ë 
NULL
;

1087 
p
 = 
	`¥›îty__gë_¥›îty
(
¥›li°
, 
idítifõr
, 
skù_fú°
);

1088 if(!
p
Ë 
NULL
;

1089 if(
p
->
idítifõr
 !
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
){

1090  
NULL
;

1093 if(
vÆue
Ë*vÆuê
p
->vÆue.
v¨öt
;

1095  
p
;

1096 
	}
}

1099 c⁄° 
mosquôto_¥›îty
 *
	$mosquôto_¥›îty_ªad_bö¨y
(c⁄° 
mosquôto_¥›îty
 *
¥›li°
, 
idítifõr
, **
vÆue
, 
uöt16_t
 *
Àn
, 
boﬁ
 
skù_fú°
)

1101 c⁄° 
mosquôto_¥›îty
 *
p
;

1102 if(!
¥›li°
 || (
vÆue
 && !
Àn
Ë|| (!vÆuê&&Üí)Ë 
NULL
;

1104 if(
vÆue
Ë*vÆuê
NULL
;

1106 
p
 = 
	`¥›îty__gë_¥›îty
(
¥›li°
, 
idítifõr
, 
skù_fú°
);

1107 if(!
p
Ë 
NULL
;

1108 if(
p
->
idítifõr
 !
MQTT_PROP_CORRELATION_DATA


1109 && 
p
->
idítifõr
 !
MQTT_PROP_AUTHENTICATION_DATA
){

1111  
NULL
;

1114 if(
vÆue
){

1115 *
Àn
 = 
p
->
vÆue
.
bö
.len;

1116 *
vÆue
 = 
	`ˇŒoc
(1, *
Àn
 + 1U);

1117 if(!(*
vÆue
)Ë 
NULL
;

1119 
	`mem˝y
(*
vÆue
, 
p
->vÆue.
bö
.
v
, *
Àn
);

1122  
p
;

1123 
	}
}

1126 c⁄° 
mosquôto_¥›îty
 *
	$mosquôto_¥›îty_ªad_°rög
(c⁄° 
mosquôto_¥›îty
 *
¥›li°
, 
idítifõr
, **
vÆue
, 
boﬁ
 
skù_fú°
)

1128 c⁄° 
mosquôto_¥›îty
 *
p
;

1129 if(!
¥›li°
Ë 
NULL
;

1131 
p
 = 
	`¥›îty__gë_¥›îty
(
¥›li°
, 
idítifõr
, 
skù_fú°
);

1132 if(!
p
Ë 
NULL
;

1133 if(
p
->
idítifõr
 !
MQTT_PROP_CONTENT_TYPE


1134 && 
p
->
idítifõr
 !
MQTT_PROP_RESPONSE_TOPIC


1135 && 
p
->
idítifõr
 !
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER


1136 && 
p
->
idítifõr
 !
MQTT_PROP_AUTHENTICATION_METHOD


1137 && 
p
->
idítifõr
 !
MQTT_PROP_RESPONSE_INFORMATION


1138 && 
p
->
idítifõr
 !
MQTT_PROP_SERVER_REFERENCE


1139 && 
p
->
idítifõr
 !
MQTT_PROP_REASON_STRING
){

1141  
NULL
;

1144 if(
vÆue
){

1145 *
vÆue
 = 
	`ˇŒoc
(1, (
size_t
)
p
->vÆue.
s
.
Àn
+1);

1146 if(!(*
vÆue
)Ë 
NULL
;

1148 
	`mem˝y
(*
vÆue
, 
p
->vÆue.
s
.
v
,Ö->vÆue.s.
Àn
);

1151  
p
;

1152 
	}
}

1155 c⁄° 
mosquôto_¥›îty
 *
	$mosquôto_¥›îty_ªad_°rög_∑ú
(c⁄° 
mosquôto_¥›îty
 *
¥›li°
, 
idítifõr
, **
«me
, **
vÆue
, 
boﬁ
 
skù_fú°
)

1157 c⁄° 
mosquôto_¥›îty
 *
p
;

1158 if(!
¥›li°
Ë 
NULL
;

1160 if(
«me
Ë*«mê
NULL
;

1161 if(
vÆue
Ë*vÆuê
NULL
;

1163 
p
 = 
	`¥›îty__gë_¥›îty
(
¥›li°
, 
idítifõr
, 
skù_fú°
);

1164 if(!
p
Ë 
NULL
;

1165 if(
p
->
idítifõr
 !
MQTT_PROP_USER_PROPERTY
Ë 
NULL
;

1167 if(
«me
){

1168 *
«me
 = 
	`ˇŒoc
(1, (
size_t
)
p
->«me.
Àn
+1);

1169 if(!(*
«me
)Ë 
NULL
;

1170 
	`mem˝y
(*
«me
, 
p
->«me.
v
,Ö->«me.
Àn
);

1173 if(
vÆue
){

1174 *
vÆue
 = 
	`ˇŒoc
(1, (
size_t
)
p
->vÆue.
s
.
Àn
+1);

1175 if(!(*
vÆue
)){

1176 if(
«me
){

1177 
	`‰ì
(*
«me
);

1178 *
«me
 = 
NULL
;

1180  
NULL
;

1182 
	`mem˝y
(*
vÆue
, 
p
->vÆue.
s
.
v
,Ö->vÆue.s.
Àn
);

1185  
p
;

1186 
	}
}

1189 
	$mosquôto_¥›îty_c›y_Æl
(
mosquôto_¥›îty
 **
de°
, c⁄° mosquôto_¥›îty *
§c
)

1191 
mosquôto_¥›îty
 *
≤ew
, *
∂a°
 = 
NULL
;

1193 if(!
§c
Ë 
MOSQ_ERR_SUCCESS
;

1194 if(!
de°
Ë 
MOSQ_ERR_INVAL
;

1196 *
de°
 = 
NULL
;

1198 
§c
){

1199 
≤ew
 = 
	`ˇŒoc
(1, (
mosquôto_¥›îty
));

1200 if(!
≤ew
){

1201 
	`mosquôto_¥›îty_‰ì_Æl
(
de°
);

1202  
MOSQ_ERR_NOMEM
;

1204 if(
∂a°
){

1205 
∂a°
->
√xt
 = 
≤ew
;

1207 *
de°
 = 
≤ew
;

1209 
∂a°
 = 
≤ew
;

1211 
≤ew
->
˛õ¡_gíî©ed
 = 
§c
->client_generated;

1212 
≤ew
->
idítifõr
 = 
§c
->identifier;

1213 
≤ew
->
idítifõr
){

1214 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
:

1215 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
:

1216 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
:

1217 
MQTT_PROP_MAXIMUM_QOS
:

1218 
MQTT_PROP_RETAIN_AVAILABLE
:

1219 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
:

1220 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
:

1221 
MQTT_PROP_SHARED_SUB_AVAILABLE
:

1222 
≤ew
->
vÆue
.
i8
 = 
§c
->value.i8;

1225 
MQTT_PROP_SERVER_KEEP_ALIVE
:

1226 
MQTT_PROP_RECEIVE_MAXIMUM
:

1227 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
:

1228 
MQTT_PROP_TOPIC_ALIAS
:

1229 
≤ew
->
vÆue
.
i16
 = 
§c
->value.i16;

1232 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
:

1233 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
:

1234 
MQTT_PROP_WILL_DELAY_INTERVAL
:

1235 
MQTT_PROP_MAXIMUM_PACKET_SIZE
:

1236 
≤ew
->
vÆue
.
i32
 = 
§c
->value.i32;

1239 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
:

1240 
≤ew
->
vÆue
.
v¨öt
 = 
§c
->value.varint;

1243 
MQTT_PROP_CONTENT_TYPE
:

1244 
MQTT_PROP_RESPONSE_TOPIC
:

1245 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
:

1246 
MQTT_PROP_AUTHENTICATION_METHOD
:

1247 
MQTT_PROP_RESPONSE_INFORMATION
:

1248 
MQTT_PROP_SERVER_REFERENCE
:

1249 
MQTT_PROP_REASON_STRING
:

1250 
≤ew
->
vÆue
.
s
.
Àn
 = 
§c
->value.s.len;

1251 
≤ew
->
vÆue
.
s
.
v
 = 
	`°rdup
(
§c
->value.s.v);

1252 if(!
≤ew
->
vÆue
.
s
.
v
){

1253 
	`mosquôto_¥›îty_‰ì_Æl
(
de°
);

1254  
MOSQ_ERR_NOMEM
;

1258 
MQTT_PROP_AUTHENTICATION_DATA
:

1259 
MQTT_PROP_CORRELATION_DATA
:

1260 
≤ew
->
vÆue
.
bö
.
Àn
 = 
§c
->value.bin.len;

1261 
≤ew
->
vÆue
.
bö
.
v
 = 
	`mÆloc
’√w->vÆue.bö.
Àn
);

1262 if(!
≤ew
->
vÆue
.
bö
.
v
){

1263 
	`mosquôto_¥›îty_‰ì_Æl
(
de°
);

1264  
MOSQ_ERR_NOMEM
;

1266 
	`mem˝y
(
≤ew
->
vÆue
.
bö
.
v
, 
§c
->vÆue.bö.v,Ö√w->vÆue.bö.
Àn
);

1269 
MQTT_PROP_USER_PROPERTY
:

1270 
≤ew
->
vÆue
.
s
.
Àn
 = 
§c
->value.s.len;

1271 
≤ew
->
vÆue
.
s
.
v
 = 
	`°rdup
(
§c
->value.s.v);

1272 if(!
≤ew
->
vÆue
.
s
.
v
){

1273 
	`mosquôto_¥›îty_‰ì_Æl
(
de°
);

1274  
MOSQ_ERR_NOMEM
;

1277 
≤ew
->
«me
.
Àn
 = 
§c
->name.len;

1278 
≤ew
->
«me
.
v
 = 
	`°rdup
(
§c
->name.v);

1279 if(!
≤ew
->
«me
.
v
){

1280 
	`mosquôto_¥›îty_‰ì_Æl
(
de°
);

1281  
MOSQ_ERR_NOMEM
;

1286 
	`mosquôto_¥›îty_‰ì_Æl
(
de°
);

1287  
MOSQ_ERR_INVAL
;

1290 
§c
 = src->
√xt
;

1293  
MOSQ_ERR_SUCCESS
;

1294 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/property_mosq.h

18 #i‚de‡
PROPERTY_MOSQ_H


19 
	#PROPERTY_MOSQ_H


	)

21 
	~"mosquôto_öã∫Æ.h
"

22 
	~"mosquôto.h
"

24 
	smqâ__°rög
 {

25 *
	mv
;

26 
uöt16_t
 
	mÀn
;

29 
	smqâ5__¥›îty
 {

30 
mqâ5__¥›îty
 *
	m√xt
;

32 
uöt8_t
 
	mi8
;

33 
uöt16_t
 
	mi16
;

34 
uöt32_t
 
	mi32
;

35 
uöt32_t
 
	mv¨öt
;

36 
mqâ__°rög
 
	mbö
;

37 
mqâ__°rög
 
	ms
;

38 } 
	mvÆue
;

39 
mqâ__°rög
 
	m«me
;

40 
öt32_t
 
	midítifõr
;

41 
boﬁ
 
	m˛õ¡_gíî©ed
;

45 
¥›îty__ªad_Æl
(
comm™d
, 
mosquôto__∑ckë
 *
∑ckë
, 
mosquôto_¥›îty
 **
¥›îty
);

46 
¥›îty__wrôe_Æl
(
mosquôto__∑ckë
 *
∑ckë
, c⁄° 
mosquôto_¥›îty
 *
¥›îty
, 
boﬁ
 
wrôe_Àn
);

47 
¥›îty__‰ì
(
mosquôto_¥›îty
 **
¥›îty
);

49 
¥›îty__gë_Àngth
(c⁄° 
mosquôto_¥›îty
 *
¥›îty
);

50 
¥›îty__gë_Àngth_Æl
(c⁄° 
mosquôto_¥›îty
 *
¥›îty
);

52 
¥›îty__gë_ªmaöög_Àngth
(c⁄° 
mosquôto_¥›îty
 *
¥›s
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/read_handle.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

25 
	~"mosquôto.h
"

26 
	~"loggög_mosq.h
"

27 
	~"mem‹y_mosq.h
"

28 
	~"mesßges_mosq.h
"

29 
	~"mqâ_¥Ÿocﬁ.h
"

30 
	~"√t_mosq.h
"

31 
	~"∑ckë_mosq.h
"

32 
	~"ªad_h™dÀ.h
"

33 
	~"£nd_mosq.h
"

34 
	~"time_mosq.h
"

35 
	~"utû_mosq.h
"

37 
	$h™dÀ__∑ckë
(
mosquôto
 *
mosq
)

39 
	`as£π
(
mosq
);

41 (
mosq
->
ö_∑ckë
.
comm™d
)&0xF0){

42 
CMD_PINGREQ
:

43  
	`h™dÀ__pögªq
(
mosq
);

44 
CMD_PINGRESP
:

45  
	`h™dÀ__pögª•
(
mosq
);

46 
CMD_PUBACK
:

47  
	`h™dÀ__pubackcomp
(
mosq
, "PUBACK");

48 
CMD_PUBCOMP
:

49  
	`h™dÀ__pubackcomp
(
mosq
, "PUBCOMP");

50 
CMD_PUBLISH
:

51  
	`h™dÀ__publish
(
mosq
);

52 
CMD_PUBREC
:

53  
	`h™dÀ__pubªc
(
mosq
);

54 
CMD_PUBREL
:

55  
	`h™dÀ__pubªl
(
mosq
);

56 
CMD_CONNACK
:

57  
	`h™dÀ__c⁄«ck
(
mosq
);

58 
CMD_SUBACK
:

59  
	`h™dÀ__suback
(
mosq
);

60 
CMD_UNSUBACK
:

61  
	`h™dÀ__unsuback
(
mosq
);

62 
CMD_DISCONNECT
:

63  
	`h™dÀ__disc⁄√˘
(
mosq
);

64 
CMD_AUTH
:

65  
	`h™dÀ__auth
(
mosq
);

68 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: Uƒecogni£d comm™d %d\n", (mosq->
ö_∑ckë
.
comm™d
)&0xF0);

69  
MOSQ_ERR_PROTOCOL
;

71 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/read_handle.h

18 #i‚de‡
READ_HANDLE_H


19 
	#READ_HANDLE_H


	)

21 
	~"mosquôto.h
"

22 
	gmosquôto_db
;

24 
h™dÀ__pögªq
(
mosquôto
 *
mosq
);

25 
h™dÀ__pögª•
(
mosquôto
 *
mosq
);

26 #ifde‡
WITH_BROKER


27 
h™dÀ__pubackcomp
(
mosquôto
 *
mosq
, c⁄° *
ty≥
);

29 
h™dÀ__∑ckë
(
mosquôto
 *
mosq
);

30 
h™dÀ__c⁄«ck
(
mosquôto
 *
mosq
);

31 
h™dÀ__disc⁄√˘
(
mosquôto
 *
mosq
);

32 
h™dÀ__pubackcomp
(
mosquôto
 *
mosq
, c⁄° *
ty≥
);

33 
h™dÀ__publish
(
mosquôto
 *
mosq
);

34 
h™dÀ__auth
(
mosquôto
 *
mosq
);

36 
h™dÀ__pubªc
(
mosquôto
 *
mosq
);

37 
h™dÀ__pubªl
(
mosquôto
 *
mosq
);

38 
h™dÀ__suback
(
mosquôto
 *
mosq
);

39 
h™dÀ__unsuback
(
mosquôto
 *
mosq
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/send_connect.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°rög.h
>

24 #ifde‡
WITH_BROKER


25 
	~"mosquôto_brokî_öã∫Æ.h
"

28 
	~"loggög_mosq.h
"

29 
	~"mem‹y_mosq.h
"

30 
	~"mosquôto.h
"

31 
	~"mosquôto_öã∫Æ.h
"

32 
	~"mqâ_¥Ÿocﬁ.h
"

33 
	~"∑ckë_mosq.h
"

34 
	~"¥›îty_mosq.h
"

35 
	~"£nd_mosq.h
"

37 
	$£nd__c⁄√˘
(
mosquôto
 *
mosq
, 
uöt16_t
 
kì∑live
, 
boﬁ
 
˛ón_£ssi⁄
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

39 
mosquôto__∑ckë
 *
∑ckë
 = 
NULL
;

40 
uöt32_t
 
∑ylﬂdÀn
;

41 
uöt8_t
 
wûl
 = 0;

42 
uöt8_t
 
byã
;

43 
rc
;

44 
uöt8_t
 
vîsi⁄
;

45 *
˛õ¡id
, *
u£∫ame
, *
∑ssw‹d
;

46 
uöt32_t
 
hódîÀn
;

47 
uöt32_t
 
¥›Àn
 = 0, 
v¨byãs
;

48 
mosquôto_¥›îty
 *
loˇl_¥›s
 = 
NULL
;

49 
uöt16_t
 
ª˚ive_maximum
;

51 
	`as£π
(
mosq
);

53 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ31
 && !mosq->
id
Ë 
MOSQ_ERR_PROTOCOL
;

55 #i‡
	`deföed
(
WITH_BROKER
Ë&& deföed(
WITH_BRIDGE
)

56 if(
mosq
->
bridge
){

57 
˛õ¡id
 = 
mosq
->
bridge
->
ªmŸe_˛õ¡id
;

58 
u£∫ame
 = 
mosq
->
bridge
->
ªmŸe_u£∫ame
;

59 
∑ssw‹d
 = 
mosq
->
bridge
->
ªmŸe_∑ssw‹d
;

61 
˛õ¡id
 = 
mosq
->
id
;

62 
u£∫ame
 = 
mosq
->username;

63 
∑ssw‹d
 = 
mosq
->password;

66 
˛õ¡id
 = 
mosq
->
id
;

67 
u£∫ame
 = 
mosq
->username;

68 
∑ssw‹d
 = 
mosq
->password;

71 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

73 if(!
	`mosquôto_¥›îty_ªad_öt16
(
¥›îtõs
, 
MQTT_PROP_RECEIVE_MAXIMUM
, &
ª˚ive_maximum
, 
Ál£
)){

74 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(&
loˇl_¥›s
, 
MQTT_PROP_RECEIVE_MAXIMUM
, 
mosq
->
msgs_ö
.
öÊight_maximum
);

75 if(
rc
) Ñc;

77 
mosq
->
msgs_ö
.
öÊight_maximum
 = 
ª˚ive_maximum
;

78 
mosq
->
msgs_ö
.
öÊight_quŸa
 = 
ª˚ive_maximum
;

81 
vîsi⁄
 = 
MQTT_PROTOCOL_V5
;

82 
hódîÀn
 = 10;

83 
¥›Àn
 = 0;

84 
¥›Àn
 +
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
);

85 
¥›Àn
 +
	`¥›îty__gë_Àngth_Æl
(
loˇl_¥›s
);

86 
v¨byãs
 = 
	`∑ckë__v¨öt_byãs
(
¥›Àn
);

87 
hódîÀn
 +
¥›Àn
 + 
v¨byãs
;

88 }if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ311
){

89 
vîsi⁄
 = 
MQTT_PROTOCOL_V311
;

90 
hódîÀn
 = 10;

91 }if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ31
){

92 
vîsi⁄
 = 
MQTT_PROTOCOL_V31
;

93 
hódîÀn
 = 12;

95  
MOSQ_ERR_INVAL
;

98 
∑ckë
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__∑ckë
));

99 if(!
∑ckë
Ë 
MOSQ_ERR_NOMEM
;

101 if(
˛õ¡id
){

102 
∑ylﬂdÀn
 = (
uöt32_t
)(2U+
	`°æí
(
˛õ¡id
));

104 
∑ylﬂdÀn
 = 2U;

106 #ifde‡
WITH_BROKER


107 if(
mosq
->
wûl
 && (mosq->
bridge
 =
NULL
 || mosq->bridge->
nŸifiˇti⁄s_loˇl_⁄ly
 =
Ál£
)){

109 if(
mosq
->
wûl
){

111 
wûl
 = 1;

112 
	`as£π
(
mosq
->
wûl
->
msg
.
t›ic
);

114 
∑ylﬂdÀn
 +(
uöt32_t
)(2+
	`°æí
(
mosq
->
wûl
->
msg
.
t›ic
) + 2+(uint32_t)mosq->will->msg.payloadlen);

115 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

116 
∑ylﬂdÀn
 +
	`¥›îty__gë_ªmaöög_Àngth
(
mosq
->
wûl
->
¥›îtõs
);

123 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ31
 || mosq->¥Ÿocﬁ =
mosq_p_mqâ311
){

124 if(
∑ssw‹d
 !
NULL
 && 
u£∫ame
 == NULL){

125 
	`mosquôto__‰ì
(
∑ckë
);

126  
MOSQ_ERR_INVAL
;

130 if(
u£∫ame
){

131 
∑ylﬂdÀn
 +(
uöt32_t
)(2+
	`°æí
(
u£∫ame
));

133 if(
∑ssw‹d
){

134 
∑ylﬂdÀn
 +(
uöt32_t
)(2+
	`°æí
(
∑ssw‹d
));

137 
∑ckë
->
comm™d
 = 
CMD_CONNECT
;

138 
∑ckë
->
ªmaöög_Àngth
 = 
hódîÀn
 + 
∑ylﬂdÀn
;

139 
rc
 = 
	`∑ckë__Æloc
(
∑ckë
);

140 if(
rc
){

141 
	`mosquôto__‰ì
(
∑ckë
);

142  
rc
;

146 if(
vîsi⁄
 =
MQTT_PROTOCOL_V31
){

147 
	`∑ckë__wrôe_°rög
(
∑ckë
, 
PROTOCOL_NAME_v31
, (
uöt16_t
)
	`°æí
(PROTOCOL_NAME_v31));

149 
	`∑ckë__wrôe_°rög
(
∑ckë
, 
PROTOCOL_NAME
, (
uöt16_t
)
	`°æí
(PROTOCOL_NAME));

151 #i‡
	`deföed
(
WITH_BROKER
Ë&& deföed(
WITH_BRIDGE
)

152 if(
mosq
->
bridge
 && mosq->bridge->
¥Ÿocﬁ_vîsi⁄
 !
mosq_p_mqâ5
 && mosq->bridge->
åy_¥iv©e
 && mosq->bridge->
åy_¥iv©e_ac˚±ed
){

153 
vîsi⁄
 |= 0x80;

157 
	`∑ckë__wrôe_byã
(
∑ckë
, 
vîsi⁄
);

158 
byã
 = (
uöt8_t
)((
˛ón_£ssi⁄
&0x1)<<1);

159 if(
wûl
){

160 
byã
 = byã | (
uöt8_t
)(((
mosq
->
wûl
->
msg
.
qos
&0x3)<<3) | ((will&0x1)<<2));

161 if(
mosq
->
ªèö_avaûabÀ
){

162 
byã
 |(
uöt8_t
)((
mosq
->
wûl
->
msg
.
ªèö
&0x1)<<5);

165 if(
u£∫ame
){

166 
byã
 = byte | 0x1<<7;

168 if(
mosq
->
∑ssw‹d
){

169 
byã
 = byte | 0x1<<6;

171 
	`∑ckë__wrôe_byã
(
∑ckë
, 
byã
);

172 
	`∑ckë__wrôe_uöt16
(
∑ckë
, 
kì∑live
);

174 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

176 
	`∑ckë__wrôe_v¨öt
(
∑ckë
, 
¥›Àn
);

177 
	`¥›îty__wrôe_Æl
(
∑ckë
, 
¥›îtõs
, 
Ál£
);

178 
	`¥›îty__wrôe_Æl
(
∑ckë
, 
loˇl_¥›s
, 
Ál£
);

180 
	`mosquôto_¥›îty_‰ì_Æl
(&
loˇl_¥›s
);

183 if(
˛õ¡id
){

184 
	`∑ckë__wrôe_°rög
(
∑ckë
, 
˛õ¡id
, (
uöt16_t
)
	`°æí
(clientid));

186 
	`∑ckë__wrôe_uöt16
(
∑ckë
, 0);

188 if(
wûl
){

189 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

191 
	`¥›îty__wrôe_Æl
(
∑ckë
, 
mosq
->
wûl
->
¥›îtõs
, 
åue
);

193 
	`∑ckë__wrôe_°rög
(
∑ckë
, 
mosq
->
wûl
->
msg
.
t›ic
, (
uöt16_t
)
	`°æí
(mosq->will->msg.topic));

194 
	`∑ckë__wrôe_°rög
(
∑ckë
, (c⁄° *)
mosq
->
wûl
->
msg
.
∑ylﬂd
, (
uöt16_t
)mosq->wûl->msg.
∑ylﬂdÀn
);

197 if(
u£∫ame
){

198 
	`∑ckë__wrôe_°rög
(
∑ckë
, 
u£∫ame
, (
uöt16_t
)
	`°æí
(username));

200 if(
∑ssw‹d
){

201 
	`∑ckë__wrôe_°rög
(
∑ckë
, 
∑ssw‹d
, (
uöt16_t
)
	`°æí
(password));

204 
mosq
->
kì∑live
 = keepalive;

205 #ifde‡
WITH_BROKER


206 #ifde‡
WITH_BRIDGE


207 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Bridgê%†£ndög CONNECT", 
	`SAFE_PRINT
(
˛õ¡id
));

210 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†£ndög CONNECT", 
	`SAFE_PRINT
(
˛õ¡id
));

212  
	`∑ckë__queue
(
mosq
, 
∑ckë
);

213 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/send_disconnect.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

23 #ifde‡
WITH_BROKER


24 
	~"mosquôto_brokî_öã∫Æ.h
"

27 
	~"mosquôto.h
"

28 
	~"mosquôto_öã∫Æ.h
"

29 
	~"loggög_mosq.h
"

30 
	~"mem‹y_mosq.h
"

31 
	~"mqâ_¥Ÿocﬁ.h
"

32 
	~"∑ckë_mosq.h
"

33 
	~"¥›îty_mosq.h
"

34 
	~"£nd_mosq.h
"

37 
	$£nd__disc⁄√˘
(
mosquôto
 *
mosq
, 
uöt8_t
 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

39 
mosquôto__∑ckë
 *
∑ckë
 = 
NULL
;

40 
rc
;

42 
	`as£π
(
mosq
);

43 #ifde‡
WITH_BROKER


44 #ifde‡
WITH_BRIDGE


45 if(
mosq
->
bridge
){

46 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Bridgê%†£ndög DISCONNECT", 
	`SAFE_PRINT
(mosq->
id
));

50 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Sídög DISCONNECTÅÿ%†‘c%d)", 
	`SAFE_PRINT
(mosq->
id
), 
ªas⁄_code
);

54 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†£ndög DISCONNECT", 
	`SAFE_PRINT
(mosq->
id
));

56 
	`as£π
(
mosq
);

57 
∑ckë
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__∑ckë
));

58 if(!
∑ckë
Ë 
MOSQ_ERR_NOMEM
;

60 
∑ckë
->
comm™d
 = 
CMD_DISCONNECT
;

61 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
 && (
ªas⁄_code
 !0 || 
¥›îtõs
)){

62 
∑ckë
->
ªmaöög_Àngth
 = 1;

63 if(
¥›îtõs
){

64 
∑ckë
->
ªmaöög_Àngth
 +
	`¥›îty__gë_ªmaöög_Àngth
(
¥›îtõs
);

67 
∑ckë
->
ªmaöög_Àngth
 = 0;

70 
rc
 = 
	`∑ckë__Æloc
(
∑ckë
);

71 if(
rc
){

72 
	`mosquôto__‰ì
(
∑ckë
);

73  
rc
;

75 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
 && (
ªas⁄_code
 !0 || 
¥›îtõs
)){

76 
	`∑ckë__wrôe_byã
(
∑ckë
, 
ªas⁄_code
);

77 if(
¥›îtõs
){

78 
	`¥›îty__wrôe_Æl
(
∑ckë
, 
¥›îtõs
, 
åue
);

82  
	`∑ckë__queue
(
mosq
, 
∑ckë
);

83 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/send_mosq.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

25 #ifde‡
WITH_BROKER


26 
	~"mosquôto_brokî_öã∫Æ.h
"

27 
	~"sys_åì.h
"

29 
	#G_PUB_BYTES_SENT_INC
(
A
)

	)

32 
	~"mosquôto.h
"

33 
	~"mosquôto_öã∫Æ.h
"

34 
	~"loggög_mosq.h
"

35 
	~"mqâ_¥Ÿocﬁ.h
"

36 
	~"mem‹y_mosq.h
"

37 
	~"√t_mosq.h
"

38 
	~"∑ckë_mosq.h
"

39 
	~"¥›îty_mosq.h
"

40 
	~"£nd_mosq.h
"

41 
	~"time_mosq.h
"

42 
	~"utû_mosq.h
"

44 
	$£nd__pögªq
(
mosquôto
 *
mosq
)

46 
rc
;

47 
	`as£π
(
mosq
);

48 #ifde‡
WITH_BROKER


49 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Sídög PINGREQÅÿ%s", 
	`SAFE_PRINT
(
mosq
->
id
));

51 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†£ndög PINGREQ", 
	`SAFE_PRINT
(mosq->
id
));

53 
rc
 = 
	`£nd__sim∂e_comm™d
(
mosq
, 
CMD_PINGREQ
);

54 if(
rc
 =
MOSQ_ERR_SUCCESS
){

55 
mosq
->
pög_t
 = 
	`mosquôto_time
();

57  
rc
;

58 
	}
}

60 
	$£nd__pögª•
(
mosquôto
 *
mosq
)

62 #ifde‡
WITH_BROKER


63 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Sídög PINGRESPÅÿ%s", 
	`SAFE_PRINT
(
mosq
->
id
));

65 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†£ndög PINGRESP", 
	`SAFE_PRINT
(mosq->
id
));

67  
	`£nd__sim∂e_comm™d
(
mosq
, 
CMD_PINGRESP
);

68 
	}
}

70 
	$£nd__puback
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, 
uöt8_t
 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

72 #ifde‡
WITH_BROKER


73 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Sídög PUBACKÅÿ%†(m%d,Ñc%d)", 
	`SAFE_PRINT
(
mosq
->
id
), 
mid
, 
ªas⁄_code
);

75 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†£ndög PUBACK (m%d,Ñc%d)", 
	`SAFE_PRINT
(mosq->
id
), 
mid
, 
ªas⁄_code
);

77 
	`utû__ö¸emít_ª˚ive_quŸa
(
mosq
);

79  
	`£nd__comm™d_wôh_mid
(
mosq
, 
CMD_PUBACK
, 
mid
, 
Ál£
, 
ªas⁄_code
, 
¥›îtõs
);

80 
	}
}

82 
	$£nd__pubcomp
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

84 #ifde‡
WITH_BROKER


85 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Sídög PUBCOMPÅÿ%†(m%d)", 
	`SAFE_PRINT
(
mosq
->
id
), 
mid
);

87 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†£ndög PUBCOMP (m%d)", 
	`SAFE_PRINT
(mosq->
id
), 
mid
);

89 
	`utû__ö¸emít_ª˚ive_quŸa
(
mosq
);

91  
	`£nd__comm™d_wôh_mid
(
mosq
, 
CMD_PUBCOMP
, 
mid
, 
Ál£
, 0, 
¥›îtõs
);

92 
	}
}

95 
	$£nd__pubªc
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, 
uöt8_t
 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

97 #ifde‡
WITH_BROKER


98 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Sídög PUBRECÅÿ%†(m%d,Ñc%d)", 
	`SAFE_PRINT
(
mosq
->
id
), 
mid
, 
ªas⁄_code
);

100 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†£ndög PUBREC (m%d,Ñc%d)", 
	`SAFE_PRINT
(mosq->
id
), 
mid
, 
ªas⁄_code
);

102 if(
ªas⁄_code
 >0x80 && 
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

103 
	`utû__ö¸emít_ª˚ive_quŸa
(
mosq
);

106  
	`£nd__comm™d_wôh_mid
(
mosq
, 
CMD_PUBREC
, 
mid
, 
Ál£
, 
ªas⁄_code
, 
¥›îtõs
);

107 
	}
}

109 
	$£nd__pubªl
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

111 #ifde‡
WITH_BROKER


112 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Sídög PUBRELÅÿ%†(m%d)", 
	`SAFE_PRINT
(
mosq
->
id
), 
mid
);

114 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†£ndög PUBREL (m%d)", 
	`SAFE_PRINT
(mosq->
id
), 
mid
);

117  
	`£nd__comm™d_wôh_mid
(
mosq
, 
CMD_PUBREL
|2, 
mid
, 
Ál£
, 0, 
¥›îtõs
);

118 
	}
}

121 
	$£nd__comm™d_wôh_mid
(
mosquôto
 *
mosq
, 
uöt8_t
 
comm™d
, 
uöt16_t
 
mid
, 
boﬁ
 
dup
, uöt8_à
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

123 
mosquôto__∑ckë
 *
∑ckë
 = 
NULL
;

124 
rc
;

126 
	`as£π
(
mosq
);

127 
∑ckë
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__∑ckë
));

128 if(!
∑ckë
Ë 
MOSQ_ERR_NOMEM
;

130 
∑ckë
->
comm™d
 = command;

131 if(
dup
){

132 
∑ckë
->
comm™d
 |= 8;

134 
∑ckë
->
ªmaöög_Àngth
 = 2;

136 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

137 if(
ªas⁄_code
 !0 || 
¥›îtõs
){

138 
∑ckë
->
ªmaöög_Àngth
 += 1;

141 if(
¥›îtõs
){

142 
∑ckë
->
ªmaöög_Àngth
 +
	`¥›îty__gë_ªmaöög_Àngth
(
¥›îtõs
);

146 
rc
 = 
	`∑ckë__Æloc
(
∑ckë
);

147 if(
rc
){

148 
	`mosquôto__‰ì
(
∑ckë
);

149  
rc
;

152 
	`∑ckë__wrôe_uöt16
(
∑ckë
, 
mid
);

154 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

155 if(
ªas⁄_code
 !0 || 
¥›îtõs
){

156 
	`∑ckë__wrôe_byã
(
∑ckë
, 
ªas⁄_code
);

158 if(
¥›îtõs
){

159 
	`¥›îty__wrôe_Æl
(
∑ckë
, 
¥›îtõs
, 
åue
);

163  
	`∑ckë__queue
(
mosq
, 
∑ckë
);

164 
	}
}

167 
	$£nd__sim∂e_comm™d
(
mosquôto
 *
mosq
, 
uöt8_t
 
comm™d
)

169 
mosquôto__∑ckë
 *
∑ckë
 = 
NULL
;

170 
rc
;

172 
	`as£π
(
mosq
);

173 
∑ckë
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__∑ckë
));

174 if(!
∑ckë
Ë 
MOSQ_ERR_NOMEM
;

176 
∑ckë
->
comm™d
 = command;

177 
∑ckë
->
ªmaöög_Àngth
 = 0;

179 
rc
 = 
	`∑ckë__Æloc
(
∑ckë
);

180 if(
rc
){

181 
	`mosquôto__‰ì
(
∑ckë
);

182  
rc
;

185  
	`∑ckë__queue
(
mosq
, 
∑ckë
);

186 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/send_mosq.h

18 #i‚de‡
SEND_MOSQ_H


19 
	#SEND_MOSQ_H


	)

21 
	~"mosquôto.h
"

22 
	~"¥›îty_mosq.h
"

24 
£nd__sim∂e_comm™d
(
mosquôto
 *
mosq
, 
uöt8_t
 
comm™d
);

25 
£nd__comm™d_wôh_mid
(
mosquôto
 *
mosq
, 
uöt8_t
 
comm™d
, 
uöt16_t
 
mid
, 
boﬁ
 
dup
, uöt8_à
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

26 
£nd__ªÆ_publish
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, c⁄° *
t›ic
, 
uöt32_t
 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
uöt8_t
 
qos
, 
boﬁ
 
ªèö
, boﬁ 
dup
, c⁄° 
mosquôto_¥›îty
 *
cmsg_¥›s
, c⁄° mosquôto_¥›îty *
°‹e_¥›s
, uöt32_à
expúy_öãrvÆ
);

28 
£nd__c⁄√˘
(
mosquôto
 *
mosq
, 
uöt16_t
 
kì∑live
, 
boﬁ
 
˛ón_£ssi⁄
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

29 
£nd__disc⁄√˘
(
mosquôto
 *
mosq
, 
uöt8_t
 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

30 
£nd__pögªq
(
mosquôto
 *
mosq
);

31 
£nd__pögª•
(
mosquôto
 *
mosq
);

32 
£nd__puback
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, 
uöt8_t
 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

33 
£nd__pubcomp
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

34 
£nd__publish
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, c⁄° *
t›ic
, 
uöt32_t
 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
uöt8_t
 
qos
, 
boﬁ
 
ªèö
, boﬁ 
dup
, c⁄° 
mosquôto_¥›îty
 *
cmsg_¥›s
, c⁄° mosquôto_¥›îty *
°‹e_¥›s
, uöt32_à
expúy_öãrvÆ
);

35 
£nd__pubªc
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, 
uöt8_t
 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

36 
£nd__pubªl
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

37 
£nd__subs¸ibe
(
mosquôto
 *
mosq
, *
mid
, 
t›ic_cou¡
, *c⁄° *c⁄° 
t›ic
, 
t›ic_qos
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

38 
£nd__unsubs¸ibe
(
mosquôto
 *
mosq
, *
mid
, 
t›ic_cou¡
, *c⁄° *c⁄° 
t›ic
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/send_publish.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°rög.h
>

24 #ifde‡
WITH_BROKER


25 
	~"mosquôto_brokî_öã∫Æ.h
"

26 
	~"sys_åì.h
"

28 
	#G_PUB_BYTES_SENT_INC
(
A
)

	)

31 
	~"mosquôto.h
"

32 
	~"mosquôto_öã∫Æ.h
"

33 
	~"loggög_mosq.h
"

34 
	~"mqâ_¥Ÿocﬁ.h
"

35 
	~"mem‹y_mosq.h
"

36 
	~"√t_mosq.h
"

37 
	~"∑ckë_mosq.h
"

38 
	~"¥›îty_mosq.h
"

39 
	~"£nd_mosq.h
"

42 
	$£nd__publish
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, c⁄° *
t›ic
, 
uöt32_t
 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
uöt8_t
 
qos
, 
boﬁ
 
ªèö
, boﬁ 
dup
, c⁄° 
mosquôto_¥›îty
 *
cmsg_¥›s
, c⁄° mosquôto_¥›îty *
°‹e_¥›s
, uöt32_à
expúy_öãrvÆ
)

44 #ifde‡
WITH_BROKER


45 
size_t
 
Àn
;

46 #ifde‡
WITH_BRIDGE


47 
i
;

48 
mosquôto__bridge_t›ic
 *
cur_t›ic
;

49 
boﬁ
 
m©ch
;

50 
rc
;

51 *
m≠≥d_t›ic
 = 
NULL
;

52 *
t›ic_ãmp
 = 
NULL
;

55 
	`as£π
(
mosq
);

57 #i‡
	`deföed
(
WITH_BROKER
Ë&& deföed(
WITH_WEBSOCKETS
)

58 if(
mosq
->
sock
 =
INVALID_SOCKET
 && !mosq->
wsi
Ë 
MOSQ_ERR_NO_CONN
;

60 if(
mosq
->
sock
 =
INVALID_SOCKET
Ë 
MOSQ_ERR_NO_CONN
;

63 if(!
mosq
->
ªèö_avaûabÀ
){

64 
ªèö
 = 
Ál£
;

67 #ifde‡
WITH_BROKER


68 if(
mosq
->
li°íî
 && mosq->li°íî->
mou¡_poöt
){

69 
Àn
 = 
	`°æí
(
mosq
->
li°íî
->
mou¡_poöt
);

70 if(
Àn
 < 
	`°æí
(
t›ic
)){

71 
t›ic
 +
Àn
;

74  
MOSQ_ERR_SUCCESS
;

77 #ifde‡
WITH_BRIDGE


78 if(
mosq
->
bridge
 && mosq->bridge->
t›ics
 && mosq->bridge->
t›ic_ªm≠pög
){

79 
i
=0; i<
mosq
->
bridge
->
t›ic_cou¡
; i++){

80 
cur_t›ic
 = &
mosq
->
bridge
->
t›ics
[
i
];

81 if((
cur_t›ic
->
dúe˘i⁄
 =
bd_bŸh
 || cur_t›ic->dúe˘i⁄ =
bd_out
)

82 && (
cur_t›ic
->
ªmŸe_¥efix
 || cur_t›ic->
loˇl_¥efix
)){

85 
rc
 = 
	`mosquôto_t›ic_m©ches_sub
(
cur_t›ic
->
loˇl_t›ic
, 
t›ic
, &
m©ch
);

86 if(
rc
){

87  
rc
;

89 if(
m©ch
){

90 
m≠≥d_t›ic
 = 
	`mosquôto__°rdup
(
t›ic
);

91 if(!
m≠≥d_t›ic
Ë 
MOSQ_ERR_NOMEM
;

92 if(
cur_t›ic
->
loˇl_¥efix
){

94 if(!
	`°∫cmp
(
cur_t›ic
->
loˇl_¥efix
, 
m≠≥d_t›ic
, 
	`°æí
(cur_topic->local_prefix))){

95 
t›ic_ãmp
 = 
	`mosquôto__°rdup
(
m≠≥d_t›ic
+
	`°æí
(
cur_t›ic
->
loˇl_¥efix
));

96 
	`mosquôto__‰ì
(
m≠≥d_t›ic
);

97 if(!
t›ic_ãmp
){

98  
MOSQ_ERR_NOMEM
;

100 
m≠≥d_t›ic
 = 
t›ic_ãmp
;

104 if(
cur_t›ic
->
ªmŸe_¥efix
){

106 
Àn
 = 
	`°æí
(
m≠≥d_t›ic
Ë+ såÀn(
cur_t›ic
->
ªmŸe_¥efix
)+1;

107 
t›ic_ãmp
 = 
	`mosquôto__mÆloc
(
Àn
+1);

108 if(!
t›ic_ãmp
){

109 
	`mosquôto__‰ì
(
m≠≥d_t›ic
);

110  
MOSQ_ERR_NOMEM
;

112 
	`¢¥ötf
(
t›ic_ãmp
, 
Àn
, "%s%s", 
cur_t›ic
->
ªmŸe_¥efix
, 
m≠≥d_t›ic
);

113 
t›ic_ãmp
[
Àn
] = '\0';

114 
	`mosquôto__‰ì
(
m≠≥d_t›ic
);

115 
m≠≥d_t›ic
 = 
t›ic_ãmp
;

117 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Sídög PUBLISHÅÿ%†(d%d, q%d,Ñ%d, m%d, '%s', ... (%ld byãs))", 
	`SAFE_PRINT
(
mosq
->
id
), 
dup
, 
qos
, 
ªèö
, 
mid
, 
m≠≥d_t›ic
, ()
∑ylﬂdÀn
);

118 
	`G_PUB_BYTES_SENT_INC
(
∑ylﬂdÀn
);

119 
rc
 = 
	`£nd__ªÆ_publish
(
mosq
, 
mid
, 
m≠≥d_t›ic
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
, 
dup
, 
cmsg_¥›s
, 
°‹e_¥›s
, 
expúy_öãrvÆ
);

120 
	`mosquôto__‰ì
(
m≠≥d_t›ic
);

121  
rc
;

127 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Sídög PUBLISHÅÿ%†(d%d, q%d,Ñ%d, m%d, '%s', ... (%ld byãs))", 
	`SAFE_PRINT
(
mosq
->
id
), 
dup
, 
qos
, 
ªèö
, 
mid
, 
t›ic
, ()
∑ylﬂdÀn
);

128 
	`G_PUB_BYTES_SENT_INC
(
∑ylﬂdÀn
);

130 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†£ndög PUBLISH (d%d, q%d,Ñ%d, m%d, '%s', ... (%ld byãs))", 
	`SAFE_PRINT
(mosq->
id
), 
dup
, 
qos
, 
ªèö
, 
mid
, 
t›ic
, ()
∑ylﬂdÀn
);

133  
	`£nd__ªÆ_publish
(
mosq
, 
mid
, 
t›ic
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
, 
dup
, 
cmsg_¥›s
, 
°‹e_¥›s
, 
expúy_öãrvÆ
);

134 
	}
}

137 
	$£nd__ªÆ_publish
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, c⁄° *
t›ic
, 
uöt32_t
 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
uöt8_t
 
qos
, 
boﬁ
 
ªèö
, boﬁ 
dup
, c⁄° 
mosquôto_¥›îty
 *
cmsg_¥›s
, c⁄° mosquôto_¥›îty *
°‹e_¥›s
, uöt32_à
expúy_öãrvÆ
)

139 
mosquôto__∑ckë
 *
∑ckë
 = 
NULL
;

140 
∑ckëÀn
;

141 
¥›Àn
 = 0, 
v¨byãs
;

142 
rc
;

143 
mosquôto_¥›îty
 
expúy_¥›
;

145 
	`as£π
(
mosq
);

147 if(
t›ic
){

148 
∑ckëÀn
 = 2+()
	`°æí
(
t›ic
Ë+ 
∑ylﬂdÀn
;

150 
∑ckëÀn
 = 2 + 
∑ylﬂdÀn
;

152 if(
qos
 > 0Ë
∑ckëÀn
 += 2;

153 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

154 
¥›Àn
 = 0;

155 
¥›Àn
 +
	`¥›îty__gë_Àngth_Æl
(
cmsg_¥›s
);

156 
¥›Àn
 +
	`¥›îty__gë_Àngth_Æl
(
°‹e_¥›s
);

157 if(
expúy_öãrvÆ
 > 0){

158 
expúy_¥›
.
√xt
 = 
NULL
;

159 
expúy_¥›
.
vÆue
.
i32
 = 
expúy_öãrvÆ
;

160 
expúy_¥›
.
idítifõr
 = 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
;

161 
expúy_¥›
.
˛õ¡_gíî©ed
 = 
Ál£
;

163 
¥›Àn
 +
	`¥›îty__gë_Àngth_Æl
(&
expúy_¥›
);

166 
v¨byãs
 = 
	`∑ckë__v¨öt_byãs
(
¥›Àn
);

167 if(
v¨byãs
 > 4){

169 
cmsg_¥›s
 = 
NULL
;

170 
°‹e_¥›s
 = 
NULL
;

171 
expúy_öãrvÆ
 = 0;

173 
∑ckëÀn
 +
¥›Àn
 + 
v¨byãs
;

176 if(
	`∑ckë__check_ovîsize
(
mosq
, 
∑ckëÀn
)){

177 #ifde‡
WITH_BROKER


178 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Dr›pögÅoÿœrgêoutgoög PUBLISH f‹ %†(%d byãs)", 
	`SAFE_PRINT
(
mosq
->
id
), 
∑ckëÀn
);

180 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Dr›pögÅoÿœrgêoutgoög PUBLISH (%d byãs)", 
∑ckëÀn
);

182  
MOSQ_ERR_OVERSIZE_PACKET
;

185 
∑ckë
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__∑ckë
));

186 if(!
∑ckë
Ë 
MOSQ_ERR_NOMEM
;

188 
∑ckë
->
mid
 = mid;

189 
∑ckë
->
comm™d
 = (
uöt8_t
)(
CMD_PUBLISH
 | (uöt8_t)((
dup
&0x1)<<3Ë| (uöt8_t)(
qos
<<1Ë| 
ªèö
);

190 
∑ckë
->
ªmaöög_Àngth
 = 
∑ckëÀn
;

191 
rc
 = 
	`∑ckë__Æloc
(
∑ckë
);

192 if(
rc
){

193 
	`mosquôto__‰ì
(
∑ckë
);

194  
rc
;

197 if(
t›ic
){

198 
	`∑ckë__wrôe_°rög
(
∑ckë
, 
t›ic
, (
uöt16_t
)
	`°æí
(topic));

200 
	`∑ckë__wrôe_uöt16
(
∑ckë
, 0);

202 if(
qos
 > 0){

203 
	`∑ckë__wrôe_uöt16
(
∑ckë
, 
mid
);

206 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

207 
	`∑ckë__wrôe_v¨öt
(
∑ckë
, 
¥›Àn
);

208 
	`¥›îty__wrôe_Æl
(
∑ckë
, 
cmsg_¥›s
, 
Ál£
);

209 
	`¥›îty__wrôe_Æl
(
∑ckë
, 
°‹e_¥›s
, 
Ál£
);

210 if(
expúy_öãrvÆ
 > 0){

211 
	`¥›îty__wrôe_Æl
(
∑ckë
, &
expúy_¥›
, 
Ál£
);

216 if(
∑ylﬂdÀn
){

217 
	`∑ckë__wrôe_byãs
(
∑ckë
, 
∑ylﬂd
, 
∑ylﬂdÀn
);

220  
	`∑ckë__queue
(
mosq
, 
∑ckë
);

221 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/send_subscribe.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°rög.h
>

24 #ifde‡
WITH_BROKER


25 
	~"mosquôto_brokî_öã∫Æ.h
"

28 
	~"mosquôto.h
"

29 
	~"mosquôto_öã∫Æ.h
"

30 
	~"loggög_mosq.h
"

31 
	~"mem‹y_mosq.h
"

32 
	~"mqâ_¥Ÿocﬁ.h
"

33 
	~"∑ckë_mosq.h
"

34 
	~"¥›îty_mosq.h
"

35 
	~"£nd_mosq.h
"

36 
	~"utû_mosq.h
"

39 
	$£nd__subs¸ibe
(
mosquôto
 *
mosq
, *
mid
, 
t›ic_cou¡
, *c⁄° *c⁄° 
t›ic
, 
t›ic_qos
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

41 
mosquôto__∑ckë
 *
∑ckë
 = 
NULL
;

42 
uöt32_t
 
∑ckëÀn
;

43 
uöt16_t
 
loˇl_mid
;

44 
rc
;

45 
i
;

46 
size_t
 
éí
;

48 
	`as£π
(
mosq
);

49 
	`as£π
(
t›ic
);

51 
∑ckëÀn
 = 2;

52 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

53 
∑ckëÀn
 +
	`¥›îty__gë_ªmaöög_Àngth
(
¥›îtõs
);

55 
i
=0; i<
t›ic_cou¡
; i++){

56 
éí
 = 
	`°æí
(
t›ic
[
i
]);

57 if(
éí
 > 
UINT16_MAX
){

58  
MOSQ_ERR_INVAL
;

60 
∑ckëÀn
 +2U+(
uöt16_t
)
éí
 + 1U;

63 
∑ckë
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__∑ckë
));

64 if(!
∑ckë
Ë 
MOSQ_ERR_NOMEM
;

67 
∑ckë
->
comm™d
 = 
CMD_SUBSCRIBE
 | (1<<1);

68 
∑ckë
->
ªmaöög_Àngth
 = 
∑ckëÀn
;

69 
rc
 = 
	`∑ckë__Æloc
(
∑ckë
);

70 if(
rc
){

71 
	`mosquôto__‰ì
(
∑ckë
);

72  
rc
;

76 
loˇl_mid
 = 
	`mosquôto__mid_gíî©e
(
mosq
);

77 if(
mid
Ë*mid = ()
loˇl_mid
;

78 
	`∑ckë__wrôe_uöt16
(
∑ckë
, 
loˇl_mid
);

80 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

81 
	`¥›îty__wrôe_Æl
(
∑ckë
, 
¥›îtõs
, 
åue
);

85 
i
=0; i<
t›ic_cou¡
; i++){

86 
	`∑ckë__wrôe_°rög
(
∑ckë
, 
t›ic
[
i
], (
uöt16_t
)
	`°æí
(topic[i]));

87 
	`∑ckë__wrôe_byã
(
∑ckë
, (
uöt8_t
)
t›ic_qos
);

90 #ifde‡
WITH_BROKER


91 #ifde‡
WITH_BRIDGE


92 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Bridgê%†£ndög SUBSCRIBE (Mid: %d, T›ic: %s, QoS: %d, O±i⁄s: 0x%02x)", 
	`SAFE_PRINT
(mosq->
id
), 
loˇl_mid
, 
t›ic
[0], 
t›ic_qos
&0x03,Åopic_qos&0xFC);

95 
i
=0; i<
t›ic_cou¡
; i++){

96 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†£ndög SUBSCRIBE (Mid: %d, T›ic: %s, QoS: %d, O±i⁄s: 0x%02x)", 
	`SAFE_PRINT
(mosq->
id
), 
loˇl_mid
, 
t›ic
[
i
], 
t›ic_qos
&0x03,Åopic_qos&0xFC);

100  
	`∑ckë__queue
(
mosq
, 
∑ckë
);

101 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/send_unsubscribe.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°rög.h
>

24 #ifde‡
WITH_BROKER


25 
	~"mosquôto_brokî_öã∫Æ.h
"

28 
	~"mosquôto.h
"

29 
	~"loggög_mosq.h
"

30 
	~"mem‹y_mosq.h
"

31 
	~"mqâ_¥Ÿocﬁ.h
"

32 
	~"∑ckë_mosq.h
"

33 
	~"¥›îty_mosq.h
"

34 
	~"£nd_mosq.h
"

35 
	~"utû_mosq.h
"

38 
	$£nd__unsubs¸ibe
(
mosquôto
 *
mosq
, *
mid
, 
t›ic_cou¡
, *c⁄° *c⁄° 
t›ic
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

40 
mosquôto__∑ckë
 *
∑ckë
 = 
NULL
;

41 
uöt32_t
 
∑ckëÀn
;

42 
uöt16_t
 
loˇl_mid
;

43 
rc
;

44 
i
;

45 
size_t
 
éí
;

47 
	`as£π
(
mosq
);

48 
	`as£π
(
t›ic
);

50 
∑ckëÀn
 = 2;

51 
i
=0; i<
t›ic_cou¡
; i++){

52 
éí
 = 
	`°æí
(
t›ic
[
i
]);

53 if(
éí
 > 
UINT16_MAX
){

54  
MOSQ_ERR_INVAL
;

56 
∑ckëÀn
 +2U+(
uöt16_t
)
éí
;

59 
∑ckë
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__∑ckë
));

60 if(!
∑ckë
Ë 
MOSQ_ERR_NOMEM
;

62 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

63 
∑ckëÀn
 +
	`¥›îty__gë_ªmaöög_Àngth
(
¥›îtõs
);

66 
∑ckë
->
comm™d
 = 
CMD_UNSUBSCRIBE
 | (1<<1);

67 
∑ckë
->
ªmaöög_Àngth
 = 
∑ckëÀn
;

68 
rc
 = 
	`∑ckë__Æloc
(
∑ckë
);

69 if(
rc
){

70 
	`mosquôto__‰ì
(
∑ckë
);

71  
rc
;

75 
loˇl_mid
 = 
	`mosquôto__mid_gíî©e
(
mosq
);

76 if(
mid
Ë*mid = ()
loˇl_mid
;

77 
	`∑ckë__wrôe_uöt16
(
∑ckë
, 
loˇl_mid
);

79 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

81 
	`¥›îty__wrôe_Æl
(
∑ckë
, 
¥›îtõs
, 
åue
);

85 
i
=0; i<
t›ic_cou¡
; i++){

86 
	`∑ckë__wrôe_°rög
(
∑ckë
, 
t›ic
[
i
], (
uöt16_t
)
	`°æí
(topic[i]));

89 #ifde‡
WITH_BROKER


90 #ifde‡
WITH_BRIDGE


91 
i
=0; i<
t›ic_cou¡
; i++){

92 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Bridgê%†£ndög UNSUBSCRIBE (Mid: %d, T›ic: %s)", 
	`SAFE_PRINT
(mosq->
id
), 
loˇl_mid
, 
t›ic
[
i
]);

96 
i
=0; i<
t›ic_cou¡
; i++){

97 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†£ndög UNSUBSCRIBE (Mid: %d, T›ic: %s)", 
	`SAFE_PRINT
(mosq->
id
), 
loˇl_mid
, 
t›ic
[
i
]);

100  
	`∑ckë__queue
(
mosq
, 
∑ckë
);

101 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/socks_mosq.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 
	~<°rög.h
>

23 
	~<limôs.h
>

24 #ifde‡
WIN32


25 
	~<ws2t˝ù.h
>

26 #ñi‡
deföed
(
__QNX__
)

27 
	~<sys/sockë.h
>

28 
	~<¨∑/öë.h
>

29 
	~<√töë/ö.h
>

31 
	~<¨∑/öë.h
>

33 #i‡
deföed
(
__FªeBSD__
Ë|| deföed(
__O≥nBSD__
)

34 
	~<sys/sockë.h
>

35 
	~<√töë/ö.h
>

38 
	~"mosquôto_öã∫Æ.h
"

39 
	~"mem‹y_mosq.h
"

40 
	~"√t_mosq.h
"

41 
	~"∑ckë_mosq.h
"

42 
	~"£nd_mosq.h
"

43 
	~"socks_mosq.h
"

44 
	~"utû_mosq.h
"

46 
	#SOCKS_AUTH_NONE
 0x00U

	)

47 
	#SOCKS_AUTH_GSS
 0x01U

	)

48 
	#SOCKS_AUTH_USERPASS
 0x02U

	)

49 
	#SOCKS_AUTH_NO_ACCEPTABLE
 0xFFU

	)

51 
	#SOCKS_ATYPE_IP_V4
 1U

	)

52 
	#SOCKS_ATYPE_DOMAINNAME
 3U

	)

53 
	#SOCKS_ATYPE_IP_V6
 4U

	)

55 
	#SOCKS_REPLY_SUCCEEDED
 0x00U

	)

56 
	#SOCKS_REPLY_GENERAL_FAILURE
 0x01U

	)

57 
	#SOCKS_REPLY_CONNECTION_NOT_ALLOWED
 0x02U

	)

58 
	#SOCKS_REPLY_NETWORK_UNREACHABLE
 0x03U

	)

59 
	#SOCKS_REPLY_HOST_UNREACHABLE
 0x04U

	)

60 
	#SOCKS_REPLY_CONNECTION_REFUSED
 0x05U

	)

61 
	#SOCKS_REPLY_TTL_EXPIRED
 0x06U

	)

62 
	#SOCKS_REPLY_COMMAND_NOT_SUPPORTED
 0x07U

	)

63 
	#SOCKS_REPLY_ADDRESS_TYPE_NOT_SUPPORTED
 0x08U

	)

65 
	$mosquôto_socks5_£t
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
)

67 #ifde‡
WITH_SOCKS


68 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

69 if(!
ho°
 || 
	`°æí
(ho°Ë> 256Ë 
MOSQ_ERR_INVAL
;

70 if(
p‹t
 < 1 ||Ö‹à> 
UINT16_MAX
Ë 
MOSQ_ERR_INVAL
;

72 
	`mosquôto__‰ì
(
mosq
->
socks5_ho°
);

73 
mosq
->
socks5_ho°
 = 
NULL
;

75 
mosq
->
socks5_ho°
 = 
	`mosquôto__°rdup
(
ho°
);

76 if(!
mosq
->
socks5_ho°
){

77  
MOSQ_ERR_NOMEM
;

80 
mosq
->
socks5_p‹t
 = (
uöt16_t
)
p‹t
;

82 
	`mosquôto__‰ì
(
mosq
->
socks5_u£∫ame
);

83 
mosq
->
socks5_u£∫ame
 = 
NULL
;

85 
	`mosquôto__‰ì
(
mosq
->
socks5_∑ssw‹d
);

86 
mosq
->
socks5_∑ssw‹d
 = 
NULL
;

88 if(
u£∫ame
){

89 if(
	`°æí
(
u£∫ame
Ë> 
UINT8_MAX
){

90  
MOSQ_ERR_INVAL
;

92 
mosq
->
socks5_u£∫ame
 = 
	`mosquôto__°rdup
(
u£∫ame
);

93 if(!
mosq
->
socks5_u£∫ame
){

94  
MOSQ_ERR_NOMEM
;

97 if(
∑ssw‹d
){

98 if(
	`°æí
(
∑ssw‹d
Ë> 
UINT8_MAX
){

99  
MOSQ_ERR_INVAL
;

101 
mosq
->
socks5_∑ssw‹d
 = 
	`mosquôto__°rdup
(
∑ssw‹d
);

102 if(!
mosq
->
socks5_∑ssw‹d
){

103 
	`mosquôto__‰ì
(
mosq
->
socks5_u£∫ame
);

104  
MOSQ_ERR_NOMEM
;

109  
MOSQ_ERR_SUCCESS
;

111 
	`UNUSED
(
mosq
);

112 
	`UNUSED
(
ho°
);

113 
	`UNUSED
(
p‹t
);

114 
	`UNUSED
(
u£∫ame
);

115 
	`UNUSED
(
∑ssw‹d
);

117  
MOSQ_ERR_NOT_SUPPORTED
;

119 
	}
}

121 #ifde‡
WITH_SOCKS


122 
	$socks5__£nd
(
mosquôto
 *
mosq
)

124 
mosquôto__∑ckë
 *
∑ckë
;

125 
size_t
 
¶í
;

126 
uöt8_t
 
uÀn
, 
∂í
;

128 
ö_addr
 
addr_ùv4
;

129 
ö6_addr
 
addr_ùv6
;

130 
ùv4_±⁄_ªsu…
;

131 
ùv6_±⁄_ªsu…
;

132 
mosquôto_˛õ¡_°©e
 
°©e
;

134 
°©e
 = 
	`mosquôto__gë_°©e
(
mosq
);

136 if(
°©e
 =
mosq_cs_socks5_√w
){

137 
∑ckë
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__∑ckë
));

138 if(!
∑ckë
Ë 
MOSQ_ERR_NOMEM
;

140 if(
mosq
->
socks5_u£∫ame
){

141 
∑ckë
->
∑ckë_Àngth
 = 4;

143 
∑ckë
->
∑ckë_Àngth
 = 3;

145 
∑ckë
->
∑ylﬂd
 = 
	`mosquôto__mÆloc
((
uöt8_t
)*∑ckë->
∑ckë_Àngth
);

147 
∑ckë
->
∑ylﬂd
[0] = 0x05;

148 if(
mosq
->
socks5_u£∫ame
){

149 
∑ckë
->
∑ylﬂd
[1] = 2;

150 
∑ckë
->
∑ylﬂd
[2] = 
SOCKS_AUTH_NONE
;

151 
∑ckë
->
∑ylﬂd
[3] = 
SOCKS_AUTH_USERPASS
;

153 
∑ckë
->
∑ylﬂd
[1] = 1;

154 
∑ckë
->
∑ylﬂd
[2] = 
SOCKS_AUTH_NONE
;

157 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_socks5_°¨t
);

159 
mosq
->
ö_∑ckë
.
pos
 = 0;

160 
mosq
->
ö_∑ckë
.
∑ckë_Àngth
 = 2;

161 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 = 2;

162 
mosq
->
ö_∑ckë
.
∑ylﬂd
 = 
	`mosquôto__mÆloc
((
uöt8_t
)*2);

163 if(!
mosq
->
ö_∑ckë
.
∑ylﬂd
){

164 
	`mosquôto__‰ì
(
∑ckë
->
∑ylﬂd
);

165 
	`mosquôto__‰ì
(
∑ckë
);

166  
MOSQ_ERR_NOMEM
;

169  
	`∑ckë__queue
(
mosq
, 
∑ckë
);

170 }if(
°©e
 =
mosq_cs_socks5_auth_ok
){

171 
∑ckë
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__∑ckë
));

172 if(!
∑ckë
Ë 
MOSQ_ERR_NOMEM
;

174 
ùv4_±⁄_ªsu…
 = 
	`öë_±⁄
(
AF_INET
, 
mosq
->
ho°
, &
addr_ùv4
);

175 
ùv6_±⁄_ªsu…
 = 
	`öë_±⁄
(
AF_INET6
, 
mosq
->
ho°
, &
addr_ùv6
);

177 if(
ùv4_±⁄_ªsu…
 == 1){

178 
∑ckë
->
∑ckë_Àngth
 = 10;

179 
∑ckë
->
∑ylﬂd
 = 
	`mosquôto__mÆloc
((
uöt8_t
)*∑ckë->
∑ckë_Àngth
);

180 if(!
∑ckë
->
∑ylﬂd
){

181 
	`mosquôto__‰ì
(
∑ckë
);

182  
MOSQ_ERR_NOMEM
;

184 
∑ckë
->
∑ylﬂd
[3] = 
SOCKS_ATYPE_IP_V4
;

185 
	`mem˝y
(&(
∑ckë
->
∑ylﬂd
[4]), (c⁄° *)&
addr_ùv4
, 4);

186 
∑ckë
->
∑ylﬂd
[4+4] = 
	`MOSQ_MSB
(
mosq
->
p‹t
);

187 
∑ckë
->
∑ylﬂd
[4+4+1] = 
	`MOSQ_LSB
(
mosq
->
p‹t
);

189 }if(
ùv6_±⁄_ªsu…
 == 1){

190 
∑ckë
->
∑ckë_Àngth
 = 22;

191 
∑ckë
->
∑ylﬂd
 = 
	`mosquôto__mÆloc
((
uöt8_t
)*∑ckë->
∑ckë_Àngth
);

192 if(!
∑ckë
->
∑ylﬂd
){

193 
	`mosquôto__‰ì
(
∑ckë
);

194  
MOSQ_ERR_NOMEM
;

196 
∑ckë
->
∑ylﬂd
[3] = 
SOCKS_ATYPE_IP_V6
;

197 
	`mem˝y
(&(
∑ckë
->
∑ylﬂd
[4]), (c⁄° *)&
addr_ùv6
, 16);

198 
∑ckë
->
∑ylﬂd
[4+16] = 
	`MOSQ_MSB
(
mosq
->
p‹t
);

199 
∑ckë
->
∑ylﬂd
[4+16+1] = 
	`MOSQ_LSB
(
mosq
->
p‹t
);

202 
¶í
 = 
	`°æí
(
mosq
->
ho°
);

203 if(
¶í
 > 
UCHAR_MAX
){

204 
	`mosquôto__‰ì
(
∑ckë
);

205  
MOSQ_ERR_NOMEM
;

207 
∑ckë
->
∑ckë_Àngth
 = 7U + (
uöt32_t
)
¶í
;

208 
∑ckë
->
∑ylﬂd
 = 
	`mosquôto__mÆloc
((
uöt8_t
)*∑ckë->
∑ckë_Àngth
);

209 if(!
∑ckë
->
∑ylﬂd
){

210 
	`mosquôto__‰ì
(
∑ckë
);

211  
MOSQ_ERR_NOMEM
;

213 
∑ckë
->
∑ylﬂd
[3] = 
SOCKS_ATYPE_DOMAINNAME
;

214 
∑ckë
->
∑ylﬂd
[4] = (
uöt8_t
)
¶í
;

215 
	`mem˝y
(&(
∑ckë
->
∑ylﬂd
[5]), 
mosq
->
ho°
, 
¶í
);

216 
∑ckë
->
∑ylﬂd
[5+
¶í
] = 
	`MOSQ_MSB
(
mosq
->
p‹t
);

217 
∑ckë
->
∑ylﬂd
[6+
¶í
] = 
	`MOSQ_LSB
(
mosq
->
p‹t
);

219 
∑ckë
->
∑ylﬂd
[0] = 0x05;

220 
∑ckë
->
∑ylﬂd
[1] = 0x01;

221 
∑ckë
->
∑ylﬂd
[2] = 0x00;

223 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_socks5_ªque°
);

225 
mosq
->
ö_∑ckë
.
pos
 = 0;

226 
mosq
->
ö_∑ckë
.
∑ckë_Àngth
 = 5;

227 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 = 5;

228 
mosq
->
ö_∑ckë
.
∑ylﬂd
 = 
	`mosquôto__mÆloc
((
uöt8_t
)*5);

229 if(!
mosq
->
ö_∑ckë
.
∑ylﬂd
){

230 
	`mosquôto__‰ì
(
∑ckë
->
∑ylﬂd
);

231 
	`mosquôto__‰ì
(
∑ckë
);

232  
MOSQ_ERR_NOMEM
;

235  
	`∑ckë__queue
(
mosq
, 
∑ckë
);

236 }if(
°©e
 =
mosq_cs_socks5_£nd_u£Ωass
){

237 
∑ckë
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__∑ckë
));

238 if(!
∑ckë
Ë 
MOSQ_ERR_NOMEM
;

240 
uÀn
 = (
uöt8_t
)
	`°æí
(
mosq
->
socks5_u£∫ame
);

241 
∂í
 = (
uöt8_t
)
	`°æí
(
mosq
->
socks5_∑ssw‹d
);

242 
∑ckë
->
∑ckë_Àngth
 = 3U + 
uÀn
 + 
∂í
;

243 
∑ckë
->
∑ylﬂd
 = 
	`mosquôto__mÆloc
((
uöt8_t
)*∑ckë->
∑ckë_Àngth
);

246 
∑ckë
->
∑ylﬂd
[0] = 0x01;

247 
∑ckë
->
∑ylﬂd
[1] = 
uÀn
;

248 
	`mem˝y
(&(
∑ckë
->
∑ylﬂd
[2]), 
mosq
->
socks5_u£∫ame
, 
uÀn
);

249 
∑ckë
->
∑ylﬂd
[2+
uÀn
] = 
∂í
;

250 
	`mem˝y
(&(
∑ckë
->
∑ylﬂd
[3+
uÀn
]), 
mosq
->
socks5_∑ssw‹d
, 
∂í
);

252 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_socks5_u£Ωass_ª∂y
);

254 
mosq
->
ö_∑ckë
.
pos
 = 0;

255 
mosq
->
ö_∑ckë
.
∑ckë_Àngth
 = 2;

256 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 = 2;

257 
mosq
->
ö_∑ckë
.
∑ylﬂd
 = 
	`mosquôto__mÆloc
((
uöt8_t
)*2);

258 if(!
mosq
->
ö_∑ckë
.
∑ylﬂd
){

259 
	`mosquôto__‰ì
(
∑ckë
->
∑ylﬂd
);

260 
	`mosquôto__‰ì
(
∑ckë
);

261  
MOSQ_ERR_NOMEM
;

264  
	`∑ckë__queue
(
mosq
, 
∑ckë
);

266  
MOSQ_ERR_SUCCESS
;

267 
	}
}

269 
	$socks5__ªad
(
mosquôto
 *
mosq
)

271 
ssize_t
 
Àn
;

272 
uöt8_t
 *
∑ylﬂd
;

273 
uöt8_t
 
i
;

274 
mosquôto_˛õ¡_°©e
 
°©e
;

276 
°©e
 = 
	`mosquôto__gë_°©e
(
mosq
);

277 if(
°©e
 =
mosq_cs_socks5_°¨t
){

278 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 > 0){

279 
Àn
 = 
	`√t__ªad
(
mosq
, &(mosq->
ö_∑ckë
.
∑ylﬂd
[mosq->ö_∑ckë.
pos
]), mosq->ö_∑ckë.
to_¥o˚ss
);

280 if(
Àn
 > 0){

281 
mosq
->
ö_∑ckë
.
pos
 +(
uöt32_t
)
Àn
;

282 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 -(
uöt32_t
)
Àn
;

284 #ifde‡
WIN32


285 
î∫o
 = 
	`WSAGëLa°Eº‹
();

287 if(
î∫o
 =
EAGAIN
 ||Éºnÿ=
COMPAT_EWOULDBLOCK
){

288  
MOSQ_ERR_SUCCESS
;

290 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

291 
î∫o
){

293  
MOSQ_ERR_PROXY
;

294 
COMPAT_ECONNRESET
:

295  
MOSQ_ERR_CONN_LOST
;

297  
MOSQ_ERR_ERRNO
;

302 if(
mosq
->
ö_∑ckë
.
∑ylﬂd
[0] != 5){

303 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

304  
MOSQ_ERR_PROXY
;

306 
mosq
->
ö_∑ckë
.
∑ylﬂd
[1]){

307 
SOCKS_AUTH_NONE
:

308 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

309 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_socks5_auth_ok
);

310  
	`socks5__£nd
(
mosq
);

311 
SOCKS_AUTH_USERPASS
:

312 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

313 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_socks5_£nd_u£Ωass
);

314  
	`socks5__£nd
(
mosq
);

316 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

317  
MOSQ_ERR_AUTH
;

319 }if(
°©e
 =
mosq_cs_socks5_u£Ωass_ª∂y
){

320 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 > 0){

321 
Àn
 = 
	`√t__ªad
(
mosq
, &(mosq->
ö_∑ckë
.
∑ylﬂd
[mosq->ö_∑ckë.
pos
]), mosq->ö_∑ckë.
to_¥o˚ss
);

322 if(
Àn
 > 0){

323 
mosq
->
ö_∑ckë
.
pos
 +(
uöt32_t
)
Àn
;

324 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 -(
uöt32_t
)
Àn
;

326 #ifde‡
WIN32


327 
î∫o
 = 
	`WSAGëLa°Eº‹
();

329 if(
î∫o
 =
EAGAIN
 ||Éºnÿ=
COMPAT_EWOULDBLOCK
){

330  
MOSQ_ERR_SUCCESS
;

332 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

333 
î∫o
){

335  
MOSQ_ERR_PROXY
;

336 
COMPAT_ECONNRESET
:

337  
MOSQ_ERR_CONN_LOST
;

339  
MOSQ_ERR_ERRNO
;

344 if(
mosq
->
ö_∑ckë
.
∑ylﬂd
[0] != 1){

345 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

346  
MOSQ_ERR_PROXY
;

348 if(
mosq
->
ö_∑ckë
.
∑ylﬂd
[1] == 0){

349 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

350 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_socks5_auth_ok
);

351  
	`socks5__£nd
(
mosq
);

353 
i
 = 
mosq
->
ö_∑ckë
.
∑ylﬂd
[1];

354 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

355 
i
){

356 
SOCKS_REPLY_CONNECTION_NOT_ALLOWED
:

357  
MOSQ_ERR_AUTH
;

359 
SOCKS_REPLY_NETWORK_UNREACHABLE
:

360 
SOCKS_REPLY_HOST_UNREACHABLE
:

361 
SOCKS_REPLY_CONNECTION_REFUSED
:

362  
MOSQ_ERR_NO_CONN
;

364 
SOCKS_REPLY_GENERAL_FAILURE
:

365 
SOCKS_REPLY_TTL_EXPIRED
:

366 
SOCKS_REPLY_COMMAND_NOT_SUPPORTED
:

367 
SOCKS_REPLY_ADDRESS_TYPE_NOT_SUPPORTED
:

368  
MOSQ_ERR_PROXY
;

371  
MOSQ_ERR_INVAL
;

373  
MOSQ_ERR_PROXY
;

375 }if(
°©e
 =
mosq_cs_socks5_ªque°
){

376 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 > 0){

377 
Àn
 = 
	`√t__ªad
(
mosq
, &(mosq->
ö_∑ckë
.
∑ylﬂd
[mosq->ö_∑ckë.
pos
]), mosq->ö_∑ckë.
to_¥o˚ss
);

378 if(
Àn
 > 0){

379 
mosq
->
ö_∑ckë
.
pos
 +(
uöt32_t
)
Àn
;

380 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 -(
uöt32_t
)
Àn
;

382 #ifde‡
WIN32


383 
î∫o
 = 
	`WSAGëLa°Eº‹
();

385 if(
î∫o
 =
EAGAIN
 ||Éºnÿ=
COMPAT_EWOULDBLOCK
){

386  
MOSQ_ERR_SUCCESS
;

388 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

389 
î∫o
){

391  
MOSQ_ERR_PROXY
;

392 
COMPAT_ECONNRESET
:

393  
MOSQ_ERR_CONN_LOST
;

395  
MOSQ_ERR_ERRNO
;

401 if(
mosq
->
ö_∑ckë
.
∑ckë_Àngth
 == 5){

403 if(
mosq
->
ö_∑ckë
.
∑ylﬂd
[3] =
SOCKS_ATYPE_IP_V4
){

404 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 += 4+2-1;

405 
mosq
->
ö_∑ckë
.
∑ckë_Àngth
 += 4+2-1;

406 }if(
mosq
->
ö_∑ckë
.
∑ylﬂd
[3] =
SOCKS_ATYPE_IP_V6
){

407 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 += 16+2-1;

408 
mosq
->
ö_∑ckë
.
∑ckë_Àngth
 += 16+2-1;

409 }if(
mosq
->
ö_∑ckë
.
∑ylﬂd
[3] =
SOCKS_ATYPE_DOMAINNAME
){

410 if(
mosq
->
ö_∑ckë
.
∑ylﬂd
[4] > 0){

411 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 +mosq->ö_∑ckë.
∑ylﬂd
[4];

412 
mosq
->
ö_∑ckë
.
∑ckë_Àngth
 +mosq->ö_∑ckë.
∑ylﬂd
[4];

415 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

416  
MOSQ_ERR_PROTOCOL
;

418 
∑ylﬂd
 = 
	`mosquôto__ªÆloc
(
mosq
->
ö_∑ckë
.∑ylﬂd, mosq->ö_∑ckë.
∑ckë_Àngth
);

419 if(
∑ylﬂd
){

420 
mosq
->
ö_∑ckë
.
∑ylﬂd
 =Öayload;

422 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

423  
MOSQ_ERR_NOMEM
;

425  
MOSQ_ERR_SUCCESS
;

429 if(
mosq
->
ö_∑ckë
.
∑ylﬂd
[0] != 5){

430 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

431  
MOSQ_ERR_PROXY
;

433 if(
mosq
->
ö_∑ckë
.
∑ylﬂd
[1] == 0){

435 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

436 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_√w
);

437 if(
mosq
->
socks5_ho°
){

438 
rc
 = 
	`√t__sockë_c⁄√˘_°ï3
(
mosq
, mosq->
ho°
);

439 if(
rc
) Ñc;

441  
	`£nd__c⁄√˘
(
mosq
, mosq->
kì∑live
, mosq->
˛ón_°¨t
, 
NULL
);

443 
i
 = 
mosq
->
ö_∑ckë
.
∑ylﬂd
[1];

444 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

445 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_socks5_√w
);

446 
i
){

447 
SOCKS_REPLY_CONNECTION_NOT_ALLOWED
:

448  
MOSQ_ERR_AUTH
;

450 
SOCKS_REPLY_NETWORK_UNREACHABLE
:

451 
SOCKS_REPLY_HOST_UNREACHABLE
:

452 
SOCKS_REPLY_CONNECTION_REFUSED
:

453  
MOSQ_ERR_NO_CONN
;

455 
SOCKS_REPLY_GENERAL_FAILURE
:

456 
SOCKS_REPLY_TTL_EXPIRED
:

457 
SOCKS_REPLY_COMMAND_NOT_SUPPORTED
:

458 
SOCKS_REPLY_ADDRESS_TYPE_NOT_SUPPORTED
:

459  
MOSQ_ERR_PROXY
;

462  
MOSQ_ERR_INVAL
;

466  
	`∑ckë__ªad
(
mosq
);

468  
MOSQ_ERR_SUCCESS
;

469 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/socks_mosq.h

19 #i‚de‡
SOCKS_MOSQ_H


20 
	#SOCKS_MOSQ_H


	)

22 
socks5__£nd
(
mosquôto
 *
mosq
);

23 
socks5__ªad
(
mosquôto
 *
mosq
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/srv_mosq.c

19 
	~"c⁄fig.h
"

21 #ifde‡
WITH_SRV


22 
	~<¨es.h
>

24 
	~<¨∑/«me£r.h
>

25 
	~<°dio.h
>

26 
	~<°rög.h
>

29 
	~"loggög_mosq.h
"

30 
	~"mem‹y_mosq.h
"

31 
	~"mosquôto_öã∫Æ.h
"

32 
	~"mosquôto.h
"

33 
	~"utû_mosq.h
"

35 #ifde‡
WITH_SRV


36 
	$§v_ˇŒback
(*
¨g
, 
°©us
, 
timeouts
, *
abuf
, 
Æí
)

38 
mosquôto
 *
mosq
 = 
¨g
;

39 
¨es_§v_ª∂y
 *
ª∂y
 = 
NULL
;

41 
	`UNUSED
(
timeouts
);

43 if(
°©us
 =
ARES_SUCCESS
){

44 
°©us
 = 
	`¨es_∑r£_§v_ª∂y
(
abuf
, 
Æí
, &
ª∂y
);

45 if(
°©us
 =
ARES_SUCCESS
){

47 
	`mosquôto_c⁄√˘
(
mosq
, 
ª∂y
->
ho°
,Ñïly->
p‹t
, mosq->
kì∑live
);

50 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Eº‹: SRVÜooku∞Áûed (%d).", 
°©us
);

52 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

53 if(
mosq
->
⁄_disc⁄√˘
){

54 
mosq
->
ö_ˇŒback
 = 
åue
;

55 
mosq
->
	`⁄_disc⁄√˘
(mosq, mosq->
u£rd©a
, 
MOSQ_ERR_LOOKUP
);

56 
mosq
->
ö_ˇŒback
 = 
Ál£
;

58 if(
mosq
->
⁄_disc⁄√˘_v5
){

59 
mosq
->
ö_ˇŒback
 = 
åue
;

60 
mosq
->
	`⁄_disc⁄√˘_v5
(mosq, mosq->
u£rd©a
, 
MOSQ_ERR_LOOKUP
, 
NULL
);

61 
mosq
->
ö_ˇŒback
 = 
Ál£
;

63 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

65 
	}
}

68 
	$mosquôto_c⁄√˘_§v
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
kì∑live
, c⁄° *
böd_addªss
)

70 #ifde‡
WITH_SRV


71 *
h
;

72 
rc
;

73 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

75 
	`UNUSED
(
böd_addªss
);

77 if(
kì∑live
 < 0 || kì∑livê> 
UINT16_MAX
){

78  
MOSQ_ERR_INVAL
;

81 
rc
 = 
	`¨es_öô
(&
mosq
->
ach™
);

82 if(
rc
 !
ARES_SUCCESS
){

83  
MOSQ_ERR_UNKNOWN
;

86 if(!
ho°
){

89 #ifde‡
WITH_TLS


90 if(
mosq
->
és_ˇfûe
 || mosq->
és_ˇ∑th
 || mosq->
és_psk
){

91 
h
 = 
	`mosquôto__mÆloc
(
	`°æí
(
ho°
) + strlen("_secure-mqtt._tcp.") + 1);

92 if(!
h
Ë 
MOSQ_ERR_NOMEM
;

93 
	`•rötf
(
h
, "_£cuª-mqâ._t˝.%s", 
ho°
);

96 
h
 = 
	`mosquôto__mÆloc
(
	`°æí
(
ho°
) + strlen("_mqtt._tcp.") + 1);

97 if(!
h
Ë 
MOSQ_ERR_NOMEM
;

98 
	`•rötf
(
h
, "_mqâ._t˝.%s", 
ho°
);

99 #ifde‡
WITH_TLS


102 
	`¨es_£¨ch
(
mosq
->
ach™
, 
h
, 
ns_c_ö
, 
ns_t_§v
, 
§v_ˇŒback
, mosq);

103 
	`mosquôto__‰ì
(
h
);

106 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_c⁄√˘_§v
);

108 
mosq
->
kì∑live
 = (
uöt16_t
)keepalive;

110  
MOSQ_ERR_SUCCESS
;

113 
	`UNUSED
(
mosq
);

114 
	`UNUSED
(
ho°
);

115 
	`UNUSED
(
kì∑live
);

116 
	`UNUSED
(
böd_addªss
);

118  
MOSQ_ERR_NOT_SUPPORTED
;

120 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/strings_mosq.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 
	~<°rög.h
>

24 #i‚de‡
WIN32


25 
	~<°rögs.h
>

28 
	~"mosquôto.h
"

29 
	~"mqâ_¥Ÿocﬁ.h
"

31 c⁄° *
	$mosquôto_°ªº‹
(
mosq_î∫o
)

33 
mosq_î∫o
){

34 
MOSQ_ERR_AUTH_CONTINUE
:

36 
MOSQ_ERR_NO_SUBSCRIBERS
:

38 
MOSQ_ERR_SUB_EXISTS
:

40 
MOSQ_ERR_CONN_PENDING
:

42 
MOSQ_ERR_SUCCESS
:

44 
MOSQ_ERR_NOMEM
:

46 
MOSQ_ERR_PROTOCOL
:

48 
MOSQ_ERR_INVAL
:

50 
MOSQ_ERR_NO_CONN
:

52 
MOSQ_ERR_CONN_REFUSED
:

54 
MOSQ_ERR_NOT_FOUND
:

56 
MOSQ_ERR_CONN_LOST
:

58 
MOSQ_ERR_TLS
:

60 
MOSQ_ERR_PAYLOAD_SIZE
:

62 
MOSQ_ERR_NOT_SUPPORTED
:

64 
MOSQ_ERR_AUTH
:

66 
MOSQ_ERR_ACL_DENIED
:

68 
MOSQ_ERR_UNKNOWN
:

70 
MOSQ_ERR_ERRNO
:

71  
	`°ªº‹
(
î∫o
);

72 
MOSQ_ERR_EAI
:

74 
MOSQ_ERR_PROXY
:

76 
MOSQ_ERR_MALFORMED_UTF8
:

78 
MOSQ_ERR_DUPLICATE_PROPERTY
:

80 
MOSQ_ERR_TLS_HANDSHAKE
:

82 
MOSQ_ERR_QOS_NOT_SUPPORTED
:

84 
MOSQ_ERR_OVERSIZE_PACKET
:

86 
MOSQ_ERR_OCSP
:

91 
	}
}

93 c⁄° *
	$mosquôto_c⁄«ck_°rög
(
c⁄«ck_code
)

95 
c⁄«ck_code
){

111 
	}
}

113 c⁄° *
	$mosquôto_ªas⁄_°rög
(
ªas⁄_code
)

115 
ªas⁄_code
){

116 
MQTT_RC_SUCCESS
:

118 
MQTT_RC_GRANTED_QOS1
:

120 
MQTT_RC_GRANTED_QOS2
:

122 
MQTT_RC_DISCONNECT_WITH_WILL_MSG
:

124 
MQTT_RC_NO_MATCHING_SUBSCRIBERS
:

126 
MQTT_RC_NO_SUBSCRIPTION_EXISTED
:

128 
MQTT_RC_CONTINUE_AUTHENTICATION
:

130 
MQTT_RC_REAUTHENTICATE
:

133 
MQTT_RC_UNSPECIFIED
:

135 
MQTT_RC_MALFORMED_PACKET
:

137 
MQTT_RC_PROTOCOL_ERROR
:

139 
MQTT_RC_IMPLEMENTATION_SPECIFIC
:

141 
MQTT_RC_UNSUPPORTED_PROTOCOL_VERSION
:

143 
MQTT_RC_CLIENTID_NOT_VALID
:

145 
MQTT_RC_BAD_USERNAME_OR_PASSWORD
:

147 
MQTT_RC_NOT_AUTHORIZED
:

149 
MQTT_RC_SERVER_UNAVAILABLE
:

151 
MQTT_RC_SERVER_BUSY
:

153 
MQTT_RC_BANNED
:

155 
MQTT_RC_SERVER_SHUTTING_DOWN
:

157 
MQTT_RC_BAD_AUTHENTICATION_METHOD
:

159 
MQTT_RC_KEEP_ALIVE_TIMEOUT
:

161 
MQTT_RC_SESSION_TAKEN_OVER
:

163 
MQTT_RC_TOPIC_FILTER_INVALID
:

165 
MQTT_RC_TOPIC_NAME_INVALID
:

167 
MQTT_RC_PACKET_ID_IN_USE
:

169 
MQTT_RC_PACKET_ID_NOT_FOUND
:

171 
MQTT_RC_RECEIVE_MAXIMUM_EXCEEDED
:

173 
MQTT_RC_TOPIC_ALIAS_INVALID
:

175 
MQTT_RC_PACKET_TOO_LARGE
:

177 
MQTT_RC_MESSAGE_RATE_TOO_HIGH
:

179 
MQTT_RC_QUOTA_EXCEEDED
:

181 
MQTT_RC_ADMINISTRATIVE_ACTION
:

183 
MQTT_RC_PAYLOAD_FORMAT_INVALID
:

185 
MQTT_RC_RETAIN_NOT_SUPPORTED
:

187 
MQTT_RC_QOS_NOT_SUPPORTED
:

189 
MQTT_RC_USE_ANOTHER_SERVER
:

191 
MQTT_RC_SERVER_MOVED
:

193 
MQTT_RC_SHARED_SUBS_NOT_SUPPORTED
:

195 
MQTT_RC_CONNECTION_RATE_EXCEEDED
:

197 
MQTT_RC_MAXIMUM_CONNECT_TIME
:

199 
MQTT_RC_SUBSCRIPTION_IDS_NOT_SUPPORTED
:

201 
MQTT_RC_WILDCARD_SUBS_NOT_SUPPORTED
:

206 
	}
}

209 
	$mosquôto_°rög_to_comm™d
(c⁄° *
°r
, *
cmd
)

211 if(!
	`°rˇ£cmp
(
°r
, "connect")){

212 *
cmd
 = 
CMD_CONNECT
;

213 }if(!
	`°rˇ£cmp
(
°r
, "connack")){

214 *
cmd
 = 
CMD_CONNACK
;

215 }if(!
	`°rˇ£cmp
(
°r
, "publish")){

216 *
cmd
 = 
CMD_PUBLISH
;

217 }if(!
	`°rˇ£cmp
(
°r
, "puback")){

218 *
cmd
 = 
CMD_PUBACK
;

219 }if(!
	`°rˇ£cmp
(
°r
, "pubrec")){

220 *
cmd
 = 
CMD_PUBREC
;

221 }if(!
	`°rˇ£cmp
(
°r
, "pubrel")){

222 *
cmd
 = 
CMD_PUBREL
;

223 }if(!
	`°rˇ£cmp
(
°r
, "pubcomp")){

224 *
cmd
 = 
CMD_PUBCOMP
;

225 }if(!
	`°rˇ£cmp
(
°r
, "subscribe")){

226 *
cmd
 = 
CMD_SUBSCRIBE
;

227 }if(!
	`°rˇ£cmp
(
°r
, "unsubscribe")){

228 *
cmd
 = 
CMD_UNSUBSCRIBE
;

229 }if(!
	`°rˇ£cmp
(
°r
, "disconnect")){

230 *
cmd
 = 
CMD_DISCONNECT
;

231 }if(!
	`°rˇ£cmp
(
°r
, "auth")){

232 *
cmd
 = 
CMD_AUTH
;

233 }if(!
	`°rˇ£cmp
(
°r
, "will")){

234 *
cmd
 = 
CMD_WILL
;

236  
MOSQ_ERR_INVAL
;

238  
MOSQ_ERR_SUCCESS
;

239 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/thread_mosq.c

19 
	~"c⁄fig.h
"

21 #i‚de‡
WIN32


22 
	~<time.h
>

25 #i‡
deföed
(
WITH_THREADING
)

26 #i‡
deföed
(
__löux__
Ë|| deföed(
__NëBSD__
)

27 
	~<±hªad.h
>

28 #ñi‡
deföed
(
__FªeBSD__
Ë|| deföed(
__O≥nBSD__
)

29 
	~<±hªad_≈.h
>

33 
	~"mosquôto_öã∫Æ.h
"

34 
	~"√t_mosq.h
"

35 
	~"utû_mosq.h
"

37 *
mosquôto__thªad_maö
(*
obj
);

39 
	$mosquôto_lo›_°¨t
(
mosquôto
 *
mosq
)

41 #i‡
	`deföed
(
WITH_THREADING
)

42 if(!
mosq
 || mosq->
thªaded
 !
mosq_ts_n⁄e
Ë 
MOSQ_ERR_INVAL
;

44 
mosq
->
thªaded
 = 
mosq_ts_£lf
;

45 if(!
	`±hªad_¸óã
(&
mosq
->
thªad_id
, 
NULL
, 
mosquôto__thªad_maö
, mosq)){

46 #i‡
	`deföed
(
__löux__
)

47 
	`±hªad_£äame_≈
(
mosq
->
thªad_id
, "mosquittoÜoop");

48 #ñi‡
	`deföed
(
__NëBSD__
)

49 
	`±hªad_£äame_≈
(
mosq
->
thªad_id
, "%s", "mosquittoÜoop");

50 #ñi‡
	`deföed
(
__FªeBSD__
Ë|| deföed(
__O≥nBSD__
)

51 
	`±hªad_£t_«me_≈
(
mosq
->
thªad_id
, "mosquittoÜoop");

53  
MOSQ_ERR_SUCCESS
;

55  
MOSQ_ERR_ERRNO
;

58 
	`UNUSED
(
mosq
);

59  
MOSQ_ERR_NOT_SUPPORTED
;

61 
	}
}

63 
	$mosquôto_lo›_°›
(
mosquôto
 *
mosq
, 
boﬁ
 
f‹˚
)

65 #i‡
	`deföed
(
WITH_THREADING
)

66 #i‚de‡
WITH_BROKER


67 
sock∑ú_d©a
 = 0;

70 if(!
mosq
 || mosq->
thªaded
 !
mosq_ts_£lf
Ë 
MOSQ_ERR_INVAL
;

75 if(
mosq
->
sock∑úW
 !
INVALID_SOCKET
){

76 #i‚de‡
WIN32


77 if(
	`wrôe
(
mosq
->
sock∑úW
, &
sock∑ú_d©a
, 1)){

80 
	`£nd
(
mosq
->
sock∑úW
, &
sock∑ú_d©a
, 1, 0);

84 #ifde‡
HAVE_PTHREAD_CANCEL


85 if(
f‹˚
){

86 
	`±hªad_ˇn˚l
(
mosq
->
thªad_id
);

89 
	`±hªad_joö
(
mosq
->
thªad_id
, 
NULL
);

90 
mosq
->
thªad_id
 = 
	`±hªad_£lf
();

91 
mosq
->
thªaded
 = 
mosq_ts_n⁄e
;

93  
MOSQ_ERR_SUCCESS
;

95 
	`UNUSED
(
mosq
);

96 
	`UNUSED
(
f‹˚
);

97  
MOSQ_ERR_NOT_SUPPORTED
;

99 
	}
}

101 #ifde‡
WITH_THREADING


102 *
	$mosquôto__thªad_maö
(*
obj
)

104 
mosquôto
 *
mosq
 = 
obj
;

105 #i‚de‡
WIN32


106 
time•ec
 
ts
;

107 
ts
.
tv_£c
 = 0;

108 
ts
.
tv_n£c
 = 10000000;

111 if(!
mosq
Ë 
NULL
;

114 if(
	`mosquôto__gë_°©e
(
mosq
Ë=
mosq_cs_√w
){

115 #ifde‡
WIN32


116 
	`SÀï
(10);

118 
	`«no¶ìp
(&
ts
, 
NULL
);

125 if(!
mosq
->
kì∑live
){

127 
	`mosquôto_lo›_f‹evî
(
mosq
, 1000*86400, 1);

130 
	`mosquôto_lo›_f‹evî
(
mosq
, mosq->
kì∑live
*1000, 1);

132 if(
mosq
->
thªaded
 =
mosq_ts_£lf
){

133 
mosq
->
thªaded
 = 
mosq_ts_n⁄e
;

136  
obj
;

137 
	}
}

140 
	$mosquôto_thªaded_£t
(
mosquôto
 *
mosq
, 
boﬁ
 
thªaded
)

142 if(!
mosq
Ë 
MOSQ_ERR_INVAL
;

144 if(
thªaded
){

145 
mosq
->
thªaded
 = 
mosq_ts_exã∫Æ
;

147 
mosq
->
thªaded
 = 
mosq_ts_n⁄e
;

150  
MOSQ_ERR_SUCCESS
;

151 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/time_mosq.c

19 
	~"c⁄fig.h
"

21 #ifde‡
__APPLE__


22 
	~<mach/mach.h
>

23 
	~<mach/mach_time.h
>

26 #ifde‡
WIN32


27 #i‡!(
deföed
(
_MSC_VER
) && _MSC_VER <= 1500)

28 
	#_WIN32_WINNT
 
_WIN32_WINNT_VISTA


	)

30 
	~<wödows.h
>

32 
	~<uni°d.h
>

34 
	~<time.h
>

36 
	~"mosquôto.h
"

37 
	~"time_mosq.h
"

39 
time_t
 
	$mosquôto_time
()

41 #ifde‡
WIN32


42  
	`GëTickCou¡64
()/1000;

43 #ñi‡
_POSIX_TIMERS
>0 && 
	`deföed
(
_POSIX_MONOTONIC_CLOCK
)

44 
time•ec
 
ç
;

46 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ç
);

47  
ç
.
tv_£c
;

48 #ñi‡
	`deföed
(
__APPLE__
)

49 
mach_timeba£_öfo_d©a_t
 
tb
;

50 
uöt64_t
 
ticks
;

51 
uöt64_t
 
£c
;

53 
ticks
 = 
	`mach_absﬁuã_time
();

55 if(
tb
.
díom
 == 0){

56 
	`mach_timeba£_öfo
(&
tb
);

58 
£c
 = 
ticks
*
tb
.
numî
/tb.
díom
/1000000000;

60  (
time_t
)
£c
;

62  
	`time
(
NULL
);

64 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/time_mosq.h

19 #i‚de‡
TIME_MOSQ_H


20 
	#TIME_MOSQ_H


	)

22 
time_t
 
mosquôto_time
();

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/tls_mosq.c

19 
	~"c⁄fig.h
"

21 #ifde‡
WITH_TLS


23 #ifde‡
WIN32


24 
	~<wösock2.h
>

25 
	~<ws2t˝ù.h
>

27 
	~<¨∑/öë.h
>

28 
	~<sys/sockë.h
>

29 
	~<°rögs.h
>

32 
	~<°rög.h
>

33 
	~<›ís¶/c⁄f.h
>

34 
	~<›ís¶/x509v3.h
>

35 
	~<›ís¶/s¶.h
>

37 #ifde‡
WITH_BROKER


38 
	~"mosquôto_brokî_öã∫Æ.h
"

40 
	~"mosquôto_öã∫Æ.h
"

41 
	~"loggög_mosq.h
"

42 
	~"és_mosq.h
"

44 
és_ex_ödex_mosq
;

46 
	$mosquôto__£rvî_˚πifiˇã_vîify
(
¥evîify_ok
, 
X509_STORE_CTX
 *
˘x
)

50 
mosquôto
 *
mosq
;

51 
SSL
 *
s¶
;

52 
X509
 *
˚π
;

55 if(!
¥evîify_ok
)  0;

57 
s¶
 = 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
, 
	`SSL_gë_ex_d©a_X509_STORE_CTX_idx
());

58 
mosq
 = 
	`SSL_gë_ex_d©a
(
s¶
, 
és_ex_ödex_mosq
);

59 if(!
mosq
)  0;

61 if(
mosq
->
és_ö£cuª
 =
Ál£


62 #i‚de‡
WITH_BROKER


63 && 
mosq
->
p‹t
 != 0

66 if(
	`X509_STORE_CTX_gë_îr‹_dïth
(
˘x
) == 0){

68 
˚π
 = 
	`X509_STORE_CTX_gë_cuºít_˚π
(
˘x
);

70 #i‡
	`deföed
(
WITH_BROKER
)

71 
¥evîify_ok
 = 
	`mosquôto__vîify_˚πifiˇã_ho°«me
(
˚π
, 
mosq
->
bridge
->
addªs£s
[mosq->bridge->
cur_addªss
].
addªss
);

73 
¥evîify_ok
 = 
	`mosquôto__vîify_˚πifiˇã_ho°«me
(
˚π
, 
mosq
->
ho°
);

75 i‡(
¥evîify_ok
 != 1) {

76 
	`log__¥ötf
(
mosq
, 
MOSQ_LOG_ERR
, "Error: hostÇame verification failed.");

78  
¥evîify_ok
;

80  
¥evîify_ok
;

83  
¥evîify_ok
;

85 
	}
}

87 
	$mosquôto__cmp_ho°«me_wûdˇrd
(*
˚π«me
, c⁄° *
ho°«me
)

89 
size_t
 
i
;

90 
size_t
 
Àn
;

92 if(!
˚π«me
 || !
ho°«me
){

96 if(
˚π«me
[0] == '*'){

97 if(
˚π«me
[1] != '.'){

100 
˚π«me
 += 2;

101 
Àn
 = 
	`°æí
(
ho°«me
);

102 
i
=0; i<
Àn
-1; i++){

103 if(
ho°«me
[
i
] == '.'){

104 
ho°«me
 +
i
+1;

108  
	`°rˇ£cmp
(
˚π«me
, 
ho°«me
);

110  
	`°rˇ£cmp
(
˚π«me
, 
ho°«me
);

112 
	}
}

117 
	$mosquôto__vîify_˚πifiˇã_ho°«me
(
X509
 *
˚π
, c⁄° *
ho°«me
)

119 
i
;

120 
«me
[256];

121 
X509_NAME
 *
subj
;

122 
boﬁ
 
have_ßn_dns
 = 
Ál£
;

123 
	`STACK_OF
(
GENERAL_NAME
Ë*
ßn
;

124 c⁄° 
GENERAL_NAME
 *
nvÆ
;

125 c⁄° *
d©a
;

126 
ùv6_addr
[16];

127 
ùv4_addr
[4];

128 
ùv6_ok
;

129 
ùv4_ok
;

131 #ifde‡
WIN32


132 
ùv6_ok
 = 
	`I√tPt⁄
(
AF_INET6
, 
ho°«me
, &
ùv6_addr
);

133 
ùv4_ok
 = 
	`I√tPt⁄
(
AF_INET
, 
ho°«me
, &
ùv4_addr
);

135 
ùv6_ok
 = 
	`öë_±⁄
(
AF_INET6
, 
ho°«me
, &
ùv6_addr
);

136 
ùv4_ok
 = 
	`öë_±⁄
(
AF_INET
, 
ho°«me
, &
ùv4_addr
);

139 
ßn
 = 
	`X509_gë_ext_d2i
(
˚π
, 
NID_subje˘_Æt_«me
, 
NULL
, NULL);

140 if(
ßn
){

141 
i
=0; i<
	`sk_GENERAL_NAME_num
(
ßn
); i++){

142 
nvÆ
 = 
	`sk_GENERAL_NAME_vÆue
(
ßn
, 
i
);

143 if(
nvÆ
->
ty≥
 =
GEN_DNS
){

144 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

145 
d©a
 = 
	`ASN1_STRING_d©a
(
nvÆ
->
d
.
dNSName
);

147 
d©a
 = 
	`ASN1_STRING_gë0_d©a
(
nvÆ
->
d
.
dNSName
);

149 if(
d©a
 && !
	`mosquôto__cmp_ho°«me_wûdˇrd
((*)d©a, 
ho°«me
)){

150 
	`sk_GENERAL_NAME_p›_‰ì
(
ßn
, 
GENERAL_NAME_‰ì
);

153 
have_ßn_dns
 = 
åue
;

154 }if(
nvÆ
->
ty≥
 =
GEN_IPADD
){

155 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

156 
d©a
 = 
	`ASN1_STRING_d©a
(
nvÆ
->
d
.
iPAddªss
);

158 
d©a
 = 
	`ASN1_STRING_gë0_d©a
(
nvÆ
->
d
.
iPAddªss
);

160 if(
nvÆ
->
d
.
iPAddªss
->
Àngth
 =4 && 
ùv4_ok
){

161 if(!
	`memcmp
(
ùv4_addr
, 
d©a
, 4)){

162 
	`sk_GENERAL_NAME_p›_‰ì
(
ßn
, 
GENERAL_NAME_‰ì
);

165 }if(
nvÆ
->
d
.
iPAddªss
->
Àngth
 =16 && 
ùv6_ok
){

166 if(!
	`memcmp
(
ùv6_addr
, 
d©a
, 16)){

167 
	`sk_GENERAL_NAME_p›_‰ì
(
ßn
, 
GENERAL_NAME_‰ì
);

173 
	`sk_GENERAL_NAME_p›_‰ì
(
ßn
, 
GENERAL_NAME_‰ì
);

174 if(
have_ßn_dns
){

180 
subj
 = 
	`X509_gë_subje˘_«me
(
˚π
);

181 if(
	`X509_NAME_gë_ãxt_by_NID
(
subj
, 
NID_comm⁄Name
, 
«me
, (name)) > 0){

182 
«me
[(name) - 1] = '\0';

183 i‡(!
	`mosquôto__cmp_ho°«me_wûdˇrd
(
«me
, 
ho°«me
))  1;

186 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/tls_mosq.h

19 #i‚de‡
TLS_MOSQ_H


20 
	#TLS_MOSQ_H


	)

22 #ifde‡
WITH_TLS


23 
	#SSL_DATA_PENDING
(
A
Ë((A)->
s¶
 && 
	`SSL_≥ndög
((A)->s¶))

	)

25 
	#SSL_DATA_PENDING
(
A
Ë0

	)

28 #ifde‡
WITH_TLS


30 
	~<›ís¶/s¶.h
>

31 
	~<›ís¶/ígöe.h
>

33 
mosquôto__£rvî_˚πifiˇã_vîify
(
¥evîify_ok
, 
X509_STORE_CTX
 *
˘x
);

34 
mosquôto__vîify_˚πifiˇã_ho°«me
(
X509
 *
˚π
, c⁄° *
ho°«me
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/utf8_mosq.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~"mosquôto.h
"

24 
	$mosquôto_vÆid©e_utf8
(c⁄° *
°r
, 
Àn
)

26 
i
;

27 
j
;

28 
codñí
;

29 
codïoöt
;

30 c⁄° *
u°r
 = (c⁄° *)
°r
;

32 if(!
°r
Ë 
MOSQ_ERR_INVAL
;

33 if(
Àn
 < 0 ||Üí > 65536Ë 
MOSQ_ERR_INVAL
;

35 
i
=0; i<
Àn
; i++){

36 if(
u°r
[
i
] == 0){

37  
MOSQ_ERR_MALFORMED_UTF8
;

38 }if(
u°r
[
i
] <= 0x7f){

39 
codñí
 = 1;

40 
codïoöt
 = 
u°r
[
i
];

41 }if((
u°r
[
i
] & 0xE0) == 0xC0){

43 if(
u°r
[
i
] == 0xC0 || ustr[i] == 0xC1){

45  
MOSQ_ERR_MALFORMED_UTF8
;

47 
codñí
 = 2;

48 
codïoöt
 = (
u°r
[
i
] & 0x1F);

49 }if((
u°r
[
i
] & 0xF0) == 0xE0){

51 
codñí
 = 3;

52 
codïoöt
 = (
u°r
[
i
] & 0x0F);

53 }if((
u°r
[
i
] & 0xF8) == 0xF0){

55 if(
u°r
[
i
] > 0xF4){

57  
MOSQ_ERR_MALFORMED_UTF8
;

59 
codñí
 = 4;

60 
codïoöt
 = (
u°r
[
i
] & 0x07);

63  
MOSQ_ERR_MALFORMED_UTF8
;

67 if(
i
 =
Àn
-
codñí
+1){

69  
MOSQ_ERR_MALFORMED_UTF8
;

71 
j
=0; j<
codñí
-1; j++){

72 if((
u°r
[++
i
] & 0xC0) != 0x80){

74  
MOSQ_ERR_MALFORMED_UTF8
;

76 
codïoöt
 = (codïoöt<<6Ë| (
u°r
[
i
] & 0x3F);

80 if(
codïoöt
 >= 0xD800 && codepoint <= 0xDFFF){

81  
MOSQ_ERR_MALFORMED_UTF8
;

91 if(
codñí
 =3 && 
codïoöt
 < 0x0800){

92  
MOSQ_ERR_MALFORMED_UTF8
;

93 }if(
codñí
 =4 && (
codïoöt
 < 0x10000 || codepoint > 0x10FFFF)){

94  
MOSQ_ERR_MALFORMED_UTF8
;

98 if(
codïoöt
 >= 0xFDD0 && codepoint <= 0xFDEF){

99  
MOSQ_ERR_MALFORMED_UTF8
;

101 if((
codïoöt
 & 0xFFFF) == 0xFFFE || (codepoint & 0xFFFF) == 0xFFFF){

102  
MOSQ_ERR_MALFORMED_UTF8
;

105 if(
codïoöt
 <= 0x001F || (codepoint >= 0x007F && codepoint <= 0x009F)){

106  
MOSQ_ERR_MALFORMED_UTF8
;

109  
MOSQ_ERR_SUCCESS
;

110 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/util_mosq.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<˘y≥.h
>

23 
	~<°rög.h
>

25 #ifde‡
WIN32


26 
	~<wösock2.h
>

27 
	~<a˛≠i.h
>

28 
	~<io.h
>

29 
	~<lmc⁄s.h
>

31 
	~<sys/°©.h
>

34 #i‡!
deföed
(
WITH_TLS
Ë&& deföed(
__löux__
Ë&& deföed(
__GLIBC__
)

35 #i‡
__GLIBC_PREREQ
(2, 25)

36 
	~<sys/øndom.h
>

37 
	#HAVE_GETRANDOM
 1

	)

41 #ifde‡
WITH_TLS


42 
	~<›ís¶/bn.h
>

43 
	~<›ís¶/ønd.h
>

46 #ifde‡
WITH_BROKER


47 
	~"mosquôto_brokî_öã∫Æ.h
"

50 
	~"mosquôto.h
"

51 
	~"mem‹y_mosq.h
"

52 
	~"√t_mosq.h
"

53 
	~"£nd_mosq.h
"

54 
	~"time_mosq.h
"

55 
	~"és_mosq.h
"

56 
	~"utû_mosq.h
"

58 #ifde‡
WITH_WEBSOCKETS


59 
	~<libwebsockës.h
>

62 
	$mosquôto__check_kì∑live
(
mosquôto
 *
mosq
)

64 
time_t
 
√xt_msg_out
;

65 
time_t
 
œ°_msg_ö
;

66 
time_t
 
now
;

67 #i‚de‡
WITH_BROKER


68 
rc
;

70 
mosquôto_˛õ¡_°©e
 
°©e
;

72 
	`as£π
(
mosq
);

73 #ifde‡
WITH_BROKER


74 
now
 = 
db
.
now_s
;

76 
now
 = 
	`mosquôto_time
();

79 #i‡
	`deföed
(
WITH_BROKER
Ë&& deföed(
WITH_BRIDGE
)

81 if(
mosq
->
bridge
 && mosq->bridge->
°¨t_ty≥
 =
b°_œzy


82 && 
mosq
->
sock
 !
INVALID_SOCKET


83 && 
now
 - 
mosq
->
√xt_msg_out
 - mosq->
kì∑live
 >mosq->
bridge
->
idÀ_timeout
){

85 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Bridgêc⁄√˘i⁄ %†ha†ex˚eded idÀÅimeout, disc⁄√˘ög.", 
mosq
->
id
);

86 
	`√t__sockë_˛o£
(
mosq
);

87  
MOSQ_ERR_SUCCESS
;

90 
	`±hªad_muãx_lock
(&
mosq
->
msgtime_muãx
);

91 
√xt_msg_out
 = 
mosq
->next_msg_out;

92 
œ°_msg_ö
 = 
mosq
->last_msg_in;

93 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgtime_muãx
);

94 if(
mosq
->
kì∑live
 && mosq->
sock
 !
INVALID_SOCKET
 &&

95 (
now
 >
√xt_msg_out
 ||Çow - 
œ°_msg_ö
 >
mosq
->
kì∑live
)){

97 
°©e
 = 
	`mosquôto__gë_°©e
(
mosq
);

98 if(
°©e
 =
mosq_cs_a˘ive
 && 
mosq
->
pög_t
 == 0){

99 
	`£nd__pögªq
(
mosq
);

101 
	`±hªad_muãx_lock
(&
mosq
->
msgtime_muãx
);

102 
mosq
->
œ°_msg_ö
 = 
now
;

103 
mosq
->
√xt_msg_out
 = 
now
 + mosq->
kì∑live
;

104 
	`±hªad_muãx_u∆ock
(&
mosq
->
msgtime_muãx
);

106 #ifde‡
WITH_BROKER


107 #ifde‡
WITH_BRIDGE


108 if(
mosq
->
bridge
){

109 
	`c⁄ãxt__£nd_wûl
(
mosq
);

112 
	`√t__sockë_˛o£
(
mosq
);

114 
	`√t__sockë_˛o£
(
mosq
);

115 
°©e
 = 
	`mosquôto__gë_°©e
(
mosq
);

116 if(
°©e
 =
mosq_cs_disc⁄√˘ög
){

117 
rc
 = 
MOSQ_ERR_SUCCESS
;

119 
rc
 = 
MOSQ_ERR_KEEPALIVE
;

121 
	`±hªad_muãx_lock
(&
mosq
->
ˇŒback_muãx
);

122 if(
mosq
->
⁄_disc⁄√˘
){

123 
mosq
->
ö_ˇŒback
 = 
åue
;

124 
mosq
->
	`⁄_disc⁄√˘
(mosq, mosq->
u£rd©a
, 
rc
);

125 
mosq
->
ö_ˇŒback
 = 
Ál£
;

127 if(
mosq
->
⁄_disc⁄√˘_v5
){

128 
mosq
->
ö_ˇŒback
 = 
åue
;

129 
mosq
->
	`⁄_disc⁄√˘_v5
(mosq, mosq->
u£rd©a
, 
rc
, 
NULL
);

130 
mosq
->
ö_ˇŒback
 = 
Ál£
;

132 
	`±hªad_muãx_u∆ock
(&
mosq
->
ˇŒback_muãx
);

134  
rc
;

138  
MOSQ_ERR_SUCCESS
;

139 
	}
}

141 
uöt16_t
 
	$mosquôto__mid_gíî©e
(
mosquôto
 *
mosq
)

150 
uöt16_t
 
mid
;

151 
	`as£π
(
mosq
);

153 
	`±hªad_muãx_lock
(&
mosq
->
mid_muãx
);

154 
mosq
->
œ°_mid
++;

155 if(
mosq
->
œ°_mid
 == 0) mosq->last_mid++;

156 
mid
 = 
mosq
->
œ°_mid
;

157 
	`±hªad_muãx_u∆ock
(&
mosq
->
mid_muãx
);

159  
mid
;

160 
	}
}

163 #ifde‡
WITH_TLS


164 
	$mosquôto__hex2bö_sha1
(c⁄° *
hex
, **
bö
)

166 *
sha
, 
tmp
[
SHA_DIGEST_LENGTH
];

168 if(
	`mosquôto__hex2bö
(
hex
, 
tmp
, 
SHA_DIGEST_LENGTH
) != SHA_DIGEST_LENGTH){

169  
MOSQ_ERR_INVAL
;

172 
sha
 = 
	`mosquôto__mÆloc
(
SHA_DIGEST_LENGTH
);

173 if(!
sha
){

174  
MOSQ_ERR_NOMEM
;

176 
	`mem˝y
(
sha
, 
tmp
, 
SHA_DIGEST_LENGTH
);

177 *
bö
 = 
sha
;

178  
MOSQ_ERR_SUCCESS
;

179 
	}
}

181 
	$mosquôto__hex2bö
(c⁄° *
hex
, *
bö
, 
bö_max_Àn
)

183 
BIGNUM
 *
bn
 = 
NULL
;

184 
Àn
;

185 
Àadög_zîo
 = 0;

186 
°¨t
 = 0;

187 
size_t
 
i
 = 0;

190 
i
=0; i<
	`°æí
(
hex
); i=i+2) {

191 if(
	`°∫cmp
(
hex
 + 
i
, "00", 2) == 0) {

192 
Àadög_zîo
++;

194 
bö
[
°¨t
++] = 0;

200 if(
	`BN_hex2bn
(&
bn
, 
hex
) == 0){

201 if(
bn
Ë
	`BN_‰ì
(bn);

204 if(
	`BN_num_byãs
(
bn
Ë+ 
Àadög_zîo
 > 
bö_max_Àn
){

205 
	`BN_‰ì
(
bn
);

209 
Àn
 = 
	`BN_bn2bö
(
bn
, 
bö
 + 
Àadög_zîo
);

210 
	`BN_‰ì
(
bn
);

211  
Àn
 + 
Àadög_zîo
;

212 
	}
}

215 
	$utû__ö¸emít_ª˚ive_quŸa
(
mosquôto
 *
mosq
)

217 if(
mosq
->
msgs_ö
.
öÊight_quŸa
 < mosq->msgs_ö.
öÊight_maximum
){

218 
mosq
->
msgs_ö
.
öÊight_quŸa
++;

220 
	}
}

222 
	$utû__ö¸emít_£nd_quŸa
(
mosquôto
 *
mosq
)

224 if(
mosq
->
msgs_out
.
öÊight_quŸa
 < mosq->msgs_out.
öÊight_maximum
){

225 
mosq
->
msgs_out
.
öÊight_quŸa
++;

227 
	}
}

230 
	$utû__de¸emít_ª˚ive_quŸa
(
mosquôto
 *
mosq
)

232 if(
mosq
->
msgs_ö
.
öÊight_quŸa
 > 0){

233 
mosq
->
msgs_ö
.
öÊight_quŸa
--;

235 
	}
}

237 
	$utû__de¸emít_£nd_quŸa
(
mosquôto
 *
mosq
)

239 if(
mosq
->
msgs_out
.
öÊight_quŸa
 > 0){

240 
mosq
->
msgs_out
.
öÊight_quŸa
--;

242 
	}
}

245 
	$utû__øndom_byãs
(*
byãs
, 
cou¡
)

247 
rc
 = 
MOSQ_ERR_UNKNOWN
;

249 #ifde‡
WITH_TLS


250 if(
	`RAND_byãs
(
byãs
, 
cou¡
) == 1){

251 
rc
 = 
MOSQ_ERR_SUCCESS
;

253 #ñi‡
	`deföed
(
HAVE_GETRANDOM
)

254 if(
	`gëøndom
(
byãs
, (
size_t
)
cou¡
, 0) == count){

255 
rc
 = 
MOSQ_ERR_SUCCESS
;

257 #ñi‡
	`deföed
(
WIN32
)

258 
HCRYPTPROV
 
¥ovidî
;

260 if(!
	`Cry±AcquúeC⁄ãxt
(&
¥ovidî
, 
NULL
, NULL, 
PROV_RSA_FULL
, 
CRYPT_VERIFYCONTEXT
)){

261  
MOSQ_ERR_UNKNOWN
;

264 if(
	`Cry±GíR™dom
(
¥ovidî
, 
cou¡
, 
byãs
)){

265 
rc
 = 
MOSQ_ERR_SUCCESS
;

268 
	`Cry±Rñó£C⁄ãxt
(
¥ovidî
, 0);

270 
i
;

272 
i
=0; i<
cou¡
; i++){

273 ((
uöt8_t
 *)
byãs
)[
i
] = (uöt8_à)(
	`øndom
()&0xFF);

275 
rc
 = 
MOSQ_ERR_SUCCESS
;

277  
rc
;

278 
	}
}

281 
	$mosquôto__£t_°©e
(
mosquôto
 *
mosq
, 
mosquôto_˛õ¡_°©e
 
°©e
)

283 
	`±hªad_muãx_lock
(&
mosq
->
°©e_muãx
);

284 #ifde‡
WITH_BROKER


285 if(
mosq
->
°©e
 !
mosq_cs_disu£d
)

288 
mosq
->
°©e
 = state;

290 
	`±hªad_muãx_u∆ock
(&
mosq
->
°©e_muãx
);

292  
MOSQ_ERR_SUCCESS
;

293 
	}
}

295 
mosquôto_˛õ¡_°©e
 
	$mosquôto__gë_°©e
(
mosquôto
 *
mosq
)

297 
mosquôto_˛õ¡_°©e
 
°©e
;

299 
	`±hªad_muãx_lock
(&
mosq
->
°©e_muãx
);

300 
°©e
 = 
mosq
->state;

301 
	`±hªad_muãx_u∆ock
(&
mosq
->
°©e_muãx
);

303  
°©e
;

304 
	}
}

306 #i‚de‡
WITH_BROKER


307 
	$mosquôto__£t_ªque°_disc⁄√˘
(
mosquôto
 *
mosq
, 
boﬁ
 
ªque°_disc⁄√˘
)

309 
	`±hªad_muãx_lock
(&
mosq
->
°©e_muãx
);

310 
mosq
->
ªque°_disc⁄√˘
 =Ñequest_disconnect;

311 
	`±hªad_muãx_u∆ock
(&
mosq
->
°©e_muãx
);

312 
	}
}

314 
boﬁ
 
	$mosquôto__gë_ªque°_disc⁄√˘
(
mosquôto
 *
mosq
)

316 
boﬁ
 
ªque°_disc⁄√˘
;

318 
	`±hªad_muãx_lock
(&
mosq
->
°©e_muãx
);

319 
ªque°_disc⁄√˘
 = 
mosq
->request_disconnect;

320 
	`±hªad_muãx_u∆ock
(&
mosq
->
°©e_muãx
);

322  
ªque°_disc⁄√˘
;

323 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/util_mosq.h

18 #i‚de‡
UTIL_MOSQ_H


19 
	#UTIL_MOSQ_H


	)

21 
	~<°dio.h
>

23 
	~"és_mosq.h
"

24 
	~"mosquôto.h
"

25 
	~"mosquôto_öã∫Æ.h
"

26 #ifde‡
WITH_BROKER


27 
	~"mosquôto_brokî_öã∫Æ.h
"

30 
mosquôto__check_kì∑live
(
mosquôto
 *
mosq
);

31 
uöt16_t
 
mosquôto__mid_gíî©e
(
mosquôto
 *
mosq
);

33 
mosquôto__£t_°©e
(
mosquôto
 *
mosq
, 
mosquôto_˛õ¡_°©e
 
°©e
);

34 
mosquôto_˛õ¡_°©e
 
mosquôto__gë_°©e
(
mosquôto
 *
mosq
);

35 #i‚de‡
WITH_BROKER


36 
mosquôto__£t_ªque°_disc⁄√˘
(
mosquôto
 *
mosq
, 
boﬁ
 
ªque°_disc⁄√˘
);

37 
boﬁ
 
mosquôto__gë_ªque°_disc⁄√˘
(
mosquôto
 *
mosq
);

40 #ifde‡
WITH_TLS


41 
mosquôto__hex2bö_sha1
(c⁄° *
hex
, **
bö
);

42 
mosquôto__hex2bö
(c⁄° *
hex
, *
bö
, 
bö_max_Àn
);

45 
utû__øndom_byãs
(*
byãs
, 
cou¡
);

47 
utû__ö¸emít_ª˚ive_quŸa
(
mosquôto
 *
mosq
);

48 
utû__ö¸emít_£nd_quŸa
(
mosquôto
 *
mosq
);

49 
utû__de¸emít_ª˚ive_quŸa
(
mosquôto
 *
mosq
);

50 
utû__de¸emít_£nd_quŸa
(
mosquôto
 *
mosq
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/util_topic.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°rög.h
>

24 #ifde‡
WIN32


25 
	~<wösock2.h
>

26 
	~<a˛≠i.h
>

27 
	~<io.h
>

28 
	~<lmc⁄s.h
>

30 
	~<sys/°©.h
>

34 #ifde‡
WITH_BROKER


35 
	~"mosquôto_brokî_öã∫Æ.h
"

38 
	~"mosquôto.h
"

39 
	~"mem‹y_mosq.h
"

40 
	~"√t_mosq.h
"

41 
	~"£nd_mosq.h
"

42 
	~"time_mosq.h
"

43 
	~"és_mosq.h
"

44 
	~"utû_mosq.h
"

51 
	$mosquôto_pub_t›ic_check
(c⁄° *
°r
)

53 
Àn
 = 0;

54 #ifde‡
WITH_BROKER


55 
hõr_cou¡
 = 0;

58 if(
°r
 =
NULL
){

59  
MOSQ_ERR_INVAL
;

62 
°r
 && str[0]){

63 if(
°r
[0] == '+' || str[0] == '#'){

64  
MOSQ_ERR_INVAL
;

66 #ifde‡
WITH_BROKER


67 if(
°r
[0] == '/'){

68 
hõr_cou¡
++;

71 
Àn
++;

72 
°r
 = &str[1];

74 if(
Àn
 > 65535Ë 
MOSQ_ERR_INVAL
;

75 #ifde‡
WITH_BROKER


76 if(
hõr_cou¡
 > 
TOPIC_HIERARCHY_LIMIT
Ë 
MOSQ_ERR_INVAL
;

79  
MOSQ_ERR_SUCCESS
;

80 
	}
}

82 
	$mosquôto_pub_t›ic_check2
(c⁄° *
°r
, 
size_t
 
Àn
)

84 
size_t
 
i
;

85 #ifde‡
WITH_BROKER


86 
hõr_cou¡
 = 0;

89 if(
°r
 =
NULL
 || 
Àn
 > 65535){

90  
MOSQ_ERR_INVAL
;

93 
i
=0; i<
Àn
; i++){

94 if(
°r
[
i
] == '+' || str[i] == '#'){

95  
MOSQ_ERR_INVAL
;

97 #ifde‡
WITH_BROKER


98 if(
°r
[
i
] == '/'){

99 
hõr_cou¡
++;

103 #ifde‡
WITH_BROKER


104 if(
hõr_cou¡
 > 
TOPIC_HIERARCHY_LIMIT
Ë 
MOSQ_ERR_INVAL
;

107  
MOSQ_ERR_SUCCESS
;

108 
	}
}

117 
	$mosquôto_sub_t›ic_check
(c⁄° *
°r
)

119 
c
 = '\0';

120 
Àn
 = 0;

121 #ifde‡
WITH_BROKER


122 
hõr_cou¡
 = 0;

125 if(
°r
 =
NULL
){

126  
MOSQ_ERR_INVAL
;

129 
°r
[0]){

130 if(
°r
[0] == '+'){

131 if((
c
 !'\0' && c !'/'Ë|| (
°r
[1] != '\0' && str[1] != '/')){

132  
MOSQ_ERR_INVAL
;

134 }if(
°r
[0] == '#'){

135 if((
c
 !'\0' && c !'/'Ë|| 
°r
[1] != '\0'){

136  
MOSQ_ERR_INVAL
;

139 #ifde‡
WITH_BROKER


140 if(
°r
[0] == '/'){

141 
hõr_cou¡
++;

144 
Àn
++;

145 
c
 = 
°r
[0];

146 
°r
 = &str[1];

148 if(
Àn
 > 65535Ë 
MOSQ_ERR_INVAL
;

149 #ifde‡
WITH_BROKER


150 if(
hõr_cou¡
 > 
TOPIC_HIERARCHY_LIMIT
Ë 
MOSQ_ERR_INVAL
;

153  
MOSQ_ERR_SUCCESS
;

154 
	}
}

156 
	$mosquôto_sub_t›ic_check2
(c⁄° *
°r
, 
size_t
 
Àn
)

158 
c
 = '\0';

159 
size_t
 
i
;

160 #ifde‡
WITH_BROKER


161 
hõr_cou¡
 = 0;

164 if(
°r
 =
NULL
 || 
Àn
 > 65535){

165  
MOSQ_ERR_INVAL
;

168 
i
=0; i<
Àn
; i++){

169 if(
°r
[
i
] == '+'){

170 if((
c
 !'\0' && c !'/'Ë|| (
i
<
Àn
-1 && 
°r
[i+1] != '/')){

171  
MOSQ_ERR_INVAL
;

173 }if(
°r
[
i
] == '#'){

174 if((
c
 !'\0' && c !'/'Ë|| 
i
<
Àn
-1){

175  
MOSQ_ERR_INVAL
;

178 #ifde‡
WITH_BROKER


179 if(
°r
[
i
] == '/'){

180 
hõr_cou¡
++;

183 
c
 = 
°r
[
i
];

185 #ifde‡
WITH_BROKER


186 if(
hõr_cou¡
 > 
TOPIC_HIERARCHY_LIMIT
Ë 
MOSQ_ERR_INVAL
;

189  
MOSQ_ERR_SUCCESS
;

190 
	}
}

193 
	$mosquôto_t›ic_m©ches_sub
(c⁄° *
sub
, c⁄° *
t›ic
, 
boﬁ
 *
ªsu…
)

195 
size_t
 
•os
;

197 if(!
ªsu…
Ë 
MOSQ_ERR_INVAL
;

198 *
ªsu…
 = 
Ál£
;

200 if(!
sub
 || !
t›ic
 || sub[0] == 0 ||Åopic[0] == 0){

201  
MOSQ_ERR_INVAL
;

204 if((
sub
[0] ='$' && 
t›ic
[0] != '$')

205 || (
t›ic
[0] ='$' && 
sub
[0] != '$')){

207  
MOSQ_ERR_SUCCESS
;

210 
•os
 = 0;

212 
sub
[0] != 0){

213 if(
t›ic
[0] == '+' ||Åopic[0] == '#'){

214  
MOSQ_ERR_INVAL
;

216 if(
sub
[0] !
t›ic
[0] ||Åopic[0] == 0){

217 if(
sub
[0] == '+'){

219 if(
•os
 > 0 && 
sub
[-1] != '/'){

220  
MOSQ_ERR_INVAL
;

223 if(
sub
[1] != 0 && sub[1] != '/'){

224  
MOSQ_ERR_INVAL
;

226 
•os
++;

227 
sub
++;

228 
t›ic
[0] != 0 &&Åopic[0] != '/'){

229 if(
t›ic
[0] == '+' ||Åopic[0] == '#'){

230  
MOSQ_ERR_INVAL
;

232 
t›ic
++;

234 if(
t›ic
[0] =0 && 
sub
[0] == 0){

235 *
ªsu…
 = 
åue
;

236  
MOSQ_ERR_SUCCESS
;

238 }if(
sub
[0] == '#'){

240 if(
•os
 > 0 && 
sub
[-1] != '/'){

241  
MOSQ_ERR_INVAL
;

244 if(
sub
[1] != 0){

245  
MOSQ_ERR_INVAL
;

247 
t›ic
[0] != 0){

248 if(
t›ic
[0] == '+' ||Åopic[0] == '#'){

249  
MOSQ_ERR_INVAL
;

251 
t›ic
++;

253 *
ªsu…
 = 
åue
;

254  
MOSQ_ERR_SUCCESS
;

258 if(
t›ic
[0] == 0

259 && 
•os
 > 0

260 && 
sub
[-1] == '+'

261 && 
sub
[0] == '/'

262 && 
sub
[1] == '#')

264 *
ªsu…
 = 
åue
;

265  
MOSQ_ERR_SUCCESS
;

269 
sub
[0] != 0){

270 if(
sub
[0] == '#' && sub[1] != 0){

271  
MOSQ_ERR_INVAL
;

273 
•os
++;

274 
sub
++;

278  
MOSQ_ERR_SUCCESS
;

282 if(
t›ic
[1] == 0){

284 if(
sub
[1] == '/'

285 && 
sub
[2] == '#'

286 && 
sub
[3] == 0){

287 *
ªsu…
 = 
åue
;

288  
MOSQ_ERR_SUCCESS
;

291 
•os
++;

292 
sub
++;

293 
t›ic
++;

294 if(
sub
[0] =0 && 
t›ic
[0] == 0){

295 *
ªsu…
 = 
åue
;

296  
MOSQ_ERR_SUCCESS
;

297 }if(
t›ic
[0] =0 && 
sub
[0] == '+' && sub[1] == 0){

298 if(
•os
 > 0 && 
sub
[-1] != '/'){

299  
MOSQ_ERR_INVAL
;

301 
•os
++;

302 
sub
++;

303 *
ªsu…
 = 
åue
;

304  
MOSQ_ERR_SUCCESS
;

308 if((
t›ic
[0] !0 || 
sub
[0] != 0)){

309 *
ªsu…
 = 
Ál£
;

311 
t›ic
[0] != 0){

312 if(
t›ic
[0] == '+' ||Åopic[0] == '#'){

313  
MOSQ_ERR_INVAL
;

315 
t›ic
++;

318  
MOSQ_ERR_SUCCESS
;

319 
	}
}

322 
	$mosquôto_t›ic_m©ches_sub2
(c⁄° *
sub
, 
size_t
 
subÀn
, c⁄° *
t›ic
, size_à
t›i˛í
, 
boﬁ
 *
ªsu…
)

324 
size_t
 
•os
, 
ços
;

326 if(!
ªsu…
Ë 
MOSQ_ERR_INVAL
;

327 *
ªsu…
 = 
Ál£
;

329 if(!
sub
 || !
t›ic
 || !
subÀn
 || !
t›i˛í
){

330  
MOSQ_ERR_INVAL
;

333 if((
sub
[0] ='$' && 
t›ic
[0] != '$')

334 || (
t›ic
[0] ='$' && 
sub
[0] != '$')){

336  
MOSQ_ERR_SUCCESS
;

339 
•os
 = 0;

340 
ços
 = 0;

342 
•os
 < 
subÀn
){

343 if(
ços
 < 
t›i˛í
 && (
t›ic
[tpos] == '+' ||Åopic[tpos] == '#')){

344  
MOSQ_ERR_INVAL
;

346 if(
ços
 =
t›i˛í
 || 
sub
[
•os
] !
t›ic
[tpos]){

347 if(
sub
[
•os
] == '+'){

349 if(
•os
 > 0 && 
sub
[spos-1] != '/'){

350  
MOSQ_ERR_INVAL
;

353 if(
•os
+1 < 
subÀn
 && 
sub
[spos+1] != '/'){

354  
MOSQ_ERR_INVAL
;

356 
•os
++;

357 
ços
 < 
t›i˛í
 && 
t›ic
[tpos] != '/'){

358 if(
t›ic
[
ços
] == '+' ||Åopic[tpos] == '#'){

359  
MOSQ_ERR_INVAL
;

361 
ços
++;

363 if(
ços
 =
t›i˛í
 && 
•os
 =
subÀn
){

364 *
ªsu…
 = 
åue
;

365  
MOSQ_ERR_SUCCESS
;

367 }if(
sub
[
•os
] == '#'){

369 if(
•os
 > 0 && 
sub
[spos-1] != '/'){

370  
MOSQ_ERR_INVAL
;

373 if(
•os
+1 < 
subÀn
){

374  
MOSQ_ERR_INVAL
;

376 
ços
 < 
t›i˛í
){

377 if(
t›ic
[
ços
] == '+' ||Åopic[tpos] == '#'){

378  
MOSQ_ERR_INVAL
;

380 
ços
++;

382 *
ªsu…
 = 
åue
;

383  
MOSQ_ERR_SUCCESS
;

387 if(
ços
 =
t›i˛í


388 && 
•os
 > 0

389 && 
sub
[
•os
-1] == '+'

390 && 
sub
[
•os
] == '/'

391 && 
•os
+1 < 
subÀn


392 && 
sub
[
•os
+1] == '#')

394 *
ªsu…
 = 
åue
;

395  
MOSQ_ERR_SUCCESS
;

399 
•os
 < 
subÀn
){

400 if(
sub
[
•os
] ='#' && spos+1 < 
subÀn
){

401  
MOSQ_ERR_INVAL
;

403 
•os
++;

407  
MOSQ_ERR_SUCCESS
;

411 if(
ços
+1 =
t›i˛í
){

413 if(
•os
+3 =
subÀn


414 && 
sub
[
•os
+1] == '/'

415 && 
sub
[
•os
+2] == '#'){

416 *
ªsu…
 = 
åue
;

417  
MOSQ_ERR_SUCCESS
;

420 
•os
++;

421 
ços
++;

422 if(
•os
 =
subÀn
 && 
ços
 =
t›i˛í
){

423 *
ªsu…
 = 
åue
;

424  
MOSQ_ERR_SUCCESS
;

425 }if(
ços
 =
t›i˛í
 && 
sub
[
•os
] ='+' && spos+1 =
subÀn
){

426 if(
•os
 > 0 && 
sub
[spos-1] != '/'){

427  
MOSQ_ERR_INVAL
;

429 
•os
++;

430 *
ªsu…
 = 
åue
;

431  
MOSQ_ERR_SUCCESS
;

435 if(
ços
 < 
t›i˛í
 || 
•os
 < 
subÀn
){

436 *
ªsu…
 = 
Ál£
;

438 
ços
 < 
t›i˛í
){

439 if(
t›ic
[
ços
] == '+' ||Åopic[tpos] == '#'){

440  
MOSQ_ERR_INVAL
;

442 
ços
++;

445  
MOSQ_ERR_SUCCESS
;

446 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/will_mosq.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°rög.h
>

24 #ifde‡
WITH_BROKER


25 
	~"mosquôto_brokî_öã∫Æ.h
"

28 
	~"mosquôto.h
"

29 
	~"mosquôto_öã∫Æ.h
"

30 
	~"loggög_mosq.h
"

31 
	~"mesßges_mosq.h
"

32 
	~"mem‹y_mosq.h
"

33 
	~"mqâ_¥Ÿocﬁ.h
"

34 
	~"√t_mosq.h
"

35 
	~"ªad_h™dÀ.h
"

36 
	~"£nd_mosq.h
"

37 
	~"utû_mosq.h
"

38 
	~"wûl_mosq.h
"

40 
	$wûl__£t
(
mosquôto
 *
mosq
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
, 
mosquôto_¥›îty
 *
¥›îtõs
)

42 
rc
 = 
MOSQ_ERR_SUCCESS
;

43 
mosquôto_¥›îty
 *
p
;

45 if(!
mosq
 || !
t›ic
Ë 
MOSQ_ERR_INVAL
;

46 if(
∑ylﬂdÀn
 < 0 ||ÖaylﬂdÀ¿> ()
MQTT_MAX_PAYLOAD
Ë 
MOSQ_ERR_PAYLOAD_SIZE
;

47 if(
∑ylﬂdÀn
 > 0 && !
∑ylﬂd
Ë 
MOSQ_ERR_INVAL
;

49 if(
	`mosquôto_pub_t›ic_check
(
t›ic
)Ë 
MOSQ_ERR_INVAL
;

50 if(
	`mosquôto_vÆid©e_utf8
(
t›ic
, (
uöt16_t
)
	`°æí
—›ic))Ë 
MOSQ_ERR_MALFORMED_UTF8
;

52 if(
¥›îtõs
){

53 if(
mosq
->
¥Ÿocﬁ
 !
mosq_p_mqâ5
){

54  
MOSQ_ERR_NOT_SUPPORTED
;

56 
p
 = 
¥›îtõs
;

57 
p
){

58 
rc
 = 
	`mosquôto_¥›îty_check_comm™d
(
CMD_WILL
, 
p
->
idítifõr
);

59 if(
rc
) Ñc;

60 
p
 =Ö->
√xt
;

64 if(
mosq
->
wûl
){

65 
	`mosquôto__‰ì
(
mosq
->
wûl
->
msg
.
t›ic
);

66 
	`mosquôto__‰ì
(
mosq
->
wûl
->
msg
.
∑ylﬂd
);

67 
	`mosquôto_¥›îty_‰ì_Æl
(&
mosq
->
wûl
->
¥›îtõs
);

68 
	`mosquôto__‰ì
(
mosq
->
wûl
);

71 
mosq
->
wûl
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_mesßge_Æl
));

72 if(!
mosq
->
wûl
Ë 
MOSQ_ERR_NOMEM
;

73 
mosq
->
wûl
->
msg
.
t›ic
 = 
	`mosquôto__°rdup
(topic);

74 if(!
mosq
->
wûl
->
msg
.
t›ic
){

75 
rc
 = 
MOSQ_ERR_NOMEM
;

76 
˛ónup
;

78 
mosq
->
wûl
->
msg
.
∑ylﬂdÀn
 =Öayloadlen;

79 if(
mosq
->
wûl
->
msg
.
∑ylﬂdÀn
 > 0){

80 if(!
∑ylﬂd
){

81 
rc
 = 
MOSQ_ERR_INVAL
;

82 
˛ónup
;

84 
mosq
->
wûl
->
msg
.
∑ylﬂd
 = 
	`mosquôto__mÆloc
(()*()mosq->wûl->msg.
∑ylﬂdÀn
);

85 if(!
mosq
->
wûl
->
msg
.
∑ylﬂd
){

86 
rc
 = 
MOSQ_ERR_NOMEM
;

87 
˛ónup
;

90 
	`mem˝y
(
mosq
->
wûl
->
msg
.
∑ylﬂd
,Öaylﬂd, ()
∑ylﬂdÀn
);

92 
mosq
->
wûl
->
msg
.
qos
 = qos;

93 
mosq
->
wûl
->
msg
.
ªèö
 =Ñetain;

95 
mosq
->
wûl
->
¥›îtõs
 =Öroperties;

97  
MOSQ_ERR_SUCCESS
;

99 
˛ónup
:

100 if(
mosq
->
wûl
){

101 
	`mosquôto__‰ì
(
mosq
->
wûl
->
msg
.
t›ic
);

102 
	`mosquôto__‰ì
(
mosq
->
wûl
->
msg
.
∑ylﬂd
);

104 
	`mosquôto__‰ì
(
mosq
->
wûl
);

105 
mosq
->
wûl
 = 
NULL
;

108  
rc
;

109 
	}
}

111 
	$wûl__˛ór
(
mosquôto
 *
mosq
)

113 if(!
mosq
->
wûl
Ë 
MOSQ_ERR_SUCCESS
;

115 
	`mosquôto__‰ì
(
mosq
->
wûl
->
msg
.
t›ic
);

116 
mosq
->
wûl
->
msg
.
t›ic
 = 
NULL
;

118 
	`mosquôto__‰ì
(
mosq
->
wûl
->
msg
.
∑ylﬂd
);

119 
mosq
->
wûl
->
msg
.
∑ylﬂd
 = 
NULL
;

121 
	`mosquôto_¥›îty_‰ì_Æl
(&
mosq
->
wûl
->
¥›îtõs
);

123 
	`mosquôto__‰ì
(
mosq
->
wûl
);

124 
mosq
->
wûl
 = 
NULL
;

125 
mosq
->
wûl_dñay_öãrvÆ
 = 0;

127  
MOSQ_ERR_SUCCESS
;

128 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/lib/will_mosq.h

19 #i‚de‡
WILL_MOSQ_H


20 
	#WILL_MOSQ_H


	)

22 
	~"mosquôto.h
"

23 
	~"mosquôto_öã∫Æ.h
"

25 
wûl__£t
(
mosquôto
 *
mosq
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
, 
mosquôto_¥›îty
 *
¥›îtõs
);

26 
wûl__˛ór
(
mosquôto
 *
mosq
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/auth-by-ip/mosquitto_auth_by_ip.c

35 
	~"c⁄fig.h
"

37 
	~<°dio.h
>

38 
	~<°rög.h
>

40 
	~"mosquôto_brokî.h
"

41 
	~"mosquôto_∂ugö.h
"

42 
	~"mosquôto.h
"

43 
	~"mqâ_¥Ÿocﬁ.h
"

45 
mosquôto_∂ugö_id_t
 *
	gmosq_pid
 = 
NULL
;

47 
	$basic_auth_ˇŒback
(
evít
, *
evít_d©a
, *
u£rd©a
)

49 
mosquôto_evt_basic_auth
 *
ed
 = 
evít_d©a
;

50 c⁄° *
ù_addªss
;

52 
	`UNUSED
(
evít
);

53 
	`UNUSED
(
u£rd©a
);

55 
ù_addªss
 = 
	`mosquôto_˛õ¡_addªss
(
ed
->
˛õ¡
);

56 if(!
	`°rcmp
(
ù_addªss
, "127.0.0.1")){

58  
MOSQ_ERR_SUCCESS
;

60  
MOSQ_ERR_AUTH
;

62 
	}
}

64 
	$mosquôto_∂ugö_vîsi⁄
(
suµ‹ãd_vîsi⁄_cou¡
, c⁄° *
suµ‹ãd_vîsi⁄s
)

66 
i
;

68 
i
=0; i<
suµ‹ãd_vîsi⁄_cou¡
; i++){

69 if(
suµ‹ãd_vîsi⁄s
[
i
] == 5){

74 
	}
}

76 
	$mosquôto_∂ugö_öô
(
mosquôto_∂ugö_id_t
 *
idítifõr
, **
u£r_d©a
, 
mosquôto_›t
 *
›ts
, 
›t_cou¡
)

78 
	`UNUSED
(
u£r_d©a
);

79 
	`UNUSED
(
›ts
);

80 
	`UNUSED
(
›t_cou¡
);

82 
mosq_pid
 = 
idítifõr
;

83  
	`mosquôto_ˇŒback_ªgi°î
(
mosq_pid
, 
MOSQ_EVT_BASIC_AUTH
, 
basic_auth_ˇŒback
, 
NULL
, NULL);

84 
	}
}

86 
	$mosquôto_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
›ts
, 
›t_cou¡
)

88 
	`UNUSED
(
u£r_d©a
);

89 
	`UNUSED
(
›ts
);

90 
	`UNUSED
(
›t_cou¡
);

92  
	`mosquôto_ˇŒback_uƒegi°î
(
mosq_pid
, 
MOSQ_EVT_BASIC_AUTH
, 
basic_auth_ˇŒback
, 
NULL
);

93 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/deny-protocol-version/mosquitto_deny_protocol_version.c

47 
	~"c⁄fig.h
"

49 
	~<°dio.h
>

50 
	~<°rög.h
>

52 
	~"mosquôto_brokî.h
"

53 
	~"mosquôto_∂ugö.h
"

54 
	~"mosquôto.h
"

55 
	~"mqâ_¥Ÿocﬁ.h
"

57 
mosquôto_∂ugö_id_t
 *
	gmosq_pid
 = 
NULL
;

59 
	$mosquôto_∂ugö_vîsi⁄
(
suµ‹ãd_vîsi⁄_cou¡
, c⁄° *
suµ‹ãd_vîsi⁄s
)

61 
i
;

63 
i
=0; i<
suµ‹ãd_vîsi⁄_cou¡
; i++){

64 if(
suµ‹ãd_vîsi⁄s
[
i
] == 5){

69 
	}
}

71 
	$basic_auth_ˇŒback
(
evít
, *
evít_d©a
, *
u£rd©a
)

73 
mosquôto_evt_basic_auth
 *
ed
 = 
evít_d©a
;

74 
¥Ÿocﬁ_vîsi⁄
;

76 
	`UNUSED
(
evít
);

77 
	`UNUSED
(
u£rd©a
);

79 
¥Ÿocﬁ_vîsi⁄
 = 
	`mosquôto_˛õ¡_¥Ÿocﬁ_vîsi⁄
(
ed
->
˛õ¡
);

81 if(
¥Ÿocﬁ_vîsi⁄
 == 5 ||Örotocol_version == 4){

86  
MOSQ_ERR_PLUGIN_DEFER
;

89  
MOSQ_ERR_AUTH
;

91 
	}
}

93 
	$mosquôto_∂ugö_öô
(
mosquôto_∂ugö_id_t
 *
idítifõr
, **
u£r_d©a
, 
mosquôto_›t
 *
›ts
, 
›t_cou¡
)

95 
	`UNUSED
(
u£r_d©a
);

96 
	`UNUSED
(
›ts
);

97 
	`UNUSED
(
›t_cou¡
);

99 
mosq_pid
 = 
idítifõr
;

100  
	`mosquôto_ˇŒback_ªgi°î
(
mosq_pid
, 
MOSQ_EVT_BASIC_AUTH
, 
basic_auth_ˇŒback
, 
NULL
, NULL);

101 
	}
}

103 
	$mosquôto_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
›ts
, 
›t_cou¡
)

105 
	`UNUSED
(
u£r_d©a
);

106 
	`UNUSED
(
›ts
);

107 
	`UNUSED
(
›t_cou¡
);

109  
	`mosquôto_ˇŒback_uƒegi°î
(
mosq_pid
, 
MOSQ_EVT_MESSAGE
, 
basic_auth_ˇŒback
, 
NULL
);

110 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/acl.c

19 
	~"c⁄fig.h
"

21 
	~"dy«mic_£curôy.h
"

22 
	~"mosquôto.h
"

23 
	~"mosquôto_brokî.h
"

24 
	~"mosquôto_∂ugö.h
"

26 (*
	tMOSQ_FUNC_a˛_check
)(
	tmosquôto_evt_a˛_check
 *, 
	tdyn£c__rﬁñi°
 *);

36 
	$a˛_check_publish_c_ªcv
(
mosquôto_evt_a˛_check
 *
ed
, 
dyn£c__rﬁñi°
 *
ba£_rﬁñi°
)

38 
dyn£c__rﬁñi°
 *
rﬁñi°
, *
rﬁñi°_tmp
 = 
NULL
;

39 
dyn£c__a˛
 *
a˛
, *
a˛_tmp
 = 
NULL
;

40 
boﬁ
 
ªsu…
;

42 
	`HASH_ITER
(
hh
, 
ba£_rﬁñi°
, 
rﬁñi°
, 
rﬁñi°_tmp
){

43 
	`HASH_ITER
(
hh
, 
rﬁñi°
->
rﬁe
->
a˛s
.
publish_c_ªcv
, 
a˛
, 
a˛_tmp
){

44 
	`mosquôto_t›ic_m©ches_sub
(
a˛
->
t›ic
, 
ed
->t›ic, &
ªsu…
);

45 if(
ªsu…
){

46 if(
a˛
->
Ælow
){

47  
MOSQ_ERR_SUCCESS
;

49  
MOSQ_ERR_ACL_DENIED
;

54  
MOSQ_ERR_NOT_FOUND
;

55 
	}
}

64 
	$a˛_check_publish_c_£nd
(
mosquôto_evt_a˛_check
 *
ed
, 
dyn£c__rﬁñi°
 *
ba£_rﬁñi°
)

66 
dyn£c__rﬁñi°
 *
rﬁñi°
, *
rﬁñi°_tmp
 = 
NULL
;

67 
dyn£c__a˛
 *
a˛
, *
a˛_tmp
 = 
NULL
;

68 
boﬁ
 
ªsu…
;

70 
	`HASH_ITER
(
hh
, 
ba£_rﬁñi°
, 
rﬁñi°
, 
rﬁñi°_tmp
){

71 
	`HASH_ITER
(
hh
, 
rﬁñi°
->
rﬁe
->
a˛s
.
publish_c_£nd
, 
a˛
, 
a˛_tmp
){

72 
	`mosquôto_t›ic_m©ches_sub
(
a˛
->
t›ic
, 
ed
->t›ic, &
ªsu…
);

73 if(
ªsu…
){

74 if(
a˛
->
Ælow
){

75  
MOSQ_ERR_SUCCESS
;

77  
MOSQ_ERR_ACL_DENIED
;

82  
MOSQ_ERR_NOT_FOUND
;

83 
	}
}

92 
	$a˛_check_subs¸ibe
(
mosquôto_evt_a˛_check
 *
ed
, 
dyn£c__rﬁñi°
 *
ba£_rﬁñi°
)

94 
dyn£c__rﬁñi°
 *
rﬁñi°
, *
rﬁñi°_tmp
 = 
NULL
;

95 
dyn£c__a˛
 *
a˛
, *
a˛_tmp
 = 
NULL
;

96 
size_t
 
Àn
;

98 
Àn
 = 
	`°æí
(
ed
->
t›ic
);

100 
	`HASH_ITER
(
hh
, 
ba£_rﬁñi°
, 
rﬁñi°
, 
rﬁñi°_tmp
){

101 
	`HASH_FIND
(
hh
, 
rﬁñi°
->
rﬁe
->
a˛s
.
subs¸ibe_lôîÆ
, 
ed
->
t›ic
, 
Àn
, 
a˛
);

102 if(
a˛
){

103 if(
a˛
->
Ælow
){

104  
MOSQ_ERR_SUCCESS
;

106  
MOSQ_ERR_ACL_DENIED
;

109 
	`HASH_ITER
(
hh
, 
rﬁñi°
->
rﬁe
->
a˛s
.
subs¸ibe_∑âîn
, 
a˛
, 
a˛_tmp
){

110 if(
	`sub_a˛_check
(
a˛
->
t›ic
, 
ed
->topic)){

111 if(
a˛
->
Ælow
){

112  
MOSQ_ERR_SUCCESS
;

114  
MOSQ_ERR_ACL_DENIED
;

119  
MOSQ_ERR_NOT_FOUND
;

120 
	}
}

129 
	$a˛_check_unsubs¸ibe
(
mosquôto_evt_a˛_check
 *
ed
, 
dyn£c__rﬁñi°
 *
ba£_rﬁñi°
)

131 
dyn£c__rﬁñi°
 *
rﬁñi°
, *
rﬁñi°_tmp
 = 
NULL
;

132 
dyn£c__a˛
 *
a˛
, *
a˛_tmp
 = 
NULL
;

133 
size_t
 
Àn
;

135 
Àn
 = 
	`°æí
(
ed
->
t›ic
);

137 
	`HASH_ITER
(
hh
, 
ba£_rﬁñi°
, 
rﬁñi°
, 
rﬁñi°_tmp
){

138 
	`HASH_FIND
(
hh
, 
rﬁñi°
->
rﬁe
->
a˛s
.
unsubs¸ibe_lôîÆ
, 
ed
->
t›ic
, 
Àn
, 
a˛
);

139 if(
a˛
){

140 if(
a˛
->
Ælow
){

141  
MOSQ_ERR_SUCCESS
;

143  
MOSQ_ERR_ACL_DENIED
;

146 
	`HASH_ITER
(
hh
, 
rﬁñi°
->
rﬁe
->
a˛s
.
unsubs¸ibe_∑âîn
, 
a˛
, 
a˛_tmp
){

147 if(
	`sub_a˛_check
(
a˛
->
t›ic
, 
ed
->topic)){

148 if(
a˛
->
Ælow
){

149  
MOSQ_ERR_SUCCESS
;

151  
MOSQ_ERR_ACL_DENIED
;

156  
MOSQ_ERR_NOT_FOUND
;

157 
	}
}

166 
	$a˛_check
(
mosquôto_evt_a˛_check
 *
ed
, 
MOSQ_FUNC_a˛_check
 
check
, 
boﬁ
 
a˛_deÁu…_ac˚ss
)

168 
dyn£c__˛õ¡
 *
˛õ¡
;

169 
dyn£c__grou∂i°
 *
grou∂i°
, *
grou∂i°_tmp
 = 
NULL
;

170 c⁄° *
u£∫ame
;

171 
rc
;

173 
u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
ed
->
˛õ¡
);

175 if(
u£∫ame
){

176 
˛õ¡
 = 
	`dyn£c_˛õ¡s__föd
(
u£∫ame
);

177 if(
˛õ¡
 =
NULL
Ë 
MOSQ_ERR_PLUGIN_DEFER
;

180 
rc
 = 
	`check
(
ed
, 
˛õ¡
->
rﬁñi°
);

181 if(
rc
 !
MOSQ_ERR_NOT_FOUND
){

182  
rc
;

185 
	`HASH_ITER
(
hh
, 
˛õ¡
->
grou∂i°
, grou∂i°, 
grou∂i°_tmp
){

186 
rc
 = 
	`check
(
ed
, 
grou∂i°
->
group
->
rﬁñi°
);

187 if(
rc
 !
MOSQ_ERR_NOT_FOUND
){

188  
rc
;

191 }if(
dyn£c_™⁄ymous_group
){

193 
rc
 = 
	`check
(
ed
, 
dyn£c_™⁄ymous_group
->
rﬁñi°
);

194 if(
rc
 !
MOSQ_ERR_NOT_FOUND
){

195  
rc
;

199 if(
a˛_deÁu…_ac˚ss
 =
Ál£
){

200  
MOSQ_ERR_PLUGIN_DEFER
;

202 if(!
	`°∫cmp
(
ed
->
t›ic
, "$CONTROL", 
	`°æí
("$CONTROL"))){

205  
MOSQ_ERR_PLUGIN_DEFER
;

207  
MOSQ_ERR_SUCCESS
;

210 
	}
}

219 
	$dyn£c__a˛_check_ˇŒback
(
evít
, *
evít_d©a
, *
u£rd©a
)

221 
mosquôto_evt_a˛_check
 *
ed
 = 
evít_d©a
;

223 
	`UNUSED
(
evít
);

224 
	`UNUSED
(
u£rd©a
);

236 
ed
->
ac˚ss
){

237 
MOSQ_ACL_SUBSCRIBE
:

238  
	`a˛_check
(
evít_d©a
, 
a˛_check_subs¸ibe
, 
deÁu…_ac˚ss
.
subs¸ibe
);

240 
MOSQ_ACL_UNSUBSCRIBE
:

241  
	`a˛_check
(
evít_d©a
, 
a˛_check_unsubs¸ibe
, 
deÁu…_ac˚ss
.
unsubs¸ibe
);

243 
MOSQ_ACL_WRITE
:

244  
	`a˛_check
(
evít_d©a
, 
a˛_check_publish_c_£nd
, 
deÁu…_ac˚ss
.
publish_c_£nd
);

246 
MOSQ_ACL_READ
:

247  
	`a˛_check
(
evít_d©a
, 
a˛_check_publish_c_ªcv
, 
deÁu…_ac˚ss
.
publish_c_ªcv
);

250  
MOSQ_ERR_PLUGIN_DEFER
;

252  
MOSQ_ERR_PLUGIN_DEFER
;

253 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/auth.c

19 
	~"c⁄fig.h
"

21 
	~<›ís¶/bio.h
>

22 
	~<›ís¶/buf„r.h
>

23 
	~<›ís¶/evp.h
>

24 
	~<›ís¶/ønd.h
>

26 
	~"dy«mic_£curôy.h
"

27 
	~"mosquôto.h
"

28 
	~"mosquôto_brokî.h
"

37 
	$dyn£c_auth__ba£64_ícode
(*
ö
, 
ö_Àn
, **
ícoded
)

39 
BIO
 *
bmem
, *
b64
;

40 
BUF_MEM
 *
b±r
 = 
NULL
;

42 if(
ö_Àn
 < 0)  1;

44 
b64
 = 
	`BIO_√w
(
	`BIO_f_ba£64
());

45 if(
b64
 =
NULL
)  1;

47 
	`BIO_£t_Êags
(
b64
, 
BIO_FLAGS_BASE64_NO_NL
);

48 
bmem
 = 
	`BIO_√w
(
	`BIO_s_mem
());

49 if(
bmem
 =
NULL
){

50 
	`BIO_‰ì_Æl
(
b64
);

53 
b64
 = 
	`BIO_push
(b64, 
bmem
);

54 
	`BIO_wrôe
(
b64
, 
ö
, 
ö_Àn
);

55 if(
	`BIO_Êush
(
b64
) != 1){

56 
	`BIO_‰ì_Æl
(
b64
);

59 
	`BIO_gë_mem_±r
(
b64
, &
b±r
);

60 *
ícoded
 = 
	`mosquôto_mÆloc
(
b±r
->
Àngth
+1);

61 if(!(*
ícoded
)){

62 
	`BIO_‰ì_Æl
(
b64
);

65 
	`mem˝y
(*
ícoded
, 
b±r
->
d©a
, b±r->
Àngth
);

66 (*
ícoded
)[
b±r
->
Àngth
] = '\0';

67 
	`BIO_‰ì_Æl
(
b64
);

70 
	}
}

73 
	$dyn£c_auth__ba£64_decode
(*
ö
, **
decoded
, *
decoded_Àn
)

75 
BIO
 *
bmem
, *
b64
;

76 
size_t
 
¶í
;

78 
¶í
 = 
	`°æí
(
ö
);

80 
b64
 = 
	`BIO_√w
(
	`BIO_f_ba£64
());

81 if(!
b64
){

84 
	`BIO_£t_Êags
(
b64
, 
BIO_FLAGS_BASE64_NO_NL
);

86 
bmem
 = 
	`BIO_√w
(
	`BIO_s_mem
());

87 if(!
bmem
){

88 
	`BIO_‰ì_Æl
(
b64
);

91 
b64
 = 
	`BIO_push
(b64, 
bmem
);

92 
	`BIO_wrôe
(
bmem
, 
ö
, ()
¶í
);

94 if(
	`BIO_Êush
(
bmem
) != 1){

95 
	`BIO_‰ì_Æl
(
b64
);

98 *
decoded
 = 
	`mosquôto_ˇŒoc
(
¶í
, 1);

99 if(!(*
decoded
)){

100 
	`BIO_‰ì_Æl
(
b64
);

103 *
decoded_Àn
 = 
	`BIO_ªad
(
b64
, *
decoded
, ()
¶í
);

104 
	`BIO_‰ì_Æl
(
b64
);

106 if(*
decoded_Àn
 <= 0){

107 
	`mosquôto_‰ì
(*
decoded
);

108 *
decoded
 = 
NULL
;

109 *
decoded_Àn
 = 0;

114 
	}
}

123 
	$dyn£c_auth__pw_hash
(
dyn£c__˛õ¡
 *
˛õ¡
, c⁄° *
∑ssw‹d
, *
∑ssw‹d_hash
, 
∑ssw‹d_hash_Àn
, 
boﬁ
 
√w_∑ssw‹d
)

125 c⁄° 
EVP_MD
 *
dige°
;

126 
ôî©i⁄s
;

128 if(
√w_∑ssw‹d
){

129 if(
	`RAND_byãs
(
˛õ¡
->
pw
.
ß…
, (client->pw.salt)) != 1){

130  
MOSQ_ERR_UNKNOWN
;

132 
ôî©i⁄s
 = 
PW_DEFAULT_ITERATIONS
;

134 
ôî©i⁄s
 = 
˛õ¡
->
pw
.iterations;

136 if(
ôî©i⁄s
 < 1){

137  
MOSQ_ERR_INVAL
;

139 
˛õ¡
->
pw
.
ôî©i⁄s
 = iterations;

141 
dige°
 = 
	`EVP_gë_dige°by«me
("sha512");

142 if(!
dige°
){

143  
MOSQ_ERR_UNKNOWN
;

146  !
	`PKCS5_PBKDF2_HMAC
(
∑ssw‹d
, ()
	`°æí
(password),

147 
˛õ¡
->
pw
.
ß…
, (˛õ¡->pw.ß…), 
ôî©i⁄s
,

148 
dige°
, 
∑ssw‹d_hash_Àn
, 
∑ssw‹d_hash
);

149 
	}
}

158 
	$memcmp_c⁄°
(c⁄° *
a
, c⁄° *
b
, 
size_t
 
Àn
)

160 
size_t
 
i
;

161 
rc
 = 0;

163 if(!
a
 || !
b
)  1;

165 
i
=0; i<
Àn
; i++){

166 if–((*)
a
)[
i
] !((*)
b
)[i] ){

167 
rc
 = 1;

170  
rc
;

171 
	}
}

174 
	$dyn£c_auth__basic_auth_ˇŒback
(
evít
, *
evít_d©a
, *
u£rd©a
)

176 
mosquôto_evt_basic_auth
 *
ed
 = 
evít_d©a
;

177 
dyn£c__˛õ¡
 *
˛õ¡
;

178 
∑ssw‹d_hash
[64];

179 c⁄° *
˛õ¡id
;

181 
	`UNUSED
(
evít
);

182 
	`UNUSED
(
u£rd©a
);

184 if(
ed
->
u£∫ame
 =
NULL
 ||Éd->
∑ssw‹d
 =NULLË 
MOSQ_ERR_PLUGIN_DEFER
;

186 
˛õ¡
 = 
	`dyn£c_˛õ¡s__föd
(
ed
->
u£∫ame
);

187 if(
˛õ¡
){

188 if(
˛õ¡
->
dißbÀd
){

189  
MOSQ_ERR_AUTH
;

191 if(
˛õ¡
->
˛õ¡id
){

192 
˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
ed
->
˛õ¡
);

193 if(
˛õ¡id
 =
NULL
 || 
	`°rcmp
(
˛õ¡
->clientid, clientid)){

194  
MOSQ_ERR_AUTH
;

197 if(
˛õ¡
->
pw
.
vÆid
 && 
	`dyn£c_auth__pw_hash
(˛õ¡, 
ed
->
∑ssw‹d
, 
∑ssw‹d_hash
, ’assw‹d_hash), 
Ál£
Ë=
MOSQ_ERR_SUCCESS
){

198 if(
	`memcmp_c⁄°
(
˛õ¡
->
pw
.
∑ssw‹d_hash
,Öassword_hash, (password_hash)) == 0){

199  
MOSQ_ERR_SUCCESS
;

201  
MOSQ_ERR_AUTH
;

204  
MOSQ_ERR_PLUGIN_DEFER
;

207  
MOSQ_ERR_PLUGIN_DEFER
;

209 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/clientlist.c

19 
	~"c⁄fig.h
"

21 
	~<cjs⁄/cJSON.h
>

22 
	~<°dio.h
>

23 
	~<uthash.h
>

25 
	~"mosquôto.h
"

26 
	~"mosquôto_brokî.h
"

27 
	~"js⁄_hñp.h
"

29 
	~"dy«mic_£curôy.h
"

56 
	$dyn£c_˛õ¡li°__cmp
(*
a
, *
b
)

58 
dyn£c__˛õ¡li°
 *
˛õ¡li°_a
 = 
a
;

59 
dyn£c__˛õ¡li°
 *
˛õ¡li°_b
 = 
b
;

61  
	`°rcmp
(
˛õ¡li°_a
->
˛õ¡
->
u£∫ame
, 
˛õ¡li°_b
->client->username);

62 
	}
}

65 
	$dyn£c_˛õ¡li°__kick_Æl
(
dyn£c__˛õ¡li°
 *
ba£_˛õ¡li°
)

67 
dyn£c__˛õ¡li°
 *
˛õ¡li°
, *
˛õ¡li°_tmp
;

69 
	`HASH_ITER
(
hh
, 
ba£_˛õ¡li°
, 
˛õ¡li°
, 
˛õ¡li°_tmp
){

70 
	`mosquôto_kick_˛õ¡_by_u£∫ame
(
˛õ¡li°
->
˛õ¡
->
u£∫ame
, 
Ál£
);

72 
	}
}

74 
cJSON
 *
	$dyn£c_˛õ¡li°__Æl_to_js⁄
(
dyn£c__˛õ¡li°
 *
ba£_˛õ¡li°
)

76 
dyn£c__˛õ¡li°
 *
˛õ¡li°
, *
˛õ¡li°_tmp
;

77 
cJSON
 *
j_˛õ¡s
, *
j_˛õ¡
;

79 
j_˛õ¡s
 = 
	`cJSON_Cª©eAºay
();

80 if(
j_˛õ¡s
 =
NULL
)  NULL;

82 
	`HASH_ITER
(
hh
, 
ba£_˛õ¡li°
, 
˛õ¡li°
, 
˛õ¡li°_tmp
){

83 
j_˛õ¡
 = 
	`cJSON_Cª©eObje˘
();

84 if(
j_˛õ¡
 =
NULL
){

85 
	`cJSON_Dñëe
(
j_˛õ¡s
);

86  
NULL
;

88 
	`cJSON_AddIãmToAºay
(
j_˛õ¡s
, 
j_˛õ¡
);

90 if(
	`cJSON_AddSåögToObje˘
(
j_˛õ¡
, "u£∫ame", 
˛õ¡li°
->
˛õ¡
->
u£∫ame
Ë=
NULL


91 || (
˛õ¡li°
->
¥i‹ôy
 !-1 && 
	`cJSON_AddI¡ToObje˘
(
j_˛õ¡
, "¥i‹ôy", clõ¡li°->¥i‹ôyË=
NULL
)

94 
	`cJSON_Dñëe
(
j_˛õ¡s
);

95  
NULL
;

98  
j_˛õ¡s
;

99 
	}
}

102 
	$dyn£c_˛õ¡li°__add
(
dyn£c__˛õ¡li°
 **
ba£_˛õ¡li°
, 
dyn£c__˛õ¡
 *
˛õ¡
, 
¥i‹ôy
)

104 
dyn£c__˛õ¡li°
 *
˛õ¡li°
;

106 
	`HASH_FIND
(
hh
, *
ba£_˛õ¡li°
, 
˛õ¡
->
u£∫ame
, 
	`°æí
(˛õ¡->u£∫ame), 
˛õ¡li°
);

107 if(
˛õ¡li°
 !
NULL
){

109  
MOSQ_ERR_SUCCESS
;

112 
˛õ¡li°
 = 
	`mosquôto_mÆloc
((
dyn£c__˛õ¡li°
));

113 if(
˛õ¡li°
 =
NULL
){

114  
MOSQ_ERR_NOMEM
;

117 
˛õ¡li°
->
˛õ¡
 = client;

118 
˛õ¡li°
->
¥i‹ôy
 =Öriority;

119 
	`HASH_ADD_KEYPTR_INORDER
(
hh
, *
ba£_˛õ¡li°
, 
˛õ¡
->
u£∫ame
, 
	`°æí
(˛õ¡->u£∫ame), 
˛õ¡li°
, 
dyn£c_˛õ¡li°__cmp
);

121  
MOSQ_ERR_SUCCESS
;

122 
	}
}

125 
	$dyn£c_˛õ¡li°__˛ónup
(
dyn£c__˛õ¡li°
 **
ba£_˛õ¡li°
)

127 
dyn£c__˛õ¡li°
 *
˛õ¡li°
, *
˛õ¡li°_tmp
;

129 
	`HASH_ITER
(
hh
, *
ba£_˛õ¡li°
, 
˛õ¡li°
, 
˛õ¡li°_tmp
){

130 
	`HASH_DELETE
(
hh
, *
ba£_˛õ¡li°
, 
˛õ¡li°
);

131 
	`mosquôto_‰ì
(
˛õ¡li°
);

133 
	}
}

136 
	$dyn£c_˛õ¡li°__ªmove
(
dyn£c__˛õ¡li°
 **
ba£_˛õ¡li°
, 
dyn£c__˛õ¡
 *
˛õ¡
)

138 
dyn£c__˛õ¡li°
 *
˛õ¡li°
;

140 
	`HASH_FIND
(
hh
, *
ba£_˛õ¡li°
, 
˛õ¡
->
u£∫ame
, 
	`°æí
(˛õ¡->u£∫ame), 
˛õ¡li°
);

141 if(
˛õ¡li°
){

142 
	`HASH_DELETE
(
hh
, *
ba£_˛õ¡li°
, 
˛õ¡li°
);

143 
	`mosquôto_‰ì
(
˛õ¡li°
);

145 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/clients.c

19 
	~"c⁄fig.h
"

21 
	~<cjs⁄/cJSON.h
>

22 
	~<°dio.h
>

23 
	~<uthash.h
>

25 
	~"mosquôto.h
"

26 
	~"mosquôto_brokî.h
"

27 
	~"js⁄_hñp.h
"

29 
	~"dy«mic_£curôy.h
"

37 
dyn£c__ªmove_˛õ¡_‰om_Æl_groups
(c⁄° *
u£∫ame
);

38 
˛õ¡__ªmove_Æl_rﬁes
(
dyn£c__˛õ¡
 *
˛õ¡
);

46 
dyn£c__˛õ¡
 *
	gloˇl_˛õ¡s
 = 
NULL
;

55 
	$˛õ¡_cmp
(*
a
, *
b
)

57 
dyn£c__˛õ¡
 *
˛õ¡_a
 = 
a
;

58 
dyn£c__˛õ¡
 *
˛õ¡_b
 = 
b
;

60  
	`°rcmp
(
˛õ¡_a
->
u£∫ame
, 
˛õ¡_b
->username);

61 
	}
}

63 
dyn£c__˛õ¡
 *
	$dyn£c_˛õ¡s__föd
(c⁄° *
u£∫ame
)

65 
dyn£c__˛õ¡
 *
˛õ¡
 = 
NULL
;

67 if(
u£∫ame
){

68 
	`HASH_FIND
(
hh
, 
loˇl_˛õ¡s
, 
u£∫ame
, 
	`°æí
(u£∫ame), 
˛õ¡
);

70  
˛õ¡
;

71 
	}
}

74 
	$˛õ¡__‰ì_ôem
(
dyn£c__˛õ¡
 *
˛õ¡
)

76 
dyn£c__˛õ¡
 *
˛õ¡_found
;

77 if(
˛õ¡
 =
NULL
) ;

79 
˛õ¡_found
 = 
	`dyn£c_˛õ¡s__föd
(
˛õ¡
->
u£∫ame
);

80 if(
˛õ¡_found
){

81 
	`HASH_DEL
(
loˇl_˛õ¡s
, 
˛õ¡_found
);

83 
	`dyn£c_rﬁñi°__˛ónup
(&
˛õ¡
->
rﬁñi°
);

84 
	`dyn£c__ªmove_˛õ¡_‰om_Æl_groups
(
˛õ¡
->
u£∫ame
);

85 
	`mosquôto_‰ì
(
˛õ¡
->
ãxt_«me
);

86 
	`mosquôto_‰ì
(
˛õ¡
->
ãxt_des¸ùti⁄
);

87 
	`mosquôto_‰ì
(
˛õ¡
->
˛õ¡id
);

88 
	`mosquôto_‰ì
(
˛õ¡
->
u£∫ame
);

89 
	`mosquôto_‰ì
(
˛õ¡
);

90 
	}
}

92 
	$dyn£c_˛õ¡s__˛ónup
()

94 
dyn£c__˛õ¡
 *
˛õ¡
, *
˛õ¡_tmp
;

96 
	`HASH_ITER
(
hh
, 
loˇl_˛õ¡s
, 
˛õ¡
, 
˛õ¡_tmp
){

97 
	`˛õ¡__‰ì_ôem
(
˛õ¡
);

99 
	}
}

107 
	$dyn£c_˛õ¡s__c⁄fig_lﬂd
(
cJSON
 *
åì
)

109 
cJSON
 *
j_˛õ¡s
, *
j_˛õ¡
, *
jtmp
, *
j_rﬁes
, *
j_rﬁe
;

110 
cJSON
 *
j_ß…
, *
j_∑ssw‹d
, *
j_ôî©i⁄s
;

111 
dyn£c__˛õ¡
 *
˛õ¡
;

112 
dyn£c__rﬁe
 *
rﬁe
;

113 *
buf
;

114 
buf_Àn
;

115 
¥i‹ôy
;

116 
ôî©i⁄s
;

118 
j_˛õ¡s
 = 
	`cJSON_GëObje˘Iãm
(
åì
, "clients");

119 if(
j_˛õ¡s
 =
NULL
){

123 if(
	`cJSON_IsAºay
(
j_˛õ¡s
Ë=
Ál£
){

127 
	`cJSON_AºayF‹Each
(
j_˛õ¡
, 
j_˛õ¡s
){

128 if(
	`cJSON_IsObje˘
(
j_˛õ¡
Ë=
åue
){

129 
˛õ¡
 = 
	`mosquôto_ˇŒoc
(1, (
dyn£c__˛õ¡
));

130 if(
˛õ¡
 =
NULL
){

131  
MOSQ_ERR_NOMEM
;

135 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "username");

136 if(
jtmp
 =
NULL
 || !
	`cJSON_IsSåög
(jtmp)){

137 
	`mosquôto_‰ì
(
˛õ¡
);

140 
˛õ¡
->
u£∫ame
 = 
	`mosquôto_°rdup
(
jtmp
->
vÆue°rög
);

141 if(
˛õ¡
->
u£∫ame
 =
NULL
){

142 
	`mosquôto_‰ì
(
˛õ¡
);

146 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "disabled");

147 if(
jtmp
 && 
	`cJSON_IsBoﬁ
(jtmp)){

148 
˛õ¡
->
dißbÀd
 = 
	`cJSON_IsTrue
(
jtmp
);

152 
j_ß…
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "salt");

153 
j_∑ssw‹d
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "password");

154 
j_ôî©i⁄s
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "iterations");

156 if(
j_ß…
 && 
	`cJSON_IsSåög
(j_salt)

157 && 
j_∑ssw‹d
 && 
	`cJSON_IsSåög
(j_password)

158 && 
j_ôî©i⁄s
 && 
	`cJSON_IsNumbî
(j_iterations)){

160 
ôî©i⁄s
 = ()
j_ôî©i⁄s
->
vÆuedoubÀ
;

161 if(
ôî©i⁄s
 < 1){

162 
	`mosquôto_‰ì
(
˛õ¡
->
u£∫ame
);

163 
	`mosquôto_‰ì
(
˛õ¡
);

166 
˛õ¡
->
pw
.
ôî©i⁄s
 = iterations;

169 if(
	`dyn£c_auth__ba£64_decode
(
j_ß…
->
vÆue°rög
, &
buf
, &
buf_Àn
Ë!
MOSQ_ERR_SUCCESS


170 || 
buf_Àn
 !(
˛õ¡
->
pw
.
ß…
)){

172 
	`mosquôto_‰ì
(
˛õ¡
->
u£∫ame
);

173 
	`mosquôto_‰ì
(
˛õ¡
);

176 
	`mem˝y
(
˛õ¡
->
pw
.
ß…
, 
buf
, (
size_t
)
buf_Àn
);

177 
	`mosquôto_‰ì
(
buf
);

179 if(
	`dyn£c_auth__ba£64_decode
(
j_∑ssw‹d
->
vÆue°rög
, &
buf
, &
buf_Àn
Ë!
MOSQ_ERR_SUCCESS


180 || 
buf_Àn
 !(
˛õ¡
->
pw
.
∑ssw‹d_hash
)){

182 
	`mosquôto_‰ì
(
˛õ¡
->
u£∫ame
);

183 
	`mosquôto_‰ì
(
˛õ¡
);

186 
	`mem˝y
(
˛õ¡
->
pw
.
∑ssw‹d_hash
, 
buf
, (
size_t
)
buf_Àn
);

187 
	`mosquôto_‰ì
(
buf
);

188 
˛õ¡
->
pw
.
vÆid
 = 
åue
;

190 
˛õ¡
->
pw
.
vÆid
 = 
Ál£
;

194 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "clientid");

195 if(
jtmp
 !
NULL
 && 
	`cJSON_IsSåög
(jtmp)){

196 
˛õ¡
->
˛õ¡id
 = 
	`mosquôto_°rdup
(
jtmp
->
vÆue°rög
);

197 if(
˛õ¡
->
˛õ¡id
 =
NULL
){

198 
	`mosquôto_‰ì
(
˛õ¡
->
u£∫ame
);

199 
	`mosquôto_‰ì
(
˛õ¡
);

205 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "textname");

206 if(
jtmp
 !
NULL
 && 
	`cJSON_IsSåög
(jtmp)){

207 
˛õ¡
->
ãxt_«me
 = 
	`mosquôto_°rdup
(
jtmp
->
vÆue°rög
);

208 if(
˛õ¡
->
ãxt_«me
 =
NULL
){

209 
	`mosquôto_‰ì
(
˛õ¡
->
˛õ¡id
);

210 
	`mosquôto_‰ì
(
˛õ¡
->
u£∫ame
);

211 
	`mosquôto_‰ì
(
˛õ¡
);

217 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "textdescription");

218 if(
jtmp
 !
NULL
 && 
	`cJSON_IsSåög
(jtmp)){

219 
˛õ¡
->
ãxt_des¸ùti⁄
 = 
	`mosquôto_°rdup
(
jtmp
->
vÆue°rög
);

220 if(
˛õ¡
->
ãxt_des¸ùti⁄
 =
NULL
){

221 
	`mosquôto_‰ì
(
˛õ¡
->
ãxt_«me
);

222 
	`mosquôto_‰ì
(
˛õ¡
->
˛õ¡id
);

223 
	`mosquôto_‰ì
(
˛õ¡
->
u£∫ame
);

224 
	`mosquôto_‰ì
(
˛õ¡
);

230 
j_rﬁes
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "roles");

231 if(
j_rﬁes
 && 
	`cJSON_IsAºay
(j_roles)){

232 
	`cJSON_AºayF‹Each
(
j_rﬁe
, 
j_rﬁes
){

233 if(
	`cJSON_IsObje˘
(
j_rﬁe
)){

234 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_rﬁe
, "rolename");

235 if(
jtmp
 && 
	`cJSON_IsSåög
(jtmp)){

236 
	`js⁄_gë_öt
(
j_rﬁe
, "¥i‹ôy", &
¥i‹ôy
, 
åue
, -1);

237 
rﬁe
 = 
	`dyn£c_rﬁes__föd
(
jtmp
->
vÆue°rög
);

238 
	`dyn£c_rﬁñi°__˛õ¡_add
(
˛õ¡
, 
rﬁe
, 
¥i‹ôy
);

244 
	`HASH_ADD_KEYPTR
(
hh
, 
loˇl_˛õ¡s
, 
˛õ¡
->
u£∫ame
, 
	`°æí
(client->username), client);

247 
	`HASH_SORT
(
loˇl_˛õ¡s
, 
˛õ¡_cmp
);

250 
	}
}

253 
	$dyn£c__c⁄fig_add_˛õ¡s
(
cJSON
 *
j_˛õ¡s
)

255 
dyn£c__˛õ¡
 *
˛õ¡
, *
˛õ¡_tmp
;

256 
cJSON
 *
j_˛õ¡
, *
j_rﬁes
, *
jtmp
;

257 *
buf
;

259 
	`HASH_ITER
(
hh
, 
loˇl_˛õ¡s
, 
˛õ¡
, 
˛õ¡_tmp
){

260 
j_˛õ¡
 = 
	`cJSON_Cª©eObje˘
();

261 if(
j_˛õ¡
 =
NULL
)  1;

262 
	`cJSON_AddIãmToAºay
(
j_˛õ¡s
, 
j_˛õ¡
);

264 if(
	`cJSON_AddSåögToObje˘
(
j_˛õ¡
, "u£∫ame", 
˛õ¡
->
u£∫ame
Ë=
NULL


265 || (
˛õ¡
->
˛õ¡id
 && 
	`cJSON_AddSåögToObje˘
(
j_˛õ¡
, "˛õ¡id", clõ¡->˛õ¡idË=
NULL
)

266 || (
˛õ¡
->
ãxt_«me
 && 
	`cJSON_AddSåögToObje˘
(
j_˛õ¡
, "ãxäame", clõ¡->ãxt_«meË=
NULL
)

267 || (
˛õ¡
->
ãxt_des¸ùti⁄
 && 
	`cJSON_AddSåögToObje˘
(
j_˛õ¡
, "ãxtdes¸ùti⁄", clõ¡->ãxt_des¸ùti⁄Ë=
NULL
)

268 || (
˛õ¡
->
dißbÀd
 && 
	`cJSON_AddBoﬁToObje˘
(
j_˛õ¡
, "dißbÀd", 
åue
Ë=
NULL
)

274 
j_rﬁes
 = 
	`dyn£c_rﬁñi°__Æl_to_js⁄
(
˛õ¡
->
rﬁñi°
);

275 if(
j_rﬁes
 =
NULL
){

278 
	`cJSON_AddIãmToObje˘
(
j_˛õ¡
, "rﬁes", 
j_rﬁes
);

280 if(
˛õ¡
->
pw
.
vÆid
){

281 if(
	`dyn£c_auth__ba£64_ícode
(
˛õ¡
->
pw
.
∑ssw‹d_hash
, (˛õ¡->pw.∑ssw‹d_hash), &
buf
Ë!
MOSQ_ERR_SUCCESS
){

284 
jtmp
 = 
	`cJSON_Cª©eSåög
(
buf
);

285 
	`mosquôto_‰ì
(
buf
);

286 if(
jtmp
 =
NULL
)  1;

287 
	`cJSON_AddIãmToObje˘
(
j_˛õ¡
, "∑ssw‹d", 
jtmp
);

289 if(
	`dyn£c_auth__ba£64_ícode
(
˛õ¡
->
pw
.
ß…
, (˛õ¡->pw.ß…), &
buf
Ë!
MOSQ_ERR_SUCCESS
){

293 
jtmp
 = 
	`cJSON_Cª©eSåög
(
buf
);

294 
	`mosquôto_‰ì
(
buf
);

295 if(
jtmp
 =
NULL
)  1;

296 
	`cJSON_AddIãmToObje˘
(
j_˛õ¡
, "ß…", 
jtmp
);

298 if(
	`cJSON_AddI¡ToObje˘
(
j_˛õ¡
, "ôî©i⁄s", 
˛õ¡
->
pw
.
ôî©i⁄s
Ë=
NULL
){

305 
	}
}

308 
	$dyn£c_˛õ¡s__c⁄fig_ßve
(
cJSON
 *
åì
)

310 
cJSON
 *
j_˛õ¡s
;

312 if((
j_˛õ¡s
 = 
	`cJSON_AddAºayToObje˘
(
åì
, "˛õ¡s")Ë=
NULL
){

315 if(
	`dyn£c__c⁄fig_add_˛õ¡s
(
j_˛õ¡s
)){

320 
	}
}

323 
	$dyn£c_˛õ¡s__¥o˚ss_¸óã
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

325 *
u£∫ame
, *
∑ssw‹d
, *
˛õ¡id
 = 
NULL
;

326 *
ãxt_«me
, *
ãxt_des¸ùti⁄
;

327 
dyn£c__˛õ¡
 *
˛õ¡
;

328 
rc
;

329 
cJSON
 *
j_groups
, *
j_group
, *
jtmp
;

330 
¥i‹ôy
;

331 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

333 if(
	`js⁄_gë_°rög
(
comm™d
, "u£∫ame", &
u£∫ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

334 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "InvÆid/missög u£∫ame", 
c‹ªœti⁄_d©a
);

335  
MOSQ_ERR_INVAL
;

337 if(
	`mosquôto_vÆid©e_utf8
(
u£∫ame
, ()
	`°æí
(u£∫ame)Ë!
MOSQ_ERR_SUCCESS
){

338 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "U£∫amênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

339  
MOSQ_ERR_INVAL
;

342 if(
	`js⁄_gë_°rög
(
comm™d
, "∑ssw‹d", &
∑ssw‹d
, 
åue
Ë!
MOSQ_ERR_SUCCESS
){

343 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "InvÆid/missögÖassw‹d", 
c‹ªœti⁄_d©a
);

344  
MOSQ_ERR_INVAL
;

347 if(
	`js⁄_gë_°rög
(
comm™d
, "˛õ¡id", &
˛õ¡id
, 
åue
Ë!
MOSQ_ERR_SUCCESS
){

348 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "InvÆid/missög clõ¡ id", 
c‹ªœti⁄_d©a
);

349  
MOSQ_ERR_INVAL
;

351 if(
˛õ¡id
 && 
	`mosquôto_vÆid©e_utf8
(˛õ¡id, ()
	`°æí
(˛õ¡id)Ë!
MOSQ_ERR_SUCCESS
){

352 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "Clõ¡ IDÇŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

353  
MOSQ_ERR_INVAL
;

357 if(
	`js⁄_gë_°rög
(
comm™d
, "ãxäame", &
ãxt_«me
, 
åue
Ë!
MOSQ_ERR_SUCCESS
){

358 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "InvÆid/missögÅexäame", 
c‹ªœti⁄_d©a
);

359  
MOSQ_ERR_INVAL
;

362 if(
	`js⁄_gë_°rög
(
comm™d
, "ãxtdes¸ùti⁄", &
ãxt_des¸ùti⁄
, 
åue
Ë!
MOSQ_ERR_SUCCESS
){

363 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "InvÆid/missögÅextdes¸ùti⁄", 
c‹ªœti⁄_d©a
);

364  
MOSQ_ERR_INVAL
;

367 
˛õ¡
 = 
	`dyn£c_˛õ¡s__föd
(
u£∫ame
);

368 if(
˛õ¡
){

369 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "Clõ¡áÃódyÉxi°s", 
c‹ªœti⁄_d©a
);

370  
MOSQ_ERR_SUCCESS
;

373 
˛õ¡
 = 
	`mosquôto_ˇŒoc
(1, (
dyn£c__˛õ¡
));

374 if(
˛õ¡
 =
NULL
){

375 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

376  
MOSQ_ERR_NOMEM
;

378 
˛õ¡
->
u£∫ame
 = 
	`mosquôto_°rdup
(username);

379 if(
˛õ¡
->
u£∫ame
 =
NULL
){

380 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

381 
	`˛õ¡__‰ì_ôem
(
˛õ¡
);

382  
MOSQ_ERR_NOMEM
;

384 if(
ãxt_«me
){

385 
˛õ¡
->
ãxt_«me
 = 
	`mosquôto_°rdup
(text_name);

386 if(
˛õ¡
->
ãxt_«me
 =
NULL
){

387 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

388 
	`˛õ¡__‰ì_ôem
(
˛õ¡
);

389  
MOSQ_ERR_NOMEM
;

392 if(
ãxt_des¸ùti⁄
){

393 
˛õ¡
->
ãxt_des¸ùti⁄
 = 
	`mosquôto_°rdup
(text_description);

394 if(
˛õ¡
->
ãxt_des¸ùti⁄
 =
NULL
){

395 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

396 
	`˛õ¡__‰ì_ôem
(
˛õ¡
);

397  
MOSQ_ERR_NOMEM
;

401 if(
∑ssw‹d
){

402 if(
	`dyn£c_auth__pw_hash
(
˛õ¡
, 
∑ssw‹d
, clõ¡->
pw
.
∑ssw‹d_hash
, (˛õ¡->pw.∑ssw‹d_hash), 
åue
)){

403 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

404 
	`˛õ¡__‰ì_ôem
(
˛õ¡
);

405  
MOSQ_ERR_NOMEM
;

407 
˛õ¡
->
pw
.
vÆid
 = 
åue
;

409 if(
˛õ¡id
 && 
	`°æí
(clientid) > 0){

410 
˛õ¡
->
˛õ¡id
 = 
	`mosquôto_°rdup
(clientid);

411 if(
˛õ¡
->
˛õ¡id
 =
NULL
){

412 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

413 
	`˛õ¡__‰ì_ôem
(
˛õ¡
);

414  
MOSQ_ERR_NOMEM
;

418 
rc
 = 
	`dyn£c_rﬁñi°__lﬂd_‰om_js⁄
(
comm™d
, &
˛õ¡
->
rﬁñi°
);

419 if(
rc
 =
MOSQ_ERR_SUCCESS
 ||Ñ¯=
ERR_LIST_NOT_FOUND
){

420 }if(
rc
 =
MOSQ_ERR_NOT_FOUND
){

421 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "RﬁênŸ found", 
c‹ªœti⁄_d©a
);

422 
	`˛õ¡__‰ì_ôem
(
˛õ¡
);

423  
MOSQ_ERR_INVAL
;

425 if(
rc
 =
MOSQ_ERR_INVAL
){

426 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "'rﬁes'ÇŸá¿¨øy o∏missög/övÆidÑﬁíame", 
c‹ªœti⁄_d©a
);

428 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

430 
	`˛õ¡__‰ì_ôem
(
˛õ¡
);

431  
MOSQ_ERR_INVAL
;

435 
	`HASH_ADD_KEYPTR_INORDER
(
hh
, 
loˇl_˛õ¡s
, 
˛õ¡
->
u£∫ame
, 
	`°æí
(˛õ¡->u£∫ame), clõ¡, 
˛õ¡_cmp
);

437 
j_groups
 = 
	`cJSON_GëObje˘Iãm
(
comm™d
, "groups");

438 if(
j_groups
 && 
	`cJSON_IsAºay
(j_groups)){

439 
	`cJSON_AºayF‹Each
(
j_group
, 
j_groups
){

440 if(
	`cJSON_IsObje˘
(
j_group
)){

441 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_group
, "groupname");

442 if(
jtmp
 && 
	`cJSON_IsSåög
(jtmp)){

443 
	`js⁄_gë_öt
(
j_group
, "¥i‹ôy", &
¥i‹ôy
, 
åue
, -1);

444 
rc
 = 
	`dyn£c_groups__add_˛õ¡
(
u£∫ame
, 
jtmp
->
vÆue°rög
, 
¥i‹ôy
, 
Ál£
);

445 if(
rc
 =
ERR_GROUP_NOT_FOUND
){

446 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "Grou∞nŸ found", 
c‹ªœti⁄_d©a
);

447 
	`˛õ¡__‰ì_ôem
(
˛õ¡
);

448  
MOSQ_ERR_INVAL
;

449 }if(
rc
 !
MOSQ_ERR_SUCCESS
){

450 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

451 
	`˛õ¡__‰ì_ôem
(
˛õ¡
);

452  
MOSQ_ERR_INVAL
;

459 
	`dyn£c__c⁄fig_ßve
();

461 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãClõ¡", 
NULL
, 
c‹ªœti⁄_d©a
);

463 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

464 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

465 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | createClient | username=%s |Öassword=%s",

466 
admö_˛õ¡id
, 
admö_u£∫ame
, 
u£∫ame
, 
∑ssw‹d
?"*****":"noÖassword");

468  
MOSQ_ERR_SUCCESS
;

469 
	}
}

472 
	$dyn£c_˛õ¡s__¥o˚ss_dñëe
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

474 *
u£∫ame
;

475 
dyn£c__˛õ¡
 *
˛õ¡
;

476 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

478 if(
	`js⁄_gë_°rög
(
comm™d
, "u£∫ame", &
u£∫ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

479 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "dñëeClõ¡", "InvÆid/missög u£∫ame", 
c‹ªœti⁄_d©a
);

480  
MOSQ_ERR_INVAL
;

483 
˛õ¡
 = 
	`dyn£c_˛õ¡s__föd
(
u£∫ame
);

484 if(
˛õ¡
){

485 
	`dyn£c__ªmove_˛õ¡_‰om_Æl_groups
(
u£∫ame
);

486 
	`˛õ¡__ªmove_Æl_rﬁes
(
˛õ¡
);

487 
	`˛õ¡__‰ì_ôem
(
˛õ¡
);

488 
	`dyn£c__c⁄fig_ßve
();

489 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "dñëeClõ¡", 
NULL
, 
c‹ªœti⁄_d©a
);

492 
	`mosquôto_kick_˛õ¡_by_u£∫ame
(
u£∫ame
, 
Ál£
);

494 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

495 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

496 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | deleteClient | username=%s",

497 
admö_˛õ¡id
, 
admö_u£∫ame
, 
u£∫ame
);

499  
MOSQ_ERR_SUCCESS
;

501 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "dñëeClõ¡", "Clõ¡ÇŸ found", 
c‹ªœti⁄_d©a
);

502  
MOSQ_ERR_SUCCESS
;

504 
	}
}

506 
	$dyn£c_˛õ¡s__¥o˚ss_dißbÀ
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

508 *
u£∫ame
;

509 
dyn£c__˛õ¡
 *
˛õ¡
;

510 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

512 if(
	`js⁄_gë_°rög
(
comm™d
, "u£∫ame", &
u£∫ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

513 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "dißbÀClõ¡", "InvÆid/missög u£∫ame", 
c‹ªœti⁄_d©a
);

514  
MOSQ_ERR_INVAL
;

516 if(
	`mosquôto_vÆid©e_utf8
(
u£∫ame
, ()
	`°æí
(u£∫ame)Ë!
MOSQ_ERR_SUCCESS
){

517 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "dißbÀClõ¡", "U£∫amênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

518  
MOSQ_ERR_INVAL
;

521 
˛õ¡
 = 
	`dyn£c_˛õ¡s__föd
(
u£∫ame
);

522 if(
˛õ¡
 =
NULL
){

523 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "dißbÀClõ¡", "Clõ¡ÇŸ found", 
c‹ªœti⁄_d©a
);

524  
MOSQ_ERR_SUCCESS
;

527 
˛õ¡
->
dißbÀd
 = 
åue
;

529 
	`mosquôto_kick_˛õ¡_by_u£∫ame
(
u£∫ame
, 
Ál£
);

531 
	`dyn£c__c⁄fig_ßve
();

532 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "dißbÀClõ¡", 
NULL
, 
c‹ªœti⁄_d©a
);

534 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

535 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

536 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | disableClient | username=%s",

537 
admö_˛õ¡id
, 
admö_u£∫ame
, 
u£∫ame
);

539  
MOSQ_ERR_SUCCESS
;

540 
	}
}

543 
	$dyn£c_˛õ¡s__¥o˚ss_íabÀ
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

545 *
u£∫ame
;

546 
dyn£c__˛õ¡
 *
˛õ¡
;

547 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

549 if(
	`js⁄_gë_°rög
(
comm™d
, "u£∫ame", &
u£∫ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

550 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "íabÀClõ¡", "InvÆid/missög u£∫ame", 
c‹ªœti⁄_d©a
);

551  
MOSQ_ERR_INVAL
;

553 if(
	`mosquôto_vÆid©e_utf8
(
u£∫ame
, ()
	`°æí
(u£∫ame)Ë!
MOSQ_ERR_SUCCESS
){

554 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "íabÀClõ¡", "U£∫amênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

555  
MOSQ_ERR_INVAL
;

558 
˛õ¡
 = 
	`dyn£c_˛õ¡s__föd
(
u£∫ame
);

559 if(
˛õ¡
 =
NULL
){

560 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "íabÀClõ¡", "Clõ¡ÇŸ found", 
c‹ªœti⁄_d©a
);

561  
MOSQ_ERR_SUCCESS
;

564 
˛õ¡
->
dißbÀd
 = 
Ál£
;

566 
	`dyn£c__c⁄fig_ßve
();

567 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "íabÀClõ¡", 
NULL
, 
c‹ªœti⁄_d©a
);

569 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

570 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

571 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s |ÉnableClient | username=%s",

572 
admö_˛õ¡id
, 
admö_u£∫ame
, 
u£∫ame
);

574  
MOSQ_ERR_SUCCESS
;

575 
	}
}

578 
	$dyn£c_˛õ¡s__¥o˚ss_£t_id
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

580 *
u£∫ame
, *
˛õ¡id
, *
˛õ¡id_hóp
 = 
NULL
;

581 
dyn£c__˛õ¡
 *
˛õ¡
;

582 
size_t
 
¶í
;

583 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

585 if(
	`js⁄_gë_°rög
(
comm™d
, "u£∫ame", &
u£∫ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

586 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tClõ¡Id", "InvÆid/missög u£∫ame", 
c‹ªœti⁄_d©a
);

587  
MOSQ_ERR_INVAL
;

589 if(
	`mosquôto_vÆid©e_utf8
(
u£∫ame
, ()
	`°æí
(u£∫ame)Ë!
MOSQ_ERR_SUCCESS
){

590 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tClõ¡Id", "U£∫amênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

591  
MOSQ_ERR_INVAL
;

594 if(
	`js⁄_gë_°rög
(
comm™d
, "˛õ¡id", &
˛õ¡id
, 
åue
Ë!
MOSQ_ERR_SUCCESS
){

595 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tClõ¡Id", "InvÆid/missög clõ¡ ID", 
c‹ªœti⁄_d©a
);

596  
MOSQ_ERR_INVAL
;

598 if(
˛õ¡id
){

599 
¶í
 = 
	`°æí
(
˛õ¡id
);

600 if(
	`mosquôto_vÆid©e_utf8
(
˛õ¡id
, ()
¶í
Ë!
MOSQ_ERR_SUCCESS
){

601 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tClõ¡Id", "Clõ¡ IDÇŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

602  
MOSQ_ERR_INVAL
;

604 if(
¶í
 > 0){

605 
˛õ¡id_hóp
 = 
	`mosquôto_°rdup
(
˛õ¡id
);

606 if(
˛õ¡id_hóp
 =
NULL
){

607 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tClõ¡Id", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

608  
MOSQ_ERR_NOMEM
;

611 
˛õ¡id_hóp
 = 
NULL
;

615 
˛õ¡
 = 
	`dyn£c_˛õ¡s__föd
(
u£∫ame
);

616 if(
˛õ¡
 =
NULL
){

617 
	`mosquôto_‰ì
(
˛õ¡id_hóp
);

618 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tClõ¡Id", "Clõ¡ÇŸ found", 
c‹ªœti⁄_d©a
);

619  
MOSQ_ERR_SUCCESS
;

622 
	`mosquôto_‰ì
(
˛õ¡
->
˛õ¡id
);

623 
˛õ¡
->
˛õ¡id
 = 
˛õ¡id_hóp
;

625 
	`dyn£c__c⁄fig_ßve
();

626 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tClõ¡Id", 
NULL
, 
c‹ªœti⁄_d©a
);

629 
	`mosquôto_kick_˛õ¡_by_u£∫ame
(
u£∫ame
, 
Ál£
);

631 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

632 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

633 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | setClientId | username=%s | clientid=%s",

634 
admö_˛õ¡id
, 
admö_u£∫ame
, 
u£∫ame
, 
˛õ¡
->
˛õ¡id
);

636  
MOSQ_ERR_SUCCESS
;

637 
	}
}

640 
	$˛õ¡__£t_∑ssw‹d
(
dyn£c__˛õ¡
 *
˛õ¡
, c⁄° *
∑ssw‹d
)

642 if(
	`dyn£c_auth__pw_hash
(
˛õ¡
, 
∑ssw‹d
, clõ¡->
pw
.
∑ssw‹d_hash
, (˛õ¡->pw.∑ssw‹d_hash), 
åue
Ë=
MOSQ_ERR_SUCCESS
){

643 
˛õ¡
->
pw
.
vÆid
 = 
åue
;

645  
MOSQ_ERR_SUCCESS
;

647 
˛õ¡
->
pw
.
vÆid
 = 
Ál£
;

649  
MOSQ_ERR_NOMEM
;

651 
	}
}

653 
	$dyn£c_˛õ¡s__¥o˚ss_£t_∑ssw‹d
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

655 *
u£∫ame
, *
∑ssw‹d
;

656 
dyn£c__˛õ¡
 *
˛õ¡
;

657 
rc
;

658 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

660 if(
	`js⁄_gë_°rög
(
comm™d
, "u£∫ame", &
u£∫ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

661 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tClõ¡Passw‹d", "InvÆid/missög u£∫ame", 
c‹ªœti⁄_d©a
);

662  
MOSQ_ERR_INVAL
;

664 if(
	`mosquôto_vÆid©e_utf8
(
u£∫ame
, ()
	`°æí
(u£∫ame)Ë!
MOSQ_ERR_SUCCESS
){

665 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tClõ¡Passw‹d", "U£∫amênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

666  
MOSQ_ERR_INVAL
;

669 if(
	`js⁄_gë_°rög
(
comm™d
, "∑ssw‹d", &
∑ssw‹d
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

670 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tClõ¡Passw‹d", "InvÆid/missögÖassw‹d", 
c‹ªœti⁄_d©a
);

671  
MOSQ_ERR_INVAL
;

673 if(
	`°æí
(
∑ssw‹d
) == 0){

674 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tClõ¡Passw‹d", "Em±yÖassw‹d i†nŸáŒowed", 
c‹ªœti⁄_d©a
);

675  
MOSQ_ERR_INVAL
;

678 
˛õ¡
 = 
	`dyn£c_˛õ¡s__föd
(
u£∫ame
);

679 if(
˛õ¡
 =
NULL
){

680 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tClõ¡Passw‹d", "Clõ¡ÇŸ found", 
c‹ªœti⁄_d©a
);

681  
MOSQ_ERR_SUCCESS
;

683 
rc
 = 
	`˛õ¡__£t_∑ssw‹d
(
˛õ¡
, 
∑ssw‹d
);

684 if(
rc
 =
MOSQ_ERR_SUCCESS
){

685 
	`dyn£c__c⁄fig_ßve
();

686 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tClõ¡Passw‹d", 
NULL
, 
c‹ªœti⁄_d©a
);

689 
	`mosquôto_kick_˛õ¡_by_u£∫ame
(
u£∫ame
, 
Ál£
);

691 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

692 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

693 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | setClientPassword | username=%s |Öassword=******",

694 
admö_˛õ¡id
, 
admö_u£∫ame
, 
u£∫ame
);

696 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tClõ¡Passw‹d", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

698  
rc
;

699 
	}
}

702 
	$˛õ¡__add_√w_rﬁes
(
dyn£c__˛õ¡
 *
˛õ¡
, 
dyn£c__rﬁñi°
 *
ba£_rﬁñi°
)

704 
dyn£c__rﬁñi°
 *
rﬁñi°
, *
rﬁñi°_tmp
;

706 
	`HASH_ITER
(
hh
, 
ba£_rﬁñi°
, 
rﬁñi°
, 
rﬁñi°_tmp
){

707 
	`dyn£c_rﬁñi°__˛õ¡_add
(
˛õ¡
, 
rﬁñi°
->
rﬁe
,Ñﬁñi°->
¥i‹ôy
);

709 
	}
}

711 
	$˛õ¡__ªmove_Æl_rﬁes
(
dyn£c__˛õ¡
 *
˛õ¡
)

713 
dyn£c__rﬁñi°
 *
rﬁñi°
, *
rﬁñi°_tmp
;

715 
	`HASH_ITER
(
hh
, 
˛õ¡
->
rﬁñi°
,Ñﬁñi°, 
rﬁñi°_tmp
){

716 
	`dyn£c_rﬁñi°__˛õ¡_ªmove
(
˛õ¡
, 
rﬁñi°
->
rﬁe
);

718 
	}
}

720 
	$dyn£c_˛õ¡s__¥o˚ss_modify
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

722 *
u£∫ame
;

723 *
˛õ¡id
 = 
NULL
;

724 *
∑ssw‹d
 = 
NULL
;

725 *
ãxt_«me
 = 
NULL
, *
ãxt_des¸ùti⁄
 = NULL;

726 
boﬁ
 
have_˛õ¡id
 = 
Ál£
, 
have_ãxt_«me
 = fÆ£, 
have_ãxt_des¸ùti⁄
 = fÆ£, 
have_rﬁñi°
 = fÆ£, 
have_∑ssw‹d
 = false;

727 
dyn£c__˛õ¡
 *
˛õ¡
;

728 
dyn£c__group
 *
group
;

729 
dyn£c__rﬁñi°
 *
rﬁñi°
 = 
NULL
;

730 *
°r
;

731 
rc
;

732 
¥i‹ôy
;

733 
cJSON
 *
j_group
, *
j_groups
, *
jtmp
;

734 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

736 if(
	`js⁄_gë_°rög
(
comm™d
, "u£∫ame", &
u£∫ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

737 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyClõ¡", "InvÆid/missög u£∫ame", 
c‹ªœti⁄_d©a
);

738  
MOSQ_ERR_INVAL
;

740 if(
	`mosquôto_vÆid©e_utf8
(
u£∫ame
, ()
	`°æí
(u£∫ame)Ë!
MOSQ_ERR_SUCCESS
){

741 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyClõ¡", "U£∫amênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

742  
MOSQ_ERR_INVAL
;

745 
˛õ¡
 = 
	`dyn£c_˛õ¡s__föd
(
u£∫ame
);

746 if(
˛õ¡
 =
NULL
){

747 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyClõ¡", "Clõ¡ÇŸ found", 
c‹ªœti⁄_d©a
);

748  
MOSQ_ERR_INVAL
;

751 if(
	`js⁄_gë_°rög
(
comm™d
, "˛õ¡id", &
°r
, 
Ál£
Ë=
MOSQ_ERR_SUCCESS
){

752 
have_˛õ¡id
 = 
åue
;

753 if(
°r
 && 
	`°æí
(str) > 0){

754 
˛õ¡id
 = 
	`mosquôto_°rdup
(
°r
);

755 if(
˛õ¡id
 =
NULL
){

756 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

757 
rc
 = 
MOSQ_ERR_NOMEM
;

758 
îr‹
;

761 
˛õ¡id
 = 
NULL
;

765 if(
	`js⁄_gë_°rög
(
comm™d
, "∑ssw‹d", &
∑ssw‹d
, 
Ál£
Ë=
MOSQ_ERR_SUCCESS
){

766 if(
	`°æí
(
∑ssw‹d
) > 0){

767 
have_∑ssw‹d
 = 
åue
;

771 if(
	`js⁄_gë_°rög
(
comm™d
, "ãxäame", &
°r
, 
Ál£
Ë=
MOSQ_ERR_SUCCESS
){

772 
have_ãxt_«me
 = 
åue
;

773 
ãxt_«me
 = 
	`mosquôto_°rdup
(
°r
);

774 if(
ãxt_«me
 =
NULL
){

775 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

776 
rc
 = 
MOSQ_ERR_NOMEM
;

777 
îr‹
;

781 if(
	`js⁄_gë_°rög
(
comm™d
, "ãxtdes¸ùti⁄", &
°r
, 
Ál£
Ë=
MOSQ_ERR_SUCCESS
){

782 
have_ãxt_des¸ùti⁄
 = 
åue
;

783 
ãxt_des¸ùti⁄
 = 
	`mosquôto_°rdup
(
°r
);

784 if(
ãxt_des¸ùti⁄
 =
NULL
){

785 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

786 
rc
 = 
MOSQ_ERR_NOMEM
;

787 
îr‹
;

791 
rc
 = 
	`dyn£c_rﬁñi°__lﬂd_‰om_js⁄
(
comm™d
, &
rﬁñi°
);

792 if(
rc
 =
MOSQ_ERR_SUCCESS
){

793 
have_rﬁñi°
 = 
åue
;

794 }if(
rc
 =
ERR_LIST_NOT_FOUND
){

796 }if(
rc
 =
MOSQ_ERR_NOT_FOUND
){

797 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyClõ¡", "RﬁênŸ found", 
c‹ªœti⁄_d©a
);

798 
rc
 = 
MOSQ_ERR_INVAL
;

799 
îr‹
;

801 if(
rc
 =
MOSQ_ERR_INVAL
){

802 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyClõ¡", "'rﬁes'ÇŸá¿¨øy o∏missög/övÆidÑﬁíame", 
c‹ªœti⁄_d©a
);

804 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

806 
rc
 = 
MOSQ_ERR_INVAL
;

807 
îr‹
;

810 
j_groups
 = 
	`cJSON_GëObje˘Iãm
(
comm™d
, "groups");

811 if(
j_groups
 && 
	`cJSON_IsAºay
(j_groups)){

813 
	`cJSON_AºayF‹Each
(
j_group
, 
j_groups
){

814 if(
	`cJSON_IsObje˘
(
j_group
)){

815 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_group
, "groupname");

816 if(
jtmp
 && 
	`cJSON_IsSåög
(jtmp)){

817 
group
 = 
	`dyn£c_groups__föd
(
jtmp
->
vÆue°rög
);

818 if(
group
 =
NULL
){

819 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyClõ¡", "'groups' c⁄èö†™ obje˘ wôhá 'grou≤ame'Åh© d€†nŸÉxi°", 
c‹ªœti⁄_d©a
);

820 
rc
 = 
MOSQ_ERR_INVAL
;

821 
îr‹
;

824 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyClõ¡", "'groups' c⁄èö†™ obje˘ wôhá¿övÆid 'grou≤ame'", 
c‹ªœti⁄_d©a
);

825 
rc
 = 
MOSQ_ERR_INVAL
;

826 
îr‹
;

831 
	`dyn£c__ªmove_˛õ¡_‰om_Æl_groups
(
u£∫ame
);

832 
	`cJSON_AºayF‹Each
(
j_group
, 
j_groups
){

833 if(
	`cJSON_IsObje˘
(
j_group
)){

834 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_group
, "groupname");

835 if(
jtmp
 && 
	`cJSON_IsSåög
(jtmp)){

836 
	`js⁄_gë_öt
(
j_group
, "¥i‹ôy", &
¥i‹ôy
, 
åue
, -1);

837 
	`dyn£c_groups__add_˛õ¡
(
u£∫ame
, 
jtmp
->
vÆue°rög
, 
¥i‹ôy
, 
Ál£
);

843 if(
have_∑ssw‹d
){

845 
rc
 = 
	`˛õ¡__£t_∑ssw‹d
(
˛õ¡
, 
∑ssw‹d
);

846 if(
rc
 !
MOSQ_ERR_SUCCESS
){

847 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

848 
	`mosquôto_kick_˛õ¡_by_u£∫ame
(
u£∫ame
, 
Ál£
);

854 
	`dyn£c__c⁄fig_ßve
();

855 
rc
 = 
MOSQ_ERR_NOMEM
;

856 
îr‹
;

860 if(
have_˛õ¡id
){

861 
	`mosquôto_‰ì
(
˛õ¡
->
˛õ¡id
);

862 
˛õ¡
->
˛õ¡id
 = clientid;

865 if(
have_ãxt_«me
){

866 
	`mosquôto_‰ì
(
˛õ¡
->
ãxt_«me
);

867 
˛õ¡
->
ãxt_«me
 =Åext_name;

870 if(
have_ãxt_des¸ùti⁄
){

871 
	`mosquôto_‰ì
(
˛õ¡
->
ãxt_des¸ùti⁄
);

872 
˛õ¡
->
ãxt_des¸ùti⁄
 =Åext_description;

875 if(
have_rﬁñi°
){

876 
	`˛õ¡__ªmove_Æl_rﬁes
(
˛õ¡
);

877 
	`˛õ¡__add_√w_rﬁes
(
˛õ¡
, 
rﬁñi°
);

878 
	`dyn£c_rﬁñi°__˛ónup
(&
rﬁñi°
);

881 
	`dyn£c__c⁄fig_ßve
();

882 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyClõ¡", 
NULL
, 
c‹ªœti⁄_d©a
);

885 
	`mosquôto_kick_˛õ¡_by_u£∫ame
(
u£∫ame
, 
Ál£
);

887 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

888 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

889 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | modifyClient | username=%s",

890 
admö_˛õ¡id
, 
admö_u£∫ame
, 
u£∫ame
);

891  
MOSQ_ERR_SUCCESS
;

892 
îr‹
:

893 
	`mosquôto_‰ì
(
˛õ¡id
);

894 
	`mosquôto_‰ì
(
ãxt_«me
);

895 
	`mosquôto_‰ì
(
ãxt_des¸ùti⁄
);

896 
	`dyn£c_rﬁñi°__˛ónup
(&
rﬁñi°
);

897  
rc
;

898 
	}
}

901 
	$dyn£c__ªmove_˛õ¡_‰om_Æl_groups
(c⁄° *
u£∫ame
)

903 
dyn£c__grou∂i°
 *
grou∂i°
, *
grou∂i°_tmp
;

904 
dyn£c__˛õ¡
 *
˛õ¡
;

906 
˛õ¡
 = 
	`dyn£c_˛õ¡s__föd
(
u£∫ame
);

907 if(
˛õ¡
){

908 
	`HASH_ITER
(
hh
, 
˛õ¡
->
grou∂i°
, grou∂i°, 
grou∂i°_tmp
){

909 
	`dyn£c_groups__ªmove_˛õ¡
(
u£∫ame
, 
grou∂i°
->
group
->
grou≤ame
, 
Ál£
);

913  
MOSQ_ERR_SUCCESS
;

914 
	}
}

917 
cJSON
 *
	$add_˛õ¡_to_js⁄
(
dyn£c__˛õ¡
 *
˛õ¡
, 
boﬁ
 
vîbo£
)

919 
cJSON
 *
j_˛õ¡
 = 
NULL
, *
j_groups
, *
j_rﬁes
;

921 if(
vîbo£
){

922 
j_˛õ¡
 = 
	`cJSON_Cª©eObje˘
();

923 if(
j_˛õ¡
 =
NULL
){

924  
NULL
;

927 if(
	`cJSON_AddSåögToObje˘
(
j_˛õ¡
, "u£∫ame", 
˛õ¡
->
u£∫ame
Ë=
NULL


928 || (
˛õ¡
->
˛õ¡id
 && 
	`cJSON_AddSåögToObje˘
(
j_˛õ¡
, "˛õ¡id", clõ¡->˛õ¡idË=
NULL
)

929 || (
˛õ¡
->
ãxt_«me
 && 
	`cJSON_AddSåögToObje˘
(
j_˛õ¡
, "ãxäame", clõ¡->ãxt_«meË=
NULL
)

930 || (
˛õ¡
->
ãxt_des¸ùti⁄
 && 
	`cJSON_AddSåögToObje˘
(
j_˛õ¡
, "ãxtdes¸ùti⁄", clõ¡->ãxt_des¸ùti⁄Ë=
NULL
)

931 || (
˛õ¡
->
dißbÀd
 && 
	`cJSON_AddBoﬁToObje˘
(
j_˛õ¡
, "dißbÀd", clõ¡->dißbÀdË=
NULL
)

934 
	`cJSON_Dñëe
(
j_˛õ¡
);

935  
NULL
;

938 
j_rﬁes
 = 
	`dyn£c_rﬁñi°__Æl_to_js⁄
(
˛õ¡
->
rﬁñi°
);

939 if(
j_rﬁes
 =
NULL
){

940 
	`cJSON_Dñëe
(
j_˛õ¡
);

941  
NULL
;

943 
	`cJSON_AddIãmToObje˘
(
j_˛õ¡
, "rﬁes", 
j_rﬁes
);

945 
j_groups
 = 
	`dyn£c_grou∂i°__Æl_to_js⁄
(
˛õ¡
->
grou∂i°
);

946 if(
j_groups
 =
NULL
){

947 
	`cJSON_Dñëe
(
j_˛õ¡
);

948  
NULL
;

950 
	`cJSON_AddIãmToObje˘
(
j_˛õ¡
, "groups", 
j_groups
);

952 
j_˛õ¡
 = 
	`cJSON_Cª©eSåög
(
˛õ¡
->
u£∫ame
);

953 if(
j_˛õ¡
 =
NULL
){

954  
NULL
;

957  
j_˛õ¡
;

958 
	}
}

961 
	$dyn£c_˛õ¡s__¥o˚ss_gë
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

963 *
u£∫ame
;

964 
dyn£c__˛õ¡
 *
˛õ¡
;

965 
cJSON
 *
åì
, *
j_˛õ¡
, *
j_d©a
;

966 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

968 if(
	`js⁄_gë_°rög
(
comm™d
, "u£∫ame", &
u£∫ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

969 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëClõ¡", "InvÆid/missög u£∫ame", 
c‹ªœti⁄_d©a
);

970  
MOSQ_ERR_INVAL
;

972 if(
	`mosquôto_vÆid©e_utf8
(
u£∫ame
, ()
	`°æí
(u£∫ame)Ë!
MOSQ_ERR_SUCCESS
){

973 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëClõ¡", "U£∫amênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

974  
MOSQ_ERR_INVAL
;

977 
˛õ¡
 = 
	`dyn£c_˛õ¡s__föd
(
u£∫ame
);

978 if(
˛õ¡
 =
NULL
){

979 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëClõ¡", "Clõ¡ÇŸ found", 
c‹ªœti⁄_d©a
);

980  
MOSQ_ERR_SUCCESS
;

983 
åì
 = 
	`cJSON_Cª©eObje˘
();

984 if(
åì
 =
NULL
){

985 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

986  
MOSQ_ERR_NOMEM
;

989 if(
	`cJSON_AddSåögToObje˘
(
åì
, "comm™d", "gëClõ¡"Ë=
NULL


990 || (
j_d©a
 = 
	`cJSON_AddObje˘ToObje˘
(
åì
, "d©a")Ë=
NULL


991 || (
c‹ªœti⁄_d©a
 && 
	`cJSON_AddSåögToObje˘
(
åì
, "c‹ªœti⁄D©a", c‹ªœti⁄_d©aË=
NULL
)

994 
	`cJSON_Dñëe
(
åì
);

995 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

996  
MOSQ_ERR_NOMEM
;

999 
j_˛õ¡
 = 
	`add_˛õ¡_to_js⁄
(
˛õ¡
, 
åue
);

1000 if(
j_˛õ¡
 =
NULL
){

1001 
	`cJSON_Dñëe
(
åì
);

1002 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

1003  
MOSQ_ERR_NOMEM
;

1005 
	`cJSON_AddIãmToObje˘
(
j_d©a
, "˛õ¡", 
j_˛õ¡
);

1006 
	`cJSON_AddIãmToAºay
(
j_ª•⁄£s
, 
åì
);

1008 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

1009 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

1010 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | getClient | username=%s",

1011 
admö_˛õ¡id
, 
admö_u£∫ame
, 
u£∫ame
);

1013  
MOSQ_ERR_SUCCESS
;

1014 
	}
}

1017 
	$dyn£c_˛õ¡s__¥o˚ss_li°
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

1019 
boﬁ
 
vîbo£
;

1020 
dyn£c__˛õ¡
 *
˛õ¡
, *
˛õ¡_tmp
;

1021 
cJSON
 *
åì
, *
j_˛õ¡s
, *
j_˛õ¡
, *
j_d©a
;

1022 
i
, 
cou¡
, 
off£t
;

1023 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

1025 
	`js⁄_gë_boﬁ
(
comm™d
, "vîbo£", &
vîbo£
, 
åue
, 
Ál£
);

1026 
	`js⁄_gë_öt
(
comm™d
, "cou¡", &
cou¡
, 
åue
, -1);

1027 
	`js⁄_gë_öt
(
comm™d
, "off£t", &
off£t
, 
åue
, 0);

1029 
åì
 = 
	`cJSON_Cª©eObje˘
();

1030 if(
åì
 =
NULL
){

1031 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "li°Clõ¡s", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

1032  
MOSQ_ERR_NOMEM
;

1035 if(
	`cJSON_AddSåögToObje˘
(
åì
, "comm™d", "li°Clõ¡s"Ë=
NULL


1036 || (
j_d©a
 = 
	`cJSON_AddObje˘ToObje˘
(
åì
, "d©a")Ë=
NULL


1037 || 
	`cJSON_AddI¡ToObje˘
(
j_d©a
, "tŸÆCou¡", ()
	`HASH_CNT
(
hh
, 
loˇl_˛õ¡s
)Ë=
NULL


1038 || (
j_˛õ¡s
 = 
	`cJSON_AddAºayToObje˘
(
j_d©a
, "˛õ¡s")Ë=
NULL


1039 || (
c‹ªœti⁄_d©a
 && 
	`cJSON_AddSåögToObje˘
(
åì
, "c‹ªœti⁄D©a", c‹ªœti⁄_d©aË=
NULL
)

1042 
	`cJSON_Dñëe
(
åì
);

1043 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "li°Clõ¡s", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

1044  
MOSQ_ERR_NOMEM
;

1047 
i
 = 0;

1048 
	`HASH_ITER
(
hh
, 
loˇl_˛õ¡s
, 
˛õ¡
, 
˛õ¡_tmp
){

1049 if(
i
>=
off£t
){

1050 
j_˛õ¡
 = 
	`add_˛õ¡_to_js⁄
(
˛õ¡
, 
vîbo£
);

1051 if(
j_˛õ¡
 =
NULL
){

1052 
	`cJSON_Dñëe
(
åì
);

1053 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "li°Clõ¡s", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

1054  
MOSQ_ERR_NOMEM
;

1056 
	`cJSON_AddIãmToAºay
(
j_˛õ¡s
, 
j_˛õ¡
);

1058 if(
cou¡
 >= 0){

1059 
cou¡
--;

1060 if(
cou¡
 <= 0){

1065 
i
++;

1067 
	`cJSON_AddIãmToAºay
(
j_ª•⁄£s
, 
åì
);

1069 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

1070 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

1071 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s |ÜistClients | verbose=%s | count=%d | offset=%d",

1072 
admö_˛õ¡id
, 
admö_u£∫ame
, 
vîbo£
?"åue":"Ál£", 
cou¡
, 
off£t
);

1074  
MOSQ_ERR_SUCCESS
;

1075 
	}
}

1078 
	$dyn£c_˛õ¡s__¥o˚ss_add_rﬁe
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

1080 *
u£∫ame
, *
rﬁíame
;

1081 
dyn£c__˛õ¡
 *
˛õ¡
;

1082 
dyn£c__rﬁe
 *
rﬁe
;

1083 
¥i‹ôy
;

1084 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

1086 if(
	`js⁄_gë_°rög
(
comm™d
, "u£∫ame", &
u£∫ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

1087 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addClõ¡Rﬁe", "InvÆid/missög u£∫ame", 
c‹ªœti⁄_d©a
);

1088  
MOSQ_ERR_INVAL
;

1090 if(
	`mosquôto_vÆid©e_utf8
(
u£∫ame
, ()
	`°æí
(u£∫ame)Ë!
MOSQ_ERR_SUCCESS
){

1091 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addClõ¡Rﬁe", "U£∫amênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

1092  
MOSQ_ERR_INVAL
;

1095 if(
	`js⁄_gë_°rög
(
comm™d
, "rﬁíame", &
rﬁíame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

1096 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addClõ¡Rﬁe", "InvÆid/missögÑﬁíame", 
c‹ªœti⁄_d©a
);

1097  
MOSQ_ERR_INVAL
;

1099 if(
	`mosquôto_vÆid©e_utf8
(
rﬁíame
, ()
	`°æí
‘ﬁíame)Ë!
MOSQ_ERR_SUCCESS
){

1100 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addClõ¡Rﬁe", "Rﬁê«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

1101  
MOSQ_ERR_INVAL
;

1103 
	`js⁄_gë_öt
(
comm™d
, "¥i‹ôy", &
¥i‹ôy
, 
åue
, -1);

1105 
˛õ¡
 = 
	`dyn£c_˛õ¡s__föd
(
u£∫ame
);

1106 if(
˛õ¡
 =
NULL
){

1107 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addClõ¡Rﬁe", "Clõ¡ÇŸ found", 
c‹ªœti⁄_d©a
);

1108  
MOSQ_ERR_SUCCESS
;

1111 
rﬁe
 = 
	`dyn£c_rﬁes__föd
(
rﬁíame
);

1112 if(
rﬁe
 =
NULL
){

1113 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addClõ¡Rﬁe", "RﬁênŸ found", 
c‹ªœti⁄_d©a
);

1114  
MOSQ_ERR_SUCCESS
;

1117 if(
	`dyn£c_rﬁñi°__˛õ¡_add
(
˛õ¡
, 
rﬁe
, 
¥i‹ôy
Ë!
MOSQ_ERR_SUCCESS
){

1118 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addClõ¡Rﬁe", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

1119  
MOSQ_ERR_UNKNOWN
;

1121 
	`dyn£c__c⁄fig_ßve
();

1122 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addClõ¡Rﬁe", 
NULL
, 
c‹ªœti⁄_d©a
);

1125 
	`mosquôto_kick_˛õ¡_by_u£∫ame
(
u£∫ame
, 
Ál£
);

1127 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

1128 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

1129 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s |áddClientRole | username=%s |Ñolename=%s |Öriority=%d",

1130 
admö_˛õ¡id
, 
admö_u£∫ame
, 
u£∫ame
, 
rﬁíame
, 
¥i‹ôy
);

1132  
MOSQ_ERR_SUCCESS
;

1133 
	}
}

1136 
	$dyn£c_˛õ¡s__¥o˚ss_ªmove_rﬁe
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

1138 *
u£∫ame
, *
rﬁíame
;

1139 
dyn£c__˛õ¡
 *
˛õ¡
;

1140 
dyn£c__rﬁe
 *
rﬁe
;

1141 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

1143 if(
	`js⁄_gë_°rög
(
comm™d
, "u£∫ame", &
u£∫ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

1144 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveClõ¡Rﬁe", "InvÆid/missög u£∫ame", 
c‹ªœti⁄_d©a
);

1145  
MOSQ_ERR_INVAL
;

1147 if(
	`mosquôto_vÆid©e_utf8
(
u£∫ame
, ()
	`°æí
(u£∫ame)Ë!
MOSQ_ERR_SUCCESS
){

1148 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveClõ¡Rﬁe", "U£∫amênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

1149  
MOSQ_ERR_INVAL
;

1152 if(
	`js⁄_gë_°rög
(
comm™d
, "rﬁíame", &
rﬁíame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

1153 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveClõ¡Rﬁe", "InvÆid/missögÑﬁíame", 
c‹ªœti⁄_d©a
);

1154  
MOSQ_ERR_INVAL
;

1156 if(
	`mosquôto_vÆid©e_utf8
(
rﬁíame
, ()
	`°æí
‘ﬁíame)Ë!
MOSQ_ERR_SUCCESS
){

1157 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveClõ¡Rﬁe", "Rﬁê«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

1158  
MOSQ_ERR_INVAL
;

1162 
˛õ¡
 = 
	`dyn£c_˛õ¡s__föd
(
u£∫ame
);

1163 if(
˛õ¡
 =
NULL
){

1164 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveClõ¡Rﬁe", "Clõ¡ÇŸ found", 
c‹ªœti⁄_d©a
);

1165  
MOSQ_ERR_SUCCESS
;

1168 
rﬁe
 = 
	`dyn£c_rﬁes__föd
(
rﬁíame
);

1169 if(
rﬁe
 =
NULL
){

1170 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveClõ¡Rﬁe", "RﬁênŸ found", 
c‹ªœti⁄_d©a
);

1171  
MOSQ_ERR_SUCCESS
;

1174 
	`dyn£c_rﬁñi°__˛õ¡_ªmove
(
˛õ¡
, 
rﬁe
);

1175 
	`dyn£c__c⁄fig_ßve
();

1176 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveClõ¡Rﬁe", 
NULL
, 
c‹ªœti⁄_d©a
);

1179 
	`mosquôto_kick_˛õ¡_by_u£∫ame
(
u£∫ame
, 
Ál£
);

1181 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

1182 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

1183 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s |ÑemoveClientRole | username=%s |Ñolename=%s",

1184 
admö_˛õ¡id
, 
admö_u£∫ame
, 
u£∫ame
, 
rﬁíame
);

1186  
MOSQ_ERR_SUCCESS
;

1187 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/dynamic_security.h

1 #i‚de‡
DYNAMIC_SECURITY_H


2 
	#DYNAMIC_SECURITY_H


	)

21 
	~<cjs⁄/cJSON.h
>

22 
	~<uthash.h
>

23 
	~"mosquôto.h
"

24 
	~"∑ssw‹d_mosq.h
"

32 
	#ACL_TYPE_PUB_C_RECV
 "publishClõ¡Re˚ive"

	)

33 
	#ACL_TYPE_PUB_C_SEND
 "publishClõ¡Síd"

	)

34 
	#ACL_TYPE_SUB_GENERIC
 "subs¸ibe"

	)

35 
	#ACL_TYPE_SUB_LITERAL
 "subs¸ibeLôîÆ"

	)

36 
	#ACL_TYPE_SUB_PATTERN
 "subs¸ibeP©ã∫"

	)

37 
	#ACL_TYPE_UNSUB_GENERIC
 "unsubs¸ibe"

	)

38 
	#ACL_TYPE_UNSUB_LITERAL
 "unsubs¸ibeLôîÆ"

	)

39 
	#ACL_TYPE_UNSUB_PATTERN
 "unsubs¸ibeP©ã∫"

	)

47 
	#ERR_USER_NOT_FOUND
 10000

	)

48 
	#ERR_GROUP_NOT_FOUND
 10001

	)

49 
	#ERR_LIST_NOT_FOUND
 10002

	)

57 
	sdyn£c__˛õ¡li°
{

58 
UT_hash_h™dÀ
 
	mhh
;

59 
dyn£c__˛õ¡
 *
	m˛õ¡
;

60 
	m¥i‹ôy
;

63 
	sdyn£c__grou∂i°
{

64 
UT_hash_h™dÀ
 
	mhh
;

65 
dyn£c__group
 *
	mgroup
;

66 
	m¥i‹ôy
;

69 
	sdyn£c__rﬁñi°
{

70 
UT_hash_h™dÀ
 
	mhh
;

71 *
	mrﬁíame
;

72 
dyn£c__rﬁe
 *
	mrﬁe
;

73 
	m¥i‹ôy
;

76 
	sdyn£c__˛õ¡
{

77 
UT_hash_h™dÀ
 
	mhh
;

78 
mosquôto_pw
 
	mpw
;

79 
dyn£c__rﬁñi°
 *
	mrﬁñi°
;

80 
dyn£c__grou∂i°
 *
	mgrou∂i°
;

81 *
	mu£∫ame
;

82 *
	m˛õ¡id
;

83 *
	mãxt_«me
;

84 *
	mãxt_des¸ùti⁄
;

85 
boﬁ
 
	mdißbÀd
;

88 
	sdyn£c__group
{

89 
UT_hash_h™dÀ
 
	mhh
;

90 
dyn£c__rﬁñi°
 *
	mrﬁñi°
;

91 
dyn£c__˛õ¡li°
 *
	m˛õ¡li°
;

92 *
	mgrou≤ame
;

93 *
	mãxt_«me
;

94 *
	mãxt_des¸ùti⁄
;

98 
	sdyn£c__a˛
{

99 
UT_hash_h™dÀ
 
	mhh
;

100 *
	mt›ic
;

101 
	m¥i‹ôy
;

102 
boﬁ
 
	mÆlow
;

105 
	sdyn£c__a˛s
{

106 
dyn£c__a˛
 *
	mpublish_c_£nd
;

107 
dyn£c__a˛
 *
	mpublish_c_ªcv
;

108 
dyn£c__a˛
 *
	msubs¸ibe_lôîÆ
;

109 
dyn£c__a˛
 *
	msubs¸ibe_∑âîn
;

110 
dyn£c__a˛
 *
	munsubs¸ibe_lôîÆ
;

111 
dyn£c__a˛
 *
	munsubs¸ibe_∑âîn
;

114 
	sdyn£c__rﬁe
{

115 
UT_hash_h™dÀ
 
	mhh
;

116 
dyn£c__a˛s
 
	ma˛s
;

117 
dyn£c__˛õ¡li°
 *
	m˛õ¡li°
;

118 
dyn£c__grou∂i°
 *
	mgrou∂i°
;

119 *
	mrﬁíame
;

120 *
	mãxt_«me
;

121 *
	mãxt_des¸ùti⁄
;

124 
	sdyn£c__a˛_deÁu…_ac˚ss
{

125 
boﬁ
 
	mpublish_c_£nd
;

126 
boﬁ
 
	mpublish_c_ªcv
;

127 
boﬁ
 
	msubs¸ibe
;

128 
boﬁ
 
	munsubs¸ibe
;

131 
dyn£c__group
 *
dyn£c_™⁄ymous_group
;

132 
dyn£c__a˛_deÁu…_ac˚ss
 
deÁu…_ac˚ss
;

140 
dyn£c__c⁄fig_ßve
();

141 
dyn£c__h™dÀ_c⁄åﬁ
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™ds
);

142 
dyn£c__comm™d_ª∂y
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, c⁄° *
comm™d
, c⁄° *
îr‹
, c⁄° *
c‹ªœti⁄_d©a
);

151 
dyn£c__a˛_check_ˇŒback
(
evít
, *
evít_d©a
, *
u£rd©a
);

152 
boﬁ
 
sub_a˛_check
(c⁄° *
a˛
, c⁄° *
sub
);

161 
dyn£c_auth__ba£64_ícode
(*
ö
, 
ö_Àn
, **
ícoded
);

162 
dyn£c_auth__ba£64_decode
(*
ö
, **
decoded
, *
decoded_Àn
);

163 
dyn£c_auth__pw_hash
(
dyn£c__˛õ¡
 *
˛õ¡
, c⁄° *
∑ssw‹d
, *
∑ssw‹d_hash
, 
∑ssw‹d_hash_Àn
, 
boﬁ
 
√w_∑ssw‹d
);

164 
dyn£c_auth__basic_auth_ˇŒback
(
evít
, *
evít_d©a
, *
u£rd©a
);

173 
dyn£c_˛õ¡s__˛ónup
();

174 
dyn£c_˛õ¡s__c⁄fig_lﬂd
(
cJSON
 *
åì
);

175 
dyn£c_˛õ¡s__c⁄fig_ßve
(
cJSON
 *
åì
);

176 
dyn£c_˛õ¡s__¥o˚ss_add_rﬁe
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

177 
dyn£c_˛õ¡s__¥o˚ss_¸óã
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

178 
dyn£c_˛õ¡s__¥o˚ss_dñëe
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

179 
dyn£c_˛õ¡s__¥o˚ss_dißbÀ
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

180 
dyn£c_˛õ¡s__¥o˚ss_íabÀ
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

181 
dyn£c_˛õ¡s__¥o˚ss_gë
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

182 
dyn£c_˛õ¡s__¥o˚ss_li°
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

183 
dyn£c_˛õ¡s__¥o˚ss_modify
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

184 
dyn£c_˛õ¡s__¥o˚ss_ªmove_rﬁe
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

185 
dyn£c_˛õ¡s__¥o˚ss_£t_id
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

186 
dyn£c_˛õ¡s__¥o˚ss_£t_∑ssw‹d
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

187 
dyn£c__˛õ¡
 *
dyn£c_˛õ¡s__föd
(c⁄° *
u£∫ame
);

196 
cJSON
 *
dyn£c_˛õ¡li°__Æl_to_js⁄
(
dyn£c__˛õ¡li°
 *
ba£_˛õ¡li°
);

197 
dyn£c_˛õ¡li°__add
(
dyn£c__˛õ¡li°
 **
ba£_˛õ¡li°
, 
dyn£c__˛õ¡
 *
˛õ¡
, 
¥i‹ôy
);

198 
dyn£c_˛õ¡li°__˛ónup
(
dyn£c__˛õ¡li°
 **
ba£_˛õ¡li°
);

199 
dyn£c_˛õ¡li°__ªmove
(
dyn£c__˛õ¡li°
 **
ba£_˛õ¡li°
, 
dyn£c__˛õ¡
 *
˛õ¡
);

200 
dyn£c_˛õ¡li°__kick_Æl
(
dyn£c__˛õ¡li°
 *
ba£_˛õ¡li°
);

209 
dyn£c_groups__˛ónup
();

210 
dyn£c_groups__c⁄fig_lﬂd
(
cJSON
 *
åì
);

211 
dyn£c_groups__add_˛õ¡
(c⁄° *
u£∫ame
, c⁄° *
grou≤ame
, 
¥i‹ôy
, 
boﬁ
 
upd©e_c⁄fig
);

212 
dyn£c_groups__c⁄fig_ßve
(
cJSON
 *
åì
);

213 
dyn£c_groups__¥o˚ss_add_˛õ¡
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

214 
dyn£c_groups__¥o˚ss_add_rﬁe
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

215 
dyn£c_groups__¥o˚ss_¸óã
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

216 
dyn£c_groups__¥o˚ss_dñëe
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

217 
dyn£c_groups__¥o˚ss_gë
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

218 
dyn£c_groups__¥o˚ss_li°
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

219 
dyn£c_groups__¥o˚ss_modify
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

220 
dyn£c_groups__¥o˚ss_ªmove_˛õ¡
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

221 
dyn£c_groups__¥o˚ss_ªmove_rﬁe
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

222 
dyn£c_groups__¥o˚ss_gë_™⁄ymous_group
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

223 
dyn£c_groups__¥o˚ss_£t_™⁄ymous_group
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

224 
dyn£c_groups__ªmove_˛õ¡
(c⁄° *
u£∫ame
, c⁄° *
grou≤ame
, 
boﬁ
 
upd©e_c⁄fig
);

225 
dyn£c__group
 *
dyn£c_groups__föd
(c⁄° *
grou≤ame
);

234 
cJSON
 *
dyn£c_grou∂i°__Æl_to_js⁄
(
dyn£c__grou∂i°
 *
ba£_grou∂i°
);

235 
dyn£c_grou∂i°__add
(
dyn£c__grou∂i°
 **
ba£_grou∂i°
, 
dyn£c__group
 *
group
, 
¥i‹ôy
);

236 
dyn£c_grou∂i°__˛ónup
(
dyn£c__grou∂i°
 **
ba£_grou∂i°
);

237 
dyn£c_grou∂i°__ªmove
(
dyn£c__grou∂i°
 **
ba£_grou∂i°
, 
dyn£c__group
 *
group
);

246 
dyn£c_rﬁes__˛ónup
();

247 
dyn£c_rﬁes__c⁄fig_lﬂd
(
cJSON
 *
åì
);

248 
dyn£c_rﬁes__c⁄fig_ßve
(
cJSON
 *
åì
);

249 
dyn£c_rﬁes__¥o˚ss_add_a˛
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

250 
dyn£c_rﬁes__¥o˚ss_¸óã
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

251 
dyn£c_rﬁes__¥o˚ss_dñëe
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

252 
dyn£c_rﬁes__¥o˚ss_gë
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

253 
dyn£c_rﬁes__¥o˚ss_li°
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

254 
dyn£c_rﬁes__¥o˚ss_modify
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

255 
dyn£c_rﬁes__¥o˚ss_ªmove_a˛
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
);

256 
dyn£c__rﬁe
 *
dyn£c_rﬁes__föd
(c⁄° *
rﬁíame
);

265 
dyn£c_rﬁñi°__˛õ¡_add
(
dyn£c__˛õ¡
 *
˛õ¡
, 
dyn£c__rﬁe
 *
rﬁe
, 
¥i‹ôy
);

266 
dyn£c_rﬁñi°__˛õ¡_ªmove
(
dyn£c__˛õ¡
 *
˛õ¡
, 
dyn£c__rﬁe
 *
rﬁe
);

267 
dyn£c_rﬁñi°__group_add
(
dyn£c__group
 *
group
, 
dyn£c__rﬁe
 *
rﬁe
, 
¥i‹ôy
);

268 
dyn£c_rﬁñi°__group_ªmove
(
dyn£c__group
 *
group
, 
dyn£c__rﬁe
 *
rﬁe
);

269 
dyn£c_rﬁñi°__lﬂd_‰om_js⁄
(
cJSON
 *
comm™d
, 
dyn£c__rﬁñi°
 **
rﬁñi°
);

270 
dyn£c_rﬁñi°__˛ónup
(
dyn£c__rﬁñi°
 **
ba£_rﬁñi°
);

271 
cJSON
 *
dyn£c_rﬁñi°__Æl_to_js⁄
(
dyn£c__rﬁñi°
 *
ba£_rﬁñi°
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/grouplist.c

19 
	~"c⁄fig.h
"

21 
	~<cjs⁄/cJSON.h
>

22 
	~<°dio.h
>

23 
	~<uthash.h
>

25 
	~"mosquôto.h
"

26 
	~"mosquôto_brokî.h
"

27 
	~"js⁄_hñp.h
"

29 
	~"dy«mic_£curôy.h
"

55 
	$dyn£c_grou∂i°__cmp
(*
a
, *
b
)

57 
¥io
;

58 
dyn£c__grou∂i°
 *
grou∂i°_a
 = 
a
;

59 
dyn£c__grou∂i°
 *
grou∂i°_b
 = 
b
;

61 
¥io
 = 
grou∂i°_b
->
¥i‹ôy
 - 
grou∂i°_a
->priority;

62 if(
¥io
 == 0){

63  
	`°rcmp
(
grou∂i°_a
->
group
->
grou≤ame
, 
grou∂i°_b
->group->groupname);

65  
¥io
;

67 
	}
}

69 
cJSON
 *
	$dyn£c_grou∂i°__Æl_to_js⁄
(
dyn£c__grou∂i°
 *
ba£_grou∂i°
)

71 
dyn£c__grou∂i°
 *
grou∂i°
, *
grou∂i°_tmp
;

72 
cJSON
 *
j_groups
, *
j_group
;

74 
j_groups
 = 
	`cJSON_Cª©eAºay
();

75 if(
j_groups
 =
NULL
)  NULL;

77 
	`HASH_ITER
(
hh
, 
ba£_grou∂i°
, 
grou∂i°
, 
grou∂i°_tmp
){

78 
j_group
 = 
	`cJSON_Cª©eObje˘
();

79 if(
j_group
 =
NULL
){

80 
	`cJSON_Dñëe
(
j_groups
);

81  
NULL
;

83 
	`cJSON_AddIãmToAºay
(
j_groups
, 
j_group
);

85 if(
	`cJSON_AddSåögToObje˘
(
j_group
, "grou≤ame", 
grou∂i°
->
group
->
grou≤ame
Ë=
NULL


86 || (
grou∂i°
->
¥i‹ôy
 !-1 && 
	`cJSON_AddI¡ToObje˘
(
j_group
, "¥i‹ôy", grou∂i°->¥i‹ôyË=
NULL
)

89 
	`cJSON_Dñëe
(
j_groups
);

90  
NULL
;

93  
j_groups
;

94 
	}
}

98 
	$dyn£c_grou∂i°__add
(
dyn£c__grou∂i°
 **
ba£_grou∂i°
, 
dyn£c__group
 *
group
, 
¥i‹ôy
)

100 
dyn£c__grou∂i°
 *
grou∂i°
;

102 
	`HASH_FIND
(
hh
, *
ba£_grou∂i°
, 
group
->
grou≤ame
, 
	`°æí
(group->grou≤ame), 
grou∂i°
);

103 if(
grou∂i°
 !
NULL
){

105  
MOSQ_ERR_SUCCESS
;

108 
grou∂i°
 = 
	`mosquôto_mÆloc
((
dyn£c__grou∂i°
));

109 if(
grou∂i°
 =
NULL
){

110  
MOSQ_ERR_NOMEM
;

113 
grou∂i°
->
group
 = group;

114 
grou∂i°
->
¥i‹ôy
 =Öriority;

115 
	`HASH_ADD_KEYPTR_INORDER
(
hh
, *
ba£_grou∂i°
, 
grou∂i°
->
group
->
grou≤ame
, 
	`°æí
(grou∂i°->group->grou≤ame), grou∂i°, 
dyn£c_grou∂i°__cmp
);

117  
MOSQ_ERR_SUCCESS
;

118 
	}
}

121 
	$dyn£c_grou∂i°__˛ónup
(
dyn£c__grou∂i°
 **
ba£_grou∂i°
)

123 
dyn£c__grou∂i°
 *
grou∂i°
, *
grou∂i°_tmp
;

125 
	`HASH_ITER
(
hh
, *
ba£_grou∂i°
, 
grou∂i°
, 
grou∂i°_tmp
){

126 
	`HASH_DELETE
(
hh
, *
ba£_grou∂i°
, 
grou∂i°
);

127 
	`mosquôto_‰ì
(
grou∂i°
);

129 
	}
}

132 
	$dyn£c_grou∂i°__ªmove
(
dyn£c__grou∂i°
 **
ba£_grou∂i°
, 
dyn£c__group
 *
group
)

134 
dyn£c__grou∂i°
 *
grou∂i°
;

136 
	`HASH_FIND
(
hh
, *
ba£_grou∂i°
, 
group
->
grou≤ame
, 
	`°æí
(group->grou≤ame), 
grou∂i°
);

137 if(
grou∂i°
){

138 
	`HASH_DELETE
(
hh
, *
ba£_grou∂i°
, 
grou∂i°
);

139 
	`mosquôto_‰ì
(
grou∂i°
);

141 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/groups.c

19 
	~"c⁄fig.h
"

21 
	~<cjs⁄/cJSON.h
>

22 
	~<°dio.h
>

23 
	~<uthash.h
>

25 
	~"mosquôto.h
"

26 
	~"mosquôto_brokî.h
"

27 
	~"js⁄_hñp.h
"

29 
	~"dy«mic_£curôy.h
"

37 
dyn£c__group
 *
	gdyn£c_™⁄ymous_group
 = 
NULL
;

46 
dyn£c__ªmove_Æl_˛õ¡s_‰om_group
(
dyn£c__group
 *
group
);

47 
dyn£c__ªmove_Æl_rﬁes_‰om_group
(
dyn£c__group
 *
group
);

48 
cJSON
 *
add_group_to_js⁄
(
dyn£c__group
 *
group
);

57 
dyn£c__group
 *
	gloˇl_groups
 = 
NULL
;

66 
	$group__kick_Æl
(
dyn£c__group
 *
group
)

68 if(
group
 =
dyn£c_™⁄ymous_group
){

69 
	`mosquôto_kick_˛õ¡_by_u£∫ame
(
NULL
, 
Ál£
);

71 
	`dyn£c_˛õ¡li°__kick_Æl
(
group
->
˛õ¡li°
);

72 
	}
}

75 
	$group_cmp
(*
a
, *
b
)

77 
dyn£c__group
 *
group_a
 = 
a
;

78 
dyn£c__group
 *
group_b
 = 
b
;

80  
	`°rcmp
(
group_a
->
grou≤ame
, 
group_b
->groupname);

81 
	}
}

84 
dyn£c__group
 *
	$dyn£c_groups__föd
(c⁄° *
grou≤ame
)

86 
dyn£c__group
 *
group
 = 
NULL
;

88 if(
grou≤ame
){

89 
	`HASH_FIND
(
hh
, 
loˇl_groups
, 
grou≤ame
, 
	`°æí
(grou≤ame), 
group
);

91  
group
;

92 
	}
}

94 
	$group__‰ì_ôem
(
dyn£c__group
 *
group
)

96 
dyn£c__group
 *
found_group
 = 
NULL
;

98 if(
group
 =
NULL
) ;

100 
found_group
 = 
	`dyn£c_groups__föd
(
group
->
grou≤ame
);

101 if(
found_group
){

102 
	`HASH_DEL
(
loˇl_groups
, 
found_group
);

104 
	`dyn£c__ªmove_Æl_˛õ¡s_‰om_group
(
group
);

105 
	`mosquôto_‰ì
(
group
->
ãxt_«me
);

106 
	`mosquôto_‰ì
(
group
->
ãxt_des¸ùti⁄
);

107 
	`mosquôto_‰ì
(
group
->
grou≤ame
);

108 
	`dyn£c_rﬁñi°__˛ónup
(&
group
->
rﬁñi°
);

109 
	`mosquôto_‰ì
(
group
);

110 
	}
}

112 
	$dyn£c_groups__¥o˚ss_add_rﬁe
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

114 *
grou≤ame
, *
rﬁíame
;

115 
dyn£c__group
 *
group
;

116 
dyn£c__rﬁe
 *
rﬁe
;

117 
¥i‹ôy
;

118 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

119 
rc
;

121 if(
	`js⁄_gë_°rög
(
comm™d
, "grou≤ame", &
grou≤ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

122 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupRﬁe", "InvÆid/missög grou≤ame", 
c‹ªœti⁄_d©a
);

123  
MOSQ_ERR_INVAL
;

125 if(
	`mosquôto_vÆid©e_utf8
(
grou≤ame
, ()
	`°æí
(grou≤ame)Ë!
MOSQ_ERR_SUCCESS
){

126 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupRﬁe", "Grou∞«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

127  
MOSQ_ERR_INVAL
;

130 if(
	`js⁄_gë_°rög
(
comm™d
, "rﬁíame", &
rﬁíame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

131 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupRﬁe", "InvÆid/missögÑﬁíame", 
c‹ªœti⁄_d©a
);

132  
MOSQ_ERR_INVAL
;

134 if(
	`mosquôto_vÆid©e_utf8
(
rﬁíame
, ()
	`°æí
‘ﬁíame)Ë!
MOSQ_ERR_SUCCESS
){

135 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupRﬁe", "Rﬁê«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

136  
MOSQ_ERR_INVAL
;

138 
	`js⁄_gë_öt
(
comm™d
, "¥i‹ôy", &
¥i‹ôy
, 
åue
, -1);

140 
group
 = 
	`dyn£c_groups__föd
(
grou≤ame
);

141 if(
group
 =
NULL
){

142 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupRﬁe", "Grou∞nŸ found", 
c‹ªœti⁄_d©a
);

143  
MOSQ_ERR_SUCCESS
;

146 
rﬁe
 = 
	`dyn£c_rﬁes__föd
(
rﬁíame
);

147 if(
rﬁe
 =
NULL
){

148 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupRﬁe", "RﬁênŸ found", 
c‹ªœti⁄_d©a
);

149  
MOSQ_ERR_SUCCESS
;

152 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

153 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

155 
rc
 = 
	`dyn£c_rﬁñi°__group_add
(
group
, 
rﬁe
, 
¥i‹ôy
);

156 if(
rc
 =
MOSQ_ERR_SUCCESS
){

158 }if(
rc
 =
MOSQ_ERR_ALREADY_EXISTS
){

159 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupRﬁe", "Grou∞i†Æªady i¿thi†rﬁe", 
c‹ªœti⁄_d©a
);

160  
MOSQ_ERR_ALREADY_EXISTS
;

162 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupRﬁe", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

163  
MOSQ_ERR_UNKNOWN
;

166 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s |áddGroupRole | groupname=%s |Ñolename=%s |Öriority=%d",

167 
admö_˛õ¡id
, 
admö_u£∫ame
, 
grou≤ame
, 
rﬁíame
, 
¥i‹ôy
);

169 
	`dyn£c__c⁄fig_ßve
();

170 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupRﬁe", 
NULL
, 
c‹ªœti⁄_d©a
);

173 
	`group__kick_Æl
(
group
);

175  
MOSQ_ERR_SUCCESS
;

176 
	}
}

179 
	$dyn£c_groups__˛ónup
()

181 
dyn£c__group
 *
group
, *
group_tmp
 = 
NULL
;

183 
	`HASH_ITER
(
hh
, 
loˇl_groups
, 
group
, 
group_tmp
){

184 
	`group__‰ì_ôem
(
group
);

186 
	}
}

195 
	$dyn£c_groups__c⁄fig_lﬂd
(
cJSON
 *
åì
)

197 
cJSON
 *
j_groups
, *
j_group
;

198 
cJSON
 *
j_˛õ¡li°
, *
j_˛õ¡
, *
j_u£∫ame
;

199 
cJSON
 *
j_rﬁes
, *
j_rﬁe
, *
j_rﬁíame
;

201 
dyn£c__group
 *
group
;

202 
dyn£c__rﬁe
 *
rﬁe
;

203 *
°r
;

204 
¥i‹ôy
;

206 
j_groups
 = 
	`cJSON_GëObje˘Iãm
(
åì
, "groups");

207 if(
j_groups
 =
NULL
){

211 if(
	`cJSON_IsAºay
(
j_groups
Ë=
Ál£
){

215 
	`cJSON_AºayF‹Each
(
j_group
, 
j_groups
){

216 if(
	`cJSON_IsObje˘
(
j_group
Ë=
åue
){

217 
group
 = 
	`mosquôto_ˇŒoc
(1, (
dyn£c__group
));

218 if(
group
 =
NULL
){

219  
MOSQ_ERR_NOMEM
;

223 if(
	`js⁄_gë_°rög
(
j_group
, "grou≤ame", &
°r
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

224 
	`mosquôto_‰ì
(
group
);

227 
group
->
grou≤ame
 = 
	`°rdup
(
°r
);

228 if(
group
->
grou≤ame
 =
NULL
){

229 
	`mosquôto_‰ì
(
group
);

234 if(
	`js⁄_gë_°rög
(
j_group
, "ãxäame", &
°r
, 
Ál£
Ë=
MOSQ_ERR_SUCCESS
){

235 if(
°r
){

236 
group
->
ãxt_«me
 = 
	`°rdup
(
°r
);

237 if(
group
->
ãxt_«me
 =
NULL
){

238 
	`mosquôto_‰ì
(
group
->
grou≤ame
);

239 
	`mosquôto_‰ì
(
group
);

246 if(
	`js⁄_gë_°rög
(
j_group
, "ãxtdes¸ùti⁄", &
°r
, 
Ál£
Ë=
MOSQ_ERR_SUCCESS
){

247 if(
°r
){

248 
group
->
ãxt_des¸ùti⁄
 = 
	`°rdup
(
°r
);

249 if(
group
->
ãxt_des¸ùti⁄
 =
NULL
){

250 
	`mosquôto_‰ì
(
group
->
ãxt_«me
);

251 
	`mosquôto_‰ì
(
group
->
grou≤ame
);

252 
	`mosquôto_‰ì
(
group
);

259 
j_rﬁes
 = 
	`cJSON_GëObje˘Iãm
(
j_group
, "roles");

260 if(
j_rﬁes
 && 
	`cJSON_IsAºay
(j_roles)){

261 
	`cJSON_AºayF‹Each
(
j_rﬁe
, 
j_rﬁes
){

262 if(
	`cJSON_IsObje˘
(
j_rﬁe
)){

263 
j_rﬁíame
 = 
	`cJSON_GëObje˘Iãm
(
j_rﬁe
, "rolename");

264 if(
j_rﬁíame
 && 
	`cJSON_IsSåög
(j_rolename)){

265 
	`js⁄_gë_öt
(
j_rﬁe
, "¥i‹ôy", &
¥i‹ôy
, 
åue
, -1);

266 
rﬁe
 = 
	`dyn£c_rﬁes__föd
(
j_rﬁíame
->
vÆue°rög
);

267 
	`dyn£c_rﬁñi°__group_add
(
group
, 
rﬁe
, 
¥i‹ôy
);

274 
	`HASH_ADD_KEYPTR
(
hh
, 
loˇl_groups
, 
group
->
grou≤ame
, 
	`°æí
(group->groupname), group);

277 
j_˛õ¡li°
 = 
	`cJSON_GëObje˘Iãm
(
j_group
, "clients");

278 if(
j_˛õ¡li°
 && 
	`cJSON_IsAºay
(j_clientlist)){

279 
	`cJSON_AºayF‹Each
(
j_˛õ¡
, 
j_˛õ¡li°
){

280 if(
	`cJSON_IsObje˘
(
j_˛õ¡
)){

281 
j_u£∫ame
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "username");

282 if(
j_u£∫ame
 && 
	`cJSON_IsSåög
(j_username)){

283 
	`js⁄_gë_öt
(
j_˛õ¡
, "¥i‹ôy", &
¥i‹ôy
, 
åue
, -1);

284 
	`dyn£c_groups__add_˛õ¡
(
j_u£∫ame
->
vÆue°rög
, 
group
->
grou≤ame
, 
¥i‹ôy
, 
Ál£
);

291 
	`HASH_SORT
(
loˇl_groups
, 
group_cmp
);

293 
j_group
 = 
	`cJSON_GëObje˘Iãm
(
åì
, "anonymousGroup");

294 if(
j_group
 && 
	`cJSON_IsSåög
(j_group)){

295 
dyn£c_™⁄ymous_group
 = 
	`dyn£c_groups__föd
(
j_group
->
vÆue°rög
);

299 
	}
}

309 
	$dyn£c__c⁄fig_add_groups
(
cJSON
 *
j_groups
)

311 
dyn£c__group
 *
group
, *
group_tmp
 = 
NULL
;

312 
cJSON
 *
j_group
, *
j_˛õ¡s
, *
j_rﬁes
;

314 
	`HASH_ITER
(
hh
, 
loˇl_groups
, 
group
, 
group_tmp
){

315 
j_group
 = 
	`cJSON_Cª©eObje˘
();

316 if(
j_group
 =
NULL
)  1;

317 
	`cJSON_AddIãmToAºay
(
j_groups
, 
j_group
);

319 if(
	`cJSON_AddSåögToObje˘
(
j_group
, "grou≤ame", 
group
->
grou≤ame
Ë=
NULL


320 || (
group
->
ãxt_«me
 && 
	`cJSON_AddSåögToObje˘
(
j_group
, "ãxäame", group->ãxt_«meË=
NULL
)

321 || (
group
->
ãxt_des¸ùti⁄
 && 
	`cJSON_AddSåögToObje˘
(
j_group
, "ãxtdes¸ùti⁄", group->ãxt_des¸ùti⁄Ë=
NULL
)

327 
j_rﬁes
 = 
	`dyn£c_rﬁñi°__Æl_to_js⁄
(
group
->
rﬁñi°
);

328 if(
j_rﬁes
 =
NULL
){

331 
	`cJSON_AddIãmToObje˘
(
j_group
, "rﬁes", 
j_rﬁes
);

333 
j_˛õ¡s
 = 
	`dyn£c_˛õ¡li°__Æl_to_js⁄
(
group
->
˛õ¡li°
);

334 if(
j_˛õ¡s
 =
NULL
){

337 
	`cJSON_AddIãmToObje˘
(
j_group
, "˛õ¡s", 
j_˛õ¡s
);

341 
	}
}

344 
	$dyn£c_groups__c⁄fig_ßve
(
cJSON
 *
åì
)

346 
cJSON
 *
j_groups
;

348 
j_groups
 = 
	`cJSON_Cª©eAºay
();

349 if(
j_groups
 =
NULL
){

352 
	`cJSON_AddIãmToObje˘
(
åì
, "groups", 
j_groups
);

353 if(
	`dyn£c__c⁄fig_add_groups
(
j_groups
)){

357 if(
dyn£c_™⁄ymous_group


358 && 
	`cJSON_AddSåögToObje˘
(
åì
, "™⁄ymousGroup", 
dyn£c_™⁄ymous_group
->
grou≤ame
Ë=
NULL
){

364 
	}
}

367 
	$dyn£c_groups__¥o˚ss_¸óã
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

369 *
grou≤ame
, *
ãxt_«me
, *
ãxt_des¸ùti⁄
;

370 
dyn£c__group
 *
group
 = 
NULL
;

371 
rc
 = 
MOSQ_ERR_SUCCESS
;

372 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

374 if(
	`js⁄_gë_°rög
(
comm™d
, "grou≤ame", &
grou≤ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

375 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãGroup", "InvÆid/missög grou≤ame", 
c‹ªœti⁄_d©a
);

376  
MOSQ_ERR_INVAL
;

378 if(
	`mosquôto_vÆid©e_utf8
(
grou≤ame
, ()
	`°æí
(grou≤ame)Ë!
MOSQ_ERR_SUCCESS
){

379 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãGroup", "Grou∞«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

380  
MOSQ_ERR_INVAL
;

383 if(
	`js⁄_gë_°rög
(
comm™d
, "ãxäame", &
ãxt_«me
, 
åue
Ë!
MOSQ_ERR_SUCCESS
){

384 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãGroup", "InvÆid/missögÅexäame", 
c‹ªœti⁄_d©a
);

385  
MOSQ_ERR_INVAL
;

388 if(
	`js⁄_gë_°rög
(
comm™d
, "ãxtdes¸ùti⁄", &
ãxt_des¸ùti⁄
, 
åue
Ë!
MOSQ_ERR_SUCCESS
){

389 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãGroup", "InvÆid/missögÅextdes¸ùti⁄", 
c‹ªœti⁄_d©a
);

390  
MOSQ_ERR_INVAL
;

393 
group
 = 
	`dyn£c_groups__föd
(
grou≤ame
);

394 if(
group
){

395 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãGroup", "Grou∞ÆªadyÉxi°s", 
c‹ªœti⁄_d©a
);

396  
MOSQ_ERR_SUCCESS
;

399 
group
 = 
	`mosquôto_ˇŒoc
(1, (
dyn£c__group
));

400 if(
group
 =
NULL
){

401 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãGroup", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

402  
MOSQ_ERR_NOMEM
;

404 
group
->
grou≤ame
 = 
	`°rdup
(groupname);

405 if(
group
->
grou≤ame
 =
NULL
){

406 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãGroup", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

407 
	`group__‰ì_ôem
(
group
);

408  
MOSQ_ERR_NOMEM
;

410 if(
ãxt_«me
){

411 
group
->
ãxt_«me
 = 
	`°rdup
(text_name);

412 if(
group
->
ãxt_«me
 =
NULL
){

413 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãGroup", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

414 
	`group__‰ì_ôem
(
group
);

415  
MOSQ_ERR_NOMEM
;

418 if(
ãxt_des¸ùti⁄
){

419 
group
->
ãxt_des¸ùti⁄
 = 
	`°rdup
(text_description);

420 if(
group
->
ãxt_des¸ùti⁄
 =
NULL
){

421 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãGroup", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

422 
	`group__‰ì_ôem
(
group
);

423  
MOSQ_ERR_NOMEM
;

427 
rc
 = 
	`dyn£c_rﬁñi°__lﬂd_‰om_js⁄
(
comm™d
, &
group
->
rﬁñi°
);

428 if(
rc
 =
MOSQ_ERR_SUCCESS
 ||Ñ¯=
ERR_LIST_NOT_FOUND
){

429 }if(
rc
 =
MOSQ_ERR_NOT_FOUND
){

430 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãGroup", "RﬁênŸ found", 
c‹ªœti⁄_d©a
);

431 
	`group__‰ì_ôem
(
group
);

432  
MOSQ_ERR_INVAL
;

434 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãGroup", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

435 
	`group__‰ì_ôem
(
group
);

436  
MOSQ_ERR_INVAL
;

439 
	`HASH_ADD_KEYPTR_INORDER
(
hh
, 
loˇl_groups
, 
group
->
grou≤ame
, 
	`°æí
(group->grou≤ame), group, 
group_cmp
);

441 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

442 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

443 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | createGroup | groupname=%s",

444 
admö_˛õ¡id
, 
admö_u£∫ame
, 
grou≤ame
);

446 
	`dyn£c__c⁄fig_ßve
();

447 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãGroup", 
NULL
, 
c‹ªœti⁄_d©a
);

448  
MOSQ_ERR_SUCCESS
;

449 
	}
}

452 
	$dyn£c_groups__¥o˚ss_dñëe
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

454 *
grou≤ame
;

455 
dyn£c__group
 *
group
;

456 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

458 if(
	`js⁄_gë_°rög
(
comm™d
, "grou≤ame", &
grou≤ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

459 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "dñëeGroup", "InvÆid/missög grou≤ame", 
c‹ªœti⁄_d©a
);

460  
MOSQ_ERR_INVAL
;

462 if(
	`mosquôto_vÆid©e_utf8
(
grou≤ame
, ()
	`°æí
(grou≤ame)Ë!
MOSQ_ERR_SUCCESS
){

463 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "dñëeGroup", "Grou∞«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

464  
MOSQ_ERR_INVAL
;

467 
group
 = 
	`dyn£c_groups__föd
(
grou≤ame
);

468 if(
group
){

469 if(
group
 =
dyn£c_™⁄ymous_group
){

470 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "dñëeGroup", "DñëögÅhê™⁄ymou†grou∞i†f‹biddí", 
c‹ªœti⁄_d©a
);

471  
MOSQ_ERR_INVAL
;

475 
	`group__kick_Æl
(
group
);

477 
	`dyn£c__ªmove_Æl_rﬁes_‰om_group
(
group
);

478 
	`group__‰ì_ôem
(
group
);

479 
	`dyn£c__c⁄fig_ßve
();

480 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "dñëeGroup", 
NULL
, 
c‹ªœti⁄_d©a
);

482 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

483 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

484 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | deleteGroup | groupname=%s",

485 
admö_˛õ¡id
, 
admö_u£∫ame
, 
grou≤ame
);

487  
MOSQ_ERR_SUCCESS
;

489 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "dñëeGroup", "Grou∞nŸ found", 
c‹ªœti⁄_d©a
);

490  
MOSQ_ERR_SUCCESS
;

492 
	}
}

495 
	$dyn£c_groups__add_˛õ¡
(c⁄° *
u£∫ame
, c⁄° *
grou≤ame
, 
¥i‹ôy
, 
boﬁ
 
upd©e_c⁄fig
)

497 
dyn£c__˛õ¡
 *
˛õ¡
;

498 
dyn£c__˛õ¡li°
 *
˛õ¡li°
;

499 
dyn£c__group
 *
group
;

500 
rc
;

502 
˛õ¡
 = 
	`dyn£c_˛õ¡s__föd
(
u£∫ame
);

503 if(
˛õ¡
 =
NULL
){

504  
ERR_USER_NOT_FOUND
;

507 
group
 = 
	`dyn£c_groups__föd
(
grou≤ame
);

508 if(
group
 =
NULL
){

509  
ERR_GROUP_NOT_FOUND
;

512 
	`HASH_FIND
(
hh
, 
group
->
˛õ¡li°
, 
u£∫ame
, 
	`°æí
(username), clientlist);

513 if(
˛õ¡li°
 !
NULL
){

515  
MOSQ_ERR_ALREADY_EXISTS
;

518 
rc
 = 
	`dyn£c_˛õ¡li°__add
(&
group
->
˛õ¡li°
, 
˛õ¡
, 
¥i‹ôy
);

519 if(
rc
){

520  
rc
;

522 
rc
 = 
	`dyn£c_grou∂i°__add
(&
˛õ¡
->
grou∂i°
, 
group
, 
¥i‹ôy
);

523 if(
rc
){

524 
	`dyn£c_˛õ¡li°__ªmove
(&
group
->
˛õ¡li°
, 
˛õ¡
);

525  
rc
;

528 if(
upd©e_c⁄fig
){

529 
	`dyn£c__c⁄fig_ßve
();

532  
MOSQ_ERR_SUCCESS
;

533 
	}
}

536 
	$dyn£c_groups__¥o˚ss_add_˛õ¡
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

538 *
u£∫ame
, *
grou≤ame
;

539 
rc
;

540 
¥i‹ôy
;

541 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

543 if(
	`js⁄_gë_°rög
(
comm™d
, "u£∫ame", &
u£∫ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

544 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupClõ¡", "InvÆid/missög u£∫ame", 
c‹ªœti⁄_d©a
);

545  
MOSQ_ERR_INVAL
;

547 if(
	`mosquôto_vÆid©e_utf8
(
u£∫ame
, ()
	`°æí
(u£∫ame)Ë!
MOSQ_ERR_SUCCESS
){

548 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupClõ¡", "U£∫amênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

549  
MOSQ_ERR_INVAL
;

552 if(
	`js⁄_gë_°rög
(
comm™d
, "grou≤ame", &
grou≤ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

553 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupClõ¡", "InvÆid/missög grou≤ame", 
c‹ªœti⁄_d©a
);

554  
MOSQ_ERR_INVAL
;

556 if(
	`mosquôto_vÆid©e_utf8
(
grou≤ame
, ()
	`°æí
(grou≤ame)Ë!
MOSQ_ERR_SUCCESS
){

557 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupClõ¡", "Grou∞«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

558  
MOSQ_ERR_INVAL
;

561 
	`js⁄_gë_öt
(
comm™d
, "¥i‹ôy", &
¥i‹ôy
, 
åue
, -1);

563 
rc
 = 
	`dyn£c_groups__add_˛õ¡
(
u£∫ame
, 
grou≤ame
, 
¥i‹ôy
, 
åue
);

564 if(
rc
 =
MOSQ_ERR_SUCCESS
){

565 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

566 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

567 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s |áddGroupClient | groupname=%s | username=%s |Öriority=%d",

568 
admö_˛õ¡id
, 
admö_u£∫ame
, 
grou≤ame
, 
u£∫ame
, 
¥i‹ôy
);

570 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupClõ¡", 
NULL
, 
c‹ªœti⁄_d©a
);

571 }if(
rc
 =
ERR_USER_NOT_FOUND
){

572 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupClõ¡", "Clõ¡ÇŸ found", 
c‹ªœti⁄_d©a
);

573 }if(
rc
 =
ERR_GROUP_NOT_FOUND
){

574 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupClõ¡", "Grou∞nŸ found", 
c‹ªœti⁄_d©a
);

575 }if(
rc
 =
MOSQ_ERR_ALREADY_EXISTS
){

576 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupClõ¡", "Clõ¡ i†Æªady i¿thi†group", 
c‹ªœti⁄_d©a
);

578 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addGroupClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

582 
	`mosquôto_kick_˛õ¡_by_u£∫ame
(
u£∫ame
, 
Ál£
);

584  
rc
;

585 
	}
}

588 
	$dyn£c__ªmove_Æl_˛õ¡s_‰om_group
(
dyn£c__group
 *
group
)

590 
dyn£c__˛õ¡li°
 *
˛õ¡li°
, *
˛õ¡li°_tmp
 = 
NULL
;

592 
	`HASH_ITER
(
hh
, 
group
->
˛õ¡li°
, clõ¡li°, 
˛õ¡li°_tmp
){

594 
	`dyn£c_grou∂i°__ªmove
(&
˛õ¡li°
->
˛õ¡
->
grou∂i°
, 
group
);

596 
	`HASH_DELETE
(
hh
, 
group
->
˛õ¡li°
, clientlist);

597 
	`mosquôto_‰ì
(
˛õ¡li°
);

600  
MOSQ_ERR_SUCCESS
;

601 
	}
}

603 
	$dyn£c__ªmove_Æl_rﬁes_‰om_group
(
dyn£c__group
 *
group
)

605 
dyn£c__rﬁñi°
 *
rﬁñi°
, *
rﬁñi°_tmp
 = 
NULL
;

607 
	`HASH_ITER
(
hh
, 
group
->
rﬁñi°
,Ñﬁñi°, 
rﬁñi°_tmp
){

608 
	`dyn£c_rﬁñi°__group_ªmove
(
group
, 
rﬁñi°
->
rﬁe
);

611  
MOSQ_ERR_SUCCESS
;

612 
	}
}

614 
	$dyn£c_groups__ªmove_˛õ¡
(c⁄° *
u£∫ame
, c⁄° *
grou≤ame
, 
boﬁ
 
upd©e_c⁄fig
)

616 
dyn£c__˛õ¡
 *
˛õ¡
;

617 
dyn£c__group
 *
group
;

619 
˛õ¡
 = 
	`dyn£c_˛õ¡s__föd
(
u£∫ame
);

620 if(
˛õ¡
 =
NULL
){

621  
ERR_USER_NOT_FOUND
;

624 
group
 = 
	`dyn£c_groups__föd
(
grou≤ame
);

625 if(
group
 =
NULL
){

626  
ERR_GROUP_NOT_FOUND
;

629 
	`dyn£c_˛õ¡li°__ªmove
(&
group
->
˛õ¡li°
, 
˛õ¡
);

630 
	`dyn£c_grou∂i°__ªmove
(&
˛õ¡
->
grou∂i°
, 
group
);

632 if(
upd©e_c⁄fig
){

633 
	`dyn£c__c⁄fig_ßve
();

635  
MOSQ_ERR_SUCCESS
;

636 
	}
}

638 
	$dyn£c_groups__¥o˚ss_ªmove_˛õ¡
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

640 *
u£∫ame
, *
grou≤ame
;

641 
rc
;

642 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

644 if(
	`js⁄_gë_°rög
(
comm™d
, "u£∫ame", &
u£∫ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

645 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveGroupClõ¡", "InvÆid/missög u£∫ame", 
c‹ªœti⁄_d©a
);

646  
MOSQ_ERR_INVAL
;

648 if(
	`mosquôto_vÆid©e_utf8
(
u£∫ame
, ()
	`°æí
(u£∫ame)Ë!
MOSQ_ERR_SUCCESS
){

649 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveGroupClõ¡", "U£∫amênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

650  
MOSQ_ERR_INVAL
;

653 if(
	`js⁄_gë_°rög
(
comm™d
, "grou≤ame", &
grou≤ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

654 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveGroupClõ¡", "InvÆid/missög grou≤ame", 
c‹ªœti⁄_d©a
);

655  
MOSQ_ERR_INVAL
;

657 if(
	`mosquôto_vÆid©e_utf8
(
grou≤ame
, ()
	`°æí
(grou≤ame)Ë!
MOSQ_ERR_SUCCESS
){

658 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveGroupClõ¡", "Grou∞«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

659  
MOSQ_ERR_INVAL
;

662 
rc
 = 
	`dyn£c_groups__ªmove_˛õ¡
(
u£∫ame
, 
grou≤ame
, 
åue
);

663 if(
rc
 =
MOSQ_ERR_SUCCESS
){

664 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

665 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

666 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s |ÑemoveGroupClient | groupname=%s | username=%s",

667 
admö_˛õ¡id
, 
admö_u£∫ame
, 
grou≤ame
, 
u£∫ame
);

669 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveGroupClõ¡", 
NULL
, 
c‹ªœti⁄_d©a
);

670 }if(
rc
 =
ERR_USER_NOT_FOUND
){

671 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveGroupClõ¡", "Clõ¡ÇŸ found", 
c‹ªœti⁄_d©a
);

672 }if(
rc
 =
ERR_GROUP_NOT_FOUND
){

673 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveGroupClõ¡", "Grou∞nŸ found", 
c‹ªœti⁄_d©a
);

675 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveGroupClõ¡", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

679 
	`mosquôto_kick_˛õ¡_by_u£∫ame
(
u£∫ame
, 
Ál£
);

681  
rc
;

682 
	}
}

685 
cJSON
 *
	$add_group_to_js⁄
(
dyn£c__group
 *
group
)

687 
cJSON
 *
j_group
, *
jtmp
, *
j_˛õ¡li°
, *
j_˛õ¡
, *
j_rﬁñi°
;

688 
dyn£c__˛õ¡li°
 *
˛õ¡li°
, *
˛õ¡li°_tmp
 = 
NULL
;

690 
j_group
 = 
	`cJSON_Cª©eObje˘
();

691 if(
j_group
 =
NULL
){

692  
NULL
;

695 if(
	`cJSON_AddSåögToObje˘
(
j_group
, "grou≤ame", 
group
->
grou≤ame
Ë=
NULL


696 || (
group
->
ãxt_«me
 && 
	`cJSON_AddSåögToObje˘
(
j_group
, "ãxäame", group->ãxt_«meË=
NULL
)

697 || (
group
->
ãxt_des¸ùti⁄
 && 
	`cJSON_AddSåögToObje˘
(
j_group
, "ãxtdes¸ùti⁄", group->ãxt_des¸ùti⁄Ë=
NULL
)

698 || (
j_˛õ¡li°
 = 
	`cJSON_AddAºayToObje˘
(
j_group
, "˛õ¡s")Ë=
NULL


701 
	`cJSON_Dñëe
(
j_group
);

702  
NULL
;

705 
	`HASH_ITER
(
hh
, 
group
->
˛õ¡li°
, clõ¡li°, 
˛õ¡li°_tmp
){

706 
j_˛õ¡
 = 
	`cJSON_Cª©eObje˘
();

707 if(
j_˛õ¡
 =
NULL
){

708 
	`cJSON_Dñëe
(
j_group
);

709  
NULL
;

711 
	`cJSON_AddIãmToAºay
(
j_˛õ¡li°
, 
j_˛õ¡
);

713 
jtmp
 = 
	`cJSON_Cª©eSåögRe„ªn˚
(
˛õ¡li°
->
˛õ¡
->
u£∫ame
);

714 if(
jtmp
 =
NULL
){

715 
	`cJSON_Dñëe
(
j_group
);

716  
NULL
;

718 
	`cJSON_AddIãmToObje˘
(
j_˛õ¡
, "u£∫ame", 
jtmp
);

721 
j_rﬁñi°
 = 
	`dyn£c_rﬁñi°__Æl_to_js⁄
(
group
->
rﬁñi°
);

722 if(
j_rﬁñi°
 =
NULL
){

723 
	`cJSON_Dñëe
(
j_group
);

724  
NULL
;

726 
	`cJSON_AddIãmToObje˘
(
j_group
, "rﬁes", 
j_rﬁñi°
);

728  
j_group
;

729 
	}
}

732 
	$dyn£c_groups__¥o˚ss_li°
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

734 
boﬁ
 
vîbo£
;

735 
cJSON
 *
åì
, *
j_groups
, *
j_group
, *
j_d©a
;

736 
dyn£c__group
 *
group
, *
group_tmp
 = 
NULL
;

737 
i
, 
cou¡
, 
off£t
;

738 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

740 
	`js⁄_gë_boﬁ
(
comm™d
, "vîbo£", &
vîbo£
, 
åue
, 
Ál£
);

741 
	`js⁄_gë_öt
(
comm™d
, "cou¡", &
cou¡
, 
åue
, -1);

742 
	`js⁄_gë_öt
(
comm™d
, "off£t", &
off£t
, 
åue
, 0);

744 
åì
 = 
	`cJSON_Cª©eObje˘
();

745 if(
åì
 =
NULL
){

746 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "li°Groups", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

747  
MOSQ_ERR_NOMEM
;

750 if(
	`cJSON_AddSåögToObje˘
(
åì
, "comm™d", "li°Groups"Ë=
NULL


751 || (
j_d©a
 = 
	`cJSON_AddObje˘ToObje˘
(
åì
, "d©a")Ë=
NULL


752 || 
	`cJSON_AddI¡ToObje˘
(
j_d©a
, "tŸÆCou¡", ()
	`HASH_CNT
(
hh
, 
loˇl_groups
)Ë=
NULL


753 || (
j_groups
 = 
	`cJSON_AddAºayToObje˘
(
j_d©a
, "groups")Ë=
NULL


754 || (
c‹ªœti⁄_d©a
 && 
	`cJSON_AddSåögToObje˘
(
åì
, "c‹ªœti⁄D©a", c‹ªœti⁄_d©aË=
NULL
)

757 
	`cJSON_Dñëe
(
åì
);

758 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "li°Groups", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

759  
MOSQ_ERR_NOMEM
;

762 
i
 = 0;

763 
	`HASH_ITER
(
hh
, 
loˇl_groups
, 
group
, 
group_tmp
){

764 if(
i
>=
off£t
){

765 if(
vîbo£
){

766 
j_group
 = 
	`add_group_to_js⁄
(
group
);

767 if(
j_group
 =
NULL
){

768 
	`cJSON_Dñëe
(
åì
);

769 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "li°Groups", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

770  
MOSQ_ERR_NOMEM
;

772 
	`cJSON_AddIãmToAºay
(
j_groups
, 
j_group
);

775 
j_group
 = 
	`cJSON_Cª©eSåög
(
group
->
grou≤ame
);

776 if(
j_group
){

777 
	`cJSON_AddIãmToAºay
(
j_groups
, 
j_group
);

779 
	`cJSON_Dñëe
(
åì
);

780 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "li°Groups", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

781  
MOSQ_ERR_NOMEM
;

785 if(
cou¡
 >= 0){

786 
cou¡
--;

787 if(
cou¡
 <= 0){

792 
i
++;

795 
	`cJSON_AddIãmToAºay
(
j_ª•⁄£s
, 
åì
);

797 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

798 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

799 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s |ÜistGroups | verbose=%s | count=%d | offset=%d",

800 
admö_˛õ¡id
, 
admö_u£∫ame
, 
vîbo£
?"åue":"Ál£", 
cou¡
, 
off£t
);

802  
MOSQ_ERR_SUCCESS
;

803 
	}
}

806 
	$dyn£c_groups__¥o˚ss_gë
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

808 *
grou≤ame
;

809 
cJSON
 *
åì
, *
j_group
, *
j_d©a
;

810 
dyn£c__group
 *
group
;

811 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

813 if(
	`js⁄_gë_°rög
(
comm™d
, "grou≤ame", &
grou≤ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

814 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëGroup", "InvÆid/missög grou≤ame", 
c‹ªœti⁄_d©a
);

815  
MOSQ_ERR_INVAL
;

817 if(
	`mosquôto_vÆid©e_utf8
(
grou≤ame
, ()
	`°æí
(grou≤ame)Ë!
MOSQ_ERR_SUCCESS
){

818 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëGroup", "Grou∞«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

819  
MOSQ_ERR_INVAL
;

822 
åì
 = 
	`cJSON_Cª©eObje˘
();

823 if(
åì
 =
NULL
){

824 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëGroup", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

825  
MOSQ_ERR_NOMEM
;

828 if(
	`cJSON_AddSåögToObje˘
(
åì
, "comm™d", "gëGroup"Ë=
NULL


829 || (
j_d©a
 = 
	`cJSON_AddObje˘ToObje˘
(
åì
, "d©a")Ë=
NULL


830 || (
c‹ªœti⁄_d©a
 && 
	`cJSON_AddSåögToObje˘
(
åì
, "c‹ªœti⁄D©a", c‹ªœti⁄_d©aË=
NULL
)

833 
	`cJSON_Dñëe
(
åì
);

834 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëGroup", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

835  
MOSQ_ERR_NOMEM
;

838 
group
 = 
	`dyn£c_groups__föd
(
grou≤ame
);

839 if(
group
){

840 
j_group
 = 
	`add_group_to_js⁄
(
group
);

841 if(
j_group
 =
NULL
){

842 
	`cJSON_Dñëe
(
åì
);

843 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëGroup", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

844  
MOSQ_ERR_NOMEM
;

846 
	`cJSON_AddIãmToObje˘
(
j_d©a
, "group", 
j_group
);

848 
	`cJSON_Dñëe
(
åì
);

849 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëGroup", "Grou∞nŸ found", 
c‹ªœti⁄_d©a
);

850  
MOSQ_ERR_NOMEM
;

853 
	`cJSON_AddIãmToAºay
(
j_ª•⁄£s
, 
åì
);

855 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

856 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

857 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | getGroup | groupname=%s",

858 
admö_˛õ¡id
, 
admö_u£∫ame
, 
grou≤ame
);

860  
MOSQ_ERR_SUCCESS
;

861 
	}
}

864 
	$dyn£c_groups__¥o˚ss_ªmove_rﬁe
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

866 *
grou≤ame
, *
rﬁíame
;

867 
dyn£c__group
 *
group
;

868 
dyn£c__rﬁe
 *
rﬁe
;

869 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

871 if(
	`js⁄_gë_°rög
(
comm™d
, "grou≤ame", &
grou≤ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

872 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveGroupRﬁe", "InvÆid/missög grou≤ame", 
c‹ªœti⁄_d©a
);

873  
MOSQ_ERR_INVAL
;

875 if(
	`mosquôto_vÆid©e_utf8
(
grou≤ame
, ()
	`°æí
(grou≤ame)Ë!
MOSQ_ERR_SUCCESS
){

876 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveGroupRﬁe", "Grou∞«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

877  
MOSQ_ERR_INVAL
;

880 if(
	`js⁄_gë_°rög
(
comm™d
, "rﬁíame", &
rﬁíame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

881 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveGroupRﬁe", "InvÆid/missögÑﬁíame", 
c‹ªœti⁄_d©a
);

882  
MOSQ_ERR_INVAL
;

884 if(
	`mosquôto_vÆid©e_utf8
(
rﬁíame
, ()
	`°æí
‘ﬁíame)Ë!
MOSQ_ERR_SUCCESS
){

885 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveGroupRﬁe", "Rﬁê«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

886  
MOSQ_ERR_INVAL
;

889 
group
 = 
	`dyn£c_groups__föd
(
grou≤ame
);

890 if(
group
 =
NULL
){

891 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveGroupRﬁe", "Grou∞nŸ found", 
c‹ªœti⁄_d©a
);

892  
MOSQ_ERR_SUCCESS
;

895 
rﬁe
 = 
	`dyn£c_rﬁes__föd
(
rﬁíame
);

896 if(
rﬁe
 =
NULL
){

897 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveGroupRﬁe", "RﬁênŸ found", 
c‹ªœti⁄_d©a
);

898  
MOSQ_ERR_SUCCESS
;

901 
	`dyn£c_rﬁñi°__group_ªmove
(
group
, 
rﬁe
);

902 
	`dyn£c__c⁄fig_ßve
();

903 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveGroupRﬁe", 
NULL
, 
c‹ªœti⁄_d©a
);

906 
	`group__kick_Æl
(
group
);

908 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

909 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

910 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s |ÑemoveGroupRole | groupname=%s |Ñolename=%s",

911 
admö_˛õ¡id
, 
admö_u£∫ame
, 
grou≤ame
, 
rﬁíame
);

913  
MOSQ_ERR_SUCCESS
;

914 
	}
}

917 
	$dyn£c_groups__¥o˚ss_modify
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

919 *
grou≤ame
 = 
NULL
;

920 *
ãxt_«me
 = 
NULL
, *
ãxt_des¸ùti⁄
 = NULL;

921 
dyn£c__˛õ¡
 *
˛õ¡
 = 
NULL
;

922 
dyn£c__group
 *
group
 = 
NULL
;

923 
dyn£c__rﬁñi°
 *
rﬁñi°
 = 
NULL
;

924 
boﬁ
 
have_ãxt_«me
 = 
Ál£
, 
have_ãxt_des¸ùti⁄
 = fÆ£, 
have_rﬁñi°
 = false;

925 *
°r
;

926 
rc
;

927 
¥i‹ôy
;

928 
cJSON
 *
j_˛õ¡
, *
j_˛õ¡s
, *
jtmp
;

929 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

931 if(
	`js⁄_gë_°rög
(
comm™d
, "grou≤ame", &
grou≤ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

932 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyGroup", "InvÆid/missög grou≤ame", 
c‹ªœti⁄_d©a
);

933  
MOSQ_ERR_INVAL
;

935 if(
	`mosquôto_vÆid©e_utf8
(
grou≤ame
, ()
	`°æí
(grou≤ame)Ë!
MOSQ_ERR_SUCCESS
){

936 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyGroup", "Grou∞«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

937  
MOSQ_ERR_INVAL
;

940 
group
 = 
	`dyn£c_groups__föd
(
grou≤ame
);

941 if(
group
 =
NULL
){

942 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyGroup", "Grou∞nŸ found", 
c‹ªœti⁄_d©a
);

943  
MOSQ_ERR_INVAL
;

946 if(
	`js⁄_gë_°rög
(
comm™d
, "ãxäame", &
°r
, 
Ál£
Ë=
MOSQ_ERR_SUCCESS
){

947 
have_ãxt_«me
 = 
åue
;

948 
ãxt_«me
 = 
	`mosquôto_°rdup
(
°r
);

949 if(
ãxt_«me
 =
NULL
){

950 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyGroup", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

951 
rc
 = 
MOSQ_ERR_NOMEM
;

952 
îr‹
;

956 if(
	`js⁄_gë_°rög
(
comm™d
, "ãxtdes¸ùti⁄", &
°r
, 
Ál£
Ë=
MOSQ_ERR_SUCCESS
){

957 
have_ãxt_des¸ùti⁄
 = 
åue
;

958 
ãxt_des¸ùti⁄
 = 
	`mosquôto_°rdup
(
°r
);

959 if(
ãxt_des¸ùti⁄
 =
NULL
){

960 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyGroup", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

961 
rc
 = 
MOSQ_ERR_NOMEM
;

962 
îr‹
;

966 
rc
 = 
	`dyn£c_rﬁñi°__lﬂd_‰om_js⁄
(
comm™d
, &
rﬁñi°
);

967 if(
rc
 =
MOSQ_ERR_SUCCESS
){

969 
have_rﬁñi°
 = 
åue
;

970 }if(
rc
 =
ERR_LIST_NOT_FOUND
){

972 
rﬁñi°
 = 
NULL
;

973 }if(
rc
 =
MOSQ_ERR_NOT_FOUND
){

974 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyGroup", "RﬁênŸ found", 
c‹ªœti⁄_d©a
);

975 
rc
 = 
MOSQ_ERR_INVAL
;

976 
îr‹
;

978 if(
rc
 =
MOSQ_ERR_INVAL
){

979 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyGroup", "'rﬁes'ÇŸá¿¨øy o∏missög/övÆidÑﬁíame", 
c‹ªœti⁄_d©a
);

981 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyGroup", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

983 
rc
 = 
MOSQ_ERR_INVAL
;

984 
îr‹
;

987 
j_˛õ¡s
 = 
	`cJSON_GëObje˘Iãm
(
comm™d
, "clients");

988 if(
j_˛õ¡s
 && 
	`cJSON_IsAºay
(j_clients)){

990 
	`cJSON_AºayF‹Each
(
j_˛õ¡
, 
j_˛õ¡s
){

991 if(
	`cJSON_IsObje˘
(
j_˛õ¡
)){

992 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "username");

993 if(
jtmp
 && 
	`cJSON_IsSåög
(jtmp)){

994 
˛õ¡
 = 
	`dyn£c_˛õ¡s__föd
(
jtmp
->
vÆue°rög
);

995 if(
˛õ¡
 =
NULL
){

996 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyGroup", "'˛õ¡s' c⁄èö†™ obje˘ wôhá 'u£∫ame'Åh© d€†nŸÉxi°", 
c‹ªœti⁄_d©a
);

997 
rc
 = 
MOSQ_ERR_INVAL
;

998 
îr‹
;

1001 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyGroup", "'˛õ¡s' c⁄èö†™ obje˘ wôhá¿övÆid 'u£∫ame'", 
c‹ªœti⁄_d©a
);

1002 
rc
 = 
MOSQ_ERR_INVAL
;

1003 
îr‹
;

1009 
	`group__kick_Æl
(
group
);

1010 
	`dyn£c__ªmove_Æl_˛õ¡s_‰om_group
(
group
);

1013 
	`cJSON_AºayF‹Each
(
j_˛õ¡
, 
j_˛õ¡s
){

1014 if(
	`cJSON_IsObje˘
(
j_˛õ¡
)){

1015 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_˛õ¡
, "username");

1016 if(
jtmp
 && 
	`cJSON_IsSåög
(jtmp)){

1017 
	`js⁄_gë_öt
(
j_˛õ¡
, "¥i‹ôy", &
¥i‹ôy
, 
åue
, -1);

1018 
	`dyn£c_groups__add_˛õ¡
(
jtmp
->
vÆue°rög
, 
grou≤ame
, 
¥i‹ôy
, 
Ál£
);

1025 if(
have_ãxt_«me
){

1026 
	`mosquôto_‰ì
(
group
->
ãxt_«me
);

1027 
group
->
ãxt_«me
 =Åext_name;

1030 if(
have_ãxt_des¸ùti⁄
){

1031 
	`mosquôto_‰ì
(
group
->
ãxt_des¸ùti⁄
);

1032 
group
->
ãxt_des¸ùti⁄
 =Åext_description;

1035 if(
have_rﬁñi°
){

1036 
	`dyn£c_rﬁñi°__˛ónup
(&
group
->
rﬁñi°
);

1037 
group
->
rﬁñi°
 =Ñolelist;

1041 
	`dyn£c__c⁄fig_ßve
();

1043 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyGroup", 
NULL
, 
c‹ªœti⁄_d©a
);

1046 
	`group__kick_Æl
(
group
);

1048 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

1049 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

1050 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | modifyGroup | groupname=%s",

1051 
admö_˛õ¡id
, 
admö_u£∫ame
, 
grou≤ame
);

1053  
MOSQ_ERR_SUCCESS
;

1054 
îr‹
:

1055 
	`mosquôto_‰ì
(
ãxt_«me
);

1056 
	`mosquôto_‰ì
(
ãxt_des¸ùti⁄
);

1057 
	`dyn£c_rﬁñi°__˛ónup
(&
rﬁñi°
);

1059 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

1060 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

1061 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | modifyGroup | groupname=%s",

1062 
admö_˛õ¡id
, 
admö_u£∫ame
, 
grou≤ame
);

1064  
rc
;

1065 
	}
}

1068 
	$dyn£c_groups__¥o˚ss_£t_™⁄ymous_group
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

1070 *
grou≤ame
;

1071 
dyn£c__group
 *
group
 = 
NULL
;

1072 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

1074 if(
	`js⁄_gë_°rög
(
comm™d
, "grou≤ame", &
grou≤ame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

1075 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tAn⁄ymousGroup", "InvÆid/missög grou≤ame", 
c‹ªœti⁄_d©a
);

1076  
MOSQ_ERR_INVAL
;

1078 if(
	`mosquôto_vÆid©e_utf8
(
grou≤ame
, ()
	`°æí
(grou≤ame)Ë!
MOSQ_ERR_SUCCESS
){

1079 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tAn⁄ymousGroup", "Grou∞«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

1080  
MOSQ_ERR_INVAL
;

1083 
group
 = 
	`dyn£c_groups__föd
(
grou≤ame
);

1084 if(
group
 =
NULL
){

1085 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tAn⁄ymousGroup", "Grou∞nŸ found", 
c‹ªœti⁄_d©a
);

1086  
MOSQ_ERR_SUCCESS
;

1089 
dyn£c_™⁄ymous_group
 = 
group
;

1091 
	`dyn£c__c⁄fig_ßve
();

1092 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tAn⁄ymousGroup", 
NULL
, 
c‹ªœti⁄_d©a
);

1095 
	`mosquôto_kick_˛õ¡_by_u£∫ame
(
NULL
, 
Ál£
);

1097 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

1098 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

1099 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | setAnonymousGroup | groupname=%s",

1100 
admö_˛õ¡id
, 
admö_u£∫ame
, 
grou≤ame
);

1102  
MOSQ_ERR_SUCCESS
;

1103 
	}
}

1105 
	$dyn£c_groups__¥o˚ss_gë_™⁄ymous_group
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

1107 
cJSON
 *
åì
, *
j_d©a
, *
j_group
;

1108 c⁄° *
grou≤ame
;

1109 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

1111 
	`UNUSED
(
comm™d
);

1113 
åì
 = 
	`cJSON_Cª©eObje˘
();

1114 if(
åì
 =
NULL
){

1115 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëAn⁄ymousGroup", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

1116  
MOSQ_ERR_NOMEM
;

1119 if(
dyn£c_™⁄ymous_group
){

1120 
grou≤ame
 = 
dyn£c_™⁄ymous_group
->groupname;

1122 
grou≤ame
 = "";

1125 if(
	`cJSON_AddSåögToObje˘
(
åì
, "comm™d", "gëAn⁄ymousGroup"Ë=
NULL


1126 || (
j_d©a
 = 
	`cJSON_AddObje˘ToObje˘
(
åì
, "d©a")Ë=
NULL


1127 || (
j_group
 = 
	`cJSON_AddObje˘ToObje˘
(
j_d©a
, "group")Ë=
NULL


1128 || 
	`cJSON_AddSåögToObje˘
(
j_group
, "grou≤ame", 
grou≤ame
Ë=
NULL


1129 || (
c‹ªœti⁄_d©a
 && 
	`cJSON_AddSåögToObje˘
(
åì
, "c‹ªœti⁄D©a", c‹ªœti⁄_d©aË=
NULL
)

1132 
	`cJSON_Dñëe
(
åì
);

1133 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëAn⁄ymousGroup", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

1134  
MOSQ_ERR_NOMEM
;

1137 
	`cJSON_AddIãmToAºay
(
j_ª•⁄£s
, 
åì
);

1139 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

1140 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

1141 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | getAnonymousGroup",

1142 
admö_˛õ¡id
, 
admö_u£∫ame
);

1144  
MOSQ_ERR_SUCCESS
;

1145 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/json_help.c

19 
	~"c⁄fig.h
"

21 
	~<cjs⁄/cJSON.h
>

22 
	~<°dboﬁ.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

26 
	~"js⁄_hñp.h
"

27 
	~"mosquôto.h
"

30 
	$js⁄_gë_boﬁ
(
cJSON
 *
js⁄
, c⁄° *
«me
, 
boﬁ
 *
vÆue
, boﬁ 
›ti⁄Æ
, boﬁ 
deÁu…_vÆue
)

32 
cJSON
 *
jtmp
;

34 if(
›ti⁄Æ
 =
åue
){

35 *
vÆue
 = 
deÁu…_vÆue
;

38 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
js⁄
, 
«me
);

39 if(
jtmp
){

40 if(
	`cJSON_IsBoﬁ
(
jtmp
Ë=
Ál£
){

41  
MOSQ_ERR_INVAL
;

43 *
vÆue
 = 
	`cJSON_IsTrue
(
jtmp
);

45 if(
›ti⁄Æ
 =
Ál£
){

46  
MOSQ_ERR_INVAL
;

49  
MOSQ_ERR_SUCCESS
;

50 
	}
}

53 
	$js⁄_gë_öt
(
cJSON
 *
js⁄
, c⁄° *
«me
, *
vÆue
, 
boﬁ
 
›ti⁄Æ
, 
deÁu…_vÆue
)

55 
cJSON
 *
jtmp
;

57 if(
›ti⁄Æ
 =
åue
){

58 *
vÆue
 = 
deÁu…_vÆue
;

61 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
js⁄
, 
«me
);

62 if(
jtmp
){

63 if(
	`cJSON_IsNumbî
(
jtmp
Ë=
Ál£
){

64  
MOSQ_ERR_INVAL
;

66 *
vÆue
 = 
jtmp
->
vÆueöt
;

68 if(
›ti⁄Æ
 =
Ál£
){

69  
MOSQ_ERR_INVAL
;

72  
MOSQ_ERR_SUCCESS
;

73 
	}
}

76 
	$js⁄_gë_°rög
(
cJSON
 *
js⁄
, c⁄° *
«me
, **
vÆue
, 
boﬁ
 
›ti⁄Æ
)

78 
cJSON
 *
jtmp
;

80 *
vÆue
 = 
NULL
;

82 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
js⁄
, 
«me
);

83 if(
jtmp
){

84 if(
	`cJSON_IsSåög
(
jtmp
Ë=
Ál£
){

85  
MOSQ_ERR_INVAL
;

87 *
vÆue
 = 
jtmp
->
vÆue°rög
;

89 if(
›ti⁄Æ
 =
Ál£
){

90  
MOSQ_ERR_INVAL
;

93  
MOSQ_ERR_SUCCESS
;

94 
	}
}

97 
cJSON
 *
	$cJSON_AddI¡ToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, 
numbî
)

99 
buf
[30];

101 
	`¢¥ötf
(
buf
, (buf), "%d", 
numbî
);

102  
	`cJSON_AddRawToObje˘
(
obje˘
, 
«me
, 
buf
);

103 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/json_help.h

1 #i‚de‡
JSON_HELP_H


2 
	#JSON_HELP_H


	)

20 
	~<cjs⁄/cJSON.h
>

21 
	~<°dboﬁ.h
>

24 
js⁄_gë_boﬁ
(
cJSON
 *
js⁄
, c⁄° *
«me
, 
boﬁ
 *
vÆue
, boﬁ 
›ti⁄Æ
, boﬁ 
deÁu…_vÆue
);

25 
js⁄_gë_öt
(
cJSON
 *
js⁄
, c⁄° *
«me
, *
vÆue
, 
boﬁ
 
›ti⁄Æ
, 
deÁu…_vÆue
);

26 
js⁄_gë_°rög
(
cJSON
 *
js⁄
, c⁄° *
«me
, **
vÆue
, 
boﬁ
 
›ti⁄Æ
);

28 
cJSON
 *
cJSON_AddI¡ToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, 
numbî
);

29 
cJSON
 *
cJSON_Cª©eI¡
(
num
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/plugin.c

19 
	~"c⁄fig.h
"

21 
	~<cjs⁄/cJSON.h
>

22 
	~<î∫o.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<sys/°©.h
>

28 #i‚de‡
WIN32


29 
	~<°rögs.h
>

32 
	~"js⁄_hñp.h
"

33 
	~"mosquôto.h
"

34 
	~"mosquôto_brokî.h
"

35 
	~"mosquôto_∂ugö.h
"

36 
	~"mqâ_¥Ÿocﬁ.h
"

38 
	~"dy«mic_£curôy.h
"

40 
mosquôto_∂ugö_id_t
 *
	g∂g_id
 = 
NULL
;

41 *
	gc⁄fig_fûe
 = 
NULL
;

42 
dyn£c__a˛_deÁu…_ac˚ss
 
	gdeÁu…_ac˚ss
 = {
Ál£
, false, false, false};

44 
	$dyn£c__comm™d_ª∂y
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, c⁄° *
comm™d
, c⁄° *
îr‹
, c⁄° *
c‹ªœti⁄_d©a
)

46 
cJSON
 *
j_ª•⁄£
;

48 
	`UNUSED
(
c⁄ãxt
);

50 
j_ª•⁄£
 = 
	`cJSON_Cª©eObje˘
();

51 if(
j_ª•⁄£
 =
NULL
) ;

53 if(
	`cJSON_AddSåögToObje˘
(
j_ª•⁄£
, "comm™d", 
comm™d
Ë=
NULL


54 || (
îr‹
 && 
	`cJSON_AddSåögToObje˘
(
j_ª•⁄£
, "îr‹",Éº‹Ë=
NULL
)

55 || (
c‹ªœti⁄_d©a
 && 
	`cJSON_AddSåögToObje˘
(
j_ª•⁄£
, "c‹ªœti⁄D©a", c‹ªœti⁄_d©aË=
NULL
)

58 
	`cJSON_Dñëe
(
j_ª•⁄£
);

62 
	`cJSON_AddIãmToAºay
(
j_ª•⁄£s
, 
j_ª•⁄£
);

63 
	}
}

66 
	$£nd_ª•⁄£
(
cJSON
 *
åì
)

68 *
∑ylﬂd
;

69 
size_t
 
∑ylﬂd_Àn
;

71 
∑ylﬂd
 = 
	`cJSON_PrötUnf‹m©ãd
(
åì
);

72 
	`cJSON_Dñëe
(
åì
);

73 if(
∑ylﬂd
 =
NULL
) ;

75 
∑ylﬂd_Àn
 = 
	`°æí
(
∑ylﬂd
);

76 if(
∑ylﬂd_Àn
 > 
MQTT_MAX_PAYLOAD
){

77 
	`‰ì
(
∑ylﬂd
);

80 
	`mosquôto_brokî_publish
(
NULL
, "$CONTROL/dynamic-security/v1/response",

81 ()
∑ylﬂd_Àn
, 
∑ylﬂd
, 0, 0, 
NULL
);

82 
	}
}

85 
	$dyn£c_c⁄åﬁ_ˇŒback
(
evít
, *
evít_d©a
, *
u£rd©a
)

87 
mosquôto_evt_c⁄åﬁ
 *
ed
 = 
evít_d©a
;

88 
cJSON
 *
åì
, *
comm™ds
;

89 
cJSON
 *
j_ª•⁄£_åì
, *
j_ª•⁄£s
;

91 
	`UNUSED
(
evít
);

92 
	`UNUSED
(
u£rd©a
);

95 
j_ª•⁄£_åì
 = 
	`cJSON_Cª©eObje˘
();

96 if(
j_ª•⁄£_åì
 =
NULL
){

97  
MOSQ_ERR_NOMEM
;

99 
j_ª•⁄£s
 = 
	`cJSON_Cª©eAºay
();

100 if(
j_ª•⁄£s
 =
NULL
){

101 
	`cJSON_Dñëe
(
j_ª•⁄£_åì
);

102  
MOSQ_ERR_NOMEM
;

104 
	`cJSON_AddIãmToObje˘
(
j_ª•⁄£_åì
, "ª•⁄£s", 
j_ª•⁄£s
);

111 #i‡
CJSON_VERSION_FULL
 < 1007013

112 
åì
 = 
	`cJSON_P¨£
(
ed
->
∑ylﬂd
);

114 
åì
 = 
	`cJSON_P¨£WôhLígth
(
ed
->
∑ylﬂd
,Éd->
∑ylﬂdÀn
);

116 if(
åì
 =
NULL
){

117 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
ed
->
˛õ¡
, "Unknow¿comm™d", "PaylﬂdÇŸ vÆid JSON", 
NULL
);

118 
	`£nd_ª•⁄£
(
j_ª•⁄£_åì
);

119  
MOSQ_ERR_SUCCESS
;

121 
comm™ds
 = 
	`cJSON_GëObje˘Iãm
(
åì
, "commands");

122 if(
comm™ds
 =
NULL
 || !
	`cJSON_IsAºay
(commands)){

123 
	`cJSON_Dñëe
(
åì
);

124 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
ed
->
˛õ¡
, "Unknow¿comm™d", "InvÆid/missög comm™ds", 
NULL
);

125 
	`£nd_ª•⁄£
(
j_ª•⁄£_åì
);

126  
MOSQ_ERR_SUCCESS
;

130 
	`dyn£c__h™dÀ_c⁄åﬁ
(
j_ª•⁄£s
, 
ed
->
˛õ¡
, 
comm™ds
);

131 
	`cJSON_Dñëe
(
åì
);

133 
	`£nd_ª•⁄£
(
j_ª•⁄£_åì
);

135  
MOSQ_ERR_SUCCESS
;

136 
	}
}

138 
	$dyn£c__¥o˚ss_£t_deÁu…_a˛_ac˚ss
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

140 
cJSON
 *
j_a˘i⁄s
, *
j_a˘i⁄
, *
j_a˛ty≥
, *
j_Ælow
;

141 
boﬁ
 
Ælow
;

142 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

144 
j_a˘i⁄s
 = 
	`cJSON_GëObje˘Iãm
(
comm™d
, "acls");

145 if(
j_a˘i⁄s
 =
NULL
 || !
	`cJSON_IsAºay
(j_actions)){

146 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tDeÁu…ACLAc˚ss", "Missög/övÆidá˘i⁄†¨øy", 
c‹ªœti⁄_d©a
);

147  
MOSQ_ERR_INVAL
;

150 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

151 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

153 
	`cJSON_AºayF‹Each
(
j_a˘i⁄
, 
j_a˘i⁄s
){

154 
j_a˛ty≥
 = 
	`cJSON_GëObje˘Iãm
(
j_a˘i⁄
, "acltype");

155 
j_Ælow
 = 
	`cJSON_GëObje˘Iãm
(
j_a˘i⁄
, "allow");

156 if(
j_a˛ty≥
 && 
	`cJSON_IsSåög
(j_acltype)

157 && 
j_Ælow
 && 
	`cJSON_IsBoﬁ
(j_allow)){

159 
Ælow
 = 
	`cJSON_IsTrue
(
j_Ælow
);

161 if(!
	`°rˇ£cmp
(
j_a˛ty≥
->
vÆue°rög
, 
ACL_TYPE_PUB_C_SEND
)){

162 
deÁu…_ac˚ss
.
publish_c_£nd
 = 
Ælow
;

163 }if(!
	`°rˇ£cmp
(
j_a˛ty≥
->
vÆue°rög
, 
ACL_TYPE_PUB_C_RECV
)){

164 
deÁu…_ac˚ss
.
publish_c_ªcv
 = 
Ælow
;

165 }if(!
	`°rˇ£cmp
(
j_a˛ty≥
->
vÆue°rög
, 
ACL_TYPE_SUB_GENERIC
)){

166 
deÁu…_ac˚ss
.
subs¸ibe
 = 
Ælow
;

167 }if(!
	`°rˇ£cmp
(
j_a˛ty≥
->
vÆue°rög
, 
ACL_TYPE_UNSUB_GENERIC
)){

168 
deÁu…_ac˚ss
.
unsubs¸ibe
 = 
Ælow
;

170 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | setDefaultACLAccess |ácltype=%s |állow=%s",

171 
admö_˛õ¡id
, 
admö_u£∫ame
, 
j_a˛ty≥
->
vÆue°rög
, 
Ælow
?"true":"false");

175 
	`dyn£c__c⁄fig_ßve
();

176 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "£tDeÁu…ACLAc˚ss", 
NULL
, 
c‹ªœti⁄_d©a
);

177  
MOSQ_ERR_SUCCESS
;

178 
	}
}

181 
	$dyn£c__¥o˚ss_gë_deÁu…_a˛_ac˚ss
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

183 
cJSON
 *
åì
, *
jtmp
, *
j_d©a
, *
j_a˛s
, *
j_a˛
;

184 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

186 
	`UNUSED
(
comm™d
);

188 
åì
 = 
	`cJSON_Cª©eObje˘
();

189 if(
åì
 =
NULL
){

190 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëDeÁu…ACLAc˚ss", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

191  
MOSQ_ERR_NOMEM
;

194 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

195 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

196 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | getDefaultACLAccess",

197 
admö_˛õ¡id
, 
admö_u£∫ame
);

199 if(
	`cJSON_AddSåögToObje˘
(
åì
, "comm™d", "gëDeÁu…ACLAc˚ss"Ë=
NULL


200 || ((
j_d©a
 = 
	`cJSON_AddObje˘ToObje˘
(
åì
, "d©a")Ë=
NULL
)

203 
öã∫Æ_îr‹
;

206 
j_a˛s
 = 
	`cJSON_AddAºayToObje˘
(
j_d©a
, "acls");

207 if(
j_a˛s
 =
NULL
){

208 
öã∫Æ_îr‹
;

212 
j_a˛
 = 
	`cJSON_Cª©eObje˘
();

213 if(
j_a˛
 =
NULL
){

214 
öã∫Æ_îr‹
;

216 
	`cJSON_AddIãmToAºay
(
j_a˛s
, 
j_a˛
);

217 if(
	`cJSON_AddSåögToObje˘
(
j_a˛
, "a˛ty≥", 
ACL_TYPE_PUB_C_SEND
Ë=
NULL


218 || 
	`cJSON_AddBoﬁToObje˘
(
j_a˛
, "Ælow", 
deÁu…_ac˚ss
.
publish_c_£nd
Ë=
NULL


221 
öã∫Æ_îr‹
;

225 
j_a˛
 = 
	`cJSON_Cª©eObje˘
();

226 if(
j_a˛
 =
NULL
){

227 
öã∫Æ_îr‹
;

229 
	`cJSON_AddIãmToAºay
(
j_a˛s
, 
j_a˛
);

230 if(
	`cJSON_AddSåögToObje˘
(
j_a˛
, "a˛ty≥", 
ACL_TYPE_PUB_C_RECV
Ë=
NULL


231 || 
	`cJSON_AddBoﬁToObje˘
(
j_a˛
, "Ælow", 
deÁu…_ac˚ss
.
publish_c_ªcv
Ë=
NULL


234 
öã∫Æ_îr‹
;

238 
j_a˛
 = 
	`cJSON_Cª©eObje˘
();

239 if(
j_a˛
 =
NULL
){

240 
öã∫Æ_îr‹
;

242 
	`cJSON_AddIãmToAºay
(
j_a˛s
, 
j_a˛
);

243 if(
	`cJSON_AddSåögToObje˘
(
j_a˛
, "a˛ty≥", 
ACL_TYPE_SUB_GENERIC
Ë=
NULL


244 || 
	`cJSON_AddBoﬁToObje˘
(
j_a˛
, "Ælow", 
deÁu…_ac˚ss
.
subs¸ibe
Ë=
NULL


247 
öã∫Æ_îr‹
;

251 
j_a˛
 = 
	`cJSON_Cª©eObje˘
();

252 if(
j_a˛
 =
NULL
){

253 
öã∫Æ_îr‹
;

255 
	`cJSON_AddIãmToAºay
(
j_a˛s
, 
j_a˛
);

256 if(
	`cJSON_AddSåögToObje˘
(
j_a˛
, "a˛ty≥", 
ACL_TYPE_UNSUB_GENERIC
Ë=
NULL


257 || 
	`cJSON_AddBoﬁToObje˘
(
j_a˛
, "Ælow", 
deÁu…_ac˚ss
.
unsubs¸ibe
Ë=
NULL


260 
öã∫Æ_îr‹
;

263 
	`cJSON_AddIãmToAºay
(
j_ª•⁄£s
, 
åì
);

265 if(
c‹ªœti⁄_d©a
){

266 
jtmp
 = 
	`cJSON_AddSåögToObje˘
(
åì
, "c‹ªœti⁄D©a", 
c‹ªœti⁄_d©a
);

267 if(
jtmp
 =
NULL
){

268 
öã∫Æ_îr‹
;

272  
MOSQ_ERR_SUCCESS
;

274 
öã∫Æ_îr‹
:

275 
	`cJSON_Dñëe
(
åì
);

276 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëDeÁu…ACLAc˚ss", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

277  
MOSQ_ERR_NOMEM
;

278 
	}
}

281 
	$mosquôto_∂ugö_vîsi⁄
(
suµ‹ãd_vîsi⁄_cou¡
, c⁄° *
suµ‹ãd_vîsi⁄s
)

283 
i
;

285 
i
=0; i<
suµ‹ãd_vîsi⁄_cou¡
; i++){

286 if(
suµ‹ãd_vîsi⁄s
[
i
] == 5){

291 
	}
}

293 
	$dyn£c__gíîÆ_c⁄fig_lﬂd
(
cJSON
 *
åì
)

295 
cJSON
 *
j_deÁu…_ac˚ss
, *
jtmp
;

297 
j_deÁu…_ac˚ss
 = 
	`cJSON_GëObje˘Iãm
(
åì
, "defaultACLAccess");

298 if(
j_deÁu…_ac˚ss
 && 
	`cJSON_IsObje˘
(j_default_access)){

299 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_deÁu…_ac˚ss
, 
ACL_TYPE_PUB_C_SEND
);

300 if(
jtmp
 && 
	`cJSON_IsBoﬁ
(jtmp)){

301 
deÁu…_ac˚ss
.
publish_c_£nd
 = 
	`cJSON_IsTrue
(
jtmp
);

303 
deÁu…_ac˚ss
.
publish_c_£nd
 = 
Ál£
;

306 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_deÁu…_ac˚ss
, 
ACL_TYPE_PUB_C_RECV
);

307 if(
jtmp
 && 
	`cJSON_IsBoﬁ
(jtmp)){

308 
deÁu…_ac˚ss
.
publish_c_ªcv
 = 
	`cJSON_IsTrue
(
jtmp
);

310 
deÁu…_ac˚ss
.
publish_c_ªcv
 = 
Ál£
;

313 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_deÁu…_ac˚ss
, 
ACL_TYPE_SUB_GENERIC
);

314 if(
jtmp
 && 
	`cJSON_IsBoﬁ
(jtmp)){

315 
deÁu…_ac˚ss
.
subs¸ibe
 = 
	`cJSON_IsTrue
(
jtmp
);

317 
deÁu…_ac˚ss
.
subs¸ibe
 = 
Ál£
;

320 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_deÁu…_ac˚ss
, 
ACL_TYPE_UNSUB_GENERIC
);

321 if(
jtmp
 && 
	`cJSON_IsBoﬁ
(jtmp)){

322 
deÁu…_ac˚ss
.
unsubs¸ibe
 = 
	`cJSON_IsTrue
(
jtmp
);

324 
deÁu…_ac˚ss
.
unsubs¸ibe
 = 
Ál£
;

327  
MOSQ_ERR_SUCCESS
;

328 
	}
}

330 
	$dyn£c__gíîÆ_c⁄fig_ßve
(
cJSON
 *
åì
)

332 
cJSON
 *
j_deÁu…_ac˚ss
;

334 
j_deÁu…_ac˚ss
 = 
	`cJSON_Cª©eObje˘
();

335 if(
j_deÁu…_ac˚ss
 =
NULL
){

338 
	`cJSON_AddIãmToObje˘
(
åì
, "deÁu…ACLAc˚ss", 
j_deÁu…_ac˚ss
);

340 if(
	`cJSON_AddBoﬁToObje˘
(
j_deÁu…_ac˚ss
, 
ACL_TYPE_PUB_C_SEND
, 
deÁu…_ac˚ss
.
publish_c_£nd
Ë=
NULL


341 || 
	`cJSON_AddBoﬁToObje˘
(
j_deÁu…_ac˚ss
, 
ACL_TYPE_PUB_C_RECV
, 
deÁu…_ac˚ss
.
publish_c_ªcv
Ë=
NULL


342 || 
	`cJSON_AddBoﬁToObje˘
(
j_deÁu…_ac˚ss
, 
ACL_TYPE_SUB_GENERIC
, 
deÁu…_ac˚ss
.
subs¸ibe
Ë=
NULL


343 || 
	`cJSON_AddBoﬁToObje˘
(
j_deÁu…_ac˚ss
, 
ACL_TYPE_UNSUB_GENERIC
, 
deÁu…_ac˚ss
.
unsubs¸ibe
Ë=
NULL


349  
MOSQ_ERR_SUCCESS
;

350 
	}
}

352 
	$dyn£c__c⁄fig_lﬂd
()

354 
FILE
 *
Âå
;

355 
Êí_l
;

356 
size_t
 
Êí
;

357 *
js⁄_°r
;

358 
cJSON
 *
åì
;

361 
î∫o
 = 0;

362 
Âå
 = 
	`f›í
(
c⁄fig_fûe
, "rb");

363 if(
Âå
 =
NULL
){

364 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_ERR
, "ErrorÜoading Dynamic securityÖlugin config: File isÇotÑeadable - checkÖermissions.\n");

365  
MOSQ_ERR_ERRNO
;

367 #i‚de‡
WIN32


368 if(
î∫o
 =
ENOTDIR
 ||Éºnÿ=
EISDIR
){

369 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_ERR
, "ErrorÜoading Dynamic securityÖlugin config: Config isÇotá file.\n");

370  
MOSQ_ERR_ERRNO
;

374 
	`f£ek
(
Âå
, 0, 
SEEK_END
);

375 
Êí_l
 = 
	`·ñl
(
Âå
);

376 if(
Êí_l
 < 0){

377 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_ERR
, "Eº‹Üﬂdög Dy«mi¯£curôyÖlugö c⁄fig: %s\n", 
	`°ªº‹
(
î∫o
));

378 
	`f˛o£
(
Âå
);

379  
MOSQ_ERR_ERRNO
;

380 }if(
Êí_l
 == 0){

381 
	`f˛o£
(
Âå
);

384 
Êí
 = (
size_t
)
Êí_l
;

385 
	`f£ek
(
Âå
, 0, 
SEEK_SET
);

386 
js⁄_°r
 = 
	`mosquôto_ˇŒoc
(
Êí
+1, ());

387 if(
js⁄_°r
 =
NULL
){

388 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_ERR
, "Error: Out of memory.");

389 
	`f˛o£
(
Âå
);

390  
MOSQ_ERR_NOMEM
;

392 if(
	`‰ód
(
js⁄_°r
, 1, 
Êí
, 
Âå
) != flen){

393 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_WARNING
, "ErrorÜoading Dynamic securityÖlugin config: UnableÅoÑead file contents.\n");

394 
	`mosquôto_‰ì
(
js⁄_°r
);

395 
	`f˛o£
(
Âå
);

396  
MOSQ_ERR_ERRNO
;

398 
	`f˛o£
(
Âå
);

400 
åì
 = 
	`cJSON_P¨£
(
js⁄_°r
);

401 
	`mosquôto_‰ì
(
js⁄_°r
);

402 if(
åì
 =
NULL
){

403 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_ERR
, "ErrorÜoading Dynamic securityÖlugin config: File isÇot valid JSON.\n");

404  
MOSQ_ERR_INVAL
;

407 if(
	`dyn£c__gíîÆ_c⁄fig_lﬂd
(
åì
)

408 || 
	`dyn£c_rﬁes__c⁄fig_lﬂd
(
åì
)

409 || 
	`dyn£c_˛õ¡s__c⁄fig_lﬂd
(
åì
)

410 || 
	`dyn£c_groups__c⁄fig_lﬂd
(
åì
)

413 
	`cJSON_Dñëe
(
åì
);

414  
MOSQ_ERR_NOMEM
;

417 
	`cJSON_Dñëe
(
åì
);

419 
	}
}

422 
	$dyn£c__c⁄fig_ßve
()

424 
cJSON
 *
åì
;

425 
size_t
 
fûe_∑th_Àn
;

426 *
fûe_∑th
;

427 
FILE
 *
Âå
;

428 
size_t
 
js⁄_°r_Àn
;

429 *
js⁄_°r
;

431 
åì
 = 
	`cJSON_Cª©eObje˘
();

432 if(
åì
 =
NULL
) ;

434 if(
	`dyn£c__gíîÆ_c⁄fig_ßve
(
åì
)

435 || 
	`dyn£c_˛õ¡s__c⁄fig_ßve
(
åì
)

436 || 
	`dyn£c_groups__c⁄fig_ßve
(
åì
)

437 || 
	`dyn£c_rﬁes__c⁄fig_ßve
(
åì
)){

439 
	`cJSON_Dñëe
(
åì
);

444 
js⁄_°r
 = 
	`cJSON_Pröt
(
åì
);

445 if(
js⁄_°r
 =
NULL
){

446 
	`cJSON_Dñëe
(
åì
);

447 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_ERR
, "Error saving Dynamic securityÖlugin config: Out of memory.\n");

450 
	`cJSON_Dñëe
(
åì
);

451 
js⁄_°r_Àn
 = 
	`°æí
(
js⁄_°r
);

454 
fûe_∑th_Àn
 = 
	`°æí
(
c⁄fig_fûe
) + 1;

455 
fûe_∑th
 = 
	`mosquôto_mÆloc
(
fûe_∑th_Àn
);

456 if(
fûe_∑th
 =
NULL
){

457 
	`mosquôto_‰ì
(
js⁄_°r
);

458 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_ERR
, "Error saving Dynamic securityÖlugin config: Out of memory.\n");

461 
	`¢¥ötf
(
fûe_∑th
, 
fûe_∑th_Àn
, "%s.√w", 
c⁄fig_fûe
);

463 
Âå
 = 
	`f›í
(
fûe_∑th
, "wt");

464 if(
Âå
 =
NULL
){

465 
	`mosquôto_‰ì
(
js⁄_°r
);

466 
	`mosquôto_‰ì
(
fûe_∑th
);

467 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_ERR
, "Error saving Dynamic securityÖlugin config: File isÇot writable - checkÖermissions.\n");

470 
	`fwrôe
(
js⁄_°r
, 1, 
js⁄_°r_Àn
, 
Âå
);

471 
	`mosquôto_‰ì
(
js⁄_°r
);

472 
	`f˛o£
(
Âå
);

475 if(
	`ª«me
(
fûe_∑th
, 
c⁄fig_fûe
) < 0){

476 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_ERR
, "Eº‹ upd©ög dyn£¯c⁄fig fûe: %s", 
	`°ªº‹
(
î∫o
));

478 
	`mosquôto_‰ì
(
fûe_∑th
);

479 
	}
}

482 
	$mosquôto_∂ugö_öô
(
mosquôto_∂ugö_id_t
 *
idítifõr
, **
u£r_d©a
, 
mosquôto_›t
 *
›ti⁄s
, 
›ti⁄_cou¡
)

484 
i
;

485 
rc
;

487 
	`UNUSED
(
u£r_d©a
);

489 
i
=0; i<
›ti⁄_cou¡
; i++){

490 if(!
	`°rˇ£cmp
(
›ti⁄s
[
i
].
key
, "config_file")){

491 
c⁄fig_fûe
 = 
	`mosquôto_°rdup
(
›ti⁄s
[
i
].
vÆue
);

492 if(
c⁄fig_fûe
 =
NULL
){

493  
MOSQ_ERR_NOMEM
;

498 if(
c⁄fig_fûe
 =
NULL
){

499 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_WARNING
, "Warning: Dynamic securityÖlugin hasÇoÖlugin_opt_config_file defined. TheÖlugin willÇot beáctivated.");

500  
MOSQ_ERR_SUCCESS
;

503 
∂g_id
 = 
idítifõr
;

505 
	`dyn£c__c⁄fig_lﬂd
();

507 
rc
 = 
	`mosquôto_ˇŒback_ªgi°î
(
∂g_id
, 
MOSQ_EVT_CONTROL
, 
dyn£c_c⁄åﬁ_ˇŒback
, "$CONTROL/dy«mic-£curôy/v1", 
NULL
);

508 if(
rc
 =
MOSQ_ERR_ALREADY_EXISTS
){

509 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_ERR
, "Error: Dynamic securityÖlugin can currently only beÜoaded once.");

510 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_ERR
, "NoteÅhatÅhis wasÖreviously incorrectlyállowed but could causeÖroblems with duplicateÉntries inÅhe config.");

511 
îr‹
;

512 }if(
rc
 =
MOSQ_ERR_NOMEM
){

513 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_ERR
, "Error: Out of memory.");

514 
îr‹
;

515 }if(
rc
 !
MOSQ_ERR_SUCCESS
){

516 
îr‹
;

519 
rc
 = 
	`mosquôto_ˇŒback_ªgi°î
(
∂g_id
, 
MOSQ_EVT_BASIC_AUTH
, 
dyn£c_auth__basic_auth_ˇŒback
, 
NULL
, NULL);

520 if(
rc
 =
MOSQ_ERR_ALREADY_EXISTS
){

521 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_ERR
, "Error: Dynamic securityÖlugin can only beÜoaded once.");

522 
îr‹
;

523 }if(
rc
 =
MOSQ_ERR_NOMEM
){

524 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_ERR
, "Error: Out of memory.");

525 
îr‹
;

526 }if(
rc
 !
MOSQ_ERR_SUCCESS
){

527 
îr‹
;

530 
rc
 = 
	`mosquôto_ˇŒback_ªgi°î
(
∂g_id
, 
MOSQ_EVT_ACL_CHECK
, 
dyn£c__a˛_check_ˇŒback
, 
NULL
, NULL);

531 if(
rc
 =
MOSQ_ERR_ALREADY_EXISTS
){

532 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_ERR
, "Error: Dynamic securityÖlugin can only beÜoaded once.");

533 
îr‹
;

534 }if(
rc
 =
MOSQ_ERR_NOMEM
){

535 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_ERR
, "Error: Out of memory.");

536 
îr‹
;

537 }if(
rc
 !
MOSQ_ERR_SUCCESS
){

538 
îr‹
;

541  
MOSQ_ERR_SUCCESS
;

542 
îr‹
:

543 
	`mosquôto_‰ì
(
c⁄fig_fûe
);

544 
c⁄fig_fûe
 = 
NULL
;

545  
rc
;

546 
	}
}

548 
	$mosquôto_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
›ti⁄s
, 
›ti⁄_cou¡
)

550 
	`UNUSED
(
u£r_d©a
);

551 
	`UNUSED
(
›ti⁄s
);

552 
	`UNUSED
(
›ti⁄_cou¡
);

554 if(
∂g_id
){

555 
	`mosquôto_ˇŒback_uƒegi°î
(
∂g_id
, 
MOSQ_EVT_CONTROL
, 
dyn£c_c⁄åﬁ_ˇŒback
, "$CONTROL/dynamic-security/v1");

556 
	`mosquôto_ˇŒback_uƒegi°î
(
∂g_id
, 
MOSQ_EVT_BASIC_AUTH
, 
dyn£c_auth__basic_auth_ˇŒback
, 
NULL
);

557 
	`mosquôto_ˇŒback_uƒegi°î
(
∂g_id
, 
MOSQ_EVT_ACL_CHECK
, 
dyn£c__a˛_check_ˇŒback
, 
NULL
);

559 
	`dyn£c_groups__˛ónup
();

560 
	`dyn£c_˛õ¡s__˛ónup
();

561 
	`dyn£c_rﬁes__˛ónup
();

563 
	`mosquôto_‰ì
(
c⁄fig_fûe
);

564 
c⁄fig_fûe
 = 
NULL
;

565  
MOSQ_ERR_SUCCESS
;

566 
	}
}

574 
	$dyn£c__h™dÀ_c⁄åﬁ
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™ds
)

576 
rc
 = 
MOSQ_ERR_SUCCESS
;

577 
cJSON
 *
aôî
;

578 *
comm™d
;

579 *
c‹ªœti⁄_d©a
 = 
NULL
;

581 
	`cJSON_AºayF‹Each
(
aôî
, 
comm™ds
){

582 if(
	`cJSON_IsObje˘
(
aôî
)){

583 if(
	`js⁄_gë_°rög
(
aôî
, "comm™d", &
comm™d
, 
Ál£
Ë=
MOSQ_ERR_SUCCESS
){

584 if(
	`js⁄_gë_°rög
(
aôî
, "c‹ªœti⁄D©a", &
c‹ªœti⁄_d©a
, 
åue
Ë!
MOSQ_ERR_SUCCESS
){

585 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, 
comm™d
, "InvÆid c‹ªœti⁄D©®d©®ty≥.", 
NULL
);

586  
MOSQ_ERR_INVAL
;

590 if(!
	`°rˇ£cmp
(
comm™d
, "setDefaultACLAccess")){

591 
rc
 = 
	`dyn£c__¥o˚ss_£t_deÁu…_a˛_ac˚ss
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

592 }if(!
	`°rˇ£cmp
(
comm™d
, "getDefaultACLAccess")){

593 
rc
 = 
	`dyn£c__¥o˚ss_gë_deÁu…_a˛_ac˚ss
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

596 }if(!
	`°rˇ£cmp
(
comm™d
, "createClient")){

597 
rc
 = 
	`dyn£c_˛õ¡s__¥o˚ss_¸óã
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

598 }if(!
	`°rˇ£cmp
(
comm™d
, "deleteClient")){

599 
rc
 = 
	`dyn£c_˛õ¡s__¥o˚ss_dñëe
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

600 }if(!
	`°rˇ£cmp
(
comm™d
, "getClient")){

601 
rc
 = 
	`dyn£c_˛õ¡s__¥o˚ss_gë
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

602 }if(!
	`°rˇ£cmp
(
comm™d
, "listClients")){

603 
rc
 = 
	`dyn£c_˛õ¡s__¥o˚ss_li°
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

604 }if(!
	`°rˇ£cmp
(
comm™d
, "modifyClient")){

605 
rc
 = 
	`dyn£c_˛õ¡s__¥o˚ss_modify
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

606 }if(!
	`°rˇ£cmp
(
comm™d
, "setClientPassword")){

607 
rc
 = 
	`dyn£c_˛õ¡s__¥o˚ss_£t_∑ssw‹d
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

608 }if(!
	`°rˇ£cmp
(
comm™d
, "setClientId")){

609 
rc
 = 
	`dyn£c_˛õ¡s__¥o˚ss_£t_id
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

610 }if(!
	`°rˇ£cmp
(
comm™d
, "addClientRole")){

611 
rc
 = 
	`dyn£c_˛õ¡s__¥o˚ss_add_rﬁe
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

612 }if(!
	`°rˇ£cmp
(
comm™d
, "removeClientRole")){

613 
rc
 = 
	`dyn£c_˛õ¡s__¥o˚ss_ªmove_rﬁe
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

614 }if(!
	`°rˇ£cmp
(
comm™d
, "enableClient")){

615 
rc
 = 
	`dyn£c_˛õ¡s__¥o˚ss_íabÀ
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

616 }if(!
	`°rˇ£cmp
(
comm™d
, "disableClient")){

617 
rc
 = 
	`dyn£c_˛õ¡s__¥o˚ss_dißbÀ
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

620 }if(!
	`°rˇ£cmp
(
comm™d
, "addGroupClient")){

621 
rc
 = 
	`dyn£c_groups__¥o˚ss_add_˛õ¡
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

622 }if(!
	`°rˇ£cmp
(
comm™d
, "createGroup")){

623 
rc
 = 
	`dyn£c_groups__¥o˚ss_¸óã
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

624 }if(!
	`°rˇ£cmp
(
comm™d
, "deleteGroup")){

625 
rc
 = 
	`dyn£c_groups__¥o˚ss_dñëe
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

626 }if(!
	`°rˇ£cmp
(
comm™d
, "getGroup")){

627 
rc
 = 
	`dyn£c_groups__¥o˚ss_gë
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

628 }if(!
	`°rˇ£cmp
(
comm™d
, "listGroups")){

629 
rc
 = 
	`dyn£c_groups__¥o˚ss_li°
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

630 }if(!
	`°rˇ£cmp
(
comm™d
, "modifyGroup")){

631 
rc
 = 
	`dyn£c_groups__¥o˚ss_modify
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

632 }if(!
	`°rˇ£cmp
(
comm™d
, "removeGroupClient")){

633 
rc
 = 
	`dyn£c_groups__¥o˚ss_ªmove_˛õ¡
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

634 }if(!
	`°rˇ£cmp
(
comm™d
, "addGroupRole")){

635 
rc
 = 
	`dyn£c_groups__¥o˚ss_add_rﬁe
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

636 }if(!
	`°rˇ£cmp
(
comm™d
, "removeGroupRole")){

637 
rc
 = 
	`dyn£c_groups__¥o˚ss_ªmove_rﬁe
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

638 }if(!
	`°rˇ£cmp
(
comm™d
, "setAnonymousGroup")){

639 
rc
 = 
	`dyn£c_groups__¥o˚ss_£t_™⁄ymous_group
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

640 }if(!
	`°rˇ£cmp
(
comm™d
, "getAnonymousGroup")){

641 
rc
 = 
	`dyn£c_groups__¥o˚ss_gë_™⁄ymous_group
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

644 }if(!
	`°rˇ£cmp
(
comm™d
, "createRole")){

645 
rc
 = 
	`dyn£c_rﬁes__¥o˚ss_¸óã
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

646 }if(!
	`°rˇ£cmp
(
comm™d
, "getRole")){

647 
rc
 = 
	`dyn£c_rﬁes__¥o˚ss_gë
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

648 }if(!
	`°rˇ£cmp
(
comm™d
, "listRoles")){

649 
rc
 = 
	`dyn£c_rﬁes__¥o˚ss_li°
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

650 }if(!
	`°rˇ£cmp
(
comm™d
, "modifyRole")){

651 
rc
 = 
	`dyn£c_rﬁes__¥o˚ss_modify
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

652 }if(!
	`°rˇ£cmp
(
comm™d
, "deleteRole")){

653 
rc
 = 
	`dyn£c_rﬁes__¥o˚ss_dñëe
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

654 }if(!
	`°rˇ£cmp
(
comm™d
, "addRoleACL")){

655 
rc
 = 
	`dyn£c_rﬁes__¥o˚ss_add_a˛
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

656 }if(!
	`°rˇ£cmp
(
comm™d
, "removeRoleACL")){

657 
rc
 = 
	`dyn£c_rﬁes__¥o˚ss_ªmove_a˛
(
j_ª•⁄£s
, 
c⁄ãxt
, 
aôî
, 
c‹ªœti⁄_d©a
);

661 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, 
comm™d
, "Unknow¿comm™d", 
c‹ªœti⁄_d©a
);

662 
rc
 = 
MOSQ_ERR_INVAL
;

665 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "Unknow¿comm™d", "Missög comm™d", 
c‹ªœti⁄_d©a
);

666 
rc
 = 
MOSQ_ERR_INVAL
;

669 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "Unknow¿comm™d", "Comm™dÇŸá¿obje˘", 
c‹ªœti⁄_d©a
);

670 
rc
 = 
MOSQ_ERR_INVAL
;

674  
rc
;

675 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/rolelist.c

19 
	~"c⁄fig.h
"

21 
	~<cjs⁄/cJSON.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<uthash.h
>

25 
	~<uéi°.h
>

27 
	~"dy«mic_£curôy.h
"

28 
	~"js⁄_hñp.h
"

29 
	~"mosquôto.h
"

30 
	~"mosquôto_brokî.h
"

39 
	$rﬁñi°_cmp
(*
a
, *
b
)

41 
¥io
;

42 
dyn£c__rﬁñi°
 *
rﬁñi°_a
 = 
a
;

43 
dyn£c__rﬁñi°
 *
rﬁñi°_b
 = 
b
;

45 
¥io
 = 
rﬁñi°_b
->
¥i‹ôy
 - 
rﬁñi°_a
->priority;

46 if(
¥io
 == 0){

47  
	`°rcmp
(
rﬁñi°_a
->
rﬁíame
, 
rﬁñi°_b
->rolename);

49  
¥io
;

51 
	}
}

54 
	$dyn£c_rﬁñi°__‰ì_ôem
(
dyn£c__rﬁñi°
 **
ba£_rﬁñi°
, dyn£c__rﬁñi° *
rﬁñi°
)

56 
	`HASH_DELETE
(
hh
, *
ba£_rﬁñi°
, 
rﬁñi°
);

57 
	`mosquôto_‰ì
(
rﬁñi°
->
rﬁíame
);

58 
	`mosquôto_‰ì
(
rﬁñi°
);

59 
	}
}

61 
	$dyn£c_rﬁñi°__˛ónup
(
dyn£c__rﬁñi°
 **
ba£_rﬁñi°
)

63 
dyn£c__rﬁñi°
 *
rﬁñi°
, *
rﬁñi°_tmp
;

65 
	`HASH_ITER
(
hh
, *
ba£_rﬁñi°
, 
rﬁñi°
, 
rﬁñi°_tmp
){

66 
	`dyn£c_rﬁñi°__‰ì_ôem
(
ba£_rﬁñi°
, 
rﬁñi°
);

68 
	}
}

70 
	$dyn£c_rﬁñi°__ªmove_rﬁe
(
dyn£c__rﬁñi°
 **
ba£_rﬁñi°
, c⁄° 
dyn£c__rﬁe
 *
rﬁe
)

72 
dyn£c__rﬁñi°
 *
found_rﬁñi°
;

74 
	`HASH_FIND
(
hh
, *
ba£_rﬁñi°
, 
rﬁe
->
rﬁíame
, 
	`°æí
‘ﬁe->rﬁíame), 
found_rﬁñi°
);

75 if(
found_rﬁñi°
){

76 
	`dyn£c_rﬁñi°__‰ì_ôem
(
ba£_rﬁñi°
, 
found_rﬁñi°
);

77  
MOSQ_ERR_SUCCESS
;

79  
MOSQ_ERR_NOT_FOUND
;

81 
	}
}

84 
	$dyn£c_rﬁñi°__˛õ¡_ªmove
(
dyn£c__˛õ¡
 *
˛õ¡
, 
dyn£c__rﬁe
 *
rﬁe
)

86 
rc
;

87 
dyn£c__˛õ¡li°
 *
found_˛õ¡li°
;

89 
rc
 = 
	`dyn£c_rﬁñi°__ªmove_rﬁe
(&
˛õ¡
->
rﬁñi°
, 
rﬁe
);

90 if(
rc
) Ñc;

92 
	`HASH_FIND
(
hh
, 
rﬁe
->
˛õ¡li°
, 
˛õ¡
->
u£∫ame
, 
	`°æí
(˛õ¡->u£∫ame), 
found_˛õ¡li°
);

93 if(
found_˛õ¡li°
){

94 
	`HASH_DELETE
(
hh
, 
rﬁe
->
˛õ¡li°
, 
found_˛õ¡li°
);

95 
	`mosquôto_‰ì
(
found_˛õ¡li°
);

96  
MOSQ_ERR_SUCCESS
;

98  
MOSQ_ERR_NOT_FOUND
;

100 
	}
}

103 
	$dyn£c_rﬁñi°__group_ªmove
(
dyn£c__group
 *
group
, 
dyn£c__rﬁe
 *
rﬁe
)

105 
	`dyn£c_rﬁñi°__ªmove_rﬁe
(&
group
->
rﬁñi°
, 
rﬁe
);

106 
	`dyn£c_grou∂i°__ªmove
(&
rﬁe
->
grou∂i°
, 
group
);

107 
	}
}

110 
	$dyn£c_rﬁñi°__add
(
dyn£c__rﬁñi°
 **
ba£_rﬁñi°
, 
dyn£c__rﬁe
 *
rﬁe
, 
¥i‹ôy
)

112 
dyn£c__rﬁñi°
 *
rﬁñi°
;

114 if(
rﬁe
 =
NULL
Ë 
MOSQ_ERR_INVAL
;

116 
	`HASH_FIND
(
hh
, *
ba£_rﬁñi°
, 
rﬁe
->
rﬁíame
, 
	`°æí
‘ﬁe->rﬁíame), 
rﬁñi°
);

117 if(
rﬁñi°
){

118  
MOSQ_ERR_ALREADY_EXISTS
;

120 
rﬁñi°
 = 
	`mosquôto_ˇŒoc
(1, (
dyn£c__rﬁñi°
));

121 if(
rﬁñi°
 =
NULL
Ë 
MOSQ_ERR_NOMEM
;

123 
rﬁñi°
->
rﬁe
 =Ñole;

124 
rﬁñi°
->
¥i‹ôy
 =Öriority;

125 
rﬁñi°
->
rﬁíame
 = 
	`mosquôto_°rdup
(
rﬁe
->rolename);

126 if(
rﬁñi°
->
rﬁíame
 =
NULL
){

127 
	`mosquôto_‰ì
(
rﬁñi°
);

128  
MOSQ_ERR_NOMEM
;

130 
	`HASH_ADD_KEYPTR_INORDER
(
hh
, *
ba£_rﬁñi°
, 
rﬁe
->
rﬁíame
, 
	`°æí
‘ﬁe->rﬁíame), 
rﬁñi°
, 
rﬁñi°_cmp
);

131  
MOSQ_ERR_SUCCESS
;

133 
	}
}

136 
	$dyn£c_rﬁñi°__˛õ¡_add
(
dyn£c__˛õ¡
 *
˛õ¡
, 
dyn£c__rﬁe
 *
rﬁe
, 
¥i‹ôy
)

138 
dyn£c__rﬁñi°
 *
rﬁñi°
;

139 
rc
;

141 
rc
 = 
	`dyn£c_rﬁñi°__add
(&
˛õ¡
->
rﬁñi°
, 
rﬁe
, 
¥i‹ôy
);

142 if(
rc
) Ñc;

144 
	`HASH_FIND
(
hh
, 
˛õ¡
->
rﬁñi°
, 
rﬁe
->
rﬁíame
, 
	`°æí
(role->rolename),Ñolelist);

145 if(
rﬁñi°
 =
NULL
){

147  
MOSQ_ERR_UNKNOWN
;

150  
	`dyn£c_˛õ¡li°__add
(&
rﬁe
->
˛õ¡li°
, 
˛õ¡
, 
¥i‹ôy
);

151 
	}
}

154 
	$dyn£c_rﬁñi°__group_add
(
dyn£c__group
 *
group
, 
dyn£c__rﬁe
 *
rﬁe
, 
¥i‹ôy
)

156 
rc
;

158 
rc
 = 
	`dyn£c_rﬁñi°__add
(&
group
->
rﬁñi°
, 
rﬁe
, 
¥i‹ôy
);

159 if(
rc
) Ñc;

161  
	`dyn£c_grou∂i°__add
(&
rﬁe
->
grou∂i°
, 
group
, 
¥i‹ôy
);

162 
	}
}

165 
	$dyn£c_rﬁñi°__lﬂd_‰om_js⁄
(
cJSON
 *
comm™d
, 
dyn£c__rﬁñi°
 **
rﬁñi°
)

167 
cJSON
 *
j_rﬁes
, *
j_rﬁe
, *
j_rﬁíame
;

168 
¥i‹ôy
;

169 
dyn£c__rﬁe
 *
rﬁe
;

171 
j_rﬁes
 = 
	`cJSON_GëObje˘Iãm
(
comm™d
, "roles");

172 if(
j_rﬁes
){

173 if(
	`cJSON_IsAºay
(
j_rﬁes
)){

174 
	`cJSON_AºayF‹Each
(
j_rﬁe
, 
j_rﬁes
){

175 
j_rﬁíame
 = 
	`cJSON_GëObje˘Iãm
(
j_rﬁe
, "rolename");

176 if(
j_rﬁíame
 && 
	`cJSON_IsSåög
(j_rolename)){

177 
	`js⁄_gë_öt
(
j_rﬁe
, "¥i‹ôy", &
¥i‹ôy
, 
åue
, -1);

178 
rﬁe
 = 
	`dyn£c_rﬁes__föd
(
j_rﬁíame
->
vÆue°rög
);

179 if(
rﬁe
){

180 
	`dyn£c_rﬁñi°__add
(
rﬁñi°
, 
rﬁe
, 
¥i‹ôy
);

182 
	`dyn£c_rﬁñi°__˛ónup
(
rﬁñi°
);

183  
MOSQ_ERR_NOT_FOUND
;

186  
MOSQ_ERR_INVAL
;

189  
MOSQ_ERR_SUCCESS
;

191  
MOSQ_ERR_INVAL
;

194  
ERR_LIST_NOT_FOUND
;

196 
	}
}

199 
cJSON
 *
	$dyn£c_rﬁñi°__Æl_to_js⁄
(
dyn£c__rﬁñi°
 *
ba£_rﬁñi°
)

201 
dyn£c__rﬁñi°
 *
rﬁñi°
, *
rﬁñi°_tmp
;

202 
cJSON
 *
j_rﬁes
, *
j_rﬁe
;

204 
j_rﬁes
 = 
	`cJSON_Cª©eAºay
();

205 if(
j_rﬁes
 =
NULL
)  NULL;

207 
	`HASH_ITER
(
hh
, 
ba£_rﬁñi°
, 
rﬁñi°
, 
rﬁñi°_tmp
){

208 
j_rﬁe
 = 
	`cJSON_Cª©eObje˘
();

209 if(
j_rﬁe
 =
NULL
){

210 
	`cJSON_Dñëe
(
j_rﬁes
);

211  
NULL
;

213 
	`cJSON_AddIãmToAºay
(
j_rﬁes
, 
j_rﬁe
);

215 if(
	`cJSON_AddSåögToObje˘
(
j_rﬁe
, "rﬁíame", 
rﬁñi°
->
rﬁe
->
rﬁíame
Ë=
NULL


216 || (
rﬁñi°
->
¥i‹ôy
 !-1 && 
	`cJSON_AddI¡ToObje˘
(
j_rﬁe
, "¥i‹ôy",Ñﬁñi°->¥i‹ôyË=
NULL
)

219 
	`cJSON_Dñëe
(
j_rﬁes
);

220  
NULL
;

223  
j_rﬁes
;

224 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/roles.c

19 
	~"c⁄fig.h
"

21 
	~<cjs⁄/cJSON.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<uthash.h
>

25 
	~<uéi°.h
>

27 #i‚de‡
WIN32


28 
	~<°rögs.h
>

31 
	~"dy«mic_£curôy.h
"

32 
	~"js⁄_hñp.h
"

33 
	~"mosquôto.h
"

34 
	~"mosquôto_brokî.h
"

37 
cJSON
 *
add_rﬁe_to_js⁄
(
dyn£c__rﬁe
 *
rﬁe
, 
boﬁ
 
vîbo£
);

38 
rﬁe__ªmove_Æl_˛õ¡s
(
dyn£c__rﬁe
 *
rﬁe
);

46 
dyn£c__rﬁe
 *
	gloˇl_rﬁes
 = 
NULL
;

55 
	$rﬁe_cmp
(*
a
, *
b
)

57 
dyn£c__rﬁe
 *
rﬁe_a
 = 
a
;

58 
dyn£c__rﬁe
 *
rﬁe_b
 = 
b
;

60  
	`°rcmp
(
rﬁe_a
->
rﬁíame
, 
rﬁe_b
->rolename);

61 
	}
}

64 
	$rﬁe__‰ì_a˛
(
dyn£c__a˛
 **
a˛
, dyn£c__a˛ *
ôem
)

66 
	`HASH_DELETE
(
hh
, *
a˛
, 
ôem
);

67 
	`mosquôto_‰ì
(
ôem
->
t›ic
);

68 
	`mosquôto_‰ì
(
ôem
);

69 
	}
}

71 
	$rﬁe__‰ì_Æl_a˛s
(
dyn£c__a˛
 **
a˛
)

73 
dyn£c__a˛
 *
ôî
, *
tmp
 = 
NULL
;

75 
	`HASH_ITER
(
hh
, *
a˛
, 
ôî
, 
tmp
){

76 
	`rﬁe__‰ì_a˛
(
a˛
, 
ôî
);

78 
	}
}

80 
	$rﬁe__‰ì_ôem
(
dyn£c__rﬁe
 *
rﬁe
, 
boﬁ
 
ªmove_‰om_hash
)

82 if(
ªmove_‰om_hash
){

83 
	`HASH_DEL
(
loˇl_rﬁes
, 
rﬁe
);

85 
	`dyn£c_˛õ¡li°__˛ónup
(&
rﬁe
->
˛õ¡li°
);

86 
	`dyn£c_grou∂i°__˛ónup
(&
rﬁe
->
grou∂i°
);

87 
	`mosquôto_‰ì
(
rﬁe
->
ãxt_«me
);

88 
	`mosquôto_‰ì
(
rﬁe
->
ãxt_des¸ùti⁄
);

89 
	`mosquôto_‰ì
(
rﬁe
->
rﬁíame
);

90 
	`rﬁe__‰ì_Æl_a˛s
(&
rﬁe
->
a˛s
.
publish_c_£nd
);

91 
	`rﬁe__‰ì_Æl_a˛s
(&
rﬁe
->
a˛s
.
publish_c_ªcv
);

92 
	`rﬁe__‰ì_Æl_a˛s
(&
rﬁe
->
a˛s
.
subs¸ibe_lôîÆ
);

93 
	`rﬁe__‰ì_Æl_a˛s
(&
rﬁe
->
a˛s
.
subs¸ibe_∑âîn
);

94 
	`rﬁe__‰ì_Æl_a˛s
(&
rﬁe
->
a˛s
.
unsubs¸ibe_lôîÆ
);

95 
	`rﬁe__‰ì_Æl_a˛s
(&
rﬁe
->
a˛s
.
unsubs¸ibe_∑âîn
);

96 
	`mosquôto_‰ì
(
rﬁe
);

97 
	}
}

99 
dyn£c__rﬁe
 *
	$dyn£c_rﬁes__föd
(c⁄° *
rﬁíame
)

101 
dyn£c__rﬁe
 *
rﬁe
 = 
NULL
;

103 if(
rﬁíame
){

104 
	`HASH_FIND
(
hh
, 
loˇl_rﬁes
, 
rﬁíame
, 
	`°æí
‘ﬁíame), 
rﬁe
);

106  
rﬁe
;

107 
	}
}

110 
	$dyn£c_rﬁes__˛ónup
()

112 
dyn£c__rﬁe
 *
rﬁe
, *
rﬁe_tmp
 = 
NULL
;

114 
	`HASH_ITER
(
hh
, 
loˇl_rﬁes
, 
rﬁe
, 
rﬁe_tmp
){

115 
	`rﬁe__‰ì_ôem
(
rﬁe
, 
åue
);

117 
	}
}

120 
	$rﬁe__kick_Æl
(
dyn£c__rﬁe
 *
rﬁe
)

122 
dyn£c__grou∂i°
 *
grou∂i°
, *
grou∂i°_tmp
 = 
NULL
;

124 
	`dyn£c_˛õ¡li°__kick_Æl
(
rﬁe
->
˛õ¡li°
);

126 
	`HASH_ITER
(
hh
, 
rﬁe
->
grou∂i°
, grou∂i°, 
grou∂i°_tmp
){

127 if(
grou∂i°
->
group
 =
dyn£c_™⁄ymous_group
){

128 
	`mosquôto_kick_˛õ¡_by_u£∫ame
(
NULL
, 
Ál£
);

130 
	`dyn£c_˛õ¡li°__kick_Æl
(
grou∂i°
->
group
->
˛õ¡li°
);

132 
	}
}

142 
	$add_sögÀ_a˛_to_js⁄
(
cJSON
 *
j_¨øy
, c⁄° *
a˛_ty≥
, 
dyn£c__a˛
 *
a˛
)

144 
dyn£c__a˛
 *
ôî
, *
tmp
 = 
NULL
;

145 
cJSON
 *
j_a˛
;

147 
	`HASH_ITER
(
hh
, 
a˛
, 
ôî
, 
tmp
){

148 
j_a˛
 = 
	`cJSON_Cª©eObje˘
();

149 if(
j_a˛
 =
NULL
){

152 
	`cJSON_AddIãmToAºay
(
j_¨øy
, 
j_a˛
);

154 if(
	`cJSON_AddSåögToObje˘
(
j_a˛
, "a˛ty≥", 
a˛_ty≥
Ë=
NULL


155 || 
	`cJSON_AddSåögToObje˘
(
j_a˛
, "t›ic", 
ôî
->
t›ic
Ë=
NULL


156 || 
	`cJSON_AddI¡ToObje˘
(
j_a˛
, "¥i‹ôy", 
ôî
->
¥i‹ôy
Ë=
NULL


157 || 
	`cJSON_AddBoﬁToObje˘
(
j_a˛
, "Ælow", 
ôî
->
Ælow
Ë=
NULL


166 
	}
}

168 
	$add_a˛s_to_js⁄
(
cJSON
 *
j_rﬁe
, 
dyn£c__rﬁe
 *
rﬁe
)

170 
cJSON
 *
j_a˛s
;

172 if((
j_a˛s
 = 
	`cJSON_AddAºayToObje˘
(
j_rﬁe
, "a˛s")Ë=
NULL
){

176 if(
	`add_sögÀ_a˛_to_js⁄
(
j_a˛s
, 
ACL_TYPE_PUB_C_SEND
, 
rﬁe
->
a˛s
.
publish_c_£nd
Ë!
MOSQ_ERR_SUCCESS


177 || 
	`add_sögÀ_a˛_to_js⁄
(
j_a˛s
, 
ACL_TYPE_PUB_C_RECV
, 
rﬁe
->
a˛s
.
publish_c_ªcv
Ë!
MOSQ_ERR_SUCCESS


178 || 
	`add_sögÀ_a˛_to_js⁄
(
j_a˛s
, 
ACL_TYPE_SUB_LITERAL
, 
rﬁe
->
a˛s
.
subs¸ibe_lôîÆ
Ë!
MOSQ_ERR_SUCCESS


179 || 
	`add_sögÀ_a˛_to_js⁄
(
j_a˛s
, 
ACL_TYPE_SUB_PATTERN
, 
rﬁe
->
a˛s
.
subs¸ibe_∑âîn
Ë!
MOSQ_ERR_SUCCESS


180 || 
	`add_sögÀ_a˛_to_js⁄
(
j_a˛s
, 
ACL_TYPE_UNSUB_LITERAL
, 
rﬁe
->
a˛s
.
unsubs¸ibe_lôîÆ
Ë!
MOSQ_ERR_SUCCESS


181 || 
	`add_sögÀ_a˛_to_js⁄
(
j_a˛s
, 
ACL_TYPE_UNSUB_PATTERN
, 
rﬁe
->
a˛s
.
unsubs¸ibe_∑âîn
Ë!
MOSQ_ERR_SUCCESS


187 
	}
}

189 
	$dyn£c_rﬁes__c⁄fig_ßve
(
cJSON
 *
åì
)

191 
cJSON
 *
j_rﬁes
, *
j_rﬁe
;

192 
dyn£c__rﬁe
 *
rﬁe
, *
rﬁe_tmp
 = 
NULL
;

194 if((
j_rﬁes
 = 
	`cJSON_AddAºayToObje˘
(
åì
, "rﬁes")Ë=
NULL
){

198 
	`HASH_ITER
(
hh
, 
loˇl_rﬁes
, 
rﬁe
, 
rﬁe_tmp
){

199 
j_rﬁe
 = 
	`add_rﬁe_to_js⁄
(
rﬁe
, 
åue
);

200 if(
j_rﬁe
 =
NULL
){

203 
	`cJSON_AddIãmToAºay
(
j_rﬁes
, 
j_rﬁe
);

207 
	}
}

210 
	$ö£π_a˛_cmp
(
dyn£c__a˛
 *
a
, dyn£c__a˛ *
b
)

212  
b
->
¥i‹ôy
 - 
a
->priority;

213 
	}
}

216 
	$dyn£c_rﬁes__a˛_lﬂd
(
cJSON
 *
j_a˛s
, c⁄° *
key
, 
dyn£c__a˛
 **
a˛li°
)

218 
cJSON
 *
j_a˛
, *
j_ty≥
, *
jtmp
;

219 
dyn£c__a˛
 *
a˛
;

221 
	`cJSON_AºayF‹Each
(
j_a˛
, 
j_a˛s
){

222 
j_ty≥
 = 
	`cJSON_GëObje˘Iãm
(
j_a˛
, "acltype");

223 if(
j_ty≥
 =
NULL
 || !
	`cJSON_IsSåög
(j_ty≥Ë|| 
	`°rˇ£cmp
(j_ty≥->
vÆue°rög
, 
key
) != 0){

226 
a˛
 = 
	`mosquôto_ˇŒoc
(1, (
dyn£c__a˛
));

227 if(
a˛
 =
NULL
){

231 
	`js⁄_gë_öt
(
j_a˛
, "¥i‹ôy", &
a˛
->
¥i‹ôy
, 
åue
, 0);

232 
	`js⁄_gë_boﬁ
(
j_a˛
, "Ælow", &
a˛
->
Ælow
, 
åue
, 
Ál£
);

234 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_a˛
, "allow");

235 if(
jtmp
 && 
	`cJSON_IsBoﬁ
(jtmp)){

236 
a˛
->
Ælow
 = 
	`cJSON_IsTrue
(
jtmp
);

239 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_a˛
, "topic");

240 if(
jtmp
 && 
	`cJSON_IsSåög
(jtmp)){

241 
a˛
->
t›ic
 = 
	`mosquôto_°rdup
(
jtmp
->
vÆue°rög
);

244 if(
a˛
->
t›ic
 =
NULL
){

245 
	`mosquôto_‰ì
(
a˛
);

249 
	`HASH_ADD_KEYPTR_INORDER
(
hh
, *
a˛li°
, 
a˛
->
t›ic
, 
	`°æí
◊˛->t›ic),á˛, 
ö£π_a˛_cmp
);

253 
	}
}

256 
	$dyn£c_rﬁes__c⁄fig_lﬂd
(
cJSON
 *
åì
)

258 
cJSON
 *
j_rﬁes
, *
j_rﬁe
, *
jtmp
, *
j_a˛s
;

259 
dyn£c__rﬁe
 *
rﬁe
;

261 
j_rﬁes
 = 
	`cJSON_GëObje˘Iãm
(
åì
, "roles");

262 if(
j_rﬁes
 =
NULL
){

266 if(
	`cJSON_IsAºay
(
j_rﬁes
Ë=
Ál£
){

270 
	`cJSON_AºayF‹Each
(
j_rﬁe
, 
j_rﬁes
){

271 if(
	`cJSON_IsObje˘
(
j_rﬁe
Ë=
åue
){

272 
rﬁe
 = 
	`mosquôto_ˇŒoc
(1, (
dyn£c__rﬁe
));

273 if(
rﬁe
 =
NULL
){

274  
MOSQ_ERR_NOMEM
;

278 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_rﬁe
, "rolename");

279 if(
jtmp
 =
NULL
){

280 
	`mosquôto_‰ì
(
rﬁe
);

283 
rﬁe
->
rﬁíame
 = 
	`mosquôto_°rdup
(
jtmp
->
vÆue°rög
);

284 if(
rﬁe
->
rﬁíame
 =
NULL
){

285 
	`mosquôto_‰ì
(
rﬁe
);

290 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_rﬁe
, "textname");

291 if(
jtmp
 !
NULL
){

292 
rﬁe
->
ãxt_«me
 = 
	`mosquôto_°rdup
(
jtmp
->
vÆue°rög
);

293 if(
rﬁe
->
ãxt_«me
 =
NULL
){

294 
	`mosquôto_‰ì
(
rﬁe
->
rﬁíame
);

295 
	`mosquôto_‰ì
(
rﬁe
);

301 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
j_rﬁe
, "textdescription");

302 if(
jtmp
 !
NULL
){

303 
rﬁe
->
ãxt_des¸ùti⁄
 = 
	`mosquôto_°rdup
(
jtmp
->
vÆue°rög
);

304 if(
rﬁe
->
ãxt_des¸ùti⁄
 =
NULL
){

305 
	`mosquôto_‰ì
(
rﬁe
->
ãxt_«me
);

306 
	`mosquôto_‰ì
(
rﬁe
->
rﬁíame
);

307 
	`mosquôto_‰ì
(
rﬁe
);

313 
j_a˛s
 = 
	`cJSON_GëObje˘Iãm
(
j_rﬁe
, "acls");

314 if(
j_a˛s
 && 
	`cJSON_IsAºay
(j_acls)){

315 if(
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_PUB_C_SEND
, &
rﬁe
->
a˛s
.
publish_c_£nd
) != 0

316 || 
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_PUB_C_RECV
, &
rﬁe
->
a˛s
.
publish_c_ªcv
) != 0

317 || 
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_SUB_LITERAL
, &
rﬁe
->
a˛s
.
subs¸ibe_lôîÆ
) != 0

318 || 
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_SUB_PATTERN
, &
rﬁe
->
a˛s
.
subs¸ibe_∑âîn
) != 0

319 || 
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_UNSUB_LITERAL
, &
rﬁe
->
a˛s
.
unsubs¸ibe_lôîÆ
) != 0

320 || 
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_UNSUB_PATTERN
, &
rﬁe
->
a˛s
.
unsubs¸ibe_∑âîn
) != 0

323 
	`mosquôto_‰ì
(
rﬁe
->
rﬁíame
);

324 
	`mosquôto_‰ì
(
rﬁe
);

329 
	`HASH_ADD_KEYPTR
(
hh
, 
loˇl_rﬁes
, 
rﬁe
->
rﬁíame
, 
	`°æí
(role->rolename),Ñole);

332 
	`HASH_SORT
(
loˇl_rﬁes
, 
rﬁe_cmp
);

335 
	}
}

338 
	$dyn£c_rﬁes__¥o˚ss_¸óã
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

340 *
rﬁíame
;

341 *
ãxt_«me
, *
ãxt_des¸ùti⁄
;

342 
dyn£c__rﬁe
 *
rﬁe
;

343 
rc
 = 
MOSQ_ERR_SUCCESS
;

344 
cJSON
 *
j_a˛s
;

345 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

347 if(
	`js⁄_gë_°rög
(
comm™d
, "rﬁíame", &
rﬁíame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

348 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãRﬁe", "InvÆid/missögÑﬁíame", 
c‹ªœti⁄_d©a
);

349  
MOSQ_ERR_INVAL
;

351 if(
	`mosquôto_vÆid©e_utf8
(
rﬁíame
, ()
	`°æí
‘ﬁíame)Ë!
MOSQ_ERR_SUCCESS
){

352 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãRﬁe", "Rﬁê«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

353  
MOSQ_ERR_INVAL
;

356 if(
	`js⁄_gë_°rög
(
comm™d
, "ãxäame", &
ãxt_«me
, 
åue
Ë!
MOSQ_ERR_SUCCESS
){

357 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãRﬁe", "InvÆid/missögÅexäame", 
c‹ªœti⁄_d©a
);

358  
MOSQ_ERR_INVAL
;

361 if(
	`js⁄_gë_°rög
(
comm™d
, "ãxtdes¸ùti⁄", &
ãxt_des¸ùti⁄
, 
åue
Ë!
MOSQ_ERR_SUCCESS
){

362 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãRﬁe", "InvÆid/missögÅextdes¸ùti⁄", 
c‹ªœti⁄_d©a
);

363  
MOSQ_ERR_INVAL
;

366 
rﬁe
 = 
	`dyn£c_rﬁes__föd
(
rﬁíame
);

367 if(
rﬁe
){

368 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãRﬁe", "RﬁêÆªadyÉxi°s", 
c‹ªœti⁄_d©a
);

369  
MOSQ_ERR_SUCCESS
;

372 
rﬁe
 = 
	`mosquôto_ˇŒoc
(1, (
dyn£c__rﬁe
));

373 if(
rﬁe
 =
NULL
){

374 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãRﬁe", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

375  
MOSQ_ERR_NOMEM
;

377 
rﬁe
->
rﬁíame
 = 
	`mosquôto_°rdup
(rolename);

378 if(
rﬁe
->
rﬁíame
 =
NULL
){

379 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãRﬁe", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

380 
rc
 = 
MOSQ_ERR_NOMEM
;

381 
îr‹
;

383 if(
ãxt_«me
){

384 
rﬁe
->
ãxt_«me
 = 
	`mosquôto_°rdup
(text_name);

385 if(
rﬁe
->
ãxt_«me
 =
NULL
){

386 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãRﬁe", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

387 
rc
 = 
MOSQ_ERR_NOMEM
;

388 
îr‹
;

391 if(
ãxt_des¸ùti⁄
){

392 
rﬁe
->
ãxt_des¸ùti⁄
 = 
	`mosquôto_°rdup
(text_description);

393 if(
rﬁe
->
ãxt_des¸ùti⁄
 =
NULL
){

394 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãRﬁe", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

395 
rc
 = 
MOSQ_ERR_NOMEM
;

396 
îr‹
;

401 
j_a˛s
 = 
	`cJSON_GëObje˘Iãm
(
comm™d
, "acls");

402 if(
j_a˛s
 && 
	`cJSON_IsAºay
(j_acls)){

403 if(
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_PUB_C_SEND
, &
rﬁe
->
a˛s
.
publish_c_£nd
) != 0

404 || 
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_PUB_C_RECV
, &
rﬁe
->
a˛s
.
publish_c_ªcv
) != 0

405 || 
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_SUB_LITERAL
, &
rﬁe
->
a˛s
.
subs¸ibe_lôîÆ
) != 0

406 || 
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_SUB_PATTERN
, &
rﬁe
->
a˛s
.
subs¸ibe_∑âîn
) != 0

407 || 
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_UNSUB_LITERAL
, &
rﬁe
->
a˛s
.
unsubs¸ibe_lôîÆ
) != 0

408 || 
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_UNSUB_PATTERN
, &
rﬁe
->
a˛s
.
unsubs¸ibe_∑âîn
) != 0

411 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãRﬁe", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

412 
rc
 = 
MOSQ_ERR_NOMEM
;

413 
îr‹
;

418 
	`HASH_ADD_KEYPTR_INORDER
(
hh
, 
loˇl_rﬁes
, 
rﬁe
->
rﬁíame
, 
	`°æí
‘ﬁe->rﬁíame),Ñﬁe, 
rﬁe_cmp
);

420 
	`dyn£c__c⁄fig_ßve
();

422 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "¸óãRﬁe", 
NULL
, 
c‹ªœti⁄_d©a
);

424 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

425 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

426 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | createRole |Ñolename=%s",

427 
admö_˛õ¡id
, 
admö_u£∫ame
, 
rﬁíame
);

429  
MOSQ_ERR_SUCCESS
;

430 
îr‹
:

431 if(
rﬁe
){

432 
	`rﬁe__‰ì_ôem
(
rﬁe
, 
Ál£
);

434  
rc
;

435 
	}
}

438 
	$rﬁe__ªmove_Æl_˛õ¡s
(
dyn£c__rﬁe
 *
rﬁe
)

440 
dyn£c__˛õ¡li°
 *
˛õ¡li°
, *
˛õ¡li°_tmp
 = 
NULL
;

442 
	`HASH_ITER
(
hh
, 
rﬁe
->
˛õ¡li°
, clõ¡li°, 
˛õ¡li°_tmp
){

443 
	`mosquôto_kick_˛õ¡_by_u£∫ame
(
˛õ¡li°
->
˛õ¡
->
u£∫ame
, 
Ál£
);

445 
	`dyn£c_rﬁñi°__˛õ¡_ªmove
(
˛õ¡li°
->
˛õ¡
, 
rﬁe
);

447 
	}
}

449 
	$rﬁe__ªmove_Æl_groups
(
dyn£c__rﬁe
 *
rﬁe
)

451 
dyn£c__grou∂i°
 *
grou∂i°
, *
grou∂i°_tmp
 = 
NULL
;

453 
	`HASH_ITER
(
hh
, 
rﬁe
->
grou∂i°
, grou∂i°, 
grou∂i°_tmp
){

454 if(
grou∂i°
->
group
 =
dyn£c_™⁄ymous_group
){

455 
	`mosquôto_kick_˛õ¡_by_u£∫ame
(
NULL
, 
Ál£
);

457 
	`dyn£c_˛õ¡li°__kick_Æl
(
grou∂i°
->
group
->
˛õ¡li°
);

459 
	`dyn£c_rﬁñi°__group_ªmove
(
grou∂i°
->
group
, 
rﬁe
);

461 
	}
}

463 
	$dyn£c_rﬁes__¥o˚ss_dñëe
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

465 *
rﬁíame
;

466 
dyn£c__rﬁe
 *
rﬁe
;

467 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

469 if(
	`js⁄_gë_°rög
(
comm™d
, "rﬁíame", &
rﬁíame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

470 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "dñëeRﬁe", "InvÆid/missögÑﬁíame", 
c‹ªœti⁄_d©a
);

471  
MOSQ_ERR_INVAL
;

473 if(
	`mosquôto_vÆid©e_utf8
(
rﬁíame
, ()
	`°æí
‘ﬁíame)Ë!
MOSQ_ERR_SUCCESS
){

474 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "dñëeRﬁe", "Rﬁê«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

475  
MOSQ_ERR_INVAL
;

478 
rﬁe
 = 
	`dyn£c_rﬁes__föd
(
rﬁíame
);

479 if(
rﬁe
){

480 
	`rﬁe__ªmove_Æl_˛õ¡s
(
rﬁe
);

481 
	`rﬁe__ªmove_Æl_groups
(
rﬁe
);

482 
	`rﬁe__‰ì_ôem
(
rﬁe
, 
åue
);

483 
	`dyn£c__c⁄fig_ßve
();

484 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "dñëeRﬁe", 
NULL
, 
c‹ªœti⁄_d©a
);

486 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

487 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

488 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | deleteRole |Ñolename=%s",

489 
admö_˛õ¡id
, 
admö_u£∫ame
, 
rﬁíame
);

491  
MOSQ_ERR_SUCCESS
;

493 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "dñëeRﬁe", "RﬁênŸ found", 
c‹ªœti⁄_d©a
);

494  
MOSQ_ERR_SUCCESS
;

496 
	}
}

499 
cJSON
 *
	$add_rﬁe_to_js⁄
(
dyn£c__rﬁe
 *
rﬁe
, 
boﬁ
 
vîbo£
)

501 
cJSON
 *
j_rﬁe
 = 
NULL
;

503 if(
vîbo£
){

504 
j_rﬁe
 = 
	`cJSON_Cª©eObje˘
();

505 if(
j_rﬁe
 =
NULL
){

506  
NULL
;

509 if(
	`cJSON_AddSåögToObje˘
(
j_rﬁe
, "rﬁíame", 
rﬁe
->
rﬁíame
Ë=
NULL


510 || (
rﬁe
->
ãxt_«me
 && 
	`cJSON_AddSåögToObje˘
(
j_rﬁe
, "ãxäame",Ñﬁe->ãxt_«meË=
NULL
)

511 || (
rﬁe
->
ãxt_des¸ùti⁄
 && 
	`cJSON_AddSåögToObje˘
(
j_rﬁe
, "ãxtdes¸ùti⁄",Ñﬁe->ãxt_des¸ùti⁄Ë=
NULL
)

514 
	`cJSON_Dñëe
(
j_rﬁe
);

515  
NULL
;

517 if(
	`add_a˛s_to_js⁄
(
j_rﬁe
, 
rﬁe
)){

518 
	`cJSON_Dñëe
(
j_rﬁe
);

519  
NULL
;

522 
j_rﬁe
 = 
	`cJSON_Cª©eSåög
(
rﬁe
->
rﬁíame
);

523 if(
j_rﬁe
 =
NULL
){

524  
NULL
;

527  
j_rﬁe
;

528 
	}
}

530 
	$dyn£c_rﬁes__¥o˚ss_li°
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

532 
boﬁ
 
vîbo£
;

533 
dyn£c__rﬁe
 *
rﬁe
, *
rﬁe_tmp
 = 
NULL
;

534 
cJSON
 *
åì
, *
j_rﬁes
, *
j_rﬁe
, *
j_d©a
;

535 
i
, 
cou¡
, 
off£t
;

536 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

538 
	`js⁄_gë_boﬁ
(
comm™d
, "vîbo£", &
vîbo£
, 
åue
, 
Ál£
);

539 
	`js⁄_gë_öt
(
comm™d
, "cou¡", &
cou¡
, 
åue
, -1);

540 
	`js⁄_gë_öt
(
comm™d
, "off£t", &
off£t
, 
åue
, 0);

542 
åì
 = 
	`cJSON_Cª©eObje˘
();

543 if(
åì
 =
NULL
){

544 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "li°Rﬁes", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

545  
MOSQ_ERR_NOMEM
;

548 if(
	`cJSON_AddSåögToObje˘
(
åì
, "comm™d", "li°Rﬁes"Ë=
NULL


549 || (
j_d©a
 = 
	`cJSON_AddObje˘ToObje˘
(
åì
, "d©a")Ë=
NULL


550 || 
	`cJSON_AddI¡ToObje˘
(
j_d©a
, "tŸÆCou¡", ()
	`HASH_CNT
(
hh
, 
loˇl_rﬁes
)Ë=
NULL


551 || (
j_rﬁes
 = 
	`cJSON_AddAºayToObje˘
(
j_d©a
, "rﬁes")Ë=
NULL


552 || (
c‹ªœti⁄_d©a
 && 
	`cJSON_AddSåögToObje˘
(
åì
, "c‹ªœti⁄D©a", c‹ªœti⁄_d©aË=
NULL
)

555 
	`cJSON_Dñëe
(
åì
);

556 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "li°Rﬁes", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

557  
MOSQ_ERR_NOMEM
;

560 
i
 = 0;

561 
	`HASH_ITER
(
hh
, 
loˇl_rﬁes
, 
rﬁe
, 
rﬁe_tmp
){

562 if(
i
>=
off£t
){

563 
j_rﬁe
 = 
	`add_rﬁe_to_js⁄
(
rﬁe
, 
vîbo£
);

564 if(
j_rﬁe
 =
NULL
){

565 
	`cJSON_Dñëe
(
åì
);

566 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "li°Rﬁes", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

567  
MOSQ_ERR_NOMEM
;

569 
	`cJSON_AddIãmToAºay
(
j_rﬁes
, 
j_rﬁe
);

571 if(
cou¡
 >= 0){

572 
cou¡
--;

573 if(
cou¡
 <= 0){

578 
i
++;

581 
	`cJSON_AddIãmToAºay
(
j_ª•⁄£s
, 
åì
);

583 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

584 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

585 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s |ÜistRoles | verbose=%s | count=%d | offset=%d",

586 
admö_˛õ¡id
, 
admö_u£∫ame
, 
vîbo£
?"åue":"Ál£", 
cou¡
, 
off£t
);

588  
MOSQ_ERR_SUCCESS
;

589 
	}
}

592 
	$dyn£c_rﬁes__¥o˚ss_add_a˛
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

594 *
rﬁíame
;

595 *
t›ic
;

596 
dyn£c__rﬁe
 *
rﬁe
;

597 
cJSON
 *
jtmp
, *
j_a˛ty≥
;

598 
dyn£c__a˛
 **
a˛li°
, *
a˛
;

599 
rc
;

600 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

602 if(
	`js⁄_gë_°rög
(
comm™d
, "rﬁíame", &
rﬁíame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

603 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addRﬁeACL", "InvÆid/missögÑﬁíame", 
c‹ªœti⁄_d©a
);

604  
MOSQ_ERR_INVAL
;

606 if(
	`mosquôto_vÆid©e_utf8
(
rﬁíame
, ()
	`°æí
‘ﬁíame)Ë!
MOSQ_ERR_SUCCESS
){

607 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addRﬁeACL", "Rﬁê«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

608  
MOSQ_ERR_INVAL
;

611 
rﬁe
 = 
	`dyn£c_rﬁes__föd
(
rﬁíame
);

612 if(
rﬁe
 =
NULL
){

613 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addRﬁeACL", "RﬁênŸ found", 
c‹ªœti⁄_d©a
);

614  
MOSQ_ERR_SUCCESS
;

617 
j_a˛ty≥
 = 
	`cJSON_GëObje˘Iãm
(
comm™d
, "acltype");

618 if(
j_a˛ty≥
 =
NULL
 || !
	`cJSON_IsSåög
(j_acltype)){

619 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addRﬁeACL", "InvÆid/missögá˛ty≥", 
c‹ªœti⁄_d©a
);

620  
MOSQ_ERR_SUCCESS
;

622 if(!
	`°rˇ£cmp
(
j_a˛ty≥
->
vÆue°rög
, 
ACL_TYPE_PUB_C_SEND
)){

623 
a˛li°
 = &
rﬁe
->
a˛s
.
publish_c_£nd
;

624 }if(!
	`°rˇ£cmp
(
j_a˛ty≥
->
vÆue°rög
, 
ACL_TYPE_PUB_C_RECV
)){

625 
a˛li°
 = &
rﬁe
->
a˛s
.
publish_c_ªcv
;

626 }if(!
	`°rˇ£cmp
(
j_a˛ty≥
->
vÆue°rög
, 
ACL_TYPE_SUB_LITERAL
)){

627 
a˛li°
 = &
rﬁe
->
a˛s
.
subs¸ibe_lôîÆ
;

628 }if(!
	`°rˇ£cmp
(
j_a˛ty≥
->
vÆue°rög
, 
ACL_TYPE_SUB_PATTERN
)){

629 
a˛li°
 = &
rﬁe
->
a˛s
.
subs¸ibe_∑âîn
;

630 }if(!
	`°rˇ£cmp
(
j_a˛ty≥
->
vÆue°rög
, 
ACL_TYPE_UNSUB_LITERAL
)){

631 
a˛li°
 = &
rﬁe
->
a˛s
.
unsubs¸ibe_lôîÆ
;

632 }if(!
	`°rˇ£cmp
(
j_a˛ty≥
->
vÆue°rög
, 
ACL_TYPE_UNSUB_PATTERN
)){

633 
a˛li°
 = &
rﬁe
->
a˛s
.
unsubs¸ibe_∑âîn
;

635 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addRﬁeACL", "Unknow¿a˛ty≥", 
c‹ªœti⁄_d©a
);

636  
MOSQ_ERR_SUCCESS
;

639 
jtmp
 = 
	`cJSON_GëObje˘Iãm
(
comm™d
, "topic");

640 if(
jtmp
 && 
	`cJSON_IsSåög
(jtmp)){

641 if(
	`mosquôto_vÆid©e_utf8
(
jtmp
->
vÆue°rög
, ()
	`°æí
(jtmp->vÆue°rög)Ë!
MOSQ_ERR_SUCCESS
){

642 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addRﬁeACL", "T›i¯nŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

643  
MOSQ_ERR_INVAL
;

645 
rc
 = 
	`mosquôto_sub_t›ic_check
(
jtmp
->
vÆue°rög
);

646 if(
rc
 !
MOSQ_ERR_SUCCESS
){

647 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addRﬁeACL", "InvÆid ACLÅ›ic", 
c‹ªœti⁄_d©a
);

648  
MOSQ_ERR_INVAL
;

650 
t›ic
 = 
	`mosquôto_°rdup
(
jtmp
->
vÆue°rög
);

651 if(
t›ic
 =
NULL
){

652 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addRﬁeACL", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

653  
MOSQ_ERR_SUCCESS
;

656 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addRﬁeACL", "InvÆid/missögÅ›ic", 
c‹ªœti⁄_d©a
);

657  
MOSQ_ERR_SUCCESS
;

660 
	`HASH_FIND
(
hh
, *
a˛li°
, 
t›ic
, 
	`°æí
—›ic), 
a˛
);

661 if(
a˛
){

662 
	`mosquôto_‰ì
(
t›ic
);

663 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addRﬁeACL", "ACL wôhÅhi†t›i¯ÆªadyÉxi°s", 
c‹ªœti⁄_d©a
);

664  
MOSQ_ERR_SUCCESS
;

667 
a˛
 = 
	`mosquôto_ˇŒoc
(1, (
dyn£c__a˛
));

668 if(
a˛
 =
NULL
){

669 
	`mosquôto_‰ì
(
t›ic
);

670 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addRﬁeACL", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

671  
MOSQ_ERR_SUCCESS
;

673 
a˛
->
t›ic
 =Åopic;

675 
	`js⁄_gë_öt
(
comm™d
, "¥i‹ôy", &
a˛
->
¥i‹ôy
, 
åue
, 0);

676 
	`js⁄_gë_boﬁ
(
comm™d
, "Ælow", &
a˛
->
Ælow
, 
åue
, 
Ál£
);

678 
	`HASH_ADD_KEYPTR_INORDER
(
hh
, *
a˛li°
, 
a˛
->
t›ic
, 
	`°æí
◊˛->t›ic),á˛, 
ö£π_a˛_cmp
);

679 
	`dyn£c__c⁄fig_ßve
();

680 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "addRﬁeACL", 
NULL
, 
c‹ªœti⁄_d©a
);

682 
	`rﬁe__kick_Æl
(
rﬁe
);

684 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

685 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

686 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s |áddRoleACL |Ñolename=%s |ácltype=%s |Åopic=%s |Öriority=%d |állow=%s",

687 
admö_˛õ¡id
, 
admö_u£∫ame
, 
rﬁíame
, 
j_a˛ty≥
->
vÆue°rög
, 
t›ic
, 
a˛
->
¥i‹ôy
,á˛->
Ælow
?"true":"false");

689  
MOSQ_ERR_SUCCESS
;

690 
	}
}

693 
	$dyn£c_rﬁes__¥o˚ss_ªmove_a˛
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

695 *
rﬁíame
;

696 
dyn£c__rﬁe
 *
rﬁe
;

697 
dyn£c__a˛
 **
a˛li°
, *
a˛
;

698 *
t›ic
;

699 
cJSON
 *
j_a˛ty≥
;

700 
rc
;

701 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

703 if(
	`js⁄_gë_°rög
(
comm™d
, "rﬁíame", &
rﬁíame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

704 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveRﬁeACL", "InvÆid/missögÑﬁíame", 
c‹ªœti⁄_d©a
);

705  
MOSQ_ERR_INVAL
;

707 if(
	`mosquôto_vÆid©e_utf8
(
rﬁíame
, ()
	`°æí
‘ﬁíame)Ë!
MOSQ_ERR_SUCCESS
){

708 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveRﬁeACL", "Rﬁê«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

709  
MOSQ_ERR_INVAL
;

712 
rﬁe
 = 
	`dyn£c_rﬁes__föd
(
rﬁíame
);

713 if(
rﬁe
 =
NULL
){

714 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveRﬁeACL", "RﬁênŸ found", 
c‹ªœti⁄_d©a
);

715  
MOSQ_ERR_SUCCESS
;

718 
j_a˛ty≥
 = 
	`cJSON_GëObje˘Iãm
(
comm™d
, "acltype");

719 if(
j_a˛ty≥
 =
NULL
 || !
	`cJSON_IsSåög
(j_acltype)){

720 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveRﬁeACL", "InvÆid/missögá˛ty≥", 
c‹ªœti⁄_d©a
);

721  
MOSQ_ERR_SUCCESS
;

723 if(!
	`°rˇ£cmp
(
j_a˛ty≥
->
vÆue°rög
, 
ACL_TYPE_PUB_C_SEND
)){

724 
a˛li°
 = &
rﬁe
->
a˛s
.
publish_c_£nd
;

725 }if(!
	`°rˇ£cmp
(
j_a˛ty≥
->
vÆue°rög
, 
ACL_TYPE_PUB_C_RECV
)){

726 
a˛li°
 = &
rﬁe
->
a˛s
.
publish_c_ªcv
;

727 }if(!
	`°rˇ£cmp
(
j_a˛ty≥
->
vÆue°rög
, 
ACL_TYPE_SUB_LITERAL
)){

728 
a˛li°
 = &
rﬁe
->
a˛s
.
subs¸ibe_lôîÆ
;

729 }if(!
	`°rˇ£cmp
(
j_a˛ty≥
->
vÆue°rög
, 
ACL_TYPE_SUB_PATTERN
)){

730 
a˛li°
 = &
rﬁe
->
a˛s
.
subs¸ibe_∑âîn
;

731 }if(!
	`°rˇ£cmp
(
j_a˛ty≥
->
vÆue°rög
, 
ACL_TYPE_UNSUB_LITERAL
)){

732 
a˛li°
 = &
rﬁe
->
a˛s
.
unsubs¸ibe_lôîÆ
;

733 }if(!
	`°rˇ£cmp
(
j_a˛ty≥
->
vÆue°rög
, 
ACL_TYPE_UNSUB_PATTERN
)){

734 
a˛li°
 = &
rﬁe
->
a˛s
.
unsubs¸ibe_∑âîn
;

736 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveRﬁeACL", "Unknow¿a˛ty≥", 
c‹ªœti⁄_d©a
);

737  
MOSQ_ERR_SUCCESS
;

740 if(
	`js⁄_gë_°rög
(
comm™d
, "t›ic", &
t›ic
, 
Ál£
)){

741 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveRﬁeACL", "InvÆid/missögÅ›ic", 
c‹ªœti⁄_d©a
);

742  
MOSQ_ERR_SUCCESS
;

744 if(
	`mosquôto_vÆid©e_utf8
(
t›ic
, ()
	`°æí
—›ic)Ë!
MOSQ_ERR_SUCCESS
){

745 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveRﬁeACL", "T›i¯nŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

746  
MOSQ_ERR_INVAL
;

748 
rc
 = 
	`mosquôto_sub_t›ic_check
(
t›ic
);

749 if(
rc
 !
MOSQ_ERR_SUCCESS
){

750 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveRﬁeACL", "InvÆid ACLÅ›ic", 
c‹ªœti⁄_d©a
);

751  
MOSQ_ERR_INVAL
;

754 
	`HASH_FIND
(
hh
, *
a˛li°
, 
t›ic
, 
	`°æí
—›ic), 
a˛
);

755 if(
a˛
){

756 
	`rﬁe__‰ì_a˛
(
a˛li°
, 
a˛
);

757 
	`dyn£c__c⁄fig_ßve
();

758 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveRﬁeACL", 
NULL
, 
c‹ªœti⁄_d©a
);

760 
	`rﬁe__kick_Æl
(
rﬁe
);

762 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

763 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

764 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s |ÑemoveRoleACL |Ñolename=%s |ácltype=%s |Åopic=%s",

765 
admö_˛õ¡id
, 
admö_u£∫ame
, 
rﬁíame
, 
j_a˛ty≥
->
vÆue°rög
, 
t›ic
);

768 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "ªmoveRﬁeACL", "ACLÇŸ found", 
c‹ªœti⁄_d©a
);

771  
MOSQ_ERR_SUCCESS
;

772 
	}
}

775 
	$dyn£c_rﬁes__¥o˚ss_gë
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

777 *
rﬁíame
;

778 
dyn£c__rﬁe
 *
rﬁe
;

779 
cJSON
 *
åì
, *
j_rﬁe
, *
j_d©a
;

781 if(
	`js⁄_gë_°rög
(
comm™d
, "rﬁíame", &
rﬁíame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

782 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëRﬁe", "InvÆid/missögÑﬁíame", 
c‹ªœti⁄_d©a
);

783  
MOSQ_ERR_INVAL
;

785 if(
	`mosquôto_vÆid©e_utf8
(
rﬁíame
, ()
	`°æí
‘ﬁíame)Ë!
MOSQ_ERR_SUCCESS
){

786 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëRﬁe", "Rﬁê«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

787  
MOSQ_ERR_INVAL
;

790 
rﬁe
 = 
	`dyn£c_rﬁes__föd
(
rﬁíame
);

791 if(
rﬁe
 =
NULL
){

792 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëRﬁe", "RﬁênŸ found", 
c‹ªœti⁄_d©a
);

793  
MOSQ_ERR_SUCCESS
;

796 
åì
 = 
	`cJSON_Cª©eObje˘
();

797 if(
åì
 =
NULL
){

798 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëRﬁe", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

799  
MOSQ_ERR_NOMEM
;

802 if(
	`cJSON_AddSåögToObje˘
(
åì
, "comm™d", "gëRﬁe"Ë=
NULL


803 || (
j_d©a
 = 
	`cJSON_AddObje˘ToObje˘
(
åì
, "d©a")Ë=
NULL


804 || (
c‹ªœti⁄_d©a
 && 
	`cJSON_AddSåögToObje˘
(
åì
, "c‹ªœti⁄D©a", c‹ªœti⁄_d©aË=
NULL
)

807 
	`cJSON_Dñëe
(
åì
);

808 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëRﬁe", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

809  
MOSQ_ERR_NOMEM
;

812 
j_rﬁe
 = 
	`add_rﬁe_to_js⁄
(
rﬁe
, 
åue
);

813 if(
j_rﬁe
 =
NULL
){

814 
	`cJSON_Dñëe
(
åì
);

815 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "gëRﬁe", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

816  
MOSQ_ERR_NOMEM
;

818 
	`cJSON_AddIãmToObje˘
(
j_d©a
, "rﬁe", 
j_rﬁe
);

819 
	`cJSON_AddIãmToAºay
(
j_ª•⁄£s
, 
åì
);

821  
MOSQ_ERR_SUCCESS
;

822 
	}
}

825 
	$dyn£c_rﬁes__¥o˚ss_modify
(
cJSON
 *
j_ª•⁄£s
, 
mosquôto
 *
c⁄ãxt
, cJSON *
comm™d
, *
c‹ªœti⁄_d©a
)

827 *
rﬁíame
;

828 *
ãxt_«me
, *
ãxt_des¸ùti⁄
;

829 
dyn£c__rﬁe
 *
rﬁe
;

830 *
°r
;

831 
cJSON
 *
j_a˛s
;

832 
dyn£c__a˛
 *
tmp_publish_c_£nd
 = 
NULL
, *
tmp_publish_c_ªcv
 = NULL;

833 
dyn£c__a˛
 *
tmp_subs¸ibe_lôîÆ
 = 
NULL
, *
tmp_subs¸ibe_∑âîn
 = NULL;

834 
dyn£c__a˛
 *
tmp_unsubs¸ibe_lôîÆ
 = 
NULL
, *
tmp_unsubs¸ibe_∑âîn
 = NULL;

835 c⁄° *
admö_˛õ¡id
, *
admö_u£∫ame
;

837 if(
	`js⁄_gë_°rög
(
comm™d
, "rﬁíame", &
rﬁíame
, 
Ál£
Ë!
MOSQ_ERR_SUCCESS
){

838 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyRﬁe", "InvÆid/missögÑﬁíame", 
c‹ªœti⁄_d©a
);

839  
MOSQ_ERR_INVAL
;

841 if(
	`mosquôto_vÆid©e_utf8
(
rﬁíame
, ()
	`°æí
‘ﬁíame)Ë!
MOSQ_ERR_SUCCESS
){

842 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyRﬁe", "Rﬁê«mênŸ vÆid UTF-8", 
c‹ªœti⁄_d©a
);

843  
MOSQ_ERR_INVAL
;

846 
rﬁe
 = 
	`dyn£c_rﬁes__föd
(
rﬁíame
);

847 if(
rﬁe
 =
NULL
){

848 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyRﬁe", "Rﬁêd€†nŸÉxi°", 
c‹ªœti⁄_d©a
);

849  
MOSQ_ERR_INVAL
;

852 if(
	`js⁄_gë_°rög
(
comm™d
, "ãxäame", &
ãxt_«me
, 
Ál£
Ë=
MOSQ_ERR_SUCCESS
){

853 
°r
 = 
	`mosquôto_°rdup
(
ãxt_«me
);

854 if(
°r
 =
NULL
){

855 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyRﬁe", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

856  
MOSQ_ERR_NOMEM
;

858 
	`mosquôto_‰ì
(
rﬁe
->
ãxt_«me
);

859 
rﬁe
->
ãxt_«me
 = 
°r
;

862 if(
	`js⁄_gë_°rög
(
comm™d
, "ãxtdes¸ùti⁄", &
ãxt_des¸ùti⁄
, 
Ál£
Ë=
MOSQ_ERR_SUCCESS
){

863 
°r
 = 
	`mosquôto_°rdup
(
ãxt_des¸ùti⁄
);

864 if(
°r
 =
NULL
){

865 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyRﬁe", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

866  
MOSQ_ERR_NOMEM
;

868 
	`mosquôto_‰ì
(
rﬁe
->
ãxt_des¸ùti⁄
);

869 
rﬁe
->
ãxt_des¸ùti⁄
 = 
°r
;

872 
j_a˛s
 = 
	`cJSON_GëObje˘Iãm
(
comm™d
, "acls");

873 if(
j_a˛s
 && 
	`cJSON_IsAºay
(j_acls)){

874 if(
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_PUB_C_SEND
, &
tmp_publish_c_£nd
) != 0

875 || 
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_PUB_C_RECV
, &
tmp_publish_c_ªcv
) != 0

876 || 
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_SUB_LITERAL
, &
tmp_subs¸ibe_lôîÆ
) != 0

877 || 
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_SUB_PATTERN
, &
tmp_subs¸ibe_∑âîn
) != 0

878 || 
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_UNSUB_LITERAL
, &
tmp_unsubs¸ibe_lôîÆ
) != 0

879 || 
	`dyn£c_rﬁes__a˛_lﬂd
(
j_a˛s
, 
ACL_TYPE_UNSUB_PATTERN
, &
tmp_unsubs¸ibe_∑âîn
) != 0

883 
	`rﬁe__‰ì_Æl_a˛s
(&
tmp_publish_c_£nd
);

884 
	`rﬁe__‰ì_Æl_a˛s
(&
tmp_publish_c_ªcv
);

885 
	`rﬁe__‰ì_Æl_a˛s
(&
tmp_subs¸ibe_lôîÆ
);

886 
	`rﬁe__‰ì_Æl_a˛s
(&
tmp_subs¸ibe_∑âîn
);

887 
	`rﬁe__‰ì_Æl_a˛s
(&
tmp_unsubs¸ibe_lôîÆ
);

888 
	`rﬁe__‰ì_Æl_a˛s
(&
tmp_unsubs¸ibe_∑âîn
);

890 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyRﬁe", "I¡î«»îr‹", 
c‹ªœti⁄_d©a
);

891  
MOSQ_ERR_NOMEM
;

894 
	`rﬁe__‰ì_Æl_a˛s
(&
rﬁe
->
a˛s
.
publish_c_£nd
);

895 
	`rﬁe__‰ì_Æl_a˛s
(&
rﬁe
->
a˛s
.
publish_c_ªcv
);

896 
	`rﬁe__‰ì_Æl_a˛s
(&
rﬁe
->
a˛s
.
subs¸ibe_lôîÆ
);

897 
	`rﬁe__‰ì_Æl_a˛s
(&
rﬁe
->
a˛s
.
subs¸ibe_∑âîn
);

898 
	`rﬁe__‰ì_Æl_a˛s
(&
rﬁe
->
a˛s
.
unsubs¸ibe_lôîÆ
);

899 
	`rﬁe__‰ì_Æl_a˛s
(&
rﬁe
->
a˛s
.
unsubs¸ibe_∑âîn
);

901 
rﬁe
->
a˛s
.
publish_c_£nd
 = 
tmp_publish_c_£nd
;

902 
rﬁe
->
a˛s
.
publish_c_ªcv
 = 
tmp_publish_c_ªcv
;

903 
rﬁe
->
a˛s
.
subs¸ibe_lôîÆ
 = 
tmp_subs¸ibe_lôîÆ
;

904 
rﬁe
->
a˛s
.
subs¸ibe_∑âîn
 = 
tmp_subs¸ibe_∑âîn
;

905 
rﬁe
->
a˛s
.
unsubs¸ibe_lôîÆ
 = 
tmp_unsubs¸ibe_lôîÆ
;

906 
rﬁe
->
a˛s
.
unsubs¸ibe_∑âîn
 = 
tmp_unsubs¸ibe_∑âîn
;

909 
	`dyn£c__c⁄fig_ßve
();

911 
	`dyn£c__comm™d_ª∂y
(
j_ª•⁄£s
, 
c⁄ãxt
, "modifyRﬁe", 
NULL
, 
c‹ªœti⁄_d©a
);

913 
admö_˛õ¡id
 = 
	`mosquôto_˛õ¡_id
(
c⁄ãxt
);

914 
admö_u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

915 
	`mosquôto_log_¥ötf
(
MOSQ_LOG_INFO
, "dynsec: %s/%s | modifyRole |Ñolename=%s",

916 
admö_˛õ¡id
, 
admö_u£∫ame
, 
rﬁíame
);

918  
MOSQ_ERR_SUCCESS
;

919 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/sub_matches_sub.c

19 
	~<°dboﬁ.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

24 
	~"dy«mic_£curôy.h
"

26 *
	$°πok_hõr
(*
°r
, **
ßvïå
)

28 *
c
;

30 if(
°r
 !
NULL
){

31 *
ßvïå
 = 
°r
;

34 if(*
ßvïå
 =
NULL
){

35  
NULL
;

38 
c
 = 
	`°rchr
(*
ßvïå
, '/');

39 if(
c
){

40 
°r
 = *
ßvïå
;

41 *
ßvïå
 = 
c
+1;

42 
c
[0] = '\0';

43 }if(*
ßvïå
){

45 
°r
 = *
ßvïå
;

46 *
ßvïå
 = 
NULL
;

48  
°r
;

49 
	}
}

52 
	$cou¡_hõr_Àvñs
(c⁄° *
s
)

54 
cou¡
 = 1;

55 c⁄° *
c
 = 
s
;

57 (
c
 = 
	`°rchr
(c, '/')) && c[0]){

58 
c
++;

59 
cou¡
++;

61  
cou¡
;

62 
	}
}

65 
boﬁ
 
	$hash_check
(*
s
, 
size_t
 *
Àn
)

67 if((*
Àn
Ë=1 && 
s
[0] == '#'){

68 
s
[0] = '\0';

69 (*
Àn
)--;

70  
åue
;

71 }if((*
Àn
Ë> 1 && 
s
[(*len)-2] == '/' && s[(*len)-1] == '#'){

72 
s
[(*
Àn
)-2] = '\0';

73 
s
[(*
Àn
)-1] = '\0';

74 (*
Àn
) -= 2;

75  
åue
;

77  
Ál£
;

78 
	}
}

81 
boﬁ
 
	$sub_a˛_check
(c⁄° *
a˛
, c⁄° *
sub
)

83 *
a˛_loˇl
;

84 *
sub_loˇl
;

85 
size_t
 
a˛_Àn
, 
sub_Àn
;

86 
boﬁ
 
a˛_hash
 = 
Ál£
, 
sub_hash
 = false;

87 
a˛_Àvñs
, 
sub_Àvñs
;

88 
i
;

89 *
a˛_tokí
, *
sub_tokí
;

90 *
a˛_ßvïå
, *
sub_ßvïå
;

92 
a˛_Àn
 = 
	`°æí
(
a˛
);

93 if(
a˛_Àn
 =1 && 
a˛
[0] == '#'){

94  
åue
;

97 
sub_Àn
 = 
	`°æí
(
sub
);

100 
a˛_loˇl
 = 
	`°rdup
(
a˛
);

101 
sub_loˇl
 = 
	`°rdup
(
sub
);

102 if(
a˛_loˇl
 =
NULL
 || 
sub_loˇl
 == NULL){

103 
	`‰ì
(
a˛_loˇl
);

104 
	`‰ì
(
sub_loˇl
);

105  
Ál£
;

108 
a˛_hash
 = 
	`hash_check
(
a˛_loˇl
, &
a˛_Àn
);

109 
sub_hash
 = 
	`hash_check
(
sub_loˇl
, &
sub_Àn
);

111 if(
sub_hash
 =
åue
 && 
a˛_hash
 =
Ál£
){

112 
	`‰ì
(
a˛_loˇl
);

113 
	`‰ì
(
sub_loˇl
);

114  
Ál£
;

117 
a˛_Àvñs
 = 
	`cou¡_hõr_Àvñs
(
a˛_loˇl
);

118 
sub_Àvñs
 = 
	`cou¡_hõr_Àvñs
(
sub_loˇl
);

119 if(
a˛_Àvñs
 > 
sub_Àvñs
){

120 
	`‰ì
(
a˛_loˇl
);

121 
	`‰ì
(
sub_loˇl
);

122  
Ál£
;

123 }if(
sub_Àvñs
 > 
a˛_Àvñs
){

124 if(
a˛_hash
 =
Ál£
){

125 
	`‰ì
(
a˛_loˇl
);

126 
	`‰ì
(
sub_loˇl
);

127  
Ál£
;

131 
a˛_ßvïå
 = 
a˛_loˇl
;

132 
sub_ßvïå
 = 
sub_loˇl
;

133 
i
=0; i<
sub_Àvñs
; i++){

134 
a˛_tokí
 = 
	`°πok_hõr
(
a˛_ßvïå
, &acl_saveptr);

135 
sub_tokí
 = 
	`°πok_hõr
(
sub_ßvïå
, &sub_saveptr);

137 if(
i
<
a˛_Àvñs
 &&

138 (!
	`°rcmp
(
a˛_tokí
, "+")

139 || !
	`°rcmp
(
a˛_tokí
, 
sub_tokí
))){

143 }if(
i
>=
a˛_Àvñs
 && 
a˛_hash
 =
åue
){

147 
	`‰ì
(
a˛_loˇl
);

148 
	`‰ì
(
sub_loˇl
);

149  
Ál£
;

153 
	`‰ì
(
a˛_loˇl
);

154 
	`‰ì
(
sub_loˇl
);

155  
åue
;

156 
	}
}

159 #ifde‡
TEST


161 
	#BLK
 "\e[0;30m"

	)

162 
	#RED
 "\e[0;31m"

	)

163 
	#GRN
 "\e[0;32m"

	)

164 
	#YEL
 "\e[0;33m"

	)

165 
	#BLU
 "\e[0;34m"

	)

166 
	#MAG
 "\e[0;35m"

	)

167 
	#CYN
 "\e[0;36m"

	)

168 
	#WHT
 "\e[0;37m"

	)

169 
	#RST
 "\e[0m"

	)

171 
	$hõr_ã°
(c⁄° *
s
, 
ex≥˘ed
)

173 
Àvñs
;

175 
Àvñs
 = 
	`cou¡_hõr_Àvñs
(
s
);

176 
	`¥ötf
("HIER %†%d:%d ", 
s
, 
ex≥˘ed
, 
Àvñs
);

177 if(
Àvñs
 =
ex≥˘ed
){

178 
	`¥ötf
(
GRN
 "∑s£d" 
RST
 "\n");

180 
	`¥ötf
(
RED
 "Áûed" 
RST
 "\n");

182 
	}
}

184 
	$ã°
(c⁄° *
sub1
, c⁄° *
sub2
, 
boﬁ
 
ex≥˘ed
)

186 
boﬁ
 
ªsu…
;

188 
	`¥ötf
("ACL %†: %†", 
sub1
, 
sub2
);

189 
ªsu…
 = 
	`sub_a˛_check
(
sub1
, 
sub2
);

190 if(
ªsu…
 =
ex≥˘ed
){

191 
	`¥ötf
(
GRN
 "∑s£d\n" 
RST
);

193 
	`¥ötf
(
RED
 "Áûed\n" 
RST
);

195 
	}
}

198 
	$maö
(
¨gc
, *
¨gv
[])

200 
	`hõr_ã°
("foo/+/bar", 3);

201 
	`hõr_ã°
("foo/#", 2);

202 
	`hõr_ã°
("foo/+/ba‚Ñû/#", 4);

203 
	`hõr_ã°
("foo/baz/ba‚Ñû", 3);

204 
	`hõr_ã°
("foo/+/ba‚Ñû/#", 4);

205 
	`hõr_ã°
("foo/baz/ba‚Ñû/+", 4);

206 
	`hõr_ã°
("foo/+/ba‚Ñû/#", 4);

207 
	`hõr_ã°
("foo/baz/ba‚Ñû/#", 4);

208 
	`hõr_ã°
("foo/+/ba‚Ñû/#", 4);

209 
	`hõr_ã°
("foo/baz/+/#", 4);

210 
	`hõr_ã°
("/+//#", 4);

211 
	`hõr_ã°
("/foo///#", 5);

212 
	`hõr_ã°
("#", 1);

213 
	`hõr_ã°
("+", 1);

214 
	`hõr_ã°
("/", 2);

215 
	`hõr_ã°
("////////////////////////////////////////////////////////////////////////////////////////////////////", 101);

217 
	`ã°
("foo/+/b¨", "foo/#", 
Ál£
);

218 
	`ã°
("foo/+/ba‚Ñû/#", "foo/baz/ba‚Ñû", 
åue
);

219 
	`ã°
("foo/+/ba‚Ñû/#", "foo/baz/ba‚Ñû/+", 
åue
);

220 
	`ã°
("foo/+/ba‚Ñû/#", "foo/baz/ba‚Ñû/#", 
åue
);

221 
	`ã°
("foo/+/ba‚Ñû/#", "foo/baz/+/#", 
Ál£
);

222 
	`ã°
("/+//#", "/foo///#", 
åue
);

223 
	`ã°
("#", "#", 
åue
);

224 
	`ã°
("#", "+", 
åue
);

225 
	`ã°
("/#", "+", 
Ál£
);

226 
	`ã°
("/#", "/+", 
åue
);

227 
	`ã°
("/+", "#", 
Ál£
);

228 
	`ã°
("/+", "+", 
Ál£
);

229 
	`ã°
("+/+", "t›ic/t›ic", 
åue
);

230 
	`ã°
("+/+", "t›ic/t›ic/", 
Ál£
);

231 
	`ã°
("+", "#", 
Ál£
);

232 
	`ã°
("+", "+", 
åue
);

233 
	`ã°
("a/b/c/d/e", "a/b/c/d/e", 
åue
);

234 
	`ã°
("a/b/ /d/e", "a/b/c/d/e", 
Ál£
);

237 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/message-timestamp/mosquitto_message_timestamp.c

31 
	~"c⁄fig.h
"

33 
	~<°dio.h
>

34 
	~<time.h
>

36 
	~"mosquôto_brokî.h
"

37 
	~"mosquôto_∂ugö.h
"

38 
	~"mosquôto.h
"

39 
	~"mqâ_¥Ÿocﬁ.h
"

41 
mosquôto_∂ugö_id_t
 *
	gmosq_pid
 = 
NULL
;

43 
	$ˇŒback_mesßge
(
evít
, *
evít_d©a
, *
u£rd©a
)

45 
mosquôto_evt_mesßge
 *
ed
 = 
evít_d©a
;

46 
time•ec
 
ts
;

47 
tm
 *
ti
;

48 
time_buf
[25];

50 
	`UNUSED
(
evít
);

51 
	`UNUSED
(
u£rd©a
);

53 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
ts
);

54 
ti
 = 
	`gmtime
(&
ts
.
tv_£c
);

55 
	`°r·ime
(
time_buf
, —ime_buf), "%Y-%m-%dT%H:%M:%SZ", 
ti
);

57  
	`mosquôto_¥›îty_add_°rög_∑ú
(&
ed
->
¥›îtõs
, 
MQTT_PROP_USER_PROPERTY
, "time°amp", 
time_buf
);

58 
	}
}

60 
	$mosquôto_∂ugö_vîsi⁄
(
suµ‹ãd_vîsi⁄_cou¡
, c⁄° *
suµ‹ãd_vîsi⁄s
)

62 
i
;

64 
i
=0; i<
suµ‹ãd_vîsi⁄_cou¡
; i++){

65 if(
suµ‹ãd_vîsi⁄s
[
i
] == 5){

70 
	}
}

72 
	$mosquôto_∂ugö_öô
(
mosquôto_∂ugö_id_t
 *
idítifõr
, **
u£r_d©a
, 
mosquôto_›t
 *
›ts
, 
›t_cou¡
)

74 
	`UNUSED
(
u£r_d©a
);

75 
	`UNUSED
(
›ts
);

76 
	`UNUSED
(
›t_cou¡
);

78 
mosq_pid
 = 
idítifõr
;

79  
	`mosquôto_ˇŒback_ªgi°î
(
mosq_pid
, 
MOSQ_EVT_MESSAGE
, 
ˇŒback_mesßge
, 
NULL
, NULL);

80 
	}
}

82 
	$mosquôto_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
›ts
, 
›t_cou¡
)

84 
	`UNUSED
(
u£r_d©a
);

85 
	`UNUSED
(
›ts
);

86 
	`UNUSED
(
›t_cou¡
);

88  
	`mosquôto_ˇŒback_uƒegi°î
(
mosq_pid
, 
MOSQ_EVT_MESSAGE
, 
ˇŒback_mesßge
, 
NULL
);

89 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/plugins/payload-modification/mosquitto_payload_modification.c

35 
	~<°dio.h
>

36 
	~<°rög.h
>

38 
	~"mosquôto_brokî.h
"

39 
	~"mosquôto_∂ugö.h
"

40 
	~"mosquôto.h
"

41 
	~"mqâ_¥Ÿocﬁ.h
"

43 
	#UNUSED
(
A
Ë()(A)

	)

45 
mosquôto_∂ugö_id_t
 *
	gmosq_pid
 = 
NULL
;

47 
	$ˇŒback_mesßge
(
evít
, *
evít_d©a
, *
u£rd©a
)

49 
mosquôto_evt_mesßge
 *
ed
 = 
evít_d©a
;

50 *
√w_∑ylﬂd
;

51 
uöt32_t
 
√w_∑ylﬂdÀn
;

53 
	`UNUSED
(
evít
);

54 
	`UNUSED
(
u£rd©a
);

60 
√w_∑ylﬂdÀn
 = 
ed
->
∑ylﬂdÀn
 + (
uöt32_t
)
	`°æí
("hello ")+1;

65 
√w_∑ylﬂd
 = 
	`mosquôto_ˇŒoc
(1, 
√w_∑ylﬂdÀn
);

66 if(
√w_∑ylﬂd
 =
NULL
){

67  
MOSQ_ERR_NOMEM
;

71 
	`¢¥ötf
(
√w_∑ylﬂd
, 
√w_∑ylﬂdÀn
, "hello ");

72 
	`mem˝y
(
√w_∑ylﬂd
+(
uöt32_t
)
	`°æí
("hñlÿ"), 
ed
->
∑ylﬂd
,Éd->
∑ylﬂdÀn
);

77 
ed
->
∑ylﬂd
 = 
√w_∑ylﬂd
;

78 
ed
->
∑ylﬂdÀn
 = 
√w_∑ylﬂdÀn
;

80  
MOSQ_ERR_SUCCESS
;

81 
	}
}

83 
	$mosquôto_∂ugö_vîsi⁄
(
suµ‹ãd_vîsi⁄_cou¡
, c⁄° *
suµ‹ãd_vîsi⁄s
)

85 
i
;

87 
i
=0; i<
suµ‹ãd_vîsi⁄_cou¡
; i++){

88 if(
suµ‹ãd_vîsi⁄s
[
i
] == 5){

93 
	}
}

95 
	$mosquôto_∂ugö_öô
(
mosquôto_∂ugö_id_t
 *
idítifõr
, **
u£r_d©a
, 
mosquôto_›t
 *
›ts
, 
›t_cou¡
)

97 
	`UNUSED
(
u£r_d©a
);

98 
	`UNUSED
(
›ts
);

99 
	`UNUSED
(
›t_cou¡
);

101 
mosq_pid
 = 
idítifõr
;

102  
	`mosquôto_ˇŒback_ªgi°î
(
mosq_pid
, 
MOSQ_EVT_MESSAGE
, 
ˇŒback_mesßge
, 
NULL
, NULL);

103 
	}
}

105 
	$mosquôto_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
›ts
, 
›t_cou¡
)

107 
	`UNUSED
(
u£r_d©a
);

108 
	`UNUSED
(
›ts
);

109 
	`UNUSED
(
›t_cou¡
);

111  
	`mosquôto_ˇŒback_uƒegi°î
(
mosq_pid
, 
MOSQ_EVT_MESSAGE
, 
ˇŒback_mesßge
, 
NULL
);

112 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/bridge.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<î∫o.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

26 #i‚de‡
WIN32


27 
	~<√tdb.h
>

28 
	~<sys/sockë.h
>

30 
	~<wösock2.h
>

31 
	~<ws2t˝ù.h
>

34 #i‚de‡
WIN32


35 
	~<uni°d.h
>

37 
	~<¥o˚ss.h
>

38 
	~<wösock2.h
>

39 
	~<ws2t˝ù.h
>

42 
	~"mqâ_¥Ÿocﬁ.h
"

43 
	~"mosquôto.h
"

44 
	~"mosquôto_brokî_öã∫Æ.h
"

45 
	~"mosquôto_öã∫Æ.h
"

46 
	~"√t_mosq.h
"

47 
	~"mem‹y_mosq.h
"

48 
	~"∑ckë_mosq.h
"

49 
	~"£nd_mosq.h
"

50 
	~"time_mosq.h
"

51 
	~"és_mosq.h
"

52 
	~"utû_mosq.h
"

53 
	~"wûl_mosq.h
"

55 #ifde‡
WITH_BRIDGE


57 
bridge__backoff_°ï
(
mosquôto
 *
c⁄ãxt
);

58 
bridge__backoff_ª£t
(
mosquôto
 *
c⁄ãxt
);

60 
	$bridge__°¨t_Æl
()

62 
i
;

64 
i
=0; i<
db
.
c⁄fig
->
bridge_cou¡
; i++){

65 if(
	`bridge__√w
(&(
db
.
c⁄fig
->
bridges
[
i
])) > 0){

66 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: UnableÅo connectÅo bridge %s.",

67 
db
.
c⁄fig
->
bridges
[
i
].
«me
);

70 
	}
}

73 
	$bridge__√w
(
mosquôto__bridge
 *
bridge
)

75 
mosquôto
 *
√w_c⁄ãxt
 = 
NULL
;

76 
mosquôto
 **
bridges
;

77 *
loˇl_id
;

79 
	`as£π
(
bridge
);

81 
loˇl_id
 = 
	`mosquôto__°rdup
(
bridge
->
loˇl_˛õ¡id
);

83 
	`HASH_FIND
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
loˇl_id
, 
	`°æí
÷oˇl_id), 
√w_c⁄ãxt
);

84 if(
√w_c⁄ãxt
){

86 
	`mosquôto__‰ì
(
loˇl_id
);

89 
√w_c⁄ãxt
 = 
	`c⁄ãxt__öô
(
INVALID_SOCKET
);

90 if(!
√w_c⁄ãxt
){

91 
	`mosquôto__‰ì
(
loˇl_id
);

92  
MOSQ_ERR_NOMEM
;

94 
√w_c⁄ãxt
->
id
 = 
loˇl_id
;

95 
	`c⁄ãxt__add_to_by_id
(
√w_c⁄ãxt
);

97 
√w_c⁄ãxt
->
bridge
 = bridge;

98 
√w_c⁄ãxt
->
is_bridge
 = 
åue
;

100 
√w_c⁄ãxt
->
u£∫ame
 =Çew_c⁄ãxt->
bridge
->
ªmŸe_u£∫ame
;

101 
√w_c⁄ãxt
->
∑ssw‹d
 =Çew_c⁄ãxt->
bridge
->
ªmŸe_∑ssw‹d
;

103 #ifde‡
WITH_TLS


104 
√w_c⁄ãxt
->
és_ˇfûe
 =Çew_c⁄ãxt->
bridge
->tls_cafile;

105 
√w_c⁄ãxt
->
és_ˇ∑th
 =Çew_c⁄ãxt->
bridge
->tls_capath;

106 
√w_c⁄ãxt
->
és_˚πfûe
 =Çew_c⁄ãxt->
bridge
->tls_certfile;

107 
√w_c⁄ãxt
->
és_keyfûe
 =Çew_c⁄ãxt->
bridge
->tls_keyfile;

108 
√w_c⁄ãxt
->
és_˚π_ªqs
 = 
SSL_VERIFY_PEER
;

109 
√w_c⁄ãxt
->
és_oc•_ªquúed
 =Çew_c⁄ãxt->
bridge
->tls_ocsp_required;

110 
√w_c⁄ãxt
->
és_vîsi⁄
 =Çew_c⁄ãxt->
bridge
->tls_version;

111 
√w_c⁄ãxt
->
és_ö£cuª
 =Çew_c⁄ãxt->
bridge
->tls_insecure;

112 
√w_c⁄ãxt
->
és_Æ≤
 =Çew_c⁄ãxt->
bridge
->tls_alpn;

113 
√w_c⁄ãxt
->
és_ígöe
 = 
db
.
c⁄fig
->
deÁu…_li°íî
.tls_engine;

114 
√w_c⁄ãxt
->
és_keyf‹m
 = 
db
.
c⁄fig
->
deÁu…_li°íî
.tls_keyform;

115 
√w_c⁄ãxt
->
s¶_˘x_deÁu…s
 = 
åue
;

116 #ifde‡
FINAL_WITH_TLS_PSK


117 
√w_c⁄ãxt
->
és_psk_idítôy
 =Çew_c⁄ãxt->
bridge
->tls_psk_identity;

118 
√w_c⁄ãxt
->
és_psk
 =Çew_c⁄ãxt->
bridge
->tls_psk;

122 
bridge
->
åy_¥iv©e_ac˚±ed
 = 
åue
;

123 if(
bridge
->
˛ón_°¨t_loˇl
 == -1){

125 
bridge
->
˛ón_°¨t_loˇl
 = bridge->
˛ón_°¨t
;

127 
√w_c⁄ãxt
->
ªèö_avaûabÀ
 = 
bridge
->
outgoög_ªèö
;

128 
√w_c⁄ãxt
->
¥Ÿocﬁ
 = 
bridge
->
¥Ÿocﬁ_vîsi⁄
;

130 
bridges
 = 
	`mosquôto__ªÆloc
(
db
.bridges, (
size_t
)(db.
bridge_cou¡
+1)*(
mosquôto
 *));

131 if(
bridges
){

132 
db
.
bridges
 = bridges;

133 
db
.
bridge_cou¡
++;

134 
db
.
bridges
[db.
bridge_cou¡
-1] = 
√w_c⁄ãxt
;

136  
MOSQ_ERR_NOMEM
;

139 #i‡
	`deföed
(
__GLIBC__
Ë&& deföed(
WITH_ADNS
)

140 
√w_c⁄ãxt
->
bridge
->
ª°¨t_t
 = 1;

141  
	`bridge__c⁄√˘_°ï1
(
√w_c⁄ãxt
);

143  
	`bridge__c⁄√˘
(
√w_c⁄ãxt
);

145 
	}
}

147 #i‡
deföed
(
__GLIBC__
Ë&& deföed(
WITH_ADNS
)

148 
	$bridge__c⁄√˘_°ï1
(
mosquôto
 *
c⁄ãxt
)

150 
rc
;

151 *
nŸifiˇti⁄_t›ic
;

152 
size_t
 
nŸifiˇti⁄_t›ic_Àn
;

153 
uöt8_t
 
nŸifiˇti⁄_∑ylﬂd
;

154 
i
;

155 
uöt8_t
 
qos
;

157 if(!
c⁄ãxt
 || !c⁄ãxt->
bridge
Ë 
MOSQ_ERR_INVAL
;

159 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_√w
);

160 
c⁄ãxt
->
sock
 = 
INVALID_SOCKET
;

161 
c⁄ãxt
->
œ°_msg_ö
 = 
db
.
now_s
;

162 
c⁄ãxt
->
√xt_msg_out
 = 
db
.
now_s
 + c⁄ãxt->
bridge
->
kì∑live
;

163 
c⁄ãxt
->
kì∑live
 = c⁄ãxt->
bridge
->keepalive;

164 
c⁄ãxt
->
˛ón_°¨t
 = c⁄ãxt->
bridge
->clean_start;

165 
c⁄ãxt
->
ö_∑ckë
.
∑ylﬂd
 = 
NULL
;

166 
c⁄ãxt
->
pög_t
 = 0;

167 
c⁄ãxt
->
bridge
->
œzy_ªc⁄√˘
 = 
Ál£
;

168 
c⁄ãxt
->
maximum_∑ckë_size
 = c⁄ãxt->
bridge
->maximum_packet_size;

169 
	`bridge__∑ckë_˛ónup
(
c⁄ãxt
);

170 
	`db__mesßge_ªc⁄√˘_ª£t
(
c⁄ãxt
);

172 
	`db__mesßges_dñëe
(
c⁄ãxt
, 
Ál£
);

178 
	`sub__˛ón_£ssi⁄
(
c⁄ãxt
);

180 
i
=0; i<
c⁄ãxt
->
bridge
->
t›ic_cou¡
; i++){

181 if(
c⁄ãxt
->
bridge
->
t›ics
[
i
].
dúe˘i⁄
 =
bd_out
 || c⁄ãxt->bridge->t›ics[i].dúe˘i⁄ =
bd_bŸh
){

182 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Bridgê%†doögÜoˇ»SUBSCRIBE o¿t›i¯%s", 
c⁄ãxt
->
id
, c⁄ãxt->
bridge
->
t›ics
[
i
].
loˇl_t›ic
);

183 if(
c⁄ãxt
->
bridge
->
t›ics
[
i
].
qos
 > c⁄ãxt->
max_qos
){

184 
qos
 = 
c⁄ãxt
->
max_qos
;

186 
qos
 = 
c⁄ãxt
->
bridge
->
t›ics
[
i
].qos;

188 if(
	`sub__add
(
c⁄ãxt
,

189 
c⁄ãxt
->
bridge
->
t›ics
[
i
].
loˇl_t›ic
,

190 
qos
,

192 
MQTT_SUB_OPT_NO_LOCAL
 | 
MQTT_SUB_OPT_RETAIN_AS_PUBLISHED
,

193 &
db
.
subs
) > 0){

196 
	`ªèö__queue
(
c⁄ãxt
,

197 
c⁄ãxt
->
bridge
->
t›ics
[
i
].
loˇl_t›ic
,

198 
qos
, 0);

203 
	`bridge__backoff_°ï
(
c⁄ãxt
);

205 if(
c⁄ãxt
->
bridge
->
nŸifiˇti⁄s
){

206 if(
c⁄ãxt
->
max_qos
 == 0){

207 
qos
 = 0;

209 
qos
 = 1;

211 if(
c⁄ãxt
->
bridge
->
nŸifiˇti⁄_t›ic
){

212 if(!
c⁄ãxt
->
bridge
->
öôül_nŸifiˇti⁄_d⁄e
){

213 
nŸifiˇti⁄_∑ylﬂd
 = '0';

214 
	`db__mesßges_ósy_queue
(
c⁄ãxt
, c⁄ãxt->
bridge
->
nŸifiˇti⁄_t›ic
, 
qos
, 1, &
nŸifiˇti⁄_∑ylﬂd
, 1, 0, 
NULL
);

215 
c⁄ãxt
->
bridge
->
öôül_nŸifiˇti⁄_d⁄e
 = 
åue
;

217 
nŸifiˇti⁄_∑ylﬂd
 = '0';

218 
rc
 = 
	`wûl__£t
(
c⁄ãxt
, c⁄ãxt->
bridge
->
nŸifiˇti⁄_t›ic
, 1, &
nŸifiˇti⁄_∑ylﬂd
, 
qos
, 
åue
, 
NULL
);

219 if(
rc
 !
MOSQ_ERR_SUCCESS
){

220  
rc
;

223 
nŸifiˇti⁄_t›ic_Àn
 = 
	`°æí
(
c⁄ãxt
->
bridge
->
ªmŸe_˛õ¡id
)+strlen("$SYS/broker/connection//state");

224 
nŸifiˇti⁄_t›ic
 = 
	`mosquôto__mÆloc
(()*(
nŸifiˇti⁄_t›ic_Àn
+1));

225 if(!
nŸifiˇti⁄_t›ic
Ë 
MOSQ_ERR_NOMEM
;

227 
	`¢¥ötf
(
nŸifiˇti⁄_t›ic
, 
nŸifiˇti⁄_t›ic_Àn
+1, "$SYS/brokî/c⁄√˘i⁄/%s/°©e", 
c⁄ãxt
->
bridge
->
ªmŸe_˛õ¡id
);

229 if(!
c⁄ãxt
->
bridge
->
öôül_nŸifiˇti⁄_d⁄e
){

230 
nŸifiˇti⁄_∑ylﬂd
 = '0';

231 
	`db__mesßges_ósy_queue
(
c⁄ãxt
, 
nŸifiˇti⁄_t›ic
, 
qos
, 1, &
nŸifiˇti⁄_∑ylﬂd
, 1, 0, 
NULL
);

232 
c⁄ãxt
->
bridge
->
öôül_nŸifiˇti⁄_d⁄e
 = 
åue
;

235 
nŸifiˇti⁄_∑ylﬂd
 = '0';

236 
rc
 = 
	`wûl__£t
(
c⁄ãxt
, 
nŸifiˇti⁄_t›ic
, 1, &
nŸifiˇti⁄_∑ylﬂd
, 
qos
, 
åue
, 
NULL
);

237 
	`mosquôto__‰ì
(
nŸifiˇti⁄_t›ic
);

238 if(
rc
 !
MOSQ_ERR_SUCCESS
){

239  
rc
;

244 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "C⁄√˘ög bridgê(°ï 1Ë%†(%s:%d)", 
c⁄ãxt
->
bridge
->
«me
, c⁄ãxt->bridge->
addªs£s
[c⁄ãxt->bridge->
cur_addªss
].
addªss
, c⁄ãxt->bridge->addªs£s[c⁄ãxt->bridge->cur_addªss].
p‹t
);

245 
rc
 = 
	`√t__åy_c⁄√˘_°ï1
(
c⁄ãxt
, c⁄ãxt->
bridge
->
addªs£s
[c⁄ãxt->bridge->
cur_addªss
].
addªss
);

246 if(
rc
 > 0 ){

247 if(
rc
 =
MOSQ_ERR_TLS
){

248 
	`mux__dñëe
(
c⁄ãxt
);

249 
	`√t__sockë_˛o£
(
c⁄ãxt
);

250  
rc
;

251 }if(
rc
 =
MOSQ_ERR_ERRNO
){

252 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ cª©ög bridge: %s.", 
	`°ªº‹
(
î∫o
));

253 }if(
rc
 =
MOSQ_ERR_EAI
){

254 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ cª©ög bridge: %s.", 
	`gai_°ªº‹
(
î∫o
));

257  
rc
;

260  
MOSQ_ERR_SUCCESS
;

261 
	}
}

264 
	$bridge__c⁄√˘_°ï2
(
mosquôto
 *
c⁄ãxt
)

266 
rc
;

268 if(!
c⁄ãxt
 || !c⁄ãxt->
bridge
Ë 
MOSQ_ERR_INVAL
;

270 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "C⁄√˘ög bridgê(°ï 2Ë%†(%s:%d)", 
c⁄ãxt
->
bridge
->
«me
, c⁄ãxt->bridge->
addªs£s
[c⁄ãxt->bridge->
cur_addªss
].
addªss
, c⁄ãxt->bridge->addªs£s[c⁄ãxt->bridge->cur_addªss].
p‹t
);

271 
rc
 = 
	`√t__åy_c⁄√˘_°ï2
(
c⁄ãxt
, c⁄ãxt->
bridge
->
addªs£s
[c⁄ãxt->bridge->
cur_addªss
].
p‹t
, &c⁄ãxt->
sock
);

272 if(
rc
 > 0){

273 if(
rc
 =
MOSQ_ERR_TLS
){

274 
	`mux__dñëe
(
c⁄ãxt
);

275 
	`√t__sockë_˛o£
(
c⁄ãxt
);

276  
rc
;

277 }if(
rc
 =
MOSQ_ERR_ERRNO
){

278 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ cª©ög bridge: %s.", 
	`°ªº‹
(
î∫o
));

279 }if(
rc
 =
MOSQ_ERR_EAI
){

280 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ cª©ög bridge: %s.", 
	`gai_°ªº‹
(
î∫o
));

283  
rc
;

286 
	`HASH_ADD
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, 
sock
, (
c⁄ãxt
->sock), context);

288 if(
rc
 =
MOSQ_ERR_CONN_PENDING
){

289 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_c⁄√˘_≥ndög
);

290 
	`mux__add_out
(
c⁄ãxt
);

292  
rc
;

293 
	}
}

296 
	$bridge__c⁄√˘_°ï3
(
mosquôto
 *
c⁄ãxt
)

298 
rc
;

300 
rc
 = 
	`√t__sockë_c⁄√˘_°ï3
(
c⁄ãxt
, c⁄ãxt->
bridge
->
addªs£s
[c⁄ãxt->bridge->
cur_addªss
].
addªss
);

301 if(
rc
 > 0){

302 if(
rc
 =
MOSQ_ERR_TLS
){

303 
	`mux__dñëe
(
c⁄ãxt
);

304 
	`√t__sockë_˛o£
(
c⁄ãxt
);

305  
rc
;

306 }if(
rc
 =
MOSQ_ERR_ERRNO
){

307 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ cª©ög bridge: %s.", 
	`°ªº‹
(
î∫o
));

308 }if(
rc
 =
MOSQ_ERR_EAI
){

309 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ cª©ög bridge: %s.", 
	`gai_°ªº‹
(
î∫o
));

312  
rc
;

315 if(
c⁄ãxt
->
bridge
->
round_robö
 =
Ál£
 && c⁄ãxt->bridge->
cur_addªss
 != 0){

316 
c⁄ãxt
->
bridge
->
¥im¨y_ªåy
 = 
db
.
now_s
 + 5;

319 
rc
 = 
	`£nd__c⁄√˘
(
c⁄ãxt
, c⁄ãxt->
kì∑live
, c⁄ãxt->
˛ón_°¨t
, 
NULL
);

320 if(
rc
 =
MOSQ_ERR_SUCCESS
){

321  
MOSQ_ERR_SUCCESS
;

322 }if(
rc
 =
MOSQ_ERR_ERRNO
 && 
î∫o
 =
ENOTCONN
){

323  
MOSQ_ERR_SUCCESS
;

325 if(
rc
 =
MOSQ_ERR_TLS
){

326  
rc
;

327 }if(
rc
 =
MOSQ_ERR_ERRNO
){

328 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ cª©ög bridge: %s.", 
	`°ªº‹
(
î∫o
));

329 }if(
rc
 =
MOSQ_ERR_EAI
){

330 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ cª©ög bridge: %s.", 
	`gai_°ªº‹
(
î∫o
));

332 
	`mux__dñëe
(
c⁄ãxt
);

333 
	`√t__sockë_˛o£
(
c⁄ãxt
);

334  
rc
;

336 
	}
}

339 
	$bridge__c⁄√˘
(
mosquôto
 *
c⁄ãxt
)

341 
rc
, 
rc2
;

342 
i
;

343 *
nŸifiˇti⁄_t›ic
 = 
NULL
;

344 
size_t
 
nŸifiˇti⁄_t›ic_Àn
;

345 
uöt8_t
 
nŸifiˇti⁄_∑ylﬂd
;

346 
uöt8_t
 
qos
;

348 if(!
c⁄ãxt
 || !c⁄ãxt->
bridge
Ë 
MOSQ_ERR_INVAL
;

350 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_√w
);

351 
c⁄ãxt
->
sock
 = 
INVALID_SOCKET
;

352 
c⁄ãxt
->
œ°_msg_ö
 = 
db
.
now_s
;

353 
c⁄ãxt
->
√xt_msg_out
 = 
db
.
now_s
 + c⁄ãxt->
bridge
->
kì∑live
;

354 
c⁄ãxt
->
kì∑live
 = c⁄ãxt->
bridge
->keepalive;

355 
c⁄ãxt
->
˛ón_°¨t
 = c⁄ãxt->
bridge
->clean_start;

356 
c⁄ãxt
->
ö_∑ckë
.
∑ylﬂd
 = 
NULL
;

357 
c⁄ãxt
->
pög_t
 = 0;

358 
c⁄ãxt
->
bridge
->
œzy_ªc⁄√˘
 = 
Ál£
;

359 
c⁄ãxt
->
maximum_∑ckë_size
 = c⁄ãxt->
bridge
->maximum_packet_size;

360 
	`bridge__∑ckë_˛ónup
(
c⁄ãxt
);

361 
	`db__mesßge_ªc⁄√˘_ª£t
(
c⁄ãxt
);

363 
	`db__mesßges_dñëe
(
c⁄ãxt
, 
Ál£
);

369 
	`sub__˛ón_£ssi⁄
(
c⁄ãxt
);

371 
i
=0; i<
c⁄ãxt
->
bridge
->
t›ic_cou¡
; i++){

372 if(
c⁄ãxt
->
bridge
->
t›ics
[
i
].
dúe˘i⁄
 =
bd_out
 || c⁄ãxt->bridge->t›ics[i].dúe˘i⁄ =
bd_bŸh
){

373 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Bridgê%†doögÜoˇ»SUBSCRIBE o¿t›i¯%s", 
c⁄ãxt
->
id
, c⁄ãxt->
bridge
->
t›ics
[
i
].
loˇl_t›ic
);

374 if(
c⁄ãxt
->
bridge
->
t›ics
[
i
].
qos
 > c⁄ãxt->
max_qos
){

375 
qos
 = 
c⁄ãxt
->
max_qos
;

377 
qos
 = 
c⁄ãxt
->
bridge
->
t›ics
[
i
].qos;

379 if(
	`sub__add
(
c⁄ãxt
,

380 
c⁄ãxt
->
bridge
->
t›ics
[
i
].
loˇl_t›ic
,

381 
qos
,

383 
MQTT_SUB_OPT_NO_LOCAL
 | 
MQTT_SUB_OPT_RETAIN_AS_PUBLISHED
,

384 &
db
.
subs
) > 0){

392 
	`bridge__backoff_°ï
(
c⁄ãxt
);

394 if(
c⁄ãxt
->
bridge
->
nŸifiˇti⁄s
){

395 if(
c⁄ãxt
->
max_qos
 == 0){

396 
qos
 = 0;

398 
qos
 = 1;

400 if(
c⁄ãxt
->
bridge
->
nŸifiˇti⁄_t›ic
){

401 if(!
c⁄ãxt
->
bridge
->
öôül_nŸifiˇti⁄_d⁄e
){

402 
nŸifiˇti⁄_∑ylﬂd
 = '0';

403 
	`db__mesßges_ósy_queue
(
c⁄ãxt
, c⁄ãxt->
bridge
->
nŸifiˇti⁄_t›ic
, 
qos
, 1, &
nŸifiˇti⁄_∑ylﬂd
, 1, 0, 
NULL
);

404 
c⁄ãxt
->
bridge
->
öôül_nŸifiˇti⁄_d⁄e
 = 
åue
;

407 
nŸifiˇti⁄_∑ylﬂd
 = '0';

408 
rc
 = 
	`wûl__£t
(
c⁄ãxt
, c⁄ãxt->
bridge
->
nŸifiˇti⁄_t›ic
, 1, &
nŸifiˇti⁄_∑ylﬂd
, 
qos
, 
åue
, 
NULL
);

409 if(
rc
 !
MOSQ_ERR_SUCCESS
){

410  
rc
;

413 
nŸifiˇti⁄_t›ic_Àn
 = 
	`°æí
(
c⁄ãxt
->
bridge
->
ªmŸe_˛õ¡id
)+strlen("$SYS/broker/connection//state");

414 
nŸifiˇti⁄_t›ic
 = 
	`mosquôto__mÆloc
(()*(
nŸifiˇti⁄_t›ic_Àn
+1));

415 if(!
nŸifiˇti⁄_t›ic
Ë 
MOSQ_ERR_NOMEM
;

417 
	`¢¥ötf
(
nŸifiˇti⁄_t›ic
, 
nŸifiˇti⁄_t›ic_Àn
+1, "$SYS/brokî/c⁄√˘i⁄/%s/°©e", 
c⁄ãxt
->
bridge
->
ªmŸe_˛õ¡id
);

419 if(!
c⁄ãxt
->
bridge
->
öôül_nŸifiˇti⁄_d⁄e
){

420 
nŸifiˇti⁄_∑ylﬂd
 = '0';

421 
	`db__mesßges_ósy_queue
(
c⁄ãxt
, 
nŸifiˇti⁄_t›ic
, 
qos
, 1, &
nŸifiˇti⁄_∑ylﬂd
, 1, 0, 
NULL
);

422 
c⁄ãxt
->
bridge
->
öôül_nŸifiˇti⁄_d⁄e
 = 
åue
;

425 
nŸifiˇti⁄_∑ylﬂd
 = '0';

426 
rc
 = 
	`wûl__£t
(
c⁄ãxt
, 
nŸifiˇti⁄_t›ic
, 1, &
nŸifiˇti⁄_∑ylﬂd
, 
qos
, 
åue
, 
NULL
);

427 if(
rc
 !
MOSQ_ERR_SUCCESS
){

428 
	`mosquôto__‰ì
(
nŸifiˇti⁄_t›ic
);

429  
rc
;

431 
	`mosquôto__‰ì
(
nŸifiˇti⁄_t›ic
);

435 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "C⁄√˘ög bridgê%†(%s:%d)", 
c⁄ãxt
->
bridge
->
«me
, c⁄ãxt->bridge->
addªs£s
[c⁄ãxt->bridge->
cur_addªss
].
addªss
, c⁄ãxt->bridge->addªs£s[c⁄ãxt->bridge->cur_addªss].
p‹t
);

436 
rc
 = 
	`√t__sockë_c⁄√˘
(
c⁄ãxt
,

437 
c⁄ãxt
->
bridge
->
addªs£s
[c⁄ãxt->bridge->
cur_addªss
].
addªss
,

438 
c⁄ãxt
->
bridge
->
addªs£s
[c⁄ãxt->bridge->
cur_addªss
].
p‹t
,

439 
c⁄ãxt
->
bridge
->
böd_addªss
,

440 
Ál£
);

442 if(
rc
 > 0){

443 if(
rc
 =
MOSQ_ERR_TLS
){

444 
	`mux__dñëe
(
c⁄ãxt
);

445 
	`√t__sockë_˛o£
(
c⁄ãxt
);

446  
rc
;

447 }if(
rc
 =
MOSQ_ERR_ERRNO
){

448 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ cª©ög bridge: %s.", 
	`°ªº‹
(
î∫o
));

449 }if(
rc
 =
MOSQ_ERR_EAI
){

450 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ cª©ög bridge: %s.", 
	`gai_°ªº‹
(
î∫o
));

453  
rc
;

454 }if(
rc
 =
MOSQ_ERR_CONN_PENDING
){

455 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_c⁄√˘_≥ndög
);

456 
	`mux__add_out
(
c⁄ãxt
);

459 
	`HASH_ADD
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, 
sock
, (
c⁄ãxt
->sock), context);

461 
rc2
 = 
	`£nd__c⁄√˘
(
c⁄ãxt
, c⁄ãxt->
kì∑live
, c⁄ãxt->
˛ón_°¨t
, 
NULL
);

462 if(
rc2
 =
MOSQ_ERR_SUCCESS
){

463  
rc
;

464 }if(
rc2
 =
MOSQ_ERR_ERRNO
 && 
î∫o
 =
ENOTCONN
){

465  
MOSQ_ERR_SUCCESS
;

467 if(
rc2
 =
MOSQ_ERR_TLS
){

468  
rc2
;

469 }if(
rc2
 =
MOSQ_ERR_ERRNO
){

470 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ cª©ög bridge: %s.", 
	`°ªº‹
(
î∫o
));

471 }if(
rc2
 =
MOSQ_ERR_EAI
){

472 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ cª©ög bridge: %s.", 
	`gai_°ªº‹
(
î∫o
));

474 
	`mux__dñëe
(
c⁄ãxt
);

475 
	`√t__sockë_˛o£
(
c⁄ãxt
);

476  
rc2
;

478 
	}
}

482 
	$bridge__⁄_c⁄√˘
(
mosquôto
 *
c⁄ãxt
)

484 
i
;

485 *
nŸifiˇti⁄_t›ic
;

486 
size_t
 
nŸifiˇti⁄_t›ic_Àn
;

487 
nŸifiˇti⁄_∑ylﬂd
;

488 
sub_›ts
;

489 
boﬁ
 
ªèö
 = 
åue
;

490 
uöt8_t
 
qos
;

492 if(
c⁄ãxt
->
bridge
->
nŸifiˇti⁄s
){

493 if(
c⁄ãxt
->
max_qos
 == 0){

494 
qos
 = 0;

496 
qos
 = 1;

498 if(!
c⁄ãxt
->
ªèö_avaûabÀ
){

499 
ªèö
 = 
Ál£
;

501 
nŸifiˇti⁄_∑ylﬂd
 = '1';

502 if(
c⁄ãxt
->
bridge
->
nŸifiˇti⁄_t›ic
){

503 if(!
c⁄ãxt
->
bridge
->
nŸifiˇti⁄s_loˇl_⁄ly
){

504 if(
	`£nd__ªÆ_publish
(
c⁄ãxt
, 
	`mosquôto__mid_gíî©e
(context),

505 
c⁄ãxt
->
bridge
->
nŸifiˇti⁄_t›ic
, 1, &
nŸifiˇti⁄_∑ylﬂd
, 
qos
, 
ªèö
, 0, 
NULL
, NULL, 0)){

510 
	`db__mesßges_ósy_queue
(
c⁄ãxt
, c⁄ãxt->
bridge
->
nŸifiˇti⁄_t›ic
, 
qos
, 1, &
nŸifiˇti⁄_∑ylﬂd
, 1, 0, 
NULL
);

512 
nŸifiˇti⁄_t›ic_Àn
 = 
	`°æí
(
c⁄ãxt
->
bridge
->
ªmŸe_˛õ¡id
)+strlen("$SYS/broker/connection//state");

513 
nŸifiˇti⁄_t›ic
 = 
	`mosquôto__mÆloc
(()*(
nŸifiˇti⁄_t›ic_Àn
+1));

514 if(!
nŸifiˇti⁄_t›ic
Ë 
MOSQ_ERR_NOMEM
;

516 
	`¢¥ötf
(
nŸifiˇti⁄_t›ic
, 
nŸifiˇti⁄_t›ic_Àn
+1, "$SYS/brokî/c⁄√˘i⁄/%s/°©e", 
c⁄ãxt
->
bridge
->
ªmŸe_˛õ¡id
);

517 
nŸifiˇti⁄_∑ylﬂd
 = '1';

518 if(!
c⁄ãxt
->
bridge
->
nŸifiˇti⁄s_loˇl_⁄ly
){

519 if(
	`£nd__ªÆ_publish
(
c⁄ãxt
, 
	`mosquôto__mid_gíî©e
(context),

520 
nŸifiˇti⁄_t›ic
, 1, &
nŸifiˇti⁄_∑ylﬂd
, 
qos
, 
ªèö
, 0, 
NULL
, NULL, 0)){

522 
	`mosquôto__‰ì
(
nŸifiˇti⁄_t›ic
);

526 
	`db__mesßges_ósy_queue
(
c⁄ãxt
, 
nŸifiˇti⁄_t›ic
, 
qos
, 1, &
nŸifiˇti⁄_∑ylﬂd
, 1, 0, 
NULL
);

527 
	`mosquôto__‰ì
(
nŸifiˇti⁄_t›ic
);

530 
i
=0; i<
c⁄ãxt
->
bridge
->
t›ic_cou¡
; i++){

531 if(
c⁄ãxt
->
bridge
->
t›ics
[
i
].
dúe˘i⁄
 =
bd_ö
 || c⁄ãxt->bridge->t›ics[i].dúe˘i⁄ =
bd_bŸh
){

532 if(
c⁄ãxt
->
bridge
->
t›ics
[
i
].
qos
 > c⁄ãxt->
max_qos
){

533 
sub_›ts
 = 
c⁄ãxt
->
max_qos
;

535 
sub_›ts
 = 
c⁄ãxt
->
bridge
->
t›ics
[
i
].
qos
;

537 if(
c⁄ãxt
->
bridge
->
¥Ÿocﬁ_vîsi⁄
 =
mosq_p_mqâ5
){

538 
sub_›ts
 = sub_opts

539 | 
MQTT_SUB_OPT_NO_LOCAL


540 | 
MQTT_SUB_OPT_RETAIN_AS_PUBLISHED


541 | 
MQTT_SUB_OPT_SEND_RETAIN_ALWAYS
;

543 if(
	`£nd__subs¸ibe
(
c⁄ãxt
, 
NULL
, 1, &c⁄ãxt->
bridge
->
t›ics
[
i
].
ªmŸe_t›ic
, 
sub_›ts
, NULL)){

547 if(
c⁄ãxt
->
bridge
->
©ãm±_unsubs¸ibe
){

548 if(
	`£nd__unsubs¸ibe
(
c⁄ãxt
, 
NULL
, 1, &c⁄ãxt->
bridge
->
t›ics
[
i
].
ªmŸe_t›ic
, NULL)){

557 
i
=0; i<
c⁄ãxt
->
bridge
->
t›ic_cou¡
; i++){

558 if(
c⁄ãxt
->
bridge
->
t›ics
[
i
].
dúe˘i⁄
 =
bd_out
 || c⁄ãxt->bridge->t›ics[i].dúe˘i⁄ =
bd_bŸh
){

559 if(
c⁄ãxt
->
bridge
->
t›ics
[
i
].
qos
 > c⁄ãxt->
max_qos
){

560 
qos
 = 
c⁄ãxt
->
max_qos
;

562 
qos
 = 
c⁄ãxt
->
bridge
->
t›ics
[
i
].qos;

564 
	`ªèö__queue
(
c⁄ãxt
,

565 
c⁄ãxt
->
bridge
->
t›ics
[
i
].
loˇl_t›ic
,

566 
qos
, 0);

570 
	`bridge__backoff_ª£t
(
c⁄ãxt
);

572  
MOSQ_ERR_SUCCESS
;

573 
	}
}

576 
	$bridge__ªgi°î_loˇl_c⁄√˘i⁄s
()

578 
mosquôto
 *
c⁄ãxt
, *
˘xt_tmp
 = 
NULL
;

580 
	`HASH_ITER
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, 
c⁄ãxt
, 
˘xt_tmp
){

581 if(
c⁄ãxt
->
bridge
){

582 if(
	`mux__add_ö
(
c⁄ãxt
)){

583 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ i¿öôü»bridgêªgi°øti⁄: %s", 
	`°ªº‹
(
î∫o
));

584  
MOSQ_ERR_UNKNOWN
;

586 
	`mux__add_out
(
c⁄ãxt
);

589  
MOSQ_ERR_SUCCESS
;

590 
	}
}

593 
	$bridge__˛ónup
(
mosquôto
 *
c⁄ãxt
)

595 
i
;

597 
i
=0; i<
db
.
bridge_cou¡
; i++){

598 if(
db
.
bridges
[
i
] =
c⁄ãxt
){

599 
db
.
bridges
[
i
] = 
NULL
;

602 
	`mosquôto__‰ì
(
c⁄ãxt
->
bridge
->
loˇl_˛õ¡id
);

603 
c⁄ãxt
->
bridge
->
loˇl_˛õ¡id
 = 
NULL
;

605 
	`mosquôto__‰ì
(
c⁄ãxt
->
bridge
->
loˇl_u£∫ame
);

606 
c⁄ãxt
->
bridge
->
loˇl_u£∫ame
 = 
NULL
;

608 
	`mosquôto__‰ì
(
c⁄ãxt
->
bridge
->
loˇl_∑ssw‹d
);

609 
c⁄ãxt
->
bridge
->
loˇl_∑ssw‹d
 = 
NULL
;

611 if(
c⁄ãxt
->
bridge
->
ªmŸe_˛õ¡id
 !c⁄ãxt->
id
){

612 
	`mosquôto__‰ì
(
c⁄ãxt
->
bridge
->
ªmŸe_˛õ¡id
);

614 
c⁄ãxt
->
bridge
->
ªmŸe_˛õ¡id
 = 
NULL
;

616 if(
c⁄ãxt
->
bridge
->
ªmŸe_u£∫ame
 !c⁄ãxt->
u£∫ame
){

617 
	`mosquôto__‰ì
(
c⁄ãxt
->
bridge
->
ªmŸe_u£∫ame
);

619 
c⁄ãxt
->
bridge
->
ªmŸe_u£∫ame
 = 
NULL
;

621 if(
c⁄ãxt
->
bridge
->
ªmŸe_∑ssw‹d
 !c⁄ãxt->
∑ssw‹d
){

622 
	`mosquôto__‰ì
(
c⁄ãxt
->
bridge
->
ªmŸe_∑ssw‹d
);

624 
c⁄ãxt
->
bridge
->
ªmŸe_∑ssw‹d
 = 
NULL
;

625 #ifde‡
WITH_TLS


626 if(
c⁄ãxt
->
s¶_˘x
){

627 
	`SSL_CTX_‰ì
(
c⁄ãxt
->
s¶_˘x
);

628 
c⁄ãxt
->
s¶_˘x
 = 
NULL
;

631 
	}
}

634 
	$bridge__∑ckë_˛ónup
(
mosquôto
 *
c⁄ãxt
)

636 
mosquôto__∑ckë
 *
∑ckë
;

637 if(!
c⁄ãxt
) ;

639 if(
c⁄ãxt
->
cuºít_out_∑ckë
){

640 
	`∑ckë__˛ónup
(
c⁄ãxt
->
cuºít_out_∑ckë
);

641 
	`mosquôto__‰ì
(
c⁄ãxt
->
cuºít_out_∑ckë
);

642 
c⁄ãxt
->
cuºít_out_∑ckë
 = 
NULL
;

644 
c⁄ãxt
->
out_∑ckë
){

645 
	`∑ckë__˛ónup
(
c⁄ãxt
->
out_∑ckë
);

646 
∑ckë
 = 
c⁄ãxt
->
out_∑ckë
;

647 
c⁄ãxt
->
out_∑ckë
 = c⁄ãxt->out_∑ckë->
√xt
;

648 
	`mosquôto__‰ì
(
∑ckë
);

650 
c⁄ãxt
->
out_∑ckë
 = 
NULL
;

651 
c⁄ãxt
->
out_∑ckë_œ°
 = 
NULL
;

652 
c⁄ãxt
->
out_∑ckë_cou¡
 = 0;

654 
	`∑ckë__˛ónup
(&(
c⁄ãxt
->
ö_∑ckë
));

655 
	}
}

657 
	$ønd_bëwìn
(
low
, 
high
)

659 
r
;

660 
	`utû__øndom_byãs
(&
r
, ());

661  (
	`abs
(
r
Ë% (
high
 - 
low
)) +Üow;

662 
	}
}

664 
	$bridge__backoff_°ï
(
mosquôto
 *
c⁄ãxt
)

666 
mosquôto__bridge
 *
bridge
;

667 if(!
c⁄ãxt
 || !c⁄ãxt->
bridge
) ;

669 
bridge
 = 
c⁄ãxt
->bridge;

672 if(
bridge
->
backoff_ˇp
){

676 
bridge
->
ª°¨t_timeout
 = 
	`ønd_bëwìn
(bridge->
backoff_ba£
, bridge->restart_timeout * 3);

677 if(
bridge
->
ª°¨t_timeout
 > bridge->
backoff_ˇp
){

678 
bridge
->
ª°¨t_timeout
 = bridge->
backoff_ˇp
;

681 
	}
}

683 
	$bridge__backoff_ª£t
(
mosquôto
 *
c⁄ãxt
)

685 
mosquôto__bridge
 *
bridge
;

686 if(!
c⁄ãxt
 || !c⁄ãxt->
bridge
) ;

688 
bridge
 = 
c⁄ãxt
->bridge;

691 if(
bridge
->
backoff_ˇp
){

692 
bridge
->
ª°¨t_timeout
 = bridge->
backoff_ba£
;

694 
	}
}

697 
	$bridge_check_≥ndög
(
mosquôto
 *
c⁄ãxt
)

699 
îr
;

700 
sockÀn_t
 
Àn
;

702 if(
c⁄ãxt
->
°©e
 =
mosq_cs_c⁄√˘_≥ndög
){

703 
Àn
 = ();

704 if(!
	`gësock›t
(
c⁄ãxt
->
sock
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
îr
, &
Àn
)){

705 if(
îr
 == 0){

706 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_√w
);

707 #i‡
	`deföed
(
WITH_ADNS
Ë&& deföed(
WITH_BRIDGE
)

708 if(
c⁄ãxt
->
bridge
){

709 
	`bridge__c⁄√˘_°ï3
(
c⁄ãxt
);

712 }if(
îr
 =
ECONNREFUSED
){

713 
	`do_disc⁄√˘
(
c⁄ãxt
, 
MOSQ_ERR_CONN_LOST
);

717 
	`do_disc⁄√˘
(
c⁄ãxt
, 
MOSQ_ERR_CONN_LOST
);

721 
	}
}

723 
	$bridge_check
()

725 
time_t
 
œ°_check
 = 0;

726 
mosquôto
 *
c⁄ãxt
 = 
NULL
;

727 
sockÀn_t
 
Àn
;

728 
i
;

729 
rc
;

730 
îr
;

732 if(
db
.
now_s
 <
œ°_check
) ;

734 
i
=0; i<
db
.
bridge_cou¡
; i++){

735 if(!
db
.
bridges
[
i
]) ;

737 
c⁄ãxt
 = 
db
.
bridges
[
i
];

739 if(
c⁄ãxt
->
sock
 !
INVALID_SOCKET
){

740 
	`mosquôto__check_kì∑live
(
c⁄ãxt
);

741 
	`bridge_check_≥ndög
(
c⁄ãxt
);

745 if(
c⁄ãxt
->
bridge
->
round_robö
 =
Ál£


746 && 
c⁄ãxt
->
bridge
->
cur_addªss
 != 0

747 && 
c⁄ãxt
->
bridge
->
¥im¨y_ªåy


748 && 
db
.
now_s
 > 
c⁄ãxt
->
bridge
->
¥im¨y_ªåy
){

750 if(
c⁄ãxt
->
bridge
->
¥im¨y_ªåy_sock
 =
INVALID_SOCKET
){

751 
rc
 = 
	`√t__åy_c⁄√˘
(
c⁄ãxt
->
bridge
->
addªs£s
[0].
addªss
,

752 
c⁄ãxt
->
bridge
->
addªs£s
[0].
p‹t
,

753 &
c⁄ãxt
->
bridge
->
¥im¨y_ªåy_sock
,

754 
c⁄ãxt
->
bridge
->
böd_addªss
, 
Ál£
);

756 if(
rc
 == 0){

757 
	`COMPAT_CLOSE
(
c⁄ãxt
->
bridge
->
¥im¨y_ªåy_sock
);

758 
c⁄ãxt
->
bridge
->
¥im¨y_ªåy_sock
 = 
INVALID_SOCKET
;

759 
c⁄ãxt
->
bridge
->
¥im¨y_ªåy
 = 0;

760 
	`mux__dñëe
(
c⁄ãxt
);

761 
	`√t__sockë_˛o£
(
c⁄ãxt
);

762 
c⁄ãxt
->
bridge
->
cur_addªss
 = 0;

765 
Àn
 = ();

766 if(!
	`gësock›t
(
c⁄ãxt
->
bridge
->
¥im¨y_ªåy_sock
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
îr
, &
Àn
)){

767 if(
îr
 == 0){

768 
	`COMPAT_CLOSE
(
c⁄ãxt
->
bridge
->
¥im¨y_ªåy_sock
);

769 
c⁄ãxt
->
bridge
->
¥im¨y_ªåy_sock
 = 
INVALID_SOCKET
;

770 
c⁄ãxt
->
bridge
->
¥im¨y_ªåy
 = 0;

771 
	`mux__dñëe
(
c⁄ãxt
);

772 
	`√t__sockë_˛o£
(
c⁄ãxt
);

773 
c⁄ãxt
->
bridge
->
cur_addªss
 = c⁄ãxt->bridge->
addªss_cou¡
-1;

775 
	`COMPAT_CLOSE
(
c⁄ãxt
->
bridge
->
¥im¨y_ªåy_sock
);

776 
c⁄ãxt
->
bridge
->
¥im¨y_ªåy_sock
 = 
INVALID_SOCKET
;

777 
c⁄ãxt
->
bridge
->
¥im¨y_ªåy
 = 
db
.
now_s
+5;

780 
	`COMPAT_CLOSE
(
c⁄ãxt
->
bridge
->
¥im¨y_ªåy_sock
);

781 
c⁄ãxt
->
bridge
->
¥im¨y_ªåy_sock
 = 
INVALID_SOCKET
;

782 
c⁄ãxt
->
bridge
->
¥im¨y_ªåy
 = 
db
.
now_s
+5;

790 if(
c⁄ãxt
->
sock
 =
INVALID_SOCKET
){

792 if(!
c⁄ãxt
->
bridge
->
ª°¨t_t
){

793 
c⁄ãxt
->
bridge
->
ª°¨t_t
 = 
db
.
now_s
+c⁄ãxt->bridge->
ª°¨t_timeout
;

794 
c⁄ãxt
->
bridge
->
cur_addªss
++;

795 if(
c⁄ãxt
->
bridge
->
cur_addªss
 =c⁄ãxt->bridge->
addªss_cou¡
){

796 
c⁄ãxt
->
bridge
->
cur_addªss
 = 0;

799 if((
c⁄ãxt
->
bridge
->
°¨t_ty≥
 =
b°_œzy
 && c⁄ãxt->bridge->
œzy_ªc⁄√˘
)

800 || (
c⁄ãxt
->
bridge
->
°¨t_ty≥
 =
b°_autom©ic
 && 
db
.
now_s
 > c⁄ãxt->bridge->
ª°¨t_t
)){

802 #i‡
	`deföed
(
__GLIBC__
Ë&& deföed(
WITH_ADNS
)

803 if(
c⁄ãxt
->
adns
){

805 
rc
 = 
	`gai_îr‹
(
c⁄ãxt
->
adns
);

806 if(
rc
 =
EAI_INPROGRESS
){

808 }if(
rc
 == 0){

809 
rc
 = 
	`bridge__c⁄√˘_°ï2
(
c⁄ãxt
);

810 if(
rc
 =
MOSQ_ERR_SUCCESS
){

811 
	`mux__add_ö
(
c⁄ãxt
);

812 if(
c⁄ãxt
->
cuºít_out_∑ckë
){

813 
	`mux__add_out
(
c⁄ãxt
);

815 }if(
rc
 =
MOSQ_ERR_CONN_PENDING
){

816 
	`mux__add_ö
(
c⁄ãxt
);

817 
	`mux__add_out
(
c⁄ãxt
);

818 
c⁄ãxt
->
bridge
->
ª°¨t_t
 = 0;

820 
c⁄ãxt
->
bridge
->
cur_addªss
++;

821 if(
c⁄ãxt
->
bridge
->
cur_addªss
 =c⁄ãxt->bridge->
addªss_cou¡
){

822 
c⁄ãxt
->
bridge
->
cur_addªss
 = 0;

824 
c⁄ãxt
->
bridge
->
ª°¨t_t
 = 0;

828 if(
c⁄ãxt
->
adns
->
¨_ªsu…
){

829 
	`‰ìaddröfo
(
c⁄ãxt
->
adns
->
¨_ªsu…
);

831 
	`mosquôto__‰ì
(
c⁄ãxt
->
adns
);

832 
c⁄ãxt
->
adns
 = 
NULL
;

833 
c⁄ãxt
->
bridge
->
ª°¨t_t
 = 0;

836 
rc
 = 
	`bridge__c⁄√˘_°ï1
(
c⁄ãxt
);

837 if(
rc
){

838 
c⁄ãxt
->
bridge
->
cur_addªss
++;

839 if(
c⁄ãxt
->
bridge
->
cur_addªss
 =c⁄ãxt->bridge->
addªss_cou¡
){

840 
c⁄ãxt
->
bridge
->
cur_addªss
 = 0;

844 
c⁄ãxt
->
bridge
->
ª°¨t_t
 = 1;

849 
rc
 = 
	`bridge__c⁄√˘
(
c⁄ãxt
);

850 
c⁄ãxt
->
bridge
->
ª°¨t_t
 = 0;

851 if(
rc
 =
MOSQ_ERR_SUCCESS
 ||Ñ¯=
MOSQ_ERR_CONN_PENDING
){

852 if(
c⁄ãxt
->
bridge
->
round_robö
 =
Ál£
 && c⁄ãxt->bridge->
cur_addªss
 != 0){

853 
c⁄ãxt
->
bridge
->
¥im¨y_ªåy
 = 
db
.
now_s
 + 5;

855 
	`mux__add_ö
(
c⁄ãxt
);

856 if(
c⁄ãxt
->
cuºít_out_∑ckë
){

857 
	`mux__add_out
(
c⁄ãxt
);

860 
c⁄ãxt
->
bridge
->
cur_addªss
++;

861 if(
c⁄ãxt
->
bridge
->
cur_addªss
 =c⁄ãxt->bridge->
addªss_cou¡
){

862 
c⁄ãxt
->
bridge
->
cur_addªss
 = 0;

871 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/bridge_topic.c

19 
	~"c⁄fig.h
"

21 
	~"mosquôto.h
"

22 
	~"mosquôto_brokî_öã∫Æ.h
"

23 
	~"mem‹y_mosq.h
"

25 #ifde‡
WITH_BRIDGE


26 
	$bridge__¸óã_ªm≠_t›ic
(c⁄° *
¥efix
, c⁄° *
t›ic
, **
ªm≠_t›ic
)

28 
size_t
 
Àn
;

30 if(
¥efix
){

31 if(
t›ic
){

32 
Àn
 = 
	`°æí
(
t›ic
Ë+ såÀn(
¥efix
)+1;

33 *
ªm≠_t›ic
 = 
	`mosquôto__mÆloc
(
Àn
+1);

34 if(!(*
ªm≠_t›ic
)){

35 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

36  
MOSQ_ERR_NOMEM
;

38 
	`¢¥ötf
(*
ªm≠_t›ic
, 
Àn
+1, "%s%s", 
¥efix
, 
t›ic
);

39 (*
ªm≠_t›ic
)[
Àn
] = '\0';

41 *
ªm≠_t›ic
 = 
	`mosquôto__°rdup
(
¥efix
);

42 if(!(*
ªm≠_t›ic
)){

43 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

44  
MOSQ_ERR_NOMEM
;

48 *
ªm≠_t›ic
 = 
	`mosquôto__°rdup
(
t›ic
);

49 if(!(*
ªm≠_t›ic
)){

50 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

51  
MOSQ_ERR_NOMEM
;

54  
MOSQ_ERR_SUCCESS
;

55 
	}
}

58 
	$bridge__¸óã_¥efix
(**
fuŒ_¥efix
, c⁄° *
t›ic
, c⁄° *
¥efix
, c⁄° *
dúe˘i⁄
)

60 
size_t
 
Àn
;

62 if(
	`mosquôto_pub_t›ic_check
(
¥efix
Ë!
MOSQ_ERR_SUCCESS
){

63 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆid bridgêt›i¯loˇ»¥efix '%s'.", 
¥efix
);

64  
MOSQ_ERR_INVAL
;

67 if(
t›ic
){

68 
Àn
 = 
	`°æí
(
t›ic
Ë+ såÀn(
¥efix
) + 1;

70 
Àn
 = 
	`°æí
(
¥efix
) + 1;

72 *
fuŒ_¥efix
 = 
	`mosquôto__mÆloc
(
Àn
);

73 if(*
fuŒ_¥efix
 =
NULL
){

74 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

75  
MOSQ_ERR_NOMEM
;

78 if(
t›ic
){

80 
	`¢¥ötf
(*
fuŒ_¥efix
, 
Àn
, "%s%s", 
¥efix
, 
t›ic
);

82 
	`¢¥ötf
(*
fuŒ_¥efix
, 
Àn
, "%s", 
¥efix
);

85 if(
	`mosquôto_sub_t›ic_check
(*
fuŒ_¥efix
Ë!
MOSQ_ERR_SUCCESS
){

86 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

88 
dúe˘i⁄
, *
fuŒ_¥efix
);

90  
MOSQ_ERR_INVAL
;

94 
	`¢¥ötf
(*
fuŒ_¥efix
, 
Àn
, "%s", 
¥efix
);

96  
MOSQ_ERR_SUCCESS
;

97 
	}
}

101 
	$bridge__add_t›ic
(
mosquôto__bridge
 *
bridge
, c⁄° *
t›ic
, 
mosquôto__bridge_dúe˘i⁄
 
dúe˘i⁄
, 
uöt8_t
 
qos
, c⁄° *
loˇl_¥efix
, c⁄° *
ªmŸe_¥efix
)

103 
mosquôto__bridge_t›ic
 *
t›ics
;

104 
mosquôto__bridge_t›ic
 *
cur_t›ic
;

107 if(
bridge
 =
NULL
Ë 
MOSQ_ERR_INVAL
;

108 if(
dúe˘i⁄
 !
bd_out
 && dúe˘i⁄ !
bd_ö
 && dúe˘i⁄ !
bd_bŸh
){

109  
MOSQ_ERR_INVAL
;

111 if(
qos
 > 2){

112  
MOSQ_ERR_INVAL
;

114 if(
loˇl_¥efix
 && 
	`mosquôto_pub_t›ic_check
(local_prefix)){

115 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆid bridgêt›i¯loˇ»¥efix '%s'.", 
loˇl_¥efix
);

116  
MOSQ_ERR_INVAL
;

118 if(
ªmŸe_¥efix
 && 
	`mosquôto_pub_t›ic_check
(remote_prefix)){

119 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆid bridgêt›i¯ªmŸê¥efix '%s'.", 
ªmŸe_¥efix
);

120  
MOSQ_ERR_INVAL
;

122 if((
t›ic
 =
NULL
 || !
	`°rcmp
(topic, "\"\"")) &&

123 (
loˇl_¥efix
 =
NULL
 || 
ªmŸe_¥efix
 == NULL)){

125 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridgeÑemapping.");

126  
MOSQ_ERR_INVAL
;

130 
bridge
->
t›ic_cou¡
++;

131 
t›ics
 = 
	`mosquôto__ªÆloc
(
bridge
->topics,

132 (
mosquôto__bridge_t›ic
)*(
size_t
)
bridge
->
t›ic_cou¡
);

134 if(
t›ics
 =
NULL
){

135 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

136  
MOSQ_ERR_NOMEM
;

138 
bridge
->
t›ics
 =Åopics;

140 
cur_t›ic
 = &
bridge
->
t›ics
[bridge->
t›ic_cou¡
-1];

141 
cur_t›ic
->
dúe˘i⁄
 = direction;

142 
cur_t›ic
->
qos
 = qos;

143 
cur_t›ic
->
loˇl_¥efix
 = 
NULL
;

144 
cur_t›ic
->
ªmŸe_¥efix
 = 
NULL
;

146 if(
t›ic
 =
NULL
 || !
	`°rcmp
(topic, "\"\"")){

147 
cur_t›ic
->
t›ic
 = 
NULL
;

149 
cur_t›ic
->
t›ic
 = 
	`mosquôto__°rdup
(topic);

150 if(
cur_t›ic
->
t›ic
 =
NULL
){

151 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

152  
MOSQ_ERR_NOMEM
;

156 if(
loˇl_¥efix
 || 
ªmŸe_¥efix
){

157 
bridge
->
t›ic_ªm≠pög
 = 
åue
;

158 if(
loˇl_¥efix
){

159 if(
	`bridge__¸óã_¥efix
(&
cur_t›ic
->
loˇl_¥efix
, cur_t›ic->
t›ic
,Üocal_prefix, "local")){

160 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

161  
MOSQ_ERR_NOMEM
;

164 if(
ªmŸe_¥efix
){

165 if(
	`bridge__¸óã_¥efix
(&
cur_t›ic
->
ªmŸe_¥efix
, cur_t›ic->
t›ic
,Ñemote_prefix, "local")){

166 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

167  
MOSQ_ERR_NOMEM
;

172 if(
	`bridge__¸óã_ªm≠_t›ic
(
cur_t›ic
->
loˇl_¥efix
,

173 
cur_t›ic
->
t›ic
, &cur_t›ic->
loˇl_t›ic
)){

175  
MOSQ_ERR_INVAL
;

178 if(
	`bridge__¸óã_ªm≠_t›ic
(
cur_t›ic
->
ªmŸe_¥efix
,

179 
cur_t›ic
->
t›ic
, &cur_t›ic->
ªmŸe_t›ic
)){

181  
MOSQ_ERR_INVAL
;

184  
MOSQ_ERR_SUCCESS
;

185 
	}
}

188 
	$bridge__ªm≠_t›ic_ö
(
mosquôto
 *
c⁄ãxt
, **
t›ic
)

190 
mosquôto__bridge_t›ic
 *
cur_t›ic
;

191 *
t›ic_ãmp
;

192 
i
;

193 
size_t
 
Àn
;

194 
rc
;

195 
boﬁ
 
m©ch
;

197 if(
c⁄ãxt
->
bridge
 && c⁄ãxt->bridge->
t›ics
 && c⁄ãxt->bridge->
t›ic_ªm≠pög
){

198 
i
=0; i<
c⁄ãxt
->
bridge
->
t›ic_cou¡
; i++){

199 
cur_t›ic
 = &
c⁄ãxt
->
bridge
->
t›ics
[
i
];

200 if((
cur_t›ic
->
dúe˘i⁄
 =
bd_bŸh
 || cur_t›ic->dúe˘i⁄ =
bd_ö
)

201 && (
cur_t›ic
->
ªmŸe_¥efix
 || cur_t›ic->
loˇl_¥efix
)){

205 
rc
 = 
	`mosquôto_t›ic_m©ches_sub
(
cur_t›ic
->
ªmŸe_t›ic
, *
t›ic
, &
m©ch
);

206 if(
rc
){

207 
	`mosquôto__‰ì
(*
t›ic
);

208  
rc
;

210 if(
m©ch
){

211 if(
cur_t›ic
->
ªmŸe_¥efix
){

213 if(!
	`°∫cmp
(
cur_t›ic
->
ªmŸe_¥efix
, *
t›ic
, 
	`°æí
(cur_topic->remote_prefix))){

214 
t›ic_ãmp
 = 
	`mosquôto__°rdup
((*
t›ic
)+
	`°æí
(
cur_t›ic
->
ªmŸe_¥efix
));

215 if(!
t›ic_ãmp
){

216 
	`mosquôto__‰ì
(*
t›ic
);

217  
MOSQ_ERR_NOMEM
;

219 
	`mosquôto__‰ì
(*
t›ic
);

220 *
t›ic
 = 
t›ic_ãmp
;

224 if(
cur_t›ic
->
loˇl_¥efix
){

226 
Àn
 = 
	`°æí
(*
t›ic
Ë+ såÀn(
cur_t›ic
->
loˇl_¥efix
)+1;

227 
t›ic_ãmp
 = 
	`mosquôto__mÆloc
(
Àn
+1);

228 if(!
t›ic_ãmp
){

229 
	`mosquôto__‰ì
(*
t›ic
);

230  
MOSQ_ERR_NOMEM
;

232 
	`¢¥ötf
(
t›ic_ãmp
, 
Àn
, "%s%s", 
cur_t›ic
->
loˇl_¥efix
, *
t›ic
);

233 
t›ic_ãmp
[
Àn
] = '\0';

235 
	`mosquôto__‰ì
(*
t›ic
);

236 *
t›ic
 = 
t›ic_ãmp
;

244  
MOSQ_ERR_SUCCESS
;

245 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/conf.c

19 
	~"c⁄fig.h
"

21 
	~<limôs.h
>

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~<î∫o.h
>

27 #ifde‡
WIN32


29 
	~<dúít.h
>

30 
	~<°rögs.h
>

33 #i‚de‡
WIN32


34 
	~<√tdb.h
>

35 
	~<sys/sockë.h
>

37 
	~<wösock2.h
>

38 
	~<ws2t˝ù.h
>

41 #i‡!
deföed
(
WIN32
Ë&& !deföed(
__CYGWIN__
)

42 
	~<sy¶og.h
>

45 
	~"mosquôto_brokî_öã∫Æ.h
"

46 
	~"mem‹y_mosq.h
"

47 
	~"misc_mosq.h
"

48 
	~"és_mosq.h
"

49 
	~"utû_mosq.h
"

50 
	~"mqâ_¥Ÿocﬁ.h
"

52 
	sc⁄fig_ªcur£
 {

53 
	mlog_de°
;

54 
	mlog_de°_£t
;

55 
	mlog_ty≥
;

56 
	mlog_ty≥_£t
;

59 #i‡
deföed
(
WIN32
Ë|| deföed(
__CYGWIN__
)

60 
	~<wödows.h
>

61 
SERVICE_STATUS_HANDLE
 
£rvi˚_h™dÀ
;

64 
mosquôto__£curôy_›ti⁄s
 *
	gcur_£curôy_›ti⁄s
 = 
NULL
;

66 
c⁄f__∑r£_boﬁ
(**
tokí
, c⁄° *
«me
, 
boﬁ
 *
vÆue
, *
ßvïå
);

67 
c⁄f__∑r£_öt
(**
tokí
, c⁄° *
«me
, *
vÆue
, *
ßvïå
);

68 
c⁄f__∑r£_ssize_t
(**
tokí
, c⁄° *
«me
, 
ssize_t
 *
vÆue
, *
ßvïå
);

69 
c⁄f__∑r£_°rög
(**
tokí
, c⁄° *
«me
, **
vÆue
, *
ßvïå
);

70 
c⁄fig__ªad_fûe
(
mosquôto__c⁄fig
 *
c⁄fig
, 
boﬁ
 
ªlﬂd
, c⁄° *
fûe
, 
c⁄fig_ªcur£
 *
c⁄fig_tmp
, 
Àvñ
, *
löío
);

71 
c⁄fig__check
(
mosquôto__c⁄fig
 *
c⁄fig
);

72 
c⁄fig__˛ónup_∂ugös
(
mosquôto__c⁄fig
 *
c⁄fig
);

74 
	$c⁄f__£t_cur_£curôy_›ti⁄s
(
mosquôto__c⁄fig
 *
c⁄fig
, 
mosquôto__li°íî
 *
cur_li°íî
, 
mosquôto__£curôy_›ti⁄s
 **
£curôy_›ti⁄s
)

76 if(
c⁄fig
->
≥r_li°íî_£âögs
){

77 (*
£curôy_›ti⁄s
Ë&
cur_li°íî
->security_options;

79 (*
£curôy_›ti⁄s
Ë&
c⁄fig
->security_options;

81 
	}
}

83 
	$c⁄f__©ãm±_ªsﬁve
(c⁄° *
ho°
, c⁄° *
ãxt
, 
log
, c⁄° *
msg
)

85 
addröfo
 
gai_höts
;

86 
addröfo
 *
gai_ªs
;

87 
rc
;

89 
	`mem£t
(&
gai_höts
, 0, (
addröfo
));

90 
gai_höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

91 
gai_höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

92 
gai_ªs
 = 
NULL
;

93 
rc
 = 
	`gëaddröfo
(
ho°
, 
NULL
, &
gai_höts
, &
gai_ªs
);

94 if(
gai_ªs
){

95 
	`‰ìaddröfo
(
gai_ªs
);

97 if(
rc
 != 0){

98 #i‚de‡
WIN32


99 if(
rc
 =
EAI_SYSTEM
){

100 if(
î∫o
 =
ENOENT
){

101 
	`log__¥ötf
(
NULL
, 
log
, "%s: U«bÀÅÿªsﬁvê%†%s.", 
msg
, 
ãxt
, 
ho°
);

103 
	`log__¥ötf
(
NULL
, 
log
, "%s: Eº‹Ñesﬁvög %s: %s.", 
msg
, 
ãxt
, 
	`°ªº‹
(
î∫o
));

106 
	`log__¥ötf
(
NULL
, 
log
, "%s: Eº‹Ñesﬁvög %s: %s.", 
msg
, 
ãxt
, 
	`gai_°ªº‹
(
rc
));

109 if(
rc
 =
WSAHOST_NOT_FOUND
){

110 
	`log__¥ötf
(
NULL
, 
log
, "%s: Eº‹Ñesﬁvög %s.", 
msg
, 
ãxt
);

113  
MOSQ_ERR_INVAL
;

115  
MOSQ_ERR_SUCCESS
;

116 
	}
}

119 
	$c⁄fig__öô_ªlﬂd
(
mosquôto__c⁄fig
 *
c⁄fig
)

121 
i
;

123 
i
=0; i<
c⁄fig
->
li°íî_cou¡
; i++){

124 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
a˛_fûe
);

125 
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
a˛_fûe
 = 
NULL
;

127 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
∑ssw‹d_fûe
);

128 
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
∑ssw‹d_fûe
 = 
NULL
;

130 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
psk_fûe
);

131 
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
psk_fûe
 = 
NULL
;

133 
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
Ælow_™⁄ymous
 = -1;

134 
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
Ælow_zîo_Àngth_˛õ¡id
 = 
åue
;

135 
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
auto_id_¥efix
 = 
NULL
;

136 
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
auto_id_¥efix_Àn
 = 0;

139 
c⁄fig
->
loˇl_⁄ly
 = 
åue
;

140 
c⁄fig
->
Ælow_du∂iˇã_mesßges
 = 
Ál£
;

142 
	`mosquôto__‰ì
(
c⁄fig
->
£curôy_›ti⁄s
.
a˛_fûe
);

143 
c⁄fig
->
£curôy_›ti⁄s
.
a˛_fûe
 = 
NULL
;

145 
c⁄fig
->
£curôy_›ti⁄s
.
Ælow_™⁄ymous
 = -1;

146 
c⁄fig
->
£curôy_›ti⁄s
.
Ælow_zîo_Àngth_˛õ¡id
 = 
åue
;

147 
c⁄fig
->
£curôy_›ti⁄s
.
auto_id_¥efix
 = 
NULL
;

148 
c⁄fig
->
£curôy_›ti⁄s
.
auto_id_¥efix_Àn
 = 0;

150 
	`mosquôto__‰ì
(
c⁄fig
->
£curôy_›ti⁄s
.
∑ssw‹d_fûe
);

151 
c⁄fig
->
£curôy_›ti⁄s
.
∑ssw‹d_fûe
 = 
NULL
;

153 
	`mosquôto__‰ì
(
c⁄fig
->
£curôy_›ti⁄s
.
psk_fûe
);

154 
c⁄fig
->
£curôy_›ti⁄s
.
psk_fûe
 = 
NULL
;

156 
c⁄fig
->
autoßve_öãrvÆ
 = 1800;

157 
c⁄fig
->
autoßve_⁄_ch™ges
 = 
Ál£
;

158 
	`mosquôto__‰ì
(
c⁄fig
->
˛õ¡id_¥efixes
);

159 
c⁄fig
->
c⁄√˘i⁄_mesßges
 = 
åue
;

160 
c⁄fig
->
˛õ¡id_¥efixes
 = 
NULL
;

161 
c⁄fig
->
≥r_li°íî_£âögs
 = 
Ál£
;

162 if(
c⁄fig
->
log_Âå
){

163 
	`f˛o£
(
c⁄fig
->
log_Âå
);

164 
c⁄fig
->
log_Âå
 = 
NULL
;

166 
	`mosquôto__‰ì
(
c⁄fig
->
log_fûe
);

167 
c⁄fig
->
log_fûe
 = 
NULL
;

169 #i‡
	`deföed
(
WIN32
Ë|| deföed(
__CYGWIN__
)

170 if(
£rvi˚_h™dÀ
){

174 
c⁄fig
->
log_de°
 = 
MQTT3_LOG_NONE
;

176 
c⁄fig
->
log_de°
 = 
MQTT3_LOG_STDERR
;

179 
c⁄fig
->
log_Ácûôy
 = 
LOG_DAEMON
;

180 
c⁄fig
->
log_de°
 = 
MQTT3_LOG_STDERR
 | 
MQTT3_LOG_DLT
;

181 if(
db
.
vîbo£
){

182 
c⁄fig
->
log_ty≥
 = 
UINT_MAX
;

184 
c⁄fig
->
log_ty≥
 = 
MOSQ_LOG_ERR
 | 
MOSQ_LOG_WARNING
 | 
MOSQ_LOG_NOTICE
 | 
MOSQ_LOG_INFO
;

187 
c⁄fig
->
log_time°amp
 = 
åue
;

188 
	`mosquôto__‰ì
(
c⁄fig
->
log_time°amp_f‹m©
);

189 
c⁄fig
->
log_time°amp_f‹m©
 = 
NULL
;

190 
c⁄fig
->
max_kì∑live
 = 65535;

191 
c⁄fig
->
max_∑ckë_size
 = 0;

192 
c⁄fig
->
max_öÊight_mesßges
 = 20;

193 
c⁄fig
->
max_queued_mesßges
 = 1000;

194 
c⁄fig
->
max_öÊight_byãs
 = 0;

195 
c⁄fig
->
max_queued_byãs
 = 0;

196 
c⁄fig
->
≥rsi°í˚
 = 
Ál£
;

197 
	`mosquôto__‰ì
(
c⁄fig
->
≥rsi°í˚_loˇti⁄
);

198 
c⁄fig
->
≥rsi°í˚_loˇti⁄
 = 
NULL
;

199 
	`mosquôto__‰ì
(
c⁄fig
->
≥rsi°í˚_fûe
);

200 
c⁄fig
->
≥rsi°í˚_fûe
 = 
NULL
;

201 
c⁄fig
->
≥rsi°ít_˛õ¡_expú©i⁄
 = 0;

202 
c⁄fig
->
queue_qos0_mesßges
 = 
Ál£
;

203 
c⁄fig
->
ªèö_avaûabÀ
 = 
åue
;

204 
c⁄fig
->
£t_t˝_nodñay
 = 
Ál£
;

205 
c⁄fig
->
sys_öãrvÆ
 = 10;

206 
c⁄fig
->
upgøde_outgoög_qos
 = 
Ál£
;

208 
	`c⁄fig__˛ónup_∂ugös
(
c⁄fig
);

209 
	}
}

212 
	$c⁄fig__˛ónup_∂ugös
(
mosquôto__c⁄fig
 *
c⁄fig
)

214 
i
, 
j
;

215 
mosquôto__auth_∂ugö_c⁄fig
 *
∂ug
;

217 if(
c⁄fig
->
£curôy_›ti⁄s
.
auth_∂ugö_c⁄figs
){

218 
i
=0; i<
c⁄fig
->
£curôy_›ti⁄s
.
auth_∂ugö_c⁄fig_cou¡
; i++){

219 
∂ug
 = &
c⁄fig
->
£curôy_›ti⁄s
.
auth_∂ugö_c⁄figs
[
i
];

220 
	`mosquôto__‰ì
(
∂ug
->
∑th
);

221 
∂ug
->
∑th
 = 
NULL
;

223 if(
∂ug
->
›ti⁄s
){

224 
j
=0; j<
∂ug
->
›ti⁄_cou¡
; j++){

225 
	`mosquôto__‰ì
(
∂ug
->
›ti⁄s
[
j
].
key
);

226 
	`mosquôto__‰ì
(
∂ug
->
›ti⁄s
[
j
].
vÆue
);

228 
	`mosquôto__‰ì
(
∂ug
->
›ti⁄s
);

229 
∂ug
->
›ti⁄s
 = 
NULL
;

230 
∂ug
->
›ti⁄_cou¡
 = 0;

233 
	`mosquôto__‰ì
(
c⁄fig
->
£curôy_›ti⁄s
.
auth_∂ugö_c⁄figs
);

234 
c⁄fig
->
£curôy_›ti⁄s
.
auth_∂ugö_c⁄figs
 = 
NULL
;

236 
	}
}

239 
	$c⁄fig__öô
(
mosquôto__c⁄fig
 *
c⁄fig
)

241 
	`mem£t
(
c⁄fig
, 0, (
mosquôto__c⁄fig
));

242 
	`c⁄fig__öô_ªlﬂd
(
c⁄fig
);

244 
c⁄fig
->
d´m⁄
 = 
Ál£
;

245 
	`mem£t
(&
c⁄fig
->
deÁu…_li°íî
, 0, (
mosquôto__li°íî
));

246 
	`li°íî__£t_deÁu…s
(&
c⁄fig
->
deÁu…_li°íî
);

247 
	}
}

249 
	$c⁄fig__˛ónup
(
mosquôto__c⁄fig
 *
c⁄fig
)

251 
i
;

252 #ifde‡
WITH_BRIDGE


253 
j
;

256 
	`mosquôto__‰ì
(
c⁄fig
->
˛õ¡id_¥efixes
);

257 
	`mosquôto__‰ì
(
c⁄fig
->
≥rsi°í˚_loˇti⁄
);

258 
	`mosquôto__‰ì
(
c⁄fig
->
≥rsi°í˚_fûe
);

259 
	`mosquôto__‰ì
(
c⁄fig
->
≥rsi°í˚_fûï©h
);

260 
	`mosquôto__‰ì
(
c⁄fig
->
£curôy_›ti⁄s
.
auto_id_¥efix
);

261 
	`mosquôto__‰ì
(
c⁄fig
->
£curôy_›ti⁄s
.
a˛_fûe
);

262 
	`mosquôto__‰ì
(
c⁄fig
->
£curôy_›ti⁄s
.
∑ssw‹d_fûe
);

263 
	`mosquôto__‰ì
(
c⁄fig
->
£curôy_›ti⁄s
.
psk_fûe
);

264 
	`mosquôto__‰ì
(
c⁄fig
->
pid_fûe
);

265 
	`mosquôto__‰ì
(
c⁄fig
->
u£r
);

266 
	`mosquôto__‰ì
(
c⁄fig
->
log_time°amp_f‹m©
);

267 if(
c⁄fig
->
li°íîs
){

268 
i
=0; i<
c⁄fig
->
li°íî_cou¡
; i++){

269 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
ho°
);

270 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
böd_öãrÁ˚
);

271 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
mou¡_poöt
);

272 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
socks
);

273 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
auto_id_¥efix
);

274 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
a˛_fûe
);

275 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
∑ssw‹d_fûe
);

276 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
psk_fûe
);

277 #ifde‡
WITH_TLS


278 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
ˇfûe
);

279 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
ˇ∑th
);

280 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
˚πfûe
);

281 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
keyfûe
);

282 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
cùhîs
);

283 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
cùhîs_és13
);

284 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
psk_höt
);

285 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
¸lfûe
);

286 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
dh∑ømfûe
);

287 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
és_vîsi⁄
);

288 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
és_ígöe
);

289 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
és_ígöe_k∑ss_sha1
);

290 #ifde‡
WITH_WEBSOCKETS


291 if(!
c⁄fig
->
li°íîs
[
i
].
ws_c⁄ãxt
)

294 
	`SSL_CTX_‰ì
(
c⁄fig
->
li°íîs
[
i
].
s¶_˘x
);

297 #ifde‡
WITH_WEBSOCKETS


298 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
hâp_dú
);

300 #ifde‡
WITH_UNIX_SOCKETS


301 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
[
i
].
unix_sockë_∑th
);

304 
	`mosquôto__‰ì
(
c⁄fig
->
li°íîs
);

306 #ifde‡
WITH_BRIDGE


307 if(
c⁄fig
->
bridges
){

308 
i
=0; i<
c⁄fig
->
bridge_cou¡
; i++){

309 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
«me
);

310 if(
c⁄fig
->
bridges
[
i
].
addªs£s
){

311 
j
=0; j<
c⁄fig
->
bridges
[
i
].
addªss_cou¡
; j++){

312 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
addªs£s
[
j
].
addªss
);

314 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
addªs£s
);

316 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
ªmŸe_˛õ¡id
);

317 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
ªmŸe_u£∫ame
);

318 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
ªmŸe_∑ssw‹d
);

319 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
loˇl_˛õ¡id
);

320 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
loˇl_u£∫ame
);

321 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
loˇl_∑ssw‹d
);

322 if(
c⁄fig
->
bridges
[
i
].
t›ics
){

323 
j
=0; j<
c⁄fig
->
bridges
[
i
].
t›ic_cou¡
; j++){

324 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
t›ics
[
j
].
t›ic
);

325 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
t›ics
[
j
].
loˇl_¥efix
);

326 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
t›ics
[
j
].
ªmŸe_¥efix
);

327 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
t›ics
[
j
].
loˇl_t›ic
);

328 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
t›ics
[
j
].
ªmŸe_t›ic
);

330 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
t›ics
);

332 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
nŸifiˇti⁄_t›ic
);

333 #ifde‡
WITH_TLS


334 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
és_vîsi⁄
);

335 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
és_ˇfûe
);

336 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
és_Æ≤
);

337 #ifde‡
FINAL_WITH_TLS_PSK


338 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
és_psk_idítôy
);

339 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
[
i
].
és_psk
);

343 
	`mosquôto__‰ì
(
c⁄fig
->
bridges
);

346 
	`c⁄fig__˛ónup_∂ugös
(
c⁄fig
);

348 if(
c⁄fig
->
log_Âå
){

349 
	`f˛o£
(
c⁄fig
->
log_Âå
);

350 
c⁄fig
->
log_Âå
 = 
NULL
;

352 if(
c⁄fig
->
log_fûe
){

353 
	`mosquôto__‰ì
(
c⁄fig
->
log_fûe
);

354 
c⁄fig
->
log_fûe
 = 
NULL
;

356 
	}
}

358 
	$¥öt_ußge
()

360 
	`¥ötf
("mosquôtÿvîsi⁄ %s\n\n", 
VERSION
);

361 
	`¥ötf
("mosquitto isán MQTT v5.0/v3.1.1/v3.1 broker.\n\n");

362 
	`¥ötf
("Usage: mosquitto [-c config_file] [-d] [-h] [-pÖort]\n\n");

363 
	`¥ötf
(" -c : specifyÅhe broker config file.\n");

364 
	`¥ötf
(" -d :ÖutÅhe broker intoÅhe backgroundáfter starting.\n");

365 
	`¥ötf
(" -h : displayÅhis help.\n");

366 
	`¥ötf
(" -p : startÅhe brokerÜistening onÅhe specifiedÖort.\n");

367 
	`¥ötf
(" NotÑecommended in conjunction withÅhe -c option.\n");

368 
	`¥ötf
(" -v : verbose mode -ÉnableállÜoggingÅypes. This overrides\n");

369 
	`¥ötf
("ányÜogging options given inÅhe config file.\n");

370 
	`¥ötf
("\nSee https://mosquitto.org/ for more information.\n\n");

371 
	}
}

373 
	$c⁄fig__∑r£_¨gs
(
mosquôto__c⁄fig
 *
c⁄fig
, 
¨gc
, *
¨gv
[])

375 
i
;

376 
p‹t_tmp
;

378 
i
=1; i<
¨gc
; i++){

379 if(!
	`°rcmp
(
¨gv
[
i
], "-c") || !strcmp(argv[i], "--config-file")){

380 if(
i
<
¨gc
-1){

381 
db
.
c⁄fig_fûe
 = 
¨gv
[
i
+1];

383 if(
	`c⁄fig__ªad
(
c⁄fig
, 
Ál£
)){

384  
MOSQ_ERR_INVAL
;

387 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: -cárgument given, butÇo config file specified.");

388  
MOSQ_ERR_INVAL
;

390 
i
++;

391 }if(!
	`°rcmp
(
¨gv
[
i
], "-d") || !strcmp(argv[i], "--daemon")){

392 
c⁄fig
->
d´m⁄
 = 
åue
;

393 }if(!
	`°rcmp
(
¨gv
[
i
], "-h") || !strcmp(argv[i], "--help")){

394 
	`¥öt_ußge
();

395  
MOSQ_ERR_INVAL
;

396 }if(!
	`°rcmp
(
¨gv
[
i
], "-p") || !strcmp(argv[i], "--port")){

397 if(
i
<
¨gc
-1){

398 
p‹t_tmp
 = 
	`©oi
(
¨gv
[
i
+1]);

399 if(
p‹t_tmp
<1 ||Ö‹t_tmp>
UINT16_MAX
){

400 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆidÖ‹à•ecifõd (%d).", 
p‹t_tmp
);

401  
MOSQ_ERR_INVAL
;

403 if(
c⁄fig
->
cmd_p‹t_cou¡
 =
CMD_PORT_LIMIT
){

404 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: O∆y %dÖ‹t†ˇ¿bê•ecifõd o¿thêcomm™dÜöe.", 
CMD_PORT_LIMIT
);

405  
MOSQ_ERR_INVAL
;

407 
c⁄fig
->
cmd_p‹t
[c⁄fig->
cmd_p‹t_cou¡
] = (
uöt16_t
)
p‹t_tmp
;

408 
c⁄fig
->
cmd_p‹t_cou¡
++;

411 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: -párgument given, butÇoÖort specified.");

412  
MOSQ_ERR_INVAL
;

414 
i
++;

415 }if(!
	`°rcmp
(
¨gv
[
i
], "-v") || !strcmp(argv[i], "--verbose")){

416 
db
.
vîbo£
 = 
åue
;

418 
	`Ârötf
(
°dîr
, "Eº‹: Unknow¿›ti⁄ '%s'.\n",
¨gv
[
i
]);

419 
	`¥öt_ußge
();

420  
MOSQ_ERR_INVAL
;

424 if(
c⁄fig
->
deÁu…_li°íî
.
böd_öãrÁ˚


425 #ifde‡
WITH_TLS


426 || 
c⁄fig
->
deÁu…_li°íî
.
ˇfûe


427 || 
c⁄fig
->
deÁu…_li°íî
.
ˇ∑th


428 || 
c⁄fig
->
deÁu…_li°íî
.
˚πfûe


429 || 
c⁄fig
->
deÁu…_li°íî
.
keyfûe


430 || 
c⁄fig
->
deÁu…_li°íî
.
és_ígöe


431 || 
c⁄fig
->
deÁu…_li°íî
.
és_keyf‹m
 !
mosq_k_≥m


432 || 
c⁄fig
->
deÁu…_li°íî
.
és_ígöe_k∑ss_sha1


433 || 
c⁄fig
->
deÁu…_li°íî
.
cùhîs


434 || 
c⁄fig
->
deÁu…_li°íî
.
cùhîs_és13


435 || 
c⁄fig
->
deÁu…_li°íî
.
dh∑ømfûe


436 || 
c⁄fig
->
deÁu…_li°íî
.
psk_höt


437 || 
c⁄fig
->
deÁu…_li°íî
.
ªquúe_˚πifiˇã


438 || 
c⁄fig
->
deÁu…_li°íî
.
¸lfûe


439 || 
c⁄fig
->
deÁu…_li°íî
.
u£_idítôy_as_u£∫ame


440 || 
c⁄fig
->
deÁu…_li°íî
.
u£_subje˘_as_u£∫ame


442 || 
c⁄fig
->
deÁu…_li°íî
.
u£_u£∫ame_as_˛õ¡id


443 || 
c⁄fig
->
deÁu…_li°íî
.
ho°


444 || 
c⁄fig
->
deÁu…_li°íî
.
p‹t


445 || 
c⁄fig
->
deÁu…_li°íî
.
max_c⁄√˘i⁄s
 != -1

446 || 
c⁄fig
->
deÁu…_li°íî
.
max_qos
 != 2

447 || 
c⁄fig
->
deÁu…_li°íî
.
mou¡_poöt


448 || 
c⁄fig
->
deÁu…_li°íî
.
¥Ÿocﬁ
 !
mp_mqâ


449 || 
c⁄fig
->
deÁu…_li°íî
.
sockë_domaö


450 || 
c⁄fig
->
deÁu…_li°íî
.
£curôy_›ti⁄s
.
∑ssw‹d_fûe


451 || 
c⁄fig
->
deÁu…_li°íî
.
£curôy_›ti⁄s
.
psk_fûe


452 || 
c⁄fig
->
deÁu…_li°íî
.
£curôy_›ti⁄s
.
auth_∂ugö_c⁄fig_cou¡


453 || 
c⁄fig
->
deÁu…_li°íî
.
£curôy_›ti⁄s
.
Ælow_zîo_Àngth_˛õ¡id
 !
åue


456 
c⁄fig
->
li°íî_cou¡
++;

457 
c⁄fig
->
li°íîs
 = 
	`mosquôto__ªÆloc
(c⁄fig->li°íîs, (
mosquôto__li°íî
)*(
size_t
)c⁄fig->
li°íî_cou¡
);

458 if(!
c⁄fig
->
li°íîs
){

459 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

460  
MOSQ_ERR_NOMEM
;

462 
	`mem£t
(&
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1], 0, (
mosquôto__li°íî
));

463 if(
c⁄fig
->
deÁu…_li°íî
.
p‹t
){

464 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
p‹t
 = c⁄fig->
deÁu…_li°íî
.port;

466 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
p‹t
 = 1883;

468 if(
c⁄fig
->
deÁu…_li°íî
.
ho°
){

469 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
ho°
 = c⁄fig->
deÁu…_li°íî
.host;

471 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
ho°
 = 
NULL
;

473 if(
c⁄fig
->
deÁu…_li°íî
.
mou¡_poöt
){

474 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
mou¡_poöt
 = c⁄fig->
deÁu…_li°íî
.mount_point;

476 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
mou¡_poöt
 = 
NULL
;

478 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
böd_öãrÁ˚
 = c⁄fig->
deÁu…_li°íî
.bind_interface;

479 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
max_c⁄√˘i⁄s
 = c⁄fig->
deÁu…_li°íî
.max_connections;

480 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
¥Ÿocﬁ
 = c⁄fig->
deÁu…_li°íî
.protocol;

481 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
sockë_domaö
 = c⁄fig->
deÁu…_li°íî
.socket_domain;

482 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
socks
 = 
NULL
;

483 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
sock_cou¡
 = 0;

484 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
˛õ¡_cou¡
 = 0;

485 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
u£_u£∫ame_as_˛õ¡id
 = c⁄fig->
deÁu…_li°íî
.use_username_as_clientid;

486 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
max_qos
 = c⁄fig->
deÁu…_li°íî
.max_qos;

487 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
max_t›ic_Æüs
 = c⁄fig->
deÁu…_li°íî
.max_topic_alias;

488 #ifde‡
WITH_TLS


489 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
és_vîsi⁄
 = c⁄fig->
deÁu…_li°íî
.tls_version;

490 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
és_ígöe
 = c⁄fig->
deÁu…_li°íî
.tls_engine;

491 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
és_keyf‹m
 = c⁄fig->
deÁu…_li°íî
.tls_keyform;

492 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
és_ígöe_k∑ss_sha1
 = c⁄fig->
deÁu…_li°íî
.tls_engine_kpass_sha1;

493 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
ˇfûe
 = c⁄fig->
deÁu…_li°íî
.cafile;

494 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
ˇ∑th
 = c⁄fig->
deÁu…_li°íî
.capath;

495 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
˚πfûe
 = c⁄fig->
deÁu…_li°íî
.certfile;

496 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
keyfûe
 = c⁄fig->
deÁu…_li°íî
.keyfile;

497 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
cùhîs
 = c⁄fig->
deÁu…_li°íî
.ciphers;

498 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
cùhîs_és13
 = c⁄fig->
deÁu…_li°íî
.ciphers_tls13;

499 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
dh∑ømfûe
 = c⁄fig->
deÁu…_li°íî
.dhparamfile;

500 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
psk_höt
 = c⁄fig->
deÁu…_li°íî
.psk_hint;

501 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
ªquúe_˚πifiˇã
 = c⁄fig->
deÁu…_li°íî
.require_certificate;

502 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
s¶_˘x
 = 
NULL
;

503 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
¸lfûe
 = c⁄fig->
deÁu…_li°íî
.crlfile;

504 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
u£_idítôy_as_u£∫ame
 = c⁄fig->
deÁu…_li°íî
.use_identity_as_username;

505 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
u£_subje˘_as_u£∫ame
 = c⁄fig->
deÁu…_li°íî
.use_subject_as_username;

507 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
£curôy_›ti⁄s
.
a˛_fûe
 = c⁄fig->
deÁu…_li°íî
.security_options.acl_file;

508 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
£curôy_›ti⁄s
.
∑ssw‹d_fûe
 = c⁄fig->
deÁu…_li°íî
.security_options.password_file;

509 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
£curôy_›ti⁄s
.
psk_fûe
 = c⁄fig->
deÁu…_li°íî
.security_options.psk_file;

510 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
£curôy_›ti⁄s
.
auth_∂ugö_c⁄figs
 = c⁄fig->
deÁu…_li°íî
.security_options.auth_plugin_configs;

511 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
£curôy_›ti⁄s
.
auth_∂ugö_c⁄fig_cou¡
 = c⁄fig->
deÁu…_li°íî
.security_options.auth_plugin_config_count;

512 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
£curôy_›ti⁄s
.
Ælow_™⁄ymous
 = c⁄fig->
deÁu…_li°íî
.security_options.allow_anonymous;

513 
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1].
£curôy_›ti⁄s
.
Ælow_zîo_Àngth_˛õ¡id
 = c⁄fig->
deÁu…_li°íî
.security_options.allow_zero_length_clientid;

517 if(!
c⁄fig
->
u£r
){

518 
c⁄fig
->
u£r
 = 
	`mosquôto__°rdup
("mosquitto");

519 if(
c⁄fig
->
u£r
 =
NULL
){

520  
MOSQ_ERR_NOMEM
;

523 if(
db
.
vîbo£
){

524 
c⁄fig
->
log_ty≥
 = 
UINT_MAX
;

526  
	`c⁄fig__check
(
c⁄fig
);

527 
	}
}

529 
	$c⁄fig__c›y
(
mosquôto__c⁄fig
 *
§c
, mosquôto__c⁄fig *
de°
)

531 
	`mosquôto__‰ì
(
de°
->
£curôy_›ti⁄s
.
a˛_fûe
);

532 
de°
->
£curôy_›ti⁄s
.
a˛_fûe
 = 
§c
->security_options.acl_file;

534 
de°
->
£curôy_›ti⁄s
.
Ælow_™⁄ymous
 = 
§c
->security_options.allow_anonymous;

535 
de°
->
£curôy_›ti⁄s
.
Ælow_zîo_Àngth_˛õ¡id
 = 
§c
->security_options.allow_zero_length_clientid;

537 
	`mosquôto__‰ì
(
de°
->
£curôy_›ti⁄s
.
auto_id_¥efix
);

538 
de°
->
£curôy_›ti⁄s
.
auto_id_¥efix
 = 
§c
->security_options.auto_id_prefix;

539 
de°
->
£curôy_›ti⁄s
.
auto_id_¥efix_Àn
 = 
§c
->security_options.auto_id_prefix_len;

541 
	`mosquôto__‰ì
(
de°
->
£curôy_›ti⁄s
.
∑ssw‹d_fûe
);

542 
de°
->
£curôy_›ti⁄s
.
∑ssw‹d_fûe
 = 
§c
->security_options.password_file;

544 
	`mosquôto__‰ì
(
de°
->
£curôy_›ti⁄s
.
psk_fûe
);

545 
de°
->
£curôy_›ti⁄s
.
psk_fûe
 = 
§c
->security_options.psk_file;

548 
de°
->
Ælow_du∂iˇã_mesßges
 = 
§c
->allow_duplicate_messages;

551 
de°
->
autoßve_öãrvÆ
 = 
§c
->autosave_interval;

552 
de°
->
autoßve_⁄_ch™ges
 = 
§c
->autosave_on_changes;

554 
	`mosquôto__‰ì
(
de°
->
˛õ¡id_¥efixes
);

555 
de°
->
˛õ¡id_¥efixes
 = 
§c
->clientid_prefixes;

557 
de°
->
c⁄√˘i⁄_mesßges
 = 
§c
->connection_messages;

558 
de°
->
log_de°
 = 
§c
->log_dest;

559 
de°
->
log_Ácûôy
 = 
§c
->log_facility;

560 
de°
->
log_ty≥
 = 
§c
->log_type;

561 
de°
->
log_time°amp
 = 
§c
->log_timestamp;

563 
	`mosquôto__‰ì
(
de°
->
log_time°amp_f‹m©
);

564 
de°
->
log_time°amp_f‹m©
 = 
§c
->log_timestamp_format;

566 
	`mosquôto__‰ì
(
de°
->
log_fûe
);

567 
de°
->
log_fûe
 = 
§c
->log_file;

569 
de°
->
mesßge_size_limô
 = 
§c
->message_size_limit;

571 
de°
->
≥rsi°í˚
 = 
§c
->persistence;

573 
	`mosquôto__‰ì
(
de°
->
≥rsi°í˚_loˇti⁄
);

574 
de°
->
≥rsi°í˚_loˇti⁄
 = 
§c
->persistence_location;

576 
	`mosquôto__‰ì
(
de°
->
≥rsi°í˚_fûe
);

577 
de°
->
≥rsi°í˚_fûe
 = 
§c
->persistence_file;

579 
	`mosquôto__‰ì
(
de°
->
≥rsi°í˚_fûï©h
);

580 
de°
->
≥rsi°í˚_fûï©h
 = 
§c
->persistence_filepath;

582 
de°
->
≥rsi°ít_˛õ¡_expú©i⁄
 = 
§c
->persistent_client_expiration;

585 
de°
->
queue_qos0_mesßges
 = 
§c
->queue_qos0_messages;

586 
de°
->
sys_öãrvÆ
 = 
§c
->sys_interval;

587 
de°
->
upgøde_outgoög_qos
 = 
§c
->upgrade_outgoing_qos;

589 #ifde‡
WITH_WEBSOCKETS


590 
de°
->
websockës_log_Àvñ
 = 
§c
->websockets_log_level;

592 
	}
}

595 
	$c⁄fig__ªad
(
mosquôto__c⁄fig
 *
c⁄fig
, 
boﬁ
 
ªlﬂd
)

597 
rc
 = 
MOSQ_ERR_SUCCESS
;

598 
c⁄fig_ªcur£
 
¸
;

599 
löío
 = 0;

600 #ifde‡
WITH_PERSISTENCE


601 
size_t
 
Àn
;

603 
mosquôto__c⁄fig
 
c⁄fig_ªlﬂd
;

604 
i
;

606 if(
ªlﬂd
){

607 
	`mem£t
(&
c⁄fig_ªlﬂd
, 0, (
mosquôto__c⁄fig
));

610 
¸
.
log_de°
 = 
MQTT3_LOG_NONE
;

611 
¸
.
log_de°_£t
 = 0;

612 
¸
.
log_ty≥
 = 
MOSQ_LOG_NONE
;

613 
¸
.
log_ty≥_£t
 = 0;

615 if(!
db
.
c⁄fig_fûe
)  0;

617 if(
ªlﬂd
){

619 
	`c⁄fig__öô_ªlﬂd
(&
c⁄fig_ªlﬂd
);

620 
c⁄fig_ªlﬂd
.
li°íîs
 = 
c⁄fig
->listeners;

621 
c⁄fig_ªlﬂd
.
li°íî_cou¡
 = 
c⁄fig
->listener_count;

622 
cur_£curôy_›ti⁄s
 = 
NULL
;

623 
rc
 = 
	`c⁄fig__ªad_fûe
(&
c⁄fig_ªlﬂd
, 
ªlﬂd
, 
db
.
c⁄fig_fûe
, &
¸
, 0, &
löío
);

625 
rc
 = 
	`c⁄fig__ªad_fûe
(
c⁄fig
, 
ªlﬂd
, 
db
.
c⁄fig_fûe
, &
¸
, 0, &
löío
);

627 if(
rc
){

628 if(
löío
 > 0){

629 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ foundáà%s:%d.", 
db
.
c⁄fig_fûe
, 
löío
);

631  
rc
;

634 if(
ªlﬂd
){

635 
	`c⁄fig__c›y
(&
c⁄fig_ªlﬂd
, 
c⁄fig
);

639 if(
c⁄fig
->
loˇl_⁄ly
 =
åue
){

640 
c⁄fig
->
£curôy_›ti⁄s
.
Ælow_™⁄ymous
 = 
åue
;

642 if(
c⁄fig
->
≥r_li°íî_£âögs
){

643 
i
=0; i<
c⁄fig
->
li°íî_cou¡
; i++){

645 if(
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
Ælow_™⁄ymous
 == -1){

646 
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
Ælow_™⁄ymous
 = 
Ál£
;

650 if(
c⁄fig
->
£curôy_›ti⁄s
.
Ælow_™⁄ymous
 == -1){

651 
c⁄fig
->
£curôy_›ti⁄s
.
Ælow_™⁄ymous
 = 
Ál£
;

655 #ifde‡
WITH_PERSISTENCE


656 if(
c⁄fig
->
≥rsi°í˚
){

657 if(!
c⁄fig
->
≥rsi°í˚_fûe
){

658 
c⁄fig
->
≥rsi°í˚_fûe
 = 
	`mosquôto__°rdup
("mosquitto.db");

659 if(!
c⁄fig
->
≥rsi°í˚_fûe
Ë 
MOSQ_ERR_NOMEM
;

661 
	`mosquôto__‰ì
(
c⁄fig
->
≥rsi°í˚_fûï©h
);

662 if(
c⁄fig
->
≥rsi°í˚_loˇti⁄
 && 
	`°æí
(config->persistence_location)){

663 
Àn
 = 
	`°æí
(
c⁄fig
->
≥rsi°í˚_loˇti⁄
Ë+ såÀn(c⁄fig->
≥rsi°í˚_fûe
) + 2;

664 
c⁄fig
->
≥rsi°í˚_fûï©h
 = 
	`mosquôto__mÆloc
(
Àn
);

665 if(!
c⁄fig
->
≥rsi°í˚_fûï©h
Ë 
MOSQ_ERR_NOMEM
;

666 #ifde‡
WIN32


667 
	`¢¥ötf
(
c⁄fig
->
≥rsi°í˚_fûï©h
, 
Àn
, "%s\\%s", c⁄fig->
≥rsi°í˚_loˇti⁄
, c⁄fig->
≥rsi°í˚_fûe
);

669 
	`¢¥ötf
(
c⁄fig
->
≥rsi°í˚_fûï©h
, 
Àn
, "%s/%s", c⁄fig->
≥rsi°í˚_loˇti⁄
, c⁄fig->
≥rsi°í˚_fûe
);

672 
c⁄fig
->
≥rsi°í˚_fûï©h
 = 
	`mosquôto__°rdup
(c⁄fig->
≥rsi°í˚_fûe
);

673 if(!
c⁄fig
->
≥rsi°í˚_fûï©h
Ë 
MOSQ_ERR_NOMEM
;

680 if(!
c⁄fig
->
u£r
){

681 
c⁄fig
->
u£r
 = 
	`mosquôto__°rdup
("mosquitto");

684 #ifde‡
WITH_BRIDGE


685 
i
=0; i<
c⁄fig
->
bridge_cou¡
; i++){

686 if(!
c⁄fig
->
bridges
[
i
].
«me
){

687 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration: bridgeÇameÇot defined.");

688  
MOSQ_ERR_INVAL
;

690 if(
c⁄fig
->
bridges
[
i
].
addªs£s
 == 0){

691 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration:ÇoÑemoteáddresses defined.");

692  
MOSQ_ERR_INVAL
;

694 if(
c⁄fig
->
bridges
[
i
].
t›ic_cou¡
 == 0){

695 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration:ÇoÅopics defined.");

696  
MOSQ_ERR_INVAL
;

698 #ifde‡
FINAL_WITH_TLS_PSK


699 if(
c⁄fig
->
bridges
[
i
].
és_psk
 && !c⁄fig->bridges[i].
és_psk_idítôy
){

700 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration: missing bridge_identity.");

701  
MOSQ_ERR_INVAL
;

703 if(
c⁄fig
->
bridges
[
i
].
és_psk_idítôy
 && !c⁄fig->bridges[i].
és_psk
){

704 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration: missing bridge_psk.");

705  
MOSQ_ERR_INVAL
;

711 if(
¸
.
log_de°_£t
){

712 
c⁄fig
->
log_de°
 = 
¸
.log_dest;

714 if(
db
.
vîbo£
){

715 
c⁄fig
->
log_ty≥
 = 
UINT_MAX
;

716 }if(
¸
.
log_ty≥_£t
){

717 
c⁄fig
->
log_ty≥
 = 
¸
.log_type;

719  
MOSQ_ERR_SUCCESS
;

720 
	}
}

723 
	$c⁄fig__ªad_fûe_c‹e
(
mosquôto__c⁄fig
 *
c⁄fig
, 
boﬁ
 
ªlﬂd
, 
c⁄fig_ªcur£
 *
¸
, 
Àvñ
, *
löío
, 
FILE
 *
Âå
, **
buf
, *
buÊí
)

725 
rc
;

726 *
tokí
;

727 
tmp_öt
;

728 *
ßvïå
 = 
NULL
;

729 #ifde‡
WITH_BRIDGE


730 *
tmp_ch¨
;

731 
mosquôto__bridge
 *
cur_bridge
 = 
NULL
;

733 
mosquôto__auth_∂ugö_c⁄fig
 *
cur_auth_∂ugö_c⁄fig
 = 
NULL
;

735 
time_t
 
expú©i⁄_mu…
;

736 *
key
;

737 
mosquôto__li°íî
 *
cur_li°íî
 = &
c⁄fig
->
deÁu…_li°íî
;

738 
i
;

739 
löío_ext
 = 0;

740 
size_t
 
¥efix_Àn
;

741 **
fûes
;

742 
fûe_cou¡
;

743 
size_t
 
¶í
;

744 #ifde‡
WITH_TLS


745 *
k∑ss_sha
 = 
NULL
, *
k∑ss_sha_bö
 = NULL;

746 *
keyf‹m
 ;

749 *
löío
 = 0;

751 
	`fgës_exãndög
(
buf
, 
buÊí
, 
Âå
)){

752 (*
löío
)++;

753 if((*
buf
)[0] != '#' && (*buf)[0] != 10 && (*buf)[0] != 13){

754 
¶í
 = 
	`°æí
(*
buf
);

755 if(
¶í
 == 0){

758 (*
buf
)[
¶í
-1] == 10 || (*buf)[slen-1] == 13){

759 (*
buf
)[
¶í
-1] = 0;

760 
¶í
 = 
	`°æí
(*
buf
);

761 if(
¶í
 == 0){

765 
tokí
 = 
	`°πok_r
((*
buf
), " ", &
ßvïå
);

766 if(
tokí
){

767 if(!
	`°rcmp
(
tokí
, "acl_file")){

768 
	`c⁄f__£t_cur_£curôy_›ti⁄s
(
c⁄fig
, 
cur_li°íî
, &
cur_£curôy_›ti⁄s
);

769 if(
ªlﬂd
){

770 
	`mosquôto__‰ì
(
cur_£curôy_›ti⁄s
->
a˛_fûe
);

771 
cur_£curôy_›ti⁄s
->
a˛_fûe
 = 
NULL
;

773 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "a˛_fûe", &
cur_£curôy_›ti⁄s
->
a˛_fûe
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

774 }if(!
	`°rcmp
(
tokí
, "address") || !strcmp(token, "addresses")){

775 #ifde‡
WITH_BRIDGE


776 if(
ªlﬂd
) ;

777 if(!
cur_bridge
 || cur_bridge->
addªs£s
){

778 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

779  
MOSQ_ERR_INVAL
;

781 (
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
))){

782 i‡(
tokí
[0] == '#'){

785 
cur_bridge
->
addªss_cou¡
++;

786 
cur_bridge
->
addªs£s
 = 
	`mosquôto__ªÆloc
(cur_bridge->addªs£s, (
bridge_addªss
)*(
size_t
)cur_bridge->
addªss_cou¡
);

787 if(!
cur_bridge
->
addªs£s
){

788 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

789  
MOSQ_ERR_NOMEM
;

791 
cur_bridge
->
addªs£s
[cur_bridge->
addªss_cou¡
-1].
addªss
 = 
tokí
;

793 
i
=0; i<
cur_bridge
->
addªss_cou¡
; i++){

798 
tmp_ch¨
 = 
	`°ºchr
(
cur_bridge
->
addªs£s
[
i
].
addªss
, ':');

799 if(
tmp_ch¨
){

802 
tmp_ch¨
[0] = '\0';

805 
tmp_öt
 = 
	`©oi
(&
tmp_ch¨
[1]);

806 if(
tmp_öt
 < 1 ||Åmp_öà> 
UINT16_MAX
){

807 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆidÖ‹àvÆuê(%d).", 
tmp_öt
);

808  
MOSQ_ERR_INVAL
;

810 
cur_bridge
->
addªs£s
[
i
].
p‹t
 = (
uöt16_t
)
tmp_öt
;

812 
cur_bridge
->
addªs£s
[
i
].
p‹t
 = 1883;

819 
cur_bridge
->
addªs£s
[
i
].
addªss
 = 
	`mosquôto__°rdup
(cur_bridge->addresses[i].address);

820 
	`c⁄f__©ãm±_ªsﬁve
(
cur_bridge
->
addªs£s
[
i
].
addªss
, "bridgêaddªss", 
MOSQ_LOG_WARNING
, "Warning");

822 if(
cur_bridge
->
addªss_cou¡
 == 0){

823 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Emptyáddress value in configuration.");

824  
MOSQ_ERR_INVAL
;

827 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

829 }if(!
	`°rcmp
(
tokí
, "allow_anonymous")){

830 
	`c⁄f__£t_cur_£curôy_›ti⁄s
(
c⁄fig
, 
cur_li°íî
, &
cur_£curôy_›ti⁄s
);

831 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "Ælow_™⁄ymous", (
boﬁ
 *)&
cur_£curôy_›ti⁄s
->
Ælow_™⁄ymous
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

832 }if(!
	`°rcmp
(
tokí
, "allow_duplicate_messages")){

833 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "The 'allow_duplicate_messages' option isÇow deprecatedánd will beÑemoved iná future version. The behaviour will defaultÅoÅrue.");

834 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "Ælow_du∂iˇã_mesßges", &
c⁄fig
->
Ælow_du∂iˇã_mesßges
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

835 }if(!
	`°rcmp
(
tokí
, "allow_zero_length_clientid")){

836 
	`c⁄f__£t_cur_£curôy_›ti⁄s
(
c⁄fig
, 
cur_li°íî
, &
cur_£curôy_›ti⁄s
);

837 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "Ælow_zîo_Àngth_˛õ¡id", &
cur_£curôy_›ti⁄s
->
Ælow_zîo_Àngth_˛õ¡id
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

838 }if(!
	`°∫cmp
(
tokí
, "auth_›t_", 
	`°æí
("auth_opt_")) || !strncmp(token, "plugin_opt_", strlen("plugin_opt_"))){

839 if(
ªlﬂd
) ;

840 if(!
cur_auth_∂ugö_c⁄fig
){

841 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Anáuth_opt_ optionÉxists inÅhe config file withoutánáuth_plugin.");

842  
MOSQ_ERR_INVAL
;

844 if(!
	`°∫cmp
(
tokí
, "auth_›t_", 
	`°æí
("auth_opt_"))){

845 
¥efix_Àn
 = 
	`°æí
("auth_opt_");

847 
¥efix_Àn
 = 
	`°æí
("plugin_opt_");

849 if(
	`°æí
(
tokí
Ë< 
¥efix_Àn
 + 3){

851 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalidáuth_opt_ config option.");

852  
MOSQ_ERR_INVAL
;

854 
key
 = 
	`mosquôto__°rdup
(&
tokí
[
¥efix_Àn
]);

855 if(!
key
){

856 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

857  
MOSQ_ERR_NOMEM
;

858 }if(
	`STREMPTY
(
key
)){

859 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalidáuth_opt_ config option.");

860 
	`mosquôto__‰ì
(
key
);

861  
MOSQ_ERR_INVAL
;

863 
tokí
 +
¥efix_Àn
+
	`°æí
(
key
)+1;

864 
tokí
[0] == ' ' ||Åoken[0] == '\t'){

865 
tokí
++;

867 if(
tokí
[0]){

868 
cur_auth_∂ugö_c⁄fig
->
›ti⁄_cou¡
++;

869 
cur_auth_∂ugö_c⁄fig
->
›ti⁄s
 = 
	`mosquôto__ªÆloc
(cur_auth_∂ugö_c⁄fig->›ti⁄s, (
size_t
)cur_auth_∂ugö_c⁄fig->
›ti⁄_cou¡
*(
mosquôto_auth_›t
));

870 if(!
cur_auth_∂ugö_c⁄fig
->
›ti⁄s
){

871 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

872 
	`mosquôto__‰ì
(
key
);

873  
MOSQ_ERR_NOMEM
;

875 
cur_auth_∂ugö_c⁄fig
->
›ti⁄s
[cur_auth_∂ugö_c⁄fig->
›ti⁄_cou¡
-1].
key
 = key;

876 
cur_auth_∂ugö_c⁄fig
->
›ti⁄s
[cur_auth_∂ugö_c⁄fig->
›ti⁄_cou¡
-1].
vÆue
 = 
	`mosquôto__°rdup
(
tokí
);

877 if(!
cur_auth_∂ugö_c⁄fig
->
›ti⁄s
[cur_auth_∂ugö_c⁄fig->
›ti⁄_cou¡
-1].
vÆue
){

878 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

879  
MOSQ_ERR_NOMEM
;

882 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: Em±y %†vÆuêö c⁄figuøti⁄.", 
key
);

883 
	`mosquôto__‰ì
(
key
);

884  
MOSQ_ERR_INVAL
;

886 }if(!
	`°rcmp
(
tokí
, "auth_plugin") || !strcmp(token, "plugin")){

887 if(
ªlﬂd
) ;

888 
	`c⁄f__£t_cur_£curôy_›ti⁄s
(
c⁄fig
, 
cur_li°íî
, &
cur_£curôy_›ti⁄s
);

889 
cur_£curôy_›ti⁄s
->
auth_∂ugö_c⁄figs
 = 
	`mosquôto__ªÆloc
(cur_£curôy_›ti⁄s->auth_∂ugö_c⁄figs, (
size_t
)(cur_£curôy_›ti⁄s->
auth_∂ugö_c⁄fig_cou¡
+1)*(
mosquôto__auth_∂ugö_c⁄fig
));

890 if(!
cur_£curôy_›ti⁄s
->
auth_∂ugö_c⁄figs
){

891 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

892  
MOSQ_ERR_NOMEM
;

894 
cur_auth_∂ugö_c⁄fig
 = &
cur_£curôy_›ti⁄s
->
auth_∂ugö_c⁄figs
[cur_£curôy_›ti⁄s->
auth_∂ugö_c⁄fig_cou¡
];

895 
	`mem£t
(
cur_auth_∂ugö_c⁄fig
, 0, (
mosquôto__auth_∂ugö_c⁄fig
));

896 
cur_auth_∂ugö_c⁄fig
->
∑th
 = 
NULL
;

897 
cur_auth_∂ugö_c⁄fig
->
›ti⁄s
 = 
NULL
;

898 
cur_auth_∂ugö_c⁄fig
->
›ti⁄_cou¡
 = 0;

899 
cur_auth_∂ugö_c⁄fig
->
díy_•ecül_ch¨s
 = 
åue
;

900 
cur_£curôy_›ti⁄s
->
auth_∂ugö_c⁄fig_cou¡
++;

901 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "auth_∂ugö", &
cur_auth_∂ugö_c⁄fig
->
∑th
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

902 }if(!
	`°rcmp
(
tokí
, "auth_plugin_deny_special_chars")){

903 if(
ªlﬂd
) ;

904 if(!
cur_auth_∂ugö_c⁄fig
){

905 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Anáuth_plugin_deny_special_chars optionÉxists inÅhe config file withoutánáuth_plugin.");

906  
MOSQ_ERR_INVAL
;

908 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "auth_∂ugö_díy_•ecül_ch¨s", &
cur_auth_∂ugö_c⁄fig
->
díy_•ecül_ch¨s
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

909 }if(!
	`°rcmp
(
tokí
, "auto_id_prefix")){

910 
	`c⁄f__£t_cur_£curôy_›ti⁄s
(
c⁄fig
, 
cur_li°íî
, &
cur_£curôy_›ti⁄s
);

911 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "auto_id_¥efix", &
cur_£curôy_›ti⁄s
->
auto_id_¥efix
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

912 if(
cur_£curôy_›ti⁄s
->
auto_id_¥efix
){

913 
cur_£curôy_›ti⁄s
->
auto_id_¥efix_Àn
 = (
uöt16_t
)
	`°æí
(cur_£curôy_›ti⁄s->
auto_id_¥efix
);

915 
cur_£curôy_›ti⁄s
->
auto_id_¥efix_Àn
 = 0;

917 }if(!
	`°rcmp
(
tokí
, "autosave_interval")){

918 if(
	`c⁄f__∑r£_öt
(&
tokí
, "autoßve_öãrvÆ", &
c⁄fig
->
autoßve_öãrvÆ
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

919 if(
c⁄fig
->
autoßve_öãrvÆ
 < 0) config->autosave_interval = 0;

920 }if(!
	`°rcmp
(
tokí
, "autosave_on_changes")){

921 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "autoßve_⁄_ch™ges", &
c⁄fig
->
autoßve_⁄_ch™ges
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

922 }if(!
	`°rcmp
(
tokí
, "bind_address")){

923 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "The 'bind_address' option isÇow deprecatedánd will beÑemoved iná future version. The behaviour will defaultÅoÅrue.");

924 
c⁄fig
->
loˇl_⁄ly
 = 
Ál£
;

925 if(
ªlﬂd
) ;

926 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "deÁu…Üi°íî böd_addªss", &
c⁄fig
->
deÁu…_li°íî
.
ho°
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

927 if(
	`c⁄f__©ãm±_ªsﬁve
(
c⁄fig
->
deÁu…_li°íî
.
ho°
, "böd_addªss", 
MOSQ_LOG_ERR
, "Error")){

928  
MOSQ_ERR_INVAL
;

930 }if(!
	`°rcmp
(
tokí
, "bind_interface")){

931 #ifde‡
SO_BINDTODEVICE


932 if(
ªlﬂd
) ;

933 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "böd_öãrÁ˚", &
cur_li°íî
->
böd_öãrÁ˚
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

935 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: bind_interface specified but socket optionÇotávailable.");

936  
MOSQ_ERR_INVAL
;

938 }if(!
	`°rcmp
(
tokí
, "bridge_attempt_unsubscribe")){

939 #ifde‡
WITH_BRIDGE


940 if(
ªlﬂd
) ;

941 if(!
cur_bridge
){

942 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

943  
MOSQ_ERR_INVAL
;

945 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "bridge_©ãm±_unsubs¸ibe", &
cur_bridge
->
©ãm±_unsubs¸ibe
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

947 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

949 }if(!
	`°rcmp
(
tokí
, "bridge_cafile")){

950 #i‡
	`deföed
(
WITH_BRIDGE
Ë&& deföed(
WITH_TLS
)

951 if(
ªlﬂd
) ;

952 if(!
cur_bridge
){

953 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

954  
MOSQ_ERR_INVAL
;

956 #ifde‡
FINAL_WITH_TLS_PSK


957 if(
cur_bridge
->
és_psk_idítôy
 || cur_bridge->
és_psk
){

958 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Cannot use both certificateándÖskÉncryption iná single bridge.");

959  
MOSQ_ERR_INVAL
;

962 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "bridge_ˇfûe", &
cur_bridge
->
és_ˇfûe
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

964 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridgeánd/or TLS supportÇotávailable.");

966 }if(!
	`°rcmp
(
tokí
, "bridge_alpn")){

967 #i‡
	`deföed
(
WITH_BRIDGE
Ë&& deföed(
WITH_TLS
)

968 if(
ªlﬂd
) ;

969 if(!
cur_bridge
){

970 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

971  
MOSQ_ERR_INVAL
;

973 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "bridge_Æ≤", &
cur_bridge
->
és_Æ≤
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

975 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridgeánd/or TLS supportÇotávailable.");

977 }if(!
	`°rcmp
(
tokí
, "bridge_bind_address")){

978 #i‡
	`deföed
(
WITH_BRIDGE
Ë&& deföed(
WITH_TLS
)

979 if(
ªlﬂd
) ;

980 if(!
cur_bridge
){

981 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

982  
MOSQ_ERR_INVAL
;

984 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "bridge_böd_addªss", &
cur_bridge
->
böd_addªss
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

986 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

988 }if(!
	`°rcmp
(
tokí
, "bridge_capath")){

989 #i‡
	`deföed
(
WITH_BRIDGE
Ë&& deföed(
WITH_TLS
)

990 if(
ªlﬂd
) ;

991 if(!
cur_bridge
){

992 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

993  
MOSQ_ERR_INVAL
;

995 #ifde‡
FINAL_WITH_TLS_PSK


996 if(
cur_bridge
->
és_psk_idítôy
 || cur_bridge->
és_psk
){

997 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Cannot use both certificateándÖskÉncryption iná single bridge.");

998  
MOSQ_ERR_INVAL
;

1001 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "bridge_ˇ∑th", &
cur_bridge
->
és_ˇ∑th
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1003 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridgeánd/or TLS supportÇotávailable.");

1005 }if(!
	`°rcmp
(
tokí
, "bridge_certfile")){

1006 #i‡
	`deföed
(
WITH_BRIDGE
Ë&& deföed(
WITH_TLS
)

1007 if(
ªlﬂd
) ;

1008 if(!
cur_bridge
){

1009 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1010  
MOSQ_ERR_INVAL
;

1012 #ifde‡
FINAL_WITH_TLS_PSK


1013 if(
cur_bridge
->
és_psk_idítôy
 || cur_bridge->
és_psk
){

1014 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Cannot use both certificateándÖskÉncryption iná single bridge.");

1015  
MOSQ_ERR_INVAL
;

1018 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "bridge_˚πfûe", &
cur_bridge
->
és_˚πfûe
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1020 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridgeánd/or TLS supportÇotávailable.");

1022 }if(!
	`°rcmp
(
tokí
, "bridge_identity")){

1023 #i‡
	`deföed
(
WITH_BRIDGE
Ë&& deföed(
FINAL_WITH_TLS_PSK
)

1024 if(
ªlﬂd
) ;

1025 if(!
cur_bridge
){

1026 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1027  
MOSQ_ERR_INVAL
;

1029 if(
cur_bridge
->
és_ˇfûe
 || cur_bridge->
és_ˇ∑th
 || cur_bridge->
és_˚πfûe
 || cur_bridge->
és_keyfûe
){

1030 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Cannot use both certificateánd identityÉncryption iná single bridge.");

1031  
MOSQ_ERR_INVAL
;

1033 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "bridge_idítôy", &
cur_bridge
->
és_psk_idítôy
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1035 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridgeánd/or TLS-PSK supportÇotávailable.");

1037 }if(!
	`°rcmp
(
tokí
, "bridge_insecure")){

1038 #i‡
	`deföed
(
WITH_BRIDGE
Ë&& deföed(
WITH_TLS
)

1039 if(
ªlﬂd
) ;

1040 if(!
cur_bridge
){

1041 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1042  
MOSQ_ERR_INVAL
;

1044 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "bridge_ö£cuª", &
cur_bridge
->
és_ö£cuª
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1045 if(
cur_bridge
->
és_ö£cuª
){

1046 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "W¨nög: Bridgê%†usög in£cuª mode.", 
cur_bridge
->
«me
);

1049 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridgeánd/or TLS-PSK supportÇotávailable.");

1051 }if(!
	`°rcmp
(
tokí
, "bridge_require_ocsp")){

1052 #i‡
	`deföed
(
WITH_BRIDGE
Ë&& deföed(
WITH_TLS
)

1053 if(
ªlﬂd
) ;

1054 if(!
cur_bridge
){

1055 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1056  
MOSQ_ERR_INVAL
;

1058 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "bridge_ªquúe_oc•", &
cur_bridge
->
és_oc•_ªquúed
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1060 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS supportÇotávailable.");

1062 }if(!
	`°rcmp
(
tokí
, "bridge_max_packet_size")){

1063 #i‡
	`deföed
(
WITH_BRIDGE
)

1064 if(
ªlﬂd
) ;

1065 if(!
cur_bridge
){

1066 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1067  
MOSQ_ERR_INVAL
;

1069 if(
	`c⁄f__∑r£_öt
(&
tokí
, "bridge_max_∑ckë_size", &
tmp_öt
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1070 if(
tmp_öt
 < 0)Åmp_int = 0;

1071 
cur_bridge
->
maximum_∑ckë_size
 = (
uöt32_t
)
tmp_öt
;

1073 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1075 }if(!
	`°rcmp
(
tokí
, "bridge_outgoing_retain")){

1076 #i‡
	`deföed
(
WITH_BRIDGE
)

1077 if(
ªlﬂd
) ;

1078 if(!
cur_bridge
){

1079 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1080  
MOSQ_ERR_INVAL
;

1082 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "bridge_outgoög_ªèö", &
cur_bridge
->
outgoög_ªèö
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1084 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1086 }if(!
	`°rcmp
(
tokí
, "bridge_keyfile")){

1087 #i‡
	`deföed
(
WITH_BRIDGE
Ë&& deföed(
WITH_TLS
)

1088 if(
ªlﬂd
) ;

1089 if(!
cur_bridge
){

1090 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1091  
MOSQ_ERR_INVAL
;

1093 #ifde‡
FINAL_WITH_TLS_PSK


1094 if(
cur_bridge
->
és_psk_idítôy
 || cur_bridge->
és_psk
){

1095 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Cannot use both certificateándÖskÉncryption iná single bridge.");

1096  
MOSQ_ERR_INVAL
;

1099 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "bridge_keyfûe", &
cur_bridge
->
és_keyfûe
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1101 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridgeánd/or TLS supportÇotávailable.");

1103 }if(!
	`°rcmp
(
tokí
, "bridge_protocol_version")){

1104 #ifde‡
WITH_BRIDGE


1105 if(
ªlﬂd
) ;

1106 if(!
cur_bridge
){

1107 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1108  
MOSQ_ERR_INVAL
;

1110 
tokí
 = 
	`°πok_r
(
NULL
, "", &
ßvïå
);

1111 if(
tokí
){

1112 if(!
	`°rcmp
(
tokí
, "mqttv31")){

1113 
cur_bridge
->
¥Ÿocﬁ_vîsi⁄
 = 
mosq_p_mqâ31
;

1114 }if(!
	`°rcmp
(
tokí
, "mqttv311")){

1115 
cur_bridge
->
¥Ÿocﬁ_vîsi⁄
 = 
mosq_p_mqâ311
;

1116 }if(!
	`°rcmp
(
tokí
, "mqttv50")){

1117 
cur_bridge
->
¥Ÿocﬁ_vîsi⁄
 = 
mosq_p_mqâ5
;

1119 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆid bridge_¥Ÿocﬁ_vîsi⁄ vÆuê(%s).", 
tokí
);

1120  
MOSQ_ERR_INVAL
;

1123 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Empty bridge_protocol_version value in configuration.");

1124  
MOSQ_ERR_INVAL
;

1127 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1129 }if(!
	`°rcmp
(
tokí
, "bridge_psk")){

1130 #i‡
	`deföed
(
WITH_BRIDGE
Ë&& deföed(
FINAL_WITH_TLS_PSK
)

1131 if(
ªlﬂd
) ;

1132 if(!
cur_bridge
){

1133 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1134  
MOSQ_ERR_INVAL
;

1136 if(
cur_bridge
->
és_ˇfûe
 || cur_bridge->
és_ˇ∑th
 || cur_bridge->
és_˚πfûe
 || cur_bridge->
és_keyfûe
){

1137 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Cannot use both certificateándÖskÉncryption iná single bridge.");

1138  
MOSQ_ERR_INVAL
;

1140 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "bridge_psk", &
cur_bridge
->
és_psk
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1142 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridgeánd/or TLS-PSK supportÇotávailable.");

1144 }if(!
	`°rcmp
(
tokí
, "bridge_tls_version")){

1145 #i‡
	`deföed
(
WITH_BRIDGE
Ë&& deföed(
WITH_TLS
)

1146 if(
ªlﬂd
) ;

1147 if(!
cur_bridge
){

1148 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1149  
MOSQ_ERR_INVAL
;

1151 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "bridge_és_vîsi⁄", &
cur_bridge
->
és_vîsi⁄
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1153 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridgeánd/or TLS supportÇotávailable.");

1155 }if(!
	`°rcmp
(
tokí
, "cafile")){

1156 #i‡
	`deföed
(
WITH_TLS
)

1157 if(
ªlﬂd
) ;

1158 if(
cur_li°íî
->
psk_höt
){

1159 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Cannot use both certificateándÖskÉncryption iná singleÜistener.");

1160  
MOSQ_ERR_INVAL
;

1162 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "ˇfûe", &
cur_li°íî
->
ˇfûe
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1164 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS supportÇotávailable.");

1166 }if(!
	`°rcmp
(
tokí
, "capath")){

1167 #ifde‡
WITH_TLS


1168 if(
ªlﬂd
) ;

1169 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "ˇ∑th", &
cur_li°íî
->
ˇ∑th
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1171 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS supportÇotávailable.");

1173 }if(!
	`°rcmp
(
tokí
, "certfile")){

1174 #ifde‡
WITH_TLS


1175 if(
ªlﬂd
) ;

1176 if(
cur_li°íî
->
psk_höt
){

1177 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Cannot use both certificateándÖskÉncryption iná singleÜistener.");

1178  
MOSQ_ERR_INVAL
;

1180 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "˚πfûe", &
cur_li°íî
->
˚πfûe
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1182 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS supportÇotávailable.");

1184 }if(!
	`°rcmp
(
tokí
, "check_retain_source")){

1185 
	`c⁄f__£t_cur_£curôy_›ti⁄s
(
c⁄fig
, 
cur_li°íî
, &
cur_£curôy_›ti⁄s
);

1186 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "check_ªèö_sour˚", &
c⁄fig
->
check_ªèö_sour˚
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1187 }if(!
	`°rcmp
(
tokí
, "ciphers")){

1188 #ifde‡
WITH_TLS


1189 if(
ªlﬂd
) ;

1190 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "cùhîs", &
cur_li°íî
->
cùhîs
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1192 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS supportÇotávailable.");

1194 }if(!
	`°rcmp
(
tokí
, "ciphers_tls1.3")){

1195 #i‡
	`deföed
(
WITH_TLS
Ë&& (!deföed(
LIBRESSL_VERSION_NUMBER
) || LIBRESSL_VERSION_NUMBER > 0x3040000FL)

1196 if(
ªlﬂd
) ;

1197 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "cùhîs_és1.3", &
cur_li°íî
->
cùhîs_és13
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1199 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: ciphers_tls1.3 supportÇotávailable.");

1201 }if(!
	`°rcmp
(
tokí
, "clientid") || !strcmp(token, "remote_clientid")){

1202 #ifde‡
WITH_BRIDGE


1203 if(
ªlﬂd
) ;

1204 if(!
cur_bridge
){

1205 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1206  
MOSQ_ERR_INVAL
;

1208 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "bridgêªmŸê˛õ¡id", &
cur_bridge
->
ªmŸe_˛õ¡id
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1210 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1212 }if(!
	`°rcmp
(
tokí
, "cleansession")){

1213 #ifde‡
WITH_BRIDGE


1214 if(
ªlﬂd
) ;

1215 if(!
cur_bridge
){

1216 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1217  
MOSQ_ERR_INVAL
;

1219 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "˛ón£ssi⁄", &
cur_bridge
->
˛ón_°¨t
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1221 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1223 }if(!
	`°rcmp
(
tokí
, "local_cleansession")){

1224 #ifde‡
WITH_BRIDGE


1225 if(
ªlﬂd
) ;

1226 if(!
cur_bridge
){

1227 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1228  
MOSQ_ERR_INVAL
;

1230 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "loˇl_˛ón£ssi⁄", (
boﬁ
 *Ë&
cur_bridge
->
˛ón_°¨t_loˇl
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1232 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1234 }if(!
	`°rcmp
(
tokí
, "clientid_prefixes")){

1235 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "The 'clientid_prefixes' option isÇow deprecatedánd will beÑemoved iná future version.");

1236 if(
ªlﬂd
){

1237 
	`mosquôto__‰ì
(
c⁄fig
->
˛õ¡id_¥efixes
);

1238 
c⁄fig
->
˛õ¡id_¥efixes
 = 
NULL
;

1240 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "˛õ¡id_¥efixes", &
c⁄fig
->
˛õ¡id_¥efixes
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1241 }if(!
	`°rcmp
(
tokí
, "connection")){

1242 #ifde‡
WITH_BRIDGE


1243 if(
ªlﬂd
) ;

1244 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

1245 if(
tokí
){

1247 
i
=0; i<
c⁄fig
->
bridge_cou¡
; i++){

1248 if(!
	`°rcmp
(
c⁄fig
->
bridges
[
i
].
«me
, 
tokí
)){

1249 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: Du∂iˇã bridgê«mê\"%s\".", 
tokí
);

1250  
MOSQ_ERR_INVAL
;

1254 
c⁄fig
->
bridge_cou¡
++;

1255 
c⁄fig
->
bridges
 = 
	`mosquôto__ªÆloc
(c⁄fig->bridges, (
size_t
)c⁄fig->
bridge_cou¡
*(
mosquôto__bridge
));

1256 if(!
c⁄fig
->
bridges
){

1257 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

1258  
MOSQ_ERR_NOMEM
;

1260 
cur_bridge
 = &(
c⁄fig
->
bridges
[c⁄fig->
bridge_cou¡
-1]);

1261 
	`mem£t
(
cur_bridge
, 0, (
mosquôto__bridge
));

1262 
cur_bridge
->
«me
 = 
	`mosquôto__°rdup
(
tokí
);

1263 if(!
cur_bridge
->
«me
){

1264 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

1265  
MOSQ_ERR_NOMEM
;

1267 
cur_bridge
->
kì∑live
 = 60;

1268 
cur_bridge
->
nŸifiˇti⁄s
 = 
åue
;

1269 
cur_bridge
->
nŸifiˇti⁄s_loˇl_⁄ly
 = 
Ál£
;

1270 
cur_bridge
->
°¨t_ty≥
 = 
b°_autom©ic
;

1271 
cur_bridge
->
idÀ_timeout
 = 60;

1272 
cur_bridge
->
ª°¨t_timeout
 = 0;

1273 
cur_bridge
->
backoff_ba£
 = 5;

1274 
cur_bridge
->
backoff_ˇp
 = 30;

1275 
cur_bridge
->
thªshﬁd
 = 10;

1276 
cur_bridge
->
åy_¥iv©e
 = 
åue
;

1277 
cur_bridge
->
©ãm±_unsubs¸ibe
 = 
åue
;

1278 
cur_bridge
->
¥Ÿocﬁ_vîsi⁄
 = 
mosq_p_mqâ311
;

1279 
cur_bridge
->
¥im¨y_ªåy_sock
 = 
INVALID_SOCKET
;

1280 
cur_bridge
->
outgoög_ªèö
 = 
åue
;

1281 
cur_bridge
->
˛ón_°¨t_loˇl
 = -1;

1283 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Empty connection value in configuration.");

1284  
MOSQ_ERR_INVAL
;

1287 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1289 }if(!
	`°rcmp
(
tokí
, "connection_messages")){

1290 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
,Åokí, &
c⁄fig
->
c⁄√˘i⁄_mesßges
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1291 }if(!
	`°rcmp
(
tokí
, "crlfile")){

1292 #ifde‡
WITH_TLS


1293 if(
ªlﬂd
) ;

1294 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "¸lfûe", &
cur_li°íî
->
¸lfûe
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1296 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS supportÇotávailable.");

1298 }if(!
	`°rcmp
(
tokí
, "dhparamfile")){

1299 #ifde‡
WITH_TLS


1300 if(
ªlﬂd
) ;

1301 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "dh∑ømfûe", &
cur_li°íî
->
dh∑ømfûe
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1303 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS supportÇotávailable.");

1305 }if(!
	`°rcmp
(
tokí
, "http_dir")){

1306 #ifde‡
WITH_WEBSOCKETS


1307 if(
ªlﬂd
) ;

1308 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "hâp_dú", &
cur_li°íî
->
hâp_dú
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1310 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Websockets supportÇotávailable.");

1312 }if(!
	`°rcmp
(
tokí
, "idle_timeout")){

1313 #ifde‡
WITH_BRIDGE


1314 if(
ªlﬂd
) ;

1315 if(!
cur_bridge
){

1316 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1317  
MOSQ_ERR_INVAL
;

1319 if(
	`c⁄f__∑r£_öt
(&
tokí
, "idÀ_timeout", &
cur_bridge
->
idÀ_timeout
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1320 if(
cur_bridge
->
idÀ_timeout
 < 1){

1321 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "idle_timeout intervalÅooÜow, using 1 second.");

1322 
cur_bridge
->
idÀ_timeout
 = 1;

1325 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1327 }if(!
	`°rcmp
(
tokí
, "include_dir")){

1328 if(
Àvñ
 == 0){

1330 
tokí
 = 
	`°πok_r
(
NULL
, "", &
ßvïå
);

1331 if(!
tokí
){

1332 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Empty include_dir value in configuration.");

1336 
rc
 = 
	`c⁄fig__gë_dú_fûes
(
tokí
, &
fûes
, &
fûe_cou¡
);

1337 if(
rc
) Ñc;

1339 
i
=0; i<
fûe_cou¡
; i++){

1340 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "Lﬂdög c⁄fig fûê%s", 
fûes
[
i
]);

1342 
rc
 = 
	`c⁄fig__ªad_fûe
(
c⁄fig
, 
ªlﬂd
, 
fûes
[
i
], 
¸
, 
Àvñ
+1, &
löío_ext
);

1343 if(
rc
){

1344 if(
löío_ext
 > 0){

1345 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ foundáà%s:%d.", 
fûes
[
i
], 
löío_ext
);

1351 
i
=0; i<
fûe_cou¡
; i++){

1352 
	`mosquôto__‰ì
(
fûes
[
i
]);

1354 
	`mosquôto__‰ì
(
fûes
);

1355 if(
rc
) Ñc;

1357 }if(!
	`°rcmp
(
tokí
, "keepalive_interval")){

1358 #ifde‡
WITH_BRIDGE


1359 if(
ªlﬂd
) ;

1360 if(!
cur_bridge
){

1361 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1362  
MOSQ_ERR_INVAL
;

1364 if(
	`c⁄f__∑r£_öt
(&
tokí
, "kì∑live_öãrvÆ", &
tmp_öt
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1365 if(
tmp_öt
 > 
UINT16_MAX
){

1366 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Bridge keepalive valueÅoo high.");

1367  
MOSQ_ERR_INVAL
;

1369 if(
tmp_öt
 < 5){

1370 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "keepalive intervalÅooÜow, using 5 seconds.");

1371 
tmp_öt
 = 5;

1373 
cur_bridge
->
kì∑live
 = (
uöt16_t
)
tmp_öt
;

1375 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1377 }if(!
	`°rcmp
(
tokí
, "keyfile")){

1378 #ifde‡
WITH_TLS


1379 if(
ªlﬂd
) ;

1380 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "keyfûe", &
cur_li°íî
->
keyfûe
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1382 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS supportÇotávailable.");

1384 }if(!
	`°rcmp
(
tokí
, "listener")){

1385 
c⁄fig
->
loˇl_⁄ly
 = 
Ál£
;

1386 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

1387 if(
tokí
){

1388 
tmp_öt
 = 
	`©oi
(
tokí
);

1389 #ifde‡
WITH_UNIX_SOCKETS


1390 if(
tmp_öt
 < 0 ||Åmp_öà> 
UINT16_MAX
){

1392 if(
tmp_öt
 < 1 ||Åmp_öà> 
UINT16_MAX
){

1394 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆidÖ‹àvÆuê(%d).", 
tmp_öt
);

1395  
MOSQ_ERR_INVAL
;

1399 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

1400 i‡(
tokí
 !
NULL
 &&Åoken[0] == '#'){

1401 
tokí
 = 
NULL
;

1404 if(
tmp_öt
 =0 && 
tokí
 =
NULL
){

1405 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: AÜistener withÖort 0 mustÖrovideá Unix socketÖath.");

1406  
MOSQ_ERR_INVAL
;

1409 if(
ªlﬂd
){

1412 
cur_li°íî
 = 
NULL
;

1413 #ifde‡
WITH_UNIX_SOCKETS


1414 if(
tmp_öt
 == 0){

1415 
i
=0; i<
c⁄fig
->
li°íî_cou¡
; i++){

1416 if(
c⁄fig
->
li°íîs
[
i
].
unix_sockë_∑th
 !
NULL


1417 && 
	`°rcmp
(
c⁄fig
->
li°íîs
[
i
].
unix_sockë_∑th
, 
tokí
) == 0){

1419 
cur_li°íî
 = &
c⁄fig
->
li°íîs
[
i
];

1426 
i
=0; i<
c⁄fig
->
li°íî_cou¡
; i++){

1427 if(
c⁄fig
->
li°íîs
[
i
].
p‹t
 =
tmp_öt
){

1429 if(
c⁄fig
->
li°íîs
[
i
].
ho°
){

1430 if(
tokí
 && !
	`°rcmp
(
c⁄fig
->
li°íîs
[
i
].
ho°
,Åoken)){

1432 
cur_li°íî
 = &
c⁄fig
->
li°íîs
[
i
];

1436 if(
tokí
 =
NULL
){

1439 
cur_li°íî
 = &
c⁄fig
->
li°íîs
[
i
];

1446 if(!
cur_li°íî
){

1447 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: It isÇot currentlyÖossibleÅoádd/removeÜisteners whenÑeloadingÅhe config file.");

1448  
MOSQ_ERR_INVAL
;

1451 
c⁄fig
->
li°íî_cou¡
++;

1452 
c⁄fig
->
li°íîs
 = 
	`mosquôto__ªÆloc
(c⁄fig->li°íîs, (
mosquôto__li°íî
)*(
size_t
)c⁄fig->
li°íî_cou¡
);

1453 if(!
c⁄fig
->
li°íîs
){

1454 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

1455  
MOSQ_ERR_NOMEM
;

1457 
cur_li°íî
 = &
c⁄fig
->
li°íîs
[c⁄fig->
li°íî_cou¡
-1];

1458 
	`mem£t
(
cur_li°íî
, 0, (
mosquôto__li°íî
));

1461 
	`li°íî__£t_deÁu…s
(
cur_li°íî
);

1462 
cur_li°íî
->
p‹t
 = (
uöt16_t
)
tmp_öt
;

1464 
	`mosquôto__‰ì
(
cur_li°íî
->
ho°
);

1465 
cur_li°íî
->
ho°
 = 
NULL
;

1467 #ifde‡
WITH_UNIX_SOCKETS


1468 
	`mosquôto__‰ì
(
cur_li°íî
->
unix_sockë_∑th
);

1469 
cur_li°íî
->
unix_sockë_∑th
 = 
NULL
;

1472 if(
tokí
){

1473 #ifde‡
WITH_UNIX_SOCKETS


1474 if(
cur_li°íî
->
p‹t
 == 0){

1475 
cur_li°íî
->
unix_sockë_∑th
 = 
	`mosquôto__°rdup
(
tokí
);

1479 
cur_li°íî
->
ho°
 = 
	`mosquôto__°rdup
(
tokí
);

1483 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: EmptyÜistener value in configuration.");

1484  
MOSQ_ERR_INVAL
;

1486 }if(!
	`°rcmp
(
tokí
, "local_clientid")){

1487 #ifde‡
WITH_BRIDGE


1488 if(
ªlﬂd
) ;

1489 if(!
cur_bridge
){

1490 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1491  
MOSQ_ERR_INVAL
;

1493 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "bridgêloˇ»˛õ¡d", &
cur_bridge
->
loˇl_˛õ¡id
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1495 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1497 }if(!
	`°rcmp
(
tokí
, "local_password")){

1498 #ifde‡
WITH_BRIDGE


1499 if(
ªlﬂd
) ;

1500 if(!
cur_bridge
){

1501 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1502  
MOSQ_ERR_INVAL
;

1504 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "bridgêloˇl_∑ssw‹d", &
cur_bridge
->
loˇl_∑ssw‹d
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1506 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1508 }if(!
	`°rcmp
(
tokí
, "local_username")){

1509 #ifde‡
WITH_BRIDGE


1510 if(
ªlﬂd
) ;

1511 if(!
cur_bridge
){

1512 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1513  
MOSQ_ERR_INVAL
;

1515 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "bridgêloˇl_u£∫ame", &
cur_bridge
->
loˇl_u£∫ame
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1517 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1519 }if(!
	`°rcmp
(
tokí
, "log_dest")){

1520 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

1521 if(
tokí
){

1522 
¸
->
log_de°_£t
 = 1;

1523 if(!
	`°rcmp
(
tokí
, "none")){

1524 
¸
->
log_de°
 = 
MQTT3_LOG_NONE
;

1525 }if(!
	`°rcmp
(
tokí
, "syslog")){

1526 
¸
->
log_de°
 |
MQTT3_LOG_SYSLOG
;

1527 }if(!
	`°rcmp
(
tokí
, "stdout")){

1528 
¸
->
log_de°
 |
MQTT3_LOG_STDOUT
;

1529 }if(!
	`°rcmp
(
tokí
, "stderr")){

1530 
¸
->
log_de°
 |
MQTT3_LOG_STDERR
;

1531 }if(!
	`°rcmp
(
tokí
, "topic")){

1532 
¸
->
log_de°
 |
MQTT3_LOG_TOPIC
;

1533 }if(!
	`°rcmp
(
tokí
, "dlt")){

1534 
¸
->
log_de°
 |
MQTT3_LOG_DLT
;

1535 }if(!
	`°rcmp
(
tokí
, "file")){

1536 
¸
->
log_de°
 |
MQTT3_LOG_FILE
;

1537 if(
c⁄fig
->
log_Âå
 || c⁄fig->
log_fûe
){

1538 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Duplicate \"log_dest file\" value.");

1539  
MOSQ_ERR_INVAL
;

1542 
tokí
 = &tokí[
	`°æí
(token)+1];

1543 
tokí
[0] == ' ' ||Åoken[0] == '\t'){

1544 
tokí
++;

1546 if(
tokí
[0]){

1547 
c⁄fig
->
log_fûe
 = 
	`mosquôto__°rdup
(
tokí
);

1548 if(!
c⁄fig
->
log_fûe
){

1549 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

1550  
MOSQ_ERR_NOMEM
;

1553 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Empty \"log_dest file\" value in configuration.");

1554  
MOSQ_ERR_INVAL
;

1557 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆidÜog_de° vÆuê(%s).", 
tokí
);

1558  
MOSQ_ERR_INVAL
;

1560 #i‡
	`deföed
(
WIN32
Ë|| deföed(
__CYGWIN__
)

1561 if(
£rvi˚_h™dÀ
){

1562 if(
¸
->
log_de°
 =
MQTT3_LOG_STDOUT
 || cr->log_de° =
MQTT3_LOG_STDERR
){

1563 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: CannotÜogÅo stdout/stderr whenÑunningásá Windows service.");

1564  
MOSQ_ERR_INVAL
;

1569 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: EmptyÜog_dest value in configuration.");

1570  
MOSQ_ERR_INVAL
;

1572 }if(!
	`°rcmp
(
tokí
, "log_facility")){

1573 #i‡
	`deföed
(
WIN32
Ë|| deföed(
__CYGWIN__
)

1574 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning:Üog_facilityÇot supported on Windows.");

1576 if(
	`c⁄f__∑r£_öt
(&
tokí
, "log_Ácûôy", &
tmp_öt
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1577 
tmp_öt
){

1579 
c⁄fig
->
log_Ácûôy
 = 
LOG_LOCAL0
;

1582 
c⁄fig
->
log_Ácûôy
 = 
LOG_LOCAL1
;

1585 
c⁄fig
->
log_Ácûôy
 = 
LOG_LOCAL2
;

1588 
c⁄fig
->
log_Ácûôy
 = 
LOG_LOCAL3
;

1591 
c⁄fig
->
log_Ácûôy
 = 
LOG_LOCAL4
;

1594 
c⁄fig
->
log_Ácûôy
 = 
LOG_LOCAL5
;

1597 
c⁄fig
->
log_Ácûôy
 = 
LOG_LOCAL6
;

1600 
c⁄fig
->
log_Ácûôy
 = 
LOG_LOCAL7
;

1603 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆidÜog_Ácûôy vÆuê(%d).", 
tmp_öt
);

1604  
MOSQ_ERR_INVAL
;

1607 }if(!
	`°rcmp
(
tokí
, "log_timestamp")){

1608 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
,Åokí, &
c⁄fig
->
log_time°amp
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1609 }if(!
	`°rcmp
(
tokí
, "log_timestamp_format")){

1610 if(
	`c⁄f__∑r£_°rög
(&
tokí
,Åokí, &
c⁄fig
->
log_time°amp_f‹m©
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1611 }if(!
	`°rcmp
(
tokí
, "log_type")){

1612 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

1613 if(
tokí
){

1614 
¸
->
log_ty≥_£t
 = 1;

1615 if(!
	`°rcmp
(
tokí
, "none")){

1616 
¸
->
log_ty≥
 = 
MOSQ_LOG_NONE
;

1617 }if(!
	`°rcmp
(
tokí
, "information")){

1618 
¸
->
log_ty≥
 |
MOSQ_LOG_INFO
;

1619 }if(!
	`°rcmp
(
tokí
, "notice")){

1620 
¸
->
log_ty≥
 |
MOSQ_LOG_NOTICE
;

1621 }if(!
	`°rcmp
(
tokí
, "warning")){

1622 
¸
->
log_ty≥
 |
MOSQ_LOG_WARNING
;

1623 }if(!
	`°rcmp
(
tokí
, "error")){

1624 
¸
->
log_ty≥
 |
MOSQ_LOG_ERR
;

1625 }if(!
	`°rcmp
(
tokí
, "debug")){

1626 
¸
->
log_ty≥
 |
MOSQ_LOG_DEBUG
;

1627 }if(!
	`°rcmp
(
tokí
, "subscribe")){

1628 
¸
->
log_ty≥
 |
MOSQ_LOG_SUBSCRIBE
;

1629 }if(!
	`°rcmp
(
tokí
, "unsubscribe")){

1630 
¸
->
log_ty≥
 |
MOSQ_LOG_UNSUBSCRIBE
;

1631 }if(!
	`°rcmp
(
tokí
, "internal")){

1632 
¸
->
log_ty≥
 |
MOSQ_LOG_INTERNAL
;

1633 #ifde‡
WITH_WEBSOCKETS


1634 }if(!
	`°rcmp
(
tokí
, "websockets")){

1635 
¸
->
log_ty≥
 |
MOSQ_LOG_WEBSOCKETS
;

1637 }if(!
	`°rcmp
(
tokí
, "all")){

1638 
¸
->
log_ty≥
 = 
MOSQ_LOG_ALL
;

1640 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆidÜog_ty≥ vÆuê(%s).", 
tokí
);

1641  
MOSQ_ERR_INVAL
;

1644 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: EmptyÜog_type value in configuration.");

1646 }if(!
	`°rcmp
(
tokí
, "max_connections")){

1647 if(
ªlﬂd
) ;

1648 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

1649 if(
tokí
){

1650 
cur_li°íî
->
max_c⁄√˘i⁄s
 = 
	`©oi
(
tokí
);

1651 if(
cur_li°íî
->
max_c⁄√˘i⁄s
 < 0) cur_listener->max_connections = -1;

1653 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Empty max_connections value in configuration.");

1655 }if(!
	`°rcmp
(
tokí
, "maximum_qos") || !strcmp(token, "max_qos")){

1656 if(
ªlﬂd
) ;

1657 if(
	`c⁄f__∑r£_öt
(&
tokí
,Åokí, &
tmp_öt
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1658 if(
tmp_öt
 < 0 ||Åmp_int > 2){

1659 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: max_qos must be between 0ánd 2 inclusive.");

1660  
MOSQ_ERR_INVAL
;

1662 
cur_li°íî
->
max_qos
 = (
uöt8_t
)
tmp_öt
;

1663 }if(!
	`°rcmp
(
tokí
, "max_inflight_bytes")){

1664 if(
	`c⁄f__∑r£_öt
(&
tokí
, "max_öÊight_byãs", &
tmp_öt
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1665 if(
tmp_öt
 < 0)Åmp_int = 0;

1666 
c⁄fig
->
max_öÊight_byãs
 = (
size_t
)
tmp_öt
;

1667 }if(!
	`°rcmp
(
tokí
, "max_inflight_messages")){

1668 if(
	`c⁄f__∑r£_öt
(&
tokí
, "max_öÊight_mesßges", &
tmp_öt
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1669 if(
tmp_öt
 < 0 ||Åmp_öà=
UINT16_MAX
){

1670 
tmp_öt
 = 0;

1671 }if(
tmp_öt
 > 
UINT16_MAX
){

1672 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: max_inflight_messages must be <= 65535.");

1673  
MOSQ_ERR_INVAL
;

1675 
c⁄fig
->
max_öÊight_mesßges
 = (
uöt16_t
)
tmp_öt
;

1676 }if(!
	`°rcmp
(
tokí
, "max_keepalive")){

1677 if(
	`c⁄f__∑r£_öt
(&
tokí
, "max_kì∑live", &
tmp_öt
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1678 if(
tmp_öt
 < 0 ||Åmp_öà> 
UINT16_MAX
){

1679 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆid max_kì∑livêvÆuê(%d).", 
tmp_öt
);

1680  
MOSQ_ERR_INVAL
;

1682 
c⁄fig
->
max_kì∑live
 = (
uöt16_t
)
tmp_öt
;

1683 }if(!
	`°rcmp
(
tokí
, "max_packet_size")){

1684 if(
	`c⁄f__∑r£_öt
(&
tokí
, "max_∑ckë_size", &
tmp_öt
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1685 if(
tmp_öt
 < 20){

1686 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆid max_∑ckë_sizêvÆuê(%d).", 
tmp_öt
);

1687  
MOSQ_ERR_INVAL
;

1689 
c⁄fig
->
max_∑ckë_size
 = (
uöt32_t
)
tmp_öt
;

1690 }if(!
	`°rcmp
(
tokí
, "max_queued_bytes")){

1691 if(
	`c⁄f__∑r£_öt
(&
tokí
, "max_queued_byãs", &
tmp_öt
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1692 if(
tmp_öt
 < 0)Åmp_int = 0;

1693 
c⁄fig
->
max_queued_byãs
 = (
size_t
)
tmp_öt
;

1694 }if(!
	`°rcmp
(
tokí
, "max_queued_messages")){

1695 if(
	`c⁄f__∑r£_öt
(&
tokí
, "max_queued_mesßges", &
tmp_öt
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1696 if(
tmp_öt
 < 0)Åmp_int = 0;

1697 
c⁄fig
->
max_queued_mesßges
 = 
tmp_öt
;

1698 }if(!
	`°rcmp
(
tokí
, "memory_limit")){

1699 
ssize_t
 
lim
;

1700 if(
	`c⁄f__∑r£_ssize_t
(&
tokí
, "mem‹y_limô", &
lim
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1701 if(
lim
 < 0){

1702 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆid mem‹y_limô vÆuê(%ld).", 
lim
);

1703  
MOSQ_ERR_INVAL
;

1705 
	`mem‹y__£t_limô
((
size_t
)
lim
);

1706 }if(!
	`°rcmp
(
tokí
, "message_size_limit")){

1707 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Note: It isÑecommendedÅoÑeplace `message_size_limit` with `max_packet_size`.");

1708 if(
	`c⁄f__∑r£_öt
(&
tokí
, "mesßge_size_limô", (*)&
c⁄fig
->
mesßge_size_limô
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1709 if(
c⁄fig
->
mesßge_size_limô
 > 
MQTT_MAX_PAYLOAD
){

1710 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆid mesßge_size_limô vÆuê(%u).", 
c⁄fig
->
mesßge_size_limô
);

1711  
MOSQ_ERR_INVAL
;

1713 }if(!
	`°rcmp
(
tokí
, "mount_point")){

1714 if(
ªlﬂd
) ;

1715 if(
c⁄fig
->
li°íî_cou¡
 == 0){

1716 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: You must use createáÜistener before usingÅhe mount_point option inÅhe configuration file.");

1717  
MOSQ_ERR_INVAL
;

1719 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "mou¡_poöt", &
cur_li°íî
->
mou¡_poöt
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1720 if(
	`mosquôto_pub_t›ic_check
(
cur_li°íî
->
mou¡_poöt
Ë!
MOSQ_ERR_SUCCESS
){

1721 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

1723 
cur_li°íî
->
mou¡_poöt
);

1724  
MOSQ_ERR_INVAL
;

1726 }if(!
	`°rcmp
(
tokí
, "notifications")){

1727 #ifde‡
WITH_BRIDGE


1728 if(
ªlﬂd
) ;

1729 if(!
cur_bridge
){

1730 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1731  
MOSQ_ERR_INVAL
;

1733 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "nŸifiˇti⁄s", &
cur_bridge
->
nŸifiˇti⁄s
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1735 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1737 }if(!
	`°rcmp
(
tokí
, "notifications_local_only")){

1738 #ifde‡
WITH_BRIDGE


1739 if(
ªlﬂd
) ;

1740 if(!
cur_bridge
){

1741 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration");

1742  
MOSQ_ERR_INVAL
;

1744 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "nŸifiˇti⁄s_loˇl_⁄ly", &
cur_bridge
->
nŸifiˇti⁄s_loˇl_⁄ly
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1746 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1748 }if(!
	`°rcmp
(
tokí
, "notification_topic")){

1749 #ifde‡
WITH_BRIDGE


1750 if(
ªlﬂd
) ;

1751 if(!
cur_bridge
){

1752 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1753  
MOSQ_ERR_INVAL
;

1755 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "nŸifiˇti⁄_t›ic", &
cur_bridge
->
nŸifiˇti⁄_t›ic
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1757 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1759 }if(!
	`°rcmp
(
tokí
, "password") || !strcmp(token, "remote_password")){

1760 #ifde‡
WITH_BRIDGE


1761 if(
ªlﬂd
) ;

1762 if(!
cur_bridge
){

1763 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1764  
MOSQ_ERR_INVAL
;

1766 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "bridgêªmŸe_∑ssw‹d", &
cur_bridge
->
ªmŸe_∑ssw‹d
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1768 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1770 }if(!
	`°rcmp
(
tokí
, "password_file")){

1771 
	`c⁄f__£t_cur_£curôy_›ti⁄s
(
c⁄fig
, 
cur_li°íî
, &
cur_£curôy_›ti⁄s
);

1772 if(
ªlﬂd
){

1773 
	`mosquôto__‰ì
(
cur_£curôy_›ti⁄s
->
∑ssw‹d_fûe
);

1774 
cur_£curôy_›ti⁄s
->
∑ssw‹d_fûe
 = 
NULL
;

1776 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "∑ssw‹d_fûe", &
cur_£curôy_›ti⁄s
->
∑ssw‹d_fûe
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1777 }if(!
	`°rcmp
(
tokí
, "per_listener_settings")){

1778 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "≥r_li°íî_£âögs", &
c⁄fig
->
≥r_li°íî_£âögs
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1779 if(
cur_£curôy_›ti⁄s
 && 
c⁄fig
->
≥r_li°íî_£âögs
){

1780 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error:Öer_listener_settings must be set beforeány other security settings.");

1781  
MOSQ_ERR_INVAL
;

1783 }if(!
	`°rcmp
(
tokí
, "persistence") || !strcmp(token, "retained_persistence")){

1784 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
,Åokí, &
c⁄fig
->
≥rsi°í˚
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1785 }if(!
	`°rcmp
(
tokí
, "persistence_file")){

1786 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "≥rsi°í˚_fûe", &
c⁄fig
->
≥rsi°í˚_fûe
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1787 }if(!
	`°rcmp
(
tokí
, "persistence_location")){

1788 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "≥rsi°í˚_loˇti⁄", &
c⁄fig
->
≥rsi°í˚_loˇti⁄
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1789 }if(!
	`°rcmp
(
tokí
, "persistent_client_expiration")){

1790 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

1791 if(
tokí
){

1792 
tokí
[
	`°æí
(token)-1]){

1794 
expú©i⁄_mu…
 = 3600;

1797 
expú©i⁄_mu…
 = 86400;

1800 
expú©i⁄_mu…
 = 86400*7;

1803 
expú©i⁄_mu…
 = 86400*30;

1806 
expú©i⁄_mu…
 = 86400*365;

1809 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: InvalidÖersistent_client_expiration duration in configuration.");

1810  
MOSQ_ERR_INVAL
;

1812 
tokí
[
	`°æí
(token)-1] = '\0';

1813 
c⁄fig
->
≥rsi°ít_˛õ¡_expú©i⁄
 = 
	`©oi
(
tokí
)*
expú©i⁄_mu…
;

1814 if(
c⁄fig
->
≥rsi°ít_˛õ¡_expú©i⁄
 <= 0){

1815 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: InvalidÖersistent_client_expiration duration in configuration.");

1816  
MOSQ_ERR_INVAL
;

1819 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: EmptyÖersistent_client_expiration value in configuration.");

1821 }if(!
	`°rcmp
(
tokí
, "pid_file")){

1822 if(
ªlﬂd
) ;

1823 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "pid_fûe", &
c⁄fig
->
pid_fûe
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1824 }if(!
	`°rcmp
(
tokí
, "port")){

1825 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "The 'port' option isÇow deprecatedánd will beÑemoved iná future version. Please use 'listener' instead.");

1826 
c⁄fig
->
loˇl_⁄ly
 = 
Ál£
;

1827 if(
ªlﬂd
) ;

1828 if(
c⁄fig
->
deÁu…_li°íî
.
p‹t
){

1829 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: DefaultÜistenerÖort specified multipleÅimes. OnlyÅheÜatest will be used.");

1831 if(
	`c⁄f__∑r£_öt
(&
tokí
, "p‹t", &
tmp_öt
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1832 if(
tmp_öt
 < 1 ||Åmp_öà> 
UINT16_MAX
){

1833 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆidÖ‹àvÆuê(%d).", 
tmp_öt
);

1834  
MOSQ_ERR_INVAL
;

1836 
c⁄fig
->
deÁu…_li°íî
.
p‹t
 = (
uöt16_t
)
tmp_öt
;

1837 }if(!
	`°rcmp
(
tokí
, "protocol")){

1838 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

1839 if(
tokí
){

1840 if(!
	`°rcmp
(
tokí
, "mqtt")){

1841 
cur_li°íî
->
¥Ÿocﬁ
 = 
mp_mqâ
;

1846 }if(!
	`°rcmp
(
tokí
, "websockets")){

1847 #ifde‡
WITH_WEBSOCKETS


1848 
cur_li°íî
->
¥Ÿocﬁ
 = 
mp_websockës
;

1850 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Websockets supportÇotávailable.");

1851  
MOSQ_ERR_INVAL
;

1854 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆidÖrŸocﬁ vÆuê(%s).", 
tokí
);

1855  
MOSQ_ERR_INVAL
;

1858 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: EmptyÖrotocol value in configuration.");

1860 }if(!
	`°rcmp
(
tokí
, "psk_file")){

1861 #ifde‡
FINAL_WITH_TLS_PSK


1862 
	`c⁄f__£t_cur_£curôy_›ti⁄s
(
c⁄fig
, 
cur_li°íî
, &
cur_£curôy_›ti⁄s
);

1863 if(
ªlﬂd
){

1864 
	`mosquôto__‰ì
(
cur_£curôy_›ti⁄s
->
psk_fûe
);

1865 
cur_£curôy_›ti⁄s
->
psk_fûe
 = 
NULL
;

1867 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "psk_fûe", &
cur_£curôy_›ti⁄s
->
psk_fûe
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1869 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS/TLS-PSK supportÇotávailable.");

1871 }if(!
	`°rcmp
(
tokí
, "psk_hint")){

1872 #ifde‡
FINAL_WITH_TLS_PSK


1873 if(
ªlﬂd
) ;

1874 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "psk_höt", &
cur_li°íî
->
psk_höt
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1876 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS/TLS-PSK supportÇotávailable.");

1878 }if(!
	`°rcmp
(
tokí
, "queue_qos0_messages")){

1879 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
,Åokí, &
c⁄fig
->
queue_qos0_mesßges
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1880 }if(!
	`°rcmp
(
tokí
, "require_certificate")){

1881 #ifde‡
WITH_TLS


1882 if(
ªlﬂd
) ;

1883 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "ªquúe_˚πifiˇã", &
cur_li°íî
->
ªquúe_˚πifiˇã
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1885 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS supportÇotávailable.");

1887 }if(!
	`°rcmp
(
tokí
, "restart_timeout")){

1888 #ifde‡
WITH_BRIDGE


1889 if(
ªlﬂd
) ;

1890 if(!
cur_bridge
){

1891 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1892  
MOSQ_ERR_INVAL
;

1894 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

1895 if(!
tokí
){

1896 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: EmptyÑestart_timeout value in configuration.");

1897  
MOSQ_ERR_INVAL
;

1899 
cur_bridge
->
ª°¨t_timeout
 = 
	`©oi
(
tokí
);

1900 
cur_bridge
->
backoff_ba£
 = 0;

1901 
cur_bridge
->
backoff_ˇp
 = 0;

1902 if(
cur_bridge
->
ª°¨t_timeout
 < 1){

1903 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "restart_timeout intervalÅooÜow, using 1 second.");

1904 
cur_bridge
->
ª°¨t_timeout
 = 1;

1906 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

1907 if(
tokí
){

1908 
cur_bridge
->
backoff_ba£
 = cur_bridge->
ª°¨t_timeout
;

1909 
cur_bridge
->
backoff_ˇp
 = 
	`©oi
(
tokí
);

1910 if(
cur_bridge
->
backoff_ˇp
 < cur_bridge->
backoff_ba£
){

1911 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: backoff cap isÜowerÅhanÅhe base inÑestart_timeout.");

1912  
MOSQ_ERR_INVAL
;

1916 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1918 }if(!
	`°rcmp
(
tokí
, "retain_available")){

1919 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
,Åokí, &
c⁄fig
->
ªèö_avaûabÀ
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1920 }if(!
	`°rcmp
(
tokí
, "retry_interval")){

1921 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TheÑetry_interval option isÇoÜongerávailable.");

1922 }if(!
	`°rcmp
(
tokí
, "round_robin")){

1923 #ifde‡
WITH_BRIDGE


1924 if(
ªlﬂd
) ;

1925 if(!
cur_bridge
){

1926 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1927  
MOSQ_ERR_INVAL
;

1929 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "round_robö", &
cur_bridge
->
round_robö
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1931 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1933 }if(!
	`°rcmp
(
tokí
, "set_tcp_nodelay")){

1934 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "£t_t˝_nodñay", &
c⁄fig
->
£t_t˝_nodñay
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1935 }if(!
	`°rcmp
(
tokí
, "start_type")){

1936 #ifde‡
WITH_BRIDGE


1937 if(
ªlﬂd
) ;

1938 if(!
cur_bridge
){

1939 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1940  
MOSQ_ERR_INVAL
;

1942 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

1943 if(
tokí
){

1944 if(!
	`°rcmp
(
tokí
, "automatic")){

1945 
cur_bridge
->
°¨t_ty≥
 = 
b°_autom©ic
;

1946 }if(!
	`°rcmp
(
tokí
, "lazy")){

1947 
cur_bridge
->
°¨t_ty≥
 = 
b°_œzy
;

1948 }if(!
	`°rcmp
(
tokí
, "manual")){

1949 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Manual start_typeÇot supported.");

1950  
MOSQ_ERR_INVAL
;

1951 }if(!
	`°rcmp
(
tokí
, "once")){

1952 
cur_bridge
->
°¨t_ty≥
 = 
b°_⁄˚
;

1954 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆid sèπ_ty≥ vÆuêö c⁄figuøti⁄ (%s).", 
tokí
);

1955  
MOSQ_ERR_INVAL
;

1958 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Empty start_type value in configuration.");

1959  
MOSQ_ERR_INVAL
;

1962 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

1964 }if(!
	`°rcmp
(
tokí
, "socket_domain")){

1965 if(
ªlﬂd
) ;

1966 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

1967 if(
tokí
){

1968 if(!
	`°rcmp
(
tokí
, "ipv4")){

1969 
cur_li°íî
->
sockë_domaö
 = 
AF_INET
;

1970 }if(!
	`°rcmp
(
tokí
, "ipv6")){

1971 
cur_li°íî
->
sockë_domaö
 = 
AF_INET6
;

1973 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆid sockë_domaö vÆuê\"%s\" i¿c⁄figuøti⁄.", 
tokí
);

1974  
MOSQ_ERR_INVAL
;

1977 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Empty socket_domain value in configuration.");

1978  
MOSQ_ERR_INVAL
;

1980 }if(!
	`°rcmp
(
tokí
, "sys_interval")){

1981 if(
	`c⁄f__∑r£_öt
(&
tokí
, "sys_öãrvÆ", &
c⁄fig
->
sys_öãrvÆ
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1982 if(
c⁄fig
->
sys_öãrvÆ
 < 0 || config->sys_interval > 65535){

1983 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆid sys_öãrvÆ vÆuê(%d).", 
c⁄fig
->
sys_öãrvÆ
);

1984  
MOSQ_ERR_INVAL
;

1986 }if(!
	`°rcmp
(
tokí
, "threshold")){

1987 #ifde‡
WITH_BRIDGE


1988 if(
ªlﬂd
) ;

1989 if(!
cur_bridge
){

1990 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

1991  
MOSQ_ERR_INVAL
;

1993 if(
	`c⁄f__∑r£_öt
(&
tokí
, "thªshﬁd", &
cur_bridge
->
thªshﬁd
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

1994 if(
cur_bridge
->
thªshﬁd
 < 1){

1995 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "thresholdÅooÜow, using 1 message.");

1996 
cur_bridge
->
thªshﬁd
 = 1;

1999 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

2001 }if(!
	`°rcmp
(
tokí
, "tls_engine")){

2002 #ifde‡
WITH_TLS


2003 if(
ªlﬂd
) ;

2004 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "és_ígöe", &
cur_li°íî
->
és_ígöe
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

2006 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS supportÇotávailable.");

2008 }if(!
	`°rcmp
(
tokí
, "tls_engine_kpass_sha1")){

2009 #ifde‡
WITH_TLS


2010 if(
ªlﬂd
) ;

2011 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "és_ígöe_k∑ss_sha1", &
k∑ss_sha
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

2012 if(
	`mosquôto__hex2bö_sha1
(
k∑ss_sha
, (**)&
k∑ss_sha_bö
Ë!
MOSQ_ERR_SUCCESS
){

2013 
	`mosquôto__‰ì
(
k∑ss_sha
);

2014  
MOSQ_ERR_INVAL
;

2016 
cur_li°íî
->
és_ígöe_k∑ss_sha1
 = 
k∑ss_sha_bö
;

2017 
	`mosquôto__‰ì
(
k∑ss_sha
);

2019 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS supportÇotávailable.");

2021 }if(!
	`°rcmp
(
tokí
, "tls_keyform")){

2022 #ifde‡
WITH_TLS


2023 if(
ªlﬂd
) ;

2024 
keyf‹m
 = 
NULL
;

2025 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "és_keyf‹m", &
keyf‹m
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

2026 
cur_li°íî
->
és_keyf‹m
 = 
mosq_k_≥m
;

2027 if(!
	`°rcmp
(
keyf‹m
, "ígöe")Ë
cur_li°íî
->
és_keyf‹m
 = 
mosq_k_ígöe
;

2028 
	`mosquôto__‰ì
(
keyf‹m
);

2030 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS supportÇotávailable.");

2032 }if(!
	`°rcmp
(
tokí
, "tls_version")){

2033 #i‡
	`deföed
(
WITH_TLS
)

2034 if(
ªlﬂd
) ;

2035 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "és_vîsi⁄", &
cur_li°íî
->
és_vîsi⁄
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

2037 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS supportÇotávailable.");

2039 }if(!
	`°rcmp
(
tokí
, "topic")){

2040 #ifde‡
WITH_BRIDGE


2041 *
t›ic
 = 
NULL
;

2042 
mosquôto__bridge_dúe˘i⁄
 
dúe˘i⁄
 = 
bd_out
;

2043 
uöt8_t
 
qos
 = 0;

2044 *
loˇl_¥efix
 = 
NULL
, *
ªmŸe_¥efix
 = NULL;

2046 if(
ªlﬂd
) ;

2047 if(!
cur_bridge
){

2048 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

2049  
MOSQ_ERR_INVAL
;

2052 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

2053 if(
tokí
){

2054 
t›ic
 = 
tokí
;

2056 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: EmptyÅopic value in configuration.");

2057  
MOSQ_ERR_INVAL
;

2059 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

2060 if(
tokí
){

2061 if(!
	`°rˇ£cmp
(
tokí
, "out")){

2062 
dúe˘i⁄
 = 
bd_out
;

2063 }if(!
	`°rˇ£cmp
(
tokí
, "in")){

2064 
dúe˘i⁄
 = 
bd_ö
;

2065 }if(!
	`°rˇ£cmp
(
tokí
, "both")){

2066 
dúe˘i⁄
 = 
bd_bŸh
;

2068 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆid bridgêt›i¯dúe˘i⁄ '%s'.", 
tokí
);

2069  
MOSQ_ERR_INVAL
;

2071 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

2072 if(
tokí
){

2073 i‡(
tokí
[0] == '#'){

2074 ()
	`°πok_r
(
NULL
, "", &
ßvïå
);

2076 
qos
 = (
uöt8_t
)
	`©oi
(
tokí
);

2077 if(
qos
 > 2){

2078 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆid bridgêQoSÜevñ '%s'.", 
tokí
);

2079  
MOSQ_ERR_INVAL
;

2082 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

2083 if(
tokí
){

2084 if(!
	`°rcmp
(
tokí
, "\"\"") ||Åoken[0] == '#'){

2085 
loˇl_¥efix
 = 
NULL
;

2086 i‡(
tokí
[0] == '#'){

2087 ()
	`°πok_r
(
NULL
, "", &
ßvïå
);

2090 
loˇl_¥efix
 = 
tokí
;

2093 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

2094 if(
tokí
){

2095 if(!
	`°rcmp
(
tokí
, "\"\"") ||Åoken[0] == '#'){

2096 
ªmŸe_¥efix
 = 
NULL
;

2098 
ªmŸe_¥efix
 = 
tokí
;

2105 if(
	`bridge__add_t›ic
(
cur_bridge
, 
t›ic
, 
dúe˘i⁄
, 
qos
, 
loˇl_¥efix
, 
ªmŸe_¥efix
)){

2106  
MOSQ_ERR_INVAL
;

2109 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

2111 }if(!
	`°rcmp
(
tokí
, "max_topic_alias")){

2112 if(
ªlﬂd
) ;

2113 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

2114 if(
tokí
){

2115 
tmp_öt
 = 
	`©oi
(
tokí
);

2116 if(
tmp_öt
 < 0 ||Åmp_öà> 
UINT16_MAX
){

2117 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid max_topic_alias value in configuration.");

2118  
MOSQ_ERR_INVAL
;

2120 
cur_li°íî
->
max_t›ic_Æüs
 = (
uöt16_t
)
tmp_öt
;

2122 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Empty max_topic_alias value in configuration.");

2123  
MOSQ_ERR_INVAL
;

2125 }if(!
	`°rcmp
(
tokí
, "try_private")){

2126 #ifde‡
WITH_BRIDGE


2127 if(
ªlﬂd
) ;

2128 if(!
cur_bridge
){

2129 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

2130  
MOSQ_ERR_INVAL
;

2132 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "åy_¥iv©e", &
cur_bridge
->
åy_¥iv©e
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

2134 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

2136 }if(!
	`°rcmp
(
tokí
, "upgrade_outgoing_qos")){

2137 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
,Åokí, &
c⁄fig
->
upgøde_outgoög_qos
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

2138 }if(!
	`°rcmp
(
tokí
, "use_identity_as_username")){

2139 #ifde‡
WITH_TLS


2140 if(
ªlﬂd
) ;

2141 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "u£_idítôy_as_u£∫ame", &
cur_li°íî
->
u£_idítôy_as_u£∫ame
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

2143 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS supportÇotávailable.");

2145 }if(!
	`°rcmp
(
tokí
, "use_subject_as_username")){

2146 #ifde‡
WITH_TLS


2147 if(
ªlﬂd
) ;

2148 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "u£_subje˘_as_u£∫ame", &
cur_li°íî
->
u£_subje˘_as_u£∫ame
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

2150 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: TLS supportÇotávailable.");

2152 }if(!
	`°rcmp
(
tokí
, "user")){

2153 if(
ªlﬂd
) ;

2154 
	`mosquôto__‰ì
(
c⁄fig
->
u£r
);

2155 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "u£r", &
c⁄fig
->
u£r
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

2156 }if(!
	`°rcmp
(
tokí
, "use_username_as_clientid")){

2157 if(
ªlﬂd
) ;

2158 if(
	`c⁄f__∑r£_boﬁ
(&
tokí
, "u£_u£∫ame_as_˛õ¡id", &
cur_li°íî
->
u£_u£∫ame_as_˛õ¡id
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

2159 }if(!
	`°rcmp
(
tokí
, "username") || !strcmp(token, "remote_username")){

2160 #ifde‡
WITH_BRIDGE


2161 if(
ªlﬂd
) ;

2162 if(!
cur_bridge
){

2163 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Invalid bridge configuration.");

2164  
MOSQ_ERR_INVAL
;

2166 if(
	`c⁄f__∑r£_°rög
(&
tokí
, "bridgêªmŸe_u£∫ame", &
cur_bridge
->
ªmŸe_u£∫ame
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

2168 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Bridge supportÇotávailable.");

2170 }if(!
	`°rcmp
(
tokí
, "websockets_log_level")){

2171 #ifde‡
WITH_WEBSOCKETS


2172 if(
	`c⁄f__∑r£_öt
(&
tokí
, "websockës_log_Àvñ", &
c⁄fig
->
websockës_log_Àvñ
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

2174 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Websockets supportÇotávailable.");

2176 }if(!
	`°rcmp
(
tokí
, "websockets_headers_size")){

2177 #ifde‡
WITH_WEBSOCKETS


2178 if(
	`c⁄f__∑r£_öt
(&
tokí
, "websockës_hódîs_size", &
tmp_öt
, 
ßvïå
)Ë 
MOSQ_ERR_INVAL
;

2179 if(
tmp_öt
 < 0 ||Åmp_öà> 
UINT16_MAX
){

2180 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Error: Websockets headers size must be between 0ánd 65535 inclusive.");

2181  
MOSQ_ERR_INVAL
;

2183 
c⁄fig
->
websockës_hódîs_size
 = (
uöt16_t
)
tmp_öt
;

2185 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Websockets supportÇotávailable.");

2188 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: Unknow¿c⁄figuøti⁄ v¨übÀ \"%s\".", 
tokí
);

2189  
MOSQ_ERR_INVAL
;

2194  
MOSQ_ERR_SUCCESS
;

2195 
	}
}

2197 
	$c⁄fig__ªad_fûe
(
mosquôto__c⁄fig
 *
c⁄fig
, 
boﬁ
 
ªlﬂd
, c⁄° *
fûe
, 
c⁄fig_ªcur£
 *
¸
, 
Àvñ
, *
löío
)

2199 
rc
;

2200 
FILE
 *
Âå
 = 
NULL
;

2201 *
buf
;

2202 
buÊí
;

2203 #i‚de‡
WIN32


2204 
DIR
 *
dú
;

2207 #i‚de‡
WIN32


2208 
dú
 = 
	`›ídú
(
fûe
);

2209 if(
dú
){

2210 
	`˛o£dú
(
dú
);

2211 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: C⁄fig fûê%†i†®dúe˘‹y.", 
fûe
);

2216 
Âå
 = 
	`mosquôto__f›í
(
fûe
, "π", 
Ál£
);

2217 if(!
Âå
){

2218 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿ›í c⁄fig fûê%s.", 
fûe
);

2222 
buÊí
 = 1000;

2223 
buf
 = 
	`mosquôto__mÆloc
((
size_t
)
buÊí
);

2224 if(!
buf
){

2225 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

2226 
	`f˛o£
(
Âå
);

2227  
MOSQ_ERR_NOMEM
;

2230 
rc
 = 
	`c⁄fig__ªad_fûe_c‹e
(
c⁄fig
, 
ªlﬂd
, 
¸
, 
Àvñ
, 
löío
, 
Âå
, &
buf
, &
buÊí
);

2231 
	`mosquôto__‰ì
(
buf
);

2232 
	`f˛o£
(
Âå
);

2234  
rc
;

2235 
	}
}

2238 
	$c⁄fig__check
(
mosquôto__c⁄fig
 *
c⁄fig
)

2242 
i
;

2244 #ifde‡
WITH_BRIDGE


2245 
j
;

2246 
mosquôto__bridge
 *
bridge1
, *
bridge2
;

2247 
ho°«me
[256];

2248 
size_t
 
Àn
;

2252 
i
=0; i<
c⁄fig
->
bridge_cou¡
; i++){

2253 
bridge1
 = &
c⁄fig
->
bridges
[
i
];

2255 if(!
bridge1
->
ªmŸe_˛õ¡id
){

2256 if(!
	`gëho°«me
(
ho°«me
, 256)){

2257 
Àn
 = 
	`°æí
(
ho°«me
Ë+ såÀn(
bridge1
->
«me
) + 2;

2258 
bridge1
->
ªmŸe_˛õ¡id
 = 
	`mosquôto__mÆloc
(
Àn
);

2259 if(!
bridge1
->
ªmŸe_˛õ¡id
){

2260  
MOSQ_ERR_NOMEM
;

2262 
	`¢¥ötf
(
bridge1
->
ªmŸe_˛õ¡id
, 
Àn
, "%s.%s", 
ho°«me
, bridge1->
«me
);

2268 if(!
bridge1
->
loˇl_˛õ¡id
){

2269 
Àn
 = 
	`°æí
(
bridge1
->
ªmŸe_˛õ¡id
) + strlen("local.") + 2;

2270 
bridge1
->
loˇl_˛õ¡id
 = 
	`mosquôto__mÆloc
(
Àn
);

2271 if(!
bridge1
->
loˇl_˛õ¡id
){

2272 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

2273  
MOSQ_ERR_NOMEM
;

2275 
	`¢¥ötf
(
bridge1
->
loˇl_˛õ¡id
, 
Àn
, "loˇl.%s", bridge1->
ªmŸe_˛õ¡id
);

2279 
i
=0; i<
c⁄fig
->
bridge_cou¡
; i++){

2280 
bridge1
 = &
c⁄fig
->
bridges
[
i
];

2281 
j
=
i
+1; j<
c⁄fig
->
bridge_cou¡
; j++){

2282 
bridge2
 = &
c⁄fig
->
bridges
[
j
];

2283 if(!
	`°rcmp
(
bridge1
->
loˇl_˛õ¡id
, 
bridge2
->local_clientid)){

2284 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: BridgeÜocal_clientid "

2287 
bridge1
->
loˇl_˛õ¡id
);

2288  
MOSQ_ERR_INVAL
;

2295 if(
c⁄fig
->
≥r_li°íî_£âögs
){

2296 
i
=0; i<
c⁄fig
->
li°íî_cou¡
; i++){

2297 if(!
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
auto_id_¥efix
){

2298 
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
auto_id_¥efix
 = 
	`mosquôto__°rdup
("auto-");

2299 if(!
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
auto_id_¥efix
){

2300  
MOSQ_ERR_NOMEM
;

2302 
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
auto_id_¥efix_Àn
 = (
uöt16_t
)
	`°æí
("auto-");

2306 if(!
c⁄fig
->
£curôy_›ti⁄s
.
auto_id_¥efix
){

2307 
c⁄fig
->
£curôy_›ti⁄s
.
auto_id_¥efix
 = 
	`mosquôto__°rdup
("auto-");

2308 if(!
c⁄fig
->
£curôy_›ti⁄s
.
auto_id_¥efix
){

2309  
MOSQ_ERR_NOMEM
;

2311 
c⁄fig
->
£curôy_›ti⁄s
.
auto_id_¥efix_Àn
 = (
uöt16_t
)
	`°æí
("auto-");

2315  
MOSQ_ERR_SUCCESS
;

2316 
	}
}

2319 
	$c⁄f__∑r£_boﬁ
(**
tokí
, c⁄° *
«me
, 
boﬁ
 *
vÆue
, *
ßvïå
)

2321 *
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

2322 if(*
tokí
){

2323 if(!
	`°rcmp
(*
tokí
, "false") || !strcmp(*token, "0")){

2324 *
vÆue
 = 
Ál£
;

2325 }if(!
	`°rcmp
(*
tokí
, "true") || !strcmp(*token, "1")){

2326 *
vÆue
 = 
åue
;

2328 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆid %†vÆuê(%s).", 
«me
, *
tokí
);

2329  
MOSQ_ERR_INVAL
;

2332 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: Em±y %†vÆuêö c⁄figuøti⁄.", 
«me
);

2333  
MOSQ_ERR_INVAL
;

2336  
MOSQ_ERR_SUCCESS
;

2337 
	}
}

2339 
	$c⁄f__∑r£_öt
(**
tokí
, c⁄° *
«me
, *
vÆue
, *
ßvïå
)

2341 *
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

2342 if(*
tokí
){

2343 *
vÆue
 = 
	`©oi
(*
tokí
);

2345 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: Em±y %†vÆuêö c⁄figuøti⁄.", 
«me
);

2346  
MOSQ_ERR_INVAL
;

2349  
MOSQ_ERR_SUCCESS
;

2350 
	}
}

2352 
	$c⁄f__∑r£_ssize_t
(**
tokí
, c⁄° *
«me
, 
ssize_t
 *
vÆue
, *
ßvïå
)

2354 *
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

2355 if(*
tokí
){

2356 *
vÆue
 = 
	`©ﬁ
(*
tokí
);

2358 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: Em±y %†vÆuêö c⁄figuøti⁄.", 
«me
);

2359  
MOSQ_ERR_INVAL
;

2362  
MOSQ_ERR_SUCCESS
;

2363 
	}
}

2365 
	$c⁄f__∑r£_°rög
(**
tokí
, c⁄° *
«me
, **
vÆue
, *
ßvïå
)

2367 
size_t
 
éí
;

2369 *
tokí
 = 
	`°πok_r
(
NULL
, "", &
ßvïå
);

2370 if(*
tokí
){

2371 if(*
vÆue
){

2372 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: Du∂iˇã %†vÆuêö c⁄figuøti⁄.", 
«me
);

2373  
MOSQ_ERR_INVAL
;

2376 *
tokí
 = 
	`misc__åimbœnks
(*token);

2377 if(
	`°æí
(*
tokí
) == 0){

2378 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: Em±y %†vÆuêö c⁄figuøti⁄.", 
«me
);

2379  
MOSQ_ERR_INVAL
;

2382 
éí
 = 
	`°æí
(*
tokí
);

2383 if(
éí
 > 
UINT16_MAX
){

2384  
MOSQ_ERR_INVAL
;

2386 if(
	`mosquôto_vÆid©e_utf8
(*
tokí
, (
uöt16_t
)
éí
)){

2387 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Malformed UTF-8 in configuration.");

2388  
MOSQ_ERR_INVAL
;

2390 *
vÆue
 = 
	`mosquôto__°rdup
(*
tokí
);

2391 if(!*
vÆue
){

2392 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

2393  
MOSQ_ERR_NOMEM
;

2396 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: Em±y %†vÆuêö c⁄figuøti⁄.", 
«me
);

2397  
MOSQ_ERR_INVAL
;

2399  
MOSQ_ERR_SUCCESS
;

2400 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/conf_includedir.c

19 
	~"c⁄fig.h
"

21 
	~<˘y≥.h
>

22 
	~<limôs.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

28 #ifde‡
WIN32


30 
	~<dúít.h
>

33 #i‚de‡
WIN32


34 
	~<°rögs.h
>

35 
	~<√tdb.h
>

36 
	~<sys/sockë.h
>

38 
	~<wösock2.h
>

39 
	~<ws2t˝ù.h
>

42 #i‡
deföed
(
__HAIKU__
)

43 
	~<sy¶og.h
>

44 #ñi‡!
deföed
(
WIN32
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__QNX__
)

45 
	~<sys/sy¶og.h
>

48 
	~"mosquôto_brokî_öã∫Æ.h
"

49 
	~"mem‹y_mosq.h
"

50 
	~"és_mosq.h
"

51 
	~"utû_mosq.h
"

52 
	~"mqâ_¥Ÿocﬁ.h
"

55 
	$scmp_p
(c⁄° *
p1
, c⁄° *
p2
)

57 c⁄° *
s1
 = *(c⁄° **)
p1
;

58 c⁄° *
s2
 = *(c⁄° **)
p2
;

59 
ªsu…
;

61 
s1
[0] && 
s2
[0]){

63 
ªsu…
 = 
	`touµî
(
s1
[0]Ë-Åouµî(
s2
[0]);

64 if(
ªsu…
 == 0){

66 
ªsu…
 = 
s1
[0] - 
s2
[0];

67 if(
ªsu…
 != 0){

68  
ªsu…
;

72  
ªsu…
;

74 
s1
++;

75 
s2
++;

78  
s1
[0] - 
s2
[0];

79 
	}
}

81 #ifde‡
WIN32


82 
	$c⁄fig__gë_dú_fûes
(c⁄° *
ö˛ude_dú
, ***
fûes
, *
fûe_cou¡
)

84 
size_t
 
Àn
;

85 
i
;

86 **
l_fûes
 = 
NULL
;

87 
l_fûe_cou¡
 = 0;

88 **
fûes_tmp
;

90 
HANDLE
 
fh
;

91 
dú∑th
[
MAX_PATH
];

92 
WIN32_FIND_DATA
 
föd_d©a
;

94 
	`¢¥ötf
(
dú∑th
, 
MAX_PATH
, "%s\\*.c⁄f", 
ö˛ude_dú
);

95 
fh
 = 
	`FödFú°Fûe
(
dú∑th
, &
föd_d©a
);

96 if(
fh
 =
INVALID_HANDLE_VALUE
){

97 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿ›í in˛ude_dú '%s'.", 
ö˛ude_dú
);

102 
Àn
 = 
	`°æí
(
ö˛ude_dú
)+1+°æí(
föd_d©a
.
cFûeName
)+1;

104 
l_fûe_cou¡
++;

105 
fûes_tmp
 = 
	`mosquôto__ªÆloc
(
l_fûes
, 
l_fûe_cou¡
*(*));

106 if(!
fûes_tmp
){

107 
i
=0; i<
l_fûe_cou¡
-1; i++){

108 
	`mosquôto__‰ì
(
l_fûes
[
i
]);

110 
	`mosquôto__‰ì
(
l_fûes
);

111 
	`FödClo£
(
fh
);

112  
MOSQ_ERR_NOMEM
;

114 
l_fûes
 = 
fûes_tmp
;

116 
l_fûes
[
l_fûe_cou¡
-1] = 
	`mosquôto__mÆloc
(
Àn
+1);

117 if(!
l_fûes
[
l_fûe_cou¡
-1]){

118 
i
=0; i<
l_fûe_cou¡
-1; i++){

119 
	`mosquôto__‰ì
(
l_fûes
[
i
]);

121 
	`mosquôto__‰ì
(
l_fûes
);

122 
	`FödClo£
(
fh
);

123  
MOSQ_ERR_NOMEM
;

125 
	`¢¥ötf
(
l_fûes
[
l_fûe_cou¡
-1], 
Àn
, "%s/%s", 
ö˛ude_dú
, 
föd_d©a
.
cFûeName
);

126 
l_fûes
[
l_fûe_cou¡
-1][
Àn
] = '\0';

127 }
	`FödNextFûe
(
fh
, &
föd_d©a
));

129 
	`FödClo£
(
fh
);

131 if(
l_fûes
){

132 
	`qs‹t
(
l_fûes
, 
l_fûe_cou¡
, (*), 
scmp_p
);

134 *
fûes
 = 
l_fûes
;

135 *
fûe_cou¡
 = 
l_fûe_cou¡
;

138 
	}
}

142 #i‚de‡
WIN32


144 
	$c⁄fig__gë_dú_fûes
(c⁄° *
ö˛ude_dú
, ***
fûes
, *
fûe_cou¡
)

146 **
l_fûes
 = 
NULL
;

147 
l_fûe_cou¡
 = 0;

148 **
fûes_tmp
;

149 
size_t
 
Àn
;

150 
i
;

152 
DIR
 *
dh
;

153 
dúít
 *
de
;

155 
dh
 = 
	`›ídú
(
ö˛ude_dú
);

156 if(!
dh
){

157 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿ›í in˛ude_dú '%s'.", 
ö˛ude_dú
);

160 (
de
 = 
	`ªaddú
(
dh
)Ë!
NULL
){

161 if(
	`°æí
(
de
->
d_«me
) > 5){

162 if(!
	`°rcmp
(&
de
->
d_«me
[
	`°æí
(de->d_name)-5], ".conf")){

163 
Àn
 = 
	`°æí
(
ö˛ude_dú
)+1+°æí(
de
->
d_«me
)+1;

165 
l_fûe_cou¡
++;

166 
fûes_tmp
 = 
	`mosquôto__ªÆloc
(
l_fûes
, (
size_t
)
l_fûe_cou¡
*(*));

167 if(!
fûes_tmp
){

168 
i
=0; i<
l_fûe_cou¡
-1; i++){

169 
	`mosquôto__‰ì
(
l_fûes
[
i
]);

171 
	`mosquôto__‰ì
(
l_fûes
);

172 
	`˛o£dú
(
dh
);

173  
MOSQ_ERR_NOMEM
;

175 
l_fûes
 = 
fûes_tmp
;

177 
l_fûes
[
l_fûe_cou¡
-1] = 
	`mosquôto__mÆloc
(
Àn
+1);

178 if(!
l_fûes
[
l_fûe_cou¡
-1]){

179 
i
=0; i<
l_fûe_cou¡
-1; i++){

180 
	`mosquôto__‰ì
(
l_fûes
[
i
]);

182 
	`mosquôto__‰ì
(
l_fûes
);

183 
	`˛o£dú
(
dh
);

184  
MOSQ_ERR_NOMEM
;

186 
	`¢¥ötf
(
l_fûes
[
l_fûe_cou¡
-1], 
Àn
, "%s/%s", 
ö˛ude_dú
, 
de
->
d_«me
);

187 
l_fûes
[
l_fûe_cou¡
-1][
Àn
] = '\0';

191 
	`˛o£dú
(
dh
);

193 if(
l_fûes
){

194 
	`qs‹t
(
l_fûes
, (
size_t
)
l_fûe_cou¡
, (*), 
scmp_p
);

196 *
fûes
 = 
l_fûes
;

197 *
fûe_cou¡
 = 
l_fûe_cou¡
;

200 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/context.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<time.h
>

24 
	~"mosquôto_brokî_öã∫Æ.h
"

25 
	~"Æüs_mosq.h
"

26 
	~"mem‹y_mosq.h
"

27 
	~"∑ckë_mosq.h
"

28 
	~"¥›îty_mosq.h
"

29 
	~"time_mosq.h
"

30 
	~"utû_mosq.h
"

31 
	~"wûl_mosq.h
"

33 
	~"uthash.h
"

35 
mosquôto
 *
	$c⁄ãxt__öô
(
mosq_sock_t
 
sock
)

37 
mosquôto
 *
c⁄ãxt
;

38 
addªss
[1024];

40 
c⁄ãxt
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto
));

41 if(!
c⁄ãxt
Ë 
NULL
;

43 #ifde‡
WITH_EPOLL


44 
c⁄ãxt
->
idít
 = 
id_˛õ¡
;

46 
c⁄ãxt
->
pﬁlfd_ödex
 = -1;

48 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_√w
);

49 
c⁄ãxt
->
sock
 = sock;

50 
c⁄ãxt
->
œ°_msg_ö
 = 
db
.
now_s
;

51 
c⁄ãxt
->
√xt_msg_out
 = 
db
.
now_s
 + 60;

52 
c⁄ãxt
->
kì∑live
 = 60;

53 
c⁄ãxt
->
˛ón_°¨t
 = 
åue
;

54 
c⁄ãxt
->
id
 = 
NULL
;

55 
c⁄ãxt
->
œ°_mid
 = 0;

56 
c⁄ãxt
->
wûl
 = 
NULL
;

57 
c⁄ãxt
->
u£∫ame
 = 
NULL
;

58 
c⁄ãxt
->
∑ssw‹d
 = 
NULL
;

59 
c⁄ãxt
->
li°íî
 = 
NULL
;

60 
c⁄ãxt
->
a˛_li°
 = 
NULL
;

61 
c⁄ãxt
->
ªèö_avaûabÀ
 = 
åue
;

66 
c⁄ãxt
->
is_bridge
 = 
Ál£
;

68 
c⁄ãxt
->
ö_∑ckë
.
∑ylﬂd
 = 
NULL
;

69 
	`∑ckë__˛ónup
(&
c⁄ãxt
->
ö_∑ckë
);

70 
c⁄ãxt
->
out_∑ckë
 = 
NULL
;

71 
c⁄ãxt
->
cuºít_out_∑ckë
 = 
NULL
;

72 
c⁄ãxt
->
out_∑ckë_cou¡
 = 0;

74 
c⁄ãxt
->
addªss
 = 
NULL
;

75 if(()
sock
 >= 0){

76 if(!
	`√t__sockë_gë_addªss
(
sock
, 
addªss
, 1024, &
c⁄ãxt
->
ªmŸe_p‹t
)){

77 
c⁄ãxt
->
addªss
 = 
	`mosquôto__°rdup
(address);

79 if(!
c⁄ãxt
->
addªss
){

81 
	`mosquôto__‰ì
(
c⁄ãxt
);

82  
NULL
;

85 
c⁄ãxt
->
bridge
 = 
NULL
;

86 
c⁄ãxt
->
msgs_ö
.
öÊight_maximum
 = 
db
.
c⁄fig
->
max_öÊight_mesßges
;

87 
c⁄ãxt
->
msgs_out
.
öÊight_maximum
 = 
db
.
c⁄fig
->
max_öÊight_mesßges
;

88 
c⁄ãxt
->
msgs_ö
.
öÊight_quŸa
 = 
db
.
c⁄fig
->
max_öÊight_mesßges
;

89 
c⁄ãxt
->
msgs_out
.
öÊight_quŸa
 = 
db
.
c⁄fig
->
max_öÊight_mesßges
;

90 
c⁄ãxt
->
max_qos
 = 2;

91 #ifde‡
WITH_TLS


92 
c⁄ãxt
->
s¶
 = 
NULL
;

95 if(()
c⁄ãxt
->
sock
 >= 0){

96 
	`HASH_ADD
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, 
sock
, (
c⁄ãxt
->sock), context);

98  
c⁄ãxt
;

99 
	}
}

107 
	$c⁄ãxt__˛ónup
(
mosquôto
 *
c⁄ãxt
, 
boﬁ
 
f‹˚_‰ì
)

109 
mosquôto__∑ckë
 *
∑ckë
;

111 if(!
c⁄ãxt
) ;

113 if(
f‹˚_‰ì
){

114 
c⁄ãxt
->
˛ón_°¨t
 = 
åue
;

117 #ifde‡
WITH_BRIDGE


118 if(
c⁄ãxt
->
bridge
){

119 
	`bridge__˛ónup
(
c⁄ãxt
);

123 
	`Æüs__‰ì_Æl
(
c⁄ãxt
);

125 
	`mosquôto__‰ì
(
c⁄ãxt
->
auth_mëhod
);

126 
c⁄ãxt
->
auth_mëhod
 = 
NULL
;

128 
	`mosquôto__‰ì
(
c⁄ãxt
->
u£∫ame
);

129 
c⁄ãxt
->
u£∫ame
 = 
NULL
;

131 
	`mosquôto__‰ì
(
c⁄ãxt
->
∑ssw‹d
);

132 
c⁄ãxt
->
∑ssw‹d
 = 
NULL
;

134 
	`√t__sockë_˛o£
(
c⁄ãxt
);

135 if(
f‹˚_‰ì
){

136 
	`sub__˛ón_£ssi⁄
(
c⁄ãxt
);

138 
	`db__mesßges_dñëe
(
c⁄ãxt
, 
f‹˚_‰ì
);

140 
	`mosquôto__‰ì
(
c⁄ãxt
->
addªss
);

141 
c⁄ãxt
->
addªss
 = 
NULL
;

143 
	`c⁄ãxt__£nd_wûl
(
c⁄ãxt
);

145 if(
c⁄ãxt
->
id
){

146 
	`c⁄ãxt__ªmove_‰om_by_id
(
c⁄ãxt
);

147 
	`mosquôto__‰ì
(
c⁄ãxt
->
id
);

148 
c⁄ãxt
->
id
 = 
NULL
;

150 
	`∑ckë__˛ónup
(&(
c⁄ãxt
->
ö_∑ckë
));

151 if(
c⁄ãxt
->
cuºít_out_∑ckë
){

152 
	`∑ckë__˛ónup
(
c⁄ãxt
->
cuºít_out_∑ckë
);

153 
	`mosquôto__‰ì
(
c⁄ãxt
->
cuºít_out_∑ckë
);

154 
c⁄ãxt
->
cuºít_out_∑ckë
 = 
NULL
;

156 
c⁄ãxt
->
out_∑ckë
){

157 
	`∑ckë__˛ónup
(
c⁄ãxt
->
out_∑ckë
);

158 
∑ckë
 = 
c⁄ãxt
->
out_∑ckë
;

159 
c⁄ãxt
->
out_∑ckë
 = c⁄ãxt->out_∑ckë->
√xt
;

160 
	`mosquôto__‰ì
(
∑ckë
);

162 
c⁄ãxt
->
out_∑ckë_cou¡
 = 0;

163 #i‡
	`deföed
(
WITH_BROKER
Ë&& deföed(
__GLIBC__
Ë&& deföed(
WITH_ADNS
)

164 if(
c⁄ãxt
->
adns
){

165 
	`gai_ˇn˚l
(
c⁄ãxt
->
adns
);

166 
	`mosquôto__‰ì
((
addröfo
 *)
c⁄ãxt
->
adns
->
¨_ªque°
);

167 
	`mosquôto__‰ì
(
c⁄ãxt
->
adns
);

170 if(
f‹˚_‰ì
){

171 
	`mosquôto__‰ì
(
c⁄ãxt
);

173 
	}
}

176 
	$c⁄ãxt__£nd_wûl
(
mosquôto
 *
˘xt
)

178 if(
˘xt
->
°©e
 !
mosq_cs_disc⁄√˘ög
 && ctxt->
wûl
){

179 if(
˘xt
->
wûl_dñay_öãrvÆ
 > 0){

180 
	`wûl_dñay__add
(
˘xt
);

184 if(
	`mosquôto_a˛_check
(
˘xt
,

185 
˘xt
->
wûl
->
msg
.
t›ic
,

186 (
uöt32_t
)
˘xt
->
wûl
->
msg
.
∑ylﬂdÀn
,

187 
˘xt
->
wûl
->
msg
.
∑ylﬂd
,

188 (
uöt8_t
)
˘xt
->
wûl
->
msg
.
qos
,

189 
˘xt
->
wûl
->
msg
.
ªèö
,

190 
MOSQ_ACL_WRITE
Ë=
MOSQ_ERR_SUCCESS
){

193 
	`db__mesßges_ósy_queue
(
˘xt
,

194 
˘xt
->
wûl
->
msg
.
t›ic
,

195 (
uöt8_t
)
˘xt
->
wûl
->
msg
.
qos
,

196 (
uöt32_t
)
˘xt
->
wûl
->
msg
.
∑ylﬂdÀn
,

197 
˘xt
->
wûl
->
msg
.
∑ylﬂd
,

198 
˘xt
->
wûl
->
msg
.
ªèö
,

199 
˘xt
->
wûl
->
expúy_öãrvÆ
,

200 &
˘xt
->
wûl
->
¥›îtõs
);

203 
	`wûl__˛ór
(
˘xt
);

204 
	}
}

207 
	$c⁄ãxt__disc⁄√˘
(
mosquôto
 *
c⁄ãxt
)

209 if(
	`mosquôto__gë_°©e
(
c⁄ãxt
Ë=
mosq_cs_disc⁄√˘ed
){

213 
	`∂ugö__h™dÀ_disc⁄√˘
(
c⁄ãxt
, -1);

215 
	`c⁄ãxt__£nd_wûl
(
c⁄ãxt
);

216 
	`√t__sockë_˛o£
(
c⁄ãxt
);

217 if(
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 == 0){

219 #ifde‡
WITH_BRIDGE


220 if(
c⁄ãxt
->
bridge
 =
NULL
)

223 if(
c⁄ãxt
->
wûl_dñay_öãrvÆ
 == 0){

225 
	`c⁄ãxt__add_to_disu£d
(
c⁄ãxt
);

229 
	`£ssi⁄_expúy__add
(
c⁄ãxt
);

231 
	`kì∑live__ªmove
(
c⁄ãxt
);

232 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_disc⁄√˘ed
);

233 
	}
}

235 
	$c⁄ãxt__add_to_disu£d
(
mosquôto
 *
c⁄ãxt
)

237 if(
c⁄ãxt
->
°©e
 =
mosq_cs_disu£d
) ;

239 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_disu£d
);

241 if(
c⁄ãxt
->
id
){

242 
	`c⁄ãxt__ªmove_‰om_by_id
(
c⁄ãxt
);

243 
	`mosquôto__‰ì
(
c⁄ãxt
->
id
);

244 
c⁄ãxt
->
id
 = 
NULL
;

247 
c⁄ãxt
->
f‹_‰ì_√xt
 = 
db
.
Œ_f‹_‰ì
;

248 
db
.
Œ_f‹_‰ì
 = 
c⁄ãxt
;

249 
	}
}

251 
	$c⁄ãxt__‰ì_disu£d
()

253 
mosquôto
 *
c⁄ãxt
, *
√xt
;

254 #ifde‡
WITH_WEBSOCKETS


255 
mosquôto
 *
œ°
 = 
NULL
;

258 
c⁄ãxt
 = 
db
.
Œ_f‹_‰ì
;

259 
db
.
Œ_f‹_‰ì
 = 
NULL
;

260 
c⁄ãxt
){

261 #ifde‡
WITH_WEBSOCKETS


262 if(
c⁄ãxt
->
wsi
){

264 if(
œ°
){

265 
œ°
->
f‹_‰ì_√xt
 = 
c⁄ãxt
;

267 
db
.
Œ_f‹_‰ì
 = 
c⁄ãxt
;

269 
√xt
 = 
c⁄ãxt
->
f‹_‰ì_√xt
;

270 
c⁄ãxt
->
f‹_‰ì_√xt
 = 
NULL
;

271 
œ°
 = 
c⁄ãxt
;

272 
c⁄ãxt
 = 
√xt
;

276 
√xt
 = 
c⁄ãxt
->
f‹_‰ì_√xt
;

277 
	`c⁄ãxt__˛ónup
(
c⁄ãxt
, 
åue
);

278 
c⁄ãxt
 = 
√xt
;

281 
	}
}

284 
	$c⁄ãxt__add_to_by_id
(
mosquôto
 *
c⁄ãxt
)

286 if(
c⁄ãxt
->
ö_by_id
 =
Ál£
){

287 
c⁄ãxt
->
ö_by_id
 = 
åue
;

288 
	`HASH_ADD_KEYPTR
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
c⁄ãxt
->
id
, 
	`°æí
(context->id), context);

290 
	}
}

293 
	$c⁄ãxt__ªmove_‰om_by_id
(
mosquôto
 *
c⁄ãxt
)

295 
mosquôto
 *
c⁄ãxt_found
;

297 if(
c⁄ãxt
->
ö_by_id
 =
åue
 && c⁄ãxt->
id
){

298 
	`HASH_FIND
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
c⁄ãxt
->
id
, 
	`°æí
(c⁄ãxt->id), 
c⁄ãxt_found
);

299 if(
c⁄ãxt_found
){

300 
	`HASH_DELETE
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
c⁄ãxt_found
);

302 
c⁄ãxt
->
ö_by_id
 = 
Ál£
;

304 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/control.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

23 
	~"mqâ_¥Ÿocﬁ.h
"

24 
	~"mosquôto_brokî_öã∫Æ.h
"

25 
	~"mem‹y_mosq.h
"

26 
	~"£nd_mosq.h
"

28 #ifde‡
WITH_CONTROL


31 
	$c⁄åﬁ__¥o˚ss
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_msg_°‹e
 *
°‹ed
)

33 
mosquôto__ˇŒback
 *
cb_found
;

34 
mosquôto_evt_c⁄åﬁ
 
evít_d©a
;

35 
mosquôto__£curôy_›ti⁄s
 *
›ts
;

36 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

37 
rc
 = 
MOSQ_ERR_SUCCESS
;

39 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

40 
›ts
 = &
c⁄ãxt
->
li°íî
->
£curôy_›ti⁄s
;

42 
›ts
 = &
db
.
c⁄fig
->
£curôy_›ti⁄s
;

44 
	`HASH_FIND
(
hh
, 
›ts
->
∂ugö_ˇŒbacks
.
c⁄åﬁ
, 
°‹ed
->
t›ic
, 
	`°æí
(°‹ed->t›ic), 
cb_found
);

45 if(
cb_found
){

46 
	`mem£t
(&
evít_d©a
, 0, (event_data));

47 
evít_d©a
.
˛õ¡
 = 
c⁄ãxt
;

48 
evít_d©a
.
t›ic
 = 
°‹ed
->topic;

49 
evít_d©a
.
∑ylﬂd
 = 
°‹ed
->payload;

50 
evít_d©a
.
∑ylﬂdÀn
 = 
°‹ed
->payloadlen;

51 
evít_d©a
.
qos
 = 
°‹ed
->qos;

52 
evít_d©a
.
ªèö
 = 
°‹ed
->retain;

53 
evít_d©a
.
¥›îtõs
 = 
°‹ed
->properties;

54 
evít_d©a
.
ªas⁄_code
 = 
MQTT_RC_SUCCESS
;

55 
evít_d©a
.
ªas⁄_°rög
 = 
NULL
;

57 
rc
 = 
cb_found
->
	`cb
(
MOSQ_EVT_CONTROL
, &
evít_d©a
, cb_found->
u£rd©a
);

58 if(
rc
){

59 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
 && 
evít_d©a
.
ªas⁄_°rög
){

60 
	`mosquôto_¥›îty_add_°rög
(&
¥›îtõs
, 
MQTT_PROP_REASON_STRING
, 
evít_d©a
.
ªas⁄_°rög
);

63 
	`‰ì
(
evít_d©a
.
ªas⁄_°rög
);

64 
evít_d©a
.
ªas⁄_°rög
 = 
NULL
;

67 if(
°‹ed
->
qos
 == 1){

68 
rc
 = 
	`£nd__puback
(
c⁄ãxt
, 
°‹ed
->
sour˚_mid
, 
MQTT_RC_SUCCESS
, 
¥›îtõs
);

69 }if(
°‹ed
->
qos
 == 2){

70 
rc
 = 
	`£nd__pubªc
(
c⁄ãxt
, 
°‹ed
->
sour˚_mid
, 
MQTT_RC_SUCCESS
, 
¥›îtõs
);

72 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

74  
rc
;

75 
	}
}

78 
	$c⁄åﬁ__ªgi°î_ˇŒback
(
mosquôto__£curôy_›ti⁄s
 *
›ts
, 
MOSQ_FUNC_gíîic_ˇŒback
 
cb_func
, c⁄° *
t›ic
, *
u£rd©a
)

80 #ifde‡
WITH_CONTROL


81 
mosquôto__ˇŒback
 *
cb_found
, *
cb_√w
;

82 
size_t
 
t›ic_Àn
;

84 if(
t›ic
 =
NULL
 || 
cb_func
 =NULLË 
MOSQ_ERR_INVAL
;

85 
t›ic_Àn
 = 
	`°æí
(
t›ic
);

86 if(
t›ic_Àn
 =0 ||Å›ic_À¿> 65535Ë 
MOSQ_ERR_INVAL
;

87 if(
	`°∫cmp
(
t›ic
, "$CONTROL/", 
	`°æí
("$CONTROL/")) || strlen(topic) < strlen("$CONTROL/A/v1")){

88  
MOSQ_ERR_INVAL
;

91 
	`HASH_FIND
(
hh
, 
›ts
->
∂ugö_ˇŒbacks
.
c⁄åﬁ
, 
t›ic
, 
t›ic_Àn
, 
cb_found
);

92 if(
cb_found
){

93  
MOSQ_ERR_ALREADY_EXISTS
;

96 
cb_√w
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__ˇŒback
));

97 if(
cb_√w
 =
NULL
){

98  
MOSQ_ERR_NOMEM
;

100 
cb_√w
->
d©a
 = 
	`mosquôto__°rdup
(
t›ic
);

101 if(
cb_√w
->
d©a
 =
NULL
){

102 
	`mosquôto__‰ì
(
cb_√w
);

103  
MOSQ_ERR_NOMEM
;

105 
cb_√w
->
cb
 = 
cb_func
;

106 
cb_√w
->
u£rd©a
 = userdata;

107 
	`HASH_ADD_KEYPTR
(
hh
, 
›ts
->
∂ugö_ˇŒbacks
.
c⁄åﬁ
, 
cb_√w
->
d©a
, 
	`°æí
(cb_new->data), cb_new);

109  
MOSQ_ERR_SUCCESS
;

111  
MOSQ_ERR_NOT_SUPPORTED
;

113 
	}
}

115 
	$c⁄åﬁ__uƒegi°î_ˇŒback
(
mosquôto__£curôy_›ti⁄s
 *
›ts
, 
MOSQ_FUNC_gíîic_ˇŒback
 
cb_func
, c⁄° *
t›ic
)

117 #ifde‡
WITH_CONTROL


118 
mosquôto__ˇŒback
 *
cb_found
;

119 
size_t
 
t›ic_Àn
;

121 if(
t›ic
 =
NULL
Ë 
MOSQ_ERR_INVAL
;

122 
t›ic_Àn
 = 
	`°æí
(
t›ic
);

123 if(
t›ic_Àn
 =0 ||Å›ic_À¿> 65535Ë 
MOSQ_ERR_INVAL
;

124 if(
	`°∫cmp
(
t›ic
, "$CONTROL/", 
	`°æí
("$CONTROL/"))Ë 
MOSQ_ERR_INVAL
;

126 
	`HASH_FIND
(
hh
, 
›ts
->
∂ugö_ˇŒbacks
.
c⁄åﬁ
, 
t›ic
, 
t›ic_Àn
, 
cb_found
);

127 if(
cb_found
 && cb_found->
cb
 =
cb_func
){

128 
	`HASH_DELETE
(
hh
, 
›ts
->
∂ugö_ˇŒbacks
.
c⁄åﬁ
, 
cb_found
);

129 
	`mosquôto__‰ì
(
cb_found
->
d©a
);

130 
	`mosquôto__‰ì
(
cb_found
);

132  
MOSQ_ERR_SUCCESS
;;

134  
MOSQ_ERR_NOT_FOUND
;

136  
MOSQ_ERR_NOT_SUPPORTED
;

138 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/database.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°dio.h
>

23 
	~<uéi°.h
>

25 
	~"mosquôto_brokî_öã∫Æ.h
"

26 
	~"mem‹y_mosq.h
"

27 
	~"£nd_mosq.h
"

28 
	~"sys_åì.h
"

29 
	~"time_mosq.h
"

30 
	~"utû_mosq.h
"

38 
boﬁ
 
	$db__ªady_f‹_Êight
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_msg_dúe˘i⁄
 
dú
, 
qos
)

40 
mosquôto_msg_d©a
 *
msgs
;

41 
boﬁ
 
vÆid_byãs
;

42 
boﬁ
 
vÆid_cou¡
;

44 if(
dú
 =
mosq_md_out
){

45 
msgs
 = &
c⁄ãxt
->
msgs_out
;

47 
msgs
 = &
c⁄ãxt
->
msgs_ö
;

50 if(
msgs
->
öÊight_maximum
 =0 && 
db
.
c⁄fig
->
max_öÊight_byãs
 == 0){

51  
åue
;

54 if(
qos
 == 0){

60 if(
db
.
c⁄fig
->
max_queued_mesßges
 =0 && db.c⁄fig->
max_öÊight_byãs
 == 0){

61  
åue
;

63 
vÆid_byãs
 = ((
msgs
->
öÊight_byãs
 - (
ssize_t
)
db
.
c⁄fig
->
max_öÊight_byãs
Ë< (ssize_t)db.c⁄fig->
max_queued_byãs
);

64 if(
dú
 =
mosq_md_out
){

65 
vÆid_cou¡
 = 
c⁄ãxt
->
out_∑ckë_cou¡
 < 
db
.
c⁄fig
->
max_queued_mesßges
;

67 
vÆid_cou¡
 = 
msgs
->
öÊight_cou¡
 - msgs->
öÊight_maximum
 < 
db
.
c⁄fig
->
max_queued_mesßges
;

70 if(
db
.
c⁄fig
->
max_queued_mesßges
 == 0){

71  
vÆid_byãs
;

73 if(
db
.
c⁄fig
->
max_queued_byãs
 == 0){

74  
vÆid_cou¡
;

77 
vÆid_byãs
 = (
ssize_t
)
msgs
->
öÊight_byãs12
 < (ssize_t)
db
.
c⁄fig
->
max_öÊight_byãs
;

78 
vÆid_cou¡
 = 
msgs
->
öÊight_quŸa
 > 0;

80 if(
msgs
->
öÊight_maximum
 == 0){

81  
vÆid_byãs
;

83 if(
db
.
c⁄fig
->
max_öÊight_byãs
 == 0){

84  
vÆid_cou¡
;

88  
vÆid_byãs
 && 
vÆid_cou¡
;

89 
	}
}

100 
boﬁ
 
	$db__ªady_f‹_queue
(
mosquôto
 *
c⁄ãxt
, 
qos
, 
mosquôto_msg_d©a
 *
msg_d©a
)

102 
sour˚_cou¡
;

103 
adju°_cou¡
;

104 
sour˚_byãs
;

105 
ssize_t
 
adju°_byãs
 = (ssize_t)
db
.
c⁄fig
->
max_öÊight_byãs
;

106 
boﬁ
 
vÆid_byãs
;

107 
boﬁ
 
vÆid_cou¡
;

109 if(
db
.
c⁄fig
->
max_queued_mesßges
 =0 && db.c⁄fig->
max_queued_byãs
 == 0){

110  
åue
;

113 if(
qos
 =0 && 
db
.
c⁄fig
->
queue_qos0_mesßges
 =
Ál£
){

114  
Ál£
;

116 
sour˚_byãs
 = (
ssize_t
)
msg_d©a
->
queued_byãs12
;

117 
sour˚_cou¡
 = 
msg_d©a
->
queued_cou¡12
;

119 
adju°_cou¡
 = 
msg_d©a
->
öÊight_maximum
;

122 if(
c⁄ãxt
->
sock
 =
INVALID_SOCKET
){

123 
adju°_byãs
 = 0;

124 
adju°_cou¡
 = 0;

127 
vÆid_byãs
 = (
sour˚_byãs
 - (
ssize_t
)
adju°_byãs
Ë< (ssize_t)
db
.
c⁄fig
->
max_queued_byãs
;

128 
vÆid_cou¡
 = 
sour˚_cou¡
 - 
adju°_cou¡
 < 
db
.
c⁄fig
->
max_queued_mesßges
;

130 if(
db
.
c⁄fig
->
max_queued_byãs
 == 0){

131  
vÆid_cou¡
;

133 if(
db
.
c⁄fig
->
max_queued_mesßges
 == 0){

134  
vÆid_byãs
;

137  
vÆid_byãs
 && 
vÆid_cou¡
;

138 
	}
}

141 
	$db__msg_add_to_öÊight_°©s
(
mosquôto_msg_d©a
 *
msg_d©a
, 
mosquôto_˛õ¡_msg
 *
msg
)

143 
msg_d©a
->
öÊight_cou¡
++;

144 
msg_d©a
->
öÊight_byãs
 +
msg
->
°‹e
->
∑ylﬂdÀn
;

145 if(
msg
->
qos
 != 0){

146 
msg_d©a
->
öÊight_cou¡12
++;

147 
msg_d©a
->
öÊight_byãs12
 +
msg
->
°‹e
->
∑ylﬂdÀn
;

149 
	}
}

151 
	$db__msg_ªmove_‰om_öÊight_°©s
(
mosquôto_msg_d©a
 *
msg_d©a
, 
mosquôto_˛õ¡_msg
 *
msg
)

153 
msg_d©a
->
öÊight_cou¡
--;

154 
msg_d©a
->
öÊight_byãs
 -
msg
->
°‹e
->
∑ylﬂdÀn
;

155 if(
msg
->
qos
 != 0){

156 
msg_d©a
->
öÊight_cou¡12
--;

157 
msg_d©a
->
öÊight_byãs12
 -
msg
->
°‹e
->
∑ylﬂdÀn
;

159 
	}
}

162 
	$db__msg_add_to_queued_°©s
(
mosquôto_msg_d©a
 *
msg_d©a
, 
mosquôto_˛õ¡_msg
 *
msg
)

164 
msg_d©a
->
queued_cou¡
++;

165 
msg_d©a
->
queued_byãs
 +
msg
->
°‹e
->
∑ylﬂdÀn
;

166 if(
msg
->
qos
 != 0){

167 
msg_d©a
->
queued_cou¡12
++;

168 
msg_d©a
->
queued_byãs12
 +
msg
->
°‹e
->
∑ylﬂdÀn
;

170 
	}
}

172 
	$db__msg_ªmove_‰om_queued_°©s
(
mosquôto_msg_d©a
 *
msg_d©a
, 
mosquôto_˛õ¡_msg
 *
msg
)

174 
msg_d©a
->
queued_cou¡
--;

175 
msg_d©a
->
queued_byãs
 -
msg
->
°‹e
->
∑ylﬂdÀn
;

176 if(
msg
->
qos
 != 0){

177 
msg_d©a
->
queued_cou¡12
--;

178 
msg_d©a
->
queued_byãs12
 -
msg
->
°‹e
->
∑ylﬂdÀn
;

180 
	}
}

183 
	$db__›í
(
mosquôto__c⁄fig
 *
c⁄fig
)

185 
mosquôto__subhõr
 *
subhõr
;

187 if(!
c⁄fig
Ë 
MOSQ_ERR_INVAL
;

189 
db
.
œ°_db_id
 = 0;

191 
db
.
c⁄ãxts_by_id
 = 
NULL
;

192 
db
.
c⁄ãxts_by_sock
 = 
NULL
;

193 
db
.
c⁄ãxts_f‹_‰ì
 = 
NULL
;

194 #ifde‡
WITH_BRIDGE


195 
db
.
bridges
 = 
NULL
;

196 
db
.
bridge_cou¡
 = 0;

200 
db
.
˛õ¡id_ödex_hash
 = 
NULL
;

202 
db
.
subs
 = 
NULL
;

204 
subhõr
 = 
	`sub__add_hõr_íåy
(
NULL
, &
db
.
subs
, "", 0);

205 if(!
subhõr
Ë 
MOSQ_ERR_NOMEM
;

207 
subhõr
 = 
	`sub__add_hõr_íåy
(
NULL
, &
db
.
subs
, "$SYS", (
uöt16_t
)
	`°æí
("$SYS"));

208 if(!
subhõr
Ë 
MOSQ_ERR_NOMEM
;

210 
	`ªèö__öô
();

212 
db
.
c⁄fig
->
£curôy_›ti⁄s
.
u≈wd
 = 
NULL
;

214 #ifde‡
WITH_PERSISTENCE


215 if(
	`≥rsi°__ª°‹e
())  1;

218  
MOSQ_ERR_SUCCESS
;

219 
	}
}

221 
	$subhõr_˛ón
(
mosquôto__subhõr
 **
subhõr
)

223 
mosquôto__subhõr
 *
≥î
, *
subhõr_tmp
;

224 
mosquôto__subÀaf
 *
Àaf
, *
√xéóf
;

226 
	`HASH_ITER
(
hh
, *
subhõr
, 
≥î
, 
subhõr_tmp
){

227 
Àaf
 = 
≥î
->
subs
;

228 
Àaf
){

229 
√xéóf
 = 
Àaf
->
√xt
;

230 
	`mosquôto__‰ì
(
Àaf
);

231 
Àaf
 = 
√xéóf
;

233 
	`subhõr_˛ón
(&
≥î
->
chûdªn
);

234 
	`mosquôto__‰ì
(
≥î
->
t›ic
);

236 
	`HASH_DELETE
(
hh
, *
subhõr
, 
≥î
);

237 
	`mosquôto__‰ì
(
≥î
);

239 
	}
}

241 
	$db__˛o£
()

243 
	`subhõr_˛ón
(&
db
.
subs
);

244 
	`ªèö__˛ón
(&
db
.
ªèös
);

245 
	`db__msg_°‹e_˛ón
();

247  
MOSQ_ERR_SUCCESS
;

248 
	}
}

251 
	$db__msg_°‹e_add
(
mosquôto_msg_°‹e
 *
°‹e
)

253 
°‹e
->
√xt
 = 
db
.
msg_°‹e
;

254 
°‹e
->
¥ev
 = 
NULL
;

255 if(
db
.
msg_°‹e
){

256 
db
.
msg_°‹e
->
¥ev
 = 
°‹e
;

258 
db
.
msg_°‹e
 = 
°‹e
;

259 
	}
}

262 
	$db__msg_°‹e_‰ì
(
mosquôto_msg_°‹e
 *
°‹e
)

264 
i
;

266 
	`mosquôto__‰ì
(
°‹e
->
sour˚_id
);

267 
	`mosquôto__‰ì
(
°‹e
->
sour˚_u£∫ame
);

268 if(
°‹e
->
de°_ids
){

269 
i
=0; i<
°‹e
->
de°_id_cou¡
; i++){

270 
	`mosquôto__‰ì
(
°‹e
->
de°_ids
[
i
]);

272 
	`mosquôto__‰ì
(
°‹e
->
de°_ids
);

274 
	`mosquôto__‰ì
(
°‹e
->
t›ic
);

275 
	`mosquôto_¥›îty_‰ì_Æl
(&
°‹e
->
¥›îtõs
);

276 
	`mosquôto__‰ì
(
°‹e
->
∑ylﬂd
);

277 
	`mosquôto__‰ì
(
°‹e
);

278 
	}
}

280 
	$db__msg_°‹e_ªmove
(
mosquôto_msg_°‹e
 *
°‹e
)

282 if(
°‹e
->
¥ev
){

283 
°‹e
->
¥ev
->
√xt
 = store->next;

284 if(
°‹e
->
√xt
){

285 
°‹e
->
√xt
->
¥ev
 = store->prev;

288 
db
.
msg_°‹e
 = 
°‹e
->
√xt
;

289 if(
°‹e
->
√xt
){

290 
°‹e
->
√xt
->
¥ev
 = 
NULL
;

293 
db
.
msg_°‹e_cou¡
--;

294 
db
.
msg_°‹e_byãs
 -
°‹e
->
∑ylﬂdÀn
;

296 
	`db__msg_°‹e_‰ì
(
°‹e
);

297 
	}
}

300 
	$db__msg_°‹e_˛ón
()

302 
mosquôto_msg_°‹e
 *
°‹e
, *
√xt
;;

304 
°‹e
 = 
db
.
msg_°‹e
;

305 
°‹e
){

306 
√xt
 = 
°‹e
->next;

307 
	`db__msg_°‹e_ªmove
(
°‹e
);

308 
°‹e
 = 
√xt
;

310 
	}
}

312 
	$db__msg_°‹e_ªf_öc
(
mosquôto_msg_°‹e
 *
°‹e
)

314 
°‹e
->
ªf_cou¡
++;

315 
	}
}

317 
	$db__msg_°‹e_ªf_dec
(
mosquôto_msg_°‹e
 **
°‹e
)

319 (*
°‹e
)->
ªf_cou¡
--;

320 if((*
°‹e
)->
ªf_cou¡
 == 0){

321 
	`db__msg_°‹e_ªmove
(*
°‹e
);

322 *
°‹e
 = 
NULL
;

324 
	}
}

327 
	$db__msg_°‹e_com∑˘
()

329 
mosquôto_msg_°‹e
 *
°‹e
, *
√xt
;

331 
°‹e
 = 
db
.
msg_°‹e
;

332 
°‹e
){

333 
√xt
 = 
°‹e
->next;

334 if(
°‹e
->
ªf_cou¡
 < 1){

335 
	`db__msg_°‹e_ªmove
(
°‹e
);

337 
°‹e
 = 
√xt
;

339 
	}
}

342 
	$db__mesßge_ªmove_‰om_öÊight
(
mosquôto_msg_d©a
 *
msg_d©a
, 
mosquôto_˛õ¡_msg
 *
ôem
)

344 if(!
msg_d©a
 || !
ôem
){

348 
	`DL_DELETE
(
msg_d©a
->
öÊight
, 
ôem
);

349 if(
ôem
->
°‹e
){

350 
	`db__msg_ªmove_‰om_öÊight_°©s
(
msg_d©a
, 
ôem
);

351 
	`db__msg_°‹e_ªf_dec
(&
ôem
->
°‹e
);

354 
	`mosquôto_¥›îty_‰ì_Æl
(&
ôem
->
¥›îtõs
);

355 
	`mosquôto__‰ì
(
ôem
);

356 
	}
}

359 
	$db__mesßge_ªmove_‰om_queued
(
mosquôto_msg_d©a
 *
msg_d©a
, 
mosquôto_˛õ¡_msg
 *
ôem
)

361 if(!
msg_d©a
 || !
ôem
){

365 
	`DL_DELETE
(
msg_d©a
->
queued
, 
ôem
);

366 if(
ôem
->
°‹e
){

367 
	`db__msg_°‹e_ªf_dec
(&
ôem
->
°‹e
);

370 
	`mosquôto_¥›îty_‰ì_Æl
(&
ôem
->
¥›îtõs
);

371 
	`mosquôto__‰ì
(
ôem
);

372 
	}
}

375 
	$db__mesßge_dequeue_fú°
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_msg_d©a
 *
msg_d©a
)

377 
mosquôto_˛õ¡_msg
 *
msg
;

379 
	`UNUSED
(
c⁄ãxt
);

381 
msg
 = 
msg_d©a
->
queued
;

382 
	`DL_DELETE
(
msg_d©a
->
queued
, 
msg
);

383 
	`DL_APPEND
(
msg_d©a
->
öÊight
, 
msg
);

384 if(
msg_d©a
->
öÊight_quŸa
 > 0){

385 
msg_d©a
->
öÊight_quŸa
--;

388 
	`db__msg_ªmove_‰om_queued_°©s
(
msg_d©a
, 
msg
);

389 
	`db__msg_add_to_öÊight_°©s
(
msg_d©a
, 
msg
);

390 
	}
}

393 
	$db__mesßge_dñëe_outgoög
(
mosquôto
 *
c⁄ãxt
, 
uöt16_t
 
mid
, 
mosquôto_msg_°©e
 
ex≥˘_°©e
, 
qos
)

395 
mosquôto_˛õ¡_msg
 *
èû
, *
tmp
;

396 
msg_ödex
 = 0;

398 if(!
c⁄ãxt
Ë 
MOSQ_ERR_INVAL
;

400 
	`DL_FOREACH_SAFE
(
c⁄ãxt
->
msgs_out
.
öÊight
, 
èû
, 
tmp
){

401 
msg_ödex
++;

402 if(
èû
->
mid
 == mid){

403 if(
èû
->
qos
 != qos){

404  
MOSQ_ERR_PROTOCOL
;

405 }if(
qos
 =2 && 
èû
->
°©e
 !
ex≥˘_°©e
){

406  
MOSQ_ERR_PROTOCOL
;

408 
msg_ödex
--;

409 
	`db__mesßge_ªmove_‰om_öÊight
(&
c⁄ãxt
->
msgs_out
, 
èû
);

414 
	`DL_FOREACH_SAFE
(
c⁄ãxt
->
msgs_out
.
queued
, 
èû
, 
tmp
){

415 if(!
	`db__ªady_f‹_Êight
(
c⁄ãxt
, 
mosq_md_out
, 
èû
->
qos
)){

419 
msg_ödex
++;

420 
èû
->
time°amp
 = 
db
.
now_s
;

421 
èû
->
qos
){

423 
èû
->
°©e
 = 
mosq_ms_publish_qos0
;

426 
èû
->
°©e
 = 
mosq_ms_publish_qos1
;

429 
èû
->
°©e
 = 
mosq_ms_publish_qos2
;

432 
	`db__mesßge_dequeue_fú°
(
c⁄ãxt
, &c⁄ãxt->
msgs_out
);

434 #ifde‡
WITH_PERSISTENCE


435 
db
.
≥rsi°í˚_ch™ges
++;

438  
	`db__mesßge_wrôe_öÊight_out_œã°
(
c⁄ãxt
);

439 
	}
}

441 
	$db__mesßge_ö£π
(
mosquôto
 *
c⁄ãxt
, 
uöt16_t
 
mid
, 
mosquôto_msg_dúe˘i⁄
 
dú
, 
uöt8_t
 
qos
, 
boﬁ
 
ªèö
, 
mosquôto_msg_°‹e
 *
°‹ed
, 
mosquôto_¥›îty
 *
¥›îtõs
, boﬁ 
upd©e
)

443 
mosquôto_˛õ¡_msg
 *
msg
;

444 
mosquôto_msg_d©a
 *
msg_d©a
;

445 
mosquôto_msg_°©e
 
°©e
 = 
mosq_ms_övÆid
;

446 
rc
 = 0;

447 
i
;

448 **
de°_ids
;

450 
	`as£π
(
°‹ed
);

451 if(!
c⁄ãxt
Ë 
MOSQ_ERR_INVAL
;

452 if(!
c⁄ãxt
->
id
Ë 
MOSQ_ERR_SUCCESS
;

454 if(
dú
 =
mosq_md_out
){

455 
msg_d©a
 = &
c⁄ãxt
->
msgs_out
;

457 
msg_d©a
 = &
c⁄ãxt
->
msgs_ö
;

467 if(
c⁄ãxt
->
¥Ÿocﬁ
 !
mosq_p_mqâ5


468 && 
db
.
c⁄fig
->
Ælow_du∂iˇã_mesßges
 =
Ál£


469 && 
dú
 =
mosq_md_out
 && 
ªèö
 =
Ál£
 && 
°‹ed
->
de°_ids
){

471 
i
=0; i<
°‹ed
->
de°_id_cou¡
; i++){

472 if(
°‹ed
->
de°_ids
[
i
] && !
	`°rcmp
(°‹ed->de°_ids[i], 
c⁄ãxt
->
id
)){

474 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

475  
MOSQ_ERR_SUCCESS
;

479 if(
c⁄ãxt
->
sock
 =
INVALID_SOCKET
){

481 if(
qos
 =0 && !
db
.
c⁄fig
->
queue_qos0_mesßges
){

482 if(!
c⁄ãxt
->
bridge
){

483 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

486 if(
c⁄ãxt
->
bridge
->
°¨t_ty≥
 !
b°_œzy
){

487 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

492 if(
c⁄ãxt
->
bridge
 && c⁄ãxt->bridge->
˛ón_°¨t_loˇl
 =
åue
){

493 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

498 if(
c⁄ãxt
->
sock
 !
INVALID_SOCKET
){

499 if(
	`db__ªady_f‹_Êight
(
c⁄ãxt
, 
dú
, 
qos
)){

500 if(
dú
 =
mosq_md_out
){

501 
qos
){

503 
°©e
 = 
mosq_ms_publish_qos0
;

506 
°©e
 = 
mosq_ms_publish_qos1
;

509 
°©e
 = 
mosq_ms_publish_qos2
;

513 if(
qos
 == 2){

514 
°©e
 = 
mosq_ms_waô_f‹_pubªl
;

516 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

520 }if(
qos
 !0 && 
	`db__ªady_f‹_queue
(
c⁄ãxt
, qos, 
msg_d©a
)){

521 
°©e
 = 
mosq_ms_queued
;

522 
rc
 = 2;

525 if(
c⁄ãxt
->
is_dr›pög
 =
Ál£
){

526 
c⁄ãxt
->
is_dr›pög
 = 
åue
;

527 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
,

529 
c⁄ãxt
->
id
);

531 
	`G_MSGS_DROPPED_INC
();

532 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

536 i‡(
	`db__ªady_f‹_queue
(
c⁄ãxt
, 
qos
, 
msg_d©a
)){

537 
°©e
 = 
mosq_ms_queued
;

539 
	`G_MSGS_DROPPED_INC
();

540 if(
c⁄ãxt
->
is_dr›pög
 =
Ál£
){

541 
c⁄ãxt
->
is_dr›pög
 = 
åue
;

542 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
,

544 
c⁄ãxt
->
id
);

546 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

550 
	`as£π
(
°©e
 !
mosq_ms_övÆid
);

552 #ifde‡
WITH_PERSISTENCE


553 if(
°©e
 =
mosq_ms_queued
){

554 
db
.
≥rsi°í˚_ch™ges
++;

558 
msg
 = 
	`mosquôto__mÆloc
((
mosquôto_˛õ¡_msg
));

559 if(!
msg
Ë 
MOSQ_ERR_NOMEM
;

560 
msg
->
¥ev
 = 
NULL
;

561 
msg
->
√xt
 = 
NULL
;

562 
msg
->
°‹e
 = 
°‹ed
;

563 
	`db__msg_°‹e_ªf_öc
(
msg
->
°‹e
);

564 
msg
->
mid
 = mid;

565 
msg
->
time°amp
 = 
db
.
now_s
;

566 
msg
->
dúe˘i⁄
 = 
dú
;

567 
msg
->
°©e
 = state;

568 
msg
->
dup
 = 
Ál£
;

569 if(
qos
 > 
c⁄ãxt
->
max_qos
){

570 
msg
->
qos
 = 
c⁄ãxt
->
max_qos
;

572 
msg
->
qos
 = qos;

574 
msg
->
ªèö
 =Ñetain;

575 
msg
->
¥›îtõs
 =Öroperties;

577 if(
°©e
 =
mosq_ms_queued
){

578 
	`DL_APPEND
(
msg_d©a
->
queued
, 
msg
);

579 
	`db__msg_add_to_queued_°©s
(
msg_d©a
, 
msg
);

581 
	`DL_APPEND
(
msg_d©a
->
öÊight
, 
msg
);

582 
	`db__msg_add_to_öÊight_°©s
(
msg_d©a
, 
msg
);

585 if(
db
.
c⁄fig
->
Ælow_du∂iˇã_mesßges
 =
Ál£
 && 
dú
 =
mosq_md_out
 && 
ªèö
 == false){

593 
de°_ids
 = 
	`mosquôto__ªÆloc
(
°‹ed
->de°_ids, (*)*(
size_t
)(°‹ed->
de°_id_cou¡
+1));

594 if(
de°_ids
){

595 
°‹ed
->
de°_ids
 = dest_ids;

596 
°‹ed
->
de°_id_cou¡
++;

597 
°‹ed
->
de°_ids
[°‹ed->
de°_id_cou¡
-1] = 
	`mosquôto__°rdup
(
c⁄ãxt
->
id
);

598 if(!
°‹ed
->
de°_ids
[°‹ed->
de°_id_cou¡
-1]){

599  
MOSQ_ERR_NOMEM
;

602  
MOSQ_ERR_NOMEM
;

605 #ifde‡
WITH_BRIDGE


606 if(
c⁄ãxt
->
bridge
 && c⁄ãxt->bridge->
°¨t_ty≥
 =
b°_œzy


607 && 
c⁄ãxt
->
sock
 =
INVALID_SOCKET


608 && 
c⁄ãxt
->
msgs_out
.
öÊight_cou¡
 + c⁄ãxt->msgs_out.
queued_cou¡
 >c⁄ãxt->
bridge
->
thªshﬁd
){

610 
c⁄ãxt
->
bridge
->
œzy_ªc⁄√˘
 = 
åue
;

614 if(
dú
 =
mosq_md_out
 && 
msg
->
qos
 > 0 && 
°©e
 !
mosq_ms_queued
){

615 
	`utû__de¸emít_£nd_quŸa
(
c⁄ãxt
);

618 if(
dú
 =
mosq_md_out
 && 
upd©e
){

619 
rc
 = 
	`db__mesßge_wrôe_öÊight_out_œã°
(
c⁄ãxt
);

620 if(
rc
) Ñc;

621 
rc
 = 
	`db__mesßge_wrôe_queued_out
(
c⁄ãxt
);

622 if(
rc
) Ñc;

625  
rc
;

626 
	}
}

628 
	$db__mesßge_upd©e_outgoög
(
mosquôto
 *
c⁄ãxt
, 
uöt16_t
 
mid
, 
mosquôto_msg_°©e
 
°©e
, 
qos
)

630 
mosquôto_˛õ¡_msg
 *
èû
;

632 
	`DL_FOREACH
(
c⁄ãxt
->
msgs_out
.
öÊight
, 
èû
){

633 if(
èû
->
mid
 == mid){

634 if(
èû
->
qos
 != qos){

635  
MOSQ_ERR_PROTOCOL
;

637 
èû
->
°©e
 = state;

638 
èû
->
time°amp
 = 
db
.
now_s
;

639  
MOSQ_ERR_SUCCESS
;

642  
MOSQ_ERR_NOT_FOUND
;

643 
	}
}

646 
	$db__mesßges_dñëe_li°
(
mosquôto_˛õ¡_msg
 **
hód
)

648 
mosquôto_˛õ¡_msg
 *
èû
, *
tmp
;

650 
	`DL_FOREACH_SAFE
(*
hód
, 
èû
, 
tmp
){

651 
	`DL_DELETE
(*
hód
, 
èû
);

652 
	`db__msg_°‹e_ªf_dec
(&
èû
->
°‹e
);

653 
	`mosquôto_¥›îty_‰ì_Æl
(&
èû
->
¥›îtõs
);

654 
	`mosquôto__‰ì
(
èû
);

656 *
hód
 = 
NULL
;

657 
	}
}

660 
	$db__mesßges_dñëe
(
mosquôto
 *
c⁄ãxt
, 
boﬁ
 
f‹˚_‰ì
)

662 if(!
c⁄ãxt
Ë 
MOSQ_ERR_INVAL
;

664 if(
f‹˚_‰ì
 || 
c⁄ãxt
->
˛ón_°¨t
 || (c⁄ãxt->
bridge
 && context->bridge->clean_start)){

665 
	`db__mesßges_dñëe_li°
(&
c⁄ãxt
->
msgs_ö
.
öÊight
);

666 
	`db__mesßges_dñëe_li°
(&
c⁄ãxt
->
msgs_ö
.
queued
);

667 
c⁄ãxt
->
msgs_ö
.
öÊight_byãs
 = 0;

668 
c⁄ãxt
->
msgs_ö
.
öÊight_byãs12
 = 0;

669 
c⁄ãxt
->
msgs_ö
.
öÊight_cou¡
 = 0;

670 
c⁄ãxt
->
msgs_ö
.
öÊight_cou¡12
 = 0;

671 
c⁄ãxt
->
msgs_ö
.
queued_byãs
 = 0;

672 
c⁄ãxt
->
msgs_ö
.
queued_byãs12
 = 0;

673 
c⁄ãxt
->
msgs_ö
.
queued_cou¡
 = 0;

674 
c⁄ãxt
->
msgs_ö
.
queued_cou¡12
 = 0;

677 if(
f‹˚_‰ì
 || (
c⁄ãxt
->
bridge
 && c⁄ãxt->bridge->
˛ón_°¨t_loˇl
)

678 || (
c⁄ãxt
->
bridge
 =
NULL
 && c⁄ãxt->
˛ón_°¨t
)){

680 
	`db__mesßges_dñëe_li°
(&
c⁄ãxt
->
msgs_out
.
öÊight
);

681 
	`db__mesßges_dñëe_li°
(&
c⁄ãxt
->
msgs_out
.
queued
);

682 
c⁄ãxt
->
msgs_out
.
öÊight_byãs
 = 0;

683 
c⁄ãxt
->
msgs_out
.
öÊight_byãs12
 = 0;

684 
c⁄ãxt
->
msgs_out
.
öÊight_cou¡
 = 0;

685 
c⁄ãxt
->
msgs_out
.
öÊight_cou¡12
 = 0;

686 
c⁄ãxt
->
msgs_out
.
queued_byãs
 = 0;

687 
c⁄ãxt
->
msgs_out
.
queued_byãs12
 = 0;

688 
c⁄ãxt
->
msgs_out
.
queued_cou¡
 = 0;

689 
c⁄ãxt
->
msgs_out
.
queued_cou¡12
 = 0;

692  
MOSQ_ERR_SUCCESS
;

693 
	}
}

695 
	$db__mesßges_ósy_queue
(
mosquôto
 *
c⁄ãxt
, c⁄° *
t›ic
, 
uöt8_t
 
qos
, 
uöt32_t
 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
ªèö
, uöt32_à
mesßge_expúy_öãrvÆ
, 
mosquôto_¥›îty
 **
¥›îtõs
)

697 
mosquôto_msg_°‹e
 *
°‹ed
;

698 c⁄° *
sour˚_id
;

699 
mosquôto_msg_‹igö
 
‹igö
;

701 if(!
t›ic
Ë 
MOSQ_ERR_INVAL
;

703 
°‹ed
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_msg_°‹e
));

704 if(
°‹ed
 =
NULL
Ë 
MOSQ_ERR_NOMEM
;

706 
°‹ed
->
t›ic
 = 
	`mosquôto__°rdup
(topic);

707 if(
°‹ed
->
t›ic
 =
NULL
){

708 
	`db__msg_°‹e_‰ì
(
°‹ed
);

709  
MOSQ_ERR_INVAL
;

712 
°‹ed
->
qos
 = qos;

713 if(
db
.
c⁄fig
->
ªèö_avaûabÀ
 =
Ál£
){

714 
°‹ed
->
ªèö
 = 0;

716 
°‹ed
->
ªèö
 =Ñetain;

719 
°‹ed
->
∑ylﬂdÀn
 =Öayloadlen;

720 
°‹ed
->
∑ylﬂd
 = 
	`mosquôto__mÆloc
(°‹ed->
∑ylﬂdÀn
+1);

721 if(
°‹ed
->
∑ylﬂd
 =
NULL
){

722 
	`db__msg_°‹e_‰ì
(
°‹ed
);

723  
MOSQ_ERR_NOMEM
;

726 ((
uöt8_t
 *)
°‹ed
->
∑ylﬂd
)[°‹ed->
∑ylﬂdÀn
] = 0;

727 
	`mem˝y
(
°‹ed
->
∑ylﬂd
,Öaylﬂd, st‹ed->
∑ylﬂdÀn
);

729 if(
c⁄ãxt
 && c⁄ãxt->
id
){

730 
sour˚_id
 = 
c⁄ãxt
->
id
;

732 
sour˚_id
 = "";

734 if(
¥›îtõs
){

735 
°‹ed
->
¥›îtõs
 = *properties;

736 *
¥›îtõs
 = 
NULL
;

739 if(
c⁄ãxt
){

740 
‹igö
 = 
mosq_mo_˛õ¡
;

742 
‹igö
 = 
mosq_mo_brokî
;

744 if(
	`db__mesßge_°‹e
(
c⁄ãxt
, 
°‹ed
, 
mesßge_expúy_öãrvÆ
, 0, 
‹igö
))  1;

746  
	`sub__mesßges_queue
(
sour˚_id
, 
°‹ed
->
t›ic
, st‹ed->
qos
, st‹ed->
ªèö
, &stored);

747 
	}
}

750 
	$db__mesßge_°‹e
(c⁄° 
mosquôto
 *
sour˚
, 
mosquôto_msg_°‹e
 *
°‹ed
, 
uöt32_t
 
mesßge_expúy_öãrvÆ
, 
dbid_t
 
°‹e_id
, 
mosquôto_msg_‹igö
 
‹igö
)

752 
	`as£π
(
°‹ed
);

754 if(
sour˚
 && sour˚->
id
){

755 
°‹ed
->
sour˚_id
 = 
	`mosquôto__°rdup
(
sour˚
->
id
);

757 
°‹ed
->
sour˚_id
 = 
	`mosquôto__°rdup
("");

759 if(!
°‹ed
->
sour˚_id
){

760 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

761 
	`db__msg_°‹e_‰ì
(
°‹ed
);

762  
MOSQ_ERR_NOMEM
;

765 if(
sour˚
 && sour˚->
u£∫ame
){

766 
°‹ed
->
sour˚_u£∫ame
 = 
	`mosquôto__°rdup
(
sour˚
->
u£∫ame
);

767 if(!
°‹ed
->
sour˚_u£∫ame
){

768 
	`db__msg_°‹e_‰ì
(
°‹ed
);

769  
MOSQ_ERR_NOMEM
;

772 if(
sour˚
){

773 
°‹ed
->
sour˚_li°íî
 = 
sour˚
->
li°íî
;

775 
°‹ed
->
mid
 = 0;

776 
°‹ed
->
‹igö
 = origin;

777 if(
mesßge_expúy_öãrvÆ
 > 0){

778 
°‹ed
->
mesßge_expúy_time
 = 
db
.
now_ªÆ_s
 + 
mesßge_expúy_öãrvÆ
;

780 
°‹ed
->
mesßge_expúy_time
 = 0;

783 
°‹ed
->
de°_ids
 = 
NULL
;

784 
°‹ed
->
de°_id_cou¡
 = 0;

785 
db
.
msg_°‹e_cou¡
++;

786 
db
.
msg_°‹e_byãs
 +
°‹ed
->
∑ylﬂdÀn
;

788 if(!
°‹e_id
){

789 
°‹ed
->
db_id
 = ++
db
.
œ°_db_id
;

791 
°‹ed
->
db_id
 = 
°‹e_id
;

794 
	`db__msg_°‹e_add
(
°‹ed
);

796  
MOSQ_ERR_SUCCESS
;

797 
	}
}

799 
	$db__mesßge_°‹e_föd
(
mosquôto
 *
c⁄ãxt
, 
uöt16_t
 
mid
, 
mosquôto_msg_°‹e
 **
°‹ed
)

801 
mosquôto_˛õ¡_msg
 *
èû
;

803 if(!
c⁄ãxt
Ë 
MOSQ_ERR_INVAL
;

805 *
°‹ed
 = 
NULL
;

806 
	`DL_FOREACH
(
c⁄ãxt
->
msgs_ö
.
öÊight
, 
èû
){

807 if(
èû
->
°‹e
->
sour˚_mid
 =
mid
){

808 *
°‹ed
 = 
èû
->
°‹e
;

809  
MOSQ_ERR_SUCCESS
;

813 
	`DL_FOREACH
(
c⁄ãxt
->
msgs_ö
.
queued
, 
èû
){

814 if(
èû
->
°‹e
->
sour˚_mid
 =
mid
){

815 *
°‹ed
 = 
èû
->
°‹e
;

816  
MOSQ_ERR_SUCCESS
;

821 
	}
}

825 
	$db__mesßge_ªc⁄√˘_ª£t_outgoög
(
mosquôto
 *
c⁄ãxt
)

827 
mosquôto_˛õ¡_msg
 *
msg
, *
tmp
;

829 
c⁄ãxt
->
msgs_out
.
öÊight_byãs
 = 0;

830 
c⁄ãxt
->
msgs_out
.
öÊight_byãs12
 = 0;

831 
c⁄ãxt
->
msgs_out
.
öÊight_cou¡
 = 0;

832 
c⁄ãxt
->
msgs_out
.
öÊight_cou¡12
 = 0;

833 
c⁄ãxt
->
msgs_out
.
queued_byãs
 = 0;

834 
c⁄ãxt
->
msgs_out
.
queued_byãs12
 = 0;

835 
c⁄ãxt
->
msgs_out
.
queued_cou¡
 = 0;

836 
c⁄ãxt
->
msgs_out
.
queued_cou¡12
 = 0;

837 
c⁄ãxt
->
msgs_out
.
öÊight_quŸa
 = c⁄ãxt->msgs_out.
öÊight_maximum
;

839 
	`DL_FOREACH_SAFE
(
c⁄ãxt
->
msgs_out
.
öÊight
, 
msg
, 
tmp
){

840 
	`db__msg_add_to_öÊight_°©s
(&
c⁄ãxt
->
msgs_out
, 
msg
);

841 if(
msg
->
qos
 > 0){

842 
	`utû__de¸emít_£nd_quŸa
(
c⁄ãxt
);

845 
msg
->
qos
){

847 
msg
->
°©e
 = 
mosq_ms_publish_qos0
;

850 
msg
->
°©e
 = 
mosq_ms_publish_qos1
;

853 if(
msg
->
°©e
 =
mosq_ms_waô_f‹_pubcomp
){

854 
msg
->
°©e
 = 
mosq_ms_ª£nd_pubªl
;

856 
msg
->
°©e
 = 
mosq_ms_publish_qos2
;

867 
	`DL_FOREACH_SAFE
(
c⁄ãxt
->
msgs_out
.
queued
, 
msg
, 
tmp
){

868 
	`db__msg_add_to_queued_°©s
(&
c⁄ãxt
->
msgs_out
, 
msg
);

869 if(
	`db__ªady_f‹_Êight
(
c⁄ãxt
, 
mosq_md_out
, 
msg
->
qos
)){

870 
msg
->
qos
){

872 
msg
->
°©e
 = 
mosq_ms_publish_qos0
;

875 
msg
->
°©e
 = 
mosq_ms_publish_qos1
;

878 
msg
->
°©e
 = 
mosq_ms_publish_qos2
;

881 
	`db__mesßge_dequeue_fú°
(
c⁄ãxt
, &c⁄ãxt->
msgs_out
);

885  
MOSQ_ERR_SUCCESS
;

886 
	}
}

890 
	$db__mesßge_ªc⁄√˘_ª£t_öcomög
(
mosquôto
 *
c⁄ãxt
)

892 
mosquôto_˛õ¡_msg
 *
msg
, *
tmp
;

894 
c⁄ãxt
->
msgs_ö
.
öÊight_byãs
 = 0;

895 
c⁄ãxt
->
msgs_ö
.
öÊight_byãs12
 = 0;

896 
c⁄ãxt
->
msgs_ö
.
öÊight_cou¡
 = 0;

897 
c⁄ãxt
->
msgs_ö
.
öÊight_cou¡12
 = 0;

898 
c⁄ãxt
->
msgs_ö
.
queued_byãs
 = 0;

899 
c⁄ãxt
->
msgs_ö
.
queued_byãs12
 = 0;

900 
c⁄ãxt
->
msgs_ö
.
queued_cou¡
 = 0;

901 
c⁄ãxt
->
msgs_ö
.
queued_cou¡12
 = 0;

902 
c⁄ãxt
->
msgs_ö
.
öÊight_quŸa
 = c⁄ãxt->msgs_ö.
öÊight_maximum
;

904 
	`DL_FOREACH_SAFE
(
c⁄ãxt
->
msgs_ö
.
öÊight
, 
msg
, 
tmp
){

905 
	`db__msg_add_to_öÊight_°©s
(&
c⁄ãxt
->
msgs_ö
, 
msg
);

906 if(
msg
->
qos
 > 0){

907 
	`utû__de¸emít_ª˚ive_quŸa
(
c⁄ãxt
);

910 if(
msg
->
qos
 != 2){

913 
	`db__mesßge_ªmove_‰om_öÊight
(&
c⁄ãxt
->
msgs_ö
, 
msg
);

926 
	`DL_FOREACH_SAFE
(
c⁄ãxt
->
msgs_ö
.
queued
, 
msg
, 
tmp
){

927 
	`db__msg_add_to_queued_°©s
(&
c⁄ãxt
->
msgs_ö
, 
msg
);

928 if(
	`db__ªady_f‹_Êight
(
c⁄ãxt
, 
mosq_md_ö
, 
msg
->
qos
)){

929 
msg
->
qos
){

931 
msg
->
°©e
 = 
mosq_ms_publish_qos0
;

934 
msg
->
°©e
 = 
mosq_ms_publish_qos1
;

937 
msg
->
°©e
 = 
mosq_ms_publish_qos2
;

940 
	`db__mesßge_dequeue_fú°
(
c⁄ãxt
, &c⁄ãxt->
msgs_ö
);

944  
MOSQ_ERR_SUCCESS
;

945 
	}
}

948 
	$db__mesßge_ªc⁄√˘_ª£t
(
mosquôto
 *
c⁄ãxt
)

950 
rc
;

952 
rc
 = 
	`db__mesßge_ªc⁄√˘_ª£t_outgoög
(
c⁄ãxt
);

953 if(
rc
) Ñc;

954  
	`db__mesßge_ªc⁄√˘_ª£t_öcomög
(
c⁄ãxt
);

955 
	}
}

958 
	$db__mesßge_ªmove_öcomög
(
mosquôto
* 
c⁄ãxt
, 
uöt16_t
 
mid
)

960 
mosquôto_˛õ¡_msg
 *
èû
, *
tmp
;

962 if(!
c⁄ãxt
Ë 
MOSQ_ERR_INVAL
;

964 
	`DL_FOREACH_SAFE
(
c⁄ãxt
->
msgs_ö
.
öÊight
, 
èû
, 
tmp
){

965 if(
èû
->
mid
 == mid) {

966 if(
èû
->
°‹e
->
qos
 != 2){

967  
MOSQ_ERR_PROTOCOL
;

969 
	`db__mesßge_ªmove_‰om_öÊight
(&
c⁄ãxt
->
msgs_ö
, 
èû
);

970  
MOSQ_ERR_SUCCESS
;

974  
MOSQ_ERR_NOT_FOUND
;

975 
	}
}

978 
	$db__mesßge_ªÀa£_öcomög
(
mosquôto
 *
c⁄ãxt
, 
uöt16_t
 
mid
)

980 
mosquôto_˛õ¡_msg
 *
èû
, *
tmp
;

981 
ªèö
;

982 *
t›ic
;

983 *
sour˚_id
;

984 
msg_ödex
 = 0;

985 
boﬁ
 
dñëed
 = 
Ál£
;

986 
rc
;

988 if(!
c⁄ãxt
Ë 
MOSQ_ERR_INVAL
;

990 
	`DL_FOREACH_SAFE
(
c⁄ãxt
->
msgs_ö
.
öÊight
, 
èû
, 
tmp
){

991 
msg_ödex
++;

992 if(
èû
->
mid
 == mid){

993 if(
èû
->
°‹e
->
qos
 != 2){

994  
MOSQ_ERR_PROTOCOL
;

996 
t›ic
 = 
èû
->
°‹e
->topic;

997 
ªèö
 = 
èû
->retain;

998 
sour˚_id
 = 
èû
->
°‹e
->source_id;

1004 if(
t›ic
 =
NULL
){

1005 
	`db__mesßge_ªmove_‰om_öÊight
(&
c⁄ãxt
->
msgs_ö
, 
èû
);

1006 
dñëed
 = 
åue
;

1008 
rc
 = 
	`sub__mesßges_queue
(
sour˚_id
, 
t›ic
, 2, 
ªèö
, &
èû
->
°‹e
);

1009 if(
rc
 =
MOSQ_ERR_SUCCESS
 ||Ñ¯=
MOSQ_ERR_NO_SUBSCRIBERS
){

1010 
	`db__mesßge_ªmove_‰om_öÊight
(&
c⁄ãxt
->
msgs_ö
, 
èû
);

1011 
dñëed
 = 
åue
;

1019 
	`DL_FOREACH_SAFE
(
c⁄ãxt
->
msgs_ö
.
queued
, 
èû
, 
tmp
){

1020 if(
	`db__ªady_f‹_Êight
(
c⁄ãxt
, 
mosq_md_ö
, 
èû
->
qos
)){

1024 
msg_ödex
++;

1025 
èû
->
time°amp
 = 
db
.
now_s
;

1027 if(
èû
->
qos
 == 2){

1028 
	`£nd__pubªc
(
c⁄ãxt
, 
èû
->
mid
, 0, 
NULL
);

1029 
èû
->
°©e
 = 
mosq_ms_waô_f‹_pubªl
;

1030 
	`db__mesßge_dequeue_fú°
(
c⁄ãxt
, &c⁄ãxt->
msgs_ö
);

1033 if(
dñëed
){

1034  
MOSQ_ERR_SUCCESS
;

1036  
MOSQ_ERR_NOT_FOUND
;

1038 
	}
}

1041 
	$db__expúe_Æl_mesßges
(
mosquôto
 *
c⁄ãxt
)

1043 
mosquôto_˛õ¡_msg
 *
msg
, *
tmp
;

1045 
	`DL_FOREACH_SAFE
(
c⁄ãxt
->
msgs_out
.
öÊight
, 
msg
, 
tmp
){

1046 if(
msg
->
°‹e
->
mesßge_expúy_time
 && 
db
.
now_ªÆ_s
 > msg->store->message_expiry_time){

1047 if(
msg
->
qos
 > 0){

1048 
	`utû__ö¸emít_£nd_quŸa
(
c⁄ãxt
);

1050 
	`db__mesßge_ªmove_‰om_öÊight
(&
c⁄ãxt
->
msgs_out
, 
msg
);

1053 
	`DL_FOREACH_SAFE
(
c⁄ãxt
->
msgs_out
.
queued
, 
msg
, 
tmp
){

1054 if(
msg
->
°‹e
->
mesßge_expúy_time
 && 
db
.
now_ªÆ_s
 > msg->store->message_expiry_time){

1055 
	`db__mesßge_ªmove_‰om_queued
(&
c⁄ãxt
->
msgs_out
, 
msg
);

1058 
	`DL_FOREACH_SAFE
(
c⁄ãxt
->
msgs_ö
.
öÊight
, 
msg
, 
tmp
){

1059 if(
msg
->
°‹e
->
mesßge_expúy_time
 && 
db
.
now_ªÆ_s
 > msg->store->message_expiry_time){

1060 if(
msg
->
qos
 > 0){

1061 
	`utû__ö¸emít_ª˚ive_quŸa
(
c⁄ãxt
);

1063 
	`db__mesßge_ªmove_‰om_öÊight
(&
c⁄ãxt
->
msgs_ö
, 
msg
);

1066 
	`DL_FOREACH_SAFE
(
c⁄ãxt
->
msgs_ö
.
queued
, 
msg
, 
tmp
){

1067 if(
msg
->
°‹e
->
mesßge_expúy_time
 && 
db
.
now_ªÆ_s
 > msg->store->message_expiry_time){

1068 
	`db__mesßge_ªmove_‰om_queued
(&
c⁄ãxt
->
msgs_ö
, 
msg
);

1071 
	}
}

1074 
	$db__mesßge_wrôe_öÊight_out_sögÀ
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_˛õ¡_msg
 *
msg
)

1076 
mosquôto_¥›îty
 *
cmsg_¥›s
 = 
NULL
, *
°‹e_¥›s
 = NULL;

1077 
rc
;

1078 
uöt16_t
 
mid
;

1079 
ªåõs
;

1080 
ªèö
;

1081 c⁄° *
t›ic
;

1082 
uöt8_t
 
qos
;

1083 
uöt32_t
 
∑ylﬂdÀn
;

1084 c⁄° *
∑ylﬂd
;

1085 
uöt32_t
 
expúy_öãrvÆ
;

1087 
expúy_öãrvÆ
 = 0;

1088 if(
msg
->
°‹e
->
mesßge_expúy_time
){

1089 if(
db
.
now_ªÆ_s
 > 
msg
->
°‹e
->
mesßge_expúy_time
){

1091 if(
msg
->
dúe˘i⁄
 =
mosq_md_out
 && msg->
qos
 > 0){

1092 
	`utû__ö¸emít_£nd_quŸa
(
c⁄ãxt
);

1094 
	`db__mesßge_ªmove_‰om_öÊight
(&
c⁄ãxt
->
msgs_out
, 
msg
);

1095  
MOSQ_ERR_SUCCESS
;

1097 
expúy_öãrvÆ
 = (
uöt32_t
)(
msg
->
°‹e
->
mesßge_expúy_time
 - 
db
.
now_ªÆ_s
);

1100 
mid
 = 
msg
->mid;

1101 
ªåõs
 = 
msg
->
dup
;

1102 
ªèö
 = 
msg
->retain;

1103 
t›ic
 = 
msg
->
°‹e
->topic;

1104 
qos
 = (
uöt8_t
)
msg
->qos;

1105 
∑ylﬂdÀn
 = 
msg
->
°‹e
->payloadlen;

1106 
∑ylﬂd
 = 
msg
->
°‹e
->payload;

1107 
cmsg_¥›s
 = 
msg
->
¥›îtõs
;

1108 
°‹e_¥›s
 = 
msg
->
°‹e
->
¥›îtõs
;

1110 
msg
->
°©e
){

1111 
mosq_ms_publish_qos0
:

1112 
rc
 = 
	`£nd__publish
(
c⁄ãxt
, 
mid
, 
t›ic
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
, 
ªåõs
, 
cmsg_¥›s
, 
°‹e_¥›s
, 
expúy_öãrvÆ
);

1113 if(
rc
 =
MOSQ_ERR_SUCCESS
 ||Ñ¯=
MOSQ_ERR_OVERSIZE_PACKET
){

1114 
	`db__mesßge_ªmove_‰om_öÊight
(&
c⁄ãxt
->
msgs_out
, 
msg
);

1116  
rc
;

1120 
mosq_ms_publish_qos1
:

1121 
rc
 = 
	`£nd__publish
(
c⁄ãxt
, 
mid
, 
t›ic
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
, 
ªåõs
, 
cmsg_¥›s
, 
°‹e_¥›s
, 
expúy_öãrvÆ
);

1122 if(
rc
 =
MOSQ_ERR_SUCCESS
){

1123 
msg
->
time°amp
 = 
db
.
now_s
;

1124 
msg
->
dup
 = 1;

1125 
msg
->
°©e
 = 
mosq_ms_waô_f‹_puback
;

1126 }if(
rc
 =
MOSQ_ERR_OVERSIZE_PACKET
){

1127 
	`db__mesßge_ªmove_‰om_öÊight
(&
c⁄ãxt
->
msgs_out
, 
msg
);

1129  
rc
;

1133 
mosq_ms_publish_qos2
:

1134 
rc
 = 
	`£nd__publish
(
c⁄ãxt
, 
mid
, 
t›ic
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
, 
ªåõs
, 
cmsg_¥›s
, 
°‹e_¥›s
, 
expúy_öãrvÆ
);

1135 if(
rc
 =
MOSQ_ERR_SUCCESS
){

1136 
msg
->
time°amp
 = 
db
.
now_s
;

1137 
msg
->
dup
 = 1;

1138 
msg
->
°©e
 = 
mosq_ms_waô_f‹_pubªc
;

1139 }if(
rc
 =
MOSQ_ERR_OVERSIZE_PACKET
){

1140 
	`db__mesßge_ªmove_‰om_öÊight
(&
c⁄ãxt
->
msgs_out
, 
msg
);

1142  
rc
;

1146 
mosq_ms_ª£nd_pubªl
:

1147 
rc
 = 
	`£nd__pubªl
(
c⁄ãxt
, 
mid
, 
NULL
);

1148 if(!
rc
){

1149 
msg
->
°©e
 = 
mosq_ms_waô_f‹_pubcomp
;

1151  
rc
;

1155 
mosq_ms_övÆid
:

1156 
mosq_ms_£nd_pubªc
:

1157 
mosq_ms_ª£nd_pubcomp
:

1158 
mosq_ms_waô_f‹_puback
:

1159 
mosq_ms_waô_f‹_pubªc
:

1160 
mosq_ms_waô_f‹_pubªl
:

1161 
mosq_ms_waô_f‹_pubcomp
:

1162 
mosq_ms_queued
:

1165  
MOSQ_ERR_SUCCESS
;

1166 
	}
}

1169 
	$db__mesßge_wrôe_öÊight_out_Æl
(
mosquôto
 *
c⁄ãxt
)

1171 
mosquôto_˛õ¡_msg
 *
èû
, *
tmp
;

1172 
rc
;

1174 if(
c⁄ãxt
->
°©e
 !
mosq_cs_a˘ive
 || c⁄ãxt->
sock
 =
INVALID_SOCKET
){

1175  
MOSQ_ERR_SUCCESS
;

1178 
	`DL_FOREACH_SAFE
(
c⁄ãxt
->
msgs_out
.
öÊight
, 
èû
, 
tmp
){

1179 
rc
 = 
	`db__mesßge_wrôe_öÊight_out_sögÀ
(
c⁄ãxt
, 
èû
);

1180 if(
rc
) Ñc;

1182  
MOSQ_ERR_SUCCESS
;

1183 
	}
}

1186 
	$db__mesßge_wrôe_öÊight_out_œã°
(
mosquôto
 *
c⁄ãxt
)

1188 
mosquôto_˛õ¡_msg
 *
èû
, *
√xt
;

1189 
rc
;

1191 if(
c⁄ãxt
->
°©e
 !
mosq_cs_a˘ive


1192 || 
c⁄ãxt
->
sock
 =
INVALID_SOCKET


1193 || 
c⁄ãxt
->
msgs_out
.
öÊight
 =
NULL
){

1195  
MOSQ_ERR_SUCCESS
;

1198 if(
c⁄ãxt
->
msgs_out
.
öÊight
->
¥ev
 == context->msgs_out.inflight){

1200  
	`db__mesßge_wrôe_öÊight_out_sögÀ
(
c⁄ãxt
, c⁄ãxt->
msgs_out
.
öÊight
);

1205 
èû
 = 
c⁄ãxt
->
msgs_out
.
öÊight
->
¥ev
;

1206 
èû
 !
c⁄ãxt
->
msgs_out
.
öÊight
 &&

1207 (
èû
->
°©e
 =
mosq_ms_publish_qos0


1208 || 
èû
->
°©e
 =
mosq_ms_publish_qos1


1209 || 
èû
->
°©e
 =
mosq_ms_publish_qos2
)){

1211 
èû
 =Åaû->
¥ev
;

1217 if(
èû
 !
c⁄ãxt
->
msgs_out
.
öÊight
){

1218 
èû
 =Åaû->
√xt
;

1221 
èû
){

1222 
√xt
 = 
èû
->next;

1223 
rc
 = 
	`db__mesßge_wrôe_öÊight_out_sögÀ
(
c⁄ãxt
, 
èû
);

1224 if(
rc
) Ñc;

1225 
èû
 = 
√xt
;

1227  
MOSQ_ERR_SUCCESS
;

1228 
	}
}

1231 
	$db__mesßge_wrôe_queued_ö
(
mosquôto
 *
c⁄ãxt
)

1233 
mosquôto_˛õ¡_msg
 *
èû
, *
tmp
;

1234 
rc
;

1236 if(
c⁄ãxt
->
°©e
 !
mosq_cs_a˘ive
){

1237  
MOSQ_ERR_SUCCESS
;

1240 
	`DL_FOREACH_SAFE
(
c⁄ãxt
->
msgs_ö
.
queued
, 
èû
, 
tmp
){

1241 if(
c⁄ãxt
->
msgs_ö
.
öÊight_maximum
 !0 && c⁄ãxt->msgs_ö.
öÊight_quŸa
 == 0){

1245 if(
èû
->
qos
 == 2){

1246 
èû
->
°©e
 = 
mosq_ms_£nd_pubªc
;

1247 
	`db__mesßge_dequeue_fú°
(
c⁄ãxt
, &c⁄ãxt->
msgs_ö
);

1248 
rc
 = 
	`£nd__pubªc
(
c⁄ãxt
, 
èû
->
mid
, 0, 
NULL
);

1249 if(!
rc
){

1250 
èû
->
°©e
 = 
mosq_ms_waô_f‹_pubªl
;

1252  
rc
;

1256  
MOSQ_ERR_SUCCESS
;

1257 
	}
}

1260 
	$db__mesßge_wrôe_queued_out
(
mosquôto
 *
c⁄ãxt
)

1262 
mosquôto_˛õ¡_msg
 *
èû
, *
tmp
;

1264 if(
c⁄ãxt
->
°©e
 !
mosq_cs_a˘ive
){

1265  
MOSQ_ERR_SUCCESS
;

1268 
	`DL_FOREACH_SAFE
(
c⁄ãxt
->
msgs_out
.
queued
, 
èû
, 
tmp
){

1269 if(!
	`db__ªady_f‹_Êight
(
c⁄ãxt
, 
mosq_md_out
, 
èû
->
qos
)){

1273 
èû
->
qos
){

1275 
èû
->
°©e
 = 
mosq_ms_publish_qos0
;

1278 
èû
->
°©e
 = 
mosq_ms_publish_qos1
;

1281 
èû
->
°©e
 = 
mosq_ms_publish_qos2
;

1284 
	`db__mesßge_dequeue_fú°
(
c⁄ãxt
, &c⁄ãxt->
msgs_out
);

1286  
MOSQ_ERR_SUCCESS
;

1287 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/handle_auth.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°rög.h
>

24 
	~"mosquôto_brokî_öã∫Æ.h
"

25 
	~"mqâ_¥Ÿocﬁ.h
"

26 
	~"mem‹y_mosq.h
"

27 
	~"∑ckë_mosq.h
"

28 
	~"¥›îty_mosq.h
"

29 
	~"£nd_mosq.h
"

30 
	~"utû_mosq.h
"

31 
	~"wûl_mosq.h
"

34 
	$h™dÀ__auth
(
mosquôto
 *
c⁄ãxt
)

36 
rc
 = 0;

37 
uöt8_t
 
ªas⁄_code
 = 0;

38 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

39 *
auth_mëhod
 = 
NULL
;

40 *
auth_d©a
 = 
NULL
;

41 
uöt16_t
 
auth_d©a_Àn
 = 0;

42 *
auth_d©a_out
 = 
NULL
;

43 
uöt16_t
 
auth_d©a_out_Àn
 = 0;

45 if(!
c⁄ãxt
Ë 
MOSQ_ERR_INVAL
;

47 if(
c⁄ãxt
->
¥Ÿocﬁ
 !
mosq_p_mqâ5
 || c⁄ãxt->
auth_mëhod
 =
NULL
){

48  
MOSQ_ERR_PROTOCOL
;

50 if(
c⁄ãxt
->
ö_∑ckë
.
comm™d
 !
CMD_AUTH
){

51  
MOSQ_ERR_MALFORMED_PACKET
;

54 if(
c⁄ãxt
->
ö_∑ckë
.
ªmaöög_Àngth
 > 0){

55 if(
	`∑ckë__ªad_byã
(&
c⁄ãxt
->
ö_∑ckë
, &
ªas⁄_code
)Ë 
MOSQ_ERR_MALFORMED_PACKET
;

56 if(
ªas⁄_code
 !
MQTT_RC_CONTINUE_AUTHENTICATION


57 && 
ªas⁄_code
 !
MQTT_RC_REAUTHENTICATE
){

59 
	`£nd__disc⁄√˘
(
c⁄ãxt
, 
MQTT_RC_PROTOCOL_ERROR
, 
NULL
);

60  
MOSQ_ERR_PROTOCOL
;

63 if((
ªas⁄_code
 =
MQTT_RC_REAUTHENTICATE
 && 
c⁄ãxt
->
°©e
 !
mosq_cs_a˘ive
)

64 || (
ªas⁄_code
 =
MQTT_RC_CONTINUE_AUTHENTICATION


65 && 
c⁄ãxt
->
°©e
 !
mosq_cs_authítiˇtög
 && c⁄ãxt->°©ê!
mosq_cs_ªauthítiˇtög
)){

67 
	`£nd__disc⁄√˘
(
c⁄ãxt
, 
MQTT_RC_PROTOCOL_ERROR
, 
NULL
);

68  
MOSQ_ERR_PROTOCOL
;

71 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_AUTH
, &
c⁄ãxt
->
ö_∑ckë
, &
¥›îtõs
);

72 if(
rc
){

73 
	`£nd__disc⁄√˘
(
c⁄ãxt
, 
MQTT_RC_UNSPECIFIED
, 
NULL
);

74  
rc
;

78 if(
	`mosquôto_¥›îty_ªad_°rög
(
¥›îtõs
, 
MQTT_PROP_AUTHENTICATION_METHOD
, &
auth_mëhod
, 
Ál£
Ë=
NULL
){

79 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

80 
	`£nd__disc⁄√˘
(
c⁄ãxt
, 
MQTT_RC_UNSPECIFIED
, 
NULL
);

81  
MOSQ_ERR_PROTOCOL
;

84 if(!
auth_mëhod
 || 
	`°rcmp
◊uth_mëhod, 
c⁄ãxt
->auth_method)){

86 
	`mosquôto__‰ì
(
auth_mëhod
);

87 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

88 
	`£nd__disc⁄√˘
(
c⁄ãxt
, 
MQTT_RC_PROTOCOL_ERROR
, 
NULL
);

89  
MOSQ_ERR_PROTOCOL
;

91 
	`mosquôto__‰ì
(
auth_mëhod
);

93 
	`mosquôto_¥›îty_ªad_bö¨y
(
¥›îtõs
, 
MQTT_PROP_AUTHENTICATION_DATA
, &
auth_d©a
, &
auth_d©a_Àn
, 
Ál£
);

95 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

98 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Re˚ived AUTH from %†‘c%d, %s)", 
c⁄ãxt
->
id
, 
ªas⁄_code
, c⁄ãxt->
auth_mëhod
);

101 if(
ªas⁄_code
 =
MQTT_RC_REAUTHENTICATE
){

103 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_ªauthítiˇtög
);

104 
rc
 = 
	`mosquôto_£curôy_auth_°¨t
(
c⁄ãxt
, 
åue
, 
auth_d©a
, 
auth_d©a_Àn
, &
auth_d©a_out
, &
auth_d©a_out_Àn
);

106 if(
c⁄ãxt
->
°©e
 !
mosq_cs_ªauthítiˇtög
){

107 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_authítiˇtög
);

109 
rc
 = 
	`mosquôto_£curôy_auth_c⁄töue
(
c⁄ãxt
, 
auth_d©a
, 
auth_d©a_Àn
, &
auth_d©a_out
, &
auth_d©a_out_Àn
);

111 
	`mosquôto__‰ì
(
auth_d©a
);

112 if(
rc
 =
MOSQ_ERR_SUCCESS
){

113 if(
c⁄ãxt
->
°©e
 =
mosq_cs_authítiˇtög
){

114  
	`c⁄√˘__⁄_auth‹i£d
(
c⁄ãxt
, 
auth_d©a_out
, 
auth_d©a_out_Àn
);

116 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_a˘ive
);

117 
rc
 = 
	`£nd__auth
(
c⁄ãxt
, 
MQTT_RC_SUCCESS
, 
auth_d©a_out
, 
auth_d©a_out_Àn
);

118 
	`‰ì
(
auth_d©a_out
);

119  
rc
;

121 }if(
rc
 =
MOSQ_ERR_AUTH_CONTINUE
){

122 
rc
 = 
	`£nd__auth
(
c⁄ãxt
, 
MQTT_RC_CONTINUE_AUTHENTICATION
, 
auth_d©a_out
, 
auth_d©a_out_Àn
);

123 
	`‰ì
(
auth_d©a_out
);

124  
rc
;

126 
	`‰ì
(
auth_d©a_out
);

127 if(
c⁄ãxt
->
°©e
 =
mosq_cs_authítiˇtög
 && c⁄ãxt->
wûl
){

129 
	`wûl__˛ór
(
c⁄ãxt
);

131 if(
rc
 =
MOSQ_ERR_AUTH
){

132 if(
c⁄ãxt
->
°©e
 =
mosq_cs_authítiˇtög
){

133 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_NOT_AUTHORIZED
, 
NULL
);

134 
	`mosquôto__‰ì
(
c⁄ãxt
->
id
);

135 
c⁄ãxt
->
id
 = 
NULL
;

137 
	`£nd__disc⁄√˘
(
c⁄ãxt
, 
MQTT_RC_NOT_AUTHORIZED
, 
NULL
);

139  
MOSQ_ERR_PROTOCOL
;

140 }if(
rc
 =
MOSQ_ERR_NOT_SUPPORTED
){

142 if(
c⁄ãxt
->
°©e
 =
mosq_cs_authítiˇtög
){

143 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_BAD_AUTHENTICATION_METHOD
, 
NULL
);

144 
	`mosquôto__‰ì
(
c⁄ãxt
->
id
);

145 
c⁄ãxt
->
id
 = 
NULL
;

147 
	`£nd__disc⁄√˘
(
c⁄ãxt
, 
MQTT_RC_BAD_AUTHENTICATION_METHOD
, 
NULL
);

149  
MOSQ_ERR_PROTOCOL
;

151 if(
c⁄ãxt
->
°©e
 =
mosq_cs_authítiˇtög
){

152 
	`mosquôto__‰ì
(
c⁄ãxt
->
id
);

153 
c⁄ãxt
->
id
 = 
NULL
;

155  
rc
;

158 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/handle_connack.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°rög.h
>

24 
	~"mosquôto_brokî_öã∫Æ.h
"

25 
	~"mem‹y_mosq.h
"

26 
	~"mqâ_¥Ÿocﬁ.h
"

27 
	~"∑ckë_mosq.h
"

28 
	~"£nd_mosq.h
"

29 
	~"utû_mosq.h
"

31 
	$h™dÀ__c⁄«ck
(
mosquôto
 *
c⁄ãxt
)

33 
rc
;

34 
uöt8_t
 
c⁄√˘_acknowÀdge
;

35 
uöt8_t
 
ªas⁄_code
;

36 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

37 
uöt32_t
 
maximum_∑ckë_size
;

38 
uöt8_t
 
ªèö_avaûabÀ
;

39 
uöt16_t
 
£rvî_kì∑live
;

40 
uöt16_t
 
öÊight_maximum
;

41 
uöt8_t
 
max_qos
 = 255;

43 if(
c⁄ãxt
 =
NULL
){

44  
MOSQ_ERR_INVAL
;

46 if(
c⁄ãxt
->
bridge
 =
NULL
){

47  
MOSQ_ERR_PROTOCOL
;

49 if(
c⁄ãxt
->
ö_∑ckë
.
comm™d
 !
CMD_CONNACK
){

50  
MOSQ_ERR_MALFORMED_PACKET
;

52 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Re˚ived CONNACK o¿c⁄√˘i⁄ %s.", 
c⁄ãxt
->
id
);

53 if(
	`∑ckë__ªad_byã
(&
c⁄ãxt
->
ö_∑ckë
, &
c⁄√˘_acknowÀdge
)Ë 
MOSQ_ERR_MALFORMED_PACKET
;

54 if(
	`∑ckë__ªad_byã
(&
c⁄ãxt
->
ö_∑ckë
, &
ªas⁄_code
)Ë 
MOSQ_ERR_MALFORMED_PACKET
;

56 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

57 if(
c⁄ãxt
->
ö_∑ckë
.
ªmaöög_Àngth
 =2 && 
ªas⁄_code
 =
CONNACK_REFUSED_PROTOCOL_VERSION
){

61 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
,

63 
c⁄ãxt
->
bridge
->
«me
);

65 
c⁄ãxt
->
¥Ÿocﬁ
 = 
mosq_p_mqâ311
;

66 
c⁄ãxt
->
bridge
->
¥Ÿocﬁ_vîsi⁄
 = 
mosq_p_mqâ311
;

67  
MOSQ_ERR_PROTOCOL
;

70 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_CONNACK
, &
c⁄ãxt
->
ö_∑ckë
, &
¥›îtõs
);

71 if(
rc
) Ñc;

74 
	`mosquôto_¥›îty_ªad_byã
(
¥›îtõs
, 
MQTT_PROP_MAXIMUM_QOS
,

75 &
max_qos
, 
Ál£
);

78 if(
	`mosquôto_¥›îty_ªad_öt32
(
¥›îtõs
, 
MQTT_PROP_MAXIMUM_PACKET_SIZE
,

79 &
maximum_∑ckë_size
, 
Ál£
)){

81 if(
c⁄ãxt
->
maximum_∑ckë_size
 == 0 || context->maximum_packet_size > maximum_packet_size){

82 
c⁄ãxt
->
maximum_∑ckë_size
 = maximum_packet_size;

87 
öÊight_maximum
 = 
c⁄ãxt
->
msgs_out
.inflight_maximum;

88 
	`mosquôto_¥›îty_ªad_öt16
(
¥›îtõs
, 
MQTT_PROP_RECEIVE_MAXIMUM
, &
öÊight_maximum
, 
Ál£
);

89 if(
c⁄ãxt
->
msgs_out
.
öÊight_maximum
 != inflight_maximum){

90 
c⁄ãxt
->
msgs_out
.
öÊight_maximum
 = inflight_maximum;

91 
	`db__mesßge_ªc⁄√˘_ª£t
(
c⁄ãxt
);

95 if(
	`mosquôto_¥›îty_ªad_byã
(
¥›îtõs
, 
MQTT_PROP_RETAIN_AVAILABLE
,

96 &
ªèö_avaûabÀ
, 
Ál£
)){

99 if(
c⁄ãxt
->
ªèö_avaûabÀ
){

100 
c⁄ãxt
->
ªèö_avaûabÀ
 =Ñetain_available;

105 if(
	`mosquôto_¥›îty_ªad_öt16
(
¥›îtõs
, 
MQTT_PROP_SERVER_KEEP_ALIVE
,

106 &
£rvî_kì∑live
, 
Ál£
)){

108 
c⁄ãxt
->
kì∑live
 = 
£rvî_kì∑live
;

111 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

113 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

115 if(
ªas⁄_code
 =
MQTT_RC_SUCCESS
){

116 #ifde‡
WITH_BRIDGE


117 if(
c⁄ãxt
->
bridge
){

118 
rc
 = 
	`bridge__⁄_c⁄√˘
(
c⁄ãxt
);

119 if(
rc
) Ñc;

122 if(
max_qos
 != 255){

123 
c⁄ãxt
->
max_qos
 = max_qos;

125 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_a˘ive
);

126 
rc
 = 
	`db__mesßge_wrôe_queued_out
(
c⁄ãxt
);

127 if(
rc
) Ñc;

128 
rc
 = 
	`db__mesßge_wrôe_öÊight_out_Æl
(
c⁄ãxt
);

129  
rc
;

131 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

132 
ªas⁄_code
){

133 
MQTT_RC_RETAIN_NOT_SUPPORTED
:

134 
c⁄ãxt
->
ªèö_avaûabÀ
 = 0;

135 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Connection Refused:ÑetainÇotávailable (willÑetry)");

136  
MOSQ_ERR_CONN_LOST
;

137 
MQTT_RC_QOS_NOT_SUPPORTED
:

138 if(
max_qos
 == 255){

139 if(
c⁄ãxt
->
max_qos
 != 0){

140 
c⁄ãxt
->
max_qos
--;

143 
c⁄ãxt
->
max_qos
 = max_qos;

145 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Connection Refused: QoSÇot supported (willÑetry)");

146  
MOSQ_ERR_CONN_LOST
;

148 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "C⁄√˘i⁄ Refu£d: %s", 
	`mosquôto_ªas⁄_°rög
(
ªas⁄_code
));

149  
MOSQ_ERR_CONN_LOST
;

152 
ªas⁄_code
){

153 
CONNACK_REFUSED_PROTOCOL_VERSION
:

154 if(
c⁄ãxt
->
bridge
){

155 
c⁄ãxt
->
bridge
->
åy_¥iv©e_ac˚±ed
 = 
Ál£
;

157 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Connection Refused: unacceptableÖrotocol version");

158  
MOSQ_ERR_CONN_LOST
;

159 
CONNACK_REFUSED_IDENTIFIER_REJECTED
:

160 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Connection Refused: identifierÑejected");

161  
MOSQ_ERR_CONN_LOST
;

162 
CONNACK_REFUSED_SERVER_UNAVAILABLE
:

163 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Connection Refused: broker unavailable");

164  
MOSQ_ERR_CONN_LOST
;

165 
CONNACK_REFUSED_BAD_USERNAME_PASSWORD
:

166 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Connection Refused: bad userÇame orÖassword");

167  
MOSQ_ERR_CONN_LOST
;

168 
CONNACK_REFUSED_NOT_AUTHORIZED
:

169 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Connection Refused:Çotáuthorised");

170  
MOSQ_ERR_CONN_LOST
;

172 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Connection Refused: unknownÑeason");

173  
MOSQ_ERR_CONN_LOST
;

177  
MOSQ_ERR_CONN_LOST
;

178 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/handle_connect.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<uéi°.h
>

25 
	~"mosquôto_brokî_öã∫Æ.h
"

26 
	~"mqâ_¥Ÿocﬁ.h
"

27 
	~"mem‹y_mosq.h
"

28 
	~"∑ckë_mosq.h
"

29 
	~"¥›îty_mosq.h
"

30 
	~"£nd_mosq.h
"

31 
	~"sys_åì.h
"

32 
	~"time_mosq.h
"

33 
	~"és_mosq.h
"

34 
	~"utû_mosq.h
"

35 
	~"wûl_mosq.h
"

37 #ifde‡
WITH_WEBSOCKETS


38 
	~<libwebsockës.h
>

42 
	$nibbÀ_to_hex
(
uöt8_t
 
vÆue
)

44 if(
vÆue
 < 0x0A){

45  ()('0'+
vÆue
);

47  ()(65 +
vÆue
-10);

49 
	}
}

51 *
	$˛õ¡_id_gí
(
uöt16_t
 *
idÀn
, c⁄° *
auto_id_¥efix
, uöt16_à
auto_id_¥efix_Àn
)

53 *
˛õ¡_id
;

54 
uöt8_t
 
∫d
[16];

55 
i
;

56 
pos
;

58 if(
	`utû__øndom_byãs
(
∫d
, 16)Ë 
NULL
;

60 *
idÀn
 = (
uöt16_t
)(
auto_id_¥efix_Àn
 + 36);

62 
˛õ¡_id
 = (*)
	`mosquôto__ˇŒoc
((
size_t
)(*
idÀn
) + 1, ());

63 if(!
˛õ¡_id
){

64  
NULL
;

66 if(
auto_id_¥efix
){

67 
	`mem˝y
(
˛õ¡_id
, 
auto_id_¥efix
, 
auto_id_¥efix_Àn
);

70 
pos
 = 0;

71 
i
=0; i<16; i++){

72 
˛õ¡_id
[
auto_id_¥efix_Àn
 + 
pos
 + 0] = 
	`nibbÀ_to_hex
(
∫d
[
i
] & 0x0F);

73 
˛õ¡_id
[
auto_id_¥efix_Àn
 + 
pos
 + 1] = 
	`nibbÀ_to_hex
((
∫d
[
i
] >> 4) & 0x0F);

74 
pos
 += 2;

75 if(
pos
 == 8 ||Öos == 13 ||Öos == 18 ||Öos == 23){

76 
˛õ¡_id
[
auto_id_¥efix_Àn
 + 
pos
] = '-';

77 
pos
++;

81  
˛õ¡_id
;

82 
	}
}

86 
	$c⁄√˘i⁄_check_a˛
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_˛õ¡_msg
 **
hód
)

88 
mosquôto_˛õ¡_msg
 *
msg_èû
, *
tmp
;

89 
ac˚ss
;

91 
	`DL_FOREACH_SAFE
((*
hód
), 
msg_èû
, 
tmp
){

92 if(
msg_èû
->
dúe˘i⁄
 =
mosq_md_out
){

93 
ac˚ss
 = 
MOSQ_ACL_READ
;

95 
ac˚ss
 = 
MOSQ_ACL_WRITE
;

97 if(
	`mosquôto_a˛_check
(
c⁄ãxt
, 
msg_èû
->
°‹e
->
t›ic
,

98 
msg_èû
->
°‹e
->
∑ylﬂdÀn
, msg_èû->°‹e->
∑ylﬂd
,

99 
msg_èû
->
°‹e
->
qos
, msg_èû->°‹e->
ªèö
, 
ac˚ss
Ë!
MOSQ_ERR_SUCCESS
){

101 
	`DL_DELETE
((*
hód
), 
msg_èû
);

102 
	`db__msg_°‹e_ªf_dec
(&
msg_èû
->
°‹e
);

103 
	`mosquôto_¥›îty_‰ì_Æl
(&
msg_èû
->
¥›îtõs
);

104 
	`mosquôto__‰ì
(
msg_èû
);

107 
	}
}

109 
	$c⁄√˘__⁄_auth‹i£d
(
mosquôto
 *
c⁄ãxt
, *
auth_d©a_out
, 
uöt16_t
 
auth_d©a_out_Àn
)

111 
mosquôto
 *
found_c⁄ãxt
;

112 
mosquôto__subÀaf
 *
Àaf
;

113 
mosquôto_¥›îty
 *
c⁄«ck_¥›s
 = 
NULL
;

114 
uöt8_t
 
c⁄√˘_ack
 = 0;

115 
i
;

116 
rc
;

117 
ö_quŸa
, 
out_quŸa
;

118 
uöt16_t
 
ö_maximum
, 
out_maximum
;

121 
	`HASH_FIND
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
c⁄ãxt
->
id
, 
	`°æí
(c⁄ãxt->id), 
found_c⁄ãxt
);

122 if(
found_c⁄ãxt
){

124 if(
found_c⁄ãxt
->
sock
 =
INVALID_SOCKET
){

130 if(
db
.
c⁄fig
->
c⁄√˘i⁄_mesßges
 =
åue
){

131 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Clõ¡ %†Æªady c⁄√˘ed, closög old c⁄√˘i⁄.", 
c⁄ãxt
->
id
);

135 if(
c⁄ãxt
->
˛ón_°¨t
 =
Ál£
 && 
found_c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 > 0){

136 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ311
 || c⁄ãxt->¥Ÿocﬁ =
mosq_p_mqâ5
){

137 
c⁄√˘_ack
 |= 0x01;

140 if(
found_c⁄ãxt
->
msgs_ö
.
öÊight
 || found_c⁄ãxt->msgs_ö.
queued


141 || 
found_c⁄ãxt
->
msgs_out
.
öÊight
 || found_c⁄ãxt->msgs_out.
queued
){

143 
ö_quŸa
 = 
c⁄ãxt
->
msgs_ö
.
öÊight_quŸa
;

144 
out_quŸa
 = 
c⁄ãxt
->
msgs_out
.
öÊight_quŸa
;

145 
ö_maximum
 = 
c⁄ãxt
->
msgs_ö
.
öÊight_maximum
;

146 
out_maximum
 = 
c⁄ãxt
->
msgs_out
.
öÊight_maximum
;

148 
	`mem˝y
(&
c⁄ãxt
->
msgs_ö
, &
found_c⁄ãxt
->msgs_ö, (
mosquôto_msg_d©a
));

149 
	`mem˝y
(&
c⁄ãxt
->
msgs_out
, &
found_c⁄ãxt
->msgs_out, (
mosquôto_msg_d©a
));

151 
	`mem£t
(&
found_c⁄ãxt
->
msgs_ö
, 0, (
mosquôto_msg_d©a
));

152 
	`mem£t
(&
found_c⁄ãxt
->
msgs_out
, 0, (
mosquôto_msg_d©a
));

154 
c⁄ãxt
->
msgs_ö
.
öÊight_quŸa
 = 
ö_quŸa
;

155 
c⁄ãxt
->
msgs_out
.
öÊight_quŸa
 = 
out_quŸa
;

156 
c⁄ãxt
->
msgs_ö
.
öÊight_maximum
 = 
ö_maximum
;

157 
c⁄ãxt
->
msgs_out
.
öÊight_maximum
 = 
out_maximum
;

159 
	`db__mesßge_ªc⁄√˘_ª£t
(
c⁄ãxt
);

161 
c⁄ãxt
->
subs
 = 
found_c⁄ãxt
->subs;

162 
found_c⁄ãxt
->
subs
 = 
NULL
;

163 
c⁄ãxt
->
sub_cou¡
 = 
found_c⁄ãxt
->sub_count;

164 
found_c⁄ãxt
->
sub_cou¡
 = 0;

165 
c⁄ãxt
->
œ°_mid
 = 
found_c⁄ãxt
->last_mid;

167 
i
=0; i<
c⁄ãxt
->
sub_cou¡
; i++){

168 if(
c⁄ãxt
->
subs
[
i
]){

169 
Àaf
 = 
c⁄ãxt
->
subs
[
i
]->
hõr
->subs;

170 
Àaf
){

171 if(
Àaf
->
c⁄ãxt
 =
found_c⁄ãxt
){

172 
Àaf
->
c⁄ãxt
 = context;

174 
Àaf
 =Üóf->
√xt
;

177 if(
c⁄ãxt
->
subs
[
i
]->
sh¨ed
){

178 
Àaf
 = 
c⁄ãxt
->
subs
[
i
]->
sh¨ed
->subs;

179 
Àaf
){

180 if(
Àaf
->
c⁄ãxt
 =
found_c⁄ãxt
){

181 
Àaf
->
c⁄ãxt
 = context;

183 
Àaf
 =Üóf->
√xt
;

190 if(
c⁄ãxt
->
˛ón_°¨t
 =
åue
){

191 
	`sub__˛ón_£ssi⁄
(
found_c⁄ãxt
);

193 if((
found_c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
 && found_c⁄ãxt->
£ssi⁄_expúy_öãrvÆ
 == 0)

194 || (
found_c⁄ãxt
->
¥Ÿocﬁ
 !
mosq_p_mqâ5
 && found_c⁄ãxt->
˛ón_°¨t
 =
åue
)

195 || (
c⁄ãxt
->
˛ón_°¨t
 =
åue
)

198 
	`c⁄ãxt__£nd_wûl
(
found_c⁄ãxt
);

201 
	`£ssi⁄_expúy__ªmove
(
found_c⁄ãxt
);

202 
	`wûl_dñay__ªmove
(
found_c⁄ãxt
);

203 
	`wûl__˛ór
(
found_c⁄ãxt
);

205 
found_c⁄ãxt
->
˛ón_°¨t
 = 
åue
;

206 
found_c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 = 0;

207 
	`mosquôto__£t_°©e
(
found_c⁄ãxt
, 
mosq_cs_du∂iˇã
);

209 if(
found_c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

210 
	`£nd__disc⁄√˘
(
found_c⁄ãxt
, 
MQTT_RC_SESSION_TAKEN_OVER
, 
NULL
);

212 
	`do_disc⁄√˘
(
found_c⁄ãxt
, 
MOSQ_ERR_SUCCESS
);

215 
rc
 = 
	`a˛__föd_a˛s
(
c⁄ãxt
);

216 if(
rc
){

217 
	`‰ì
(
auth_d©a_out
);

218  
rc
;

221 if(
db
.
c⁄fig
->
c⁄√˘i⁄_mesßges
 =
åue
){

222 if(
c⁄ãxt
->
is_bridge
){

223 if(
c⁄ãxt
->
u£∫ame
){

224 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "New bridge connected from %s:%dás %s (p%d, c%d, k%d, u'%s').",

225 
c⁄ãxt
->
addªss
, c⁄ãxt->
ªmŸe_p‹t
, c⁄ãxt->
id
, c⁄ãxt->
¥Ÿocﬁ
, c⁄ãxt->
˛ón_°¨t
, c⁄ãxt->
kì∑live
, c⁄ãxt->
u£∫ame
);

227 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "New bridge connected from %s:%dás %s (p%d, c%d, k%d).",

228 
c⁄ãxt
->
addªss
, c⁄ãxt->
ªmŸe_p‹t
, c⁄ãxt->
id
, c⁄ãxt->
¥Ÿocﬁ
, c⁄ãxt->
˛ón_°¨t
, c⁄ãxt->
kì∑live
);

231 if(
c⁄ãxt
->
u£∫ame
){

232 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "New client connected from %s:%dás %s (p%d, c%d, k%d, u'%s').",

233 
c⁄ãxt
->
addªss
, c⁄ãxt->
ªmŸe_p‹t
, c⁄ãxt->
id
, c⁄ãxt->
¥Ÿocﬁ
, c⁄ãxt->
˛ón_°¨t
, c⁄ãxt->
kì∑live
, c⁄ãxt->
u£∫ame
);

235 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "New client connected from %s:%dás %s (p%d, c%d, k%d).",

236 
c⁄ãxt
->
addªss
, c⁄ãxt->
ªmŸe_p‹t
, c⁄ãxt->
id
, c⁄ãxt->
¥Ÿocﬁ
, c⁄ãxt->
˛ón_°¨t
, c⁄ãxt->
kì∑live
);

240 if(
c⁄ãxt
->
wûl
) {

241 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Will message specified (%ld bytes) (r%d, q%d).",

242 ()
c⁄ãxt
->
wûl
->
msg
.
∑ylﬂdÀn
,

243 
c⁄ãxt
->
wûl
->
msg
.
ªèö
,

244 
c⁄ãxt
->
wûl
->
msg
.
qos
);

246 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "\t%s", 
c⁄ãxt
->
wûl
->
msg
.
t›ic
);

248 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "No will message specified.");

252 
c⁄ãxt
->
pög_t
 = 0;

253 
c⁄ãxt
->
is_dr›pög
 = 
Ál£
;

255 
	`c⁄√˘i⁄_check_a˛
(
c⁄ãxt
, &c⁄ãxt->
msgs_ö
.
öÊight
);

256 
	`c⁄√˘i⁄_check_a˛
(
c⁄ãxt
, &c⁄ãxt->
msgs_ö
.
queued
);

257 
	`c⁄√˘i⁄_check_a˛
(
c⁄ãxt
, &c⁄ãxt->
msgs_out
.
öÊight
);

258 
	`c⁄√˘i⁄_check_a˛
(
c⁄ãxt
, &c⁄ãxt->
msgs_out
.
queued
);

260 
	`c⁄ãxt__add_to_by_id
(
c⁄ãxt
);

262 #ifde‡
WITH_PERSISTENCE


263 if(!
c⁄ãxt
->
˛ón_°¨t
){

264 
db
.
≥rsi°í˚_ch™ges
++;

267 
c⁄ãxt
->
max_qos
 = c⁄ãxt->
li°íî
->max_qos;

269 if(
db
.
c⁄fig
->
max_kì∑live
 &&

270 (
c⁄ãxt
->
kì∑live
 > 
db
.
c⁄fig
->
max_kì∑live
 || context->keepalive == 0)){

272 
c⁄ãxt
->
kì∑live
 = 
db
.
c⁄fig
->
max_kì∑live
;

273 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

274 if(
	`mosquôto_¥›îty_add_öt16
(&
c⁄«ck_¥›s
, 
MQTT_PROP_SERVER_KEEP_ALIVE
, 
c⁄ãxt
->
kì∑live
)){

275 
rc
 = 
MOSQ_ERR_NOMEM
;

276 
îr‹
;

279 
	`£nd__c⁄«ck
(
c⁄ãxt
, 
c⁄√˘_ack
, 
CONNACK_REFUSED_IDENTIFIER_REJECTED
, 
NULL
);

280 
rc
 = 
MOSQ_ERR_INVAL
;

281 
îr‹
;

285 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

286 if(
c⁄ãxt
->
li°íî
->
max_t›ic_Æüs
 > 0){

287 if(
	`mosquôto_¥›îty_add_öt16
(&
c⁄«ck_¥›s
, 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
, 
c⁄ãxt
->
li°íî
->
max_t›ic_Æüs
)){

288 
rc
 = 
MOSQ_ERR_NOMEM
;

289 
îr‹
;

292 if(
c⁄ãxt
->
assig√d_id
){

293 if(
	`mosquôto_¥›îty_add_°rög
(&
c⁄«ck_¥›s
, 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
, 
c⁄ãxt
->
id
)){

294 
rc
 = 
MOSQ_ERR_NOMEM
;

295 
îr‹
;

298 if(
c⁄ãxt
->
auth_mëhod
){

299 if(
	`mosquôto_¥›îty_add_°rög
(&
c⁄«ck_¥›s
, 
MQTT_PROP_AUTHENTICATION_METHOD
, 
c⁄ãxt
->
auth_mëhod
)){

300 
rc
 = 
MOSQ_ERR_NOMEM
;

301 
îr‹
;

304 if(
auth_d©a_out
 && 
auth_d©a_out_Àn
 > 0){

305 if(
	`mosquôto_¥›îty_add_bö¨y
(&
c⁄«ck_¥›s
, 
MQTT_PROP_AUTHENTICATION_DATA
, 
auth_d©a_out
, 
auth_d©a_out_Àn
)){

306 
rc
 = 
MOSQ_ERR_NOMEM
;

307 
îr‹
;

312 
	`‰ì
(
auth_d©a_out
);

313 
auth_d©a_out
 = 
NULL
;

315 
	`kì∑live__add
(
c⁄ãxt
);

317 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_a˘ive
);

318 
rc
 = 
	`£nd__c⁄«ck
(
c⁄ãxt
, 
c⁄√˘_ack
, 
CONNACK_ACCEPTED
, 
c⁄«ck_¥›s
);

319 
	`mosquôto_¥›îty_‰ì_Æl
(&
c⁄«ck_¥›s
);

320 if(
rc
) Ñc;

321 
	`db__expúe_Æl_mesßges
(
c⁄ãxt
);

322 
rc
 = 
	`db__mesßge_wrôe_queued_out
(
c⁄ãxt
);

323 if(
rc
) Ñc;

324 
rc
 = 
	`db__mesßge_wrôe_öÊight_out_Æl
(
c⁄ãxt
);

325  
rc
;

326 
îr‹
:

327 
	`‰ì
(
auth_d©a_out
);

328 
	`mosquôto_¥›îty_‰ì_Æl
(&
c⁄«ck_¥›s
);

329  
rc
;

330 
	}
}

333 
	$wûl__ªad
(
mosquôto
 *
c⁄ãxt
, c⁄° *
˛õ¡_id
, 
mosquôto_mesßge_Æl
 **
wûl
, 
uöt8_t
 
wûl_qos
, 
wûl_ªèö
)

335 
rc
 = 
MOSQ_ERR_SUCCESS
;

336 
size_t
 
¶í
;

337 
uöt16_t
 
éí
;

338 
mosquôto_mesßge_Æl
 *
wûl_°ru˘
 = 
NULL
;

339 *
wûl_t›ic_mou¡
 = 
NULL
;

340 
uöt16_t
 
∑ylﬂdÀn
;

341 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

343 
wûl_°ru˘
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_mesßge_Æl
));

344 if(!
wûl_°ru˘
){

345 
rc
 = 
MOSQ_ERR_NOMEM
;

346 
îr‹_˛ónup
;

348 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
PROTOCOL_VERSION_v5
){

349 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_WILL
, &
c⁄ãxt
->
ö_∑ckë
, &
¥›îtõs
);

350 if(
rc
Ë
îr‹_˛ónup
;

352 
rc
 = 
	`¥›îty__¥o˚ss_wûl
(
c⁄ãxt
, 
wûl_°ru˘
, &
¥›îtõs
);

353 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

354 if(
rc
Ë
îr‹_˛ónup
;

356 
rc
 = 
	`∑ckë__ªad_°rög
(&
c⁄ãxt
->
ö_∑ckë
, &
wûl_°ru˘
->
msg
.
t›ic
, &
éí
);

357 if(
rc
Ë
îr‹_˛ónup
;

358 if(!
éí
){

359 
rc
 = 
MOSQ_ERR_PROTOCOL
;

360 
îr‹_˛ónup
;

363 if(
c⁄ãxt
->
li°íî
->
mou¡_poöt
){

364 
¶í
 = 
	`°æí
(
c⁄ãxt
->
li°íî
->
mou¡_poöt
Ë+ såÀn(
wûl_°ru˘
->
msg
.
t›ic
) + 1;

365 
wûl_t›ic_mou¡
 = 
	`mosquôto__mÆloc
(
¶í
+1);

366 if(!
wûl_t›ic_mou¡
){

367 
rc
 = 
MOSQ_ERR_NOMEM
;

368 
îr‹_˛ónup
;

371 
	`¢¥ötf
(
wûl_t›ic_mou¡
, 
¶í
, "%s%s", 
c⁄ãxt
->
li°íî
->
mou¡_poöt
, 
wûl_°ru˘
->
msg
.
t›ic
);

372 
wûl_t›ic_mou¡
[
¶í
] = '\0';

374 
	`mosquôto__‰ì
(
wûl_°ru˘
->
msg
.
t›ic
);

375 
wûl_°ru˘
->
msg
.
t›ic
 = 
wûl_t›ic_mou¡
;

378 
rc
 = 
	`mosquôto_pub_t›ic_check
(
wûl_°ru˘
->
msg
.
t›ic
);

379 if(
rc
Ë
îr‹_˛ónup
;

381 
rc
 = 
	`∑ckë__ªad_uöt16
(&
c⁄ãxt
->
ö_∑ckë
, &
∑ylﬂdÀn
);

382 if(
rc
Ë
îr‹_˛ónup
;

384 
wûl_°ru˘
->
msg
.
∑ylﬂdÀn
 =Öayloadlen;

385 if(
wûl_°ru˘
->
msg
.
∑ylﬂdÀn
 > 0){

386 if(
db
.
c⁄fig
->
mesßge_size_limô
 && 
wûl_°ru˘
->
msg
.
∑ylﬂdÀn
 > ()db.config->message_size_limit){

387 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Clõ¡ %†c⁄√˘ed wôhÅoÿœrgêWû»∑ylﬂd", 
˛õ¡_id
);

388 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

389 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_PACKET_TOO_LARGE
, 
NULL
);

391 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
CONNACK_REFUSED_NOT_AUTHORIZED
, 
NULL
);

393 
rc
 = 
MOSQ_ERR_PAYLOAD_SIZE
;

394 
îr‹_˛ónup
;

396 
wûl_°ru˘
->
msg
.
∑ylﬂd
 = 
	`mosquôto__mÆloc
((
size_t
)wûl_°ru˘->msg.
∑ylﬂdÀn
);

397 if(!
wûl_°ru˘
->
msg
.
∑ylﬂd
){

398 
rc
 = 
MOSQ_ERR_NOMEM
;

399 
îr‹_˛ónup
;

402 
rc
 = 
	`∑ckë__ªad_byãs
(&
c⁄ãxt
->
ö_∑ckë
, 
wûl_°ru˘
->
msg
.
∑ylﬂd
, (
uöt32_t
)wûl_°ru˘->msg.
∑ylﬂdÀn
);

403 if(
rc
Ë
îr‹_˛ónup
;

406 
wûl_°ru˘
->
msg
.
qos
 = 
wûl_qos
;

407 
wûl_°ru˘
->
msg
.
ªèö
 = 
wûl_ªèö
;

409 *
wûl
 = 
wûl_°ru˘
;

410  
MOSQ_ERR_SUCCESS
;

412 
îr‹_˛ónup
:

413 if(
wûl_°ru˘
){

414 
	`mosquôto__‰ì
(
wûl_°ru˘
->
msg
.
t›ic
);

415 
	`mosquôto__‰ì
(
wûl_°ru˘
->
msg
.
∑ylﬂd
);

416 
	`mosquôto_¥›îty_‰ì_Æl
(&
wûl_°ru˘
->
¥›îtõs
);

417 
	`mosquôto__‰ì
(
wûl_°ru˘
);

419  
rc
;

420 
	}
}

424 
	$h™dÀ__c⁄√˘
(
mosquôto
 *
c⁄ãxt
)

426 
¥Ÿocﬁ_«me
[7];

427 
uöt8_t
 
¥Ÿocﬁ_vîsi⁄
;

428 
uöt8_t
 
c⁄√˘_Êags
;

429 *
˛õ¡_id
 = 
NULL
;

430 
mosquôto_mesßge_Æl
 *
wûl_°ru˘
 = 
NULL
;

431 
uöt8_t
 
wûl
, 
wûl_ªèö
, 
wûl_qos
, 
˛ón_°¨t
;

432 
uöt8_t
 
u£∫ame_Êag
, 
∑ssw‹d_Êag
;

433 *
u£∫ame
 = 
NULL
, *
∑ssw‹d
 = NULL;

434 
rc
;

435 
uöt16_t
 
¶í
;

436 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

437 *
auth_d©a
 = 
NULL
;

438 
uöt16_t
 
auth_d©a_Àn
 = 0;

439 *
auth_d©a_out
 = 
NULL
;

440 
uöt16_t
 
auth_d©a_out_Àn
 = 0;

441 
boﬁ
 
Ælow_zîo_Àngth_˛õ¡id
;

442 #ifde‡
WITH_TLS


443 
i
;

444 
X509
 *
˛õ¡_˚π
 = 
NULL
;

445 
X509_NAME
 *
«me
;

446 
X509_NAME_ENTRY
 *
«me_íåy
;

447 
ASN1_STRING
 *
«me_a¢1
 = 
NULL
;

448 
BIO
 *
subje˘_bio
;

449 *
d©a_°¨t
;

450 
«me_Àngth
;

451 *
subje˘
;

454 
	`G_CONNECTION_COUNT_INC
();

456 if(!
c⁄ãxt
->
li°íî
){

457  
MOSQ_ERR_INVAL
;

461 if(
c⁄ãxt
->
°©e
 !
mosq_cs_√w
){

462 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Bad clõ¡ %†£ndög mu…ùÀ CONNECT mesßges.", 
c⁄ãxt
->
id
);

463 
rc
 = 
MOSQ_ERR_PROTOCOL
;

464 
h™dÀ_c⁄√˘_îr‹
;

470 if(
	`∑ckë__ªad_uöt16
(&
c⁄ãxt
->
ö_∑ckë
, &
¶í
)){

471 
rc
 = 
MOSQ_ERR_PROTOCOL
;

472 
h™dÀ_c⁄√˘_îr‹
;

474 if(
¶í
 != 4 && slen != 6 ){

475 
rc
 = 
MOSQ_ERR_PROTOCOL
;

476 
h™dÀ_c⁄√˘_îr‹
;

478 if(
	`∑ckë__ªad_byãs
(&
c⁄ãxt
->
ö_∑ckë
, 
¥Ÿocﬁ_«me
, 
¶í
)){

479 
rc
 = 
MOSQ_ERR_PROTOCOL
;

480 
h™dÀ_c⁄√˘_îr‹
;

482 
¥Ÿocﬁ_«me
[
¶í
] = '\0';

484 if(
	`∑ckë__ªad_byã
(&
c⁄ãxt
->
ö_∑ckë
, &
¥Ÿocﬁ_vîsi⁄
)){

485 
rc
 = 
MOSQ_ERR_PROTOCOL
;

486 
h™dÀ_c⁄√˘_îr‹
;

488 if(!
	`°rcmp
(
¥Ÿocﬁ_«me
, 
PROTOCOL_NAME_v31
)){

489 if((
¥Ÿocﬁ_vîsi⁄
&0x7FË!
PROTOCOL_VERSION_v31
){

490 if(
db
.
c⁄fig
->
c⁄√˘i⁄_mesßges
 =
åue
){

491 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "InvalidÖrotocol version %d in CONNECT from %s.",

492 
¥Ÿocﬁ_vîsi⁄
, 
c⁄ãxt
->
addªss
);

494 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
CONNACK_REFUSED_PROTOCOL_VERSION
, 
NULL
);

495 
rc
 = 
MOSQ_ERR_PROTOCOL
;

496 
h™dÀ_c⁄√˘_îr‹
;

498 
c⁄ãxt
->
¥Ÿocﬁ
 = 
mosq_p_mqâ31
;

499 if((
¥Ÿocﬁ_vîsi⁄
&0x80) == 0x80){

500 
c⁄ãxt
->
is_bridge
 = 
åue
;

502 }if(!
	`°rcmp
(
¥Ÿocﬁ_«me
, 
PROTOCOL_NAME
)){

503 if((
¥Ÿocﬁ_vîsi⁄
&0x7FË=
PROTOCOL_VERSION_v311
){

504 
c⁄ãxt
->
¥Ÿocﬁ
 = 
mosq_p_mqâ311
;

506 if((
¥Ÿocﬁ_vîsi⁄
&0x80) == 0x80){

507 
c⁄ãxt
->
is_bridge
 = 
åue
;

509 }if((
¥Ÿocﬁ_vîsi⁄
&0x7FË=
PROTOCOL_VERSION_v5
){

510 
c⁄ãxt
->
¥Ÿocﬁ
 = 
mosq_p_mqâ5
;

512 if(
db
.
c⁄fig
->
c⁄√˘i⁄_mesßges
 =
åue
){

513 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "InvalidÖrotocol version %d in CONNECT from %s.",

514 
¥Ÿocﬁ_vîsi⁄
, 
c⁄ãxt
->
addªss
);

516 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
CONNACK_REFUSED_PROTOCOL_VERSION
, 
NULL
);

517 
rc
 = 
MOSQ_ERR_PROTOCOL
;

518 
h™dÀ_c⁄√˘_îr‹
;

520 if((
c⁄ãxt
->
ö_∑ckë
.
comm™d
&0x0F) != 0x00){

522 
rc
 = 
MOSQ_ERR_PROTOCOL
;

523 
h™dÀ_c⁄√˘_îr‹
;

526 if(
db
.
c⁄fig
->
c⁄√˘i⁄_mesßges
 =
åue
){

527 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "InvalidÖrotocol \"%s\" in CONNECT from %s.",

528 
¥Ÿocﬁ_«me
, 
c⁄ãxt
->
addªss
);

530 
rc
 = 
MOSQ_ERR_PROTOCOL
;

531 
h™dÀ_c⁄√˘_îr‹
;

533 if((
¥Ÿocﬁ_vîsi⁄
&0x7FË!
PROTOCOL_VERSION_v31
 && 
c⁄ãxt
->
ö_∑ckë
.
comm™d
 !
CMD_CONNECT
){

534  
MOSQ_ERR_MALFORMED_PACKET
;

537 if(
	`∑ckë__ªad_byã
(&
c⁄ãxt
->
ö_∑ckë
, &
c⁄√˘_Êags
)){

538 
rc
 = 
MOSQ_ERR_PROTOCOL
;

539 
h™dÀ_c⁄√˘_îr‹
;

541 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ311
 || c⁄ãxt->¥Ÿocﬁ =
mosq_p_mqâ5
){

542 if((
c⁄√˘_Êags
 & 0x01) != 0x00){

543 
rc
 = 
MOSQ_ERR_PROTOCOL
;

544 
h™dÀ_c⁄√˘_îr‹
;

548 
˛ón_°¨t
 = (
c⁄√˘_Êags
 & 0x02) >> 1;

550 if(
˛ón_°¨t
 =
Ál£
 && 
¥Ÿocﬁ_vîsi⁄
 !
PROTOCOL_VERSION_v5
){

552 
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 = 
UINT32_MAX
;

554 
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 = 0;

556 
wûl
 = 
c⁄√˘_Êags
 & 0x04;

557 
wûl_qos
 = (
c⁄√˘_Êags
 & 0x18) >> 3;

558 if(
wûl_qos
 == 3){

559 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "Invalid Will QoS in CONNECT from %s.",

560 
c⁄ãxt
->
addªss
);

561 
rc
 = 
MOSQ_ERR_PROTOCOL
;

562 
h™dÀ_c⁄√˘_îr‹
;

564 
wûl_ªèö
 = ((
c⁄√˘_Êags
 & 0x20) == 0x20);

565 
∑ssw‹d_Êag
 = 
c⁄√˘_Êags
 & 0x40;

566 
u£∫ame_Êag
 = 
c⁄√˘_Êags
 & 0x80;

568 if(
wûl
 && 
wûl_ªèö
 && 
db
.
c⁄fig
->
ªèö_avaûabÀ
 =
Ál£
){

569 if(
¥Ÿocﬁ_vîsi⁄
 =
mosq_p_mqâ5
){

570 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_RETAIN_NOT_SUPPORTED
, 
NULL
);

572 
rc
 = 
MOSQ_ERR_NOT_SUPPORTED
;

573 
h™dÀ_c⁄√˘_îr‹
;

576 if(
	`∑ckë__ªad_uöt16
(&
c⁄ãxt
->
ö_∑ckë
, &(c⁄ãxt->
kì∑live
))){

577 
rc
 = 
MOSQ_ERR_PROTOCOL
;

578 
h™dÀ_c⁄√˘_îr‹
;

581 if(
¥Ÿocﬁ_vîsi⁄
 =
PROTOCOL_VERSION_v5
){

582 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_CONNECT
, &
c⁄ãxt
->
ö_∑ckë
, &
¥›îtõs
);

583 if(
rc
Ë
h™dÀ_c⁄√˘_îr‹
;

585 
	`¥›îty__¥o˚ss_c⁄√˘
(
c⁄ãxt
, &
¥›îtõs
);

587 if(
wûl
 && 
wûl_qos
 > 
c⁄ãxt
->
li°íî
->
max_qos
){

588 if(
¥Ÿocﬁ_vîsi⁄
 =
mosq_p_mqâ5
){

589 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_QOS_NOT_SUPPORTED
, 
NULL
);

591 
rc
 = 
MOSQ_ERR_NOT_SUPPORTED
;

592 
h™dÀ_c⁄√˘_îr‹
;

595 if(
	`mosquôto_¥›îty_ªad_°rög
(
¥›îtõs
, 
MQTT_PROP_AUTHENTICATION_METHOD
, &
c⁄ãxt
->
auth_mëhod
, 
Ál£
)){

596 
	`mosquôto_¥›îty_ªad_bö¨y
(
¥›îtõs
, 
MQTT_PROP_AUTHENTICATION_DATA
, &
auth_d©a
, &
auth_d©a_Àn
, 
Ál£
);

599 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

601 if(
	`∑ckë__ªad_°rög
(&
c⁄ãxt
->
ö_∑ckë
, &
˛õ¡_id
, &
¶í
)){

602 
rc
 = 
MOSQ_ERR_PROTOCOL
;

603 
h™dÀ_c⁄√˘_îr‹
;

606 if(
¶í
 == 0){

607 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ31
){

608 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
CONNACK_REFUSED_IDENTIFIER_REJECTED
, 
NULL
);

609 
rc
 = 
MOSQ_ERR_PROTOCOL
;

610 
h™dÀ_c⁄√˘_îr‹
;

612 
	`mosquôto__‰ì
(
˛õ¡_id
);

613 
˛õ¡_id
 = 
NULL
;

615 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

616 
Ælow_zîo_Àngth_˛õ¡id
 = 
c⁄ãxt
->
li°íî
->
£curôy_›ti⁄s
.allow_zero_length_clientid;

618 
Ælow_zîo_Àngth_˛õ¡id
 = 
db
.
c⁄fig
->
£curôy_›ti⁄s
.allow_zero_length_clientid;

620 if((
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ311
 && 
˛ón_°¨t
 =0Ë|| 
Ælow_zîo_Àngth_˛õ¡id
 =
Ál£
){

621 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ311
){

622 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
CONNACK_REFUSED_IDENTIFIER_REJECTED
, 
NULL
);

624 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_UNSPECIFIED
, 
NULL
);

626 
rc
 = 
MOSQ_ERR_PROTOCOL
;

627 
h™dÀ_c⁄√˘_îr‹
;

629 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

630 
˛õ¡_id
 = 
	`˛õ¡_id_gí
(&
¶í
, 
c⁄ãxt
->
li°íî
->
£curôy_›ti⁄s
.
auto_id_¥efix
, c⁄ãxt->li°íî->£curôy_›ti⁄s.
auto_id_¥efix_Àn
);

632 
˛õ¡_id
 = 
	`˛õ¡_id_gí
(&
¶í
, 
db
.
c⁄fig
->
£curôy_›ti⁄s
.
auto_id_¥efix
, db.c⁄fig->£curôy_›ti⁄s.
auto_id_¥efix_Àn
);

634 if(!
˛õ¡_id
){

635 
rc
 = 
MOSQ_ERR_NOMEM
;

636 
h™dÀ_c⁄√˘_îr‹
;

638 
c⁄ãxt
->
assig√d_id
 = 
åue
;

644 if(
db
.
c⁄fig
->
˛õ¡id_¥efixes
){

645 if(
	`°∫cmp
(
db
.
c⁄fig
->
˛õ¡id_¥efixes
, 
˛õ¡_id
, 
	`°æí
(db.config->clientid_prefixes))){

646 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

647 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_NOT_AUTHORIZED
, 
NULL
);

649 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
CONNACK_REFUSED_NOT_AUTHORIZED
, 
NULL
);

651 
rc
 = 
MOSQ_ERR_AUTH
;

652 
h™dÀ_c⁄√˘_îr‹
;

656 if(
wûl
){

657 
rc
 = 
	`wûl__ªad
(
c⁄ãxt
, 
˛õ¡_id
, &
wûl_°ru˘
, 
wûl_qos
, 
wûl_ªèö
);

658 if(
rc
Ë
h™dÀ_c⁄√˘_îr‹
;

660 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ311
 || c⁄ãxt->¥Ÿocﬁ =
mosq_p_mqâ5
){

661 if(
wûl_qos
 !0 || 
wûl_ªèö
 != 0){

662 
rc
 = 
MOSQ_ERR_PROTOCOL
;

663 
h™dÀ_c⁄√˘_îr‹
;

668 if(
u£∫ame_Êag
){

669 
rc
 = 
	`∑ckë__ªad_°rög
(&
c⁄ãxt
->
ö_∑ckë
, &
u£∫ame
, &
¶í
);

670 if(
rc
 =
MOSQ_ERR_NOMEM
){

671 
rc
 = 
MOSQ_ERR_NOMEM
;

672 
h™dÀ_c⁄√˘_îr‹
;

673 }if(
rc
 !
MOSQ_ERR_SUCCESS
){

674 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ31
){

676 
u£∫ame_Êag
 = 0;

678 
rc
 = 
MOSQ_ERR_PROTOCOL
;

679 
h™dÀ_c⁄√˘_îr‹
;

683 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ311
 || c⁄ãxt->¥Ÿocﬁ =
mosq_p_mqâ31
){

684 if(
∑ssw‹d_Êag
){

686 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "PrŸocﬁÉº‹ from %s:Öassw‹d wôhouàu£∫ame, closög c⁄√˘i⁄.", 
˛õ¡_id
);

687 
rc
 = 
MOSQ_ERR_PROTOCOL
;

688 
h™dÀ_c⁄√˘_îr‹
;

692 if(
∑ssw‹d_Êag
){

693 
rc
 = 
	`∑ckë__ªad_bö¨y
(&
c⁄ãxt
->
ö_∑ckë
, (
uöt8_t
 **)&
∑ssw‹d
, &
¶í
);

694 if(
rc
 =
MOSQ_ERR_NOMEM
){

695 
rc
 = 
MOSQ_ERR_NOMEM
;

696 
h™dÀ_c⁄√˘_îr‹
;

697 }if(
rc
 =
MOSQ_ERR_MALFORMED_PACKET
){

698 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ31
){

701 
rc
 = 
MOSQ_ERR_PROTOCOL
;

702 
h™dÀ_c⁄√˘_îr‹
;

707 if(
c⁄ãxt
->
ö_∑ckë
.
pos
 !c⁄ãxt->ö_∑ckë.
ªmaöög_Àngth
){

709 
rc
 = 
MOSQ_ERR_PROTOCOL
;

710 
h™dÀ_c⁄√˘_îr‹
;

716 
c⁄ãxt
->
id
 = 
˛õ¡_id
;

717 
˛õ¡_id
 = 
NULL
;

719 #ifde‡
WITH_TLS


720 if(
c⁄ãxt
->
li°íî
->
s¶_˘x
 && (c⁄ãxt->li°íî->
u£_idítôy_as_u£∫ame
 || c⁄ãxt->li°íî->
u£_subje˘_as_u£∫ame
)){

722 
	`mosquôto__‰ì
(
u£∫ame
);

723 
u£∫ame
 = 
NULL
;

724 
	`mosquôto__‰ì
(
∑ssw‹d
);

725 
∑ssw‹d
 = 
NULL
;

727 if(!
c⁄ãxt
->
s¶
){

728 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

729 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_BAD_USERNAME_OR_PASSWORD
, 
NULL
);

731 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
CONNACK_REFUSED_BAD_USERNAME_PASSWORD
, 
NULL
);

733 
rc
 = 
MOSQ_ERR_AUTH
;

734 
h™dÀ_c⁄√˘_îr‹
;

736 #ifde‡
FINAL_WITH_TLS_PSK


737 if(
c⁄ãxt
->
li°íî
->
psk_höt
){

739 if(!
c⁄ãxt
->
u£∫ame
){

740 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

741 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_BAD_USERNAME_OR_PASSWORD
, 
NULL
);

743 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
CONNACK_REFUSED_BAD_USERNAME_PASSWORD
, 
NULL
);

745 
rc
 = 
MOSQ_ERR_AUTH
;

746 
h™dÀ_c⁄√˘_îr‹
;

750 
˛õ¡_˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c⁄ãxt
->
s¶
);

751 if(!
˛õ¡_˚π
){

752 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

753 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_BAD_USERNAME_OR_PASSWORD
, 
NULL
);

755 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
CONNACK_REFUSED_BAD_USERNAME_PASSWORD
, 
NULL
);

757 
rc
 = 
MOSQ_ERR_AUTH
;

758 
h™dÀ_c⁄√˘_îr‹
;

760 
«me
 = 
	`X509_gë_subje˘_«me
(
˛õ¡_˚π
);

761 if(!
«me
){

762 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

763 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_BAD_USERNAME_OR_PASSWORD
, 
NULL
);

765 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
CONNACK_REFUSED_BAD_USERNAME_PASSWORD
, 
NULL
);

767 
rc
 = 
MOSQ_ERR_AUTH
;

768 
h™dÀ_c⁄√˘_îr‹
;

770 i‡(
c⁄ãxt
->
li°íî
->
u£_idítôy_as_u£∫ame
) {

771 
i
 = 
	`X509_NAME_gë_ödex_by_NID
(
«me
, 
NID_comm⁄Name
, -1);

772 if(
i
 == -1){

773 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

774 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_BAD_USERNAME_OR_PASSWORD
, 
NULL
);

776 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
CONNACK_REFUSED_BAD_USERNAME_PASSWORD
, 
NULL
);

778 
rc
 = 
MOSQ_ERR_AUTH
;

779 
h™dÀ_c⁄√˘_îr‹
;

781 
«me_íåy
 = 
	`X509_NAME_gë_íåy
(
«me
, 
i
);

782 if(
«me_íåy
){

783 
«me_a¢1
 = 
	`X509_NAME_ENTRY_gë_d©a
(
«me_íåy
);

784 i‡(
«me_a¢1
 =
NULL
) {

785 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

786 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_BAD_USERNAME_OR_PASSWORD
, 
NULL
);

788 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
CONNACK_REFUSED_BAD_USERNAME_PASSWORD
, 
NULL
);

790 
rc
 = 
MOSQ_ERR_AUTH
;

791 
h™dÀ_c⁄√˘_îr‹
;

793 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

794 
c⁄ãxt
->
u£∫ame
 = 
	`mosquôto__°rdup
((*Ë
	`ASN1_STRING_d©a
(
«me_a¢1
));

796 
c⁄ãxt
->
u£∫ame
 = 
	`mosquôto__°rdup
((*Ë
	`ASN1_STRING_gë0_d©a
(
«me_a¢1
));

798 if(!
c⁄ãxt
->
u£∫ame
){

799 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

800 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_SERVER_UNAVAILABLE
, 
NULL
);

802 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
CONNACK_REFUSED_SERVER_UNAVAILABLE
, 
NULL
);

804 
rc
 = 
MOSQ_ERR_NOMEM
;

805 
h™dÀ_c⁄√˘_îr‹
;

808 i‡((
size_t
)
	`ASN1_STRING_Àngth
(
«me_a¢1
Ë!
	`°æí
(
c⁄ãxt
->
u£∫ame
)) {

809 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

810 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_BAD_USERNAME_OR_PASSWORD
, 
NULL
);

812 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
CONNACK_REFUSED_BAD_USERNAME_PASSWORD
, 
NULL
);

814 
rc
 = 
MOSQ_ERR_AUTH
;

815 
h™dÀ_c⁄√˘_îr‹
;

819 
subje˘_bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

820 
	`X509_NAME_¥öt_ex
(
subje˘_bio
, 
	`X509_gë_subje˘_«me
(
˛õ¡_˚π
), 0, 
XN_FLAG_RFC2253
);

821 
d©a_°¨t
 = 
NULL
;

822 
«me_Àngth
 = 
	`BIO_gë_mem_d©a
(
subje˘_bio
, &
d©a_°¨t
);

823 
subje˘
 = 
	`mosquôto__mÆloc
(()*(
size_t
)(
«me_Àngth
+1));

824 if(!
subje˘
){

825 
	`BIO_‰ì
(
subje˘_bio
);

826 
rc
 = 
MOSQ_ERR_NOMEM
;

827 
h™dÀ_c⁄√˘_îr‹
;

829 
	`mem˝y
(
subje˘
, 
d©a_°¨t
, (
size_t
)
«me_Àngth
);

830 
subje˘
[
«me_Àngth
] = '\0';

831 
	`BIO_‰ì
(
subje˘_bio
);

832 
c⁄ãxt
->
u£∫ame
 = 
subje˘
;

834 if(!
c⁄ãxt
->
u£∫ame
){

835 
rc
 = 
MOSQ_ERR_AUTH
;

836 
h™dÀ_c⁄√˘_îr‹
;

838 
	`X509_‰ì
(
˛õ¡_˚π
);

839 
˛õ¡_˚π
 = 
NULL
;

840 #ifde‡
FINAL_WITH_TLS_PSK


848 
c⁄ãxt
->
u£∫ame
 = username;

849 
c⁄ãxt
->
∑ssw‹d
 =Öassword;

850 
u£∫ame
 = 
NULL
;

851 
∑ssw‹d
 = 
NULL
;

854 if(
c⁄ãxt
->
li°íî
->
u£_u£∫ame_as_˛õ¡id
){

855 if(
c⁄ãxt
->
u£∫ame
){

856 
	`mosquôto__‰ì
(
c⁄ãxt
->
id
);

857 
c⁄ãxt
->
id
 = 
	`mosquôto__°rdup
(c⁄ãxt->
u£∫ame
);

858 if(!
c⁄ãxt
->
id
){

859 
rc
 = 
MOSQ_ERR_NOMEM
;

860 
h™dÀ_c⁄√˘_îr‹
;

863 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

864 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_NOT_AUTHORIZED
, 
NULL
);

866 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
CONNACK_REFUSED_NOT_AUTHORIZED
, 
NULL
);

868 
rc
 = 
MOSQ_ERR_AUTH
;

869 
h™dÀ_c⁄√˘_îr‹
;

872 
c⁄ãxt
->
˛ón_°¨t
 = clean_start;

873 
c⁄ãxt
->
wûl
 = 
wûl_°ru˘
;

874 
wûl_°ru˘
 = 
NULL
;

876 if(
c⁄ãxt
->
auth_mëhod
){

877 
rc
 = 
	`mosquôto_£curôy_auth_°¨t
(
c⁄ãxt
, 
Ál£
, 
auth_d©a
, 
auth_d©a_Àn
, &
auth_d©a_out
, &
auth_d©a_out_Àn
);

878 
	`mosquôto__‰ì
(
auth_d©a
);

879 
auth_d©a
 = 
NULL
;

880 if(
rc
 =
MOSQ_ERR_SUCCESS
){

881  
	`c⁄√˘__⁄_auth‹i£d
(
c⁄ãxt
, 
auth_d©a_out
, 
auth_d©a_out_Àn
);

882 }if(
rc
 =
MOSQ_ERR_AUTH_CONTINUE
){

883 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_authítiˇtög
);

884 
rc
 = 
	`£nd__auth
(
c⁄ãxt
, 
MQTT_RC_CONTINUE_AUTHENTICATION
, 
auth_d©a_out
, 
auth_d©a_out_Àn
);

885 
	`‰ì
(
auth_d©a_out
);

886  
rc
;

888 
	`‰ì
(
auth_d©a_out
);

889 
auth_d©a_out
 = 
NULL
;

890 
	`wûl__˛ór
(
c⁄ãxt
);

891 if(
rc
 =
MOSQ_ERR_AUTH
){

892 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_NOT_AUTHORIZED
, 
NULL
);

893 
	`mosquôto__‰ì
(
c⁄ãxt
->
id
);

894 
c⁄ãxt
->
id
 = 
NULL
;

895 
h™dÀ_c⁄√˘_îr‹
;

896 }if(
rc
 =
MOSQ_ERR_NOT_SUPPORTED
){

898 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_BAD_AUTHENTICATION_METHOD
, 
NULL
);

899 
	`mosquôto__‰ì
(
c⁄ãxt
->
id
);

900 
c⁄ãxt
->
id
 = 
NULL
;

901 
h™dÀ_c⁄√˘_îr‹
;

903 
	`mosquôto__‰ì
(
c⁄ãxt
->
id
);

904 
c⁄ãxt
->
id
 = 
NULL
;

905 
h™dÀ_c⁄√˘_îr‹
;

909 #ifde‡
WITH_TLS


910 if(
c⁄ãxt
->
li°íî
->
s¶_˘x
 && (c⁄ãxt->li°íî->
u£_idítôy_as_u£∫ame
 || c⁄ãxt->li°íî->
u£_subje˘_as_u£∫ame
)){

915 
rc
 = 
	`mosquôto_u≈wd_check
(
c⁄ãxt
);

916 
rc
){

917 
MOSQ_ERR_SUCCESS
:

919 
MOSQ_ERR_AUTH
:

920 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

921 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
MQTT_RC_NOT_AUTHORIZED
, 
NULL
);

923 
	`£nd__c⁄«ck
(
c⁄ãxt
, 0, 
CONNACK_REFUSED_NOT_AUTHORIZED
, 
NULL
);

925 
rc
 = 
MOSQ_ERR_AUTH
;

926 
h™dÀ_c⁄√˘_îr‹
;

929 
rc
 = 
MOSQ_ERR_UNKNOWN
;

930 
h™dÀ_c⁄√˘_îr‹
;

934  
	`c⁄√˘__⁄_auth‹i£d
(
c⁄ãxt
, 
NULL
, 0);

938 
h™dÀ_c⁄√˘_îr‹
:

939 
	`mosquôto__‰ì
(
auth_d©a
);

940 
	`mosquôto__‰ì
(
˛õ¡_id
);

941 
	`mosquôto__‰ì
(
u£∫ame
);

942 
	`mosquôto__‰ì
(
∑ssw‹d
);

943 if(
wûl_°ru˘
){

944 
	`mosquôto_¥›îty_‰ì_Æl
(&
wûl_°ru˘
->
¥›îtõs
);

945 
	`mosquôto__‰ì
(
wûl_°ru˘
->
msg
.
∑ylﬂd
);

946 
	`mosquôto__‰ì
(
wûl_°ru˘
->
msg
.
t›ic
);

947 
	`mosquôto__‰ì
(
wûl_°ru˘
);

949 
c⁄ãxt
->
wûl
 = 
NULL
;

950 #ifde‡
WITH_TLS


951 if(
˛õ¡_˚π
Ë
	`X509_‰ì
(client_cert);

954 
c⁄ãxt
->
˛ón_°¨t
 = 
åue
;

955 
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 = 0;

956 
c⁄ãxt
->
wûl_dñay_öãrvÆ
 = 0;

957  
rc
;

958 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/handle_disconnect.c

19 
	~"c⁄fig.h
"

21 
	~"mosquôto_brokî_öã∫Æ.h
"

22 
	~"mqâ_¥Ÿocﬁ.h
"

23 
	~"∑ckë_mosq.h
"

24 
	~"¥›îty_mosq.h
"

25 
	~"£nd_mosq.h
"

26 
	~"utû_mosq.h
"

27 
	~"wûl_mosq.h
"

30 
	$h™dÀ__disc⁄√˘
(
mosquôto
 *
c⁄ãxt
)

32 
rc
;

33 
uöt8_t
 
ªas⁄_code
 = 0;

34 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

36 if(!
c⁄ãxt
){

37  
MOSQ_ERR_INVAL
;

40 if(
c⁄ãxt
->
ö_∑ckë
.
comm™d
 !
CMD_DISCONNECT
){

41  
MOSQ_ERR_MALFORMED_PACKET
;

44 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
 && c⁄ãxt->
ö_∑ckë
.
ªmaöög_Àngth
 > 0){

46 
rc
 = 
	`∑ckë__ªad_byã
(&
c⁄ãxt
->
ö_∑ckë
, &
ªas⁄_code
);

47 if(
rc
) Ñc;

49 if(
c⁄ãxt
->
ö_∑ckë
.
ªmaöög_Àngth
 > 1){

50 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_DISCONNECT
, &
c⁄ãxt
->
ö_∑ckë
, &
¥›îtõs
);

51 if(
rc
) Ñc;

54 
rc
 = 
	`¥›îty__¥o˚ss_disc⁄√˘
(
c⁄ãxt
, &
¥›îtõs
);

55 if(
rc
){

56 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

57  
rc
;

59 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

61 if(
c⁄ãxt
->
ö_∑ckë
.
pos
 !c⁄ãxt->ö_∑ckë.
ªmaöög_Àngth
){

62  
MOSQ_ERR_PROTOCOL
;

64 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Re˚ived DISCONNECT from %s", 
c⁄ãxt
->
id
);

65 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ311
 || c⁄ãxt->¥Ÿocﬁ =
mosq_p_mqâ5
){

66 if((
c⁄ãxt
->
ö_∑ckë
.
comm™d
&0x0F) != 0x00){

67 
	`do_disc⁄√˘
(
c⁄ãxt
, 
MOSQ_ERR_PROTOCOL
);

68  
MOSQ_ERR_PROTOCOL
;

71 if(
ªas⁄_code
 =
MQTT_RC_DISCONNECT_WITH_WILL_MSG
){

72 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_disc⁄√˘_wôh_wûl
);

74 
	`wûl__˛ór
(
c⁄ãxt
);

75 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_disc⁄√˘ög
);

77 
	`do_disc⁄√˘
(
c⁄ãxt
, 
MOSQ_ERR_SUCCESS
);

78  
MOSQ_ERR_SUCCESS
;

79 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/handle_publish.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

25 
	~"mosquôto_brokî_öã∫Æ.h
"

26 
	~"Æüs_mosq.h
"

27 
	~"mqâ_¥Ÿocﬁ.h
"

28 
	~"mem‹y_mosq.h
"

29 
	~"∑ckë_mosq.h
"

30 
	~"¥›îty_mosq.h
"

31 
	~"ªad_h™dÀ.h
"

32 
	~"£nd_mosq.h
"

33 
	~"sys_åì.h
"

34 
	~"utû_mosq.h
"

37 
	$h™dÀ__publish
(
mosquôto
 *
c⁄ãxt
)

39 
uöt8_t
 
dup
;

40 
rc
 = 0;

41 
rc2
;

42 
uöt8_t
 
hódî
 = 
c⁄ãxt
->
ö_∑ckë
.
comm™d
;

43 
ªs
 = 0;

44 
mosquôto_msg_°‹e
 *
msg
, *
°‹ed
 = 
NULL
;

45 
size_t
 
Àn
;

46 
uöt16_t
 
¶í
;

47 *
t›ic_mou¡
;

48 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

49 
mosquôto_¥›îty
 *
p
, *
p_¥ev
;

50 
mosquôto_¥›îty
 *
msg_¥›îtõs_œ°
;

51 
uöt32_t
 
mesßge_expúy_öãrvÆ
 = 0;

52 
t›ic_Æüs
 = -1;

53 
uöt8_t
 
ªas⁄_code
 = 0;

54 
uöt16_t
 
mid
 = 0;

56 if(
c⁄ãxt
->
°©e
 !
mosq_cs_a˘ive
){

57  
MOSQ_ERR_PROTOCOL
;

60 
msg
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_msg_°‹e
));

61 if(
msg
 =
NULL
){

62  
MOSQ_ERR_NOMEM
;

65 
dup
 = (
hódî
 & 0x08)>>3;

66 
msg
->
qos
 = (
hódî
 & 0x06)>>1;

67 if(
dup
 =1 && 
msg
->
qos
 == 0){

68 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
,

69 "InvÆid PUBLISH (QoS=0ánd DUP=1Ë‰om %s, disc⁄√˘ög.", 
c⁄ãxt
->
id
);

70 
	`db__msg_°‹e_‰ì
(
msg
);

71  
MOSQ_ERR_MALFORMED_PACKET
;

73 if(
msg
->
qos
 == 3){

74 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
,

75 "InvÆid QoS i¿PUBLISH from %s, disc⁄√˘ög.", 
c⁄ãxt
->
id
);

76 
	`db__msg_°‹e_‰ì
(
msg
);

77  
MOSQ_ERR_MALFORMED_PACKET
;

79 if(
msg
->
qos
 > 
c⁄ãxt
->
max_qos
){

80 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
,

81 "Toÿhigh QoS i¿PUBLISH from %s, disc⁄√˘ög.", 
c⁄ãxt
->
id
);

82 
	`db__msg_°‹e_‰ì
(
msg
);

83  
MOSQ_ERR_QOS_NOT_SUPPORTED
;

85 
msg
->
ªèö
 = (
hódî
 & 0x01);

87 if(
msg
->
ªèö
 && 
db
.
c⁄fig
->
ªèö_avaûabÀ
 =
Ál£
){

88 
	`db__msg_°‹e_‰ì
(
msg
);

89  
MOSQ_ERR_RETAIN_NOT_SUPPORTED
;

92 if(
	`∑ckë__ªad_°rög
(&
c⁄ãxt
->
ö_∑ckë
, &
msg
->
t›ic
, &
¶í
)){

93 
	`db__msg_°‹e_‰ì
(
msg
);

94  
MOSQ_ERR_MALFORMED_PACKET
;

96 if(!
¶í
 && 
c⁄ãxt
->
¥Ÿocﬁ
 !
mosq_p_mqâ5
){

98 
	`db__msg_°‹e_‰ì
(
msg
);

99  
MOSQ_ERR_MALFORMED_PACKET
;

102 if(
msg
->
qos
 > 0){

103 if(
	`∑ckë__ªad_uöt16
(&
c⁄ãxt
->
ö_∑ckë
, &
mid
)){

104 
	`db__msg_°‹e_‰ì
(
msg
);

105  
MOSQ_ERR_MALFORMED_PACKET
;

107 if(
mid
 == 0){

108 
	`db__msg_°‹e_‰ì
(
msg
);

109  
MOSQ_ERR_PROTOCOL
;

113 
msg
->
sour˚_mid
 = 
mid
;

117 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

118 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_PUBLISH
, &
c⁄ãxt
->
ö_∑ckë
, &
¥›îtõs
);

119 if(
rc
){

120 
	`db__msg_°‹e_‰ì
(
msg
);

121  
rc
;

124 
p
 = 
¥›îtõs
;

125 
p_¥ev
 = 
NULL
;

126 
msg
->
¥›îtõs
 = 
NULL
;

127 
msg_¥›îtõs_œ°
 = 
NULL
;

128 
p
){

129 
p
->
idítifõr
){

130 
MQTT_PROP_CONTENT_TYPE
:

131 
MQTT_PROP_CORRELATION_DATA
:

132 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
:

133 
MQTT_PROP_RESPONSE_TOPIC
:

134 
MQTT_PROP_USER_PROPERTY
:

135 if(
msg
->
¥›îtõs
){

136 
msg_¥›îtõs_œ°
->
√xt
 = 
p
;

137 
msg_¥›îtõs_œ°
 = 
p
;

139 
msg
->
¥›îtõs
 = 
p
;

140 
msg_¥›îtõs_œ°
 = 
p
;

142 if(
p_¥ev
){

143 
p_¥ev
->
√xt
 = 
p
->next;

144 
p
 = 
p_¥ev
->
√xt
;

146 
¥›îtõs
 = 
p
->
√xt
;

147 
p
 = 
¥›îtõs
;

149 
msg_¥›îtõs_œ°
->
√xt
 = 
NULL
;

152 
MQTT_PROP_TOPIC_ALIAS
:

153 
t›ic_Æüs
 = 
p
->
vÆue
.
i16
;

154 
p_¥ev
 = 
p
;

155 
p
 =Ö->
√xt
;

158 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
:

159 
mesßge_expúy_öãrvÆ
 = 
p
->
vÆue
.
i32
;

160 
p_¥ev
 = 
p
;

161 
p
 =Ö->
√xt
;

164 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
:

165 
p_¥ev
 = 
p
;

166 
p
 =Ö->
√xt
;

170 
p
 =Ö->
√xt
;

175 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

177 if(
t›ic_Æüs
 =0 || (
c⁄ãxt
->
li°íî
 &&Å›ic_Æü†> c⁄ãxt->li°íî->
max_t›ic_Æüs
)){

178 
	`db__msg_°‹e_‰ì
(
msg
);

179  
MOSQ_ERR_TOPIC_ALIAS_INVALID
;

180 }if(
t›ic_Æüs
 > 0){

181 if(
msg
->
t›ic
){

182 
rc
 = 
	`Æüs__add
(
c⁄ãxt
, 
msg
->
t›ic
, (
uöt16_t
)
t›ic_Æüs
);

183 if(
rc
){

184 
	`db__msg_°‹e_‰ì
(
msg
);

185  
rc
;

188 
rc
 = 
	`Æüs__föd
(
c⁄ãxt
, &
msg
->
t›ic
, (
uöt16_t
)
t›ic_Æüs
);

189 if(
rc
){

190 
	`db__msg_°‹e_‰ì
(
msg
);

191  
MOSQ_ERR_PROTOCOL
;

196 #ifde‡
WITH_BRIDGE


197 
rc
 = 
	`bridge__ªm≠_t›ic_ö
(
c⁄ãxt
, &
msg
->
t›ic
);

198 if(
rc
){

199 
	`db__msg_°‹e_‰ì
(
msg
);

200  
rc
;

204 if(
	`mosquôto_pub_t›ic_check
(
msg
->
t›ic
Ë!
MOSQ_ERR_SUCCESS
){

206 
	`db__msg_°‹e_‰ì
(
msg
);

207  
MOSQ_ERR_MALFORMED_PACKET
;

210 
msg
->
∑ylﬂdÀn
 = 
c⁄ãxt
->
ö_∑ckë
.
ªmaöög_Àngth
 - c⁄ãxt->ö_∑ckë.
pos
;

211 
	`G_PUB_BYTES_RECEIVED_INC
(
msg
->
∑ylﬂdÀn
);

212 if(
c⁄ãxt
->
li°íî
 && c⁄ãxt->li°íî->
mou¡_poöt
){

213 
Àn
 = 
	`°æí
(
c⁄ãxt
->
li°íî
->
mou¡_poöt
Ë+ såÀn(
msg
->
t›ic
) + 1;

214 
t›ic_mou¡
 = 
	`mosquôto__mÆloc
(
Àn
+1);

215 if(!
t›ic_mou¡
){

216 
	`db__msg_°‹e_‰ì
(
msg
);

217  
MOSQ_ERR_NOMEM
;

219 
	`¢¥ötf
(
t›ic_mou¡
, 
Àn
, "%s%s", 
c⁄ãxt
->
li°íî
->
mou¡_poöt
, 
msg
->
t›ic
);

220 
t›ic_mou¡
[
Àn
] = '\0';

222 
	`mosquôto__‰ì
(
msg
->
t›ic
);

223 
msg
->
t›ic
 = 
t›ic_mou¡
;

226 if(
msg
->
∑ylﬂdÀn
){

227 if(
db
.
c⁄fig
->
mesßge_size_limô
 && 
msg
->
∑ylﬂdÀn
 > db.config->message_size_limit){

228 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Dr›≥dÅoÿœrgêPUBLISH from %†(d%d, q%d,Ñ%d, m%d, '%s', ... (%ld byãs))", 
c⁄ãxt
->
id
, 
dup
, 
msg
->
qos
, msg->
ªèö
, msg->
sour˚_mid
, msg->
t›ic
, ()msg->
∑ylﬂdÀn
);

229 
ªas⁄_code
 = 
MQTT_RC_PACKET_TOO_LARGE
;

230 
¥o˚ss_bad_mesßge
;

232 
msg
->
∑ylﬂd
 = 
	`mosquôto__mÆloc
(msg->
∑ylﬂdÀn
+1);

233 if(
msg
->
∑ylﬂd
 =
NULL
){

234 
	`db__msg_°‹e_‰ì
(
msg
);

235  
MOSQ_ERR_NOMEM
;

238 ((
uöt8_t
 *)
msg
->
∑ylﬂd
)[msg->
∑ylﬂdÀn
] = 0;

240 if(
	`∑ckë__ªad_byãs
(&
c⁄ãxt
->
ö_∑ckë
, 
msg
->
∑ylﬂd
, msg->
∑ylﬂdÀn
)){

241 
	`db__msg_°‹e_‰ì
(
msg
);

242  
MOSQ_ERR_MALFORMED_PACKET
;

247 
rc
 = 
	`mosquôto_a˛_check
(
c⁄ãxt
, 
msg
->
t›ic
, msg->
∑ylﬂdÀn
, msg->
∑ylﬂd
, msg->
qos
, msg->
ªèö
, 
MOSQ_ACL_WRITE
);

248 if(
rc
 =
MOSQ_ERR_ACL_DENIED
){

249 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
,

251 
c⁄ãxt
->
id
, 
dup
, 
msg
->
qos
, msg->
ªèö
, msg->
sour˚_mid
, msg->
t›ic
,

252 ()
msg
->
∑ylﬂdÀn
);

253 
ªas⁄_code
 = 
MQTT_RC_NOT_AUTHORIZED
;

254 
¥o˚ss_bad_mesßge
;

255 }if(
rc
 !
MOSQ_ERR_SUCCESS
){

256 
	`db__msg_°‹e_‰ì
(
msg
);

257  
rc
;

260 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Re˚ived PUBLISH from %†(d%d, q%d,Ñ%d, m%d, '%s', ... (%ld byãs))", 
c⁄ãxt
->
id
, 
dup
, 
msg
->
qos
, msg->
ªèö
, msg->
sour˚_mid
, msg->
t›ic
, ()msg->
∑ylﬂdÀn
);

262 if(!
	`°∫cmp
(
msg
->
t›ic
, "$CONTROL/", 9)){

263 #ifde‡
WITH_CONTROL


264 
rc
 = 
	`c⁄åﬁ__¥o˚ss
(
c⁄ãxt
, 
msg
);

265 
	`db__msg_°‹e_‰ì
(
msg
);

266  
rc
;

268 
ªas⁄_code
 = 
MQTT_RC_IMPLEMENTATION_SPECIFIC
;

269 
¥o˚ss_bad_mesßge
;

274 
rc
 = 
	`∂ugö__h™dÀ_mesßge
(
c⁄ãxt
, 
msg
);

275 if(
rc
 =
MOSQ_ERR_ACL_DENIED
){

276 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
,

278 
c⁄ãxt
->
id
, 
dup
, 
msg
->
qos
, msg->
ªèö
, msg->
sour˚_mid
, msg->
t›ic
,

279 ()
msg
->
∑ylﬂdÀn
);

281 
ªas⁄_code
 = 
MQTT_RC_NOT_AUTHORIZED
;

282 
¥o˚ss_bad_mesßge
;

283 }if(
rc
 !
MOSQ_ERR_SUCCESS
){

284 
	`db__msg_°‹e_‰ì
(
msg
);

285  
rc
;

289 if(
msg
->
qos
 > 0){

290 
	`db__mesßge_°‹e_föd
(
c⁄ãxt
, 
msg
->
sour˚_mid
, &
°‹ed
);

293 if(
°‹ed
 && 
msg
->
sour˚_mid
 != 0 &&

294 (
°‹ed
->
qos
 !
msg
->qos

295 || 
°‹ed
->
∑ylﬂdÀn
 !
msg
->payloadlen

296 || 
	`°rcmp
(
°‹ed
->
t›ic
, 
msg
->topic)

297 || 
	`memcmp
(
°‹ed
->
∑ylﬂd
, 
msg
->∑ylﬂd, msg->
∑ylﬂdÀn
) )){

299 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Reu£d mesßgêID %u from %†dëe˘ed. CÀ¨ög from st‹age.", 
msg
->
sour˚_mid
, 
c⁄ãxt
->
id
);

300 
	`db__mesßge_ªmove_öcomög
(
c⁄ãxt
, 
msg
->
sour˚_mid
);

301 
°‹ed
 = 
NULL
;

304 if(!
°‹ed
){

305 if(
msg
->
qos
 == 0

306 || 
	`db__ªady_f‹_Êight
(
c⁄ãxt
, 
mosq_md_ö
, 
msg
->
qos
)

307 || 
	`db__ªady_f‹_queue
(
c⁄ãxt
, 
msg
->
qos
, &c⁄ãxt->
msgs_ö
)){

309 
dup
 = 0;

310 
rc
 = 
	`db__mesßge_°‹e
(
c⁄ãxt
, 
msg
, 
mesßge_expúy_öãrvÆ
, 0, 
mosq_mo_˛õ¡
);

311 if(
rc
) Ñc;

314 
ªas⁄_code
 = 
MQTT_RC_QUOTA_EXCEEDED
;

315 
¥o˚ss_bad_mesßge
;

317 
°‹ed
 = 
msg
;

318 
msg
 = 
NULL
;

320 
	`db__msg_°‹e_‰ì
(
msg
);

321 
msg
 = 
NULL
;

322 
dup
 = 1;

325 
°‹ed
->
qos
){

327 
rc2
 = 
	`sub__mesßges_queue
(
c⁄ãxt
->
id
, 
°‹ed
->
t›ic
, st‹ed->
qos
, st‹ed->
ªèö
, &stored);

328 if(
rc2
 > 0Ë
rc
 = 1;

331 
	`utû__de¸emít_ª˚ive_quŸa
(
c⁄ãxt
);

332 
rc2
 = 
	`sub__mesßges_queue
(
c⁄ãxt
->
id
, 
°‹ed
->
t›ic
, st‹ed->
qos
, st‹ed->
ªèö
, &stored);

334 if(
rc2
 =
MOSQ_ERR_SUCCESS
 || 
c⁄ãxt
->
¥Ÿocﬁ
 !
mosq_p_mqâ5
){

335 if(
	`£nd__puback
(
c⁄ãxt
, 
mid
, 0, 
NULL
)Ë
rc
 = 1;

336 }if(
rc2
 =
MOSQ_ERR_NO_SUBSCRIBERS
){

337 if(
	`£nd__puback
(
c⁄ãxt
, 
mid
, 
MQTT_RC_NO_MATCHING_SUBSCRIBERS
, 
NULL
)Ë
rc
 = 1;

339 
rc
 = 
rc2
;

343 if(
dup
 == 0){

344 
ªs
 = 
	`db__mesßge_ö£π
(
c⁄ãxt
, 
°‹ed
->
sour˚_mid
, 
mosq_md_ö
, st‹ed->
qos
, st‹ed->
ªèö
, st‹ed, 
NULL
, 
Ál£
);

346 
ªs
 = 0;

351 if(!
ªs
){

352 if(
	`£nd__pubªc
(
c⁄ãxt
, 
°‹ed
->
sour˚_mid
, 0, 
NULL
)Ë
rc
 = 1;

353 }if(
ªs
 == 1){

354 
rc
 = 1;

359 
	`db__mesßge_wrôe_queued_ö
(
c⁄ãxt
);

360  
rc
;

361 
¥o˚ss_bad_mesßge
:

362 
rc
 = 1;

363 if(
msg
){

364 
msg
->
qos
){

366 
rc
 = 
MOSQ_ERR_SUCCESS
;

369 
rc
 = 
	`£nd__puback
(
c⁄ãxt
, 
msg
->
sour˚_mid
, 
ªas⁄_code
, 
NULL
);

372 
rc
 = 
	`£nd__pubªc
(
c⁄ãxt
, 
msg
->
sour˚_mid
, 
ªas⁄_code
, 
NULL
);

375 
	`db__msg_°‹e_‰ì
(
msg
);

377  
rc
;

378 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/handle_subscribe.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°rög.h
>

24 
	~"mosquôto_brokî_öã∫Æ.h
"

25 
	~"mem‹y_mosq.h
"

26 
	~"mqâ_¥Ÿocﬁ.h
"

27 
	~"∑ckë_mosq.h
"

28 
	~"¥›îty_mosq.h
"

32 
	$h™dÀ__subs¸ibe
(
mosquôto
 *
c⁄ãxt
)

34 
rc
 = 0;

35 
rc2
;

36 
uöt16_t
 
mid
;

37 *
sub
;

38 
uöt8_t
 
subs¸ùti⁄_›ti⁄s
;

39 
uöt32_t
 
subs¸ùti⁄_idítifõr
 = 0;

40 
uöt8_t
 
qos
;

41 
uöt8_t
 
ªèö_h™dlög
 = 0;

42 
uöt8_t
 *
∑ylﬂd
 = 
NULL
, *
tmp_∑ylﬂd
;

43 
uöt32_t
 
∑ylﬂdÀn
 = 0;

44 
size_t
 
Àn
;

45 
uöt16_t
 
¶í
;

46 *
sub_mou¡
;

47 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

48 
boﬁ
 
Ælowed
;

50 if(!
c⁄ãxt
Ë 
MOSQ_ERR_INVAL
;

52 if(
c⁄ãxt
->
°©e
 !
mosq_cs_a˘ive
){

53  
MOSQ_ERR_PROTOCOL
;

55 if(
c⁄ãxt
->
ö_∑ckë
.
comm™d
 !(
CMD_SUBSCRIBE
|2)){

56  
MOSQ_ERR_MALFORMED_PACKET
;

59 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Re˚ived SUBSCRIBE from %s", 
c⁄ãxt
->
id
);

61 if(
c⁄ãxt
->
¥Ÿocﬁ
 !
mosq_p_mqâ31
){

62 if((
c⁄ãxt
->
ö_∑ckë
.
comm™d
&0x0F) != 0x02){

63  
MOSQ_ERR_MALFORMED_PACKET
;

66 if(
	`∑ckë__ªad_uöt16
(&
c⁄ãxt
->
ö_∑ckë
, &
mid
)Ë 
MOSQ_ERR_MALFORMED_PACKET
;

67 if(
mid
 =0Ë 
MOSQ_ERR_MALFORMED_PACKET
;

69 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

70 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_SUBSCRIBE
, &
c⁄ãxt
->
ö_∑ckë
, &
¥›îtõs
);

71 if(
rc
){

75 if(
rc
 =
MOSQ_ERR_PROTOCOL
){

76  
MOSQ_ERR_MALFORMED_PACKET
;

78  
rc
;

82 if(
	`mosquôto_¥›îty_ªad_v¨öt
(
¥›îtõs
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
,

83 &
subs¸ùti⁄_idítifõr
, 
Ál£
)){

86 if(
subs¸ùti⁄_idítifõr
 == 0){

87 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

88  
MOSQ_ERR_MALFORMED_PACKET
;

92 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

96 
c⁄ãxt
->
ö_∑ckë
.
pos
 < c⁄ãxt->ö_∑ckë.
ªmaöög_Àngth
){

97 
sub
 = 
NULL
;

98 if(
	`∑ckë__ªad_°rög
(&
c⁄ãxt
->
ö_∑ckë
, &
sub
, &
¶í
)){

99 
	`mosquôto__‰ì
(
∑ylﬂd
);

100  
MOSQ_ERR_MALFORMED_PACKET
;

103 if(
sub
){

104 if(!
¶í
){

105 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
,

107 
c⁄ãxt
->
addªss
);

108 
	`mosquôto__‰ì
(
sub
);

109 
	`mosquôto__‰ì
(
∑ylﬂd
);

110  
MOSQ_ERR_MALFORMED_PACKET
;

112 if(
	`mosquôto_sub_t›ic_check
(
sub
)){

113 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
,

115 
c⁄ãxt
->
addªss
);

116 
	`mosquôto__‰ì
(
sub
);

117 
	`mosquôto__‰ì
(
∑ylﬂd
);

118  
MOSQ_ERR_MALFORMED_PACKET
;

121 if(
	`∑ckë__ªad_byã
(&
c⁄ãxt
->
ö_∑ckë
, &
subs¸ùti⁄_›ti⁄s
)){

122 
	`mosquôto__‰ì
(
sub
);

123 
	`mosquôto__‰ì
(
∑ylﬂd
);

124  
MOSQ_ERR_MALFORMED_PACKET
;

126 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ31
 || c⁄ãxt->¥Ÿocﬁ =
mosq_p_mqâ311
){

127 
qos
 = 
subs¸ùti⁄_›ti⁄s
;

128 if(
c⁄ãxt
->
is_bridge
){

129 
subs¸ùti⁄_›ti⁄s
 = 
MQTT_SUB_OPT_RETAIN_AS_PUBLISHED
 | 
MQTT_SUB_OPT_NO_LOCAL
;

132 
qos
 = 
subs¸ùti⁄_›ti⁄s
 & 0x03;

133 
subs¸ùti⁄_›ti⁄s
 &= 0xFC;

135 
ªèö_h™dlög
 = (
subs¸ùti⁄_›ti⁄s
 & 0x30);

136 if(
ªèö_h™dlög
 =0x30 || (
subs¸ùti⁄_›ti⁄s
 & 0xC0) != 0){

137 
	`mosquôto__‰ì
(
sub
);

138 
	`mosquôto__‰ì
(
∑ylﬂd
);

139  
MOSQ_ERR_MALFORMED_PACKET
;

142 if(
qos
 > 2){

143 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
,

145 
c⁄ãxt
->
addªss
);

146 
	`mosquôto__‰ì
(
sub
);

147 
	`mosquôto__‰ì
(
∑ylﬂd
);

148  
MOSQ_ERR_MALFORMED_PACKET
;

150 if(
qos
 > 
c⁄ãxt
->
max_qos
){

151 
qos
 = 
c⁄ãxt
->
max_qos
;

155 if(
c⁄ãxt
->
li°íî
 && c⁄ãxt->li°íî->
mou¡_poöt
){

156 
Àn
 = 
	`°æí
(
c⁄ãxt
->
li°íî
->
mou¡_poöt
Ë+ 
¶í
 + 1;

157 
sub_mou¡
 = 
	`mosquôto__mÆloc
(
Àn
+1);

158 if(!
sub_mou¡
){

159 
	`mosquôto__‰ì
(
sub
);

160 
	`mosquôto__‰ì
(
∑ylﬂd
);

161  
MOSQ_ERR_NOMEM
;

163 
	`¢¥ötf
(
sub_mou¡
, 
Àn
, "%s%s", 
c⁄ãxt
->
li°íî
->
mou¡_poöt
, 
sub
);

164 
sub_mou¡
[
Àn
] = '\0';

166 
	`mosquôto__‰ì
(
sub
);

167 
sub
 = 
sub_mou¡
;

170 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "\t%†(QoS %d)", 
sub
, 
qos
);

172 
Ælowed
 = 
åue
;

173 
rc2
 = 
	`mosquôto_a˛_check
(
c⁄ãxt
, 
sub
, 0, 
NULL
, 
qos
, 
Ál£
, 
MOSQ_ACL_SUBSCRIBE
);

174 
rc2
){

175 
MOSQ_ERR_SUCCESS
:

177 
MOSQ_ERR_ACL_DENIED
:

178 
Ælowed
 = 
Ál£
;

179 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

180 
qos
 = 
MQTT_RC_NOT_AUTHORIZED
;

181 }if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ311
){

182 
qos
 = 0x80;

186 
	`mosquôto__‰ì
(
sub
);

187  
rc2
;

190 if(
Ælowed
){

191 
rc2
 = 
	`sub__add
(
c⁄ãxt
, 
sub
, 
qos
, 
subs¸ùti⁄_idítifõr
, 
subs¸ùti⁄_›ti⁄s
, &
db
.
subs
);

192 if(
rc2
 > 0){

193 
	`mosquôto__‰ì
(
sub
);

194  
rc2
;

196 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ311
 || c⁄ãxt->¥Ÿocﬁ =
mosq_p_mqâ31
){

197 if(
rc2
 =
MOSQ_ERR_SUCCESS
 ||Ñc2 =
MOSQ_ERR_SUB_EXISTS
){

198 if(
	`ªèö__queue
(
c⁄ãxt
, 
sub
, 
qos
, 0)Ë
rc
 = 1;

201 if((
ªèö_h™dlög
 =
MQTT_SUB_OPT_SEND_RETAIN_ALWAYS
)

202 || (
rc2
 =
MOSQ_ERR_SUCCESS
 && 
ªèö_h™dlög
 =
MQTT_SUB_OPT_SEND_RETAIN_NEW
)){

204 if(
	`ªèö__queue
(
c⁄ãxt
, 
sub
, 
qos
, 
subs¸ùti⁄_idítifõr
)Ë
rc
 = 1;

208 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_SUBSCRIBE
, "%†%d %s", 
c⁄ãxt
->
id
, 
qos
, 
sub
);

210 
	`mosquôto__‰ì
(
sub
);

212 
tmp_∑ylﬂd
 = 
	`mosquôto__ªÆloc
(
∑ylﬂd
, 
∑ylﬂdÀn
 + 1);

213 if(
tmp_∑ylﬂd
){

214 
∑ylﬂd
 = 
tmp_∑ylﬂd
;

215 
∑ylﬂd
[
∑ylﬂdÀn
] = 
qos
;

216 
∑ylﬂdÀn
++;

218 
	`mosquôto__‰ì
(
∑ylﬂd
);

220  
MOSQ_ERR_NOMEM
;

225 if(
c⁄ãxt
->
¥Ÿocﬁ
 !
mosq_p_mqâ31
){

226 if(
∑ylﬂdÀn
 == 0){

228  
MOSQ_ERR_MALFORMED_PACKET
;

231 if(
	`£nd__suback
(
c⁄ãxt
, 
mid
, 
∑ylﬂdÀn
, 
∑ylﬂd
)Ë
rc
 = 1;

232 
	`mosquôto__‰ì
(
∑ylﬂd
);

234 #ifde‡
WITH_PERSISTENCE


235 
db
.
≥rsi°í˚_ch™ges
++;

238 if(
c⁄ãxt
->
cuºít_out_∑ckë
 =
NULL
){

239 
rc
 = 
	`db__mesßge_wrôe_queued_out
(
c⁄ãxt
);

240 if(
rc
) Ñc;

241 
rc
 = 
	`db__mesßge_wrôe_öÊight_out_œã°
(
c⁄ãxt
);

242 if(
rc
) Ñc;

245  
rc
;

246 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/handle_unsubscribe.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°rög.h
>

24 
	~"mosquôto_brokî_öã∫Æ.h
"

25 
	~"mem‹y_mosq.h
"

26 
	~"mqâ_¥Ÿocﬁ.h
"

27 
	~"∑ckë_mosq.h
"

28 
	~"£nd_mosq.h
"

30 
	$h™dÀ__unsubs¸ibe
(
mosquôto
 *
c⁄ãxt
)

32 
uöt16_t
 
mid
;

33 *
sub
;

34 
uöt16_t
 
¶í
;

35 
rc
;

36 
uöt8_t
 
ªas⁄
 = 0;

37 
ªas⁄_code_cou¡
 = 0;

38 
ªas⁄_code_max
;

39 
uöt8_t
 *
ªas⁄_codes
 = 
NULL
, *
ªas⁄_tmp
;

40 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

41 
boﬁ
 
Ælowed
;

43 if(!
c⁄ãxt
Ë 
MOSQ_ERR_INVAL
;

45 if(
c⁄ãxt
->
°©e
 !
mosq_cs_a˘ive
){

46  
MOSQ_ERR_PROTOCOL
;

48 if(
c⁄ãxt
->
ö_∑ckë
.
comm™d
 !(
CMD_UNSUBSCRIBE
|2)){

49  
MOSQ_ERR_MALFORMED_PACKET
;

51 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Re˚ived UNSUBSCRIBE from %s", 
c⁄ãxt
->
id
);

53 if(
c⁄ãxt
->
¥Ÿocﬁ
 !
mosq_p_mqâ31
){

54 if((
c⁄ãxt
->
ö_∑ckë
.
comm™d
&0x0F) != 0x02){

55  
MOSQ_ERR_MALFORMED_PACKET
;

58 if(
	`∑ckë__ªad_uöt16
(&
c⁄ãxt
->
ö_∑ckë
, &
mid
)Ë 
MOSQ_ERR_MALFORMED_PACKET
;

59 if(
mid
 =0Ë 
MOSQ_ERR_MALFORMED_PACKET
;

61 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

62 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_UNSUBSCRIBE
, &
c⁄ãxt
->
ö_∑ckë
, &
¥›îtõs
);

63 if(
rc
){

67 if(
rc
 =
MOSQ_ERR_PROTOCOL
){

68  
MOSQ_ERR_MALFORMED_PACKET
;

70  
rc
;

74 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

77 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ311
 || c⁄ãxt->¥Ÿocﬁ =
mosq_p_mqâ5
){

78 if(
c⁄ãxt
->
ö_∑ckë
.
pos
 =c⁄ãxt->ö_∑ckë.
ªmaöög_Àngth
){

80  
MOSQ_ERR_MALFORMED_PACKET
;

84 
ªas⁄_code_max
 = 10;

85 
ªas⁄_codes
 = 
	`mosquôto__mÆloc
((
size_t
)
ªas⁄_code_max
);

86 if(!
ªas⁄_codes
){

87  
MOSQ_ERR_NOMEM
;

90 
c⁄ãxt
->
ö_∑ckë
.
pos
 < c⁄ãxt->ö_∑ckë.
ªmaöög_Àngth
){

91 
sub
 = 
NULL
;

92 if(
	`∑ckë__ªad_°rög
(&
c⁄ãxt
->
ö_∑ckë
, &
sub
, &
¶í
)){

93 
	`mosquôto__‰ì
(
ªas⁄_codes
);

94  
MOSQ_ERR_MALFORMED_PACKET
;

97 if(!
¶í
){

98 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
,

100 
c⁄ãxt
->
id
);

101 
	`mosquôto__‰ì
(
sub
);

102 
	`mosquôto__‰ì
(
ªas⁄_codes
);

103  
MOSQ_ERR_MALFORMED_PACKET
;

105 if(
	`mosquôto_sub_t›ic_check
(
sub
)){

106 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
,

108 
c⁄ãxt
->
id
);

109 
	`mosquôto__‰ì
(
sub
);

110 
	`mosquôto__‰ì
(
ªas⁄_codes
);

111  
MOSQ_ERR_MALFORMED_PACKET
;

115 
Ælowed
 = 
åue
;

116 
rc
 = 
	`mosquôto_a˛_check
(
c⁄ãxt
, 
sub
, 0, 
NULL
, 0, 
Ál£
, 
MOSQ_ACL_UNSUBSCRIBE
);

117 
rc
){

118 
MOSQ_ERR_SUCCESS
:

120 
MOSQ_ERR_ACL_DENIED
:

121 
Ælowed
 = 
Ál£
;

122 
ªas⁄
 = 
MQTT_RC_NOT_AUTHORIZED
;

125 
	`mosquôto__‰ì
(
sub
);

126 
	`mosquôto__‰ì
(
ªas⁄_codes
);

127  
rc
;

130 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "\t%s", 
sub
);

131 if(
Ælowed
){

132 
rc
 = 
	`sub__ªmove
(
c⁄ãxt
, 
sub
, 
db
.
subs
, &
ªas⁄
);

134 
rc
 = 
MOSQ_ERR_SUCCESS
;

136 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_UNSUBSCRIBE
, "%†%s", 
c⁄ãxt
->
id
, 
sub
);

137 
	`mosquôto__‰ì
(
sub
);

138 if(
rc
){

139 
	`mosquôto__‰ì
(
ªas⁄_codes
);

140  
rc
;

143 
ªas⁄_codes
[
ªas⁄_code_cou¡
] = 
ªas⁄
;

144 
ªas⁄_code_cou¡
++;

145 if(
ªas⁄_code_cou¡
 =
ªas⁄_code_max
){

146 
ªas⁄_tmp
 = 
	`mosquôto__ªÆloc
(
ªas⁄_codes
, (
size_t
)(
ªas⁄_code_max
*2));

147 if(!
ªas⁄_tmp
){

148 
	`mosquôto__‰ì
(
ªas⁄_codes
);

149  
MOSQ_ERR_NOMEM
;

151 
ªas⁄_codes
 = 
ªas⁄_tmp
;

152 
ªas⁄_code_max
 *= 2;

155 #ifde‡
WITH_PERSISTENCE


156 
db
.
≥rsi°í˚_ch™ges
++;

159 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Sídög UNSUBACKÅÿ%s", 
c⁄ãxt
->
id
);

162 
rc
 = 
	`£nd__unsuback
(
c⁄ãxt
, 
mid
, 
ªas⁄_code_cou¡
, 
ªas⁄_codes
, 
NULL
);

163 
	`mosquôto__‰ì
(
ªas⁄_codes
);

164  
rc
;

165 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/keepalive.c

19 
	~"c⁄fig.h
"

20 
	~<time.h
>

21 
	~"mosquôto_brokî_öã∫Æ.h
"

24 
time_t
 
	gœ°_kì∑live_check
 = 0;

28 
	$kì∑live__add
(
mosquôto
 *
c⁄ãxt
)

30 
	`UNUSED
(
c⁄ãxt
);

32  
MOSQ_ERR_SUCCESS
;

33 
	}
}

36 
	$kì∑live__check
()

38 
mosquôto
 *
c⁄ãxt
, *
˘xt_tmp
;

40 if(
œ°_kì∑live_check
 + 5 < 
db
.
now_s
){

41 
œ°_kì∑live_check
 = 
db
.
now_s
;

44 
	`HASH_ITER
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, 
c⁄ãxt
, 
˘xt_tmp
){

45 if(
c⁄ãxt
->
sock
 !
INVALID_SOCKET
){

47 if(!(
c⁄ãxt
->
kì∑live
)

48 || 
c⁄ãxt
->
bridge


49 || 
db
.
now_s
 - 
c⁄ãxt
->
œ°_msg_ö
 <(
time_t
)(c⁄ãxt->
kì∑live
)*3/2){

53 
	`do_disc⁄√˘
(
c⁄ãxt
, 
MOSQ_ERR_KEEPALIVE
);

58 
	}
}

61 
	$kì∑live__ªmove
(
mosquôto
 *
c⁄ãxt
)

63 
	`UNUSED
(
c⁄ãxt
);

65  
MOSQ_ERR_SUCCESS
;

66 
	}
}

69 
	$kì∑live__ªmove_Æl
()

71 
	}
}

74 
	$kì∑live__upd©e
(
mosquôto
 *
c⁄ãxt
)

76 
c⁄ãxt
->
œ°_msg_ö
 = 
db
.
now_s
;

77  
MOSQ_ERR_SUCCESS
;

78 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/lib_load.h

19 #i‚de‡
LIB_LOAD_H


20 
	#LIB_LOAD_H


	)

22 #ifde‡
WIN32


23 
	~<wödows.h
>

25 
	~<dlf˙.h
>

28 #ifde‡
WIN32


29 
	#LIB_LOAD
(
A
Ë
	`LﬂdLibøry
(A)

	)

30 
	#LIB_CLOSE
(
A
Ë
	`FªeLibøry
(A)

	)

31 
	#LIB_SYM
(
HANDLE
, 
SYM
Ë
	`GëProcAddªss
(HANDLE, SYM)

	)

33 
	#LIB_LOAD
(
A
Ë
	`dl›í
(A, 
RTLD_NOW
|
RTLD_GLOBAL
)

	)

34 
	#LIB_CLOSE
(
A
Ë
	`dl˛o£
(A)

	)

35 
	#LIB_SYM
(
HANDLE
, 
SYM
Ë
	`dlsym
(HANDLE, SYM)

	)

38 
	#LIB_SYM_EASY
(
MEMBER
, 
HANDLE
, 
SYM
Ëif(!(MEMBER = 
	`LIB_SYM
(HANDLE, SYM)Ë 1

	)

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/logging.c

18 
	~"c⁄fig.h
"

20 
	~<°d¨g.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 #i‚de‡
WIN32


24 
	~<sy¶og.h
>

26 
	~<time.h
>

28 #i‡
deföed
(
__APPLE__
)

29 
	~<sys/time.h
>

32 #ifde‡
WITH_DLT


33 
	~<sys/°©.h
>

34 
	~<d…/d….h
>

37 
	~"loggög_mosq.h
"

38 
	~"mosquôto_brokî_öã∫Æ.h
"

39 
	~"mem‹y_mosq.h
"

40 
	~"misc_mosq.h
"

41 
	~"utû_mosq.h
"

43 #ifde‡
WIN32


44 
HANDLE
 
	gsy¶og_h
;

47 
	glog_Âå_buf„r
[
BUFSIZ
];

61 
	glog_de°ö©i⁄s
 = 
MQTT3_LOG_STDERR
;

62 
	glog_¥i‹ôõs
 = 
MOSQ_LOG_ERR
 | 
MOSQ_LOG_WARNING
 | 
MOSQ_LOG_NOTICE
 | 
MOSQ_LOG_INFO
;

64 #ifde‡
WITH_DLT


65 
D…C⁄ãxt
 
	gd…C⁄ãxt
;

66 
boﬁ
 
	gd…_Ælowed
 = 
Ál£
;

68 
	$d…_fifo_check
()

70 
°©
 
°©buf
;

71 
fd
;

78 
	`mem£t
(&
°©buf
, 0, (statbuf));

79 if(
	`°©
("/tmp/d…", &
°©buf
) == 0){

80 if(
	`S_ISFIFO
(
°©buf
.
°_mode
)){

81 
fd
 = 
	`›í
("/tmp/d…", 
O_NONBLOCK
 | 
O_WRONLY
);

82 if(
fd
 != -1){

83 
d…_Ælowed
 = 
åue
;

84 
	`˛o£
(
fd
);

88 
	}
}

91 
	$gë_time
(
tm
 **
ti
)

93 
time_t
 
s
;

95 
s
 = 
db
.
now_ªÆ_s
;

97 *
ti
 = 
	`loˇ…ime
(&
s
);

98 if(!(*
ti
)){

99 
	`Ârötf
(
°dîr
, "Error obtaining systemÅime.\n");

104 
	}
}

107 
	$log__öô
(
mosquôto__c⁄fig
 *
c⁄fig
)

109 
rc
 = 0;

111 
log_¥i‹ôõs
 = 
c⁄fig
->
log_ty≥
;

112 
log_de°ö©i⁄s
 = 
c⁄fig
->
log_de°
;

114 if(
log_de°ö©i⁄s
 & 
MQTT3_LOG_SYSLOG
){

115 #i‚de‡
WIN32


116 
	`›ílog
("mosquôto", 
LOG_PID
|
LOG_CONS
, 
c⁄fig
->
log_Ácûôy
);

118 
sy¶og_h
 = 
	`O≥nEvítLog
(
NULL
, "mosquitto");

122 if(
log_de°ö©i⁄s
 & 
MQTT3_LOG_FILE
){

123 
c⁄fig
->
log_Âå
 = 
	`mosquôto__f›í
(c⁄fig->
log_fûe
, "©", 
åue
);

124 if(
c⁄fig
->
log_Âå
){

125 
	`£tvbuf
(
c⁄fig
->
log_Âå
, 
log_Âå_buf„r
, 
_IOLBF
, (log_fptr_buffer));

127 
log_de°ö©i⁄s
 = 
MQTT3_LOG_STDERR
;

128 
log_¥i‹ôõs
 = 
MOSQ_LOG_ERR
;

129 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿ›íÜog fûê%†f‹ wrôög.", 
c⁄fig
->
log_fûe
);

132 #ifde‡
WITH_DLT


133 
	`d…_fifo_check
();

134 if(
d…_Ælowed
){

135 
	`DLT_REGISTER_APP
("MQTT","mosquittoÜog");

136 
	`d…_ªgi°î_c⁄ãxt
(&
d…C⁄ãxt
, "MQTT", "mosquitto DLT context");

139  
rc
;

140 
	}
}

142 
	$log__˛o£
(
mosquôto__c⁄fig
 *
c⁄fig
)

144 if(
log_de°ö©i⁄s
 & 
MQTT3_LOG_SYSLOG
){

145 #i‚de‡
WIN32


146 
	`˛o£log
();

148 
	`Clo£EvítLog
(
sy¶og_h
);

151 if(
log_de°ö©i⁄s
 & 
MQTT3_LOG_FILE
){

152 if(
c⁄fig
->
log_Âå
){

153 
	`f˛o£
(
c⁄fig
->
log_Âå
);

154 
c⁄fig
->
log_Âå
 = 
NULL
;

158 #ifde‡
WITH_DLT


159 if(
d…_Ælowed
){

160 
	`d…_uƒegi°î_c⁄ãxt
(&
d…C⁄ãxt
);

161 
	`DLT_UNREGISTER_APP
();

165  
MOSQ_ERR_SUCCESS
;

166 
	}
}

168 #ifde‡
WITH_DLT


169 
D…LogLevñTy≥
 
	$gë_d…_Àvñ
(
¥i‹ôy
)

171 
¥i‹ôy
) {

172 
MOSQ_LOG_ERR
:

173  
DLT_LOG_ERROR
;

174 
MOSQ_LOG_WARNING
:

175  
DLT_LOG_WARN
;

176 
MOSQ_LOG_INFO
:

177  
DLT_LOG_INFO
;

178 
MOSQ_LOG_DEBUG
:

179  
DLT_LOG_DEBUG
;

180 
MOSQ_LOG_NOTICE
:

181 
MOSQ_LOG_SUBSCRIBE
:

182 
MOSQ_LOG_UNSUBSCRIBE
:

183  
DLT_LOG_VERBOSE
;

185  
DLT_LOG_DEFAULT
;

187 
	}
}

190 
	$log__v¥ötf
(
¥i‹ôy
, c⁄° *
fmt
, 
va_li°
 
va
)

192 c⁄° *
t›ic
;

193 
sy¶og_¥i‹ôy
;

194 
log_löe
[1000];

195 
size_t
 
log_löe_pos
;

196 #ifde‡
WIN32


197 *
•
;

199 
boﬁ
 
log_time°amp
 = 
åue
;

200 *
log_time°amp_f‹m©
 = 
NULL
;

201 
FILE
 *
log_Âå
 = 
NULL
;

203 if(
db
.
c⁄fig
){

204 
log_time°amp
 = 
db
.
c⁄fig
->log_timestamp;

205 
log_time°amp_f‹m©
 = 
db
.
c⁄fig
->log_timestamp_format;

206 
log_Âå
 = 
db
.
c⁄fig
->log_fptr;

209 if((
log_¥i‹ôõs
 & 
¥i‹ôy
Ë&& 
log_de°ö©i⁄s
 !
MQTT3_LOG_NONE
){

210 
¥i‹ôy
){

211 
MOSQ_LOG_SUBSCRIBE
:

212 
t›ic
 = "$SYS/broker/log/M/subscribe";

213 #i‚de‡
WIN32


214 
sy¶og_¥i‹ôy
 = 
LOG_NOTICE
;

216 
sy¶og_¥i‹ôy
 = 
EVENTLOG_INFORMATION_TYPE
;

219 
MOSQ_LOG_UNSUBSCRIBE
:

220 
t›ic
 = "$SYS/broker/log/M/unsubscribe";

221 #i‚de‡
WIN32


222 
sy¶og_¥i‹ôy
 = 
LOG_NOTICE
;

224 
sy¶og_¥i‹ôy
 = 
EVENTLOG_INFORMATION_TYPE
;

227 
MOSQ_LOG_DEBUG
:

228 
t›ic
 = "$SYS/broker/log/D";

229 #i‚de‡
WIN32


230 
sy¶og_¥i‹ôy
 = 
LOG_DEBUG
;

232 
sy¶og_¥i‹ôy
 = 
EVENTLOG_INFORMATION_TYPE
;

235 
MOSQ_LOG_ERR
:

236 
t›ic
 = "$SYS/broker/log/E";

237 #i‚de‡
WIN32


238 
sy¶og_¥i‹ôy
 = 
LOG_ERR
;

240 
sy¶og_¥i‹ôy
 = 
EVENTLOG_ERROR_TYPE
;

243 
MOSQ_LOG_WARNING
:

244 
t›ic
 = "$SYS/broker/log/W";

245 #i‚de‡
WIN32


246 
sy¶og_¥i‹ôy
 = 
LOG_WARNING
;

248 
sy¶og_¥i‹ôy
 = 
EVENTLOG_WARNING_TYPE
;

251 
MOSQ_LOG_NOTICE
:

252 
t›ic
 = "$SYS/broker/log/N";

253 #i‚de‡
WIN32


254 
sy¶og_¥i‹ôy
 = 
LOG_NOTICE
;

256 
sy¶og_¥i‹ôy
 = 
EVENTLOG_INFORMATION_TYPE
;

259 
MOSQ_LOG_INFO
:

260 
t›ic
 = "$SYS/broker/log/I";

261 #i‚de‡
WIN32


262 
sy¶og_¥i‹ôy
 = 
LOG_INFO
;

264 
sy¶og_¥i‹ôy
 = 
EVENTLOG_INFORMATION_TYPE
;

267 #ifde‡
WITH_WEBSOCKETS


268 
MOSQ_LOG_WEBSOCKETS
:

269 
t›ic
 = "$SYS/broker/log/WS";

270 #i‚de‡
WIN32


271 
sy¶og_¥i‹ôy
 = 
LOG_DEBUG
;

273 
sy¶og_¥i‹ôy
 = 
EVENTLOG_INFORMATION_TYPE
;

278 
t›ic
 = "$SYS/broker/log/E";

279 #i‚de‡
WIN32


280 
sy¶og_¥i‹ôy
 = 
LOG_ERR
;

282 
sy¶og_¥i‹ôy
 = 
EVENTLOG_ERROR_TYPE
;

285 if(
log_time°amp
){

286 if(
log_time°amp_f‹m©
){

287 
tm
 *
ti
 = 
NULL
;

288 
	`gë_time
(&
ti
);

289 
log_löe_pos
 = 
	`°r·ime
(
log_löe
, ÷og_löe), 
log_time°amp_f‹m©
, 
ti
);

290 if(
log_löe_pos
 == 0){

291 
log_löe_pos
 = (
size_t
)
	`¢¥ötf
(
log_löe
, (log_line), "TimeÉrror");

294 
log_löe_pos
 = (
size_t
)
	`¢¥ötf
(
log_löe
, ÷og_löe), "%d", ()
db
.
now_ªÆ_s
);

296 if(
log_löe_pos
 < (
log_löe
)-3){

297 
log_löe
[
log_löe_pos
] = ':';

298 
log_löe
[
log_löe_pos
+1] = ' ';

299 
log_löe
[
log_löe_pos
+2] = '\0';

300 
log_löe_pos
 += 2;

303 
log_löe_pos
 = 0;

305 
	`v¢¥ötf
(&
log_löe
[
log_löe_pos
], ÷og_löe)-log_löe_pos, 
fmt
, 
va
);

306 
log_löe
[(log_line)-1] = '\0';

308 if(
log_de°ö©i⁄s
 & 
MQTT3_LOG_STDOUT
){

309 
	`Ârötf
(
°dout
, "%s\n", 
log_löe
);

311 if(
log_de°ö©i⁄s
 & 
MQTT3_LOG_STDERR
){

312 
	`Ârötf
(
°dîr
, "%s\n", 
log_löe
);

314 if(
log_de°ö©i⁄s
 & 
MQTT3_LOG_FILE
 && 
log_Âå
){

315 
	`Ârötf
(
log_Âå
, "%s\n", 
log_löe
);

316 #ifde‡
WIN32


318 
	`fÊush
(
log_Âå
);

321 if(
log_de°ö©i⁄s
 & 
MQTT3_LOG_SYSLOG
){

322 #i‚de‡
WIN32


323 
	`sy¶og
(
sy¶og_¥i‹ôy
, "%s", 
log_löe
);

325 
•
 = (*)
log_löe
;

326 
	`Rï‹tEvít
(
sy¶og_h
, 
sy¶og_¥i‹ôy
, 0, 0, 
NULL
, 1, 0, &
•
, NULL);

329 if(
log_de°ö©i⁄s
 & 
MQTT3_LOG_TOPIC
 && 
¥i‹ôy
 !
MOSQ_LOG_DEBUG
 &&Öri‹ôy !
MOSQ_LOG_INTERNAL
){

330 
	`db__mesßges_ósy_queue
(
NULL
, 
t›ic
, 2, (
uöt32_t
)
	`°æí
(
log_löe
),Üog_line, 0, 20, NULL);

332 #ifde‡
WITH_DLT


333 if(
log_de°ö©i⁄s
 & 
MQTT3_LOG_DLT
 && 
¥i‹ôy
 !
MOSQ_LOG_INTERNAL
){

334 
	`DLT_LOG_STRING
(
d…C⁄ãxt
, 
	`gë_d…_Àvñ
(
¥i‹ôy
), 
log_löe
);

339  
MOSQ_ERR_SUCCESS
;

340 
	}
}

342 
	$log__¥ötf
(
mosquôto
 *
mosq
, 
¥i‹ôy
, c⁄° *
fmt
, ...)

344 
va_li°
 
va
;

345 
rc
;

347 
	`UNUSED
(
mosq
);

349 
	`va_°¨t
(
va
, 
fmt
);

350 
rc
 = 
	`log__v¥ötf
(
¥i‹ôy
, 
fmt
, 
va
);

351 
	`va_íd
(
va
);

353  
rc
;

354 
	}
}

356 
	$log__öã∫Æ
(c⁄° *
fmt
, ...)

358 
va_li°
 
va
;

359 
buf
[200];

360 
Àn
;

362 
	`va_°¨t
(
va
, 
fmt
);

363 
Àn
 = 
	`v¢¥ötf
(
buf
, 200, 
fmt
, 
va
);

364 
	`va_íd
(
va
);

366 if(
Àn
 >= 200){

367 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INTERNAL
, "I¡î«»log buf„∏toÿsh‹à(%d)", 
Àn
);

371 #ifde‡
WIN32


372 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INTERNAL
, "%s", 
buf
);

374 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INTERNAL
, "%s%s%s", "\e[32m", 
buf
, "\e[0m");

376 
	}
}

378 
	$mosquôto_log_v¥ötf
(
Àvñ
, c⁄° *
fmt
, 
va_li°
 
va
)

380  
	`log__v¥ötf
(()
Àvñ
, 
fmt
, 
va
);

381 
	}
}

383 
	$mosquôto_log_¥ötf
(
Àvñ
, c⁄° *
fmt
, ...)

385 
va_li°
 
va
;

387 
	`va_°¨t
(
va
, 
fmt
);

388 
	`log__v¥ötf
(()
Àvñ
, 
fmt
, 
va
);

389 
	`va_íd
(
va
);

390 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/loop.c

20 
	~"c⁄fig.h
"

22 #i‚de‡
WIN32


23 
	#_GNU_SOURCE


	)

26 
	~<as£π.h
>

27 #i‚de‡
WIN32


28 
	~<uni°d.h
>

30 
	~<¥o˚ss.h
>

31 
	~<wösock2.h
>

32 
	~<ws2t˝ù.h
>

35 
	~<î∫o.h
>

36 
	~<sig«l.h
>

37 
	~<°dio.h
>

38 
	~<°rög.h
>

39 #i‚de‡
WIN32


40 
	~<sys/sockë.h
>

42 
	~<time.h
>

43 
	~<uéi°.h
>

45 #ifde‡
WITH_WEBSOCKETS


46 
	~<libwebsockës.h
>

49 
	~"mosquôto_brokî_öã∫Æ.h
"

50 
	~"mem‹y_mosq.h
"

51 
	~"mqâ_¥Ÿocﬁ.h
"

52 
	~"∑ckë_mosq.h
"

53 
	~"£nd_mosq.h
"

54 
	~"sys_åì.h
"

55 
	~"time_mosq.h
"

56 
	~"utû_mosq.h
"

58 
boﬁ
 
Êag_ªlﬂd
;

59 #ifde‡
WITH_PERSISTENCE


60 
boﬁ
 
Êag_db_backup
;

62 
boﬁ
 
Êag_åì_¥öt
;

63 
run
;

65 #i‡
deföed
(
WITH_WEBSOCKETS
Ë&& 
LWS_LIBRARY_VERSION_NUMBER
 == 3002000

66 
	$lws__sul_ˇŒback
(
lws_s‹ãd_u£c_li°
 *
l
)

68 
	}
}

70 
lws_s‹ãd_u£c_li°
 
	gsul
;

73 
	$sögÀ_publish
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_mesßge_v5
 *
msg
, 
uöt32_t
 
mesßge_expúy
)

75 
mosquôto_msg_°‹e
 *
°‹ed
;

76 
uöt16_t
 
mid
;

78 
°‹ed
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_msg_°‹e
));

79 if(
°‹ed
 =
NULL
Ë 
MOSQ_ERR_NOMEM
;

81 
°‹ed
->
t›ic
 = 
msg
->topic;

82 
msg
->
t›ic
 = 
NULL
;

83 
°‹ed
->
ªèö
 = 0;

84 
°‹ed
->
∑ylﬂdÀn
 = (
uöt32_t
)
msg
->payloadlen;

85 
°‹ed
->
∑ylﬂd
 = 
	`mosquôto__mÆloc
(°‹ed->
∑ylﬂdÀn
+1);

86 if(
°‹ed
->
∑ylﬂd
 =
NULL
){

87 
	`db__msg_°‹e_‰ì
(
°‹ed
);

88  
MOSQ_ERR_NOMEM
;

91 ((
uöt8_t
 *)
°‹ed
->
∑ylﬂd
)[°‹ed->
∑ylﬂdÀn
] = 0;

92 
	`mem˝y
(
°‹ed
->
∑ylﬂd
, 
msg
->∑ylﬂd, st‹ed->
∑ylﬂdÀn
);

94 if(
msg
->
¥›îtõs
){

95 
°‹ed
->
¥›îtõs
 = 
msg
->properties;

96 
msg
->
¥›îtõs
 = 
NULL
;

99 if(
	`db__mesßge_°‹e
(
c⁄ãxt
, 
°‹ed
, 
mesßge_expúy
, 0, 
mosq_mo_brokî
))  1;

101 if(
msg
->
qos
){

102 
mid
 = 
	`mosquôto__mid_gíî©e
(
c⁄ãxt
);

104 
mid
 = 0;

106  
	`db__mesßge_ö£π
(
c⁄ãxt
, 
mid
, 
mosq_md_out
, (
uöt8_t
)
msg
->
qos
, 0, 
°‹ed
, msg->
¥›îtõs
, 
åue
);

107 
	}
}

110 
	$ªad_mesßge_expúy_öãrvÆ
(
mosquôto_¥›îty
 **
¥›li°
, 
uöt32_t
 *
mesßge_expúy
)

112 
mosquôto_¥›îty
 *
p
, *
¥evious
 = 
NULL
;

114 *
mesßge_expúy
 = 0;

116 if(!
¥›li°
) ;

118 
p
 = *
¥›li°
;

119 
p
){

120 if(
p
->
idítifõr
 =
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
){

121 *
mesßge_expúy
 = 
p
->
vÆue
.
i32
;

122 if(
p
 =*
¥›li°
){

123 *
¥›li°
 = 
p
->
√xt
;

125 
¥evious
->
√xt
 = 
p
->next;

127 
	`¥›îty__‰ì
(&
p
);

131 
¥evious
 = 
p
;

132 
p
 =Ö->
√xt
;

134 
	}
}

136 
	$queue_∂ugö_msgs
()

138 
mosquôto_mesßge_v5
 *
msg
, *
tmp
;

139 
mosquôto
 *
c⁄ãxt
;

140 
uöt32_t
 
mesßge_expúy
;

142 
	`DL_FOREACH_SAFE
(
db
.
∂ugö_msgs
, 
msg
, 
tmp
){

143 
	`DL_DELETE
(
db
.
∂ugö_msgs
, 
msg
);

145 
	`ªad_mesßge_expúy_öãrvÆ
(&
msg
->
¥›îtõs
, &
mesßge_expúy
);

147 if(
msg
->
˛õ¡id
){

148 
	`HASH_FIND
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
msg
->
˛õ¡id
, 
	`°æí
(msg->˛õ¡id), 
c⁄ãxt
);

149 if(
c⁄ãxt
){

150 
	`sögÀ_publish
(
c⁄ãxt
, 
msg
, 
mesßge_expúy
);

153 
	`db__mesßges_ósy_queue
(
NULL
, 
msg
->
t›ic
, (
uöt8_t
)msg->
qos
, (
uöt32_t
)msg->
∑ylﬂdÀn
, msg->
∑ylﬂd
, msg->
ªèö
, 
mesßge_expúy
, &msg->
¥›îtõs
);

155 
	`mosquôto__‰ì
(
msg
->
t›ic
);

156 
	`mosquôto__‰ì
(
msg
->
∑ylﬂd
);

157 
	`mosquôto_¥›îty_‰ì_Æl
(&
msg
->
¥›îtõs
);

158 
	`mosquôto__‰ì
(
msg
->
˛õ¡id
);

159 
	`mosquôto__‰ì
(
msg
);

161 
	}
}

164 
	$mosquôto_maö_lo›
(
mosquôto__li°íî_sock
 *
li°ísock
, 
li°ísock_cou¡
)

166 #ifde‡
WITH_SYS_TREE


167 
time_t
 
°¨t_time
 = 
	`mosquôto_time
();

169 #ifde‡
WITH_PERSISTENCE


170 
time_t
 
œ°_backup
 = 
	`mosquôto_time
();

172 #ifde‡
WITH_WEBSOCKETS


173 
i
;

175 
rc
;

178 #i‡
	`deföed
(
WITH_WEBSOCKETS
Ë&& 
LWS_LIBRARY_VERSION_NUMBER
 == 3002000

179 
	`mem£t
(&
sul
, 0, (
lws_s‹ãd_u£c_li°
));

182 
db
.
now_s
 = 
	`mosquôto_time
();

183 
db
.
now_ªÆ_s
 = 
	`time
(
NULL
);

185 #ifde‡
WITH_BRIDGE


186 
rc
 = 
	`bridge__ªgi°î_loˇl_c⁄√˘i⁄s
();

187 if(
rc
) Ñc;

190 
run
){

191 
	`queue_∂ugö_msgs
();

192 
	`c⁄ãxt__‰ì_disu£d
();

193 #ifde‡
WITH_SYS_TREE


194 if(
db
.
c⁄fig
->
sys_öãrvÆ
 > 0){

195 
	`sys_åì__upd©e
(
db
.
c⁄fig
->
sys_öãrvÆ
, 
°¨t_time
);

199 
	`kì∑live__check
();

201 #ifde‡
WITH_BRIDGE


202 
	`bridge_check
();

205 
rc
 = 
	`mux__h™dÀ
(
li°ísock
, 
li°ísock_cou¡
);

206 if(
rc
) Ñc;

208 
	`£ssi⁄_expúy__check
();

209 
	`wûl_dñay__check
();

210 #ifde‡
WITH_PERSISTENCE


211 if(
db
.
c⁄fig
->
≥rsi°í˚
 && db.c⁄fig->
autoßve_öãrvÆ
){

212 if(
db
.
c⁄fig
->
autoßve_⁄_ch™ges
){

213 if(
db
.
≥rsi°í˚_ch™ges
 >db.
c⁄fig
->
autoßve_öãrvÆ
){

214 
	`≥rsi°__backup
(
Ál£
);

215 
db
.
≥rsi°í˚_ch™ges
 = 0;

218 if(
œ°_backup
 + 
db
.
c⁄fig
->
autoßve_öãrvÆ
 < db.
now_s
){

219 
	`≥rsi°__backup
(
Ál£
);

220 
œ°_backup
 = 
db
.
now_s
;

226 #ifde‡
WITH_PERSISTENCE


227 if(
Êag_db_backup
){

228 
	`≥rsi°__backup
(
Ál£
);

229 
Êag_db_backup
 = 
Ál£
;

232 if(
Êag_ªlﬂd
){

233 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "Reloading config.");

234 
	`c⁄fig__ªad
(
db
.
c⁄fig
, 
åue
);

235 
	`li°íîs__ªlﬂd_Æl_˚πifiˇãs
();

236 
	`mosquôto_£curôy_˛ónup
(
åue
);

237 
	`mosquôto_£curôy_öô
(
åue
);

238 
	`mosquôto_£curôy_≠∂y
();

239 
	`log__˛o£
(
db
.
c⁄fig
);

240 
	`log__öô
(
db
.
c⁄fig
);

241 
Êag_ªlﬂd
 = 
Ál£
;

243 if(
Êag_åì_¥öt
){

244 
	`sub__åì_¥öt
(
db
.
subs
, 0);

245 
Êag_åì_¥öt
 = 
Ál£
;

246 #ifde‡
WITH_XTREPORT


247 
	`xåï‹t
();

250 #ifde‡
WITH_WEBSOCKETS


251 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

256 if(
db
.
c⁄fig
->
li°íîs
[
i
].
ws_c⁄ãxt
){

257 #i‡
LWS_LIBRARY_VERSION_NUMBER
 > 3002000

258 
	`lws_£rvi˚
(
db
.
c⁄fig
->
li°íîs
[
i
].
ws_c⁄ãxt
, -1);

259 #ñi‡
LWS_LIBRARY_VERSION_NUMBER
 == 3002000

260 
	`lws_sul_scheduÀ
(
db
.
c⁄fig
->
li°íîs
[
i
].
ws_c⁄ãxt
, 0, &
sul
, 
lws__sul_ˇŒback
, 10);

261 
	`lws_£rvi˚
(
db
.
c⁄fig
->
li°íîs
[
i
].
ws_c⁄ãxt
, 0);

263 
	`lws_£rvi˚
(
db
.
c⁄fig
->
li°íîs
[
i
].
ws_c⁄ãxt
, 0);

269 
	`∂ugö__h™dÀ_tick
();

272 
	`mux__˛ónup
();

274  
MOSQ_ERR_SUCCESS
;

275 
	}
}

277 
	$do_disc⁄√˘
(
mosquôto
 *
c⁄ãxt
, 
ªas⁄
)

279 c⁄° *
id
;

280 #ifde‡
WITH_WEBSOCKETS


281 
boﬁ
 
is_du∂iˇã
 = 
Ál£
;

284 if(
c⁄ãxt
->
°©e
 =
mosq_cs_disc⁄√˘ed
){

287 #ifde‡
WITH_WEBSOCKETS


288 if(
c⁄ãxt
->
wsi
){

289 if(
c⁄ãxt
->
°©e
 =
mosq_cs_du∂iˇã
){

290 
is_du∂iˇã
 = 
åue
;

293 if(
c⁄ãxt
->
°©e
 !
mosq_cs_disc⁄√˘ög
 && c⁄ãxt->°©ê!
mosq_cs_disc⁄√˘_wôh_wûl
){

294 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_disc⁄√˘_ws
);

296 if(
c⁄ãxt
->
wsi
){

297 
	`lws_ˇŒback_⁄_wrôabÀ
(
c⁄ãxt
->
wsi
);

299 if(
c⁄ãxt
->
sock
 !
INVALID_SOCKET
){

300 
	`HASH_DELETE
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, 
c⁄ãxt
);

301 
	`mux__dñëe
(
c⁄ãxt
);

302 
c⁄ãxt
->
sock
 = 
INVALID_SOCKET
;

304 if(
is_du∂iˇã
){

311 
	`c⁄ãxt__ªmove_‰om_by_id
(
c⁄ãxt
);

316 if(
db
.
c⁄fig
->
c⁄√˘i⁄_mesßges
 =
åue
){

317 if(
c⁄ãxt
->
id
){

318 
id
 = 
c⁄ãxt
->id;

320 
id
 = "<unknown>";

322 if(
c⁄ãxt
->
°©e
 !
mosq_cs_disc⁄√˘ög
 && c⁄ãxt->°©ê!
mosq_cs_disc⁄√˘_wôh_wûl
){

323 
ªas⁄
){

324 
MOSQ_ERR_SUCCESS
:

326 
MOSQ_ERR_MALFORMED_PACKET
:

327 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Clõ¡ %†disc⁄√˘ed duêtÿmÆf‹medÖackë.", 
id
);

329 
MOSQ_ERR_PROTOCOL
:

330 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Clõ¡ %†disc⁄√˘ed duêtÿ¥ŸocﬁÉº‹.", 
id
);

332 
MOSQ_ERR_CONN_LOST
:

333 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Clõ¡ %†˛o£d it†c⁄√˘i⁄.", 
id
);

335 
MOSQ_ERR_AUTH
:

336 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Clõ¡ %†disc⁄√˘ed,ÇŸáuth‹i£d.", 
id
);

338 
MOSQ_ERR_KEEPALIVE
:

339 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Clõ¡ %†ha†ex˚ededÅimeout, disc⁄√˘ög.", 
id
);

341 
MOSQ_ERR_OVERSIZE_PACKET
:

342 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Clõ¡ %†disc⁄√˘ed duêtÿovîsizê∑ckë.", 
id
);

344 
MOSQ_ERR_PAYLOAD_SIZE
:

345 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Clõ¡ %†disc⁄√˘ed duêtÿovîsizê∑ylﬂd.", 
id
);

347 
MOSQ_ERR_NOMEM
:

348 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Clõ¡ %†disc⁄√˘ed duêtÿouào‡mem‹y.", 
id
);

350 
MOSQ_ERR_NOT_SUPPORTED
:

351 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Clõ¡ %†disc⁄√˘ed duêtÿusögÇŸáŒowed fótuª (QoSÅoÿhigh,ÑëaöÇŸ suµ‹ãd, o∏bad AUTH mëhod).", 
id
);

353 
MOSQ_ERR_ADMINISTRATIVE_ACTION
:

354 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Clõ¡ %†bì¿disc⁄√˘ed byádmöi°øtivêa˘i⁄.", 
id
);

356 
MOSQ_ERR_ERRNO
:

357 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Clõ¡ %†disc⁄√˘ed: %s.", 
id
, 
	`°ªº‹
(
î∫o
));

360 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Bad sockëÑód/wrôê⁄ clõ¡ %s: %s", 
id
, 
	`mosquôto_°ªº‹
(
ªas⁄
));

364 if(
ªas⁄
 =
MOSQ_ERR_ADMINISTRATIVE_ACTION
){

365 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Clõ¡ %†bì¿disc⁄√˘ed byádmöi°øtivêa˘i⁄.", 
id
);

367 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Clõ¡ %†disc⁄√˘ed.", 
id
);

371 
	`mux__dñëe
(
c⁄ãxt
);

372 
	`c⁄ãxt__disc⁄√˘
(
c⁄ãxt
);

374 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/memory_public.c

19 
	~"mosquôto_brokî.h
"

20 
	~"mem‹y_mosq.h
"

22 *
	$mosquôto_ˇŒoc
(
size_t
 
nmemb
, size_à
size
)

24  
	`mosquôto__ˇŒoc
(
nmemb
, 
size
);

25 
	}
}

27 
	$mosquôto_‰ì
(*
mem
)

29 
	`mosquôto__‰ì
(
mem
);

30 
	}
}

32 *
	$mosquôto_mÆloc
(
size_t
 
size
)

34  
	`mosquôto__mÆloc
(
size
);

35 
	}
}

37 *
	$mosquôto_ªÆloc
(*
±r
, 
size_t
 
size
)

39  
	`mosquôto__ªÆloc
(
±r
, 
size
);

40 
	}
}

42 *
	$mosquôto_°rdup
(c⁄° *
s
)

44  
	`mosquôto__°rdup
(
s
);

45 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/mosquitto.c

19 
	~"c⁄fig.h
"

21 #i‚de‡
WIN32


23 
	~<uni°d.h
>

24 
	~<gΩ.h
>

25 
	~<as£π.h
>

28 #i‚de‡
WIN32


29 
	~<pwd.h
>

31 
	~<¥o˚ss.h
>

32 
	~<wösock2.h
>

33 
	~<ws2t˝ù.h
>

36 #i‚de‡
WIN32


37 
	~<sys/time.h
>

40 
	~<î∫o.h
>

41 
	~<sig«l.h
>

42 
	~<°dio.h
>

43 
	~<°rög.h
>

44 #ifde‡
WITH_SYSTEMD


45 
	~<sy°emd/sd-d´m⁄.h
>

47 #ifde‡
WITH_WRAP


48 
	~<t˝d.h
>

50 #ifde‡
WITH_WEBSOCKETS


51 
	~<libwebsockës.h
>

54 
	~"mosquôto_brokî_öã∫Æ.h
"

55 
	~"mem‹y_mosq.h
"

56 
	~"misc_mosq.h
"

57 
	~"utû_mosq.h
"

59 
mosquôto_db
 
	gdb
;

61 
mosquôto__li°íî_sock
 *
	gli°ísock
 = 
NULL
;

62 
	gli°ísock_cou¡
 = 0;

63 
	gli°ísock_ödex
 = 0;

65 
boﬁ
 
	gÊag_ªlﬂd
 = 
Ál£
;

66 #ifde‡
WITH_PERSISTENCE


67 
boﬁ
 
	gÊag_db_backup
 = 
Ál£
;

69 
boﬁ
 
	gÊag_åì_¥öt
 = 
Ál£
;

70 
	grun
;

71 #ifde‡
WITH_WRAP


72 
	~<sy¶og.h
>

73 
	gÆlow_£vîôy
 = 
LOG_INFO
;

74 
	gdíy_£vîôy
 = 
LOG_INFO
;

85 
	$dr›_¥ivûeges
(
mosquôto__c⁄fig
 *
c⁄fig
)

87 #i‡!
	`deföed
(
__CYGWIN__
Ë&& !deföed(
WIN32
)

88 
∑sswd
 *
pwd
;

89 *
îr
;

90 
rc
;

92 c⁄° *
¢≠
 = 
	`gëív
("SNAP_NAME");

93 if(
¢≠
 && !
	`°rcmp
(snap, "mosquitto")){

95  
MOSQ_ERR_SUCCESS
;

98 if(
	`gëeuid
() == 0){

99 if(
c⁄fig
->
u£r
 && 
	`°rcmp
(config->user, "root")){

100 
pwd
 = 
	`gëpw«m
(
c⁄fig
->
u£r
);

101 if(!
pwd
){

102 if(
	`°rcmp
(
c⁄fig
->
u£r
, "mosquitto")){

103 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿdr›Örivûege†tÿ'%s' beˇu£Åhi†u£∏d€†nŸÉxi°.", 
c⁄fig
->
u£r
);

106 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "W¨nög: U«bÀÅÿdr›Örivûege†tÿ'%s' beˇu£Åhi†u£∏d€†nŸÉxi°. Tryög 'nobody' in°ód.", 
c⁄fig
->
u£r
);

107 
pwd
 = 
	`gëpw«m
("nobody");

108 if(!
pwd
){

109 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: UnableÅo dropÖrivilegesÅo 'nobody'.");

114 if(
	`öôgroups
(
c⁄fig
->
u£r
, 
pwd
->
pw_gid
) == -1){

115 
îr
 = 
	`°ªº‹
(
î∫o
);

116 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ sëtög group†whû° dr›pögÖrivûeges: %s.", 
îr
);

119 
rc
 = 
	`£tgid
(
pwd
->
pw_gid
);

120 if(
rc
 == -1){

121 
îr
 = 
	`°ªº‹
(
î∫o
);

122 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ sëtög gid whû° dr›pögÖrivûeges: %s.", 
îr
);

125 
rc
 = 
	`£tuid
(
pwd
->
pw_uid
);

126 if(
rc
 == -1){

127 
îr
 = 
	`°ªº‹
(
î∫o
);

128 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ sëtög uid whû° dr›pögÖrivûeges: %s.", 
îr
);

132 if(
	`gëeuid
(Ë=0 || 
	`gëegid
() == 0){

133 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Mosquitto shouldÇot beÑunásÑoot/administrator.");

137 
	`UNUSED
(
c⁄fig
);

139  
MOSQ_ERR_SUCCESS
;

140 
	}
}

142 
	$mosquôto__d´m⁄i£
()

144 #i‚de‡
WIN32


145 *
îr
;

146 
pid_t
 
pid
;

148 
pid
 = 
	`f‹k
();

149 if(
pid
 < 0){

150 
îr
 = 
	`°ªº‹
(
î∫o
);

151 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ i¿f‹k: %s", 
îr
);

152 
	`exô
(1);

154 if(
pid
 > 0){

155 
	`exô
(0);

157 if(
	`£tsid
() < 0){

158 
îr
 = 
	`°ªº‹
(
î∫o
);

159 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ i¿£tsid: %s", 
îr
);

160 
	`exô
(1);

163 
	`as£π
(
	`‰e›í
("/dev/nuŒ", "r", 
°dö
));

164 
	`as£π
(
	`‰e›í
("/dev/nuŒ", "w", 
°dout
));

165 
	`as£π
(
	`‰e›í
("/dev/nuŒ", "w", 
°dîr
));

167 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Can't start in daemon mode in Windows.");

169 
	}
}

172 
	$li°íî__£t_deÁu…s
(
mosquôto__li°íî
 *
li°íî
)

174 
li°íî
->
£curôy_›ti⁄s
.
Ælow_™⁄ymous
 = -1;

175 
li°íî
->
£curôy_›ti⁄s
.
Ælow_zîo_Àngth_˛õ¡id
 = 
åue
;

176 
li°íî
->
¥Ÿocﬁ
 = 
mp_mqâ
;

177 
li°íî
->
max_c⁄√˘i⁄s
 = -1;

178 
li°íî
->
max_qos
 = 2;

179 
li°íî
->
max_t›ic_Æüs
 = 10;

180 
	}
}

183 
	$li°íîs__ªlﬂd_Æl_˚πifiˇãs
()

185 #ifde‡
WITH_TLS


186 
i
;

187 
rc
;

188 
mosquôto__li°íî
 *
li°íî
;

190 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

191 
li°íî
 = &
db
.
c⁄fig
->
li°íîs
[
i
];

192 if(
li°íî
->
s¶_˘x
 &&Üi°íî->
˚πfûe
 &&Üi°íî->
keyfûe
){

193 
rc
 = 
	`√t__lﬂd_˚πifiˇãs
(
li°íî
);

194 if(
rc
){

195 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error whenÑeloading certificate '%s' or key '%s'.",

196 
li°íî
->
˚πfûe
,Üi°íî->
keyfûe
);

201 
	}
}

204 
	$li°íîs__°¨t_sögÀ_mqâ
(
mosquôto__li°íî
 *
li°íî
)

206 
i
;

207 
mosquôto__li°íî_sock
 *
li°ísock_√w
;

209 if(
	`√t__sockë_li°í
(
li°íî
)){

212 
li°ísock_cou¡
 +
li°íî
->
sock_cou¡
;

213 
li°ísock_√w
 = 
	`mosquôto__ªÆloc
(
li°ísock
, (
mosquôto__li°íî_sock
)*(
size_t
)
li°ísock_cou¡
);

214 if(!
li°ísock_√w
){

217 
li°ísock
 = 
li°ísock_√w
;

219 
i
=0; i<
li°íî
->
sock_cou¡
; i++){

220 if(
li°íî
->
socks
[
i
] =
INVALID_SOCKET
){

223 
li°ísock
[
li°ísock_ödex
].
sock
 = 
li°íî
->
socks
[
i
];

224 
li°ísock
[
li°ísock_ödex
].
li°íî
 =Üistener;

225 #ifde‡
WITH_EPOLL


226 
li°ísock
[
li°ísock_ödex
].
idít
 = 
id_li°íî
;

228 
li°ísock_ödex
++;

230  
MOSQ_ERR_SUCCESS
;

231 
	}
}

234 #ifde‡
WITH_WEBSOCKETS


235 
	$li°íîs__add_websockës
(
lws_c⁄ãxt
 *
ws_c⁄ãxt
, 
mosq_sock_t
 
fd
)

237 
i
;

238 
mosquôto__li°íî
 *
li°íî
 = 
NULL
;

239 
mosquôto__li°íî_sock
 *
li°ísock_√w
;

242 if(
run
 || 
ws_c⁄ãxt
 =
NULL
) ;

245 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

246 if(
db
.
c⁄fig
->
li°íîs
[
i
].
ws_ö_öô
){

247 
li°íî
 = &
db
.
c⁄fig
->
li°íîs
[
i
];

251 if(
li°íî
 =
NULL
){

255 
li°ísock_cou¡
++;

256 
li°ísock_√w
 = 
	`mosquôto__ªÆloc
(
li°ísock
, (
mosquôto__li°íî_sock
)*(
size_t
)
li°ísock_cou¡
);

257 if(!
li°ísock_√w
){

260 
li°ísock
 = 
li°ísock_√w
;

262 
li°ísock
[
li°ísock_ödex
].
sock
 = 
fd
;

263 
li°ísock
[
li°ísock_ödex
].
li°íî
 =Üistener;

264 #ifde‡
WITH_EPOLL


265 
li°ísock
[
li°ísock_ödex
].
idít
 = 
id_li°íî_ws
;

267 
li°ísock_ödex
++;

268 
	}
}

271 
	$li°íîs__add_loˇl
(c⁄° *
ho°
, 
uöt16_t
 
p‹t
)

273 
mosquôto__li°íî
 *
li°íîs
;

274 
li°íîs
 = 
db
.
c⁄fig
->listeners;

276 
	`li°íî__£t_deÁu…s
(&
li°íîs
[
db
.
c⁄fig
->
li°íî_cou¡
]);

277 
li°íîs
[
db
.
c⁄fig
->
li°íî_cou¡
].
£curôy_›ti⁄s
.
Ælow_™⁄ymous
 = 
åue
;

278 
li°íîs
[
db
.
c⁄fig
->
li°íî_cou¡
].
p‹t
 =Öort;

279 
li°íîs
[
db
.
c⁄fig
->
li°íî_cou¡
].
ho°
 = 
	`mosquôto__°rdup
(host);

280 if(
li°íîs
[
db
.
c⁄fig
->
li°íî_cou¡
].
ho°
 =
NULL
){

281  
MOSQ_ERR_NOMEM
;

283 if(
	`li°íîs__°¨t_sögÀ_mqâ
(&
li°íîs
[
db
.
c⁄fig
->
li°íî_cou¡
])){

284 
	`mosquôto__‰ì
(
li°íîs
[
db
.
c⁄fig
->
li°íî_cou¡
].
ho°
);

285 
li°íîs
[
db
.
c⁄fig
->
li°íî_cou¡
].
ho°
 = 
NULL
;

286  
MOSQ_ERR_UNKNOWN
;

288 
db
.
c⁄fig
->
li°íî_cou¡
++;

289  
MOSQ_ERR_SUCCESS
;

290 
	}
}

292 
	$li°íîs__°¨t_loˇl_⁄ly
()

295 
i
;

296 
rc
;

297 
mosquôto__li°íî
 *
li°íîs
;

299 
li°íîs
 = 
	`mosquôto__ªÆloc
(
db
.
c⁄fig
->li°íîs, 2*(
mosquôto__li°íî
));

300 if(
li°íîs
 =
NULL
){

301  
MOSQ_ERR_NOMEM
;

303 
	`mem£t
(
li°íîs
, 0, 2*(
mosquôto__li°íî
));

304 
db
.
c⁄fig
->
li°íî_cou¡
 = 0;

305 
db
.
c⁄fig
->
li°íîs
 =Üisteners;

307 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Starting inÜocal only mode. Connections will only beÖossible from clientsÑunning onÅhis machine.");

308 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Createá configuration file which definesáÜistenerÅoállowÑemoteáccess.");

309 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "For more details see https://mosquitto.org/documentation/authentication-methods/");

310 if(
db
.
c⁄fig
->
cmd_p‹t_cou¡
 == 0){

311 
rc
 = 
	`li°íîs__add_loˇl
("127.0.0.1", 1883);

312 if(
rc
 =
MOSQ_ERR_NOMEM
)  MOSQ_ERR_NOMEM;

313 
rc
 = 
	`li°íîs__add_loˇl
("::1", 1883);

314 if(
rc
 =
MOSQ_ERR_NOMEM
)  MOSQ_ERR_NOMEM;

316 
i
=0; i<
db
.
c⁄fig
->
cmd_p‹t_cou¡
; i++){

317 
rc
 = 
	`li°íîs__add_loˇl
("127.0.0.1", 
db
.
c⁄fig
->
cmd_p‹t
[
i
]);

318 if(
rc
 =
MOSQ_ERR_NOMEM
)  MOSQ_ERR_NOMEM;

319 
rc
 = 
	`li°íîs__add_loˇl
("::1", 
db
.
c⁄fig
->
cmd_p‹t
[
i
]);

320 if(
rc
 =
MOSQ_ERR_NOMEM
)  MOSQ_ERR_NOMEM;

324 if(
db
.
c⁄fig
->
li°íî_cou¡
 > 0){

325  
MOSQ_ERR_SUCCESS
;

327  
MOSQ_ERR_UNKNOWN
;

329 
	}
}

332 
	$li°íîs__°¨t
()

334 
i
;

336 
li°ísock_cou¡
 = 0;

338 if(
db
.
c⁄fig
->
loˇl_⁄ly
){

339 if(
	`li°íîs__°¨t_loˇl_⁄ly
()){

340 
	`db__˛o£
();

341 if(
db
.
c⁄fig
->
pid_fûe
){

342 ()
	`ªmove
(
db
.
c⁄fig
->
pid_fûe
);

346  
MOSQ_ERR_SUCCESS
;

349 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

350 if(
db
.
c⁄fig
->
li°íîs
[
i
].
¥Ÿocﬁ
 =
mp_mqâ
){

351 if(
	`li°íîs__°¨t_sögÀ_mqâ
(&
db
.
c⁄fig
->
li°íîs
[
i
])){

352 
	`db__˛o£
();

353 if(
db
.
c⁄fig
->
pid_fûe
){

354 ()
	`ªmove
(
db
.
c⁄fig
->
pid_fûe
);

358 }if(
db
.
c⁄fig
->
li°íîs
[
i
].
¥Ÿocﬁ
 =
mp_websockës
){

359 #ifde‡
WITH_WEBSOCKETS


360 
	`mosq_websockës_öô
(&
db
.
c⁄fig
->
li°íîs
[
i
], db.config);

361 if(!
db
.
c⁄fig
->
li°íîs
[
i
].
ws_c⁄ãxt
){

362 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿ¸óã websockë†li°íî o¿p‹à%d.", 
db
.
c⁄fig
->
li°íîs
[
i
].
p‹t
);

368 if(
li°ísock
 =
NULL
){

369 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: UnableÅo startányÜistening sockets,Éxiting.");

372  
MOSQ_ERR_SUCCESS
;

373 
	}
}

376 
	$li°íîs__°›
()

378 
i
;

380 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

381 #ifde‡
WITH_WEBSOCKETS


382 if(
db
.
c⁄fig
->
li°íîs
[
i
].
ws_c⁄ãxt
){

383 
	`lws_c⁄ãxt_de°roy
(
db
.
c⁄fig
->
li°íîs
[
i
].
ws_c⁄ãxt
);

385 
	`mosquôto__‰ì
(
db
.
c⁄fig
->
li°íîs
[
i
].
ws_¥Ÿocﬁ
);

387 #ifde‡
WITH_UNIX_SOCKETS


388 if(
db
.
c⁄fig
->
li°íîs
[
i
].
unix_sockë_∑th
 !
NULL
){

389 
	`u∆ök
(
db
.
c⁄fig
->
li°íîs
[
i
].
unix_sockë_∑th
);

394 
i
=0; i<
li°ísock_cou¡
; i++){

395 if(
li°ísock
[
i
].
sock
 !
INVALID_SOCKET
){

396 
	`COMPAT_CLOSE
(
li°ísock
[
i
].
sock
);

399 
	`mosquôto__‰ì
(
li°ísock
);

400 
	}
}

403 
	$sig«l__£tup
()

405 
	`sig«l
(
SIGINT
, 
h™dÀ_sigöt
);

406 
	`sig«l
(
SIGTERM
, 
h™dÀ_sigöt
);

407 #ifde‡
SIGHUP


408 
	`sig«l
(
SIGHUP
, 
h™dÀ_sighup
);

410 #i‚de‡
WIN32


411 
	`sig«l
(
SIGUSR1
, 
h™dÀ_sigu§1
);

412 
	`sig«l
(
SIGUSR2
, 
h™dÀ_sigu§2
);

413 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

415 #ifde‡
WIN32


416 
	`Cª©eThªad
(
NULL
, 0, 
SigThªadProc
, NULL, 0, NULL);

418 
	}
}

421 
	$pid__wrôe
()

423 
FILE
 *
pid
;

425 if(
db
.
c⁄fig
->
pid_fûe
){

426 
pid
 = 
	`mosquôto__f›í
(
db
.
c⁄fig
->
pid_fûe
, "wt", 
Ál£
);

427 if(
pid
){

428 
	`Ârötf
(
pid
, "%d", 
	`gëpid
());

429 
	`f˛o£
(
pid
);

431 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: UnableÅo writeÖid file.");

435  
MOSQ_ERR_SUCCESS
;

436 
	}
}

439 
	$maö
(
¨gc
, *
¨gv
[])

441 
mosquôto__c⁄fig
 
c⁄fig
;

442 #ifde‡
WITH_BRIDGE


443 
i
;

445 
rc
;

446 #ifde‡
WIN32


447 
SYSTEMTIME
 
°
;

449 
timevÆ
 
tv
;

451 
mosquôto
 *
˘xt
, *
˘xt_tmp
;

453 #i‡
	`deföed
(
WIN32
Ë|| deföed(
__CYGWIN__
)

454 if(
¨gc
 == 2){

455 if(!
	`°rcmp
(
¨gv
[1], "run")){

456 
	`£rvi˚_run
();

458 }if(!
	`°rcmp
(
¨gv
[1], "install")){

459 
	`£rvi˚_ö°Æl
();

461 }if(!
	`°rcmp
(
¨gv
[1], "uninstall")){

462 
	`£rvi˚_unö°Æl
();

469 #ifde‡
WIN32


470 
	`GëSy°emTime
(&
°
);

471 
	`§™d
(
°
.
wSec⁄d
 + st.
wMûli£c⁄ds
);

473 
	`gëtimeofday
(&
tv
, 
NULL
);

474 
	`§™d
(()(
tv
.
tv_£c
 +Åv.
tv_u£c
));

477 #ifde‡
WIN32


478 
	`_£tmax°dio
(2048);

481 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

482 
db
.
now_s
 = 
	`mosquôto_time
();

483 
db
.
now_ªÆ_s
 = 
	`time
(
NULL
);

485 
	`√t__brokî_öô
();

487 
	`c⁄fig__öô
(&
c⁄fig
);

488 
rc
 = 
	`c⁄fig__∑r£_¨gs
(&
c⁄fig
, 
¨gc
, 
¨gv
);

489 if(
rc
 !
MOSQ_ERR_SUCCESS
) Ñc;

490 
db
.
c⁄fig
 = &config;

496 
rc
 = 
	`dr›_¥ivûeges
(&
c⁄fig
);

497 if(
rc
 !
MOSQ_ERR_SUCCESS
) Ñc;

499 if(
c⁄fig
.
d´m⁄
){

500 
	`mosquôto__d´m⁄i£
();

503 if(
	`pid__wrôe
())  1;

505 
rc
 = 
	`db__›í
(&
c⁄fig
);

506 if(
rc
 !
MOSQ_ERR_SUCCESS
){

507 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Couldn't open database.");

508  
rc
;

513 if(
	`log__öô
(&
c⁄fig
)){

514 
rc
 = 1;

515  
rc
;

517 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "mosquôtÿvîsi⁄ %†°¨tög", 
VERSION
);

518 if(
db
.
c⁄fig_fûe
){

519 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "C⁄figÜﬂded from %s.", 
db
.
c⁄fig_fûe
);

521 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "Using default config.");

524 
rc
 = 
	`mosquôto_£curôy_moduÀ_öô
();

525 if(
rc
) Ñc;

526 
rc
 = 
	`mosquôto_£curôy_öô
(
Ál£
);

527 if(
rc
) Ñc;

531 
	`HASH_ITER
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
˘xt
, 
˘xt_tmp
){

532 if(
˘xt
 && !˘xt->
˛ón_°¨t
 && ctxt->
u£∫ame
){

533 
rc
 = 
	`a˛__föd_a˛s
(
˘xt
);

534 if(
rc
){

535 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "FailedÅoássociateÖersisted user %s with ACLs, "

536 "likñy duêtÿch™gedÖ‹t†whûêusögáÖî_li°íî_£âög†c⁄figuøti⁄.", 
˘xt
->
u£∫ame
);

541 #ifde‡
WITH_SYS_TREE


542 
	`sys_åì__öô
();

545 if(
	`li°íîs__°¨t
())  1;

547 
rc
 = 
	`mux__öô
(
li°ísock
, 
li°ísock_cou¡
);

548 if(
rc
) Ñc;

550 
	`sig«l__£tup
();

552 #ifde‡
WITH_BRIDGE


553 
	`bridge__°¨t_Æl
();

556 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "mosquôtÿvîsi⁄ %†ru¬ög", 
VERSION
);

557 #ifde‡
WITH_SYSTEMD


558 
	`sd_nŸify
(0, "READY=1");

561 
run
 = 1;

562 
rc
 = 
	`mosquôto_maö_lo›
(
li°ísock
, 
li°ísock_cou¡
);

564 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "mosquôtÿvîsi⁄ %†ãrmö©ög", 
VERSION
);

569 
	`HASH_ITER
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
˘xt
, 
˘xt_tmp
){

570 
	`c⁄ãxt__£nd_wûl
(
˘xt
);

572 
	`wûl_dñay__£nd_Æl
();

574 #ifde‡
WITH_PERSISTENCE


575 
	`≥rsi°__backup
(
åue
);

577 
	`£ssi⁄_expúy__ªmove_Æl
();

579 
	`li°íîs__°›
();

581 
	`HASH_ITER
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
˘xt
, 
˘xt_tmp
){

582 #ifde‡
WITH_WEBSOCKETS


583 if(!
˘xt
->
wsi
)

586 
	`c⁄ãxt__˛ónup
(
˘xt
, 
åue
);

589 
	`HASH_ITER
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, 
˘xt
, 
˘xt_tmp
){

590 
	`c⁄ãxt__˛ónup
(
˘xt
, 
åue
);

592 #ifde‡
WITH_BRIDGE


593 
i
=0; i<
db
.
bridge_cou¡
; i++){

594 if(
db
.
bridges
[
i
]){

595 
	`c⁄ãxt__˛ónup
(
db
.
bridges
[
i
], 
åue
);

598 
	`mosquôto__‰ì
(
db
.
bridges
);

600 
	`c⁄ãxt__‰ì_disu£d
();

602 
	`db__˛o£
();

604 
	`mosquôto_£curôy_moduÀ_˛ónup
();

606 if(
c⁄fig
.
pid_fûe
){

607 ()
	`ªmove
(
c⁄fig
.
pid_fûe
);

610 
	`log__˛o£
(&
c⁄fig
);

611 
	`c⁄fig__˛ónup
(
db
.
c⁄fig
);

612 
	`√t__brokî_˛ónup
();

614  
rc
;

615 
	}
}

617 #ifde‡
WIN32


618 
WINAPI
 
	$WöMaö
(
HINSTANCE
 
hIn°™˚
, HINSTANCE 
hPªvIn°™˚
, 
LPSTR
 
ÕCmdLöe
, 
nCmdShow
)

620 **
¨gv
;

621 
¨gc
 = 1;

622 *
tokí
;

623 *
ßvïå
 = 
NULL
;

624 
rc
;

626 
	`UNUSED
(
hIn°™˚
);

627 
	`UNUSED
(
hPªvIn°™˚
);

628 
	`UNUSED
(
nCmdShow
);

630 
¨gv
 = 
	`mosquôto__mÆloc
((*)*1);

631 
¨gv
[0] = "mosquitto";

632 
tokí
 = 
	`°πok_r
(
ÕCmdLöe
, " ", &
ßvïå
);

633 
tokí
){

634 
¨gc
++;

635 
¨gv
 = 
	`mosquôto__ªÆloc
◊rgv, (*)*
¨gc
);

636 if(!
¨gv
){

637 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

638  
MOSQ_ERR_NOMEM
;

640 
¨gv
[
¨gc
-1] = 
tokí
;

641 
tokí
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

643 
rc
 = 
	`maö
(
¨gc
, 
¨gv
);

644 
	`mosquôto__‰ì
(
¨gv
);

645  
rc
;

646 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/mosquitto_broker_internal.h

20 #i‚de‡
MOSQUITTO_BROKER_INTERNAL_H


21 
	#MOSQUITTO_BROKER_INTERNAL_H


	)

23 
	~"c⁄fig.h
"

24 
	~<°dio.h
>

26 #ifde‡
WITH_WEBSOCKETS


27 
	~<libwebsockës.h
>

28 #i‡
LWS_LIBRARY_VERSION_NUMBER
 >3002000 && !
deföed
(
LWS_WITH_EXTERNAL_POLL
)

33 
	~"mosquôto_öã∫Æ.h
"

34 
	~"mosquôto_brokî.h
"

35 
	~"mosquôto_∂ugö.h
"

36 
	~"mosquôto.h
"

37 
	~"loggög_mosq.h
"

38 
	~"∑ssw‹d_mosq.h
"

39 
	~"és_mosq.h
"

40 
	~"uthash.h
"

42 #i‚de‡
__GNUC__


43 
	#__©åibuã__
(
©åib
)

	)

47 
	#MQTT3_LOG_NONE
 0x00

	)

48 
	#MQTT3_LOG_SYSLOG
 0x01

	)

49 
	#MQTT3_LOG_FILE
 0x02

	)

50 
	#MQTT3_LOG_STDOUT
 0x04

	)

51 
	#MQTT3_LOG_STDERR
 0x08

	)

52 
	#MQTT3_LOG_TOPIC
 0x10

	)

53 
	#MQTT3_LOG_DLT
 0x20

	)

54 
	#MQTT3_LOG_ALL
 0xFF

	)

56 
	#WEBSOCKET_CLIENT
 -2

	)

58 
	#CMD_PORT_LIMIT
 10

	)

59 
	#TOPIC_HIERARCHY_LIMIT
 200

	)

61 
uöt64_t
 
	tdbid_t
;

63 (*
	tFUNC_∂ugö_öô_v5
)(
	tmosquôto_∂ugö_id_t
 *, **, 
	tmosquôto_›t
 *, );

64 (*
	tFUNC_∂ugö_˛ónup_v5
)(*, 
	tmosquôto_›t
 *, );

66 (*
	tFUNC_auth_∂ugö_öô_v4
)(**, 
	tmosquôto_›t
 *, );

67 (*
	tFUNC_auth_∂ugö_˛ónup_v4
)(*, 
	tmosquôto_›t
 *, );

68 (*
	tFUNC_auth_∂ugö_£curôy_öô_v4
)(*, 
	tmosquôto_›t
 *, , 
	tboﬁ
);

69 (*
	tFUNC_auth_∂ugö_£curôy_˛ónup_v4
)(*, 
	tmosquôto_›t
 *, , 
	tboﬁ
);

70 (*
	tFUNC_auth_∂ugö_a˛_check_v4
)(*, , 
	tmosquôto
 *, 
	tmosquôto_a˛_msg
 *);

71 (*
	tFUNC_auth_∂ugö_u≈wd_check_v4
)(*, 
	tmosquôto
 *, const *, const *);

72 (*
	tFUNC_auth_∂ugö_psk_key_gë_v4
)(*, 
	tmosquôto
 *, const *, const *, *, );

73 (*
	tFUNC_auth_∂ugö_auth_°¨t_v4
)(*, 
	tmosquôto
 *, c⁄° *, 
	tboﬁ
, c⁄° *, 
	tuöt16_t
, **, uint16_t *);

74 (*
	tFUNC_auth_∂ugö_auth_c⁄töue_v4
)(*, 
	tmosquôto
 *, c⁄° *, c⁄° *, 
	tuöt16_t
, **, uint16_t *);

76 (*
	tFUNC_auth_∂ugö_öô_v3
)(**, 
	tmosquôto_›t
 *, );

77 (*
	tFUNC_auth_∂ugö_˛ónup_v3
)(*, 
	tmosquôto_›t
 *, );

78 (*
	tFUNC_auth_∂ugö_£curôy_öô_v3
)(*, 
	tmosquôto_›t
 *, , 
	tboﬁ
);

79 (*
	tFUNC_auth_∂ugö_£curôy_˛ónup_v3
)(*, 
	tmosquôto_›t
 *, , 
	tboﬁ
);

80 (*
	tFUNC_auth_∂ugö_a˛_check_v3
)(*, , c⁄° 
	tmosquôto
 *, 
	tmosquôto_a˛_msg
 *);

81 (*
	tFUNC_auth_∂ugö_u≈wd_check_v3
)(*, c⁄° 
	tmosquôto
 *, const *, const *);

82 (*
	tFUNC_auth_∂ugö_psk_key_gë_v3
)(*, c⁄° 
	tmosquôto
 *, const *, const *, *, );

84 (*
	tFUNC_auth_∂ugö_öô_v2
)(**, 
	tmosquôto_auth_›t
 *, );

85 (*
	tFUNC_auth_∂ugö_˛ónup_v2
)(*, 
	tmosquôto_auth_›t
 *, );

86 (*
	tFUNC_auth_∂ugö_£curôy_öô_v2
)(*, 
	tmosquôto_auth_›t
 *, , 
	tboﬁ
);

87 (*
	tFUNC_auth_∂ugö_£curôy_˛ónup_v2
)(*, 
	tmosquôto_auth_›t
 *, , 
	tboﬁ
);

88 (*
	tFUNC_auth_∂ugö_a˛_check_v2
)(*, const *, const *, const *, );

89 (*
	tFUNC_auth_∂ugö_u≈wd_check_v2
)(*, const *, const *);

90 (*
	tFUNC_auth_∂ugö_psk_key_gë_v2
)(*, const *, const *, *, );

93 
	emosquôto_msg_‹igö
{

94 
mosq_mo_˛õ¡
 = 0,

95 
mosq_mo_brokî
 = 1

98 
	smosquôto__auth_∂ugö
{

99 *
lib
;

100 *
u£r_d©a
;

101 (*
∂ugö_vîsi⁄
)();

102 
mosquôto_∂ugö_id_t
 *
idítifõr
;

104 
FUNC_∂ugö_öô_v5
 
∂ugö_öô_v5
;

105 
FUNC_∂ugö_˛ónup_v5
 
∂ugö_˛ónup_v5
;

107 
FUNC_auth_∂ugö_öô_v4
 
∂ugö_öô_v4
;

108 
FUNC_auth_∂ugö_˛ónup_v4
 
∂ugö_˛ónup_v4
;

109 
FUNC_auth_∂ugö_£curôy_öô_v4
 
£curôy_öô_v4
;

110 
FUNC_auth_∂ugö_£curôy_˛ónup_v4
 
£curôy_˛ónup_v4
;

111 
FUNC_auth_∂ugö_a˛_check_v4
 
a˛_check_v4
;

112 
FUNC_auth_∂ugö_u≈wd_check_v4
 
u≈wd_check_v4
;

113 
FUNC_auth_∂ugö_psk_key_gë_v4
 
psk_key_gë_v4
;

114 
FUNC_auth_∂ugö_auth_°¨t_v4
 
auth_°¨t_v4
;

115 
FUNC_auth_∂ugö_auth_c⁄töue_v4
 
auth_c⁄töue_v4
;

117 
FUNC_auth_∂ugö_öô_v3
 
∂ugö_öô_v3
;

118 
FUNC_auth_∂ugö_˛ónup_v3
 
∂ugö_˛ónup_v3
;

119 
FUNC_auth_∂ugö_£curôy_öô_v3
 
£curôy_öô_v3
;

120 
FUNC_auth_∂ugö_£curôy_˛ónup_v3
 
£curôy_˛ónup_v3
;

121 
FUNC_auth_∂ugö_a˛_check_v3
 
a˛_check_v3
;

122 
FUNC_auth_∂ugö_u≈wd_check_v3
 
u≈wd_check_v3
;

123 
FUNC_auth_∂ugö_psk_key_gë_v3
 
psk_key_gë_v3
;

125 
FUNC_auth_∂ugö_öô_v2
 
∂ugö_öô_v2
;

126 
FUNC_auth_∂ugö_˛ónup_v2
 
∂ugö_˛ónup_v2
;

127 
FUNC_auth_∂ugö_£curôy_öô_v2
 
£curôy_öô_v2
;

128 
FUNC_auth_∂ugö_£curôy_˛ónup_v2
 
£curôy_˛ónup_v2
;

129 
FUNC_auth_∂ugö_a˛_check_v2
 
a˛_check_v2
;

130 
FUNC_auth_∂ugö_u≈wd_check_v2
 
u≈wd_check_v2
;

131 
FUNC_auth_∂ugö_psk_key_gë_v2
 
psk_key_gë_v2
;

132 
vîsi⁄
;

135 
	smosquôto__auth_∂ugö_c⁄fig


137 *
∑th
;

138 
mosquôto_›t
 *
›ti⁄s
;

139 
›ti⁄_cou¡
;

140 
boﬁ
 
díy_•ecül_ch¨s
;

142 
mosquôto__auth_∂ugö
 
∂ugö
;

145 
	smosquôto__ˇŒback
{

146 
UT_hash_h™dÀ
 
hh
;

147 
mosquôto__ˇŒback
 *
√xt
, *
¥ev
;

148 
MOSQ_FUNC_gíîic_ˇŒback
 
cb
;

149 *
u£rd©a
;

150 *
d©a
;

153 
	s∂ugö__ˇŒbacks
{

154 
mosquôto__ˇŒback
 *
tick
;

155 
mosquôto__ˇŒback
 *
a˛_check
;

156 
mosquôto__ˇŒback
 *
basic_auth
;

157 
mosquôto__ˇŒback
 *
c⁄åﬁ
;

158 
mosquôto__ˇŒback
 *
disc⁄√˘
;

159 
mosquôto__ˇŒback
 *
ext_auth_c⁄töue
;

160 
mosquôto__ˇŒback
 *
ext_auth_°¨t
;

161 
mosquôto__ˇŒback
 *
mesßge
;

162 
mosquôto__ˇŒback
 *
psk_key
;

163 
mosquôto__ˇŒback
 *
ªlﬂd
;

166 
	smosquôto__£curôy_›ti⁄s
 {

171 
mosquôto__u≈wd
 *
u≈wd
;

172 
mosquôto__u≈wd
 *
psk_id
;

173 
mosquôto__a˛_u£r
 *
a˛_li°
;

174 
mosquôto__a˛
 *
a˛_∑âîns
;

175 *
∑ssw‹d_fûe
;

176 *
psk_fûe
;

177 *
a˛_fûe
;

178 
mosquôto__auth_∂ugö_c⁄fig
 *
auth_∂ugö_c⁄figs
;

179 
auth_∂ugö_c⁄fig_cou¡
;

180 
öt8_t
 
Ælow_™⁄ymous
;

181 
boﬁ
 
Ælow_zîo_Àngth_˛õ¡id
;

182 *
auto_id_¥efix
;

183 
uöt16_t
 
auto_id_¥efix_Àn
;

184 
∂ugö__ˇŒbacks
 
∂ugö_ˇŒbacks
;

185 
mosquôto_∂ugö_id_t
 *
pid
;

188 #ifde‡
WITH_EPOLL


189 
	e°ru˘_idít
{

190 
id_övÆid
 = 0,

191 
id_li°íî
 = 1,

192 
id_˛õ¡
 = 2,

193 
id_li°íî_ws
 = 3,

197 
	smosquôto__li°íî
 {

198 
uöt16_t
 
p‹t
;

199 *
ho°
;

200 *
böd_öãrÁ˚
;

201 
max_c⁄√˘i⁄s
;

202 *
mou¡_poöt
;

203 
mosq_sock_t
 *
socks
;

204 
sock_cou¡
;

205 
˛õ¡_cou¡
;

206 
mosquôto_¥Ÿocﬁ
 
¥Ÿocﬁ
;

207 
sockë_domaö
;

208 
boﬁ
 
u£_u£∫ame_as_˛õ¡id
;

209 
uöt8_t
 
max_qos
;

210 
uöt16_t
 
max_t›ic_Æüs
;

211 #ifde‡
WITH_TLS


212 *
ˇfûe
;

213 *
ˇ∑th
;

214 *
˚πfûe
;

215 *
keyfûe
;

216 *
és_ígöe
;

217 *
és_ígöe_k∑ss_sha1
;

218 *
cùhîs
;

219 *
cùhîs_és13
;

220 *
psk_höt
;

221 
SSL_CTX
 *
s¶_˘x
;

222 *
¸lfûe
;

223 *
és_vîsi⁄
;

224 *
dh∑ømfûe
;

225 
boﬁ
 
u£_idítôy_as_u£∫ame
;

226 
boﬁ
 
u£_subje˘_as_u£∫ame
;

227 
boﬁ
 
ªquúe_˚πifiˇã
;

228 
mosquôto__keyf‹m
 
és_keyf‹m
;

230 #ifde‡
WITH_WEBSOCKETS


231 
lws_c⁄ãxt
 *
ws_c⁄ãxt
;

232 
boﬁ
 
ws_ö_öô
;

233 *
hâp_dú
;

234 
lws_¥Ÿocﬁs
 *
ws_¥Ÿocﬁ
;

236 
mosquôto__£curôy_›ti⁄s
 
£curôy_›ti⁄s
;

237 #ifde‡
WITH_UNIX_SOCKETS


238 *
unix_sockë_∑th
;

243 
	smosquôto__li°íî_sock
{

244 #ifde‡
WITH_EPOLL


246 
idít
;

248 
mosq_sock_t
 
sock
;

249 
mosquôto__li°íî
 *
li°íî
;

252 
	smosquôto_∂ugö_id_t
{

253 
mosquôto__li°íî
 *
li°íî
;

254 } 
	tmosquôto_∂ugö_id_t
;

256 
	smosquôto__c⁄fig
 {

257 
boﬁ
 
Ælow_du∂iˇã_mesßges
;

258 
autoßve_öãrvÆ
;

259 
boﬁ
 
autoßve_⁄_ch™ges
;

260 
boﬁ
 
check_ªèö_sour˚
;

261 *
˛õ¡id_¥efixes
;

262 
boﬁ
 
c⁄√˘i⁄_mesßges
;

263 
uöt16_t
 
cmd_p‹t
[
CMD_PORT_LIMIT
];

264 
cmd_p‹t_cou¡
;

265 
boﬁ
 
d´m⁄
;

266 
mosquôto__li°íî
 
deÁu…_li°íî
;

267 
mosquôto__li°íî
 *
li°íîs
;

268 
li°íî_cou¡
;

269 
boﬁ
 
loˇl_⁄ly
;

270 
log_de°
;

271 
log_Ácûôy
;

272 
log_ty≥
;

273 
boﬁ
 
log_time°amp
;

274 *
log_time°amp_f‹m©
;

275 *
log_fûe
;

276 
FILE
 *
log_Âå
;

277 
size_t
 
max_öÊight_byãs
;

278 
size_t
 
max_queued_byãs
;

279 
max_queued_mesßges
;

280 
uöt32_t
 
max_∑ckë_size
;

281 
uöt32_t
 
mesßge_size_limô
;

282 
uöt16_t
 
max_öÊight_mesßges
;

283 
uöt16_t
 
max_kì∑live
;

284 
uöt8_t
 
max_qos
;

285 
boﬁ
 
≥rsi°í˚
;

286 *
≥rsi°í˚_loˇti⁄
;

287 *
≥rsi°í˚_fûe
;

288 *
≥rsi°í˚_fûï©h
;

289 
time_t
 
≥rsi°ít_˛õ¡_expú©i⁄
;

290 *
pid_fûe
;

291 
boﬁ
 
queue_qos0_mesßges
;

292 
boﬁ
 
≥r_li°íî_£âögs
;

293 
boﬁ
 
ªèö_avaûabÀ
;

294 
boﬁ
 
£t_t˝_nodñay
;

295 
sys_öãrvÆ
;

296 
boﬁ
 
upgøde_outgoög_qos
;

297 *
u£r
;

298 #ifde‡
WITH_WEBSOCKETS


299 
websockës_log_Àvñ
;

300 
uöt16_t
 
websockës_hódîs_size
;

302 #ifde‡
WITH_BRIDGE


303 
mosquôto__bridge
 *
bridges
;

304 
bridge_cou¡
;

306 
mosquôto__£curôy_›ti⁄s
 
£curôy_›ti⁄s
;

310 
	smosquôto__subÀaf
 {

311 
mosquôto__subÀaf
 *
¥ev
;

312 
mosquôto__subÀaf
 *
√xt
;

313 
mosquôto
 *
c⁄ãxt
;

314 
uöt32_t
 
idítifõr
;

315 
uöt8_t
 
qos
;

316 
boﬁ
 
no_loˇl
;

317 
boﬁ
 
ªèö_as_published
;

321 
	smosquôto__subsh¨ed
 {

322 
UT_hash_h™dÀ
 
hh
;

323 *
«me
;

324 
mosquôto__subÀaf
 *
subs
;

327 
	smosquôto__subhõr
 {

328 
UT_hash_h™dÀ
 
hh
;

329 
mosquôto__subhõr
 *
∑ª¡
;

330 
mosquôto__subhõr
 *
chûdªn
;

331 
mosquôto__subÀaf
 *
subs
;

332 
mosquôto__subsh¨ed
 *
sh¨ed
;

333 *
t›ic
;

334 
uöt16_t
 
t›ic_Àn
;

337 
	smosquôto__˛õ¡_sub
 {

338 
mosquôto__subhõr
 *
hõr
;

339 
mosquôto__subsh¨ed
 *
sh¨ed
;

340 
t›ic_fûãr
[];

343 
	ssub__tokí
 {

344 
sub__tokí
 *
√xt
;

345 *
t›ic
;

346 
uöt16_t
 
t›ic_Àn
;

349 
	smosquôto__ªèöhõr
 {

350 
UT_hash_h™dÀ
 
hh
;

351 
mosquôto__ªèöhõr
 *
∑ª¡
;

352 
mosquôto__ªèöhõr
 *
chûdªn
;

353 
mosquôto_msg_°‹e
 *
ªèöed
;

354 *
t›ic
;

355 
uöt16_t
 
t›ic_Àn
;

358 
	smosquôto_msg_°‹e_lﬂd
{

359 
UT_hash_h™dÀ
 
hh
;

360 
dbid_t
 
db_id
;

361 
mosquôto_msg_°‹e
 *
°‹e
;

364 
	smosquôto_msg_°‹e
{

365 
mosquôto_msg_°‹e
 *
√xt
;

366 
mosquôto_msg_°‹e
 *
¥ev
;

367 
dbid_t
 
db_id
;

368 *
sour˚_id
;

369 *
sour˚_u£∫ame
;

370 
mosquôto__li°íî
 *
sour˚_li°íî
;

371 **
de°_ids
;

372 
de°_id_cou¡
;

373 
ªf_cou¡
;

374 * 
t›ic
;

375 
mosquôto_¥›îty
 *
¥›îtõs
;

376 *
∑ylﬂd
;

377 
time_t
 
mesßge_expúy_time
;

378 
uöt32_t
 
∑ylﬂdÀn
;

379 
mosquôto_msg_‹igö
 
‹igö
;

380 
uöt16_t
 
sour˚_mid
;

381 
uöt16_t
 
mid
;

382 
uöt8_t
 
qos
;

383 
boﬁ
 
ªèö
;

386 
	smosquôto_˛õ¡_msg
{

387 
mosquôto_˛õ¡_msg
 *
¥ev
;

388 
mosquôto_˛õ¡_msg
 *
√xt
;

389 
mosquôto_msg_°‹e
 *
°‹e
;

390 
mosquôto_¥›îty
 *
¥›îtõs
;

391 
time_t
 
time°amp
;

392 
uöt16_t
 
mid
;

393 
uöt8_t
 
qos
;

394 
boﬁ
 
ªèö
;

395 
mosquôto_msg_dúe˘i⁄
 
dúe˘i⁄
;

396 
mosquôto_msg_°©e
 
°©e
;

397 
boﬁ
 
dup
;

401 
	smosquôto__u≈wd
{

402 
UT_hash_h™dÀ
 
hh
;

403 *
u£∫ame
;

404 *
∑ssw‹d
;

405 *
˛õ¡id
;

406 #ifde‡
WITH_TLS


407 *
ß…
;

408 
∑ssw‹d_Àn
;

409 
ß…_Àn
;

410 
ôî©i⁄s
;

412 
mosquôto_pwhash_ty≥
 
hashty≥
;

415 
	smosquôto__a˛
{

416 
mosquôto__a˛
 *
√xt
;

417 *
t›ic
;

418 
ac˚ss
;

419 
ucou¡
;

420 
ccou¡
;

423 
	smosquôto__a˛_u£r
{

424 
mosquôto__a˛_u£r
 *
√xt
;

425 *
u£∫ame
;

426 
mosquôto__a˛
 *
a˛
;

430 
	smosquôto_mesßge_v5
{

431 
mosquôto_mesßge_v5
 *
√xt
, *
¥ev
;

432 *
t›ic
;

433 *
∑ylﬂd
;

434 
mosquôto_¥›îty
 *
¥›îtõs
;

435 *
˛õ¡id
;

437 
∑ylﬂdÀn
;

438 
qos
;

439 
boﬁ
 
ªèö
;

443 
	smosquôto_db
{

444 
dbid_t
 
œ°_db_id
;

445 
mosquôto__subhõr
 *
subs
;

446 
mosquôto__ªèöhõr
 *
ªèös
;

447 
mosquôto
 *
c⁄ãxts_by_id
;

448 
mosquôto
 *
c⁄ãxts_by_sock
;

449 
mosquôto
 *
c⁄ãxts_f‹_‰ì
;

450 #ifde‡
WITH_BRIDGE


451 
mosquôto
 **
bridges
;

453 
˛õ¡id__ödex_hash
 *
˛õ¡id_ödex_hash
;

454 
mosquôto_msg_°‹e
 *
msg_°‹e
;

455 
mosquôto_msg_°‹e_lﬂd
 *
msg_°‹e_lﬂd
;

456 
time_t
 
now_s
;

457 
time_t
 
now_ªÆ_s
;

458 #ifde‡
WITH_BRIDGE


459 
bridge_cou¡
;

461 
msg_°‹e_cou¡
;

462 
msg_°‹e_byãs
;

463 *
c⁄fig_fûe
;

464 
mosquôto__c⁄fig
 *
c⁄fig
;

465 
auth_∂ugö_cou¡
;

466 
boﬁ
 
vîbo£
;

467 #ifde‡
WITH_SYS_TREE


468 
subs¸ùti⁄_cou¡
;

469 
sh¨ed_subs¸ùti⁄_cou¡
;

470 
ªèöed_cou¡
;

472 
≥rsi°í˚_ch™ges
;

473 
mosquôto
 *
Œ_f‹_‰ì
;

474 #ifde‡
WITH_EPOLL


475 
ïﬁlfd
;

477 
mosquôto_mesßge_v5
 *
∂ugö_msgs
;

480 
	emosquôto__bridge_dúe˘i⁄
{

481 
bd_out
 = 0,

482 
bd_ö
 = 1,

483 
bd_bŸh
 = 2

486 
	emosquôto_bridge_°¨t_ty≥
{

487 
b°_autom©ic
 = 0,

488 
b°_œzy
 = 1,

489 
b°_m™uÆ
 = 2,

490 
b°_⁄˚
 = 3

493 
	smosquôto__bridge_t›ic
{

494 *
t›ic
;

495 *
loˇl_¥efix
;

496 *
ªmŸe_¥efix
;

497 *
loˇl_t›ic
;

498 *
ªmŸe_t›ic
;

499 
mosquôto__bridge_dúe˘i⁄
 
dúe˘i⁄
;

500 
uöt8_t
 
qos
;

503 
	sbridge_addªss
{

504 *
addªss
;

505 
uöt16_t
 
p‹t
;

508 
	smosquôto__bridge
{

509 *
«me
;

510 
bridge_addªss
 *
addªs£s
;

511 
cur_addªss
;

512 
addªss_cou¡
;

513 
time_t
 
¥im¨y_ªåy
;

514 
mosq_sock_t
 
¥im¨y_ªåy_sock
;

515 
boﬁ
 
round_robö
;

516 
boﬁ
 
åy_¥iv©e
;

517 
boﬁ
 
åy_¥iv©e_ac˚±ed
;

518 
boﬁ
 
˛ón_°¨t
;

519 
öt8_t
 
˛ón_°¨t_loˇl
;

520 
uöt16_t
 
kì∑live
;

521 
mosquôto__bridge_t›ic
 *
t›ics
;

522 
t›ic_cou¡
;

523 
boﬁ
 
t›ic_ªm≠pög
;

524 
mosquôto__¥Ÿocﬁ
 
¥Ÿocﬁ_vîsi⁄
;

525 
time_t
 
ª°¨t_t
;

526 *
ªmŸe_˛õ¡id
;

527 *
ªmŸe_u£∫ame
;

528 *
ªmŸe_∑ssw‹d
;

529 *
loˇl_˛õ¡id
;

530 *
loˇl_u£∫ame
;

531 *
loˇl_∑ssw‹d
;

532 *
nŸifiˇti⁄_t›ic
;

533 *
böd_addªss
;

534 
boﬁ
 
nŸifiˇti⁄s
;

535 
boﬁ
 
nŸifiˇti⁄s_loˇl_⁄ly
;

536 
mosquôto_bridge_°¨t_ty≥
 
°¨t_ty≥
;

537 
idÀ_timeout
;

538 
ª°¨t_timeout
;

539 
backoff_ba£
;

540 
backoff_ˇp
;

541 
thªshﬁd
;

542 
uöt32_t
 
maximum_∑ckë_size
;

543 
boﬁ
 
œzy_ªc⁄√˘
;

544 
boﬁ
 
©ãm±_unsubs¸ibe
;

545 
boﬁ
 
öôül_nŸifiˇti⁄_d⁄e
;

546 
boﬁ
 
outgoög_ªèö
;

547 #ifde‡
WITH_TLS


548 
boﬁ
 
és_ö£cuª
;

549 
boﬁ
 
és_oc•_ªquúed
;

550 *
és_ˇfûe
;

551 *
és_ˇ∑th
;

552 *
és_˚πfûe
;

553 *
és_keyfûe
;

554 *
és_vîsi⁄
;

555 *
és_Æ≤
;

556 #ifde‡
FINAL_WITH_TLS_PSK


557 *
és_psk_idítôy
;

558 *
és_psk
;

563 #ifde‡
WITH_WEBSOCKETS


564 
	slibws_mqâ_hack
 {

565 *
hâp_dú
;

566 
mosquôto__li°íî
 *
li°íî
;

569 
	slibws_mqâ_d©a
 {

570 
mosquôto
 *
mosq
;

574 
	~<√t_mosq.h
>

577 
mosquôto_db
 
db
;

582 
	`mosquôto_maö_lo›
(
mosquôto__li°íî_sock
 *
li°ísock
, 
li°ísock_cou¡
);

588 
	`c⁄fig__öô
(
mosquôto__c⁄fig
 *
c⁄fig
);

590 
	`c⁄fig__∑r£_¨gs
(
mosquôto__c⁄fig
 *
c⁄fig
, 
¨gc
, *
¨gv
[]);

595 
	`c⁄fig__ªad
(
mosquôto__c⁄fig
 *
c⁄fig
, 
boﬁ
 
ªlﬂd
);

597 
	`c⁄fig__˛ónup
(
mosquôto__c⁄fig
 *
c⁄fig
);

598 
	`c⁄fig__gë_dú_fûes
(c⁄° *
ö˛ude_dú
, ***
fûes
, *
fûe_cou¡
);

600 
	`dr›_¥ivûeges
(
mosquôto__c⁄fig
 *
c⁄fig
);

605 
	`£nd__c⁄«ck
(
mosquôto
 *
c⁄ãxt
, 
uöt8_t
 
ack
, uöt8_à
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

606 
	`£nd__suback
(
mosquôto
 *
c⁄ãxt
, 
uöt16_t
 
mid
, 
uöt32_t
 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
);

607 
	`£nd__unsuback
(
mosquôto
 *
c⁄ãxt
, 
uöt16_t
 
mid
, 
ªas⁄_code_cou¡
, 
uöt8_t
 *
ªas⁄_codes
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

608 
	`£nd__auth
(
mosquôto
 *
c⁄ãxt
, 
uöt8_t
 
ªas⁄_code
, c⁄° *
auth_d©a
, 
uöt16_t
 
auth_d©a_Àn
);

613 
	`√t__brokî_öô
();

614 
	`√t__brokî_˛ónup
();

615 
mosquôto
 *
	`√t__sockë_ac˚±
(
mosquôto__li°íî_sock
 *
li°ísock
);

616 
	`√t__sockë_li°í
(
mosquôto__li°íî
 *
li°íî
);

617 
	`√t__sockë_gë_addªss
(
mosq_sock_t
 
sock
, *
buf
, 
size_t
 
Àn
, 
uöt16_t
 *
ªmŸe_addªss
);

618 
	`√t__és_lﬂd_vîify
(
mosquôto__li°íî
 *
li°íî
);

619 
	`√t__és_£rvî_˘x
(
mosquôto__li°íî
 *
li°íî
);

620 
	`√t__lﬂd_˚πifiˇãs
(
mosquôto__li°íî
 *
li°íî
);

625 
	`h™dÀ__∑ckë
(
mosquôto
 *
c⁄ãxt
);

626 
	`h™dÀ__c⁄«ck
(
mosquôto
 *
c⁄ãxt
);

627 
	`h™dÀ__c⁄√˘
(
mosquôto
 *
c⁄ãxt
);

628 
	`h™dÀ__disc⁄√˘
(
mosquôto
 *
c⁄ãxt
);

629 
	`h™dÀ__publish
(
mosquôto
 *
c⁄ãxt
);

630 
	`h™dÀ__subs¸ibe
(
mosquôto
 *
c⁄ãxt
);

631 
	`h™dÀ__unsubs¸ibe
(
mosquôto
 *
c⁄ãxt
);

632 
	`h™dÀ__auth
(
mosquôto
 *
c⁄ãxt
);

637 
	`db__›í
(
mosquôto__c⁄fig
 *
c⁄fig
);

638 
	`db__˛o£
();

639 #ifde‡
WITH_PERSISTENCE


640 
	`≥rsi°__backup
(
boﬁ
 
shutdown
);

641 
	`≥rsi°__ª°‹e
();

644 
	`db__mesßge_cou¡
(*
cou¡
);

645 
	`db__mesßge_dñëe_outgoög
(
mosquôto
 *
c⁄ãxt
, 
uöt16_t
 
mid
, 
mosquôto_msg_°©e
 
ex≥˘_°©e
, 
qos
);

646 
	`db__mesßge_ö£π
(
mosquôto
 *
c⁄ãxt
, 
uöt16_t
 
mid
, 
mosquôto_msg_dúe˘i⁄
 
dú
, 
uöt8_t
 
qos
, 
boﬁ
 
ªèö
, 
mosquôto_msg_°‹e
 *
°‹ed
, 
mosquôto_¥›îty
 *
¥›îtõs
, boﬁ 
upd©e
);

647 
	`db__mesßge_ªmove_öcomög
(
mosquôto
* 
c⁄ãxt
, 
uöt16_t
 
mid
);

648 
	`db__mesßge_ªÀa£_öcomög
(
mosquôto
 *
c⁄ãxt
, 
uöt16_t
 
mid
);

649 
	`db__mesßge_upd©e_outgoög
(
mosquôto
 *
c⁄ãxt
, 
uöt16_t
 
mid
, 
mosquôto_msg_°©e
 
°©e
, 
qos
);

650 
	`db__mesßge_dequeue_fú°
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_msg_d©a
 *
msg_d©a
);

651 
	`db__mesßges_dñëe
(
mosquôto
 *
c⁄ãxt
, 
boﬁ
 
f‹˚_‰ì
);

652 
	`db__mesßges_ósy_queue
(
mosquôto
 *
c⁄ãxt
, c⁄° *
t›ic
, 
uöt8_t
 
qos
, 
uöt32_t
 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
ªèö
, uöt32_à
mesßge_expúy_öãrvÆ
, 
mosquôto_¥›îty
 **
¥›îtõs
);

653 
	`db__mesßge_°‹e
(c⁄° 
mosquôto
 *
sour˚
, 
mosquôto_msg_°‹e
 *
°‹ed
, 
uöt32_t
 
mesßge_expúy_öãrvÆ
, 
dbid_t
 
°‹e_id
, 
mosquôto_msg_‹igö
 
‹igö
);

654 
	`db__mesßge_°‹e_föd
(
mosquôto
 *
c⁄ãxt
, 
uöt16_t
 
mid
, 
mosquôto_msg_°‹e
 **
°‹ed
);

655 
	`db__msg_°‹e_add
(
mosquôto_msg_°‹e
 *
°‹e
);

656 
	`db__msg_°‹e_ªmove
(
mosquôto_msg_°‹e
 *
°‹e
);

657 
	`db__msg_°‹e_ªf_öc
(
mosquôto_msg_°‹e
 *
°‹e
);

658 
	`db__msg_°‹e_ªf_dec
(
mosquôto_msg_°‹e
 **
°‹e
);

659 
	`db__msg_°‹e_˛ón
();

660 
	`db__msg_°‹e_com∑˘
();

661 
	`db__msg_°‹e_‰ì
(
mosquôto_msg_°‹e
 *
°‹e
);

662 
	`db__mesßge_ªc⁄√˘_ª£t
(
mosquôto
 *
c⁄ãxt
);

663 
boﬁ
 
	`db__ªady_f‹_Êight
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_msg_dúe˘i⁄
 
dú
, 
qos
);

664 
boﬁ
 
	`db__ªady_f‹_queue
(
mosquôto
 *
c⁄ãxt
, 
qos
, 
mosquôto_msg_d©a
 *
msg_d©a
);

665 
	`sys_åì__öô
();

666 
	`sys_åì__upd©e
(
öãrvÆ
, 
time_t
 
°¨t_time
);

667 
	`db__mesßge_wrôe_öÊight_out_Æl
(
mosquôto
 *
c⁄ãxt
);

668 
	`db__mesßge_wrôe_öÊight_out_œã°
(
mosquôto
 *
c⁄ãxt
);

669 
	`db__mesßge_wrôe_queued_out
(
mosquôto
 *
c⁄ãxt
);

670 
	`db__mesßge_wrôe_queued_ö
(
mosquôto
 *
c⁄ãxt
);

671 
	`db__msg_add_to_öÊight_°©s
(
mosquôto_msg_d©a
 *
msg_d©a
, 
mosquôto_˛õ¡_msg
 *
msg
);

672 
	`db__msg_add_to_queued_°©s
(
mosquôto_msg_d©a
 *
msg_d©a
, 
mosquôto_˛õ¡_msg
 *
msg
);

673 
	`db__expúe_Æl_mesßges
(
mosquôto
 *
c⁄ãxt
);

678 
	`sub__add
(
mosquôto
 *
c⁄ãxt
, c⁄° *
sub
, 
uöt8_t
 
qos
, 
uöt32_t
 
idítifõr
, 
›ti⁄s
, 
mosquôto__subhõr
 **
roŸ
);

679 
mosquôto__subhõr
 *
	`sub__add_hõr_íåy
(mosquôto__subhõ∏*
∑ª¡
, mosquôto__subhõ∏**
siblög
, c⁄° *
t›ic
, 
uöt16_t
 
Àn
);

680 
	`sub__ªmove
(
mosquôto
 *
c⁄ãxt
, c⁄° *
sub
, 
mosquôto__subhõr
 *
roŸ
, 
uöt8_t
 *
ªas⁄
);

681 
	`sub__åì_¥öt
(
mosquôto__subhõr
 *
roŸ
, 
Àvñ
);

682 
	`sub__˛ón_£ssi⁄
(
mosquôto
 *
c⁄ãxt
);

683 
	`sub__mesßges_queue
(c⁄° *
sour˚_id
, c⁄° *
t›ic
, 
uöt8_t
 
qos
, 
ªèö
, 
mosquôto_msg_°‹e
 **
°‹ed
);

684 
	`sub__t›ic_tokíi£
(c⁄° *
subt›ic
, **
loˇl_sub
, ***
t›ics
, c⁄° **
sh¨íame
);

685 
	`sub__t›ic_tokís_‰ì
(
sub__tokí
 *
tokís
);

690 
mosquôto
 *
	`c⁄ãxt__öô
(
mosq_sock_t
 
sock
);

691 
	`c⁄ãxt__˛ónup
(
mosquôto
 *
c⁄ãxt
, 
boﬁ
 
f‹˚_‰ì
);

692 
	`c⁄ãxt__disc⁄√˘
(
mosquôto
 *
c⁄ãxt
);

693 
	`c⁄ãxt__add_to_disu£d
(
mosquôto
 *
c⁄ãxt
);

694 
	`c⁄ãxt__‰ì_disu£d
();

695 
	`c⁄ãxt__£nd_wûl
(
mosquôto
 *
c⁄ãxt
);

696 
	`c⁄ãxt__add_to_by_id
(
mosquôto
 *
c⁄ãxt
);

697 
	`c⁄ãxt__ªmove_‰om_by_id
(
mosquôto
 *
c⁄ãxt
);

699 
	`c⁄√˘__⁄_auth‹i£d
(
mosquôto
 *
c⁄ãxt
, *
auth_d©a_out
, 
uöt16_t
 
auth_d©a_out_Àn
);

705 #ifde‡
WITH_CONTROL


706 
	`c⁄åﬁ__¥o˚ss
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_msg_°‹e
 *
°‹ed
);

707 
	`c⁄åﬁ__˛ónup
();

709 
	`c⁄åﬁ__ªgi°î_ˇŒback
(
mosquôto__£curôy_›ti⁄s
 *
›ts
, 
MOSQ_FUNC_gíîic_ˇŒback
 
cb_func
, c⁄° *
t›ic
, *
u£rd©a
);

710 
	`c⁄åﬁ__uƒegi°î_ˇŒback
(
mosquôto__£curôy_›ti⁄s
 *
›ts
, 
MOSQ_FUNC_gíîic_ˇŒback
 
cb_func
, c⁄° *
t›ic
);

716 
	`log__öô
(
mosquôto__c⁄fig
 *
c⁄fig
);

717 
	`log__˛o£
(
mosquôto__c⁄fig
 *
c⁄fig
);

718 
	$log__öã∫Æ
(c⁄° *
fmt
, ...Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 1, 2)));

723 #ifde‡
WITH_BRIDGE


724 
	`bridge__°¨t_Æl
();

725 
	`bridge__√w
(
mosquôto__bridge
 *
bridge
);

726 
	`bridge__˛ónup
(
mosquôto
 *
c⁄ãxt
);

727 
	`bridge__c⁄√˘
(
mosquôto
 *
c⁄ãxt
);

728 
	`bridge__c⁄√˘_°ï1
(
mosquôto
 *
c⁄ãxt
);

729 
	`bridge__c⁄√˘_°ï2
(
mosquôto
 *
c⁄ãxt
);

730 
	`bridge__c⁄√˘_°ï3
(
mosquôto
 *
c⁄ãxt
);

731 
	`bridge__⁄_c⁄√˘
(
mosquôto
 *
c⁄ãxt
);

732 
	`bridge__∑ckë_˛ónup
(
mosquôto
 *
c⁄ãxt
);

733 
	`bridge_check
();

734 
	`bridge__ªgi°î_loˇl_c⁄√˘i⁄s
();

735 
	`bridge__add_t›ic
(
mosquôto__bridge
 *
bridge
, c⁄° *
t›ic
, 
mosquôto__bridge_dúe˘i⁄
 
dúe˘i⁄
, 
uöt8_t
 
qos
, c⁄° *
loˇl_¥efix
, c⁄° *
ªmŸe_¥efix
);

736 
	`bridge__ªm≠_t›ic_ö
(
mosquôto
 *
c⁄ãxt
, **
t›ic
);

742 
	`mux__öô
(
mosquôto__li°íî_sock
 *
li°ísock
, 
li°ísock_cou¡
);

743 
	`mux__lo›_¥ï¨e
();

744 
	`mux__add_out
(
mosquôto
 *
c⁄ãxt
);

745 
	`mux__ªmove_out
(
mosquôto
 *
c⁄ãxt
);

746 
	`mux__add_ö
(
mosquôto
 *
c⁄ãxt
);

747 
	`mux__dñëe
(
mosquôto
 *
c⁄ãxt
);

748 
	`mux__waô
();

749 
	`mux__h™dÀ
(
mosquôto__li°íî_sock
 *
li°ísock
, 
li°ísock_cou¡
);

750 
	`mux__˛ónup
();

755 
	`li°íî__£t_deÁu…s
(
mosquôto__li°íî
 *
li°íî
);

756 
	`li°íîs__ªlﬂd_Æl_˚πifiˇãs
();

757 #ifde‡
WITH_WEBSOCKETS


758 
	`li°íîs__add_websockës
(
lws_c⁄ãxt
 *
ws_c⁄ãxt
, 
mosq_sock_t
 
fd
);

764 
	`∂ugö__lﬂd_v5
(
mosquôto__li°íî
 *
li°íî
, 
mosquôto__auth_∂ugö
 *
∂ugö
, 
mosquôto_›t
 *
auth_›ti⁄s
, 
auth_›ti⁄_cou¡
, *
lib
);

765 
	`∂ugö__h™dÀ_disc⁄√˘
(
mosquôto
 *
c⁄ãxt
, 
ªas⁄
);

766 
	`∂ugö__h™dÀ_mesßge
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_msg_°‹e
 *
°‹ed
);

767 
	`LIB_ERROR
();

768 
	`∂ugö__h™dÀ_tick
();

773 
	`kì∑live__add
(
mosquôto
 *
c⁄ãxt
);

774 
	`kì∑live__check
();

775 
	`kì∑live__ªmove
(
mosquôto
 *
c⁄ãxt
);

776 
	`kì∑live__ªmove_Æl
();

777 
	`kì∑live__upd©e
(
mosquôto
 *
c⁄ãxt
);

782 
	`¥›îty__¥o˚ss_c⁄√˘
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_¥›îty
 **
¥›s
);

783 
	`¥›îty__¥o˚ss_wûl
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_mesßge_Æl
 *
msg
, 
mosquôto_¥›îty
 **
¥›s
);

784 
	`¥›îty__¥o˚ss_disc⁄√˘
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_¥›îty
 **
¥›s
);

789 
	`ªèö__öô
();

790 
	`ªèö__˛ón
(
mosquôto__ªèöhõr
 **
ªèöhõr
);

791 
	`ªèö__queue
(
mosquôto
 *
c⁄ãxt
, c⁄° *
sub
, 
uöt8_t
 
sub_qos
, 
uöt32_t
 
subs¸ùti⁄_idítifõr
);

792 
	`ªèö__°‹e
(c⁄° *
t›ic
, 
mosquôto_msg_°‹e
 *
°‹ed
, **
•lô_t›ics
);

797 
	`a˛__föd_a˛s
(
mosquôto
 *
c⁄ãxt
);

798 
	`mosquôto_£curôy_moduÀ_öô
();

799 
	`mosquôto_£curôy_moduÀ_˛ónup
();

801 
	`mosquôto_£curôy_öô
(
boﬁ
 
ªlﬂd
);

802 
	`mosquôto_£curôy_≠∂y
();

803 
	`mosquôto_£curôy_˛ónup
(
boﬁ
 
ªlﬂd
);

804 
	`mosquôto_a˛_check
(
mosquôto
 *
c⁄ãxt
, c⁄° *
t›ic
, 
uöt32_t
 
∑ylﬂdÀn
, * 
∑ylﬂd
, 
uöt8_t
 
qos
, 
boﬁ
 
ªèö
, 
ac˚ss
);

805 
	`mosquôto_u≈wd_check
(
mosquôto
 *
c⁄ãxt
);

806 
	`mosquôto_psk_key_gë
(
mosquôto
 *
c⁄ãxt
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
);

808 
	`mosquôto_£curôy_öô_deÁu…
(
boﬁ
 
ªlﬂd
);

809 
	`mosquôto_£curôy_≠∂y_deÁu…
();

810 
	`mosquôto_£curôy_˛ónup_deÁu…
(
boﬁ
 
ªlﬂd
);

811 
	`mosquôto_psk_key_gë_deÁu…
(
mosquôto
 *
c⁄ãxt
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
);

813 
	`mosquôto_£curôy_auth_°¨t
(
mosquôto
 *
c⁄ãxt
, 
boﬁ
 
ªauth
, c⁄° *
d©a_ö
, 
uöt16_t
 
d©a_ö_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
);

814 
	`mosquôto_£curôy_auth_c⁄töue
(
mosquôto
 *
c⁄ãxt
, c⁄° *
d©a_ö
, 
uöt16_t
 
d©a_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
);

816 
	`u≈wd__‰ì_ôem
(
mosquôto__u≈wd
 **
u≈wd
, mosquôto__u≈wd *
ôem
);

821 
	`£ssi⁄_expúy__add
(
mosquôto
 *
c⁄ãxt
);

822 
	`£ssi⁄_expúy__add_‰om_≥rsi°í˚
(
mosquôto
 *
c⁄ãxt
, 
time_t
 
expúy_time
);

823 
	`£ssi⁄_expúy__ªmove
(
mosquôto
 *
c⁄ãxt
);

824 
	`£ssi⁄_expúy__ªmove_Æl
();

825 
	`£ssi⁄_expúy__check
();

826 
	`£ssi⁄_expúy__£nd_Æl
();

831 
	`h™dÀ_sigöt
(
sig«l
);

832 
	`h™dÀ_sigu§1
(
sig«l
);

833 
	`h™dÀ_sigu§2
(
sig«l
);

834 #ifde‡
SIGHUP


835 
	`h™dÀ_sighup
(
sig«l
);

841 #i‡
	`deföed
(
WIN32
Ë|| deföed(
__CYGWIN__
)

842 
	`£rvi˚_ö°Æl
();

843 
	`£rvi˚_unö°Æl
();

844 
	`£rvi˚_run
();

846 
DWORD
 
WINAPI
 
	`SigThªadProc
(* 
d©a
);

852 #ifde‡
WITH_WEBSOCKETS


853 
	`mosq_websockës_öô
(
mosquôto__li°íî
 *
li°íî
, c⁄° 
mosquôto__c⁄fig
 *
c⁄f
);

855 
	`do_disc⁄√˘
(
mosquôto
 *
c⁄ãxt
, 
ªas⁄
);

860 
	`wûl_dñay__add
(
mosquôto
 *
c⁄ãxt
);

861 
	`wûl_dñay__check
();

862 
	`wûl_dñay__£nd_Æl
();

863 
	`wûl_dñay__ªmove
(
mosquôto
 *
mosq
);

869 #ifde‡
WITH_XTREPORT


870 
	`xåï‹t
();

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/mux.c

20 
	~"mux.h
"

22 
	$mux__öô
(
mosquôto__li°íî_sock
 *
li°ísock
, 
li°ísock_cou¡
)

24 #ifde‡
WITH_EPOLL


25  
	`mux_ïﬁl__öô
(
li°ísock
, 
li°ísock_cou¡
);

27  
	`mux_pﬁl__öô
(
li°ísock
, 
li°ísock_cou¡
);

29 
	}
}

31 
	$mux__add_out
(
mosquôto
 *
c⁄ãxt
)

33 #ifde‡
WITH_EPOLL


34  
	`mux_ïﬁl__add_out
(
c⁄ãxt
);

36  
	`mux_pﬁl__add_out
(
c⁄ãxt
);

38 
	}
}

41 
	$mux__ªmove_out
(
mosquôto
 *
c⁄ãxt
)

43 #ifde‡
WITH_EPOLL


44  
	`mux_ïﬁl__ªmove_out
(
c⁄ãxt
);

46  
	`mux_pﬁl__ªmove_out
(
c⁄ãxt
);

48 
	}
}

51 
	$mux__add_ö
(
mosquôto
 *
c⁄ãxt
)

53 #ifde‡
WITH_EPOLL


54  
	`mux_ïﬁl__add_ö
(
c⁄ãxt
);

56  
	`mux_pﬁl__add_ö
(
c⁄ãxt
);

58 
	}
}

61 
	$mux__dñëe
(
mosquôto
 *
c⁄ãxt
)

63 #ifde‡
WITH_EPOLL


64  
	`mux_ïﬁl__dñëe
(
c⁄ãxt
);

66  
	`mux_pﬁl__dñëe
(
c⁄ãxt
);

68 
	}
}

71 
	$mux__h™dÀ
(
mosquôto__li°íî_sock
 *
li°ísock
, 
li°ísock_cou¡
)

73 #ifde‡
WITH_EPOLL


74 
	`UNUSED
(
li°ísock
);

75 
	`UNUSED
(
li°ísock_cou¡
);

76  
	`mux_ïﬁl__h™dÀ
();

78  
	`mux_pﬁl__h™dÀ
(
li°ísock
, 
li°ísock_cou¡
);

80 
	}
}

83 
	$mux__˛ónup
()

85 #ifde‡
WITH_EPOLL


86  
	`mux_ïﬁl__˛ónup
();

88  
	`mux_pﬁl__˛ónup
();

90 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/mux.h

19 #i‚de‡
MUX_H


20 
	#MUX_H


	)

22 
	~"mosquôto_brokî_öã∫Æ.h
"

24 
mux_ïﬁl__öô
(
mosquôto__li°íî_sock
 *
li°ísock
, 
li°ísock_cou¡
);

25 
mux_ïﬁl__add_out
(
mosquôto
 *
c⁄ãxt
);

26 
mux_ïﬁl__ªmove_out
(
mosquôto
 *
c⁄ãxt
);

27 
mux_ïﬁl__add_ö
(
mosquôto
 *
c⁄ãxt
);

28 
mux_ïﬁl__dñëe
(
mosquôto
 *
c⁄ãxt
);

29 
mux_ïﬁl__h™dÀ
();

30 
mux_ïﬁl__˛ónup
();

32 
mux_pﬁl__öô
(
mosquôto__li°íî_sock
 *
li°ísock
, 
li°ísock_cou¡
);

33 
mux_pﬁl__add_out
(
mosquôto
 *
c⁄ãxt
);

34 
mux_pﬁl__ªmove_out
(
mosquôto
 *
c⁄ãxt
);

35 
mux_pﬁl__add_ö
(
mosquôto
 *
c⁄ãxt
);

36 
mux_pﬁl__dñëe
(
mosquôto
 *
c⁄ãxt
);

37 
mux_pﬁl__h™dÀ
(
mosquôto__li°íî_sock
 *
li°ísock
, 
li°ísock_cou¡
);

38 
mux_pﬁl__˛ónup
();

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/mux_epoll.c

20 
	~"c⁄fig.h
"

22 #ifde‡
WITH_EPOLL


24 #i‚de‡
WIN32


25 
	#_GNU_SOURCE


	)

28 
	~<as£π.h
>

29 #i‚de‡
WIN32


30 #ifde‡
WITH_EPOLL


31 
	~<sys/ïﬁl.h
>

32 
	#MAX_EVENTS
 1000

	)

34 
	~<pﬁl.h
>

35 
	~<uni°d.h
>

37 
	~<¥o˚ss.h
>

38 
	~<wösock2.h
>

39 
	~<ws2t˝ù.h
>

42 
	~<î∫o.h
>

43 
	~<sig«l.h
>

44 
	~<°dio.h
>

45 
	~<°rög.h
>

46 #i‚de‡
WIN32


47 
	~<sys/sockë.h
>

49 
	~<time.h
>

51 #ifde‡
WITH_WEBSOCKETS


52 
	~<libwebsockës.h
>

55 
	~"mosquôto_brokî_öã∫Æ.h
"

56 
	~"mem‹y_mosq.h
"

57 
	~"mux.h
"

58 
	~"∑ckë_mosq.h
"

59 
	~"£nd_mosq.h
"

60 
	~"sys_åì.h
"

61 
	~"time_mosq.h
"

62 
	~"utû_mosq.h
"

64 #ifde‡
WIN32


68 
lo›_h™dÀ_ªads_wrôes
(
mosquôto
 *
c⁄ãxt
, 
uöt32_t
 
evíts
);

70 
sig£t_t
 
	gmy_sigblock
;

71 
ïﬁl_evít
 
	gï_evíts
[
MAX_EVENTS
];

73 
	$mux_ïﬁl__öô
(
mosquôto__li°íî_sock
 *
li°ísock
, 
li°ísock_cou¡
)

75 
ïﬁl_evít
 
ev
;

76 
i
;

78 #i‚de‡
WIN32


79 
	`sigem±y£t
(&
my_sigblock
);

80 
	`sigadd£t
(&
my_sigblock
, 
SIGINT
);

81 
	`sigadd£t
(&
my_sigblock
, 
SIGTERM
);

82 
	`sigadd£t
(&
my_sigblock
, 
SIGUSR1
);

83 
	`sigadd£t
(&
my_sigblock
, 
SIGUSR2
);

84 
	`sigadd£t
(&
my_sigblock
, 
SIGHUP
);

87 
	`mem£t
(&
ï_evíts
, 0, (
ïﬁl_evít
)*
MAX_EVENTS
);

89 
db
.
ïﬁlfd
 = 0;

90 i‡((
db
.
ïﬁlfd
 = 
	`ïﬁl_¸óã
(
MAX_EVENTS
)) == -1) {

91 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ i¿ïﬁ»¸ótög: %s", 
	`°ªº‹
(
î∫o
));

92  
MOSQ_ERR_UNKNOWN
;

94 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

95 
i
=0; i<
li°ísock_cou¡
; i++){

96 
ev
.
d©a
.
±r
 = &
li°ísock
[
i
];

97 
ev
.
evíts
 = 
EPOLLIN
;

98 i‡(
	`ïﬁl_˘l
(
db
.
ïﬁlfd
, 
EPOLL_CTL_ADD
, 
li°ísock
[
i
].
sock
, &
ev
) == -1) {

99 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ i¿ïﬁ»öôü»ªgi°îög: %s", 
	`°ªº‹
(
î∫o
));

100 ()
	`˛o£
(
db
.
ïﬁlfd
);

101 
db
.
ïﬁlfd
 = 0;

102  
MOSQ_ERR_UNKNOWN
;

106  
MOSQ_ERR_SUCCESS
;

107 
	}
}

109 
	$mux_ïﬁl__add_out
(
mosquôto
 *
c⁄ãxt
)

111 
ïﬁl_evít
 
ev
;

113 if(!(
c⁄ãxt
->
evíts
 & 
EPOLLOUT
)) {

114 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

115 
ev
.
d©a
.
±r
 = 
c⁄ãxt
;

116 
ev
.
evíts
 = 
EPOLLIN
 | 
EPOLLOUT
;

117 if(
	`ïﬁl_˘l
(
db
.
ïﬁlfd
, 
EPOLL_CTL_ADD
, 
c⁄ãxt
->
sock
, &
ev
) == -1) {

118 if((
î∫o
 !
EEXIST
)||(
	`ïﬁl_˘l
(
db
.
ïﬁlfd
, 
EPOLL_CTL_MOD
, 
c⁄ãxt
->
sock
, &
ev
) == -1)) {

119 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Eº‹ i¿ïﬁ»ª-ªgi°îögÅÿEPOLLOUT: %s", 
	`°ªº‹
(
î∫o
));

122 
c⁄ãxt
->
evíts
 = 
EPOLLIN
 | 
EPOLLOUT
;

124  
MOSQ_ERR_SUCCESS
;

125 
	}
}

128 
	$mux_ïﬁl__ªmove_out
(
mosquôto
 *
c⁄ãxt
)

130 
ïﬁl_evít
 
ev
;

132 if(
c⁄ãxt
->
evíts
 & 
EPOLLOUT
) {

133 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

134 
ev
.
d©a
.
±r
 = 
c⁄ãxt
;

135 
ev
.
evíts
 = 
EPOLLIN
;

136 if(
	`ïﬁl_˘l
(
db
.
ïﬁlfd
, 
EPOLL_CTL_ADD
, 
c⁄ãxt
->
sock
, &
ev
) == -1) {

137 if((
î∫o
 !
EEXIST
)||(
	`ïﬁl_˘l
(
db
.
ïﬁlfd
, 
EPOLL_CTL_MOD
, 
c⁄ãxt
->
sock
, &
ev
) == -1)) {

138 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Eº‹ i¿ïﬁ»ª-ªgi°îögÅÿEPOLLIN: %s", 
	`°ªº‹
(
î∫o
));

141 
c⁄ãxt
->
evíts
 = 
EPOLLIN
;

143  
MOSQ_ERR_SUCCESS
;

144 
	}
}

147 
	$mux_ïﬁl__add_ö
(
mosquôto
 *
c⁄ãxt
)

149 
ïﬁl_evít
 
ev
;

151 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

152 
ev
.
evíts
 = 
EPOLLIN
;

153 
ev
.
d©a
.
±r
 = 
c⁄ãxt
;

154 i‡(
	`ïﬁl_˘l
(
db
.
ïﬁlfd
, 
EPOLL_CTL_ADD
, 
c⁄ãxt
->
sock
, &
ev
) == -1) {

155 if(
î∫o
 !
EEXIST
){

156 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ i¿ïﬁ»ac˚±ög: %s", 
	`°ªº‹
(
î∫o
));

159 
c⁄ãxt
->
evíts
 = 
EPOLLIN
;

160  
MOSQ_ERR_SUCCESS
;

161 
	}
}

164 
	$mux_ïﬁl__dñëe
(
mosquôto
 *
c⁄ãxt
)

166 
ïﬁl_evít
 
ev
;

168 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

169 if(
c⁄ãxt
->
sock
 !
INVALID_SOCKET
){

170 if(
	`ïﬁl_˘l
(
db
.
ïﬁlfd
, 
EPOLL_CTL_DEL
, 
c⁄ãxt
->
sock
, &
ev
) == -1){

175 
	}
}

178 
	$mux_ïﬁl__h™dÀ
()

180 
i
;

181 
ïﬁl_evít
 
ev
;

182 
sig£t_t
 
‹igsig
;

183 
mosquôto
 *
c⁄ãxt
;

184 
mosquôto__li°íî_sock
 *
li°ísock
;

185 
evít_cou¡
;

187 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

188 
	`sig¥ocmask
(
SIG_SETMASK
, &
my_sigblock
, &
‹igsig
);

189 
evít_cou¡
 = 
	`ïﬁl_waô
(
db
.
ïﬁlfd
, 
ï_evíts
, 
MAX_EVENTS
, 100);

190 
	`sig¥ocmask
(
SIG_SETMASK
, &
‹igsig
, 
NULL
);

192 
db
.
now_s
 = 
	`mosquôto_time
();

193 
db
.
now_ªÆ_s
 = 
	`time
(
NULL
);

195 
evít_cou¡
){

197 if(
î∫o
 !
EINTR
){

198 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ i¿ïﬁ»waôög: %s.", 
	`°ªº‹
(
î∫o
));

204 
i
=0; i<
evít_cou¡
; i++){

205 
c⁄ãxt
 = 
ï_evíts
[
i
].
d©a
.
±r
;

206 if(
c⁄ãxt
->
idít
 =
id_˛õ¡
){

207 
	`lo›_h™dÀ_ªads_wrôes
(
c⁄ãxt
, 
ï_evíts
[
i
].
evíts
);

208 }if(
c⁄ãxt
->
idít
 =
id_li°íî
){

209 
li°ísock
 = 
ï_evíts
[
i
].
d©a
.
±r
;

211 i‡(
ï_evíts
[
i
].
evíts
 & (
EPOLLIN
 | 
EPOLLPRI
)){

212 (
c⁄ãxt
 = 
	`√t__sockë_ac˚±
(
li°ísock
)Ë!
NULL
){

213 
c⁄ãxt
->
evíts
 = 
EPOLLIN
;

214 
	`mux__add_ö
(
c⁄ãxt
);

217 #ifde‡
WITH_WEBSOCKETS


218 }if(
c⁄ãxt
->
idít
 =
id_li°íî_ws
){

225  
MOSQ_ERR_SUCCESS
;

226 
	}
}

229 
	$mux_ïﬁl__˛ónup
()

231 ()
	`˛o£
(
db
.
ïﬁlfd
);

232 
db
.
ïﬁlfd
 = 0;

233  
MOSQ_ERR_SUCCESS
;

234 
	}
}

237 
	$lo›_h™dÀ_ªads_wrôes
(
mosquôto
 *
c⁄ãxt
, 
uöt32_t
 
evíts
)

239 
îr
;

240 
sockÀn_t
 
Àn
;

241 
rc
;

243 if(
c⁄ãxt
->
sock
 =
INVALID_SOCKET
){

247 #ifde‡
WITH_WEBSOCKETS


248 if(
c⁄ãxt
->
wsi
){

249 
lws_pﬁlfd
 
w•ﬁl
;

250 
w•ﬁl
.
fd
 = 
c⁄ãxt
->
sock
;

251 
w•ﬁl
.
evíts
 = (
öt16_t
)
c⁄ãxt
->events;

252 
w•ﬁl
.
ªvíts
 = (
öt16_t
)
evíts
;

253 
	`lws_£rvi˚_fd
(
	`lws_gë_c⁄ãxt
(
c⁄ãxt
->
wsi
), &
w•ﬁl
);

258 if(
evíts
 & 
EPOLLOUT


259 #ifde‡
WITH_TLS


260 || 
c⁄ãxt
->
w™t_wrôe


261 || (
c⁄ãxt
->
s¶
 && c⁄ãxt->
°©e
 =
mosq_cs_√w
)

265 if(
c⁄ãxt
->
°©e
 =
mosq_cs_c⁄√˘_≥ndög
){

266 
Àn
 = ();

267 if(!
	`gësock›t
(
c⁄ãxt
->
sock
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
îr
, &
Àn
)){

268 if(
îr
 == 0){

269 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_√w
);

270 #i‡
	`deföed
(
WITH_ADNS
Ë&& deföed(
WITH_BRIDGE
)

271 if(
c⁄ãxt
->
bridge
){

272 
	`bridge__c⁄√˘_°ï3
(
c⁄ãxt
);

277 
	`do_disc⁄√˘
(
c⁄ãxt
, 
MOSQ_ERR_CONN_LOST
);

281 
rc
 = 
	`∑ckë__wrôe
(
c⁄ãxt
);

282 if(
rc
){

283 
	`do_disc⁄√˘
(
c⁄ãxt
, 
rc
);

288 if(
evíts
 & 
EPOLLIN


289 #ifde‡
WITH_TLS


290 || (
c⁄ãxt
->
s¶
 && c⁄ãxt->
°©e
 =
mosq_cs_√w
)

295 
rc
 = 
	`∑ckë__ªad
(
c⁄ãxt
);

296 if(
rc
){

297 
	`do_disc⁄√˘
(
c⁄ãxt
, 
rc
);

300 }
	`SSL_DATA_PENDING
(
c⁄ãxt
));

302 if(
evíts
 & (
EPOLLERR
 | 
EPOLLHUP
)){

303 
	`do_disc⁄√˘
(
c⁄ãxt
, 
MOSQ_ERR_CONN_LOST
);

307 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/mux_poll.c

19 
	~"c⁄fig.h
"

21 #i‚de‡
WITH_EPOLL


23 #i‚de‡
WIN32


24 
	#_GNU_SOURCE


	)

27 
	~<as£π.h
>

28 #i‚de‡
WIN32


29 
	~<pﬁl.h
>

30 
	~<uni°d.h
>

32 
	~<¥o˚ss.h
>

33 
	~<wösock2.h
>

34 
	~<ws2t˝ù.h
>

37 
	~<î∫o.h
>

38 
	~<sig«l.h
>

39 
	~<°dio.h
>

40 
	~<°rög.h
>

41 #i‚de‡
WIN32


42 
	~<sys/sockë.h
>

44 
	~<time.h
>

46 #ifde‡
WITH_WEBSOCKETS


47 
	~<libwebsockës.h
>

50 
	~"mosquôto_brokî_öã∫Æ.h
"

51 
	~"mem‹y_mosq.h
"

52 
	~"∑ckë_mosq.h
"

53 
	~"£nd_mosq.h
"

54 
	~"sys_åì.h
"

55 
	~"time_mosq.h
"

56 
	~"utû_mosq.h
"

57 
	~"mux.h
"

59 
lo›_h™dÀ_ªads_wrôes
();

61 
pﬁlfd
 *
	gpﬁlfds
 = 
NULL
;

62 
size_t
 
	gpﬁlfd_max
, 
	gpﬁlfd_cuºít_max
;

63 #i‚de‡
WIN32


64 
sig£t_t
 
	gmy_sigblock
;

67 
	$mux_pﬁl__öô
(
mosquôto__li°íî_sock
 *
li°ísock
, 
li°ísock_cou¡
)

69 
size_t
 
i
;

70 
size_t
 
pﬁlfd_ödex
 = 0;

72 #i‚de‡
WIN32


73 
	`sigem±y£t
(&
my_sigblock
);

74 
	`sigadd£t
(&
my_sigblock
, 
SIGINT
);

75 
	`sigadd£t
(&
my_sigblock
, 
SIGTERM
);

76 
	`sigadd£t
(&
my_sigblock
, 
SIGUSR1
);

77 
	`sigadd£t
(&
my_sigblock
, 
SIGUSR2
);

78 
	`sigadd£t
(&
my_sigblock
, 
SIGHUP
);

81 #ifde‡
WIN32


82 
pﬁlfd_max
 = (
size_t
)
	`_gëmax°dio
();

84 
pﬁlfd_max
 = (
size_t
)
	`sysc⁄f
(
_SC_OPEN_MAX
);

87 
pﬁlfds
 = 
	`mosquôto__ˇŒoc
(
pﬁlfd_max
, (
pﬁlfd
));

88 if(!
pﬁlfds
){

89 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

90  
MOSQ_ERR_NOMEM
;

92 
	`mem£t
(
pﬁlfds
, 0, (
pﬁlfd
)*
pﬁlfd_max
);

93 
i
=0; i<
pﬁlfd_max
; i++) {

94 
pﬁlfds
[
i
].
fd
 = 
INVALID_SOCKET
;

97 
i
=0; i<(
size_t
 )
li°ísock_cou¡
; i++){

98 
pﬁlfds
[
pﬁlfd_ödex
].
fd
 = 
li°ísock
[
i
].
sock
;

99 
pﬁlfds
[
pﬁlfd_ödex
].
evíts
 = 
POLLIN
;

100 
pﬁlfds
[
pﬁlfd_ödex
].
ªvíts
 = 0;

101 
pﬁlfd_ödex
++;

104 
pﬁlfd_cuºít_max
 = 
pﬁlfd_ödex
-1;

105  
MOSQ_ERR_SUCCESS
;

106 
	}
}

109 
	$mux_pﬁl__add
(
mosquôto
* 
c⁄ãxt
, 
uöt16_t
 
evt
)

111 
size_t
 
i
;

113 if(
c⁄ãxt
->
evíts
 =
evt
){

114  
MOSQ_ERR_SUCCESS
;

117 if(
c⁄ãxt
->
pﬁlfd_ödex
 != -1){

118 
pﬁlfds
[
c⁄ãxt
->
pﬁlfd_ödex
].
fd
 = c⁄ãxt->
sock
;

119 
pﬁlfds
[
c⁄ãxt
->
pﬁlfd_ödex
].
evíts
 = ()
evt
;

120 
pﬁlfds
[
c⁄ãxt
->
pﬁlfd_ödex
].
ªvíts
 = 0;

122 
i
=0; i<
pﬁlfd_max
; i++) {

123 if(
pﬁlfds
[
i
].
fd
 =
INVALID_SOCKET
){

124 
pﬁlfds
[
i
].
fd
 = 
c⁄ãxt
->
sock
;

125 
pﬁlfds
[
i
].
evíts
 = 
POLLIN
;

126 
pﬁlfds
[
i
].
ªvíts
 = 0;

127 
c⁄ãxt
->
pﬁlfd_ödex
 = ()
i
;

128 if(
i
 > 
pﬁlfd_cuºít_max
){

129 
pﬁlfd_cuºít_max
 = 
i
;

135 
c⁄ãxt
->
evíts
 = 
evt
;

137  
MOSQ_ERR_SUCCESS
;

138 
	}
}

141 
	$mux_pﬁl__add_out
(
mosquôto
 *
c⁄ãxt
)

143  
	`mux_pﬁl__add
(
c⁄ãxt
, 
POLLIN
 | 
POLLOUT
);

144 
	}
}

147 
	$mux_pﬁl__ªmove_out
(
mosquôto
 *
c⁄ãxt
)

149 if(
c⁄ãxt
->
evíts
 & 
POLLOUT
) {

150  
	`mux_pﬁl__add_ö
(
c⁄ãxt
);

152  
MOSQ_ERR_SUCCESS
;

154 
	}
}

157 
	$mux_pﬁl__add_ö
(
mosquôto
 *
c⁄ãxt
)

159  
	`mux_pﬁl__add
(
c⁄ãxt
, 
POLLIN
);

160 
	}
}

162 
	$mux_pﬁl__dñëe
(
mosquôto
 *
c⁄ãxt
)

164 
size_t
 
pﬁlfd_ödex
;

166 if(
c⁄ãxt
->
pﬁlfd_ödex
 != -1){

167 
pﬁlfds
[
c⁄ãxt
->
pﬁlfd_ödex
].
fd
 = 
INVALID_SOCKET
;

168 
pﬁlfds
[
c⁄ãxt
->
pﬁlfd_ödex
].
evíts
 = 0;

169 
pﬁlfds
[
c⁄ãxt
->
pﬁlfd_ödex
].
ªvíts
 = 0;

170 
pﬁlfd_ödex
 = (
size_t
 )
c⁄ãxt
->pollfd_index;

171 
c⁄ãxt
->
pﬁlfd_ödex
 = -1;

175 
pﬁlfd_ödex
 =
pﬁlfd_cuºít_max


176 && 
pﬁlfd_ödex
 > 0

177 && 
pﬁlfds
[
pﬁlfd_ödex
].
fd
 =
INVALID_SOCKET
){

179 
pﬁlfd_ödex
--;

180 
pﬁlfd_cuºít_max
--;

184  
MOSQ_ERR_SUCCESS
;

185 
	}
}

190 
	$mux_pﬁl__h™dÀ
(
mosquôto__li°íî_sock
 *
li°ísock
, 
li°ísock_cou¡
)

192 
mosquôto
 *
c⁄ãxt
;

193 
i
;

194 
fdcou¡
;

195 #i‚de‡
WIN32


196 
sig£t_t
 
‹igsig
;

199 #i‚de‡
WIN32


200 
	`sig¥ocmask
(
SIG_SETMASK
, &
my_sigblock
, &
‹igsig
);

201 
fdcou¡
 = 
	`pﬁl
(
pﬁlfds
, 
pﬁlfd_cuºít_max
+1, 100);

202 
	`sig¥ocmask
(
SIG_SETMASK
, &
‹igsig
, 
NULL
);

204 
fdcou¡
 = 
	`WSAPﬁl
(
pﬁlfds
, 
pﬁlfd_cuºít_max
+1, 100);

207 
db
.
now_s
 = 
	`mosquôto_time
();

208 
db
.
now_ªÆ_s
 = 
	`time
(
NULL
);

210 if(
fdcou¡
 == -1){

211 #ifde‡
WIN32


212 if(
	`WSAGëLa°Eº‹
(Ë=
WSAEINVAL
){

217 
	`SÀï
(10);

221 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ i¿pﬁl: %s.", 
	`°ªº‹
(
î∫o
));

224 
	`lo›_h™dÀ_ªads_wrôes
();

226 
i
=0; i<
li°ísock_cou¡
; i++){

227 if(
pﬁlfds
[
i
].
ªvíts
 & 
POLLIN
){

228 #ifde‡
WITH_WEBSOCKETS


229 if(
li°ísock
[
i
].
li°íî
->
ws_c⁄ãxt
){

235 (
c⁄ãxt
 = 
	`√t__sockë_ac˚±
(&
li°ísock
[
i
])Ë!
NULL
){

236 
c⁄ãxt
->
pﬁlfd_ödex
 = -1;

237 
	`mux__add_ö
(
c⁄ãxt
);

243  
MOSQ_ERR_SUCCESS
;

244 
	}
}

247 
	$mux_pﬁl__˛ónup
()

249 
	`mosquôto__‰ì
(
pﬁlfds
);

250 
pﬁlfds
 = 
NULL
;

252  
MOSQ_ERR_SUCCESS
;

253 
	}
}

256 
	$lo›_h™dÀ_ªads_wrôes
()

258 
mosquôto
 *
c⁄ãxt
, *
˘xt_tmp
;

259 
îr
;

260 
sockÀn_t
 
Àn
;

261 
rc
;

263 
	`HASH_ITER
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, 
c⁄ãxt
, 
˘xt_tmp
){

264 if(
c⁄ãxt
->
pﬁlfd_ödex
 < 0){

268 if(
pﬁlfds
[
c⁄ãxt
->
pﬁlfd_ödex
].
fd
 =
INVALID_SOCKET
){

272 
	`as£π
(
pﬁlfds
[
c⁄ãxt
->
pﬁlfd_ödex
].
fd
 =c⁄ãxt->
sock
);

274 #ifde‡
WITH_WEBSOCKETS


275 if(
c⁄ãxt
->
wsi
){

276 
lws_pﬁlfd
 
w•ﬁl
;

277 
w•ﬁl
.
fd
 = 
pﬁlfds
[
c⁄ãxt
->
pﬁlfd_ödex
].fd;

278 
w•ﬁl
.
evíts
 = 
pﬁlfds
[
c⁄ãxt
->
pﬁlfd_ödex
].events;

279 
w•ﬁl
.
ªvíts
 = 
pﬁlfds
[
c⁄ãxt
->
pﬁlfd_ödex
].revents;

280 
	`lws_£rvi˚_fd
(
	`lws_gë_c⁄ãxt
(
c⁄ãxt
->
wsi
), &
w•ﬁl
);

285 #ifde‡
WITH_TLS


286 if(
pﬁlfds
[
c⁄ãxt
->
pﬁlfd_ödex
].
ªvíts
 & 
POLLOUT
 ||

287 
c⁄ãxt
->
w™t_wrôe
 ||

288 (
c⁄ãxt
->
s¶
 && c⁄ãxt->
°©e
 =
mosq_cs_√w
)){

290 if(
pﬁlfds
[
c⁄ãxt
->
pﬁlfd_ödex
].
ªvíts
 & 
POLLOUT
){

292 if(
c⁄ãxt
->
°©e
 =
mosq_cs_c⁄√˘_≥ndög
){

293 
Àn
 = ();

294 if(!
	`gësock›t
(
c⁄ãxt
->
sock
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
îr
, &
Àn
)){

295 if(
îr
 == 0){

296 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_√w
);

297 #i‡
	`deföed
(
WITH_ADNS
Ë&& deföed(
WITH_BRIDGE
)

298 if(
c⁄ãxt
->
bridge
){

299 
	`bridge__c⁄√˘_°ï3
(
c⁄ãxt
);

305 
	`do_disc⁄√˘
(
c⁄ãxt
, 
MOSQ_ERR_CONN_LOST
);

309 
rc
 = 
	`∑ckë__wrôe
(
c⁄ãxt
);

310 if(
rc
){

311 
	`do_disc⁄√˘
(
c⁄ãxt
, 
rc
);

317 
	`HASH_ITER
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, 
c⁄ãxt
, 
˘xt_tmp
){

318 if(
c⁄ãxt
->
pﬁlfd_ödex
 < 0){

321 #ifde‡
WITH_WEBSOCKETS


322 if(
c⁄ãxt
->
wsi
){

328 #ifde‡
WITH_TLS


329 if(
pﬁlfds
[
c⁄ãxt
->
pﬁlfd_ödex
].
ªvíts
 & 
POLLIN
 ||

330 (
c⁄ãxt
->
s¶
 && c⁄ãxt->
°©e
 =
mosq_cs_√w
)){

332 if(
pﬁlfds
[
c⁄ãxt
->
pﬁlfd_ödex
].
ªvíts
 & 
POLLIN
){

335 
rc
 = 
	`∑ckë__ªad
(
c⁄ãxt
);

336 if(
rc
){

337 
	`do_disc⁄√˘
(
c⁄ãxt
, 
rc
);

340 }
	`SSL_DATA_PENDING
(
c⁄ãxt
));

342 if(
c⁄ãxt
->
pﬁlfd_ödex
 >0 && 
pﬁlfds
[c⁄ãxt->pﬁlfd_ödex].
ªvíts
 & (
POLLERR
 | 
POLLNVAL
 | 
POLLHUP
)){

343 
	`do_disc⁄√˘
(
c⁄ãxt
, 
MOSQ_ERR_CONN_LOST
);

348 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/net.c

19 
	~"c⁄fig.h
"

21 #i‚de‡
WIN32


22 
	~<¨∑/öë.h
>

23 
	~<iÁddrs.h
>

24 
	~<√tdb.h
>

25 
	~<√töë/t˝.h
>

26 
	~<°rögs.h
>

27 
	~<sys/sockë.h
>

28 
	~<uni°d.h
>

30 
	~<wösock2.h
>

31 
	~<ws2t˝ù.h
>

34 
	~<as£π.h
>

35 
	~<î∫o.h
>

36 
	~<f˙é.h
>

37 
	~<°dio.h
>

38 
	~<°rög.h
>

39 #ifde‡
WITH_WRAP


40 
	~<t˝d.h
>

43 #ifde‡
HAVE_NETINET_IN_H


44 
	~<√töë/ö.h
>

47 #ifde‡
WITH_UNIX_SOCKETS


48 
	~"sys/°©.h
"

49 
	~"sys/un.h
"

52 #ifde‡
__QNX__


53 
	~<√t/√tbyã.h
>

56 
	~"mosquôto_brokî_öã∫Æ.h
"

57 
	~"mqâ_¥Ÿocﬁ.h
"

58 
	~"mem‹y_mosq.h
"

59 
	~"√t_mosq.h
"

60 
	~"utû_mosq.h
"

62 #ifde‡
WITH_TLS


63 
	~"és_mosq.h
"

64 
	~<›ís¶/îr.h
>

65 
	gés_ex_ödex_c⁄ãxt
 = -1;

66 
	gés_ex_ödex_li°íî
 = -1;

69 
	~"sys_åì.h
"

72 
mosq_sock_t
 
	g•¨e_sock
 = 
INVALID_SOCKET
;

74 
	$√t__brokî_öô
()

76 
•¨e_sock
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

77 
	`√t__öô
();

78 #ifde‡
WITH_TLS


79 
	`√t__öô_és
();

81 
	}
}

84 
	$√t__brokî_˛ónup
()

86 if(
•¨e_sock
 !
INVALID_SOCKET
){

87 
	`COMPAT_CLOSE
(
•¨e_sock
);

88 
•¨e_sock
 = 
INVALID_SOCKET
;

90 
	`√t__˛ónup
();

91 
	}
}

94 
	$√t__¥öt_îr‹
(
log
, c⁄° *
f‹m©_°r
)

96 *
buf
;

98 #ifde‡
WIN32


99 
	`F‹m©Mesßge
(
FORMAT_MESSAGE_ALLOCATE_BUFFER
 | 
FORMAT_MESSAGE_FROM_SYSTEM
,

100 
NULL
, 
	`WSAGëLa°Eº‹
(), 
LANG_NEUTRAL
, (
LPTSTR
)&
buf
, 0, NULL);

102 
	`log__¥ötf
(
NULL
, 
log
, 
f‹m©_°r
, 
buf
);

103 
	`LoˇlFªe
(
buf
);

105 
buf
 = 
	`°ªº‹
(
î∫o
);

106 
	`log__¥ötf
(
NULL
, 
log
, 
f‹m©_°r
, 
buf
);

108 
	}
}

111 
mosquôto
 *
	$√t__sockë_ac˚±
(
mosquôto__li°íî_sock
 *
li°ísock
)

113 
mosq_sock_t
 
√w_sock
 = 
INVALID_SOCKET
;

114 
mosquôto
 *
√w_c⁄ãxt
;

115 #ifde‡
WITH_TLS


116 
BIO
 *
bio
;

117 
rc
;

118 
ebuf
[256];

119 
e
;

121 #ifde‡
WITH_WRAP


122 
ªque°_öfo
 
wøp_ªq
;

123 
addªss
[1024];

126 
√w_sock
 = 
	`ac˚±
(
li°ísock
->
sock
, 
NULL
, 0);

127 if(
√w_sock
 =
INVALID_SOCKET
){

128 #ifde‡
WIN32


129 
î∫o
 = 
	`WSAGëLa°Eº‹
();

130 if(
î∫o
 =
WSAEMFILE
){

132 if(
î∫o
 =
EMFILE
 ||Éºnÿ=
ENFILE
){

141 
	`COMPAT_CLOSE
(
•¨e_sock
);

142 
√w_sock
 = 
	`ac˚±
(
li°ísock
->
sock
, 
NULL
, 0);

143 if(
√w_sock
 !
INVALID_SOCKET
){

144 
	`COMPAT_CLOSE
(
√w_sock
);

146 
•¨e_sock
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

147 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
,

150  
NULL
;

153 
	`G_SOCKET_CONNECTIONS_INC
();

155 if(
	`√t__sockë_n⁄block
(&
√w_sock
)){

156  
NULL
;

159 #ifde‡
WITH_WRAP


161 
	`ªque°_öô
(&
wøp_ªq
, 
RQ_FILE
, 
√w_sock
, 
RQ_DAEMON
, "mosquitto", 0);

162 
	`‰omho°
(&
wøp_ªq
);

163 if(!
	`ho°s_ac˚ss
(&
wøp_ªq
)){

165 if(
db
.
c⁄fig
->
c⁄√˘i⁄_mesßges
 =
åue
){

166 if(!
	`√t__sockë_gë_addªss
(
√w_sock
, 
addªss
, 1024, 
NULL
)){

167 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Clõ¡ c⁄√˘i⁄ from %†díõdác˚s†byÅ˝d.", 
addªss
);

170 
	`COMPAT_CLOSE
(
√w_sock
);

171  
NULL
;

175 if(
db
.
c⁄fig
->
£t_t˝_nodñay
){

176 
Êag
 = 1;

177 #ifde‡
WIN32


178 i‡(
	`£tsock›t
(
√w_sock
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (*)&
Êag
, ()) != 0) {

180 if(
	`£tsock›t
(
√w_sock
, 
IPPROTO_TCP
, 
TCP_NODELAY
, &
Êag
, ()) != 0){

182 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: UnableÅo set TCP_NODELAY.");

186 
√w_c⁄ãxt
 = 
	`c⁄ãxt__öô
(
√w_sock
);

187 if(!
√w_c⁄ãxt
){

188 
	`COMPAT_CLOSE
(
√w_sock
);

189  
NULL
;

191 
√w_c⁄ãxt
->
li°íî
 = 
li°ísock
->listener;

192 if(!
√w_c⁄ãxt
->
li°íî
){

193 
	`c⁄ãxt__˛ónup
(
√w_c⁄ãxt
, 
åue
);

194  
NULL
;

196 
√w_c⁄ãxt
->
li°íî
->
˛õ¡_cou¡
++;

198 if(
√w_c⁄ãxt
->
li°íî
->
max_c⁄√˘i⁄s
 > 0 &&Çew_c⁄ãxt->li°íî->
˛õ¡_cou¡
 >Çew_context->listener->max_connections){

199 if(
db
.
c⁄fig
->
c⁄√˘i⁄_mesßges
 =
åue
){

200 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Clõ¡ c⁄√˘i⁄ from %†díõd: max_c⁄√˘i⁄†ex˚eded.", 
√w_c⁄ãxt
->
addªss
);

202 
	`c⁄ãxt__˛ónup
(
√w_c⁄ãxt
, 
åue
);

203  
NULL
;

206 #ifde‡
WITH_TLS


208 if(
√w_c⁄ãxt
->
li°íî
->
s¶_˘x
){

209 
√w_c⁄ãxt
->
s¶
 = 
	`SSL_√w
“ew_c⁄ãxt->
li°íî
->
s¶_˘x
);

210 if(!
√w_c⁄ãxt
->
s¶
){

211 
	`c⁄ãxt__˛ónup
(
√w_c⁄ãxt
, 
åue
);

212  
NULL
;

214 
	`SSL_£t_ex_d©a
(
√w_c⁄ãxt
->
s¶
, 
és_ex_ödex_c⁄ãxt
,Çew_context);

215 
	`SSL_£t_ex_d©a
(
√w_c⁄ãxt
->
s¶
, 
és_ex_ödex_li°íî
,Çew_c⁄ãxt->
li°íî
);

216 
√w_c⁄ãxt
->
w™t_wrôe
 = 
åue
;

217 
bio
 = 
	`BIO_√w_sockë
(
√w_sock
, 
BIO_NOCLOSE
);

218 
	`SSL_£t_bio
(
√w_c⁄ãxt
->
s¶
, 
bio
, bio);

219 
	`ERR_˛ór_îr‹
();

220 
rc
 = 
	`SSL_ac˚±
(
√w_c⁄ãxt
->
s¶
);

221 if(
rc
 != 1){

222 
rc
 = 
	`SSL_gë_îr‹
(
√w_c⁄ãxt
->
s¶
,Ñc);

223 if(
rc
 =
SSL_ERROR_WANT_READ
){

225 }if(
rc
 =
SSL_ERROR_WANT_WRITE
){

226 
√w_c⁄ãxt
->
w™t_wrôe
 = 
åue
;

228 if(
db
.
c⁄fig
->
c⁄√˘i⁄_mesßges
 =
åue
){

229 
e
 = 
	`ERR_gë_îr‹
();

230 
e
){

231 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
,

233 
√w_c⁄ãxt
->
addªss
, 
	`ERR_îr‹_°rög
(
e
, 
ebuf
));

234 
e
 = 
	`ERR_gë_îr‹
();

237 
	`c⁄ãxt__˛ónup
(
√w_c⁄ãxt
, 
åue
);

238  
NULL
;

244 if(
db
.
c⁄fig
->
c⁄√˘i⁄_mesßges
 =
åue
){

245 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "New connection from %s:%d onÖort %d.",

246 
√w_c⁄ãxt
->
addªss
,Çew_c⁄ãxt->
ªmŸe_p‹t
,Çew_c⁄ãxt->
li°íî
->
p‹t
);

249  
√w_c⁄ãxt
;

250 
	}
}

252 #ifde‡
WITH_TLS


253 
	$˛õ¡_˚πifiˇã_vîify
(
¥evîify_ok
, 
X509_STORE_CTX
 *
˘x
)

255 
	`UNUSED
(
˘x
);

258  
¥evîify_ok
;

259 
	}
}

262 #ifde‡
FINAL_WITH_TLS_PSK


263 
	$psk_£rvî_ˇŒback
(
SSL
 *
s¶
, c⁄° *
idítôy
, *
psk
, 
max_psk_Àn
)

265 
mosquôto
 *
c⁄ãxt
;

266 
mosquôto__li°íî
 *
li°íî
;

267 *
psk_key
 = 
NULL
;

268 
Àn
;

269 c⁄° *
psk_höt
;

271 if(!
idítôy
)  0;

273 
c⁄ãxt
 = 
	`SSL_gë_ex_d©a
(
s¶
, 
és_ex_ödex_c⁄ãxt
);

274 if(!
c⁄ãxt
)  0;

276 
li°íî
 = 
	`SSL_gë_ex_d©a
(
s¶
, 
és_ex_ödex_li°íî
);

277 if(!
li°íî
)  0;

279 
psk_höt
 = 
li°íî
->psk_hint;

283 
psk_key
 = 
	`mosquôto__ˇŒoc
(1, (
size_t
)
max_psk_Àn
*2 + 1);

284 if(!
psk_key
)  0;

286 if(
	`mosquôto_psk_key_gë
(
c⁄ãxt
, 
psk_höt
, 
idítôy
, 
psk_key
, ()
max_psk_Àn
*2Ë!
MOSQ_ERR_SUCCESS
){

287 
	`mosquôto__‰ì
(
psk_key
);

291 
Àn
 = 
	`mosquôto__hex2bö
(
psk_key
, 
psk
, ()
max_psk_Àn
);

292 i‡(
Àn
 < 0){

293 
	`mosquôto__‰ì
(
psk_key
);

297 if(
li°íî
->
u£_idítôy_as_u£∫ame
){

298 
c⁄ãxt
->
u£∫ame
 = 
	`mosquôto__°rdup
(
idítôy
);

299 if(!
c⁄ãxt
->
u£∫ame
){

300 
	`mosquôto__‰ì
(
psk_key
);

305 
	`mosquôto__‰ì
(
psk_key
);

306  ()
Àn
;

307 
	}
}

310 #ifde‡
WITH_TLS


311 
	$√t__és_£rvî_˘x
(
mosquôto__li°íî
 *
li°íî
)

313 
buf
[256];

314 
rc
;

315 
FILE
 *
dh∑ømfûe
;

316 
DH
 *
dh∑øm
 = 
NULL
;

318 if(
li°íî
->
s¶_˘x
){

319 
	`SSL_CTX_‰ì
(
li°íî
->
s¶_˘x
);

322 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

323 
li°íî
->
s¶_˘x
 = 
	`SSL_CTX_√w
(
	`SSLv23_£rvî_mëhod
());

325 
li°íî
->
s¶_˘x
 = 
	`SSL_CTX_√w
(
	`TLS_£rvî_mëhod
());

328 if(!
li°íî
->
s¶_˘x
){

329 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: UnableÅo create TLS context.");

330  
MOSQ_ERR_TLS
;

333 #ifde‡
SSL_OP_NO_TLSv1_3


334 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

335 if(
li°íî
->
£curôy_›ti⁄s
.
psk_fûe
){

336 
	`SSL_CTX_£t_›ti⁄s
(
li°íî
->
s¶_˘x
, 
SSL_OP_NO_TLSv1_3
);

339 if(
db
.
c⁄fig
->
£curôy_›ti⁄s
.
psk_fûe
){

340 
	`SSL_CTX_£t_›ti⁄s
(
li°íî
->
s¶_˘x
, 
SSL_OP_NO_TLSv1_3
);

345 if(
li°íî
->
és_vîsi⁄
 =
NULL
){

346 
	`SSL_CTX_£t_›ti⁄s
(
li°íî
->
s¶_˘x
, 
SSL_OP_NO_SSLv3
 | 
SSL_OP_NO_TLSv1
);

347 #ifde‡
SSL_OP_NO_TLSv1_3


348 }if(!
	`°rcmp
(
li°íî
->
és_vîsi⁄
, "tlsv1.3")){

349 
	`SSL_CTX_£t_›ti⁄s
(
li°íî
->
s¶_˘x
, 
SSL_OP_NO_SSLv3
 | 
SSL_OP_NO_TLSv1
 | 
SSL_OP_NO_TLSv1_1
 | 
SSL_OP_NO_TLSv1_2
);

351 }if(!
	`°rcmp
(
li°íî
->
és_vîsi⁄
, "tlsv1.2")){

352 
	`SSL_CTX_£t_›ti⁄s
(
li°íî
->
s¶_˘x
, 
SSL_OP_NO_SSLv3
 | 
SSL_OP_NO_TLSv1
 | 
SSL_OP_NO_TLSv1_1
);

353 }if(!
	`°rcmp
(
li°íî
->
és_vîsi⁄
, "tlsv1.1")){

354 
	`SSL_CTX_£t_›ti⁄s
(
li°íî
->
s¶_˘x
, 
SSL_OP_NO_SSLv3
 | 
SSL_OP_NO_TLSv1
);

356 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: Unsuµ‹ãdÅls_vîsi⁄ \"%s\".", 
li°íî
->
és_vîsi⁄
);

357  
MOSQ_ERR_TLS
;

363 
	`SSL_CTX_£t_›ti⁄s
(
li°íî
->
s¶_˘x
, 
SSL_OP_SINGLE_DH_USE
);

365 #ifde‡
SSL_OP_NO_COMPRESSION


367 
	`SSL_CTX_£t_›ti⁄s
(
li°íî
->
s¶_˘x
, 
SSL_OP_NO_COMPRESSION
);

369 #ifde‡
SSL_OP_CIPHER_SERVER_PREFERENCE


371 
	`SSL_CTX_£t_›ti⁄s
(
li°íî
->
s¶_˘x
, 
SSL_OP_CIPHER_SERVER_PREFERENCE
);

374 #ifde‡
SSL_MODE_RELEASE_BUFFERS


376 
	`SSL_CTX_£t_mode
(
li°íî
->
s¶_˘x
, 
SSL_MODE_RELEASE_BUFFERS
);

379 #ifde‡
WITH_EC


380 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10002000L && OPENSSL_VERSION_NUMBER < 0x10100000L

381 
	`SSL_CTX_£t_ecdh_auto
(
li°íî
->
s¶_˘x
, 1);

384 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10100000L

385 
	`SSL_CTX_£t_dh_auto
(
li°íî
->
s¶_˘x
, 1);

388 #ifde‡
SSL_OP_NO_RENEGOTIATION


389 
	`SSL_CTX_£t_›ti⁄s
(
li°íî
->
s¶_˘x
, 
SSL_OP_NO_RENEGOTIATION
);

392 
	`¢¥ötf
(
buf
, 256, "mosquôto-%d", 
li°íî
->
p‹t
);

393 
	`SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
li°íî
->
s¶_˘x
, (*)
buf
, ()
	`°æí
(buf));

395 if(
li°íî
->
cùhîs
){

396 
rc
 = 
	`SSL_CTX_£t_cùhî_li°
(
li°íî
->
s¶_˘x
,Üi°íî->
cùhîs
);

397 if(
rc
 == 0){

398 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿ£àTLS cùhîs. Check cùhîÜi° \"%s\".", 
li°íî
->
cùhîs
);

399  
MOSQ_ERR_TLS
;

402 
rc
 = 
	`SSL_CTX_£t_cùhî_li°
(
li°íî
->
s¶_˘x
, "DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:@STRENGTH");

403 if(
rc
 == 0){

404 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿ£àTLS cùhîs. Check cùhîÜi° \"%s\".", 
li°íî
->
cùhîs
);

405  
MOSQ_ERR_TLS
;

408 #i‡
OPENSSL_VERSION_NUMBER
 >0x10101000 && (!
	`deföed
(
LIBRESSL_VERSION_NUMBER
) || LIBRESSL_VERSION_NUMBER > 0x3040000FL)

409 if(
li°íî
->
cùhîs_és13
){

410 
rc
 = 
	`SSL_CTX_£t_cùhîsuôes
(
li°íî
->
s¶_˘x
,Üi°íî->
cùhîs_és13
);

411 if(
rc
 == 0){

412 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿ£àTLS 1.3 cùhîsuôes. Check cùhî_és13Üi° \"%s\".", 
li°íî
->
cùhîs_és13
);

413  
MOSQ_ERR_TLS
;

418 if(
li°íî
->
dh∑ømfûe
){

419 
dh∑ømfûe
 = 
	`f›í
(
li°íî
->dhparamfile, "r");

420 if(!
dh∑ømfûe
){

421 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹Üﬂdög dh∑ømfûê\"%s\".", 
li°íî
->
dh∑ømfûe
);

422  
MOSQ_ERR_TLS
;

424 
dh∑øm
 = 
	`PEM_ªad_DH∑øms
(
dh∑ømfûe
, 
NULL
, NULL, NULL);

425 
	`f˛o£
(
dh∑ømfûe
);

427 if(
dh∑øm
 =
NULL
 || 
	`SSL_CTX_£t_tmp_dh
(
li°íî
->
s¶_˘x
, dhparam) != 1){

428 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹Üﬂdög dh∑ømfûê\"%s\".", 
li°íî
->
dh∑ømfûe
);

429 
	`√t__¥öt_s¶_îr‹
(
NULL
);

430  
MOSQ_ERR_TLS
;

433  
MOSQ_ERR_SUCCESS
;

434 
	}
}

438 #ifde‡
WITH_TLS


439 
	$√t__lﬂd_¸l_fûe
(
mosquôto__li°íî
 *
li°íî
)

441 
X509_STORE
 *
°‹e
;

442 
X509_LOOKUP
 *
lookup
;

443 
rc
;

445 
°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
li°íî
->
s¶_˘x
);

446 if(!
°‹e
){

447 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: UnableÅo obtain TLS store.");

448 
	`√t__¥öt_îr‹
(
MOSQ_LOG_ERR
, "Error: %s");

449  
MOSQ_ERR_TLS
;

451 
lookup
 = 
	`X509_STORE_add_lookup
(
°‹e
, 
	`X509_LOOKUP_fûe
());

452 
rc
 = 
	`X509_lﬂd_¸l_fûe
(
lookup
, 
li°íî
->
¸lfûe
, 
X509_FILETYPE_PEM
);

453 if(
rc
 < 1){

454 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd cîtifiˇãÑevoˇti⁄ fûê\"%s\". Check cæfûe.", 
li°íî
->
¸lfûe
);

455 
	`√t__¥öt_îr‹
(
MOSQ_LOG_ERR
, "Error: %s");

456 
	`√t__¥öt_s¶_îr‹
(
NULL
);

457  
MOSQ_ERR_TLS
;

459 
	`X509_STORE_£t_Êags
(
°‹e
, 
X509_V_FLAG_CRL_CHECK
);

461  
MOSQ_ERR_SUCCESS
;

462 
	}
}

466 
	$√t__lﬂd_˚πifiˇãs
(
mosquôto__li°íî
 *
li°íî
)

468 #ifde‡
WITH_TLS


469 
rc
;

471 if(
li°íî
->
ªquúe_˚πifiˇã
){

472 
	`SSL_CTX_£t_vîify
(
li°íî
->
s¶_˘x
, 
SSL_VERIFY_PEER
 | 
SSL_VERIFY_FAIL_IF_NO_PEER_CERT
, 
˛õ¡_˚πifiˇã_vîify
);

474 
	`SSL_CTX_£t_vîify
(
li°íî
->
s¶_˘x
, 
SSL_VERIFY_NONE
, 
˛õ¡_˚πifiˇã_vîify
);

476 
rc
 = 
	`SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
li°íî
->
s¶_˘x
,Üi°íî->
˚πfûe
);

477 if(
rc
 != 1){

478 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd sîvî cîtifiˇã \"%s\". Check cîtfûe.", 
li°íî
->
˚πfûe
);

479 
	`√t__¥öt_s¶_îr‹
(
NULL
);

480  
MOSQ_ERR_TLS
;

482 if(
li°íî
->
és_ígöe
 =
NULL
){

483 
rc
 = 
	`SSL_CTX_u£_Priv©eKey_fûe
(
li°íî
->
s¶_˘x
,Üi°íî->
keyfûe
, 
SSL_FILETYPE_PEM
);

484 if(
rc
 != 1){

485 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd sîvî key fûê\"%s\". Check keyfûe.", 
li°íî
->
keyfûe
);

486 
	`√t__¥öt_s¶_îr‹
(
NULL
);

487  
MOSQ_ERR_TLS
;

490 
rc
 = 
	`SSL_CTX_check_¥iv©e_key
(
li°íî
->
s¶_˘x
);

491 if(
rc
 != 1){

492 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Server certificate/keyáre inconsistent.");

493 
	`√t__¥öt_s¶_îr‹
(
NULL
);

494  
MOSQ_ERR_TLS
;

497 if(
li°íî
->
¸lfûe
){

498 
rc
 = 
	`√t__lﬂd_¸l_fûe
(
li°íî
);

499 if(
rc
){

500  
rc
;

504 
	`UNUSED
(
li°íî
);

506  
MOSQ_ERR_SUCCESS
;

507 
	}
}

510 #i‡
deföed
(
WITH_TLS
Ë&& !deföed(
OPENSSL_NO_ENGINE
)

511 
	$√t__lﬂd_ígöe
(
mosquôto__li°íî
 *
li°íî
)

513 
ENGINE
 *
ígöe
 = 
NULL
;

514 
UI_METHOD
 *
ui_mëhod
;

515 
EVP_PKEY
 *
pkey
;

517 if(!
li°íî
->
és_ígöe
){

518  
MOSQ_ERR_SUCCESS
;

521 
ígöe
 = 
	`ENGINE_by_id
(
li°íî
->
és_ígöe
);

522 if(!
ígöe
){

523 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹Üﬂdög %†ígöe\n", 
li°íî
->
és_ígöe
);

524 
	`√t__¥öt_s¶_îr‹
(
NULL
);

525  
MOSQ_ERR_TLS
;

527 if(!
	`ENGINE_öô
(
ígöe
)){

528 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "FailedÉngine initialisation\n");

529 
	`√t__¥öt_s¶_îr‹
(
NULL
);

530  
MOSQ_ERR_TLS
;

532 
	`ENGINE_£t_deÁu…
(
ígöe
, 
ENGINE_METHOD_ALL
);

534 if(
li°íî
->
és_keyf‹m
 =
mosq_k_ígöe
){

535 
ui_mëhod
 = 
	`√t__gë_ui_mëhod
();

536 if(
li°íî
->
és_ígöe_k∑ss_sha1
){

537 if(!
	`ENGINE_˘æ_cmd
(
ígöe
, 
ENGINE_SECRET_MODE
, 
ENGINE_SECRET_MODE_SHA
, 
NULL
, NULL, 0)){

538 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: UnableÅo setÉngine secret mode sha");

539 
	`√t__¥öt_s¶_îr‹
(
NULL
);

540  
MOSQ_ERR_TLS
;

542 if(!
	`ENGINE_˘æ_cmd
(
ígöe
, 
ENGINE_PIN
, 0, 
li°íî
->
és_ígöe_k∑ss_sha1
, 
NULL
, 0)){

543 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: UnableÅo setÉngineÖin");

544 
	`√t__¥öt_s¶_îr‹
(
NULL
);

545  
MOSQ_ERR_TLS
;

547 
ui_mëhod
 = 
NULL
;

549 
pkey
 = 
	`ENGINE_lﬂd_¥iv©e_key
(
ígöe
, 
li°íî
->
keyfûe
, 
ui_mëhod
, 
NULL
);

550 if(!
pkey
){

551 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂdÉngöê¥iv©êkey fûê\"%s\".", 
li°íî
->
keyfûe
);

552 
	`√t__¥öt_s¶_îr‹
(
NULL
);

553  
MOSQ_ERR_TLS
;

555 if(
	`SSL_CTX_u£_Priv©eKey
(
li°íî
->
s¶_˘x
, 
pkey
) <= 0){

556 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿu£Éngöê¥iv©êkey fûê\"%s\".", 
li°íî
->
keyfûe
);

557 
	`√t__¥öt_s¶_îr‹
(
NULL
);

558  
MOSQ_ERR_TLS
;

561 
	`ENGINE_‰ì
(
ígöe
);

563  
MOSQ_ERR_SUCCESS
;

564 
	}
}

568 
	$√t__és_lﬂd_vîify
(
mosquôto__li°íî
 *
li°íî
)

570 #ifde‡
WITH_TLS


571 
rc
;

573 #i‡
OPENSSL_VERSION_NUMBER
 < 0x30000000L

574 if(
li°íî
->
ˇfûe
 ||Üi°íî->
ˇ∑th
){

575 
rc
 = 
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
li°íî
->
s¶_˘x
,Üi°íî->
ˇfûe
,Üi°íî->
ˇ∑th
);

576 if(
rc
 == 0){

577 if(
li°íî
->
ˇfûe
 &&Üi°íî->
ˇ∑th
){

578 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd CA cîtifiˇãs. Check cafûê\"%s\"ánd c≠©h \"%s\".", 
li°íî
->
ˇfûe
,Üi°íî->
ˇ∑th
);

579 }if(
li°íî
->
ˇfûe
){

580 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd CA cîtifiˇãs. Check cafûê\"%s\".", 
li°íî
->
ˇfûe
);

582 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd CA cîtifiˇãs. Check c≠©h \"%s\".", 
li°íî
->
ˇ∑th
);

587 if(
li°íî
->
ˇfûe
){

588 
rc
 = 
	`SSL_CTX_lﬂd_vîify_fûe
(
li°íî
->
s¶_˘x
,Üi°íî->
ˇfûe
);

589 if(
rc
 == 0){

590 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd CA cîtifiˇãs. Check cafûê\"%s\".", 
li°íî
->
ˇfûe
);

591 
	`√t__¥öt_s¶_îr‹
(
NULL
);

592  
MOSQ_ERR_TLS
;

595 if(
li°íî
->
ˇ∑th
){

596 
rc
 = 
	`SSL_CTX_lﬂd_vîify_dú
(
li°íî
->
s¶_˘x
,Üi°íî->
ˇ∑th
);

597 if(
rc
 == 0){

598 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿlﬂd CA cîtifiˇãs. Check c≠©h \"%s\".", 
li°íî
->
ˇ∑th
);

599 
	`√t__¥öt_s¶_îr‹
(
NULL
);

600  
MOSQ_ERR_TLS
;

605 #i‡!
	`deföed
(
OPENSSL_NO_ENGINE
)

606 if(
	`√t__lﬂd_ígöe
(
li°íî
)){

607  
MOSQ_ERR_TLS
;

611  
	`√t__lﬂd_˚πifiˇãs
(
li°íî
);

612 
	}
}

615 #i‚de‡
WIN32


616 
	$√t__böd_öãrÁ˚
(
mosquôto__li°íî
 *
li°íî
, 
addröfo
 *
Ω
)

624 
iÁddrs
 *
iÁddr
, *
iÁ
;

625 if(
	`gëiÁddrs
(&
iÁddr
) < 0){

626 
	`√t__¥öt_îr‹
(
MOSQ_LOG_ERR
, "Error: %s");

627  
MOSQ_ERR_ERRNO
;

630 
iÁ
=
iÁddr
; iÁ!=
NULL
; iÁ=iÁ->
iÁ_√xt
){

631 if(
iÁ
->
iÁ_addr
 =
NULL
){

635 if(!
	`°rˇ£cmp
(
li°íî
->
böd_öãrÁ˚
, 
iÁ
->
iÁ_«me
)

636 && 
iÁ
->
iÁ_addr
->
ß_Ámûy
 =
Ω
->
ai_addr
->sa_family){

638 if(
Ω
->
ai_addr
->
ß_Ámûy
 =
AF_INET
){

639 if(
li°íî
->
ho°
 &&

640 
	`memcmp
(&((
sockaddr_ö
 *)
Ω
->
ai_addr
)->
sö_addr
,

641 &((
sockaddr_ö
 *)
iÁ
->
iÁ_addr
)->
sö_addr
,

642 (
ö_addr
))){

644 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Interfaceáddress for %s doesÇot match specifiedÜisteneráddress (%s).",

645 
li°íî
->
böd_öãrÁ˚
,Üi°íî->
ho°
);

646  
MOSQ_ERR_INVAL
;

648 
	`mem˝y
(&((
sockaddr_ö
 *)
Ω
->
ai_addr
)->
sö_addr
,

649 &((
sockaddr_ö
 *)
iÁ
->
iÁ_addr
)->
sö_addr
,

650 (
ö_addr
));

652 
	`‰ìiÁddrs
(
iÁddr
);

653  
MOSQ_ERR_SUCCESS
;

655 }if(
Ω
->
ai_addr
->
ß_Ámûy
 =
AF_INET6
){

656 if(
li°íî
->
ho°
 &&

657 
	`memcmp
(&((
sockaddr_ö6
 *)
Ω
->
ai_addr
)->
sö6_addr
,

658 &((
sockaddr_ö6
 *)
iÁ
->
iÁ_addr
)->
sö6_addr
,

659 (
ö6_addr
))){

661 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Interfaceáddress for %s doesÇot match specifiedÜisteneráddress (%s).",

662 
li°íî
->
böd_öãrÁ˚
,Üi°íî->
ho°
);

663  
MOSQ_ERR_INVAL
;

665 
	`mem˝y
(&((
sockaddr_ö6
 *)
Ω
->
ai_addr
)->
sö6_addr
,

666 &((
sockaddr_ö6
 *)
iÁ
->
iÁ_addr
)->
sö6_addr
,

667 (
ö6_addr
));

668 
	`‰ìiÁddrs
(
iÁddr
);

669  
MOSQ_ERR_SUCCESS
;

674 
	`‰ìiÁddrs
(
iÁddr
);

675 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Interface %s doesÇot support %s configuration.",

676 
li°íî
->
böd_öãrÁ˚
, 
Ω
->
ai_addr
->
ß_Ámûy
 =
AF_INET
 ? "IPv4" : "IPv6");

677  
MOSQ_ERR_NOT_FOUND
;

678 
	}
}

682 
	$√t__sockë_li°í_t˝
(
mosquôto__li°íî
 *
li°íî
)

684 
mosq_sock_t
 
sock
 = 
INVALID_SOCKET
;

685 
addröfo
 
höts
;

686 
addröfo
 *
aöfo
, *
Ω
;

687 
£rvi˚
[10];

688 
rc
;

689 
ss_›t
 = 1;

690 #i‚de‡
WIN32


691 
boﬁ
 
öãrÁ˚_bound
 = 
Ál£
;

694 if(!
li°íî
Ë 
MOSQ_ERR_INVAL
;

696 
	`¢¥ötf
(
£rvi˚
, 10, "%d", 
li°íî
->
p‹t
);

697 
	`mem£t
(&
höts
, 0, (
addröfo
));

698 if(
li°íî
->
sockë_domaö
){

699 
höts
.
ai_Ámûy
 = 
li°íî
->
sockë_domaö
;

701 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

703 
höts
.
ai_Êags
 = 
AI_PASSIVE
;

704 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

706 
rc
 = 
	`gëaddröfo
(
li°íî
->
ho°
, 
£rvi˚
, &
höts
, &
aöfo
);

707 i‡(
rc
){

708 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ cª©ögÜi°íî: %s.", 
	`gai_°ªº‹
(
rc
));

709  
INVALID_SOCKET
;

712 
li°íî
->
sock_cou¡
 = 0;

713 
li°íî
->
socks
 = 
NULL
;

715 
Ω
 = 
aöfo
;Ñp;Ñ∞Ω->
ai_√xt
){

716 if(
Ω
->
ai_Ámûy
 =
AF_INET
){

717 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "O≥nög ipv4Üi°í sockë o¿p‹à%d.", 
	`¡ohs
(((
sockaddr_ö
 *)
Ω
->
ai_addr
)->
sö_p‹t
));

718 }if(
Ω
->
ai_Ámûy
 =
AF_INET6
){

719 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "O≥nög ipv6Üi°í sockë o¿p‹à%d.", 
	`¡ohs
(((
sockaddr_ö6
 *)
Ω
->
ai_addr
)->
sö6_p‹t
));

724 
sock
 = 
	`sockë
(
Ω
->
ai_Ámûy
,Ñp->
ai_sockty≥
,Ñp->
ai_¥Ÿocﬁ
);

725 if(
sock
 =
INVALID_SOCKET
){

726 
	`√t__¥öt_îr‹
(
MOSQ_LOG_WARNING
, "Warning: %s");

729 
li°íî
->
sock_cou¡
++;

730 
li°íî
->
socks
 = 
	`mosquôto__ªÆloc
÷i°íî->socks, (
mosq_sock_t
)*(
size_t
Ói°íî->
sock_cou¡
);

731 if(!
li°íî
->
socks
){

732 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

733 
	`‰ìaddröfo
(
aöfo
);

734 
	`COMPAT_CLOSE
(
sock
);

735  
MOSQ_ERR_NOMEM
;

737 
li°íî
->
socks
[li°íî->
sock_cou¡
-1] = 
sock
;

739 #i‚de‡
WIN32


740 
ss_›t
 = 1;

742 ()
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
ss_›t
, (ss_opt));

744 #ifde‡
IPV6_V6ONLY


745 
ss_›t
 = 1;

746 ()
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_V6ONLY
, &
ss_›t
, (ss_opt));

749 if(
	`√t__sockë_n⁄block
(&
sock
)){

750 
	`‰ìaddröfo
(
aöfo
);

751 
	`mosquôto__‰ì
(
li°íî
->
socks
);

755 #i‚de‡
WIN32


756 if(
li°íî
->
böd_öãrÁ˚
){

759 if(
	`√t__böd_öãrÁ˚
(
li°íî
, 
Ω
)){

760 
	`COMPAT_CLOSE
(
sock
);

761 
li°íî
->
sock_cou¡
--;

764 
öãrÁ˚_bound
 = 
åue
;

768 if(
	`böd
(
sock
, 
Ω
->
ai_addr
,Ñp->
ai_addæí
) == -1){

769 #i‡
	`deföed
(
__löux__
)

770 if(
î∫o
 =
EACCES
){

771 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "If youáreÅryingÅo bindÅoáÖrivilegedÖort (<1024),Åry using setcapánd doÇot startÅhe brokerásÑoot:");

772 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, " sudo setcap 'CAP_NET_BIND_SERVICE=+ep /usr/sbin/mosquitto'");

775 
	`√t__¥öt_îr‹
(
MOSQ_LOG_ERR
, "Error: %s");

776 
	`COMPAT_CLOSE
(
sock
);

777 
	`‰ìaddröfo
(
aöfo
);

778 
	`mosquôto__‰ì
(
li°íî
->
socks
);

782 if(
	`li°í
(
sock
, 100) == -1){

783 
	`√t__¥öt_îr‹
(
MOSQ_LOG_ERR
, "Error: %s");

784 
	`‰ìaddröfo
(
aöfo
);

785 
	`COMPAT_CLOSE
(
sock
);

786 
	`mosquôto__‰ì
(
li°íî
->
socks
);

790 
	`‰ìaddröfo
(
aöfo
);

792 #i‚de‡
WIN32


793 if(
li°íî
->
böd_öãrÁ˚
 && !
öãrÁ˚_bound
){

794 
	`mosquôto__‰ì
(
li°íî
->
socks
);

800 
	}
}

803 #ifde‡
WITH_UNIX_SOCKETS


804 
	$√t__sockë_li°í_unix
(
mosquôto__li°íî
 *
li°íî
)

806 
sockaddr_un
 
addr
;

807 
sock
;

808 
rc
;

809 
mode_t
 
ﬁd_mask
;

811 if(
li°íî
->
unix_sockë_∑th
 =
NULL
){

812  
MOSQ_ERR_INVAL
;

814 if(
	`°æí
(
li°íî
->
unix_sockë_∑th
Ë> (
addr
.
sun_∑th
)-1){

815 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: P©hÅÿunix sockë i†toÿl⁄g \"%s\".", 
li°íî
->
unix_sockë_∑th
);

816  
MOSQ_ERR_INVAL
;

819 
	`u∆ök
(
li°íî
->
unix_sockë_∑th
);

820 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "O≥nög unixÜi°í sockë o¿∑th %s.", 
li°íî
->
unix_sockë_∑th
);

821 
	`mem£t
(&
addr
, 0, (
sockaddr_un
));

822 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

823 
	`°∫˝y
(
addr
.
sun_∑th
, 
li°íî
->
unix_sockë_∑th
, (addr.sun_path)-1);

825 
sock
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

826 if(
sock
 =
INVALID_SOCKET
){

827 
	`√t__¥öt_îr‹
(
MOSQ_LOG_ERR
, "Error creating unix socket: %s");

830 
li°íî
->
sock_cou¡
++;

831 
li°íî
->
socks
 = 
	`mosquôto__ªÆloc
÷i°íî->socks, (
mosq_sock_t
)*(
size_t
Ói°íî->
sock_cou¡
);

832 if(!
li°íî
->
socks
){

833 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

834 
	`COMPAT_CLOSE
(
sock
);

835  
MOSQ_ERR_NOMEM
;

837 
li°íî
->
socks
[li°íî->
sock_cou¡
-1] = 
sock
;

840 
ﬁd_mask
 = 
	`umask
(0007);

841 
rc
 = 
	`böd
(
sock
, (
sockaddr
 *)&
addr
, (
sockaddr_un
));

842 
	`umask
(
ﬁd_mask
);

844 if(
rc
 == -1){

845 
	`√t__¥öt_îr‹
(
MOSQ_LOG_ERR
, "Error binding unix socket: %s");

849 if(
	`li°í
(
sock
, 10) == -1){

850 
	`√t__¥öt_îr‹
(
MOSQ_LOG_ERR
, "ErrorÜisteningÅo unix socket: %s");

854 if(
	`√t__sockë_n⁄block
(&
sock
)){

859 
	}
}

867 
	$√t__sockë_li°í
(
mosquôto__li°íî
 *
li°íî
)

869 
rc
;

871 if(!
li°íî
Ë 
MOSQ_ERR_INVAL
;

873 #ifde‡
WITH_UNIX_SOCKETS


874 if(
li°íî
->
p‹t
 =0 &&Üi°íî->
unix_sockë_∑th
 !
NULL
){

875 
rc
 = 
	`√t__sockë_li°í_unix
(
li°íî
);

879 
rc
 = 
	`√t__sockë_li°í_t˝
(
li°íî
);

881 if(
rc
) Ñc;

884 if(
li°íî
->
sock_cou¡
 > 0){

885 #ifde‡
WITH_TLS


886 if(
li°íî
->
˚πfûe
 &&Üi°íî->
keyfûe
){

887 if(
	`√t__és_£rvî_˘x
(
li°íî
)){

891 if(
	`√t__és_lﬂd_vîify
(
li°íî
)){

895 #ifde‡
FINAL_WITH_TLS_PSK


896 if(
li°íî
->
psk_höt
){

897 if(
és_ex_ödex_c⁄ãxt
 == -1){

898 
és_ex_ödex_c⁄ãxt
 = 
	`SSL_gë_ex_√w_ödex
(0, "˛õ¡ c⁄ãxt", 
NULL
, NULL, NULL);

900 if(
és_ex_ödex_li°íî
 == -1){

901 
és_ex_ödex_li°íî
 = 
	`SSL_gë_ex_√w_ödex
(0, "li°íî", 
NULL
, NULL, NULL);

904 if(
li°íî
->
˚πfûe
 =
NULL
 ||Üi°íî->
keyfûe
 == NULL){

905 if(
	`√t__és_£rvî_˘x
(
li°íî
)){

909 
	`SSL_CTX_£t_psk_£rvî_ˇŒback
(
li°íî
->
s¶_˘x
, 
psk_£rvî_ˇŒback
);

910 if(
li°íî
->
psk_höt
){

911 
rc
 = 
	`SSL_CTX_u£_psk_idítôy_höt
(
li°íî
->
s¶_˘x
,Üi°íî->
psk_höt
);

912 if(
rc
 == 0){

913 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: UnableÅo set TLS PSK hint.");

914 
	`√t__¥öt_s¶_îr‹
(
NULL
);

925 
	}
}

927 
	$√t__sockë_gë_addªss
(
mosq_sock_t
 
sock
, *
buf
, 
size_t
 
Àn
, 
uöt16_t
 *
ªmŸe_p‹t
)

929 
sockaddr_°‹age
 
addr
;

930 
sockÀn_t
 
addæí
;

932 
	`mem£t
(&
addr
, 0, (
sockaddr_°‹age
));

933 
addæí
 = (
addr
);

934 if(!
	`gë≥î«me
(
sock
, (
sockaddr
 *)&
addr
, &
addæí
)){

935 if(
addr
.
ss_Ámûy
 =
AF_INET
){

936 if(
ªmŸe_p‹t
){

937 *
ªmŸe_p‹t
 = 
	`¡ohs
(((
sockaddr_ö
 *)&
addr
)->
sö_p‹t
);

939 if(
	`öë_¡›
(
AF_INET
, &((
sockaddr_ö
 *)&
addr
)->
sö_addr
.
s_addr
, 
buf
, (
sockÀn_t
)
Àn
)){

942 }if(
addr
.
ss_Ámûy
 =
AF_INET6
){

943 if(
ªmŸe_p‹t
){

944 *
ªmŸe_p‹t
 = 
	`¡ohs
(((
sockaddr_ö6
 *)&
addr
)->
sö6_p‹t
);

946 if(
	`öë_¡›
(
AF_INET6
, &((
sockaddr_ö6
 *)&
addr
)->
sö6_addr
.
s6_addr
, 
buf
, (
sockÀn_t
)
Àn
)){

949 #ifde‡
WITH_UNIX_SOCKETS


950 }if(
addr
.
ss_Ámûy
 =
AF_UNIX
){

951 
sockaddr_un
 
un
;

952 
addæí
 = (
sockaddr_un
);

953 if(!
	`gësock«me
(
sock
, (
sockaddr
 *)&
un
, &
addæí
)){

954 
	`¢¥ötf
(
buf
, 
Àn
, "%s", 
un
.
sun_∑th
);

956 
	`¢¥ötf
(
buf
, 
Àn
, "unix-socket");

963 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/password_mosq.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 #ifde‡
WITH_TLS


23 
	~<›ís¶/›ís¶v.h
>

24 
	~<›ís¶/evp.h
>

25 
	~<›ís¶/ønd.h
>

26 
	~<›ís¶/buf„r.h
>

28 
	~<sig«l.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

33 
	~"mosquôto.h
"

34 
	~"mosquôto_brokî.h
"

35 
	~"∑ssw‹d_mosq.h
"

37 #ifde‡
WIN32


38 
	~<wödows.h
>

39 
	~<¥o˚ss.h
>

40 #i‚de‡
__˝lu•lus


41 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1900

42 
	#boﬁ
 

	)

43 
	#åue
 1

	)

44 
	#Ál£
 0

	)

46 
	~<°dboﬁ.h
>

49 
	#¢¥ötf
 
•rötf_s


	)

50 
	~<io.h
>

51 
	~<wödows.h
>

53 
	~<°dboﬁ.h
>

54 
	~<uni°d.h
>

55 
	~<ãrmios.h
>

56 
	~<sys/°©.h
>

59 
	#MAX_BUFFER_LEN
 65536

	)

60 
	#SALT_LEN
 12

	)

62 #ifde‡
WITH_TLS


63 
	$ba£64__ícode
(*
ö
, 
ö_Àn
, **
ícoded
)

65 
BIO
 *
bmem
, *
b64
;

66 
BUF_MEM
 *
b±r
;

68 
b64
 = 
	`BIO_√w
(
	`BIO_f_ba£64
());

69 
	`BIO_£t_Êags
(
b64
, 
BIO_FLAGS_BASE64_NO_NL
);

70 
bmem
 = 
	`BIO_√w
(
	`BIO_s_mem
());

71 
b64
 = 
	`BIO_push
(b64, 
bmem
);

72 
	`BIO_wrôe
(
b64
, 
ö
, ()
ö_Àn
);

73 if(
	`BIO_Êush
(
b64
) != 1){

74 
	`BIO_‰ì_Æl
(
b64
);

77 
	`BIO_gë_mem_±r
(
b64
, &
b±r
);

78 *
ícoded
 = 
	`mÆloc
(
b±r
->
Àngth
+1);

79 if(!(*
ícoded
)){

80 
	`BIO_‰ì_Æl
(
b64
);

83 
	`mem˝y
(*
ícoded
, 
b±r
->
d©a
, b±r->
Àngth
);

84 (*
ícoded
)[
b±r
->
Àngth
] = '\0';

85 
	`BIO_‰ì_Æl
(
b64
);

88 
	}
}

91 
	$ba£64__decode
(*
ö
, **
decoded
, *
decoded_Àn
)

93 
BIO
 *
bmem
, *
b64
;

94 
size_t
 
¶í
;

95 
Àn
;

97 
¶í
 = 
	`°æí
(
ö
);

99 
b64
 = 
	`BIO_√w
(
	`BIO_f_ba£64
());

100 if(!
b64
){

103 
	`BIO_£t_Êags
(
b64
, 
BIO_FLAGS_BASE64_NO_NL
);

105 
bmem
 = 
	`BIO_√w
(
	`BIO_s_mem
());

106 if(!
bmem
){

107 
	`BIO_‰ì_Æl
(
b64
);

110 
b64
 = 
	`BIO_push
(b64, 
bmem
);

111 
	`BIO_wrôe
(
bmem
, 
ö
, ()
¶í
);

113 if(
	`BIO_Êush
(
bmem
) != 1){

114 
	`BIO_‰ì_Æl
(
b64
);

117 *
decoded
 = 
	`mosquôto_ˇŒoc
(
¶í
, 1);

118 if(!(*
decoded
)){

119 
	`BIO_‰ì_Æl
(
b64
);

122 
Àn
 = 
	`BIO_ªad
(
b64
, *
decoded
, ()
¶í
);

123 
	`BIO_‰ì_Æl
(
b64
);

125 if(
Àn
 <= 0){

126 
	`mosquôto_‰ì
(*
decoded
);

127 *
decoded
 = 
NULL
;

128 *
decoded_Àn
 = 0;

131 *
decoded_Àn
 = ()
Àn
;

134 
	}
}

138 
	$pw__hash
(c⁄° *
∑ssw‹d
, 
mosquôto_pw
 *
pw
, 
boﬁ
 
√w_∑ssw‹d
, 
√w_ôî©i⁄s
)

140 
rc
;

141 
hash_Àn
;

142 c⁄° 
EVP_MD
 *
dige°
;

143 
ôî©i⁄s
;

144 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

145 
EVP_MD_CTX
 
c⁄ãxt
;

147 
EVP_MD_CTX
 *
c⁄ãxt
;

150 if(
√w_∑ssw‹d
){

151 
rc
 = 
	`RAND_byãs
(
pw
->
ß…
, (pw->salt));

152 if(!
rc
){

153  
MOSQ_ERR_UNKNOWN
;

155 
ôî©i⁄s
 = 
√w_ôî©i⁄s
;

157 
ôî©i⁄s
 = 
pw
->iterations;

159 if(
ôî©i⁄s
 < 1){

160  
MOSQ_ERR_INVAL
;

163 
dige°
 = 
	`EVP_gë_dige°by«me
("sha512");

164 if(!
dige°
){

165  
MOSQ_ERR_UNKNOWN
;

168 if(
pw
->
hashty≥
 =
pw_sha512
){

169 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

170 
	`EVP_MD_CTX_öô
(&
c⁄ãxt
);

171 
	`EVP_Dige°Inô_ex
(&
c⁄ãxt
, 
dige°
, 
NULL
);

172 
	`EVP_Dige°Upd©e
(&
c⁄ãxt
, 
∑ssw‹d
, 
	`°æí
(password));

173 
	`EVP_Dige°Upd©e
(&
c⁄ãxt
, 
pw
->
ß…
, (pw->salt));

174 
	`EVP_Dige°FöÆ_ex
(&
c⁄ãxt
, 
pw
->
∑ssw‹d_hash
, &
hash_Àn
);

175 
	`EVP_MD_CTX_˛ónup
(&
c⁄ãxt
);

177 
c⁄ãxt
 = 
	`EVP_MD_CTX_√w
();

178 
	`EVP_Dige°Inô_ex
(
c⁄ãxt
, 
dige°
, 
NULL
);

179 
	`EVP_Dige°Upd©e
(
c⁄ãxt
, 
∑ssw‹d
, 
	`°æí
(password));

180 
	`EVP_Dige°Upd©e
(
c⁄ãxt
, 
pw
->
ß…
, (pw->salt));

181 
	`EVP_Dige°FöÆ_ex
(
c⁄ãxt
, 
pw
->
∑ssw‹d_hash
, &
hash_Àn
);

182 
	`EVP_MD_CTX_‰ì
(
c⁄ãxt
);

185 
pw
->
ôî©i⁄s
 = iterations;

186 
hash_Àn
 = (
pw
->
∑ssw‹d_hash
);

187 
	`PKCS5_PBKDF2_HMAC
(
∑ssw‹d
, ()
	`°æí
(password),

188 
pw
->
ß…
, ’w->ß…), 
ôî©i⁄s
,

189 
dige°
, ()
hash_Àn
, 
pw
->
∑ssw‹d_hash
);

192  
MOSQ_ERR_SUCCESS
;

193 
	}
}

196 
	$pw__memcmp_c⁄°
(c⁄° *
a
, c⁄° *
b
, 
size_t
 
Àn
)

198 
size_t
 
i
;

199 
rc
 = 0;

201 if(!
a
 || !
b
)  1;

203 
i
=0; i<
Àn
; i++){

204 if–((*)
a
)[
i
] !((*)
b
)[i] ){

205 
rc
 = 1;

208  
rc
;

209 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/password_mosq.h

1 #i‚de‡
PASSWORD_COMMON_H


2 
	#PASSWORD_COMMON_H


	)

21 
	~<°dboﬁ.h
>

23 
	emosquôto_pwhash_ty≥
{

24 
	mpw_sha512
 = 6,

25 
	mpw_sha512_pbkdf2
 = 7,

28 
	#SALT_LEN
 12

	)

29 
	#PW_DEFAULT_ITERATIONS
 101

	)

31 
	smosquôto_pw
{

32 
	m∑ssw‹d_hash
[64];

33 
	mß…
[
SALT_LEN
];

34 
	môî©i⁄s
;

35 
mosquôto_pwhash_ty≥
 
	mhashty≥
;

36 
boﬁ
 
	mvÆid
;

39 
pw__hash
(c⁄° *
∑ssw‹d
, 
mosquôto_pw
 *
pw
, 
boﬁ
 
√w_∑ssw‹d
, 
√w_ôî©i⁄s
);

40 
pw__memcmp_c⁄°
(c⁄° *
±r1
, c⁄° *
b
, 
size_t
 
Àn
);

41 
ba£64__ícode
(*
ö
, 
ö_Àn
, **
ícoded
);

42 
ba£64__decode
(*
ö
, **
decoded
, *
decoded_Àn
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/persist.h

19 #i‚de‡
PERSIST_H


20 
	#PERSIST_H


	)

22 
	~"mosquôto_brokî_öã∫Æ.h
"

24 
	#MOSQ_DB_VERSION
 6

	)

27 c⁄° 
magic
[15];

28 
	#DB_CHUNK_CFG
 1

	)

29 
	#DB_CHUNK_MSG_STORE
 2

	)

30 
	#DB_CHUNK_CLIENT_MSG
 3

	)

31 
	#DB_CHUNK_RETAIN
 4

	)

32 
	#DB_CHUNK_SUB
 5

	)

33 
	#DB_CHUNK_CLIENT
 6

	)

36 
	#ªad_e
(
f
, 
b
, 
c
Ëif(
	`‰ód
(b, 1, c, fË!c){ 
îr‹
; }

	)

37 
	#wrôe_e
(
f
, 
b
, 
c
Ëif(
	`fwrôe
(b, 1, c, fË!c){ 
îr‹
; }

	)

52 
	sPF_hódî
{

53 
uöt32_t
 
	mchunk
;

54 
uöt32_t
 
	mÀngth
;

58 
	sPF_cfg
{

59 
uöt64_t
 
	mœ°_db_id
;

60 
uöt8_t
 
	mshutdown
;

61 
uöt8_t
 
	mdbid_size
;

64 
	sPF_˛õ¡_v5
{

65 
öt64_t
 
	m£ssi⁄_expúy_time
;

66 
uöt32_t
 
	m£ssi⁄_expúy_öãrvÆ
;

67 
uöt16_t
 
	mœ°_mid
;

68 
uöt16_t
 
	mid_Àn
;

70 
	sPF_˛õ¡
{

72 
öt64_t
 
	m£ssi⁄_expúy_time
;

73 
uöt32_t
 
	m£ssi⁄_expúy_öãrvÆ
;

74 
uöt16_t
 
	mœ°_mid
;

75 
uöt16_t
 
	mid_Àn
;

77 
uöt16_t
 
	mli°íî_p‹t
;

78 
uöt16_t
 
	mu£∫ame_Àn
;

82 
	sP_˛õ¡
{

83 
PF_˛õ¡
 
	mF
;

84 *
	m˛õ¡_id
;

85 *
	mu£∫ame
;

89 
	sPF_˛õ¡_msg
{

90 
dbid_t
 
	m°‹e_id
;

91 
uöt16_t
 
	mmid
;

92 
uöt16_t
 
	mid_Àn
;

93 
uöt8_t
 
	mqos
;

94 
uöt8_t
 
	m°©e
;

95 
uöt8_t
 
	mªèö_dup
;

96 
uöt8_t
 
	mdúe˘i⁄
;

98 
	sP_˛õ¡_msg
{

99 
PF_˛õ¡_msg
 
	mF
;

100 *
	m˛õ¡_id
;

101 
mosquôto_¥›îty
 *
	m¥›îtõs
;

105 
	sPF_msg_°‹e
{

106 
dbid_t
 
	m°‹e_id
;

107 
öt64_t
 
	mexpúy_time
;

108 
uöt32_t
 
	m∑ylﬂdÀn
;

109 
uöt16_t
 
	msour˚_mid
;

110 
uöt16_t
 
	msour˚_id_Àn
;

111 
uöt16_t
 
	msour˚_u£∫ame_Àn
;

112 
uöt16_t
 
	mt›ic_Àn
;

113 
uöt16_t
 
	msour˚_p‹t
;

114 
uöt8_t
 
	mqos
;

115 
uöt8_t
 
	mªèö
;

117 
	sP_msg_°‹e
{

118 
PF_msg_°‹e
 
	mF
;

119 *
	m∑ylﬂd
;

120 
mosquôto
 
	msour˚
;

121 *
	mt›ic
;

122 
mosquôto_¥›îty
 *
	m¥›îtõs
;

126 
	sPF_sub
{

127 
uöt32_t
 
	midítifõr
;

128 
uöt16_t
 
	mid_Àn
;

129 
uöt16_t
 
	mt›ic_Àn
;

130 
uöt8_t
 
	mqos
;

131 
uöt8_t
 
	m›ti⁄s
;

133 
	sP_sub
{

134 
PF_sub
 
	mF
;

135 *
	m˛õ¡_id
;

136 *
	mt›ic
;

140 
	sPF_ªèö
{

141 
dbid_t
 
	m°‹e_id
;

143 
	sP_ªèö
{

144 
PF_ªèö
 
	mF
;

148 
≥rsi°__ªad_°rög_Àn
(
FILE
 *
db_Âå
, **
°r
, 
uöt16_t
 
Àn
);

149 
≥rsi°__ªad_°rög
(
FILE
 *
db_Âå
, **
°r
);

151 
≥rsi°__chunk_hódî_ªad
(
FILE
 *
db_Âå
, 
uöt32_t
 *
chunk
, uöt32_à*
Àngth
);

153 
≥rsi°__chunk_hódî_ªad_v234
(
FILE
 *
db_Âå
, 
uöt32_t
 *
chunk
, uöt32_à*
Àngth
);

154 
≥rsi°__chunk_cfg_ªad_v234
(
FILE
 *
db_Âå
, 
PF_cfg
 *
chunk
);

155 
≥rsi°__chunk_˛õ¡_ªad_v234
(
FILE
 *
db_Âå
, 
P_˛õ¡
 *
chunk
, 
uöt32_t
 
db_vîsi⁄
);

156 
≥rsi°__chunk_˛õ¡_msg_ªad_v234
(
FILE
 *
db_Âå
, 
P_˛õ¡_msg
 *
chunk
);

157 
≥rsi°__chunk_msg_°‹e_ªad_v234
(
FILE
 *
db_Âå
, 
P_msg_°‹e
 *
chunk
, 
uöt32_t
 
db_vîsi⁄
);

158 
≥rsi°__chunk_ªèö_ªad_v234
(
FILE
 *
db_Âå
, 
P_ªèö
 *
chunk
);

159 
≥rsi°__chunk_sub_ªad_v234
(
FILE
 *
db_Âå
, 
P_sub
 *
chunk
);

161 
≥rsi°__chunk_hódî_ªad_v56
(
FILE
 *
db_Âå
, 
uöt32_t
 *
chunk
, uöt32_à*
Àngth
);

162 
≥rsi°__chunk_cfg_ªad_v56
(
FILE
 *
db_Âå
, 
PF_cfg
 *
chunk
);

163 
≥rsi°__chunk_˛õ¡_ªad_v56
(
FILE
 *
db_Âå
, 
P_˛õ¡
 *
chunk
, 
uöt32_t
 
db_vîsi⁄
);

164 
≥rsi°__chunk_˛õ¡_msg_ªad_v56
(
FILE
 *
db_Âå
, 
P_˛õ¡_msg
 *
chunk
, 
uöt32_t
 
Àngth
);

165 
≥rsi°__chunk_msg_°‹e_ªad_v56
(
FILE
 *
db_Âå
, 
P_msg_°‹e
 *
chunk
, 
uöt32_t
 
Àngth
);

166 
≥rsi°__chunk_ªèö_ªad_v56
(
FILE
 *
db_Âå
, 
P_ªèö
 *
chunk
);

167 
≥rsi°__chunk_sub_ªad_v56
(
FILE
 *
db_Âå
, 
P_sub
 *
chunk
);

169 
≥rsi°__chunk_cfg_wrôe_v6
(
FILE
 *
db_Âå
, 
PF_cfg
 *
chunk
);

170 
≥rsi°__chunk_˛õ¡_wrôe_v6
(
FILE
 *
db_Âå
, 
P_˛õ¡
 *
chunk
);

171 
≥rsi°__chunk_˛õ¡_msg_wrôe_v6
(
FILE
 *
db_Âå
, 
P_˛õ¡_msg
 *
chunk
);

172 
≥rsi°__chunk_mesßge_°‹e_wrôe_v6
(
FILE
 *
db_Âå
, 
P_msg_°‹e
 *
chunk
);

173 
≥rsi°__chunk_ªèö_wrôe_v6
(
FILE
 *
db_Âå
, 
P_ªèö
 *
chunk
);

174 
≥rsi°__chunk_sub_wrôe_v6
(
FILE
 *
db_Âå
, 
P_sub
 *
chunk
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/persist_read.c

19 
	~"c⁄fig.h
"

21 #ifde‡
WITH_PERSISTENCE


23 #i‚de‡
WIN32


24 
	~<¨∑/öë.h
>

26 
	~<as£π.h
>

27 
	~<î∫o.h
>

28 
	~<f˙é.h
>

29 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<sys/°©.h
>

32 
	~<time.h
>

33 
	~<uéi°.h
>

35 
	~"mosquôto_brokî_öã∫Æ.h
"

36 
	~"mem‹y_mosq.h
"

37 
	~"≥rsi°.h
"

38 
	~"time_mosq.h
"

39 
	~"misc_mosq.h
"

40 
	~"utû_mosq.h
"

42 
uöt32_t
 
	gdb_vîsi⁄
;

44 c⁄° 
	gmagic
[15] = {0x00, 0xB5, 0x00, 'm','o','s','q','u','i','t','t','o',' ','d','b'};

46 
≥rsi°__ª°‹e_sub
(c⁄° *
˛õ¡_id
, c⁄° *
sub
, 
uöt8_t
 
qos
, 
uöt32_t
 
idítifõr
, 
›ti⁄s
);

48 
mosquôto
 *
	$≥rsi°__föd_‹_add_c⁄ãxt
(c⁄° *
˛õ¡_id
, 
uöt16_t
 
œ°_mid
)

50 
mosquôto
 *
c⁄ãxt
;

52 if(!
˛õ¡_id
Ë 
NULL
;

54 
c⁄ãxt
 = 
NULL
;

55 
	`HASH_FIND
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
˛õ¡_id
, 
	`°æí
(˛õ¡_id), 
c⁄ãxt
);

56 if(!
c⁄ãxt
){

57 
c⁄ãxt
 = 
	`c⁄ãxt__öô
(
INVALID_SOCKET
);

58 if(!
c⁄ãxt
Ë 
NULL
;

59 
c⁄ãxt
->
id
 = 
	`mosquôto__°rdup
(
˛õ¡_id
);

60 if(!
c⁄ãxt
->
id
){

61 
	`mosquôto__‰ì
(
c⁄ãxt
);

62  
NULL
;

65 
c⁄ãxt
->
˛ón_°¨t
 = 
Ál£
;

67 
	`c⁄ãxt__add_to_by_id
(
c⁄ãxt
);

69 if(
œ°_mid
){

70 
c⁄ãxt
->
œ°_mid
 =Üast_mid;

72  
c⁄ãxt
;

73 
	}
}

76 
	$≥rsi°__ªad_°rög_Àn
(
FILE
 *
db_Âå
, **
°r
, 
uöt16_t
 
Àn
)

78 *
s
 = 
NULL
;

80 if(
Àn
){

81 
s
 = 
	`mosquôto__mÆloc
(
Àn
+1U);

82 if(!
s
){

83 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

84  
MOSQ_ERR_NOMEM
;

86 if(
	`‰ód
(
s
, 1, 
Àn
, 
db_Âå
) !=Üen){

87 
	`mosquôto__‰ì
(
s
);

88  
MOSQ_ERR_NOMEM
;

90 
s
[
Àn
] = '\0';

93 *
°r
 = 
s
;

94  
MOSQ_ERR_SUCCESS
;

95 
	}
}

98 
	$≥rsi°__ªad_°rög
(
FILE
 *
db_Âå
, **
°r
)

100 
uöt16_t
 
i16ãmp
;

101 
uöt16_t
 
¶í
;

103 if(
	`‰ód
(&
i16ãmp
, 1, (
uöt16_t
), 
db_Âå
) != (uint16_t)){

104  
MOSQ_ERR_INVAL
;

107 
¶í
 = 
	`¡ohs
(
i16ãmp
);

108  
	`≥rsi°__ªad_°rög_Àn
(
db_Âå
, 
°r
, 
¶í
);

109 
	}
}

112 
	$≥rsi°__˛õ¡_msg_ª°‹e
(
P_˛õ¡_msg
 *
chunk
)

114 
mosquôto_˛õ¡_msg
 *
cmsg
;

115 
mosquôto_msg_°‹e_lﬂd
 *
lﬂd
;

116 
mosquôto
 *
c⁄ãxt
;

117 
mosquôto_msg_d©a
 *
msg_d©a
;

119 
	`HASH_FIND
(
hh
, 
db
.
msg_°‹e_lﬂd
, &
chunk
->
F
.
°‹e_id
, (
dbid_t
), 
lﬂd
);

120 if(!
lﬂd
){

122  
MOSQ_ERR_SUCCESS
;

125 
c⁄ãxt
 = 
	`≥rsi°__föd_‹_add_c⁄ãxt
(
chunk
->
˛õ¡_id
, 0);

126 if(!
c⁄ãxt
){

127 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Persistence file contains client message withÇo matching client. File may be corrupt.");

131 
cmsg
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_˛õ¡_msg
));

132 if(!
cmsg
){

133 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

134  
MOSQ_ERR_NOMEM
;

137 
cmsg
->
√xt
 = 
NULL
;

138 
cmsg
->
°‹e
 = 
NULL
;

139 
cmsg
->
mid
 = 
chunk
->
F
.mid;

140 
cmsg
->
qos
 = 
chunk
->
F
.qos;

141 
cmsg
->
ªèö
 = (
chunk
->
F
.
ªèö_dup
&0xF0)>>4;

142 
cmsg
->
time°amp
 = 0;

143 
cmsg
->
dúe˘i⁄
 = 
chunk
->
F
.direction;

144 
cmsg
->
°©e
 = 
chunk
->
F
.state;

145 
cmsg
->
dup
 = 
chunk
->
F
.
ªèö_dup
&0x0F;

146 
cmsg
->
¥›îtõs
 = 
chunk
->properties;

148 
cmsg
->
°‹e
 = 
lﬂd
->store;

149 
	`db__msg_°‹e_ªf_öc
(
cmsg
->
°‹e
);

151 if(
cmsg
->
dúe˘i⁄
 =
mosq_md_out
){

152 
msg_d©a
 = &
c⁄ãxt
->
msgs_out
;

154 
msg_d©a
 = &
c⁄ãxt
->
msgs_ö
;

157 if(
chunk
->
F
.
°©e
 =
mosq_ms_queued
 || (chunk->F.
qos
 > 0 && 
msg_d©a
->
öÊight_quŸa
 == 0)){

158 
	`DL_APPEND
(
msg_d©a
->
queued
, 
cmsg
);

159 
	`db__msg_add_to_queued_°©s
(
msg_d©a
, 
cmsg
);

161 
	`DL_APPEND
(
msg_d©a
->
öÊight
, 
cmsg
);

162 if(
chunk
->
F
.
qos
 > 0 && 
msg_d©a
->
öÊight_quŸa
 > 0){

163 
msg_d©a
->
öÊight_quŸa
--;

165 
	`db__msg_add_to_öÊight_°©s
(
msg_d©a
, 
cmsg
);

168  
MOSQ_ERR_SUCCESS
;

169 
	}
}

172 
	$≥rsi°__˛õ¡_chunk_ª°‹e
(
FILE
 *
db_Âå
)

174 
i
, 
rc
 = 0;

175 
mosquôto
 *
c⁄ãxt
;

176 
P_˛õ¡
 
chunk
;

178 
	`mem£t
(&
chunk
, 0, (
P_˛õ¡
));

180 if(
db_vîsi⁄
 == 6 || db_version == 5){

181 
rc
 = 
	`≥rsi°__chunk_˛õ¡_ªad_v56
(
db_Âå
, &
chunk
, 
db_vîsi⁄
);

183 
rc
 = 
	`≥rsi°__chunk_˛õ¡_ªad_v234
(
db_Âå
, &
chunk
, 
db_vîsi⁄
);

185 if(
rc
 > 0){

186  
rc
;

187 }if(
rc
 < 0){

189 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Empty clientÉntry found inÖersistence database, it may be corrupt.");

190  
MOSQ_ERR_SUCCESS
;

193 
c⁄ãxt
 = 
	`≥rsi°__föd_‹_add_c⁄ãxt
(
chunk
.
˛õ¡_id
, chunk.
F
.
œ°_mid
);

194 if(
c⁄ãxt
){

195 
c⁄ãxt
->
£ssi⁄_expúy_time
 = 
chunk
.
F
.session_expiry_time;

196 
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 = 
chunk
.
F
.session_expiry_interval;

197 if(
chunk
.
u£∫ame
 && !
c⁄ãxt
->username){

199 
c⁄ãxt
->
u£∫ame
 = 
chunk
.username;

200 
chunk
.
u£∫ame
 = 
NULL
;

203 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
 && !
c⁄ãxt
->
li°íî
 && 
chunk
.
F
.
li°íî_p‹t
 > 0){

204 
i
=0; i < 
db
.
c⁄fig
->
li°íî_cou¡
; i++){

205 if(
db
.
c⁄fig
->
li°íîs
[
i
].
p‹t
 =
chunk
.
F
.
li°íî_p‹t
){

206 
c⁄ãxt
->
li°íî
 = &
db
.
c⁄fig
->
li°íîs
[
i
];

211 
	`£ssi⁄_expúy__add_‰om_≥rsi°í˚
(
c⁄ãxt
, 
chunk
.
F
.
£ssi⁄_expúy_time
);

213 
rc
 = 1;

216 
	`mosquôto__‰ì
(
chunk
.
˛õ¡_id
);

217 if(
chunk
.
u£∫ame
){

218 
	`mosquôto__‰ì
(
chunk
.
u£∫ame
);

220  
rc
;

221 
	}
}

224 
	$≥rsi°__˛õ¡_msg_chunk_ª°‹e
(
FILE
 *
db_Âå
, 
uöt32_t
 
Àngth
)

226 
P_˛õ¡_msg
 
chunk
;

227 
rc
;

229 
	`mem£t
(&
chunk
, 0, (
P_˛õ¡_msg
));

231 if(
db_vîsi⁄
 == 6 || db_version == 5){

232 
rc
 = 
	`≥rsi°__chunk_˛õ¡_msg_ªad_v56
(
db_Âå
, &
chunk
, 
Àngth
);

234 
rc
 = 
	`≥rsi°__chunk_˛õ¡_msg_ªad_v234
(
db_Âå
, &
chunk
);

236 if(
rc
){

237  
rc
;

240 
rc
 = 
	`≥rsi°__˛õ¡_msg_ª°‹e
(&
chunk
);

241 
	`mosquôto__‰ì
(
chunk
.
˛õ¡_id
);

243  
rc
;

244 
	}
}

247 
	$≥rsi°__msg_°‹e_chunk_ª°‹e
(
FILE
 *
db_Âå
, 
uöt32_t
 
Àngth
)

249 
P_msg_°‹e
 
chunk
;

250 
mosquôto_msg_°‹e
 *
°‹ed
 = 
NULL
;

251 
mosquôto_msg_°‹e_lﬂd
 *
lﬂd
;

252 
öt64_t
 
mesßge_expúy_öãrvÆ64
;

253 
uöt32_t
 
mesßge_expúy_öãrvÆ
;

254 
rc
 = 0;

255 
i
;

257 
	`mem£t
(&
chunk
, 0, (
P_msg_°‹e
));

259 if(
db_vîsi⁄
 == 6 || db_version == 5){

260 
rc
 = 
	`≥rsi°__chunk_msg_°‹e_ªad_v56
(
db_Âå
, &
chunk
, 
Àngth
);

262 
rc
 = 
	`≥rsi°__chunk_msg_°‹e_ªad_v234
(
db_Âå
, &
chunk
, 
db_vîsi⁄
);

264 if(
rc
){

265  
rc
;

268 if(
chunk
.
F
.
sour˚_p‹t
){

269 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

270 if(
db
.
c⁄fig
->
li°íîs
[
i
].
p‹t
 =
chunk
.
F
.
sour˚_p‹t
){

271 
chunk
.
sour˚
.
li°íî
 = &
db
.
c⁄fig
->
li°íîs
[
i
];

276 
lﬂd
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_msg_°‹e_lﬂd
));

277 if(!
lﬂd
){

278 
	`mosquôto__‰ì
(
chunk
.
sour˚
.
id
);

279 
	`mosquôto__‰ì
(
chunk
.
sour˚
.
u£∫ame
);

280 
	`mosquôto__‰ì
(
chunk
.
t›ic
);

281 
	`mosquôto__‰ì
(
chunk
.
∑ylﬂd
);

282 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

283  
MOSQ_ERR_NOMEM
;

286 if(
chunk
.
F
.
expúy_time
 > 0){

287 
mesßge_expúy_öãrvÆ64
 = 
chunk
.
F
.
expúy_time
 - 
	`time
(
NULL
);

288 if(
mesßge_expúy_öãrvÆ64
 < 0 || mesßge_expúy_öãrvÆ64 > 
UINT32_MAX
){

290 
	`mosquôto__‰ì
(
chunk
.
sour˚
.
id
);

291 
	`mosquôto__‰ì
(
chunk
.
sour˚
.
u£∫ame
);

292 
	`mosquôto__‰ì
(
chunk
.
t›ic
);

293 
	`mosquôto__‰ì
(
chunk
.
∑ylﬂd
);

294 
	`mosquôto__‰ì
(
lﬂd
);

295  
MOSQ_ERR_SUCCESS
;

297 
mesßge_expúy_öãrvÆ
 = (
uöt32_t
)
mesßge_expúy_öãrvÆ64
;

300 
mesßge_expúy_öãrvÆ
 = 0;

303 
°‹ed
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_msg_°‹e
));

304 if(
°‹ed
 =
NULL
){

305 
	`mosquôto__‰ì
(
lﬂd
);

306 
	`mosquôto__‰ì
(
chunk
.
sour˚
.
id
);

307 
	`mosquôto__‰ì
(
chunk
.
sour˚
.
u£∫ame
);

308 
	`mosquôto__‰ì
(
chunk
.
t›ic
);

309 
	`mosquôto__‰ì
(
chunk
.
∑ylﬂd
);

310 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

311  
MOSQ_ERR_NOMEM
;

314 
°‹ed
->
sour˚_mid
 = 
chunk
.
F
.source_mid;

315 
°‹ed
->
t›ic
 = 
chunk
.topic;

316 
°‹ed
->
qos
 = 
chunk
.
F
.qos;

317 
°‹ed
->
∑ylﬂdÀn
 = 
chunk
.
F
.payloadlen;

318 
°‹ed
->
ªèö
 = 
chunk
.
F
.retain;

319 
°‹ed
->
¥›îtõs
 = 
chunk
.properties;

320 
°‹ed
->
∑ylﬂd
 = 
chunk
.payload;

322 
rc
 = 
	`db__mesßge_°‹e
(&
chunk
.
sour˚
, 
°‹ed
, 
mesßge_expúy_öãrvÆ
,

323 
chunk
.
F
.
°‹e_id
, 
mosq_mo_˛õ¡
);

325 
	`mosquôto__‰ì
(
chunk
.
sour˚
.
id
);

326 
	`mosquôto__‰ì
(
chunk
.
sour˚
.
u£∫ame
);

327 
chunk
.
sour˚
.
id
 = 
NULL
;

328 
chunk
.
sour˚
.
u£∫ame
 = 
NULL
;

330 if(
rc
 =
MOSQ_ERR_SUCCESS
){

331 
°‹ed
->
sour˚_li°íî
 = 
chunk
.
sour˚
.
li°íî
;

332 
lﬂd
->
db_id
 = 
°‹ed
->db_id;

333 
lﬂd
->
°‹e
 = 
°‹ed
;

335 
	`HASH_ADD
(
hh
, 
db
.
msg_°‹e_lﬂd
, 
db_id
, (
dbid_t
), 
lﬂd
);

336  
MOSQ_ERR_SUCCESS
;

338 
	`mosquôto__‰ì
(
lﬂd
);

339  
rc
;

341 
	}
}

343 
	$≥rsi°__ªèö_chunk_ª°‹e
(
FILE
 *
db_Âå
)

345 
mosquôto_msg_°‹e_lﬂd
 *
lﬂd
;

346 
P_ªèö
 
chunk
;

347 
rc
;

348 **
•lô_t›ics
;

349 *
loˇl_t›ic
;

351 
	`mem£t
(&
chunk
, 0, (
P_ªèö
));

353 if(
db_vîsi⁄
 == 6 || db_version == 5){

354 
rc
 = 
	`≥rsi°__chunk_ªèö_ªad_v56
(
db_Âå
, &
chunk
);

356 
rc
 = 
	`≥rsi°__chunk_ªèö_ªad_v234
(
db_Âå
, &
chunk
);

358 if(
rc
){

359  
rc
;

362 
	`HASH_FIND
(
hh
, 
db
.
msg_°‹e_lﬂd
, &
chunk
.
F
.
°‹e_id
, (
dbid_t
), 
lﬂd
);

363 if(
lﬂd
){

364 if(
	`sub__t›ic_tokíi£
(
lﬂd
->
°‹e
->
t›ic
, &
loˇl_t›ic
, &
•lô_t›ics
, 
NULL
))  1;

365 
	`ªèö__°‹e
(
lﬂd
->
°‹e
->
t›ic
,Üﬂd->°‹e, 
•lô_t›ics
);

366 
	`mosquôto__‰ì
(
loˇl_t›ic
);

367 
	`mosquôto__‰ì
(
•lô_t›ics
);

371  
MOSQ_ERR_SUCCESS
;

372 
	}
}

374 
	$≥rsi°__sub_chunk_ª°‹e
(
FILE
 *
db_Âå
)

376 
P_sub
 
chunk
;

377 
rc
;

379 
	`mem£t
(&
chunk
, 0, (
P_sub
));

381 if(
db_vîsi⁄
 == 6 || db_version == 5){

382 
rc
 = 
	`≥rsi°__chunk_sub_ªad_v56
(
db_Âå
, &
chunk
);

384 
rc
 = 
	`≥rsi°__chunk_sub_ªad_v234
(
db_Âå
, &
chunk
);

386 if(
rc
){

387  
rc
;

390 
rc
 = 
	`≥rsi°__ª°‹e_sub
(
chunk
.
˛õ¡_id
, chunk.
t›ic
, chunk.
F
.
qos
, chunk.F.
idítifõr
, chunk.F.
›ti⁄s
);

392 
	`mosquôto__‰ì
(
chunk
.
˛õ¡_id
);

393 
	`mosquôto__‰ì
(
chunk
.
t›ic
);

395  
rc
;

396 
	}
}

399 
	$≥rsi°__chunk_hódî_ªad
(
FILE
 *
db_Âå
, 
uöt32_t
 *
chunk
, uöt32_à*
Àngth
)

401 if(
db_vîsi⁄
 == 6 || db_version == 5){

402  
	`≥rsi°__chunk_hódî_ªad_v56
(
db_Âå
, 
chunk
, 
Àngth
);

404  
	`≥rsi°__chunk_hódî_ªad_v234
(
db_Âå
, 
chunk
, 
Àngth
);

406 
	}
}

409 
	$≥rsi°__ª°‹e
()

411 
FILE
 *
Âå
;

412 
hódî
[15];

413 
rc
 = 0;

414 
uöt32_t
 
¸c
;

415 
uöt32_t
 
i32ãmp
;

416 
uöt32_t
 
chunk
, 
Àngth
;

417 
size_t
 
æí
;

418 *
îr
;

419 
mosquôto_msg_°‹e_lﬂd
 *
lﬂd
, *
lﬂd_tmp
;

420 
PF_cfg
 
cfg_chunk
;

422 
	`as£π
(
db
.
c⁄fig
);

424 if(!
db
.
c⁄fig
->
≥rsi°í˚
 || db.c⁄fig->
≥rsi°í˚_fûï©h
 =
NULL
){

425  
MOSQ_ERR_SUCCESS
;

428 
db
.
msg_°‹e_lﬂd
 = 
NULL
;

430 
Âå
 = 
	`mosquôto__f›í
(
db
.
c⁄fig
->
≥rsi°í˚_fûï©h
, "rb", 
Ál£
);

431 if(
Âå
 =
NULL
Ë 
MOSQ_ERR_SUCCESS
;

432 
æí
 = 
	`‰ód
(&
hódî
, 1, 15, 
Âå
);

433 if(
æí
 == 0){

434 
	`f˛o£
(
Âå
);

435 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "Warning: Persistence file isÉmpty.");

437 }if(
æí
 != 15){

438 
îr‹
;

440 if(!
	`memcmp
(
hódî
, 
magic
, 15)){

442 
	`ªad_e
(
Âå
, &
¸c
, (
uöt32_t
));

443 
	`ªad_e
(
Âå
, &
i32ãmp
, (
uöt32_t
));

444 
db_vîsi⁄
 = 
	`¡ohl
(
i32ãmp
);

448 if(
db_vîsi⁄
 !
MOSQ_DB_VERSION
){

449 if(
db_vîsi⁄
 == 5){

451 }if(
db_vîsi⁄
 == 4){

452 }if(
db_vîsi⁄
 == 3){

454 }if(
db_vîsi⁄
 == 2){

457 
	`f˛o£
(
Âå
);

458 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: Unsuµ‹ãdÖîsi°íàd©aba£ f‹m© vîsi⁄ %d (√ed vîsi⁄ %d).", 
db_vîsi⁄
, 
MOSQ_DB_VERSION
);

463 
	`≥rsi°__chunk_hódî_ªad
(
Âå
, &
chunk
, &
Àngth
Ë=
MOSQ_ERR_SUCCESS
){

464 
chunk
){

465 
DB_CHUNK_CFG
:

466 if(
db_vîsi⁄
 == 6 || db_version == 5){

467 if(
	`≥rsi°__chunk_cfg_ªad_v56
(
Âå
, &
cfg_chunk
)){

468 
	`f˛o£
(
Âå
);

472 if(
	`≥rsi°__chunk_cfg_ªad_v234
(
Âå
, &
cfg_chunk
)){

473 
	`f˛o£
(
Âå
);

477 if(
cfg_chunk
.
dbid_size
 !(
dbid_t
)){

478 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Incompatible database configuration (dbid size is %d bytes,Éxpected %lu)",

479 
cfg_chunk
.
dbid_size
, ()(
dbid_t
));

480 
	`f˛o£
(
Âå
);

483 
db
.
œ°_db_id
 = 
cfg_chunk
.last_db_id;

486 
DB_CHUNK_MSG_STORE
:

487 if(
	`≥rsi°__msg_°‹e_chunk_ª°‹e
(
Âå
, 
Àngth
)){

488 
	`f˛o£
(
Âå
);

493 
DB_CHUNK_CLIENT_MSG
:

494 if(
	`≥rsi°__˛õ¡_msg_chunk_ª°‹e
(
Âå
, 
Àngth
)){

495 
	`f˛o£
(
Âå
);

500 
DB_CHUNK_RETAIN
:

501 if(
	`≥rsi°__ªèö_chunk_ª°‹e
(
Âå
)){

502 
	`f˛o£
(
Âå
);

507 
DB_CHUNK_SUB
:

508 if(
	`≥rsi°__sub_chunk_ª°‹e
(
Âå
)){

509 
	`f˛o£
(
Âå
);

514 
DB_CHUNK_CLIENT
:

515 if(
	`≥rsi°__˛õ¡_chunk_ª°‹e
(
Âå
)){

516 
	`f˛o£
(
Âå
);

522 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
, "W¨nög: Unsuµ‹ãd chunk \"%d\" i¿≥rsi°íàd©aba£ fûe. Ign‹ög.", 
chunk
);

523 
	`f£ek
(
Âå
, 
Àngth
, 
SEEK_CUR
);

528 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: UnableÅoÑestoreÖersistent database. Unrecognised file format.");

529 
rc
 = 1;

532 
	`f˛o£
(
Âå
);

534 
	`HASH_ITER
(
hh
, 
db
.
msg_°‹e_lﬂd
, 
lﬂd
, 
lﬂd_tmp
){

535 
	`HASH_DELETE
(
hh
, 
db
.
msg_°‹e_lﬂd
, 
lﬂd
);

536 
	`mosquôto__‰ì
(
lﬂd
);

538  
rc
;

539 
îr‹
:

540 
îr
 = 
	`°ªº‹
(
î∫o
);

541 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
îr
);

542 if(
Âå
Ë
	`f˛o£
(fptr);

544 
	}
}

546 
	$≥rsi°__ª°‹e_sub
(c⁄° *
˛õ¡_id
, c⁄° *
sub
, 
uöt8_t
 
qos
, 
uöt32_t
 
idítifõr
, 
›ti⁄s
)

548 
mosquôto
 *
c⁄ãxt
;

550 
	`as£π
(
˛õ¡_id
);

551 
	`as£π
(
sub
);

553 
c⁄ãxt
 = 
	`≥rsi°__föd_‹_add_c⁄ãxt
(
˛õ¡_id
, 0);

554 if(!
c⁄ãxt
)  1;

555  
	`sub__add
(
c⁄ãxt
, 
sub
, 
qos
, 
idítifõr
, 
›ti⁄s
, &
db
.
subs
);

556 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/persist_read_v234.c

19 
	~"c⁄fig.h
"

21 #ifde‡
WITH_PERSISTENCE


23 #i‚de‡
WIN32


24 
	~<¨∑/öë.h
>

26 
	~<as£π.h
>

27 
	~<î∫o.h
>

28 
	~<f˙é.h
>

29 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<sys/°©.h
>

32 
	~<time.h
>

34 
	~"mosquôto_brokî_öã∫Æ.h
"

35 
	~"mem‹y_mosq.h
"

36 
	~"≥rsi°.h
"

37 
	~"time_mosq.h
"

38 
	~"utû_mosq.h
"

41 
	$≥rsi°__chunk_hódî_ªad_v234
(
FILE
 *
db_Âå
, 
uöt32_t
 *
chunk
, uöt32_à*
Àngth
)

43 
size_t
 
æí
;

44 
uöt16_t
 
i16ãmp
;

45 
uöt32_t
 
i32ãmp
;

47 
æí
 = 
	`‰ód
(&
i16ãmp
, (
uöt16_t
), 1, 
db_Âå
);

48 if(
æí
 != 1)  1;

50 
æí
 = 
	`‰ód
(&
i32ãmp
, (
uöt32_t
), 1, 
db_Âå
);

51 if(
æí
 != 1)  1;

53 *
chunk
 = 
	`¡ohs
(
i16ãmp
);

54 *
Àngth
 = 
	`¡ohl
(
i32ãmp
);

56  
MOSQ_ERR_SUCCESS
;

57 
	}
}

60 
	$≥rsi°__chunk_cfg_ªad_v234
(
FILE
 *
db_Âå
, 
PF_cfg
 *
chunk
)

62 
	`ªad_e
(
db_Âå
, &
chunk
->
shutdown
, (
uöt8_t
));

63 
	`ªad_e
(
db_Âå
, &
chunk
->
dbid_size
, (
uöt8_t
));

64 
	`ªad_e
(
db_Âå
, &
chunk
->
œ°_db_id
, (
dbid_t
));

66  
MOSQ_ERR_SUCCESS
;

67 
îr‹
:

68 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
	`°ªº‹
(
î∫o
));

70 
	}
}

73 
	$≥rsi°__chunk_˛õ¡_ªad_v234
(
FILE
 *
db_Âå
, 
P_˛õ¡
 *
chunk
, 
uöt32_t
 
db_vîsi⁄
)

75 
uöt16_t
 
i16ãmp
;

76 
rc
;

77 
time_t
 
ãmp
;

79 
rc
 = 
	`≥rsi°__ªad_°rög
(
db_Âå
, &
chunk
->
˛õ¡_id
);

80 if(
rc
){

81  
rc
;

84 
	`ªad_e
(
db_Âå
, &
i16ãmp
, (
uöt16_t
));

85 
chunk
->
F
.
œ°_mid
 = 
	`¡ohs
(
i16ãmp
);

86 if(
db_vîsi⁄
 != 2){

87 
	`ªad_e
(
db_Âå
, &
ãmp
, (
time_t
));

90  
MOSQ_ERR_SUCCESS
;

91 
îr‹
:

92 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
	`°ªº‹
(
î∫o
));

93 
	`mosquôto__‰ì
(
chunk
->
˛õ¡_id
);

95 
	}
}

98 
	$≥rsi°__chunk_˛õ¡_msg_ªad_v234
(
FILE
 *
db_Âå
, 
P_˛õ¡_msg
 *
chunk
)

100 
uöt16_t
 
i16ãmp
;

101 
rc
;

102 *
îr
;

103 
uöt8_t
 
ªèö
, 
dup
;

105 
rc
 = 
	`≥rsi°__ªad_°rög
(
db_Âå
, &
chunk
->
˛õ¡_id
);

106 if(
rc
){

107  
rc
;

110 
	`ªad_e
(
db_Âå
, &
chunk
->
F
.
°‹e_id
, (
dbid_t
));

112 
	`ªad_e
(
db_Âå
, &
i16ãmp
, (
uöt16_t
));

113 
chunk
->
F
.
mid
 = 
	`¡ohs
(
i16ãmp
);

115 
	`ªad_e
(
db_Âå
, &
chunk
->
F
.
qos
, (
uöt8_t
));

116 
	`ªad_e
(
db_Âå
, &
ªèö
, (
uöt8_t
));

117 
	`ªad_e
(
db_Âå
, &
chunk
->
F
.
dúe˘i⁄
, (
uöt8_t
));

118 
	`ªad_e
(
db_Âå
, &
chunk
->
F
.
°©e
, (
uöt8_t
));

119 
	`ªad_e
(
db_Âå
, &
dup
, (
uöt8_t
));

121 
chunk
->
F
.
ªèö_dup
 = (
uöt8_t
)((
ªèö
&0x0F)<<4 | (
dup
&0x0F));

123  
MOSQ_ERR_SUCCESS
;

124 
îr‹
:

125 
îr
 = 
	`°ªº‹
(
î∫o
);

126 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
îr
);

127 
	`mosquôto__‰ì
(
chunk
->
˛õ¡_id
);

129 
	}
}

132 
	$≥rsi°__chunk_msg_°‹e_ªad_v234
(
FILE
 *
db_Âå
, 
P_msg_°‹e
 *
chunk
, 
uöt32_t
 
db_vîsi⁄
)

134 
uöt32_t
 
i32ãmp
;

135 
uöt16_t
 
i16ãmp
;

136 
rc
 = 0;

137 *
îr
;

139 
	`ªad_e
(
db_Âå
, &
chunk
->
F
.
°‹e_id
, (
dbid_t
));

141 
rc
 = 
	`≥rsi°__ªad_°rög
(
db_Âå
, &
chunk
->
sour˚
.
id
);

142 if(
rc
){

143  
rc
;

145 if(
db_vîsi⁄
 == 4){

146 
rc
 = 
	`≥rsi°__ªad_°rög
(
db_Âå
, &
chunk
->
sour˚
.
u£∫ame
);

147 if(
rc
){

148 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
id
);

149  
rc
;

151 
	`ªad_e
(
db_Âå
, &
i16ãmp
, (
uöt16_t
));

152 
chunk
->
F
.
sour˚_p‹t
 = 
	`¡ohs
(
i16ãmp
);

155 
	`ªad_e
(
db_Âå
, &
i16ãmp
, (
uöt16_t
));

156 
chunk
->
F
.
sour˚_mid
 = 
	`¡ohs
(
i16ãmp
);

159 
	`ªad_e
(
db_Âå
, &
i16ãmp
, (
uöt16_t
));

161 
rc
 = 
	`≥rsi°__ªad_°rög
(
db_Âå
, &
chunk
->
t›ic
);

162 if(
rc
){

163 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
id
);

164 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
u£∫ame
);

165  
rc
;

168 
	`ªad_e
(
db_Âå
, &
chunk
->
F
.
qos
, (
uöt8_t
));

169 
	`ªad_e
(
db_Âå
, &
chunk
->
F
.
ªèö
, (
uöt8_t
));

171 
	`ªad_e
(
db_Âå
, &
i32ãmp
, (
uöt32_t
));

172 
chunk
->
F
.
∑ylﬂdÀn
 = 
	`¡ohl
(
i32ãmp
);

174 if(
chunk
->
F
.
∑ylﬂdÀn
){

175 
chunk
->
∑ylﬂd
 = 
	`mosquôto_mÆloc
(chunk->
F
.
∑ylﬂdÀn
+1);

176 if(
chunk
->
∑ylﬂd
 =
NULL
){

177 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
id
);

178 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
u£∫ame
);

179 
	`mosquôto__‰ì
(
chunk
->
t›ic
);

180 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

181  
MOSQ_ERR_NOMEM
;

184 ((
uöt8_t
 *)
chunk
->
∑ylﬂd
)[chunk->
F
.
∑ylﬂdÀn
] = 0;

185 
	`ªad_e
(
db_Âå
, 
chunk
->
∑ylﬂd
, chunk->
F
.
∑ylﬂdÀn
);

188  
MOSQ_ERR_SUCCESS
;

189 
îr‹
:

190 
îr
 = 
	`°ªº‹
(
î∫o
);

191 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
îr
);

192 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
id
);

193 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
u£∫ame
);

195 
	}
}

198 
	$≥rsi°__chunk_ªèö_ªad_v234
(
FILE
 *
db_Âå
, 
P_ªèö
 *
chunk
)

200 
dbid_t
 
i64ãmp
;

201 *
îr
;

203 if(
	`‰ód
(&
i64ãmp
, (
dbid_t
), 1, 
db_Âå
) != 1){

204 
îr
 = 
	`°ªº‹
(
î∫o
);

205 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
îr
);

208 
chunk
->
F
.
°‹e_id
 = 
i64ãmp
;

210  
MOSQ_ERR_SUCCESS
;

211 
	}
}

214 
	$≥rsi°__chunk_sub_ªad_v234
(
FILE
 *
db_Âå
, 
P_sub
 *
chunk
)

216 
rc
;

217 *
îr
;

219 
rc
 = 
	`≥rsi°__ªad_°rög
(
db_Âå
, &
chunk
->
˛õ¡_id
);

220 if(
rc
){

221  
rc
;

224 
rc
 = 
	`≥rsi°__ªad_°rög
(
db_Âå
, &
chunk
->
t›ic
);

225 if(
rc
){

226 
	`mosquôto__‰ì
(
chunk
->
˛õ¡_id
);

227  
rc
;

230 
	`ªad_e
(
db_Âå
, &
chunk
->
F
.
qos
, (
uöt8_t
));

232  
MOSQ_ERR_SUCCESS
;

233 
îr‹
:

234 
îr
 = 
	`°ªº‹
(
î∫o
);

235 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
îr
);

236 
	`mosquôto__‰ì
(
chunk
->
˛õ¡_id
);

237 
	`mosquôto__‰ì
(
chunk
->
t›ic
);

239 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/persist_read_v5.c

19 
	~"c⁄fig.h
"

21 #ifde‡
WITH_PERSISTENCE


23 #i‚de‡
WIN32


24 
	~<¨∑/öë.h
>

26 
	~<as£π.h
>

27 
	~<î∫o.h
>

28 
	~<f˙é.h
>

29 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<sys/°©.h
>

32 
	~<time.h
>

34 
	~"mosquôto_brokî_öã∫Æ.h
"

35 
	~"mem‹y_mosq.h
"

36 
	~"mqâ_¥Ÿocﬁ.h
"

37 
	~"≥rsi°.h
"

38 
	~"¥›îty_mosq.h
"

39 
	~"time_mosq.h
"

40 
	~"utû_mosq.h
"

43 
	$≥rsi°__chunk_hódî_ªad_v56
(
FILE
 *
db_Âå
, 
uöt32_t
 *
chunk
, uöt32_à*
Àngth
)

45 
size_t
 
æí
;

46 
PF_hódî
 
hódî
;

48 
æí
 = 
	`‰ód
(&
hódî
, (
PF_hódî
), 1, 
db_Âå
);

49 if(
æí
 != 1)  1;

51 *
chunk
 = 
	`¡ohl
(
hódî
.chunk);

52 *
Àngth
 = 
	`¡ohl
(
hódî
.length);

54  
MOSQ_ERR_SUCCESS
;

55 
	}
}

58 
	$≥rsi°__chunk_cfg_ªad_v56
(
FILE
 *
db_Âå
, 
PF_cfg
 *
chunk
)

60 if(
	`‰ód
(
chunk
, (
PF_cfg
), 1, 
db_Âå
) != 1){

61 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
	`°ªº‹
(
î∫o
));

65  
MOSQ_ERR_SUCCESS
;

66 
	}
}

69 
	$≥rsi°__chunk_˛õ¡_ªad_v56
(
FILE
 *
db_Âå
, 
P_˛õ¡
 *
chunk
, 
uöt32_t
 
db_vîsi⁄
)

71 
rc
;

73 if(
db_vîsi⁄
 == 6){

74 
	`ªad_e
(
db_Âå
, &
chunk
->
F
, (
PF_˛õ¡
));

75 
chunk
->
F
.
u£∫ame_Àn
 = 
	`¡ohs
(chunk->F.username_len);

76 
chunk
->
F
.
li°íî_p‹t
 = 
	`¡ohs
(chunk->F.listener_port);

77 }if(
db_vîsi⁄
 == 5){

78 
	`ªad_e
(
db_Âå
, &
chunk
->
F
, (
PF_˛õ¡_v5
));

83 
chunk
->
F
.
£ssi⁄_expúy_öãrvÆ
 = 
	`¡ohl
(chunk->F.session_expiry_interval);

84 
chunk
->
F
.
œ°_mid
 = 
	`¡ohs
(chunk->F.last_mid);

85 
chunk
->
F
.
id_Àn
 = 
	`¡ohs
(chunk->F.id_len);

88 
rc
 = 
	`≥rsi°__ªad_°rög_Àn
(
db_Âå
, &
chunk
->
˛õ¡_id
, chunk->
F
.
id_Àn
);

89 if(
rc
){

91 }if(
chunk
->
˛õ¡_id
 =
NULL
){

95 if(
chunk
->
F
.
u£∫ame_Àn
 > 0){

96 
rc
 = 
	`≥rsi°__ªad_°rög_Àn
(
db_Âå
, &
chunk
->
u£∫ame
, chunk->
F
.
u£∫ame_Àn
);

97 if(
rc
 || !
chunk
->
u£∫ame
){

98 
	`mosquôto__‰ì
(
chunk
->
˛õ¡_id
);

103  
MOSQ_ERR_SUCCESS
;

104 
îr‹
:

105 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
	`°ªº‹
(
î∫o
));

107 
	}
}

110 
	$≥rsi°__chunk_˛õ¡_msg_ªad_v56
(
FILE
 *
db_Âå
, 
P_˛õ¡_msg
 *
chunk
, 
uöt32_t
 
Àngth
)

112 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

113 
mosquôto__∑ckë
 
¥›_∑ckë
;

114 
rc
;

116 
	`ªad_e
(
db_Âå
, &
chunk
->
F
, (
PF_˛õ¡_msg
));

117 
chunk
->
F
.
mid
 = 
	`¡ohs
(chunk->F.mid);

118 
chunk
->
F
.
id_Àn
 = 
	`¡ohs
(chunk->F.id_len);

120 
Àngth
 -(
uöt32_t
)((
PF_˛õ¡_msg
Ë+ 
chunk
->
F
.
id_Àn
);

122 
rc
 = 
	`≥rsi°__ªad_°rög_Àn
(
db_Âå
, &
chunk
->
˛õ¡_id
, chunk->
F
.
id_Àn
);

123 if(
rc
){

124  
rc
;

127 if(
Àngth
 > 0){

128 
	`mem£t
(&
¥›_∑ckë
, 0, (
mosquôto__∑ckë
));

129 
¥›_∑ckë
.
ªmaöög_Àngth
 = 
Àngth
;

130 
¥›_∑ckë
.
∑ylﬂd
 = 
	`mosquôto__mÆloc
(
Àngth
);

131 if(!
¥›_∑ckë
.
∑ylﬂd
){

132  
MOSQ_ERR_NOMEM
;

134 
	`ªad_e
(
db_Âå
, 
¥›_∑ckë
.
∑ylﬂd
, 
Àngth
);

135 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_PUBLISH
, &
¥›_∑ckë
, &
¥›îtõs
);

136 
	`mosquôto__‰ì
(
¥›_∑ckë
.
∑ylﬂd
);

137 if(
rc
){

138  
rc
;

141 
chunk
->
¥›îtõs
 =Öroperties;

143  
MOSQ_ERR_SUCCESS
;

144 
îr‹
:

145 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
	`°ªº‹
(
î∫o
));

147 
	}
}

150 
	$≥rsi°__chunk_msg_°‹e_ªad_v56
(
FILE
 *
db_Âå
, 
P_msg_°‹e
 *
chunk
, 
uöt32_t
 
Àngth
)

152 
rc
 = 0;

153 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

154 
mosquôto__∑ckë
 
¥›_∑ckë
;

156 
	`mem£t
(&
¥›_∑ckë
, 0, (
mosquôto__∑ckë
));

158 
	`ªad_e
(
db_Âå
, &
chunk
->
F
, (
PF_msg_°‹e
));

159 
chunk
->
F
.
∑ylﬂdÀn
 = 
	`¡ohl
(chunk->F.payloadlen);

160 if(
chunk
->
F
.
∑ylﬂdÀn
 > 
MQTT_MAX_PAYLOAD
){

161  
MOSQ_ERR_INVAL
;

163 
chunk
->
F
.
sour˚_mid
 = 
	`¡ohs
(chunk->F.source_mid);

164 
chunk
->
F
.
sour˚_id_Àn
 = 
	`¡ohs
(chunk->F.source_id_len);

165 
chunk
->
F
.
sour˚_u£∫ame_Àn
 = 
	`¡ohs
(chunk->F.source_username_len);

166 
chunk
->
F
.
t›ic_Àn
 = 
	`¡ohs
(chunk->F.topic_len);

167 
chunk
->
F
.
sour˚_p‹t
 = 
	`¡ohs
(chunk->F.source_port);

169 
Àngth
 -(
uöt32_t
)((
PF_msg_°‹e
Ë+ 
chunk
->
F
.
∑ylﬂdÀn
 + chunk->F.
sour˚_id_Àn
 + chunk->F.
sour˚_u£∫ame_Àn
 + chunk->F.
t›ic_Àn
);

171 if(
chunk
->
F
.
sour˚_id_Àn
){

172 
rc
 = 
	`≥rsi°__ªad_°rög_Àn
(
db_Âå
, &
chunk
->
sour˚
.
id
, chunk->
F
.
sour˚_id_Àn
);

173 if(
rc
){

174  
rc
;

177 if(
chunk
->
F
.
sour˚_u£∫ame_Àn
){

178 
rc
 = 
	`≥rsi°__ªad_°rög_Àn
(
db_Âå
, &
chunk
->
sour˚
.
u£∫ame
, chunk->
F
.
sour˚_u£∫ame_Àn
);

179 if(
rc
){

180 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
id
);

181 
chunk
->
sour˚
.
id
 = 
NULL
;

182  
rc
;

185 
rc
 = 
	`≥rsi°__ªad_°rög_Àn
(
db_Âå
, &
chunk
->
t›ic
, chunk->
F
.
t›ic_Àn
);

186 if(
rc
){

187 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
id
);

188 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
u£∫ame
);

189 
chunk
->
sour˚
.
id
 = 
NULL
;

190 
chunk
->
sour˚
.
u£∫ame
 = 
NULL
;

191  
rc
;

194 if(
chunk
->
F
.
∑ylﬂdÀn
 > 0){

195 
chunk
->
∑ylﬂd
 = 
	`mosquôto__mÆloc
(chunk->
F
.
∑ylﬂdÀn
+1);

196 if(
chunk
->
∑ylﬂd
 =
NULL
){

197 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
id
);

198 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
u£∫ame
);

199 
	`mosquôto__‰ì
(
chunk
->
t›ic
);

200 
chunk
->
sour˚
.
id
 = 
NULL
;

201 
chunk
->
sour˚
.
u£∫ame
 = 
NULL
;

202 
chunk
->
t›ic
 = 
NULL
;

203 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

204  
MOSQ_ERR_NOMEM
;

207 ((
uöt8_t
 *)
chunk
->
∑ylﬂd
)[chunk->
F
.
∑ylﬂdÀn
] = 0;

208 
	`ªad_e
(
db_Âå
, 
chunk
->
∑ylﬂd
, chunk->
F
.
∑ylﬂdÀn
);

211 if(
Àngth
 > 0){

212 
¥›_∑ckë
.
ªmaöög_Àngth
 = 
Àngth
;

213 
¥›_∑ckë
.
∑ylﬂd
 = 
	`mosquôto__mÆloc
(
Àngth
);

214 if(!
¥›_∑ckë
.
∑ylﬂd
){

215 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
id
);

216 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
u£∫ame
);

217 
	`mosquôto__‰ì
(
chunk
->
t›ic
);

218  
MOSQ_ERR_NOMEM
;

220 
	`ªad_e
(
db_Âå
, 
¥›_∑ckë
.
∑ylﬂd
, 
Àngth
);

221 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_PUBLISH
, &
¥›_∑ckë
, &
¥›îtõs
);

222 
	`mosquôto__‰ì
(
¥›_∑ckë
.
∑ylﬂd
);

223 if(
rc
){

224 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
id
);

225 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
u£∫ame
);

226 
	`mosquôto__‰ì
(
chunk
->
t›ic
);

227  
rc
;

230 
chunk
->
¥›îtõs
 =Öroperties;

232  
MOSQ_ERR_SUCCESS
;

233 
îr‹
:

234 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
	`°ªº‹
(
î∫o
));

235 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
id
);

236 
	`mosquôto__‰ì
(
chunk
->
sour˚
.
u£∫ame
);

237 
	`mosquôto__‰ì
(
chunk
->
t›ic
);

238 
	`mosquôto__‰ì
(
¥›_∑ckë
.
∑ylﬂd
);

240 
	}
}

243 
	$≥rsi°__chunk_ªèö_ªad_v56
(
FILE
 *
db_Âå
, 
P_ªèö
 *
chunk
)

245 if(
	`‰ód
(&
chunk
->
F
, (
P_ªèö
), 1, 
db_Âå
) != 1){

246 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
	`°ªº‹
(
î∫o
));

249  
MOSQ_ERR_SUCCESS
;

250 
	}
}

253 
	$≥rsi°__chunk_sub_ªad_v56
(
FILE
 *
db_Âå
, 
P_sub
 *
chunk
)

255 
rc
;

257 
	`ªad_e
(
db_Âå
, &
chunk
->
F
, (
PF_sub
));

258 
chunk
->
F
.
idítifõr
 = 
	`¡ohl
(chunk->F.identifier);

259 
chunk
->
F
.
id_Àn
 = 
	`¡ohs
(chunk->F.id_len);

260 
chunk
->
F
.
t›ic_Àn
 = 
	`¡ohs
(chunk->F.topic_len);

262 
rc
 = 
	`≥rsi°__ªad_°rög_Àn
(
db_Âå
, &
chunk
->
˛õ¡_id
, chunk->
F
.
id_Àn
);

263 if(
rc
){

264  
rc
;

266 
rc
 = 
	`≥rsi°__ªad_°rög_Àn
(
db_Âå
, &
chunk
->
t›ic
, chunk->
F
.
t›ic_Àn
);

267 if(
rc
){

268 
	`mosquôto__‰ì
(
chunk
->
˛õ¡_id
);

269 
chunk
->
˛õ¡_id
 = 
NULL
;

270  
rc
;

273  
MOSQ_ERR_SUCCESS
;

274 
îr‹
:

275 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
	`°ªº‹
(
î∫o
));

277 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/persist_write.c

19 
	~"c⁄fig.h
"

21 #ifde‡
WITH_PERSISTENCE


23 #i‚de‡
WIN32


24 
	~<¨∑/öë.h
>

26 
	~<as£π.h
>

27 
	~<î∫o.h
>

28 
	~<f˙é.h
>

29 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<sys/°©.h
>

32 
	~<time.h
>

34 
	~"mosquôto_brokî_öã∫Æ.h
"

35 
	~"mem‹y_mosq.h
"

36 
	~"≥rsi°.h
"

37 
	~"time_mosq.h
"

38 
	~"misc_mosq.h
"

39 
	~"utû_mosq.h
"

41 
	$≥rsi°__˛õ¡_mesßges_ßve
(
FILE
 *
db_Âå
, 
mosquôto
 *
c⁄ãxt
, 
mosquôto_˛õ¡_msg
 *
queue
)

43 
P_˛õ¡_msg
 
chunk
;

44 
mosquôto_˛õ¡_msg
 *
cmsg
;

45 
rc
;

47 
	`as£π
(
db_Âå
);

48 
	`as£π
(
c⁄ãxt
);

50 
	`mem£t
(&
chunk
, 0, (
P_˛õ¡_msg
));

52 
cmsg
 = 
queue
;

53 
cmsg
){

54 if(!
	`°∫cmp
(
cmsg
->
°‹e
->
t›ic
, "$SYS", 4)

55 && 
cmsg
->
°‹e
->
ªf_cou¡
 <= 1

56 && 
cmsg
->
°‹e
->
de°_id_cou¡
 == 0){

60 
cmsg
 = cmsg->
√xt
;

64 
chunk
.
F
.
°‹e_id
 = 
cmsg
->
°‹e
->
db_id
;

65 
chunk
.
F
.
mid
 = 
cmsg
->mid;

66 
chunk
.
F
.
id_Àn
 = (
uöt16_t
)
	`°æí
(
c⁄ãxt
->
id
);

67 
chunk
.
F
.
qos
 = 
cmsg
->qos;

68 
chunk
.
F
.
ªèö_dup
 = (
uöt8_t
)((
cmsg
->
ªèö
&0x0F)<<4 | (cmsg->
dup
&0x0F));

69 
chunk
.
F
.
dúe˘i⁄
 = (
uöt8_t
)
cmsg
->direction;

70 
chunk
.
F
.
°©e
 = (
uöt8_t
)
cmsg
->state;

71 
chunk
.
˛õ¡_id
 = 
c⁄ãxt
->
id
;

72 
chunk
.
¥›îtõs
 = 
cmsg
->properties;

74 
rc
 = 
	`≥rsi°__chunk_˛õ¡_msg_wrôe_v6
(
db_Âå
, &
chunk
);

75 if(
rc
){

76  
rc
;

79 
cmsg
 = cmsg->
√xt
;

82  
MOSQ_ERR_SUCCESS
;

83 
	}
}

86 
	$≥rsi°__mesßge_°‹e_ßve
(
FILE
 *
db_Âå
)

88 
P_msg_°‹e
 
chunk
;

89 
mosquôto_msg_°‹e
 *
°‹ed
;

90 
rc
;

92 
	`as£π
(
db_Âå
);

94 
	`mem£t
(&
chunk
, 0, (
P_msg_°‹e
));

96 
°‹ed
 = 
db
.
msg_°‹e
;

97 
°‹ed
){

98 if(
°‹ed
->
ªf_cou¡
 < 1 || st‹ed->
t›ic
 =
NULL
){

99 
°‹ed
 = st‹ed->
√xt
;

103 if(!
	`°∫cmp
(
°‹ed
->
t›ic
, "$SYS", 4)){

104 if(
°‹ed
->
ªf_cou¡
 <1 && st‹ed->
de°_id_cou¡
 == 0){

106 
°‹ed
 = st‹ed->
√xt
;

113 
chunk
.
F
.
ªèö
 = 0;

115 
chunk
.
F
.
ªèö
 = (
uöt8_t
)
°‹ed
->retain;

118 
chunk
.
F
.
°‹e_id
 = 
°‹ed
->
db_id
;

119 
chunk
.
F
.
expúy_time
 = 
°‹ed
->
mesßge_expúy_time
;

120 
chunk
.
F
.
∑ylﬂdÀn
 = 
°‹ed
->payloadlen;

121 
chunk
.
F
.
sour˚_mid
 = 
°‹ed
->source_mid;

122 if(
°‹ed
->
sour˚_id
){

123 
chunk
.
F
.
sour˚_id_Àn
 = (
uöt16_t
)
	`°æí
(
°‹ed
->
sour˚_id
);

124 
chunk
.
sour˚
.
id
 = 
°‹ed
->
sour˚_id
;

126 
chunk
.
F
.
sour˚_id_Àn
 = 0;

127 
chunk
.
sour˚
.
id
 = 
NULL
;

129 if(
°‹ed
->
sour˚_u£∫ame
){

130 
chunk
.
F
.
sour˚_u£∫ame_Àn
 = (
uöt16_t
)
	`°æí
(
°‹ed
->
sour˚_u£∫ame
);

131 
chunk
.
sour˚
.
u£∫ame
 = 
°‹ed
->
sour˚_u£∫ame
;

133 
chunk
.
F
.
sour˚_u£∫ame_Àn
 = 0;

134 
chunk
.
sour˚
.
u£∫ame
 = 
NULL
;

137 
chunk
.
F
.
t›ic_Àn
 = (
uöt16_t
)
	`°æí
(
°‹ed
->
t›ic
);

138 
chunk
.
t›ic
 = 
°‹ed
->topic;

140 if(
°‹ed
->
sour˚_li°íî
){

141 
chunk
.
F
.
sour˚_p‹t
 = 
°‹ed
->
sour˚_li°íî
->
p‹t
;

143 
chunk
.
F
.
sour˚_p‹t
 = 0;

145 
chunk
.
F
.
qos
 = 
°‹ed
->qos;

146 
chunk
.
∑ylﬂd
 = 
°‹ed
->payload;

147 
chunk
.
¥›îtõs
 = 
°‹ed
->properties;

149 
rc
 = 
	`≥rsi°__chunk_mesßge_°‹e_wrôe_v6
(
db_Âå
, &
chunk
);

150 if(
rc
){

151  
rc
;

153 
°‹ed
 = st‹ed->
√xt
;

156  
MOSQ_ERR_SUCCESS
;

157 
	}
}

159 
	$≥rsi°__˛õ¡_ßve
(
FILE
 *
db_Âå
)

161 
mosquôto
 *
c⁄ãxt
, *
˘xt_tmp
;

162 
P_˛õ¡
 
chunk
;

163 
rc
;

165 
	`as£π
(
db_Âå
);

167 
	`mem£t
(&
chunk
, 0, (
P_˛õ¡
));

169 
	`HASH_ITER
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
c⁄ãxt
, 
˘xt_tmp
){

170 if(
c⁄ãxt
 && (c⁄ãxt->
˛ón_°¨t
 =
Ál£


171 #ifde‡
WITH_BRIDGE


172 || (
c⁄ãxt
->
bridge
 && c⁄ãxt->bridge->
˛ón_°¨t_loˇl
 =
Ál£
)

175 
chunk
.
F
.
£ssi⁄_expúy_time
 = 
c⁄ãxt
->session_expiry_time;

176 if(
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 !0 && c⁄ãxt->£ssi⁄_expúy_öãrvÆ !
UINT32_MAX
 && c⁄ãxt->
£ssi⁄_expúy_time
 == 0){

177 
chunk
.
F
.
£ssi⁄_expúy_time
 = 
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 + 
db
.
now_ªÆ_s
;

179 
chunk
.
F
.
£ssi⁄_expúy_time
 = 
c⁄ãxt
->session_expiry_time;

181 
chunk
.
F
.
£ssi⁄_expúy_öãrvÆ
 = 
c⁄ãxt
->session_expiry_interval;

182 
chunk
.
F
.
œ°_mid
 = 
c⁄ãxt
->last_mid;

183 
chunk
.
F
.
id_Àn
 = (
uöt16_t
)
	`°æí
(
c⁄ãxt
->
id
);

184 
chunk
.
˛õ¡_id
 = 
c⁄ãxt
->
id
;

185 if(
c⁄ãxt
->
u£∫ame
){

186 
chunk
.
F
.
u£∫ame_Àn
 = (
uöt16_t
)
	`°æí
(
c⁄ãxt
->
u£∫ame
);

187 
chunk
.
u£∫ame
 = 
c⁄ãxt
->username;

189 if(
c⁄ãxt
->
li°íî
){

190 
chunk
.
F
.
li°íî_p‹t
 = 
c⁄ãxt
->
li°íî
->
p‹t
;

193 if(
chunk
.
F
.
id_Àn
 == 0){

199 
rc
 = 
	`≥rsi°__chunk_˛õ¡_wrôe_v6
(
db_Âå
, &
chunk
);

200 if(
rc
){

201  
rc
;

204 if(
	`≥rsi°__˛õ¡_mesßges_ßve
(
db_Âå
, 
c⁄ãxt
, c⁄ãxt->
msgs_ö
.
öÊight
))  1;

205 if(
	`≥rsi°__˛õ¡_mesßges_ßve
(
db_Âå
, 
c⁄ãxt
, c⁄ãxt->
msgs_ö
.
queued
))  1;

206 if(
	`≥rsi°__˛õ¡_mesßges_ßve
(
db_Âå
, 
c⁄ãxt
, c⁄ãxt->
msgs_out
.
öÊight
))  1;

207 if(
	`≥rsi°__˛õ¡_mesßges_ßve
(
db_Âå
, 
c⁄ãxt
, c⁄ãxt->
msgs_out
.
queued
))  1;

211  
MOSQ_ERR_SUCCESS
;

212 
	}
}

215 
	$≥rsi°__subs_ßve
(
FILE
 *
db_Âå
, 
mosquôto__subhõr
 *
node
, c⁄° *
t›ic
, 
Àvñ
)

217 
mosquôto__subhõr
 *
subhõr
, *
subhõr_tmp
;

218 
mosquôto__subÀaf
 *
sub
;

219 
P_sub
 
sub_chunk
;

220 *
thi°›ic
;

221 
size_t
 
¶í
;

222 
rc
;

224 
	`mem£t
(&
sub_chunk
, 0, (
P_sub
));

226 
¶í
 = 
	`°æí
(
t›ic
Ë+ 
node
->
t›ic_Àn
 + 2;

227 
thi°›ic
 = 
	`mosquôto__mÆloc
(()*
¶í
);

228 if(!
thi°›ic
Ë 
MOSQ_ERR_NOMEM
;

229 if(
Àvñ
 > 1 || 
	`°æí
(
t›ic
)){

230 
	`¢¥ötf
(
thi°›ic
, 
¶í
, "%s/%s", 
t›ic
, 
node
->topic);

232 
	`¢¥ötf
(
thi°›ic
, 
¶í
, "%s", 
node
->
t›ic
);

235 
sub
 = 
node
->
subs
;

236 
sub
){

237 if(
sub
->
c⁄ãxt
->
˛ón_°¨t
 =
Ál£
 && sub->c⁄ãxt->
id
){

238 
sub_chunk
.
F
.
idítifõr
 = 
sub
->identifier;

239 
sub_chunk
.
F
.
id_Àn
 = (
uöt16_t
)
	`°æí
(
sub
->
c⁄ãxt
->
id
);

240 
sub_chunk
.
F
.
t›ic_Àn
 = (
uöt16_t
)
	`°æí
(
thi°›ic
);

241 
sub_chunk
.
F
.
qos
 = (
uöt8_t
)
sub
->qos;

242 
sub_chunk
.
F
.
›ti⁄s
 = (
uöt8_t
)(
sub
->
no_loˇl
<<2 | sub->
ªèö_as_published
<<3);

243 
sub_chunk
.
˛õ¡_id
 = 
sub
->
c⁄ãxt
->
id
;

244 
sub_chunk
.
t›ic
 = 
thi°›ic
;

246 
rc
 = 
	`≥rsi°__chunk_sub_wrôe_v6
(
db_Âå
, &
sub_chunk
);

247 if(
rc
){

248 
	`mosquôto__‰ì
(
thi°›ic
);

249  
rc
;

252 
sub
 = sub->
√xt
;

255 
	`HASH_ITER
(
hh
, 
node
->
chûdªn
, 
subhõr
, 
subhõr_tmp
){

256 
	`≥rsi°__subs_ßve
(
db_Âå
, 
subhõr
, 
thi°›ic
, 
Àvñ
+1);

258 
	`mosquôto__‰ì
(
thi°›ic
);

259  
MOSQ_ERR_SUCCESS
;

260 
	}
}

262 
	$≥rsi°__subs_ßve_Æl
(
FILE
 *
db_Âå
)

264 
mosquôto__subhõr
 *
subhõr
, *
subhõr_tmp
;

266 
	`HASH_ITER
(
hh
, 
db
.
subs
, 
subhõr
, 
subhõr_tmp
){

267 if(
subhõr
->
chûdªn
){

268 
	`≥rsi°__subs_ßve
(
db_Âå
, 
subhõr
->
chûdªn
, "", 0);

272  
MOSQ_ERR_SUCCESS
;

273 
	}
}

275 
	$≥rsi°__ªèö_ßve
(
FILE
 *
db_Âå
, 
mosquôto__ªèöhõr
 *
node
, 
Àvñ
)

277 
mosquôto__ªèöhõr
 *
ªèöhõr
, *
ªèöhõr_tmp
;

278 
P_ªèö
 
ªèö_chunk
;

279 
rc
;

281 
	`mem£t
(&
ªèö_chunk
, 0, (
P_ªèö
));

283 if(
node
->
ªèöed
 && 
	`°∫cmp
“ode->ªèöed->
t›ic
, "$SYS", 4)){

285 
ªèö_chunk
.
F
.
°‹e_id
 = 
node
->
ªèöed
->
db_id
;

286 
rc
 = 
	`≥rsi°__chunk_ªèö_wrôe_v6
(
db_Âå
, &
ªèö_chunk
);

287 if(
rc
){

288  
rc
;

292 
	`HASH_ITER
(
hh
, 
node
->
chûdªn
, 
ªèöhõr
, 
ªèöhõr_tmp
){

293 
	`≥rsi°__ªèö_ßve
(
db_Âå
, 
ªèöhõr
, 
Àvñ
+1);

295  
MOSQ_ERR_SUCCESS
;

296 
	}
}

298 
	$≥rsi°__ªèö_ßve_Æl
(
FILE
 *
db_Âå
)

300 
mosquôto__ªèöhõr
 *
ªèöhõr
, *
ªèöhõr_tmp
;

302 
	`HASH_ITER
(
hh
, 
db
.
ªèös
, 
ªèöhõr
, 
ªèöhõr_tmp
){

303 if(
ªèöhõr
->
chûdªn
){

304 
	`≥rsi°__ªèö_ßve
(
db_Âå
, 
ªèöhõr
->
chûdªn
, 0);

308  
MOSQ_ERR_SUCCESS
;

309 
	}
}

311 
	$≥rsi°__backup
(
boﬁ
 
shutdown
)

313 
rc
 = 0;

314 
FILE
 *
db_Âå
 = 
NULL
;

315 
uöt32_t
 
db_vîsi⁄_w
 = 
	`ht⁄l
(
MOSQ_DB_VERSION
);

316 
uöt32_t
 
¸c
 = 0;

317 *
îr
;

318 *
outfûe
 = 
NULL
;

319 
size_t
 
Àn
;

320 
PF_cfg
 
cfg_chunk
;

322 if(
db
.
c⁄fig
 =
NULL
Ë 
MOSQ_ERR_INVAL
;

323 if(
db
.
c⁄fig
->
≥rsi°í˚
 =
Ál£
Ë 
MOSQ_ERR_SUCCESS
;

324 if(
db
.
c⁄fig
->
≥rsi°í˚_fûï©h
 =
NULL
Ë 
MOSQ_ERR_INVAL
;

326 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "Savög in-mem‹y d©aba£Åÿ%s.", 
db
.
c⁄fig
->
≥rsi°í˚_fûï©h
);

328 
Àn
 = 
	`°æí
(
db
.
c⁄fig
->
≥rsi°í˚_fûï©h
)+5;

329 
outfûe
 = 
	`mosquôto__mÆloc
(
Àn
+1);

330 if(!
outfûe
){

331 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "Error saving in-memory database, out of memory.");

332  
MOSQ_ERR_NOMEM
;

334 
	`¢¥ötf
(
outfûe
, 
Àn
, "%s.√w", 
db
.
c⁄fig
->
≥rsi°í˚_fûï©h
);

335 
outfûe
[
Àn
] = '\0';

337 #i‚de‡
WIN32


357 
rc
 = 
	`u∆ök
(
outfûe
);

358 i‡(
rc
 != 0) {

359 
rc
 = 0;

360 i‡(
î∫o
 !
ENOENT
) {

361 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "Eº‹ savög in-mem‹y d©aba£, u«bÀÅÿªmovê%s.", 
outfûe
);

362 
îr‹
;

367 
db_Âå
 = 
	`mosquôto__f›í
(
outfûe
, "wb", 
åue
);

368 if(
db_Âå
 =
NULL
){

369 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "Eº‹ savög in-mem‹y d©aba£, u«bÀÅÿ›í %†f‹ wrôög.", 
outfûe
);

370 
îr‹
;

374 
	`wrôe_e
(
db_Âå
, 
magic
, 15);

375 
	`wrôe_e
(
db_Âå
, &
¸c
, (
uöt32_t
));

376 
	`wrôe_e
(
db_Âå
, &
db_vîsi⁄_w
, (
uöt32_t
));

378 
	`mem£t
(&
cfg_chunk
, 0, (
PF_cfg
));

379 
cfg_chunk
.
œ°_db_id
 = 
db
.last_db_id;

380 
cfg_chunk
.
shutdown
 = shutdown;

381 
cfg_chunk
.
dbid_size
 = (
dbid_t
);

382 if(
	`≥rsi°__chunk_cfg_wrôe_v6
(
db_Âå
, &
cfg_chunk
)){

383 
îr‹
;

386 if(
	`≥rsi°__mesßge_°‹e_ßve
(
db_Âå
)){

387 
îr‹
;

390 
	`≥rsi°__˛õ¡_ßve
(
db_Âå
);

391 
	`≥rsi°__subs_ßve_Æl
(
db_Âå
);

392 
	`≥rsi°__ªèö_ßve_Æl
(
db_Âå
);

394 #i‚de‡
WIN32


417 
	`fÊush
(
db_Âå
);

418 
	`fsync
(
	`fûío
(
db_Âå
));

420 
	`f˛o£
(
db_Âå
);

422 #ifde‡
WIN32


423 if(
	`ªmove
(
db
.
c⁄fig
->
≥rsi°í˚_fûï©h
) != 0){

424 if(
î∫o
 !
ENOENT
){

425 
îr‹
;

429 if(
	`ª«me
(
outfûe
, 
db
.
c⁄fig
->
≥rsi°í˚_fûï©h
) != 0){

430 
îr‹
;

432 
	`mosquôto__‰ì
(
outfûe
);

433 
outfûe
 = 
NULL
;

434  
rc
;

435 
îr‹
:

436 
	`mosquôto__‰ì
(
outfûe
);

437 
îr
 = 
	`°ªº‹
(
î∫o
);

438 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
îr
);

439 if(
db_Âå
Ë
	`f˛o£
(db_fptr);

441 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/persist_write_v5.c

19 
	~"c⁄fig.h
"

21 #ifde‡
WITH_PERSISTENCE


23 #i‚de‡
WIN32


24 
	~<¨∑/öë.h
>

26 
	~<as£π.h
>

27 
	~<î∫o.h
>

28 
	~<f˙é.h
>

29 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<sys/°©.h
>

32 
	~<time.h
>

34 
	~"mosquôto_brokî_öã∫Æ.h
"

35 
	~"mem‹y_mosq.h
"

36 
	~"≥rsi°.h
"

37 
	~"∑ckë_mosq.h
"

38 
	~"¥›îty_mosq.h
"

39 
	~"time_mosq.h
"

40 
	~"utû_mosq.h
"

42 
	$≥rsi°__chunk_cfg_wrôe_v6
(
FILE
 *
db_Âå
, 
PF_cfg
 *
chunk
)

44 
PF_hódî
 
hódî
;

46 
hódî
.
chunk
 = 
	`ht⁄l
(
DB_CHUNK_CFG
);

47 
hódî
.
Àngth
 = 
	`ht⁄l
((
PF_cfg
));

48 
	`wrôe_e
(
db_Âå
, &
hódî
, (
PF_hódî
));

49 
	`wrôe_e
(
db_Âå
, 
chunk
, (
PF_cfg
));

51  
MOSQ_ERR_SUCCESS
;

52 
îr‹
:

53 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
	`°ªº‹
(
î∫o
));

55 
	}
}

58 
	$≥rsi°__chunk_˛õ¡_wrôe_v6
(
FILE
 *
db_Âå
, 
P_˛õ¡
 *
chunk
)

60 
PF_hódî
 
hódî
;

61 
uöt16_t
 
id_Àn
 = 
chunk
->
F
.id_len;

62 
uöt16_t
 
u£∫ame_Àn
 = 
chunk
->
F
.username_len;

64 
chunk
->
F
.
£ssi⁄_expúy_öãrvÆ
 = 
	`ht⁄l
(chunk->F.session_expiry_interval);

65 
chunk
->
F
.
œ°_mid
 = 
	`ht⁄s
(chunk->F.last_mid);

66 
chunk
->
F
.
id_Àn
 = 
	`ht⁄s
(chunk->F.id_len);

67 
chunk
->
F
.
u£∫ame_Àn
 = 
	`ht⁄s
(chunk->F.username_len);

68 
chunk
->
F
.
li°íî_p‹t
 = 
	`ht⁄s
(chunk->F.listener_port);

70 
hódî
.
chunk
 = 
	`ht⁄l
(
DB_CHUNK_CLIENT
);

71 
hódî
.
Àngth
 = 
	`ht⁄l
((
uöt32_t
)(
PF_˛õ¡
)+
id_Àn
+
u£∫ame_Àn
);

73 
	`wrôe_e
(
db_Âå
, &
hódî
, (
PF_hódî
));

74 
	`wrôe_e
(
db_Âå
, &
chunk
->
F
, (
PF_˛õ¡
));

76 
	`wrôe_e
(
db_Âå
, 
chunk
->
˛õ¡_id
, 
id_Àn
);

77 if(
u£∫ame_Àn
 > 0){

78 
	`wrôe_e
(
db_Âå
, 
chunk
->
u£∫ame
, 
u£∫ame_Àn
);

81  
MOSQ_ERR_SUCCESS
;

82 
îr‹
:

83 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
	`°ªº‹
(
î∫o
));

85 
	}
}

88 
	$≥rsi°__chunk_˛õ¡_msg_wrôe_v6
(
FILE
 *
db_Âå
, 
P_˛õ¡_msg
 *
chunk
)

90 
PF_hódî
 
hódî
;

91 
mosquôto__∑ckë
 
¥›_∑ckë
;

92 
uöt16_t
 
id_Àn
 = 
chunk
->
F
.id_len;

93 
uöt32_t
 
¥›Àn
 = 0;

94 
rc
;

96 
	`mem£t
(&
¥›_∑ckë
, 0, (
mosquôto__∑ckë
));

97 if(
chunk
->
¥›îtõs
){

98 
¥›Àn
 +
	`¥›îty__gë_ªmaöög_Àngth
(
chunk
->
¥›îtõs
);

101 
chunk
->
F
.
mid
 = 
	`ht⁄s
(chunk->F.mid);

102 
chunk
->
F
.
id_Àn
 = 
	`ht⁄s
(chunk->F.id_len);

104 
hódî
.
chunk
 = 
	`ht⁄l
(
DB_CHUNK_CLIENT_MSG
);

105 
hódî
.
Àngth
 = 
	`ht⁄l
((
uöt32_t
)(
PF_˛õ¡_msg
Ë+ 
id_Àn
 + 
¥›Àn
);

107 
	`wrôe_e
(
db_Âå
, &
hódî
, (
PF_hódî
));

108 
	`wrôe_e
(
db_Âå
, &
chunk
->
F
, (
PF_˛õ¡_msg
));

109 
	`wrôe_e
(
db_Âå
, 
chunk
->
˛õ¡_id
, 
id_Àn
);

110 if(
chunk
->
¥›îtõs
){

111 if(
¥›Àn
 > 0){

112 
¥›_∑ckë
.
ªmaöög_Àngth
 = 
¥›Àn
;

113 
¥›_∑ckë
.
∑ckë_Àngth
 = 
¥›Àn
;

114 
¥›_∑ckë
.
∑ylﬂd
 = 
	`mosquôto__mÆloc
(
¥›Àn
);

115 if(!
¥›_∑ckë
.
∑ylﬂd
){

116  
MOSQ_ERR_NOMEM
;

118 
rc
 = 
	`¥›îty__wrôe_Æl
(&
¥›_∑ckë
, 
chunk
->
¥›îtõs
, 
åue
);

119 if(
rc
){

120 
	`mosquôto__‰ì
(
¥›_∑ckë
.
∑ylﬂd
);

121  
rc
;

124 
	`wrôe_e
(
db_Âå
, 
¥›_∑ckë
.
∑ylﬂd
, 
¥›Àn
);

125 
	`mosquôto__‰ì
(
¥›_∑ckë
.
∑ylﬂd
);

129  
MOSQ_ERR_SUCCESS
;

130 
îr‹
:

131 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
	`°ªº‹
(
î∫o
));

133 
	}
}

136 
	$≥rsi°__chunk_mesßge_°‹e_wrôe_v6
(
FILE
 *
db_Âå
, 
P_msg_°‹e
 *
chunk
)

138 
PF_hódî
 
hódî
;

139 
uöt32_t
 
∑ylﬂdÀn
 = 
chunk
->
F
.payloadlen;

140 
uöt16_t
 
sour˚_id_Àn
 = 
chunk
->
F
.source_id_len;

141 
uöt16_t
 
sour˚_u£∫ame_Àn
 = 
chunk
->
F
.source_username_len;

142 
uöt16_t
 
t›ic_Àn
 = 
chunk
->
F
.topic_len;

143 
uöt32_t
 
¥›Àn
 = 0;

144 
mosquôto__∑ckë
 
¥›_∑ckë
;

145 
rc
;

147 
	`mem£t
(&
¥›_∑ckë
, 0, (
mosquôto__∑ckë
));

148 if(
chunk
->
¥›îtõs
){

149 
¥›Àn
 +
	`¥›îty__gë_ªmaöög_Àngth
(
chunk
->
¥›îtõs
);

152 
chunk
->
F
.
∑ylﬂdÀn
 = 
	`ht⁄l
(chunk->F.payloadlen);

153 
chunk
->
F
.
sour˚_mid
 = 
	`ht⁄s
(chunk->F.source_mid);

154 
chunk
->
F
.
sour˚_id_Àn
 = 
	`ht⁄s
(chunk->F.source_id_len);

155 
chunk
->
F
.
sour˚_u£∫ame_Àn
 = 
	`ht⁄s
(chunk->F.source_username_len);

156 
chunk
->
F
.
t›ic_Àn
 = 
	`ht⁄s
(chunk->F.topic_len);

157 
chunk
->
F
.
sour˚_p‹t
 = 
	`ht⁄s
(chunk->F.source_port);

159 
hódî
.
chunk
 = 
	`ht⁄l
(
DB_CHUNK_MSG_STORE
);

160 
hódî
.
Àngth
 = 
	`ht⁄l
((
uöt32_t
)(
PF_msg_°‹e
) +

161 
t›ic_Àn
 + 
∑ylﬂdÀn
 +

162 
sour˚_id_Àn
 + 
sour˚_u£∫ame_Àn
 + 
¥›Àn
);

164 
	`wrôe_e
(
db_Âå
, &
hódî
, (
PF_hódî
));

165 
	`wrôe_e
(
db_Âå
, &
chunk
->
F
, (
PF_msg_°‹e
));

166 if(
sour˚_id_Àn
){

167 
	`wrôe_e
(
db_Âå
, 
chunk
->
sour˚
.
id
, 
sour˚_id_Àn
);

169 if(
sour˚_u£∫ame_Àn
){

170 
	`wrôe_e
(
db_Âå
, 
chunk
->
sour˚
.
u£∫ame
, 
sour˚_u£∫ame_Àn
);

172 
	`wrôe_e
(
db_Âå
, 
chunk
->
t›ic
, 
t›ic_Àn
);

173 if(
∑ylﬂdÀn
){

174 
	`wrôe_e
(
db_Âå
, 
chunk
->
∑ylﬂd
, ()
∑ylﬂdÀn
);

176 if(
chunk
->
¥›îtõs
){

177 if(
¥›Àn
 > 0){

178 
¥›_∑ckë
.
ªmaöög_Àngth
 = 
¥›Àn
;

179 
¥›_∑ckë
.
∑ckë_Àngth
 = 
¥›Àn
;

180 
¥›_∑ckë
.
∑ylﬂd
 = 
	`mosquôto__mÆloc
(
¥›Àn
);

181 if(!
¥›_∑ckë
.
∑ylﬂd
){

182  
MOSQ_ERR_NOMEM
;

184 
rc
 = 
	`¥›îty__wrôe_Æl
(&
¥›_∑ckë
, 
chunk
->
¥›îtõs
, 
åue
);

185 if(
rc
){

186 
	`mosquôto__‰ì
(
¥›_∑ckë
.
∑ylﬂd
);

187  
rc
;

190 
	`wrôe_e
(
db_Âå
, 
¥›_∑ckë
.
∑ylﬂd
, 
¥›Àn
);

191 
	`mosquôto__‰ì
(
¥›_∑ckë
.
∑ylﬂd
);

195  
MOSQ_ERR_SUCCESS
;

196 
îr‹
:

197 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
	`°ªº‹
(
î∫o
));

198 
	`mosquôto__‰ì
(
¥›_∑ckë
.
∑ylﬂd
);

200 
	}
}

203 
	$≥rsi°__chunk_ªèö_wrôe_v6
(
FILE
 *
db_Âå
, 
P_ªèö
 *
chunk
)

205 
PF_hódî
 
hódî
;

207 
hódî
.
chunk
 = 
	`ht⁄l
(
DB_CHUNK_RETAIN
);

208 
hódî
.
Àngth
 = 
	`ht⁄l
((
uöt32_t
)(
PF_ªèö
));

210 
	`wrôe_e
(
db_Âå
, &
hódî
, (
PF_hódî
));

211 
	`wrôe_e
(
db_Âå
, &
chunk
->
F
, (
PF_ªèö
));

213  
MOSQ_ERR_SUCCESS
;

214 
îr‹
:

215 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
	`°ªº‹
(
î∫o
));

217 
	}
}

220 
	$≥rsi°__chunk_sub_wrôe_v6
(
FILE
 *
db_Âå
, 
P_sub
 *
chunk
)

222 
PF_hódî
 
hódî
;

223 
uöt16_t
 
id_Àn
 = 
chunk
->
F
.id_len;

224 
uöt16_t
 
t›ic_Àn
 = 
chunk
->
F
.topic_len;

226 
chunk
->
F
.
idítifõr
 = 
	`ht⁄l
(chunk->F.identifier);

227 
chunk
->
F
.
id_Àn
 = 
	`ht⁄s
(chunk->F.id_len);

228 
chunk
->
F
.
t›ic_Àn
 = 
	`ht⁄s
(chunk->F.topic_len);

230 
hódî
.
chunk
 = 
	`ht⁄l
(
DB_CHUNK_SUB
);

231 
hódî
.
Àngth
 = 
	`ht⁄l
((
uöt32_t
)(
PF_sub
) +

232 
id_Àn
 + 
t›ic_Àn
);

234 
	`wrôe_e
(
db_Âå
, &
hódî
, (
PF_hódî
));

235 
	`wrôe_e
(
db_Âå
, &
chunk
->
F
, (
PF_sub
));

236 
	`wrôe_e
(
db_Âå
, 
chunk
->
˛õ¡_id
, 
id_Àn
);

237 
	`wrôe_e
(
db_Âå
, 
chunk
->
t›ic
, 
t›ic_Àn
);

239  
MOSQ_ERR_SUCCESS
;

240 
îr‹
:

241 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: %s.", 
	`°ªº‹
(
î∫o
));

243 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/plugin.c

19 
	~"c⁄fig.h
"

21 
	~"mosquôto_brokî_öã∫Æ.h
"

22 
	~"mosquôto_öã∫Æ.h
"

23 
	~"mosquôto_brokî.h
"

24 
	~"mem‹y_mosq.h
"

25 
	~"mqâ_¥Ÿocﬁ.h
"

26 
	~"£nd_mosq.h
"

27 
	~"utû_mosq.h
"

28 
	~"uéi°.h
"

29 
	~"lib_lﬂd.h
"

32 
boﬁ
 
	$check_ˇŒback_exi°s
(
mosquôto__ˇŒback
 *
cb_ba£
, 
MOSQ_FUNC_gíîic_ˇŒback
 
cb_func
)

34 
mosquôto__ˇŒback
 *
èû
, *
tmp
;

36 
	`DL_FOREACH_SAFE
(
cb_ba£
, 
èû
, 
tmp
){

37 if(
èû
->
cb
 =
cb_func
){

38  
åue
;

41  
Ál£
;

42 
	}
}

45 
	$ªmove_ˇŒback
(
mosquôto__ˇŒback
 **
cb_ba£
, 
MOSQ_FUNC_gíîic_ˇŒback
 
cb_func
)

47 
mosquôto__ˇŒback
 *
èû
, *
tmp
;

49 
	`DL_FOREACH_SAFE
(*
cb_ba£
, 
èû
, 
tmp
){

50 if(
èû
->
cb
 =
cb_func
){

51 
	`DL_DELETE
(*
cb_ba£
, 
èû
);

52 
	`mosquôto__‰ì
(
èû
);

53  
MOSQ_ERR_SUCCESS
;

56  
MOSQ_ERR_NOT_FOUND
;

57 
	}
}

60 
	$∂ugö__lﬂd_v5
(
mosquôto__li°íî
 *
li°íî
, 
mosquôto__auth_∂ugö
 *
∂ugö
, 
mosquôto_›t
 *
›ti⁄s
, 
›ti⁄_cou¡
, *
lib
)

62 
rc
;

63 
mosquôto_∂ugö_id_t
 *
pid
;

65 if(!(
∂ugö
->
∂ugö_öô_v5
 = (
FUNC_∂ugö_öô_v5
)
	`LIB_SYM
(
lib
, "mosquitto_plugin_init"))){

66 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

68 
	`LIB_ERROR
();

69 
	`LIB_CLOSE
(
lib
);

70  
MOSQ_ERR_UNKNOWN
;

72 if(!(
∂ugö
->
∂ugö_˛ónup_v5
 = (
FUNC_∂ugö_˛ónup_v5
)
	`LIB_SYM
(
lib
, "mosquitto_plugin_cleanup"))){

73 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

75 
	`LIB_ERROR
();

76 
	`LIB_CLOSE
(
lib
);

77  
MOSQ_ERR_UNKNOWN
;

80 
pid
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_∂ugö_id_t
));

81 if(
pid
 =
NULL
){

82 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

84 
	`LIB_CLOSE
(
lib
);

85  
MOSQ_ERR_NOMEM
;

87 
pid
->
li°íî
 =Üistener;

89 
∂ugö
->
lib
 =Üib;

90 
∂ugö
->
u£r_d©a
 = 
NULL
;

91 
∂ugö
->
idítifõr
 = 
pid
;

93 if(
∂ugö
->
∂ugö_öô_v5
){

94 
rc
 = 
∂ugö
->
	`∂ugö_öô_v5
(
pid
, &∂ugö->
u£r_d©a
, 
›ti⁄s
, 
›ti⁄_cou¡
);

95 if(
rc
){

96 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

97 "Eº‹: PlugöÑëu∫ed %d whí inôülisög.", 
rc
);

98  
rc
;

103 
	}
}

106 
	$∂ugö__h™dÀ_disc⁄√˘
(
mosquôto
 *
c⁄ãxt
, 
ªas⁄
)

108 
mosquôto_evt_disc⁄√˘
 
evít_d©a
;

109 
mosquôto__ˇŒback
 *
cb_ba£
;

110 
mosquôto__£curôy_›ti⁄s
 *
›ts
;

112 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

113 if(
c⁄ãxt
->
li°íî
 =
NULL
){

116 
›ts
 = &
c⁄ãxt
->
li°íî
->
£curôy_›ti⁄s
;

118 
›ts
 = &
db
.
c⁄fig
->
£curôy_›ti⁄s
;

119 
	`mem£t
(&
evít_d©a
, 0, (event_data));

122 
evít_d©a
.
˛õ¡
 = 
c⁄ãxt
;

123 
evít_d©a
.
ªas⁄
 =Ñeason;

124 
	`DL_FOREACH
(
›ts
->
∂ugö_ˇŒbacks
.
disc⁄√˘
, 
cb_ba£
){

125 
cb_ba£
->
	`cb
(
MOSQ_EVT_DISCONNECT
, &
evít_d©a
, cb_ba£->
u£rd©a
);

127 
	}
}

130 
	$∂ugö__h™dÀ_mesßge
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_msg_°‹e
 *
°‹ed
)

132 
mosquôto_evt_mesßge
 
evít_d©a
;

133 
mosquôto__ˇŒback
 *
cb_ba£
;

134 
mosquôto__£curôy_›ti⁄s
 *
›ts
;

135 
rc
 = 
MOSQ_ERR_SUCCESS
;

137 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

138 if(
c⁄ãxt
->
li°íî
 =
NULL
){

139  
MOSQ_ERR_SUCCESS
;

141 
›ts
 = &
c⁄ãxt
->
li°íî
->
£curôy_›ti⁄s
;

143 
›ts
 = &
db
.
c⁄fig
->
£curôy_›ti⁄s
;

145 if(
›ts
->
∂ugö_ˇŒbacks
.
mesßge
 =
NULL
){

146  
MOSQ_ERR_SUCCESS
;

148 
	`mem£t
(&
evít_d©a
, 0, (event_data));

150 
evít_d©a
.
˛õ¡
 = 
c⁄ãxt
;

151 
evít_d©a
.
t›ic
 = 
°‹ed
->topic;

152 
evít_d©a
.
∑ylﬂdÀn
 = 
°‹ed
->payloadlen;

153 
evít_d©a
.
∑ylﬂd
 = 
°‹ed
->payload;

154 
evít_d©a
.
qos
 = 
°‹ed
->qos;

155 
evít_d©a
.
ªèö
 = 
°‹ed
->retain;

156 
evít_d©a
.
¥›îtõs
 = 
°‹ed
->properties;

158 
	`DL_FOREACH
(
›ts
->
∂ugö_ˇŒbacks
.
mesßge
, 
cb_ba£
){

159 
rc
 = 
cb_ba£
->
	`cb
(
MOSQ_EVT_MESSAGE
, &
evít_d©a
, cb_ba£->
u£rd©a
);

161 if(
°‹ed
->
t›ic
 !
evít_d©a
.topic){

162 
	`mosquôto__‰ì
(
°‹ed
->
t›ic
);

163 
°‹ed
->
t›ic
 = 
evít_d©a
.topic;

166 if(
°‹ed
->
∑ylﬂd
 !
evít_d©a
.payload){

167 
	`mosquôto__‰ì
(
°‹ed
->
∑ylﬂd
);

168 
°‹ed
->
∑ylﬂd
 = 
evít_d©a
.payload;

169 
°‹ed
->
∑ylﬂdÀn
 = 
evít_d©a
.payloadlen;

172 if(
°‹ed
->
¥›îtõs
 !
evít_d©a
.properties){

173 
	`mosquôto_¥›îty_‰ì_Æl
(&
°‹ed
->
¥›îtõs
);

174 
°‹ed
->
¥›îtõs
 = 
evít_d©a
.properties;

177 if(
rc
 !
MOSQ_ERR_SUCCESS
){

182 
°‹ed
->
ªèö
 = 
evít_d©a
.retain;

184  
rc
;

185 
	}
}

188 
	$∂ugö__h™dÀ_tick
()

190 
mosquôto_evt_tick
 
evít_d©a
;

191 
mosquôto__ˇŒback
 *
cb_ba£
;

192 
mosquôto__£curôy_›ti⁄s
 *
›ts
;

193 
i
;

196 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

197 
i
=0; i < 
db
.
c⁄fig
->
li°íî_cou¡
; i++){

198 
›ts
 = &
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
;

199 
	`mem£t
(&
evít_d©a
, 0, (event_data));

201 
	`DL_FOREACH
(
›ts
->
∂ugö_ˇŒbacks
.
tick
, 
cb_ba£
){

202 
cb_ba£
->
	`cb
(
MOSQ_EVT_TICK
, &
evít_d©a
, cb_ba£->
u£rd©a
);

206 
›ts
 = &
db
.
c⁄fig
->
£curôy_›ti⁄s
;

207 
	`mem£t
(&
evít_d©a
, 0, (event_data));

209 
	`DL_FOREACH
(
›ts
->
∂ugö_ˇŒbacks
.
tick
, 
cb_ba£
){

210 
cb_ba£
->
	`cb
(
MOSQ_EVT_TICK
, &
evít_d©a
, cb_ba£->
u£rd©a
);

213 
	}
}

216 
	$mosquôto_ˇŒback_ªgi°î
(

217 
mosquôto_∂ugö_id_t
 *
idítifõr
,

218 
evít
,

219 
MOSQ_FUNC_gíîic_ˇŒback
 
cb_func
,

220 c⁄° *
evít_d©a
,

221 *
u£rd©a
)

223 
mosquôto__ˇŒback
 **
cb_ba£
 = 
NULL
, *
cb_√w
;

224 
mosquôto__£curôy_›ti⁄s
 *
£curôy_›ti⁄s
;

226 if(
cb_func
 =
NULL
Ë 
MOSQ_ERR_INVAL
;

228 if(
idítifõr
->
li°íî
 =
NULL
){

229 
£curôy_›ti⁄s
 = &
db
.
c⁄fig
->security_options;

231 
£curôy_›ti⁄s
 = &
idítifõr
->
li°íî
->security_options;

234 
evít
){

235 
MOSQ_EVT_RELOAD
:

236 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
ªlﬂd
;

238 
MOSQ_EVT_ACL_CHECK
:

239 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
a˛_check
;

241 
MOSQ_EVT_BASIC_AUTH
:

242 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
basic_auth
;

244 
MOSQ_EVT_PSK_KEY
:

245 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
psk_key
;

247 
MOSQ_EVT_EXT_AUTH_START
:

248 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
ext_auth_°¨t
;

250 
MOSQ_EVT_EXT_AUTH_CONTINUE
:

251 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
ext_auth_c⁄töue
;

253 
MOSQ_EVT_CONTROL
:

254  
	`c⁄åﬁ__ªgi°î_ˇŒback
(
£curôy_›ti⁄s
, 
cb_func
, 
evít_d©a
, 
u£rd©a
);

256 
MOSQ_EVT_MESSAGE
:

257 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
mesßge
;

259 
MOSQ_EVT_TICK
:

260 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
tick
;

262 
MOSQ_EVT_DISCONNECT
:

263 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
disc⁄√˘
;

266  
MOSQ_ERR_NOT_SUPPORTED
;

270 if(
	`check_ˇŒback_exi°s
(*
cb_ba£
, 
cb_func
)){

271  
MOSQ_ERR_ALREADY_EXISTS
;

274 
cb_√w
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__ˇŒback
));

275 if(
cb_√w
 =
NULL
){

276  
MOSQ_ERR_NOMEM
;

278 
	`DL_APPEND
(*
cb_ba£
, 
cb_√w
);

279 
cb_√w
->
cb
 = 
cb_func
;

280 
cb_√w
->
u£rd©a
 = userdata;

282  
MOSQ_ERR_SUCCESS
;

283 
	}
}

286 
	$mosquôto_ˇŒback_uƒegi°î
(

287 
mosquôto_∂ugö_id_t
 *
idítifõr
,

288 
evít
,

289 
MOSQ_FUNC_gíîic_ˇŒback
 
cb_func
,

290 c⁄° *
evít_d©a
)

292 
mosquôto__ˇŒback
 **
cb_ba£
 = 
NULL
;

293 
mosquôto__£curôy_›ti⁄s
 *
£curôy_›ti⁄s
;

295 if(
idítifõr
 =
NULL
 || 
cb_func
 == NULL){

296  
MOSQ_ERR_INVAL
;

299 if(
idítifõr
->
li°íî
 =
NULL
){

300 
£curôy_›ti⁄s
 = &
db
.
c⁄fig
->security_options;

302 
£curôy_›ti⁄s
 = &
idítifõr
->
li°íî
->security_options;

304 
evít
){

305 
MOSQ_EVT_RELOAD
:

306 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
ªlﬂd
;

308 
MOSQ_EVT_ACL_CHECK
:

309 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
a˛_check
;

311 
MOSQ_EVT_BASIC_AUTH
:

312 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
basic_auth
;

314 
MOSQ_EVT_PSK_KEY
:

315 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
psk_key
;

317 
MOSQ_EVT_EXT_AUTH_START
:

318 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
ext_auth_°¨t
;

320 
MOSQ_EVT_EXT_AUTH_CONTINUE
:

321 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
ext_auth_c⁄töue
;

323 
MOSQ_EVT_CONTROL
:

324  
	`c⁄åﬁ__uƒegi°î_ˇŒback
(
£curôy_›ti⁄s
, 
cb_func
, 
evít_d©a
);

326 
MOSQ_EVT_MESSAGE
:

327 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
mesßge
;

329 
MOSQ_EVT_TICK
:

330 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
tick
;

332 
MOSQ_EVT_DISCONNECT
:

333 
cb_ba£
 = &
£curôy_›ti⁄s
->
∂ugö_ˇŒbacks
.
disc⁄√˘
;

336  
MOSQ_ERR_NOT_SUPPORTED
;

340  
	`ªmove_ˇŒback
(
cb_ba£
, 
cb_func
);

341 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/plugin_debug.c

22 
	~<°dio.h
>

24 
	~"mosquôto_brokî.h
"

25 
	~"mosquôto_∂ugö.h
"

26 
	~"mosquôto.h
"

28 
	#ANSI_GREEN
 "\e[0;32m"

	)

29 
	#ANSI_BLUE
 "\e[0;34m"

	)

30 
	#ANSI_MAGENTA
 "\e[0;35m"

	)

31 
	#ANSI_RESET
 "\e[0m"

	)

33 
	$¥öt_cﬁ
(
mosquôto
 *
˛õ¡
)

35 
	`mosquôto_˛õ¡_¥Ÿocﬁ
(
˛õ¡
)){

36 
mp_mqâ
:

37 
	`¥ötf
("%s", 
ANSI_GREEN
);

39 
mp_websockës
:

40 
	`¥ötf
("%s", 
ANSI_MAGENTA
);

45 
	}
}

47 
	$mosquôto_auth_∂ugö_vîsi⁄
()

49 
	`¥ötf
(
ANSI_BLUE
 "PLUGIN ::: mosquôto_auth_∂ugö_vîsi⁄()" 
ANSI_RESET
 "\n");

51 
	}
}

53 
	$mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

55 
	`¥ötf
(
ANSI_BLUE
 "PLUGIN ::: mosquôto_auth_∂ugö_öô(,,%d)" 
ANSI_RESET
 "\n", 
auth_›t_cou¡
);

56  
MOSQ_ERR_SUCCESS
;

57 
	}
}

59 
	$mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

61 
	`¥ötf
(
ANSI_BLUE
 "PLUGIN ::: mosquôto_auth_∂ugö_˛ónup(,,%d)" 
ANSI_RESET
 "\n", 
auth_›t_cou¡
);

62  
MOSQ_ERR_SUCCESS
;

63 
	}
}

65 
	$mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

67 
	`¥ötf
(
ANSI_BLUE
 "PLUGIN ::: mosquôto_auth_£curôy_öô(,,%d, %d)" 
ANSI_RESET
 "\n", 
auth_›t_cou¡
, 
ªlﬂd
);

68  
MOSQ_ERR_SUCCESS
;

69 
	}
}

71 
	$mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

73 
	`¥ötf
(
ANSI_BLUE
 "PLUGIN ::: mosquôto_auth_£curôy_˛ónup(,,%d, %d)" 
ANSI_RESET
 "\n", 
auth_›t_cou¡
, 
ªlﬂd
);

74  
MOSQ_ERR_SUCCESS
;

75 
	}
}

77 
	$mosquôto_auth_a˛_check
(*
u£r_d©a
, 
ac˚ss
, 
mosquôto
 *
˛õ¡
, c⁄° 
mosquôto_a˛_msg
 *
msg
)

79 
	`¥öt_cﬁ
(
˛õ¡
);

80 
	`¥ötf
("PLUGIN ::: mosquôto_auth_a˛_check(%p, %d, %s, %s)" 
ANSI_RESET
 "\n",

81 
u£r_d©a
, 
ac˚ss
, 
	`mosquôto_˛õ¡_u£∫ame
(
˛õ¡
), 
msg
->
t›ic
);

82  
MOSQ_ERR_SUCCESS
;

83 
	}
}

85 
	$mosquôto_auth_u≈wd_check
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
)

87 
	`¥öt_cﬁ
(
˛õ¡
);

88 
	`¥ötf
("PLUGIN ::: mosquôto_auth_u≈wd_check(%p, %s, %s)" 
ANSI_RESET
 "\n",

89 
u£r_d©a
, 
	`mosquôto_˛õ¡_u£∫ame
(
˛õ¡
), 
u£∫ame
);

90  
MOSQ_ERR_SUCCESS
;

91 
	}
}

93 
	$mosquôto_auth_psk_key_gë
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
)

95 
	`¥öt_cﬁ
(
˛õ¡
);

96 
	`¥ötf
("PLUGIN ::: mosquôto_auth_psk_key_gë(%p, %s, %s)" 
ANSI_RESET
 "\n",

97 
u£r_d©a
, 
	`mosquôto_˛õ¡_u£∫ame
(
˛õ¡
), 
höt
);

98  
MOSQ_ERR_SUCCESS
;

99 
	}
}

101 
	$mosquôto_auth_°¨t
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
mëhod
, 
boﬁ
 
ªauth
, c⁄° *
d©a_ö
, 
uöt16_t
 
d©a_ö_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
)

103 
	`¥öt_cﬁ
(
˛õ¡
);

104 
	`¥ötf
("PLUGIN ::: mosquôto_auth_°¨t(%p, %s, %s, %d, %d, %hn)" 
ANSI_RESET
 "\n",

105 
u£r_d©a
, 
	`mosquôto_˛õ¡_u£∫ame
(
˛õ¡
), 
mëhod
, 
ªauth
, 
d©a_ö_Àn
, 
d©a_out_Àn
);

106  
MOSQ_ERR_SUCCESS
;

107 
	}
}

109 
	$mosquôto_auth_c⁄töue
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
mëhod
, c⁄° *
d©a_ö
, 
uöt16_t
 
d©a_ö_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
)

111 
	`¥öt_cﬁ
(
˛õ¡
);

112 
	`¥ötf
("PLUGIN ::: mosquôto_auth_c⁄töue(%p, %s, %s, %d, %hn)" 
ANSI_RESET
 "\n",

113 
u£r_d©a
, 
	`mosquôto_˛õ¡_u£∫ame
(
˛õ¡
), 
mëhod
, 
d©a_ö_Àn
, 
d©a_out_Àn
);

114  
MOSQ_ERR_SUCCESS
;

115 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/plugin_defer.c

21 
	~<°dio.h
>

23 
	~"mosquôto_brokî.h
"

24 
	~"mosquôto_∂ugö.h
"

25 
	~"mosquôto.h
"

27 
	$mosquôto_auth_∂ugö_vîsi⁄
()

30 
	}
}

32 
	$mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

34  
MOSQ_ERR_SUCCESS
;

35 
	}
}

37 
	$mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

39  
MOSQ_ERR_SUCCESS
;

40 
	}
}

42 
	$mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

44  
MOSQ_ERR_SUCCESS
;

45 
	}
}

47 
	$mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

49  
MOSQ_ERR_SUCCESS
;

50 
	}
}

52 
	$mosquôto_auth_a˛_check
(*
u£r_d©a
, 
ac˚ss
, 
mosquôto
 *
˛õ¡
, c⁄° 
mosquôto_a˛_msg
 *
msg
)

54 
	`¥ötf
("mosquôto_a˛_check(u:%s)\n", 
	`mosquôto_˛õ¡_u£∫ame
(
˛õ¡
));

55  
MOSQ_ERR_PLUGIN_DEFER
;

56 
	}
}

58 
	$mosquôto_auth_u≈wd_check
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
)

60  
MOSQ_ERR_PLUGIN_DEFER
;

61 
	}
}

63 
	$mosquôto_auth_psk_key_gë
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
)

65  
MOSQ_ERR_PLUGIN_DEFER
;

66 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/plugin_public.c

19 
	~"c⁄fig.h
"

21 
	~"mosquôto_brokî_öã∫Æ.h
"

22 
	~"mosquôto_öã∫Æ.h
"

23 
	~"mosquôto_brokî.h
"

24 
	~"mem‹y_mosq.h
"

25 
	~"mqâ_¥Ÿocﬁ.h
"

26 
	~"£nd_mosq.h
"

27 
	~"utû_mosq.h
"

28 
	~"uéi°.h
"

30 #ifde‡
WITH_TLS


31 
	~<›ís¶/s¶.h
>

34 c⁄° *
	$mosquôto_˛õ¡_addªss
(c⁄° 
mosquôto
 *
˛õ¡
)

36 if(
˛õ¡
){

37  
˛õ¡
->
addªss
;

39  
NULL
;

41 
	}
}

44 
boﬁ
 
	$mosquôto_˛õ¡_˛ón_£ssi⁄
(c⁄° 
mosquôto
 *
˛õ¡
)

46 if(
˛õ¡
){

47  
˛õ¡
->
˛ón_°¨t
;

49  
åue
;

51 
	}
}

54 c⁄° *
	$mosquôto_˛õ¡_id
(c⁄° 
mosquôto
 *
˛õ¡
)

56 if(
˛õ¡
){

57  
˛õ¡
->
id
;

59  
NULL
;

61 
	}
}

64 
	$mosquôto_˛õ¡_kì∑live
(c⁄° 
mosquôto
 *
˛õ¡
)

66 if(
˛õ¡
){

67  
˛õ¡
->
kì∑live
;

71 
	}
}

74 *
	$mosquôto_˛õ¡_˚πifiˇã
(c⁄° 
mosquôto
 *
˛õ¡
)

76 #ifde‡
WITH_TLS


77 if(
˛õ¡
 && clõ¡->
s¶
){

78  
	`SSL_gë_≥î_˚πifiˇã
(
˛õ¡
->
s¶
);

80  
NULL
;

83 
	`UNUSED
(
˛õ¡
);

85  
NULL
;

87 
	}
}

90 
	$mosquôto_˛õ¡_¥Ÿocﬁ
(c⁄° 
mosquôto
 *
˛õ¡
)

92 #ifde‡
WITH_WEBSOCKETS


93 if(
˛õ¡
 && clõ¡->
wsi
){

94  
mp_websockës
;

97 
	`UNUSED
(
˛õ¡
);

100  
mp_mqâ
;

102 
	}
}

105 
	$mosquôto_˛õ¡_¥Ÿocﬁ_vîsi⁄
(c⁄° 
mosquôto
 *
˛õ¡
)

107 if(
˛õ¡
){

108 
˛õ¡
->
¥Ÿocﬁ
){

109 
mosq_p_mqâ31
:

111 
mosq_p_mqâ311
:

113 
mosq_p_mqâ5
:

121 
	}
}

124 
	$mosquôto_˛õ¡_sub_cou¡
(c⁄° 
mosquôto
 *
˛õ¡
)

126 if(
˛õ¡
){

127  
˛õ¡
->
sub_cou¡
;

131 
	}
}

134 c⁄° *
	$mosquôto_˛õ¡_u£∫ame
(c⁄° 
mosquôto
 *
˛õ¡
)

136 if(
˛õ¡
){

137 #ifde‡
WITH_BRIDGE


138 if(
˛õ¡
->
bridge
){

139  
˛õ¡
->
bridge
->
loˇl_u£∫ame
;

143  
˛õ¡
->
u£∫ame
;

146  
NULL
;

148 
	}
}

151 
	$mosquôto_brokî_publish
(

152 c⁄° *
˛õ¡id
,

153 c⁄° *
t›ic
,

154 
∑ylﬂdÀn
,

155 *
∑ylﬂd
,

156 
qos
,

157 
boﬁ
 
ªèö
,

158 
mosquôto_¥›îty
 *
¥›îtõs
)

160 
mosquôto_mesßge_v5
 *
msg
;

162 if(
t›ic
 =
NULL


163 || 
∑ylﬂdÀn
 < 0

164 || (
∑ylﬂdÀn
 > 0 && 
∑ylﬂd
 =
NULL
)

165 || 
qos
 < 0 || qos > 2){

167  
MOSQ_ERR_INVAL
;

170 
msg
 = 
	`mosquôto__mÆloc
((
mosquôto_mesßge_v5
));

171 if(
msg
 =
NULL
Ë 
MOSQ_ERR_NOMEM
;

173 
msg
->
√xt
 = 
NULL
;

174 
msg
->
¥ev
 = 
NULL
;

175 if(
˛õ¡id
){

176 
msg
->
˛õ¡id
 = 
	`mosquôto__°rdup
(clientid);

177 if(
msg
->
˛õ¡id
 =
NULL
){

178 
	`mosquôto__‰ì
(
msg
);

179  
MOSQ_ERR_NOMEM
;

182 
msg
->
˛õ¡id
 = 
NULL
;

184 
msg
->
t›ic
 = 
	`mosquôto__°rdup
(topic);

185 if(
msg
->
t›ic
 =
NULL
){

186 
	`mosquôto__‰ì
(
msg
->
˛õ¡id
);

187 
	`mosquôto__‰ì
(
msg
);

188  
MOSQ_ERR_NOMEM
;

190 
msg
->
∑ylﬂdÀn
 =Öayloadlen;

191 
msg
->
∑ylﬂd
 =Öayload;

192 
msg
->
qos
 = qos;

193 
msg
->
ªèö
 =Ñetain;

194 
msg
->
¥›îtõs
 =Öroperties;

196 
	`DL_APPEND
(
db
.
∂ugö_msgs
, 
msg
);

198  
MOSQ_ERR_SUCCESS
;

199 
	}
}

202 
	$mosquôto_brokî_publish_c›y
(

203 c⁄° *
˛õ¡id
,

204 c⁄° *
t›ic
,

205 
∑ylﬂdÀn
,

206 c⁄° *
∑ylﬂd
,

207 
qos
,

208 
boﬁ
 
ªèö
,

209 
mosquôto_¥›îty
 *
¥›îtõs
)

211 *
∑ylﬂd_out
;

213 if(
t›ic
 =
NULL


214 || 
∑ylﬂdÀn
 < 0

215 || (
∑ylﬂdÀn
 > 0 && 
∑ylﬂd
 =
NULL
)

216 || 
qos
 < 0 || qos > 2){

218  
MOSQ_ERR_INVAL
;

221 
∑ylﬂd_out
 = 
	`ˇŒoc
(1, (
size_t
)(
∑ylﬂdÀn
+1));

222 if(
∑ylﬂd_out
 =
NULL
){

223  
MOSQ_ERR_NOMEM
;

225 
	`mem˝y
(
∑ylﬂd_out
, 
∑ylﬂd
, (
size_t
)
∑ylﬂdÀn
);

227  
	`mosquôto_brokî_publish
(

228 
˛õ¡id
,

229 
t›ic
,

230 
∑ylﬂdÀn
,

231 
∑ylﬂd_out
,

232 
qos
,

233 
ªèö
,

234 
¥›îtõs
);

235 
	}
}

238 
	$mosquôto_£t_u£∫ame
(
mosquôto
 *
˛õ¡
, c⁄° *
u£∫ame
)

240 *
u_dup
;

241 *
ﬁd
;

242 
rc
;

244 if(!
˛õ¡
Ë 
MOSQ_ERR_INVAL
;

246 if(
u£∫ame
){

247 
u_dup
 = 
	`mosquôto__°rdup
(
u£∫ame
);

248 if(!
u_dup
Ë 
MOSQ_ERR_NOMEM
;

250 
u_dup
 = 
NULL
;

253 
ﬁd
 = 
˛õ¡
->
u£∫ame
;

254 
˛õ¡
->
u£∫ame
 = 
u_dup
;

256 
rc
 = 
	`a˛__föd_a˛s
(
˛õ¡
);

257 if(
rc
){

258 
˛õ¡
->
u£∫ame
 = 
ﬁd
;

259 
	`mosquôto__‰ì
(
u_dup
);

260  
rc
;

262 
	`mosquôto__‰ì
(
ﬁd
);

263  
MOSQ_ERR_SUCCESS
;

265 
	}
}

269 
	$check_subs¸ùti⁄_a˛s
(
mosquôto
 *
c⁄ãxt
)

271 
i
;

272 
rc
;

273 
uöt8_t
 
ªas⁄
;

275 
i
=0; i<
c⁄ãxt
->
sub_cou¡
; i++){

276 if(
c⁄ãxt
->
subs
[
i
] =
NULL
){

279 
rc
 = 
	`mosquôto_a˛_check
(
c⁄ãxt
,

280 
c⁄ãxt
->
subs
[
i
]->
t›ic_fûãr
,

282 
NULL
,

284 
Ál£
,

285 
MOSQ_ACL_SUBSCRIBE
);

287 if(
rc
 !
MOSQ_ERR_SUCCESS
){

288 
	`sub__ªmove
(
c⁄ãxt
, c⁄ãxt->
subs
[
i
]->
t›ic_fûãr
, 
db
.subs, &
ªas⁄
);

291 
	}
}

295 
	$disc⁄√˘_˛õ¡
(
mosquôto
 *
c⁄ãxt
, 
boﬁ
 
wôh_wûl
)

297 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

298 
	`£nd__disc⁄√˘
(
c⁄ãxt
, 
MQTT_RC_ADMINISTRATIVE_ACTION
, 
NULL
);

300 if(
wôh_wûl
 =
Ál£
){

301 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_disc⁄√˘ög
);

303 if(
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 > 0){

304 
	`check_subs¸ùti⁄_a˛s
(
c⁄ãxt
);

306 
	`do_disc⁄√˘
(
c⁄ãxt
, 
MOSQ_ERR_ADMINISTRATIVE_ACTION
);

307 
	}
}

309 
	$mosquôto_kick_˛õ¡_by_˛õ¡id
(c⁄° *
˛õ¡id
, 
boﬁ
 
wôh_wûl
)

311 
mosquôto
 *
˘xt
, *
˘xt_tmp
;

313 if(
˛õ¡id
 =
NULL
){

314 
	`HASH_ITER
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, 
˘xt
, 
˘xt_tmp
){

315 
	`disc⁄√˘_˛õ¡
(
˘xt
, 
wôh_wûl
);

317  
MOSQ_ERR_SUCCESS
;

319 
	`HASH_FIND
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
˛õ¡id
, 
	`°æí
(˛õ¡id), 
˘xt
);

320 if(
˘xt
){

321 
	`disc⁄√˘_˛õ¡
(
˘xt
, 
wôh_wûl
);

322  
MOSQ_ERR_SUCCESS
;

324  
MOSQ_ERR_NOT_FOUND
;

327 
	}
}

329 
	$mosquôto_kick_˛õ¡_by_u£∫ame
(c⁄° *
u£∫ame
, 
boﬁ
 
wôh_wûl
)

331 
mosquôto
 *
˘xt
, *
˘xt_tmp
;

333 if(
u£∫ame
 =
NULL
){

334 
	`HASH_ITER
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, 
˘xt
, 
˘xt_tmp
){

335 if(
˘xt
->
u£∫ame
 =
NULL
){

336 
	`disc⁄√˘_˛õ¡
(
˘xt
, 
wôh_wûl
);

340 
	`HASH_ITER
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, 
˘xt
, 
˘xt_tmp
){

341 if(
˘xt
->
u£∫ame
 !
NULL
 && !
	`°rcmp
(ctxt->username, username)){

342 
	`disc⁄√˘_˛õ¡
(
˘xt
, 
wôh_wûl
);

346  
MOSQ_ERR_SUCCESS
;

347 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/property_broker.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

25 
	~"mosquôto_brokî_öã∫Æ.h
"

26 
	~"mqâ_¥Ÿocﬁ.h
"

27 
	~"¥›îty_mosq.h
"

31 
	$¥›îty__¥o˚ss_c⁄√˘
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_¥›îty
 **
¥›s
)

33 
mosquôto_¥›îty
 *
p
;

35 
p
 = *
¥›s
;

37 
p
){

38 if(
p
->
idítifõr
 =
MQTT_PROP_SESSION_EXPIRY_INTERVAL
){

39 
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 = 
p
->
vÆue
.
i32
;

40 }if(
p
->
idítifõr
 =
MQTT_PROP_RECEIVE_MAXIMUM
){

41 if(
p
->
vÆue
.
i16
 == 0){

42  
MOSQ_ERR_PROTOCOL
;

45 
c⁄ãxt
->
msgs_out
.
öÊight_maximum
 = 
p
->
vÆue
.
i16
;

46 
c⁄ãxt
->
msgs_out
.
öÊight_quŸa
 = c⁄ãxt->msgs_out.
öÊight_maximum
;

47 }if(
p
->
idítifõr
 =
MQTT_PROP_MAXIMUM_PACKET_SIZE
){

48 if(
p
->
vÆue
.
i32
 == 0){

49  
MOSQ_ERR_PROTOCOL
;

51 
c⁄ãxt
->
maximum_∑ckë_size
 = 
p
->
vÆue
.
i32
;

53 
p
 =Ö->
√xt
;

56  
MOSQ_ERR_SUCCESS
;

57 
	}
}

60 
	$¥›îty__¥o˚ss_wûl
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_mesßge_Æl
 *
msg
, 
mosquôto_¥›îty
 **
¥›s
)

62 
mosquôto_¥›îty
 *
p
, *
p_¥ev
;

63 
mosquôto_¥›îty
 *
msg_¥›îtõs
, *
msg_¥›îtõs_œ°
;

65 
p
 = *
¥›s
;

66 
p_¥ev
 = 
NULL
;

67 
msg_¥›îtõs
 = 
NULL
;

68 
msg_¥›îtõs_œ°
 = 
NULL
;

69 
p
){

70 
p
->
idítifõr
){

71 
MQTT_PROP_CONTENT_TYPE
:

72 
MQTT_PROP_CORRELATION_DATA
:

73 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
:

74 
MQTT_PROP_RESPONSE_TOPIC
:

75 
MQTT_PROP_USER_PROPERTY
:

76 if(
msg_¥›îtõs
){

77 
msg_¥›îtõs_œ°
->
√xt
 = 
p
;

78 
msg_¥›îtõs_œ°
 = 
p
;

80 
msg_¥›îtõs
 = 
p
;

81 
msg_¥›îtõs_œ°
 = 
p
;

83 if(
p_¥ev
){

84 
p_¥ev
->
√xt
 = 
p
->next;

85 
p
 = 
p_¥ev
->
√xt
;

87 *
¥›s
 = 
p
->
√xt
;

88 
p
 = *
¥›s
;

90 
msg_¥›îtõs_œ°
->
√xt
 = 
NULL
;

93 
MQTT_PROP_WILL_DELAY_INTERVAL
:

94 
c⁄ãxt
->
wûl_dñay_öãrvÆ
 = 
p
->
vÆue
.
i32
;

95 
p_¥ev
 = 
p
;

96 
p
 =Ö->
√xt
;

99 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
:

100 
msg
->
expúy_öãrvÆ
 = 
p
->
vÆue
.
i32
;

101 
p_¥ev
 = 
p
;

102 
p
 =Ö->
√xt
;

106  
MOSQ_ERR_PROTOCOL
;

111 
msg
->
¥›îtõs
 = 
msg_¥›îtõs
;

112  
MOSQ_ERR_SUCCESS
;

113 
	}
}

118 
	$¥›îty__¥o˚ss_disc⁄√˘
(
mosquôto
 *
c⁄ãxt
, 
mosquôto_¥›îty
 **
¥›s
)

120 
mosquôto_¥›îty
 *
p
;

122 
p
 = *
¥›s
;

124 
p
){

125 if(
p
->
idítifõr
 =
MQTT_PROP_SESSION_EXPIRY_INTERVAL
){

126 if(
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 =0 && 
p
->
vÆue
.
i32
 != 0){

127  
MOSQ_ERR_PROTOCOL
;

129 
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 = 
p
->
vÆue
.
i32
;

131 
p
 =Ö->
√xt
;

133  
MOSQ_ERR_SUCCESS
;

134 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/read_handle.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

25 
	~"mosquôto_brokî_öã∫Æ.h
"

26 
	~"mqâ_¥Ÿocﬁ.h
"

27 
	~"mem‹y_mosq.h
"

28 
	~"∑ckë_mosq.h
"

29 
	~"ªad_h™dÀ.h
"

30 
	~"£nd_mosq.h
"

31 
	~"sys_åì.h
"

32 
	~"utû_mosq.h
"

35 
	$h™dÀ__∑ckë
(
mosquôto
 *
c⁄ãxt
)

37 
rc
 = 
MOSQ_ERR_INVAL
;

39 if(!
c⁄ãxt
Ë 
MOSQ_ERR_INVAL
;

41 (
c⁄ãxt
->
ö_∑ckë
.
comm™d
)&0xF0){

42 
CMD_PINGREQ
:

43 
rc
 = 
	`h™dÀ__pögªq
(
c⁄ãxt
);

45 
CMD_PINGRESP
:

46 
rc
 = 
	`h™dÀ__pögª•
(
c⁄ãxt
);

48 
CMD_PUBACK
:

49 
rc
 = 
	`h™dÀ__pubackcomp
(
c⁄ãxt
, "PUBACK");

51 
CMD_PUBCOMP
:

52 
rc
 = 
	`h™dÀ__pubackcomp
(
c⁄ãxt
, "PUBCOMP");

54 
CMD_PUBLISH
:

55 
rc
 = 
	`h™dÀ__publish
(
c⁄ãxt
);

57 
CMD_PUBREC
:

58 
rc
 = 
	`h™dÀ__pubªc
(
c⁄ãxt
);

60 
CMD_PUBREL
:

61 
rc
 = 
	`h™dÀ__pubªl
(
c⁄ãxt
);

63 
CMD_CONNECT
:

64  
	`h™dÀ__c⁄√˘
(
c⁄ãxt
);

65 
CMD_DISCONNECT
:

66 
rc
 = 
	`h™dÀ__disc⁄√˘
(
c⁄ãxt
);

68 
CMD_SUBSCRIBE
:

69 
rc
 = 
	`h™dÀ__subs¸ibe
(
c⁄ãxt
);

71 
CMD_UNSUBSCRIBE
:

72 
rc
 = 
	`h™dÀ__unsubs¸ibe
(
c⁄ãxt
);

74 #ifde‡
WITH_BRIDGE


75 
CMD_CONNACK
:

76 
rc
 = 
	`h™dÀ__c⁄«ck
(
c⁄ãxt
);

78 
CMD_SUBACK
:

79 
rc
 = 
	`h™dÀ__suback
(
c⁄ãxt
);

81 
CMD_UNSUBACK
:

82 
rc
 = 
	`h™dÀ__unsuback
(
c⁄ãxt
);

85 
CMD_AUTH
:

86 
rc
 = 
	`h™dÀ__auth
(
c⁄ãxt
);

89 
rc
 = 
MOSQ_ERR_PROTOCOL
;

92 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

93 if(
rc
 =
MOSQ_ERR_PROTOCOL
 ||Ñ¯=
MOSQ_ERR_DUPLICATE_PROPERTY
){

94 
	`£nd__disc⁄√˘
(
c⁄ãxt
, 
MQTT_RC_PROTOCOL_ERROR
, 
NULL
);

95 }if(
rc
 =
MOSQ_ERR_MALFORMED_PACKET
){

96 
	`£nd__disc⁄√˘
(
c⁄ãxt
, 
MQTT_RC_MALFORMED_PACKET
, 
NULL
);

97 }if(
rc
 =
MOSQ_ERR_QOS_NOT_SUPPORTED
){

98 
	`£nd__disc⁄√˘
(
c⁄ãxt
, 
MQTT_RC_QOS_NOT_SUPPORTED
, 
NULL
);

99 }if(
rc
 =
MOSQ_ERR_RETAIN_NOT_SUPPORTED
){

100 
	`£nd__disc⁄√˘
(
c⁄ãxt
, 
MQTT_RC_RETAIN_NOT_SUPPORTED
, 
NULL
);

101 }if(
rc
 =
MOSQ_ERR_TOPIC_ALIAS_INVALID
){

102 
	`£nd__disc⁄√˘
(
c⁄ãxt
, 
MQTT_RC_TOPIC_ALIAS_INVALID
, 
NULL
);

103 }if(
rc
 =
MOSQ_ERR_UNKNOWN
 ||Ñ¯=
MOSQ_ERR_NOMEM
){

104 
	`£nd__disc⁄√˘
(
c⁄ãxt
, 
MQTT_RC_UNSPECIFIED
, 
NULL
);

107  
rc
;

108 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/retain.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

25 
	~"mosquôto_brokî_öã∫Æ.h
"

26 
	~"mem‹y_mosq.h
"

27 
	~"mqâ_¥Ÿocﬁ.h
"

28 
	~"utû_mosq.h
"

30 
	~"uéi°.h
"

32 
mosquôto__ªèöhõr
 *
	$ªèö__add_hõr_íåy
(
mosquôto__ªèöhõr
 *
∑ª¡
, mosquôto__ªèöhõ∏**
siblög
, c⁄° *
t›ic
, 
uöt16_t
 
Àn
)

34 
mosquôto__ªèöhõr
 *
chûd
;

36 
	`as£π
(
siblög
);

38 
chûd
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__ªèöhõr
));

39 if(!
chûd
){

40 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

41  
NULL
;

43 
chûd
->
∑ª¡
 =Öarent;

44 
chûd
->
t›ic_Àn
 = 
Àn
;

45 
chûd
->
t›ic
 = 
	`mosquôto__mÆloc
((
size_t
)
Àn
+1);

46 if(!
chûd
->
t›ic
){

47 
chûd
->
t›ic_Àn
 = 0;

48 
	`mosquôto__‰ì
(
chûd
);

49 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

50  
NULL
;

52 
	`°∫˝y
(
chûd
->
t›ic
,Å›ic, (
size_t
)chûd->
t›ic_Àn
+1);

55 
	`HASH_ADD_KEYPTR
(
hh
, *
siblög
, 
chûd
->
t›ic
, chûd->
t›ic_Àn
, child);

57  
chûd
;

58 
	}
}

61 
	$ªèö__öô
()

63 
mosquôto__ªèöhõr
 *
ªèöhõr
;

65 
ªèöhõr
 = 
	`ªèö__add_hõr_íåy
(
NULL
, &
db
.
ªèös
, "", 0);

66 if(!
ªèöhõr
Ë 
MOSQ_ERR_NOMEM
;

68 
ªèöhõr
 = 
	`ªèö__add_hõr_íåy
(
NULL
, &
db
.
ªèös
, "$SYS", (
uöt16_t
)
	`°æí
("$SYS"));

69 if(!
ªèöhõr
Ë 
MOSQ_ERR_NOMEM
;

71  
MOSQ_ERR_SUCCESS
;

72 
	}
}

75 
	$ªèö__°‹e
(c⁄° *
t›ic
, 
mosquôto_msg_°‹e
 *
°‹ed
, **
•lô_t›ics
)

77 
mosquôto__ªèöhõr
 *
ªèöhõr
;

78 
mosquôto__ªèöhõr
 *
bønch
;

79 
i
;

80 
size_t
 
¶í
;

82 
	`as£π
(
°‹ed
);

83 
	`as£π
(
•lô_t›ics
);

85 
	`HASH_FIND
(
hh
, 
db
.
ªèös
, 
•lô_t›ics
[0], 
	`°æí
(•lô_t›ics[0]), 
ªèöhõr
);

86 if(
ªèöhõr
 =
NULL
){

87 
ªèöhõr
 = 
	`ªèö__add_hõr_íåy
(
NULL
, &
db
.
ªèös
, 
•lô_t›ics
[0], (
uöt16_t
)
	`°æí
(split_topics[0]));

88 if(!
ªèöhõr
Ë 
MOSQ_ERR_NOMEM
;

91 
i
=0; 
•lô_t›ics
[i] !
NULL
; i++){

92 
¶í
 = 
	`°æí
(
•lô_t›ics
[
i
]);

93 
	`HASH_FIND
(
hh
, 
ªèöhõr
->
chûdªn
, 
•lô_t›ics
[
i
], 
¶í
, 
bønch
);

94 if(
bønch
 =
NULL
){

95 
bønch
 = 
	`ªèö__add_hõr_íåy
(
ªèöhõr
, &ªèöhõr->
chûdªn
, 
•lô_t›ics
[
i
], (
uöt16_t
)
¶í
);

96 if(
bønch
 =
NULL
){

97  
MOSQ_ERR_NOMEM
;

100 
ªèöhõr
 = 
bønch
;

103 #ifde‡
WITH_PERSISTENCE


104 if(
	`°∫cmp
(
t›ic
, "$SYS", 4)){

107 
db
.
≥rsi°í˚_ch™ges
++;

110 
	`UNUSED
(
t›ic
);

113 if(
ªèöhõr
->
ªèöed
){

114 
	`db__msg_°‹e_ªf_dec
(&
ªèöhõr
->
ªèöed
);

115 #ifde‡
WITH_SYS_TREE


116 
db
.
ªèöed_cou¡
--;

119 if(
°‹ed
->
∑ylﬂdÀn
){

120 
ªèöhõr
->
ªèöed
 = 
°‹ed
;

121 
	`db__msg_°‹e_ªf_öc
(
ªèöhõr
->
ªèöed
);

122 #ifde‡
WITH_SYS_TREE


123 
db
.
ªèöed_cou¡
++;

126 
ªèöhõr
->
ªèöed
 = 
NULL
;

129  
MOSQ_ERR_SUCCESS
;

130 
	}
}

133 
	$ªèö__¥o˚ss
(
mosquôto__ªèöhõr
 *
bønch
, 
mosquôto
 *
c⁄ãxt
, 
uöt8_t
 
sub_qos
, 
uöt32_t
 
subs¸ùti⁄_idítifõr
)

135 
rc
 = 0;

136 
uöt8_t
 
qos
;

137 
uöt16_t
 
mid
;

138 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

139 
mosquôto_msg_°‹e
 *
ªèöed
;

141 if(
bønch
->
ªèöed
->
mesßge_expúy_time
 > 0 && 
db
.
now_ªÆ_s
 >= branch->retained->message_expiry_time){

142 
	`db__msg_°‹e_ªf_dec
(&
bønch
->
ªèöed
);

143 
bønch
->
ªèöed
 = 
NULL
;

144 #ifde‡
WITH_SYS_TREE


145 
db
.
ªèöed_cou¡
--;

147  
MOSQ_ERR_SUCCESS
;

150 
ªèöed
 = 
bønch
->retained;

152 
rc
 = 
	`mosquôto_a˛_check
(
c⁄ãxt
, 
ªèöed
->
t›ic
,Ñëaöed->
∑ylﬂdÀn
,Ñëaöed->
∑ylﬂd
,

153 
ªèöed
->
qos
,Ñëaöed->
ªèö
, 
MOSQ_ACL_READ
);

154 if(
rc
 =
MOSQ_ERR_ACL_DENIED
){

155  
MOSQ_ERR_SUCCESS
;

156 }if(
rc
 !
MOSQ_ERR_SUCCESS
){

157  
rc
;

161 if(
db
.
c⁄fig
->
check_ªèö_sour˚
 && 
ªèöed
->
‹igö
 !
mosq_mo_brokî
 &&Ñëaöed->
sour˚_id
){

162 
mosquôto
 
ªèö_˘xt
;

163 
	`mem£t
(&
ªèö_˘xt
, 0, (
mosquôto
));

165 
ªèö_˘xt
.
id
 = 
ªèöed
->
sour˚_id
;

166 
ªèö_˘xt
.
u£∫ame
 = 
ªèöed
->
sour˚_u£∫ame
;

167 
ªèö_˘xt
.
li°íî
 = 
ªèöed
->
sour˚_li°íî
;

169 
rc
 = 
	`a˛__föd_a˛s
(&
ªèö_˘xt
);

170 if(
rc
) Ñc;

172 
rc
 = 
	`mosquôto_a˛_check
(&
ªèö_˘xt
, 
ªèöed
->
t›ic
,Ñëaöed->
∑ylﬂdÀn
,Ñëaöed->
∑ylﬂd
,

173 
ªèöed
->
qos
,Ñëaöed->
ªèö
, 
MOSQ_ACL_WRITE
);

174 if(
rc
 =
MOSQ_ERR_ACL_DENIED
){

175  
MOSQ_ERR_SUCCESS
;

176 }if(
rc
 !
MOSQ_ERR_SUCCESS
){

177  
rc
;

181 i‡(
db
.
c⁄fig
->
upgøde_outgoög_qos
){

182 
qos
 = 
sub_qos
;

184 
qos
 = 
ªèöed
->qos;

185 if(
qos
 > 
sub_qos
) qos = sub_qos;

187 if(
qos
 > 0){

188 
mid
 = 
	`mosquôto__mid_gíî©e
(
c⁄ãxt
);

190 
mid
 = 0;

192 if(
subs¸ùti⁄_idítifõr
 > 0){

193 
	`mosquôto_¥›îty_add_v¨öt
(&
¥›îtõs
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 
subs¸ùti⁄_idítifõr
);

195  
	`db__mesßge_ö£π
(
c⁄ãxt
, 
mid
, 
mosq_md_out
, 
qos
, 
åue
, 
ªèöed
, 
¥›îtõs
, 
Ál£
);

196 
	}
}

199 
	$ªèö__£¨ch
(
mosquôto__ªèöhõr
 *
ªèöhõr
, **
•lô_t›ics
, 
mosquôto
 *
c⁄ãxt
, c⁄° *
sub
, 
uöt8_t
 
sub_qos
, 
uöt32_t
 
subs¸ùti⁄_idítifõr
, 
Àvñ
)

201 
mosquôto__ªèöhõr
 *
bønch
, *
bønch_tmp
;

202 
Êag
 = 0;

204 if(!
	`°rcmp
(
•lô_t›ics
[0], "#"Ë&& s∂ô_t›ics[1] =
NULL
){

205 
	`HASH_ITER
(
hh
, 
ªèöhõr
->
chûdªn
, 
bønch
, 
bønch_tmp
){

210 
Êag
 = -1;

211 if(
bønch
->
ªèöed
){

212 
	`ªèö__¥o˚ss
(
bønch
, 
c⁄ãxt
, 
sub_qos
, 
subs¸ùti⁄_idítifõr
);

214 if(
bønch
->
chûdªn
){

215 
	`ªèö__£¨ch
(
bønch
, 
•lô_t›ics
, 
c⁄ãxt
, 
sub
, 
sub_qos
, 
subs¸ùti⁄_idítifõr
, 
Àvñ
+1);

219 if(!
	`°rcmp
(
•lô_t›ics
[0], "+")){

220 
	`HASH_ITER
(
hh
, 
ªèöhõr
->
chûdªn
, 
bønch
, 
bønch_tmp
){

221 if(
•lô_t›ics
[1] !
NULL
){

222 if(
	`ªèö__£¨ch
(
bønch
, &(
•lô_t›ics
[1]), 
c⁄ãxt
, 
sub
, 
sub_qos
, 
subs¸ùti⁄_idítifõr
, 
Àvñ
+1) == -1

223 || (
•lô_t›ics
[1] !
NULL
 && !
	`°rcmp
(•lô_t›ics[1], "#"Ë&& 
Àvñ
>0)){

225 if(
bønch
->
ªèöed
){

226 
	`ªèö__¥o˚ss
(
bønch
, 
c⁄ãxt
, 
sub_qos
, 
subs¸ùti⁄_idítifõr
);

230 if(
bønch
->
ªèöed
){

231 
	`ªèö__¥o˚ss
(
bønch
, 
c⁄ãxt
, 
sub_qos
, 
subs¸ùti⁄_idítifõr
);

236 
	`HASH_FIND
(
hh
, 
ªèöhõr
->
chûdªn
, 
•lô_t›ics
[0], 
	`°æí
(•lô_t›ics[0]), 
bønch
);

237 if(
bønch
){

238 if(
•lô_t›ics
[1] !
NULL
){

239 if(
	`ªèö__£¨ch
(
bønch
, &(
•lô_t›ics
[1]), 
c⁄ãxt
, 
sub
, 
sub_qos
, 
subs¸ùti⁄_idítifõr
, 
Àvñ
+1) == -1

240 || (
•lô_t›ics
[1] !
NULL
 && !
	`°rcmp
(•lô_t›ics[1], "#"Ë&& 
Àvñ
>0)){

242 if(
bønch
->
ªèöed
){

243 
	`ªèö__¥o˚ss
(
bønch
, 
c⁄ãxt
, 
sub_qos
, 
subs¸ùti⁄_idítifõr
);

247 if(
bønch
->
ªèöed
){

248 
	`ªèö__¥o˚ss
(
bønch
, 
c⁄ãxt
, 
sub_qos
, 
subs¸ùti⁄_idítifõr
);

254  
Êag
;

255 
	}
}

258 
	$ªèö__queue
(
mosquôto
 *
c⁄ãxt
, c⁄° *
sub
, 
uöt8_t
 
sub_qos
, 
uöt32_t
 
subs¸ùti⁄_idítifõr
)

260 
mosquôto__ªèöhõr
 *
ªèöhõr
;

261 *
loˇl_sub
;

262 **
•lô_t›ics
;

263 
rc
;

265 
	`as£π
(
c⁄ãxt
);

266 
	`as£π
(
sub
);

268 if(!
	`°∫cmp
(
sub
, "$sh¨e/", 
	`°æí
("$share/"))){

269  
MOSQ_ERR_SUCCESS
;

272 
rc
 = 
	`sub__t›ic_tokíi£
(
sub
, &
loˇl_sub
, &
•lô_t›ics
, 
NULL
);

273 if(
rc
) Ñc;

275 
	`HASH_FIND
(
hh
, 
db
.
ªèös
, 
•lô_t›ics
[0], 
	`°æí
(•lô_t›ics[0]), 
ªèöhõr
);

277 if(
ªèöhõr
){

278 
	`ªèö__£¨ch
(
ªèöhõr
, 
•lô_t›ics
, 
c⁄ãxt
, 
sub
, 
sub_qos
, 
subs¸ùti⁄_idítifõr
, 0);

280 
	`mosquôto__‰ì
(
loˇl_sub
);

281 
	`mosquôto__‰ì
(
•lô_t›ics
);

283  
MOSQ_ERR_SUCCESS
;

284 
	}
}

287 
	$ªèö__˛ón
(
mosquôto__ªèöhõr
 **
ªèöhõr
)

289 
mosquôto__ªèöhõr
 *
≥î
, *
ªèöhõr_tmp
;

291 
	`HASH_ITER
(
hh
, *
ªèöhõr
, 
≥î
, 
ªèöhõr_tmp
){

292 if(
≥î
->
ªèöed
){

293 
	`db__msg_°‹e_ªf_dec
(&
≥î
->
ªèöed
);

295 
	`ªèö__˛ón
(&
≥î
->
chûdªn
);

296 
	`mosquôto__‰ì
(
≥î
->
t›ic
);

298 
	`HASH_DELETE
(
hh
, *
ªèöhõr
, 
≥î
);

299 
	`mosquôto__‰ì
(
≥î
);

301 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/security.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°rög.h
>

24 
	~"mosquôto_brokî.h
"

25 
	~"mosquôto_brokî_öã∫Æ.h
"

26 
	~"mosquôto_∂ugö.h
"

27 
	~"mem‹y_mosq.h
"

28 
	~"lib_lﬂd.h
"

29 
	~"uéi°.h
"

31 (*
	tFUNC_auth_∂ugö_vîsi⁄
)();

32 (*
	tFUNC_∂ugö_vîsi⁄
)(, const *);

34 
	`£curôy__˛ónup_sögÀ
(
mosquôto__£curôy_›ti⁄s
 *
›ts
, 
boﬁ
 
ªlﬂd
);

36 
	$LIB_ERROR
()

38 #ifde‡
WIN32


39 *
buf
;

40 
	`F‹m©Mesßge
(
FORMAT_MESSAGE_ALLOCATE_BUFFER
 | 
FORMAT_MESSAGE_FROM_SYSTEM
,

41 
NULL
, 
	`GëLa°Eº‹
(), 
LANG_NEUTRAL
, (
LPTSTR
)&
buf
, 0, NULL);

42 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "LﬂdÉº‹: %s", 
buf
);

43 
	`LoˇlFªe
(
buf
);

45 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "LﬂdÉº‹: %s", 
	`dÀº‹
());

47 
	}
}

50 
	$£curôy__lﬂd_v2
(
mosquôto__auth_∂ugö
 *
∂ugö
, 
mosquôto_auth_›t
 *
auth_›ti⁄s
, 
auth_›ti⁄_cou¡
, *
lib
)

52 
rc
;

54 if(!(
∂ugö
->
∂ugö_öô_v2
 = (
FUNC_auth_∂ugö_öô_v2
)
	`LIB_SYM
(
lib
, "mosquitto_auth_plugin_init"))){

55 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

57 
	`LIB_ERROR
();

58 
	`LIB_CLOSE
(
lib
);

59  
MOSQ_ERR_UNKNOWN
;

61 if(!(
∂ugö
->
∂ugö_˛ónup_v2
 = (
FUNC_auth_∂ugö_˛ónup_v2
)
	`LIB_SYM
(
lib
, "mosquitto_auth_plugin_cleanup"))){

62 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

64 
	`LIB_ERROR
();

65 
	`LIB_CLOSE
(
lib
);

66  
MOSQ_ERR_UNKNOWN
;

69 if(!(
∂ugö
->
£curôy_öô_v2
 = (
FUNC_auth_∂ugö_£curôy_öô_v2
)
	`LIB_SYM
(
lib
, "mosquitto_auth_security_init"))){

70 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

72 
	`LIB_ERROR
();

73 
	`LIB_CLOSE
(
lib
);

74  
MOSQ_ERR_UNKNOWN
;

77 if(!(
∂ugö
->
£curôy_˛ónup_v2
 = (
FUNC_auth_∂ugö_£curôy_˛ónup_v2
)
	`LIB_SYM
(
lib
, "mosquitto_auth_security_cleanup"))){

78 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

80 
	`LIB_ERROR
();

81 
	`LIB_CLOSE
(
lib
);

82  
MOSQ_ERR_UNKNOWN
;

85 if(!(
∂ugö
->
a˛_check_v2
 = (
FUNC_auth_∂ugö_a˛_check_v2
)
	`LIB_SYM
(
lib
, "mosquitto_auth_acl_check"))){

86 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

88 
	`LIB_ERROR
();

89 
	`LIB_CLOSE
(
lib
);

90  
MOSQ_ERR_UNKNOWN
;

93 if(!(
∂ugö
->
u≈wd_check_v2
 = (
FUNC_auth_∂ugö_u≈wd_check_v2
)
	`LIB_SYM
(
lib
, "mosquitto_auth_unpwd_check"))){

94 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

96 
	`LIB_ERROR
();

97 
	`LIB_CLOSE
(
lib
);

98  
MOSQ_ERR_UNKNOWN
;

101 if(!(
∂ugö
->
psk_key_gë_v2
 = (
FUNC_auth_∂ugö_psk_key_gë_v2
)
	`LIB_SYM
(
lib
, "mosquitto_auth_psk_key_get"))){

102 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

104 
	`LIB_ERROR
();

105 
	`LIB_CLOSE
(
lib
);

106  
MOSQ_ERR_UNKNOWN
;

109 
∂ugö
->
lib
 =Üib;

110 
∂ugö
->
u£r_d©a
 = 
NULL
;

112 if(
∂ugö
->
∂ugö_öô_v2
){

113 
rc
 = 
∂ugö
->
	`∂ugö_öô_v2
(&∂ugö->
u£r_d©a
, 
auth_›ti⁄s
, 
auth_›ti⁄_cou¡
);

114 if(
rc
){

115 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

116 "Eº‹: Authítiˇti⁄ÖlugöÑëu∫ed %d whí inôülisög.", 
rc
);

117  
rc
;

121 
	}
}

124 
	$£curôy__lﬂd_v3
(
mosquôto__auth_∂ugö
 *
∂ugö
, 
mosquôto_›t
 *
auth_›ti⁄s
, 
auth_›ti⁄_cou¡
, *
lib
)

126 
rc
;

128 if(!(
∂ugö
->
∂ugö_öô_v3
 = (
FUNC_auth_∂ugö_öô_v3
)
	`LIB_SYM
(
lib
, "mosquitto_auth_plugin_init"))){

129 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

131 
	`LIB_ERROR
();

132 
	`LIB_CLOSE
(
lib
);

133  
MOSQ_ERR_UNKNOWN
;

135 if(!(
∂ugö
->
∂ugö_˛ónup_v3
 = (
FUNC_auth_∂ugö_˛ónup_v3
)
	`LIB_SYM
(
lib
, "mosquitto_auth_plugin_cleanup"))){

136 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

138 
	`LIB_ERROR
();

139 
	`LIB_CLOSE
(
lib
);

140  
MOSQ_ERR_UNKNOWN
;

143 if(!(
∂ugö
->
£curôy_öô_v3
 = (
FUNC_auth_∂ugö_£curôy_öô_v3
)
	`LIB_SYM
(
lib
, "mosquitto_auth_security_init"))){

144 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

146 
	`LIB_ERROR
();

147 
	`LIB_CLOSE
(
lib
);

148  
MOSQ_ERR_UNKNOWN
;

151 if(!(
∂ugö
->
£curôy_˛ónup_v3
 = (
FUNC_auth_∂ugö_£curôy_˛ónup_v3
)
	`LIB_SYM
(
lib
, "mosquitto_auth_security_cleanup"))){

152 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

154 
	`LIB_ERROR
();

155 
	`LIB_CLOSE
(
lib
);

156  
MOSQ_ERR_UNKNOWN
;

159 if(!(
∂ugö
->
a˛_check_v3
 = (
FUNC_auth_∂ugö_a˛_check_v3
)
	`LIB_SYM
(
lib
, "mosquitto_auth_acl_check"))){

160 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

162 
	`LIB_ERROR
();

163 
	`LIB_CLOSE
(
lib
);

164  
MOSQ_ERR_UNKNOWN
;

167 if(!(
∂ugö
->
u≈wd_check_v3
 = (
FUNC_auth_∂ugö_u≈wd_check_v3
)
	`LIB_SYM
(
lib
, "mosquitto_auth_unpwd_check"))){

168 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

170 
	`LIB_ERROR
();

171 
	`LIB_CLOSE
(
lib
);

172  
MOSQ_ERR_UNKNOWN
;

175 if(!(
∂ugö
->
psk_key_gë_v3
 = (
FUNC_auth_∂ugö_psk_key_gë_v3
)
	`LIB_SYM
(
lib
, "mosquitto_auth_psk_key_get"))){

176 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

178 
	`LIB_ERROR
();

179 
	`LIB_CLOSE
(
lib
);

180  
MOSQ_ERR_UNKNOWN
;

183 
∂ugö
->
lib
 =Üib;

184 
∂ugö
->
u£r_d©a
 = 
NULL
;

185 if(
∂ugö
->
∂ugö_öô_v3
){

186 
rc
 = 
∂ugö
->
	`∂ugö_öô_v3
(&∂ugö->
u£r_d©a
, 
auth_›ti⁄s
, 
auth_›ti⁄_cou¡
);

187 if(
rc
){

188 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

189 "Eº‹: Authítiˇti⁄ÖlugöÑëu∫ed %d whí inôülisög.", 
rc
);

190  
rc
;

194 
	}
}

197 
	$£curôy__lﬂd_v4
(
mosquôto__auth_∂ugö
 *
∂ugö
, 
mosquôto_›t
 *
auth_›ti⁄s
, 
auth_›ti⁄_cou¡
, *
lib
)

199 
rc
;

201 if(!(
∂ugö
->
∂ugö_öô_v4
 = (
FUNC_auth_∂ugö_öô_v4
)
	`LIB_SYM
(
lib
, "mosquitto_auth_plugin_init"))){

202 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

204 
	`LIB_ERROR
();

205 
	`LIB_CLOSE
(
lib
);

206  
MOSQ_ERR_UNKNOWN
;

208 if(!(
∂ugö
->
∂ugö_˛ónup_v4
 = (
FUNC_auth_∂ugö_˛ónup_v4
)
	`LIB_SYM
(
lib
, "mosquitto_auth_plugin_cleanup"))){

209 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

211 
	`LIB_ERROR
();

212 
	`LIB_CLOSE
(
lib
);

213  
MOSQ_ERR_UNKNOWN
;

216 if(!(
∂ugö
->
£curôy_öô_v4
 = (
FUNC_auth_∂ugö_£curôy_öô_v4
)
	`LIB_SYM
(
lib
, "mosquitto_auth_security_init"))){

217 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

219 
	`LIB_ERROR
();

220 
	`LIB_CLOSE
(
lib
);

221  
MOSQ_ERR_UNKNOWN
;

224 if(!(
∂ugö
->
£curôy_˛ónup_v4
 = (
FUNC_auth_∂ugö_£curôy_˛ónup_v4
)
	`LIB_SYM
(
lib
, "mosquitto_auth_security_cleanup"))){

225 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

227 
	`LIB_ERROR
();

228 
	`LIB_CLOSE
(
lib
);

229  
MOSQ_ERR_UNKNOWN
;

232 if(!(
∂ugö
->
a˛_check_v4
 = (
FUNC_auth_∂ugö_a˛_check_v4
)
	`LIB_SYM
(
lib
, "mosquitto_auth_acl_check"))){

233 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

235 
	`LIB_ERROR
();

236 
	`LIB_CLOSE
(
lib
);

237  
MOSQ_ERR_UNKNOWN
;

240 
∂ugö
->
u≈wd_check_v4
 = (
FUNC_auth_∂ugö_u≈wd_check_v4
)
	`LIB_SYM
(
lib
, "mosquitto_auth_unpwd_check");

241 if(
∂ugö
->
u≈wd_check_v4
){

242 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
,

245 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
,

249 
∂ugö
->
psk_key_gë_v4
 = (
FUNC_auth_∂ugö_psk_key_gë_v4
)
	`LIB_SYM
(
lib
, "mosquitto_auth_psk_key_get");

250 if(
∂ugö
->
psk_key_gë_v4
){

251 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
,

254 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
,

258 
∂ugö
->
auth_°¨t_v4
 = (
FUNC_auth_∂ugö_auth_°¨t_v4
)
	`LIB_SYM
(
lib
, "mosquitto_auth_start");

259 
∂ugö
->
auth_c⁄töue_v4
 = (
FUNC_auth_∂ugö_auth_c⁄töue_v4
)
	`LIB_SYM
(
lib
, "mosquitto_auth_continue");

261 if(
∂ugö
->
auth_°¨t_v4
){

262 if(
∂ugö
->
auth_c⁄töue_v4
){

263 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
,

266 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

268 
	`LIB_CLOSE
(
lib
);

269  
MOSQ_ERR_UNKNOWN
;

272 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
,

276 
∂ugö
->
lib
 =Üib;

277 
∂ugö
->
u£r_d©a
 = 
NULL
;

278 if(
∂ugö
->
∂ugö_öô_v4
){

279 
rc
 = 
∂ugö
->
	`∂ugö_öô_v4
(&∂ugö->
u£r_d©a
, 
auth_›ti⁄s
, 
auth_›ti⁄_cou¡
);

280 if(
rc
){

281 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

282 "Eº‹: Authítiˇti⁄ÖlugöÑëu∫ed %d whí inôülisög.", 
rc
);

283  
rc
;

287 
	}
}

290 
	$£curôy__moduÀ_öô_sögÀ
(
mosquôto__li°íî
 *
li°íî
, 
mosquôto__£curôy_›ti⁄s
 *
›ts
)

292 *
lib
;

293 (*
∂ugö_vîsi⁄
)(, c⁄° *Ë
NULL
;

294 (*
∂ugö_auth_vîsi⁄
)(Ë
NULL
;

295 
vîsi⁄
;

296 
i
;

297 
rc
;

298 c⁄° 
∂ugö_vîsi⁄s
[] = {5, 4, 3, 2};

299 
∂ugö_vîsi⁄_cou¡
 = (
∂ugö_vîsi⁄s
)/();

301 if(
›ts
->
auth_∂ugö_c⁄fig_cou¡
 == 0){

302  
MOSQ_ERR_SUCCESS
;

305 
i
=0; i<
›ts
->
auth_∂ugö_c⁄fig_cou¡
; i++){

306 if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∑th
){

307 
	`mem£t
(&
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
, 0, (
mosquôto__auth_∂ugö
));

309 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "LﬂdögÖlugö: %s", 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∑th
);

311 
lib
 = 
	`LIB_LOAD
(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∑th
);

312 if(!
lib
){

313 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

314 "Eº‹: U«bÀÅÿlﬂdáuthÖlugö \"%s\".", 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∑th
);

315 
	`LIB_ERROR
();

316  
MOSQ_ERR_UNKNOWN
;

319 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
lib
 = 
NULL
;

320 if((
∂ugö_vîsi⁄
 = (
FUNC_∂ugö_vîsi⁄
)
	`LIB_SYM
(
lib
, "mosquitto_plugin_version"))){

321 
vîsi⁄
 = 
	`∂ugö_vîsi⁄
(
∂ugö_vîsi⁄_cou¡
, 
∂ugö_vîsi⁄s
);

322 }if((
∂ugö_auth_vîsi⁄
 = (
FUNC_auth_∂ugö_vîsi⁄
)
	`LIB_SYM
(
lib
, "mosquitto_auth_plugin_version"))){

323 
vîsi⁄
 = 
	`∂ugö_auth_vîsi⁄
();

325 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

327 
	`LIB_ERROR
();

328 
	`LIB_CLOSE
(
lib
);

329  
MOSQ_ERR_UNKNOWN
;

331 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 = version;

332 if(
vîsi⁄
 == 5){

333 
rc
 = 
	`∂ugö__lﬂd_v5
(

334 
li°íî
,

335 &
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
,

336 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄s
,

337 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄_cou¡
,

338 
lib
);

340 if(
rc
){

341  
rc
;

343 }if(
vîsi⁄
 == 4){

344 
rc
 = 
	`£curôy__lﬂd_v4
(

345 &
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
,

346 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄s
,

347 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄_cou¡
,

348 
lib
);

350 if(
rc
){

351  
rc
;

353 }if(
vîsi⁄
 == 3){

354 
rc
 = 
	`£curôy__lﬂd_v3
(

355 &
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
,

356 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄s
,

357 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄_cou¡
,

358 
lib
);

360 if(
rc
){

361  
rc
;

363 }if(
vîsi⁄
 == 2){

364 
rc
 = 
	`£curôy__lﬂd_v2
(

365 &
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
,

366 (
mosquôto_auth_›t
 *)
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄s
,

367 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄_cou¡
,

368 
lib
);

370 if(
rc
){

371  
rc
;

374 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
,

376 
vîsi⁄
, 
MOSQ_PLUGIN_VERSION
);

377 
	`LIB_ERROR
();

379 
	`LIB_CLOSE
(
lib
);

380  
MOSQ_ERR_UNKNOWN
;

384  
MOSQ_ERR_SUCCESS
;

385 
	}
}

388 
	$mosquôto_£curôy_moduÀ_öô
()

390 
rc
 = 
MOSQ_ERR_SUCCESS
;

391 
i
;

393 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

394 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

395 
rc
 = 
	`£curôy__moduÀ_öô_sögÀ
(&
db
.
c⁄fig
->
li°íîs
[
i
], &db.c⁄fig->li°íîs[i].
£curôy_›ti⁄s
);

396 if(
rc
) Ñc;

399 
rc
 = 
	`£curôy__moduÀ_öô_sögÀ
(
NULL
, &
db
.
c⁄fig
->
£curôy_›ti⁄s
);

401  
rc
;

402 
	}
}

405 
	$£curôy__moduÀ_˛ónup_sögÀ
(
mosquôto__£curôy_›ti⁄s
 *
›ts
)

407 
i
;

409 
i
=0; i<
›ts
->
auth_∂ugö_c⁄fig_cou¡
; i++){

411 if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 5){

412 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`∂ugö_˛ónup_v5
(

413 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

414 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄s
,

415 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄_cou¡
);

416 
	`mosquôto__‰ì
(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
idítifõr
);

417 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
idítifõr
 = 
NULL
;

419 }if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 4){

420 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`∂ugö_˛ónup_v4
(

421 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

422 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄s
,

423 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄_cou¡
);

425 }if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 3){

426 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`∂ugö_˛ónup_v3
(

427 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

428 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄s
,

429 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄_cou¡
);

431 }if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 2){

432 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`∂ugö_˛ónup_v2
(

433 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

434 (
mosquôto_auth_›t
 *)
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄s
,

435 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄_cou¡
);

438 if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
lib
){

439 
	`LIB_CLOSE
(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
lib
);

441 
	`mem£t
(&
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
, 0, (
mosquôto__auth_∂ugö
));

443 
	}
}

446 
	$mosquôto_£curôy_moduÀ_˛ónup
()

448 
i
;

450 
	`mosquôto_£curôy_˛ónup
(
Ál£
);

452 
	`£curôy__moduÀ_˛ónup_sögÀ
(&
db
.
c⁄fig
->
£curôy_›ti⁄s
);

454 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

455 
	`£curôy__moduÀ_˛ónup_sögÀ
(&
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
);

458  
MOSQ_ERR_SUCCESS
;

459 
	}
}

462 
	$£curôy__öô_sögÀ
(
mosquôto__£curôy_›ti⁄s
 *
›ts
, 
boﬁ
 
ªlﬂd
)

464 
i
;

465 
rc
;

466 
mosquôto_evt_ªlﬂd
 
evít_d©a
;

467 
mosquôto__ˇŒback
 *
cb_ba£
;

469 if(
ªlﬂd
){

470 
	`DL_FOREACH
(
›ts
->
∂ugö_ˇŒbacks
.
ªlﬂd
, 
cb_ba£
){

471 
	`mem£t
(&
evít_d©a
, 0, (event_data));

473 
evít_d©a
.
›ti⁄s
 = 
NULL
;

474 
evít_d©a
.
›ti⁄_cou¡
 = 0;

475 
rc
 = 
cb_ba£
->
	`cb
(
MOSQ_EVT_RELOAD
, &
evít_d©a
, cb_ba£->
u£rd©a
);

476 if(
rc
 !
MOSQ_ERR_PLUGIN_DEFER
){

477  
rc
;

482 
i
=0; i<
›ts
->
auth_∂ugö_c⁄fig_cou¡
; i++){

483 if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 5){

485 }if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 4){

486 
rc
 = 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`£curôy_öô_v4
(

487 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

488 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄s
,

489 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄_cou¡
,

490 
ªlﬂd
);

492 }if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 3){

493 
rc
 = 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`£curôy_öô_v3
(

494 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

495 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄s
,

496 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄_cou¡
,

497 
ªlﬂd
);

499 }if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 2){

500 
rc
 = 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`£curôy_öô_v2
(

501 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

502 (
mosquôto_auth_›t
 *)
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄s
,

503 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄_cou¡
,

504 
ªlﬂd
);

506 
rc
 = 
MOSQ_ERR_INVAL
;

508 if(
rc
 !
MOSQ_ERR_SUCCESS
){

509  
rc
;

512  
MOSQ_ERR_SUCCESS
;

513 
	}
}

516 
	$mosquôto_£curôy_öô
(
boﬁ
 
ªlﬂd
)

518 
i
;

519 
rc
;

521 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

522 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

523 
rc
 = 
	`£curôy__öô_sögÀ
(&
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
, 
ªlﬂd
);

524 if(
rc
 !
MOSQ_ERR_SUCCESS
) Ñc;

527 
rc
 = 
	`£curôy__öô_sögÀ
(&
db
.
c⁄fig
->
£curôy_›ti⁄s
, 
ªlﬂd
);

528 if(
rc
 !
MOSQ_ERR_SUCCESS
) Ñc;

530  
	`mosquôto_£curôy_öô_deÁu…
(
ªlﬂd
);

531 
	}
}

539 
	$mosquôto_£curôy_≠∂y
()

541  
	`mosquôto_£curôy_≠∂y_deÁu…
();

542 
	}
}

545 
	$£curôy__˛ónup_sögÀ
(
mosquôto__£curôy_›ti⁄s
 *
›ts
, 
boﬁ
 
ªlﬂd
)

547 
i
;

548 
rc
;

550 
i
=0; i<
›ts
->
auth_∂ugö_c⁄fig_cou¡
; i++){

551 if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 5){

552 
rc
 = 
MOSQ_ERR_SUCCESS
;

553 }if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 4){

554 
rc
 = 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`£curôy_˛ónup_v4
(

555 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

556 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄s
,

557 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄_cou¡
,

558 
ªlﬂd
);

560 }if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 3){

561 
rc
 = 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`£curôy_˛ónup_v3
(

562 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

563 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄s
,

564 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄_cou¡
,

565 
ªlﬂd
);

567 }if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 2){

568 
rc
 = 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`£curôy_˛ónup_v2
(

569 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

570 (
mosquôto_auth_›t
 *)
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄s
,

571 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
›ti⁄_cou¡
,

572 
ªlﬂd
);

574 
rc
 = 
MOSQ_ERR_INVAL
;

576 if(
rc
 !
MOSQ_ERR_SUCCESS
){

577  
rc
;

581  
MOSQ_ERR_SUCCESS
;

582 
	}
}

585 
	$mosquôto_£curôy_˛ónup
(
boﬁ
 
ªlﬂd
)

587 
i
;

588 
rc
;

590 
rc
 = 
	`£curôy__˛ónup_sögÀ
(&
db
.
c⁄fig
->
£curôy_›ti⁄s
, 
ªlﬂd
);

591 if(
rc
 !
MOSQ_ERR_SUCCESS
) Ñc;

593 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

594 
rc
 = 
	`£curôy__˛ónup_sögÀ
(&
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
, 
ªlﬂd
);

595 if(
rc
 !
MOSQ_ERR_SUCCESS
) Ñc;

597  
	`mosquôto_£curôy_˛ónup_deÁu…
(
ªlﬂd
);

598 
	}
}

602 
	$a˛__check_sögÀ
(
mosquôto__auth_∂ugö_c⁄fig
 *
auth_∂ugö
, 
mosquôto
 *
c⁄ãxt
, 
mosquôto_a˛_msg
 *
msg
, 
ac˚ss
)

604 c⁄° *
u£∫ame
;

605 c⁄° *
t›ic
 = 
msg
->topic;

607 
u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
c⁄ãxt
);

608 if(
auth_∂ugö
->
díy_•ecül_ch¨s
 =
åue
){

615 if(
u£∫ame
 && 
	`°Ωbrk
(username, "+#")){

616 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "ACL díyögác˚s†tÿ˛õ¡ wôh d™gîou†u£∫amê\"%s\"", 
u£∫ame
);

617  
MOSQ_ERR_ACL_DENIED
;

619 if(
c⁄ãxt
->
id
 && 
	`°Ωbrk
(context->id, "+#")){

620 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "ACL díyögác˚s†tÿ˛õ¡ wôh d™gîou†˛õ¡ id \"%s\"", 
c⁄ãxt
->
id
);

621  
MOSQ_ERR_ACL_DENIED
;

625 if(
auth_∂ugö
->
∂ugö
.
vîsi⁄
 == 4){

626 if(
ac˚ss
 =
MOSQ_ACL_UNSUBSCRIBE
){

627  
MOSQ_ERR_SUCCESS
;

629  
auth_∂ugö
->
∂ugö
.
	`a˛_check_v4
◊uth_∂ugö->∂ugö.
u£r_d©a
, 
ac˚ss
, 
c⁄ãxt
, 
msg
);

630 }if(
auth_∂ugö
->
∂ugö
.
vîsi⁄
 == 3){

631 if(
ac˚ss
 =
MOSQ_ACL_UNSUBSCRIBE
){

632  
MOSQ_ERR_SUCCESS
;

634  
auth_∂ugö
->
∂ugö
.
	`a˛_check_v3
◊uth_∂ugö->∂ugö.
u£r_d©a
, 
ac˚ss
, 
c⁄ãxt
, 
msg
);

635 }if(
auth_∂ugö
->
∂ugö
.
vîsi⁄
 == 2){

636 if(
ac˚ss
 =
MOSQ_ACL_SUBSCRIBE
 ||ác˚s†=
MOSQ_ACL_UNSUBSCRIBE
){

637  
MOSQ_ERR_SUCCESS
;

639  
auth_∂ugö
->
∂ugö
.
	`a˛_check_v2
◊uth_∂ugö->∂ugö.
u£r_d©a
, 
c⁄ãxt
->
id
, 
u£∫ame
, 
t›ic
, 
ac˚ss
);

641  
MOSQ_ERR_INVAL
;

643 
	}
}

646 
	$a˛__check_dﬁœr
(c⁄° *
t›ic
, 
ac˚ss
)

648 
rc
;

649 
boﬁ
 
m©ch
 = 
Ál£
;

651 if(
t›ic
[0] !'$'Ë 
MOSQ_ERR_SUCCESS
;

653 if(!
	`°∫cmp
(
t›ic
, "$SYS", 4)){

654 if(
ac˚ss
 =
MOSQ_ACL_WRITE
){

656 
rc
 = 
	`mosquôto_t›ic_m©ches_sub
("$SYS/brokî/c⁄√˘i⁄/+/°©e", 
t›ic
, &
m©ch
);

657 if(
rc
 =
MOSQ_ERR_SUCCESS
 && 
m©ch
 =
åue
){

658  
MOSQ_ERR_SUCCESS
;

660  
MOSQ_ERR_ACL_DENIED
;

663  
MOSQ_ERR_SUCCESS
;

665 }if(!
	`°∫cmp
(
t›ic
, "$share", 6)){

667 if(
ac˚ss
 =
MOSQ_ACL_SUBSCRIBE
 ||ác˚s†=
MOSQ_ACL_UNSUBSCRIBE
){

668  
MOSQ_ERR_SUCCESS
;

670  
MOSQ_ERR_ACL_DENIED
;

674  
MOSQ_ERR_SUCCESS
;

676 
	}
}

679 
	$mosquôto_a˛_check
(
mosquôto
 *
c⁄ãxt
, c⁄° *
t›ic
, 
uöt32_t
 
∑ylﬂdÀn
, * 
∑ylﬂd
, 
uöt8_t
 
qos
, 
boﬁ
 
ªèö
, 
ac˚ss
)

681 
rc
;

682 
i
;

683 
mosquôto__£curôy_›ti⁄s
 *
›ts
;

684 
mosquôto_a˛_msg
 
msg
;

685 
mosquôto__ˇŒback
 *
cb_ba£
;

686 
mosquôto_evt_a˛_check
 
evít_d©a
;

688 if(!
c⁄ãxt
->
id
){

689  
MOSQ_ERR_ACL_DENIED
;

691 if(
c⁄ãxt
->
bridge
){

692  
MOSQ_ERR_SUCCESS
;

695 
rc
 = 
	`a˛__check_dﬁœr
(
t›ic
, 
ac˚ss
);

696 if(
rc
) Ñc;

701 
rc
 = 
MOSQ_ERR_SUCCESS
;

703 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

704 if(
c⁄ãxt
->
li°íî
){

705 
›ts
 = &
c⁄ãxt
->
li°íî
->
£curôy_›ti⁄s
;

707  
MOSQ_ERR_ACL_DENIED
;

710 
›ts
 = &
db
.
c⁄fig
->
£curôy_›ti⁄s
;

713 
	`mem£t
(&
msg
, 0, (msg));

714 
msg
.
t›ic
 =Åopic;

715 
msg
.
∑ylﬂdÀn
 =Öayloadlen;

716 
msg
.
∑ylﬂd
 =Öayload;

717 
msg
.
qos
 = qos;

718 
msg
.
ªèö
 =Ñetain;

720 
	`DL_FOREACH
(
›ts
->
∂ugö_ˇŒbacks
.
a˛_check
, 
cb_ba£
){

723 
	`mem£t
(&
evít_d©a
, 0, (event_data));

724 
evít_d©a
.
˛õ¡
 = 
c⁄ãxt
;

725 
evít_d©a
.
ac˚ss
 =áccess;

726 
evít_d©a
.
t›ic
 =Åopic;

727 
evít_d©a
.
∑ylﬂdÀn
 =Öayloadlen;

728 
evít_d©a
.
∑ylﬂd
 =Öayload;

729 
evít_d©a
.
qos
 = qos;

730 
evít_d©a
.
ªèö
 =Ñetain;

731 
evít_d©a
.
¥›îtõs
 = 
NULL
;

732 
rc
 = 
cb_ba£
->
	`cb
(
MOSQ_EVT_ACL_CHECK
, &
evít_d©a
, cb_ba£->
u£rd©a
);

733 if(
rc
 !
MOSQ_ERR_PLUGIN_DEFER
){

734  
rc
;

738 
i
=0; i<
›ts
->
auth_∂ugö_c⁄fig_cou¡
; i++){

739 if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 < 5){

740 
rc
 = 
	`a˛__check_sögÀ
(&
›ts
->
auth_∂ugö_c⁄figs
[
i
], 
c⁄ãxt
, &
msg
, 
ac˚ss
);

741 if(
rc
 !
MOSQ_ERR_PLUGIN_DEFER
){

742  
rc
;

749 if(
rc
 =
MOSQ_ERR_PLUGIN_DEFER
){

750 
rc
 = 
MOSQ_ERR_ACL_DENIED
;

752  
rc
;

753 
	}
}

755 
	$mosquôto_u≈wd_check
(
mosquôto
 *
c⁄ãxt
)

757 
rc
;

758 
i
;

759 
mosquôto__£curôy_›ti⁄s
 *
›ts
;

760 
mosquôto_evt_basic_auth
 
evít_d©a
;

761 
mosquôto__ˇŒback
 *
cb_ba£
;

762 
boﬁ
 
∂ugö_u£d
 = 
Ál£
;

764 
rc
 = 
MOSQ_ERR_PLUGIN_DEFER
;

766 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

767 if(
c⁄ãxt
->
li°íî
 =
NULL
){

768  
MOSQ_ERR_AUTH
;

770 
›ts
 = &
c⁄ãxt
->
li°íî
->
£curôy_›ti⁄s
;

772 
›ts
 = &
db
.
c⁄fig
->
£curôy_›ti⁄s
;

775 
	`DL_FOREACH
(
›ts
->
∂ugö_ˇŒbacks
.
basic_auth
, 
cb_ba£
){

776 
	`mem£t
(&
evít_d©a
, 0, (event_data));

777 
evít_d©a
.
˛õ¡
 = 
c⁄ãxt
;

778 
evít_d©a
.
u£∫ame
 = 
c⁄ãxt
->username;

779 
evít_d©a
.
∑ssw‹d
 = 
c⁄ãxt
->password;

780 
rc
 = 
cb_ba£
->
	`cb
(
MOSQ_EVT_BASIC_AUTH
, &
evít_d©a
, cb_ba£->
u£rd©a
);

781 if(
rc
 !
MOSQ_ERR_PLUGIN_DEFER
){

782  
rc
;

784 
∂ugö_u£d
 = 
åue
;

787 
i
=0; i<
›ts
->
auth_∂ugö_c⁄fig_cou¡
; i++){

788 if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 4

789 && 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u≈wd_check_v4
){

791 
rc
 = 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`u≈wd_check_v4
(

792 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

793 
c⁄ãxt
,

794 
c⁄ãxt
->
u£∫ame
,

795 
c⁄ãxt
->
∑ssw‹d
);

796 
∂ugö_u£d
 = 
åue
;

798 }if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 3){

799 
rc
 = 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`u≈wd_check_v3
(

800 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

801 
c⁄ãxt
,

802 
c⁄ãxt
->
u£∫ame
,

803 
c⁄ãxt
->
∑ssw‹d
);

804 
∂ugö_u£d
 = 
åue
;

806 }if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 2){

807 
rc
 = 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`u≈wd_check_v2
(

808 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

809 
c⁄ãxt
->
u£∫ame
,

810 
c⁄ãxt
->
∑ssw‹d
);

811 
∂ugö_u£d
 = 
åue
;

817 if(
∂ugö_u£d
 =
Ál£
){

818 if((
db
.
c⁄fig
->
≥r_li°íî_£âögs
 && 
c⁄ãxt
->
li°íî
->
£curôy_›ti⁄s
.
Ælow_™⁄ymous
 !
Ál£
)

819 || (!
db
.
c⁄fig
->
≥r_li°íî_£âögs
 && db.c⁄fig->
£curôy_›ti⁄s
.
Ælow_™⁄ymous
 !
Ál£
)){

821  
MOSQ_ERR_SUCCESS
;

823  
MOSQ_ERR_AUTH
;

826 if(
rc
 =
MOSQ_ERR_PLUGIN_DEFER
){

827 if(
c⁄ãxt
->
u£∫ame
 =
NULL
 &&

828 ((
db
.
c⁄fig
->
≥r_li°íî_£âögs
 && 
c⁄ãxt
->
li°íî
->
£curôy_›ti⁄s
.
Ælow_™⁄ymous
 !
Ál£
)

829 || (!
db
.
c⁄fig
->
≥r_li°íî_£âögs
 && db.c⁄fig->
£curôy_›ti⁄s
.
Ælow_™⁄ymous
 !
Ál£
))){

831  
MOSQ_ERR_SUCCESS
;

833  
MOSQ_ERR_AUTH
;

838  
rc
;

839 
	}
}

841 
	$mosquôto_psk_key_gë
(
mosquôto
 *
c⁄ãxt
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
)

843 
rc
;

844 
i
;

845 
mosquôto__£curôy_›ti⁄s
 *
›ts
;

846 
mosquôto_evt_psk_key
 
evít_d©a
;

847 
mosquôto__ˇŒback
 *
cb_ba£
;

849 
rc
 = 
	`mosquôto_psk_key_gë_deÁu…
(
c⁄ãxt
, 
höt
, 
idítôy
, 
key
, 
max_key_Àn
);

850 if(
rc
 !
MOSQ_ERR_PLUGIN_DEFER
){

851  
rc
;

858 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

859 
›ts
 = &
c⁄ãxt
->
li°íî
->
£curôy_›ti⁄s
;

861 
›ts
 = &
db
.
c⁄fig
->
£curôy_›ti⁄s
;

864 
	`DL_FOREACH
(
›ts
->
∂ugö_ˇŒbacks
.
psk_key
, 
cb_ba£
){

865 
	`mem£t
(&
evít_d©a
, 0, (event_data));

866 
evít_d©a
.
˛õ¡
 = 
c⁄ãxt
;

867 
evít_d©a
.
höt
 = hint;

868 
evít_d©a
.
idítôy
 = identity;

869 
evít_d©a
.
key
 = key;

870 
evít_d©a
.
max_key_Àn
 = max_key_len;

871 
rc
 = 
cb_ba£
->
	`cb
(
MOSQ_EVT_PSK_KEY
, &
evít_d©a
, cb_ba£->
u£rd©a
);

872 if(
rc
 !
MOSQ_ERR_PLUGIN_DEFER
){

873  
rc
;

877 
i
=0; i<
›ts
->
auth_∂ugö_c⁄fig_cou¡
; i++){

878 if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 4

879 && 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
psk_key_gë_v4
){

881 
rc
 = 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`psk_key_gë_v4
(

882 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

883 
c⁄ãxt
,

884 
höt
,

885 
idítôy
,

886 
key
,

887 
max_key_Àn
);

889 }if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 3){

890 
rc
 = 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`psk_key_gë_v3
(

891 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

892 
c⁄ãxt
,

893 
höt
,

894 
idítôy
,

895 
key
,

896 
max_key_Àn
);

898 }if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
vîsi⁄
 == 2){

899 
rc
 = 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`psk_key_gë_v2
(

900 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

901 
höt
,

902 
idítôy
,

903 
key
,

904 
max_key_Àn
);

906 
rc
 = 
MOSQ_ERR_INVAL
;

908 if(
rc
 !
MOSQ_ERR_PLUGIN_DEFER
){

909  
rc
;

915 if(
rc
 =
MOSQ_ERR_PLUGIN_DEFER
){

916 
rc
 = 
MOSQ_ERR_AUTH
;

918  
rc
;

919 
	}
}

922 
	$mosquôto_£curôy_auth_°¨t
(
mosquôto
 *
c⁄ãxt
, 
boﬁ
 
ªauth
, c⁄° *
d©a_ö
, 
uöt16_t
 
d©a_ö_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
)

924 
rc
 = 
MOSQ_ERR_PLUGIN_DEFER
;

925 
i
;

926 
mosquôto__£curôy_›ti⁄s
 *
›ts
;

927 
mosquôto_evt_exãnded_auth
 
evít_d©a
;

928 
mosquôto__ˇŒback
 *
cb_ba£
;

930 if(!
c⁄ãxt
 || !c⁄ãxt->
li°íî
 || !c⁄ãxt->
auth_mëhod
Ë 
MOSQ_ERR_INVAL
;

931 if(!
d©a_out
 || !
d©a_out_Àn
Ë 
MOSQ_ERR_INVAL
;

933 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

934 
›ts
 = &
c⁄ãxt
->
li°íî
->
£curôy_›ti⁄s
;

936 
›ts
 = &
db
.
c⁄fig
->
£curôy_›ti⁄s
;

939 
	`DL_FOREACH
(
›ts
->
∂ugö_ˇŒbacks
.
ext_auth_°¨t
, 
cb_ba£
){

940 
	`mem£t
(&
evít_d©a
, 0, (event_data));

941 
evít_d©a
.
˛õ¡
 = 
c⁄ãxt
;

942 
evít_d©a
.
auth_mëhod
 = 
c⁄ãxt
->auth_method;

943 
evít_d©a
.
d©a_ö
 = data_in;

944 
evít_d©a
.
d©a_out
 = 
NULL
;

945 
evít_d©a
.
d©a_ö_Àn
 = data_in_len;

946 
evít_d©a
.
d©a_out_Àn
 = 0;

947 
rc
 = 
cb_ba£
->
	`cb
(
MOSQ_EVT_EXT_AUTH_START
, &
evít_d©a
, cb_ba£->
u£rd©a
);

948 if(
rc
 !
MOSQ_ERR_PLUGIN_DEFER
){

949 *
d©a_out
 = 
evít_d©a
.data_out;

950 *
d©a_out_Àn
 = 
evít_d©a
.data_out_len;

951  
rc
;

955 
i
=0; i<
›ts
->
auth_∂ugö_c⁄fig_cou¡
; i++){

956 if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
auth_°¨t_v4
){

957 *
d©a_out
 = 
NULL
;

958 *
d©a_out_Àn
 = 0;

960 
rc
 = 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`auth_°¨t_v4
(

961 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

962 
c⁄ãxt
,

963 
c⁄ãxt
->
auth_mëhod
,

964 
ªauth
,

965 
d©a_ö
, 
d©a_ö_Àn
,

966 
d©a_out
, 
d©a_out_Àn
);

968 if(
rc
 =
MOSQ_ERR_SUCCESS
){

969  
MOSQ_ERR_SUCCESS
;

970 }if(
rc
 =
MOSQ_ERR_AUTH_CONTINUE
){

971  
MOSQ_ERR_AUTH_CONTINUE
;

972 }if(
rc
 !
MOSQ_ERR_NOT_SUPPORTED
){

973  
rc
;

978  
MOSQ_ERR_NOT_SUPPORTED
;

979 
	}
}

982 
	$mosquôto_£curôy_auth_c⁄töue
(
mosquôto
 *
c⁄ãxt
, c⁄° *
d©a_ö
, 
uöt16_t
 
d©a_ö_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
)

984 
rc
 = 
MOSQ_ERR_PLUGIN_DEFER
;

985 
i
;

986 
mosquôto__£curôy_›ti⁄s
 *
›ts
;

987 
mosquôto_evt_exãnded_auth
 
evít_d©a
;

988 
mosquôto__ˇŒback
 *
cb_ba£
;

990 if(!
c⁄ãxt
 || !c⁄ãxt->
li°íî
 || !c⁄ãxt->
auth_mëhod
Ë 
MOSQ_ERR_INVAL
;

991 if(!
d©a_out
 || !
d©a_out_Àn
Ë 
MOSQ_ERR_INVAL
;

993 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

994 
›ts
 = &
c⁄ãxt
->
li°íî
->
£curôy_›ti⁄s
;

996 
›ts
 = &
db
.
c⁄fig
->
£curôy_›ti⁄s
;

999 
	`DL_FOREACH
(
›ts
->
∂ugö_ˇŒbacks
.
ext_auth_c⁄töue
, 
cb_ba£
){

1000 
	`mem£t
(&
evít_d©a
, 0, (event_data));

1001 
evít_d©a
.
˛õ¡
 = 
c⁄ãxt
;

1002 
evít_d©a
.
d©a_ö
 = data_in;

1003 
evít_d©a
.
d©a_out
 = 
NULL
;

1004 
evít_d©a
.
d©a_ö_Àn
 = data_in_len;

1005 
evít_d©a
.
d©a_out_Àn
 = 0;

1006 
rc
 = 
cb_ba£
->
	`cb
(
MOSQ_EVT_EXT_AUTH_CONTINUE
, &
evít_d©a
, cb_ba£->
u£rd©a
);

1007 if(
rc
 !
MOSQ_ERR_PLUGIN_DEFER
){

1008 *
d©a_out
 = 
evít_d©a
.data_out;

1009 *
d©a_out_Àn
 = 
evít_d©a
.data_out_len;

1010  
rc
;

1014 
i
=0; i<
›ts
->
auth_∂ugö_c⁄fig_cou¡
; i++){

1015 if(
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
auth_c⁄töue_v4
){

1016 *
d©a_out
 = 
NULL
;

1017 *
d©a_out_Àn
 = 0;

1019 
rc
 = 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
	`auth_c⁄töue_v4
(

1020 
›ts
->
auth_∂ugö_c⁄figs
[
i
].
∂ugö
.
u£r_d©a
,

1021 
c⁄ãxt
,

1022 
c⁄ãxt
->
auth_mëhod
,

1023 
d©a_ö
, 
d©a_ö_Àn
,

1024 
d©a_out
, 
d©a_out_Àn
);

1026 if(
rc
 =
MOSQ_ERR_SUCCESS
){

1027  
MOSQ_ERR_SUCCESS
;

1028 }if(
rc
 =
MOSQ_ERR_AUTH_CONTINUE
){

1029  
MOSQ_ERR_AUTH_CONTINUE
;

1030 }if(
rc
 !
MOSQ_ERR_NOT_SUPPORTED
){

1031  
rc
;

1036  
MOSQ_ERR_NOT_SUPPORTED
;

1037 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/security_default.c

19 
	~"c⁄fig.h
"

21 
	~<˘y≥.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

25 
	~"mosquôto_brokî_öã∫Æ.h
"

26 
	~"mem‹y_mosq.h
"

27 
	~"mqâ_¥Ÿocﬁ.h
"

28 
	~"£nd_mosq.h
"

29 
	~"misc_mosq.h
"

30 
	~"utû_mosq.h
"

32 
a˛fûe__∑r£
(
mosquôto__£curôy_›ti⁄s
 *
£curôy_›ts
);

33 
u≈wd__fûe_∑r£
(
mosquôto__u≈wd
 **
u≈wd
, c⁄° *
∑ssw‹d_fûe
);

34 
a˛__˛ónup
(
boﬁ
 
ªlﬂd
);

35 
u≈wd__˛ónup
(
mosquôto__u≈wd
 **
u≈wd
, 
boﬁ
 
ªlﬂd
);

36 
psk__fûe_∑r£
(
mosquôto__u≈wd
 **
psk_id
, c⁄° *
psk_fûe
);

37 #ifde‡
WITH_TLS


38 
pw__dige°
(c⁄° *
∑ssw‹d
, c⁄° *
ß…
, 
ß…_Àn
, *
hash
, *
hash_Àn
, 
mosquôto_pwhash_ty≥
 
hashty≥
, 
ôî©i⁄s
);

40 
mosquôto_u≈wd_check_deÁu…
(
evít
, *
evít_d©a
, *
u£rd©a
);

41 
mosquôto_a˛_check_deÁu…
(
evít
, *
evít_d©a
, *
u£rd©a
);

45 
	$mosquôto_£curôy_öô_deÁu…
(
boﬁ
 
ªlﬂd
)

47 
rc
;

48 
i
;

49 *
pwf
;

50 *
pskf
 = 
NULL
;

52 
	`UNUSED
(
ªlﬂd
);

55 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

56 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

57 
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
pid
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_∂ugö_id_t
));

58 if(
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
pid
 =
NULL
){

59 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

60  
MOSQ_ERR_NOMEM
;

62 
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
pid
->
li°íî
 = &db.config->listeners[i];

65 
db
.
c⁄fig
->
£curôy_›ti⁄s
.
pid
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto_∂ugö_id_t
));

66 if(
db
.
c⁄fig
->
£curôy_›ti⁄s
.
pid
 =
NULL
){

67 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

68  
MOSQ_ERR_NOMEM
;

73 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

74 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

75 
pwf
 = 
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
∑ssw‹d_fûe
;

76 if(
pwf
){

77 
rc
 = 
	`u≈wd__fûe_∑r£
(&
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
u≈wd
, 
pwf
);

78 if(
rc
){

79 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ o≥nögÖassw‹d fûê\"%s\".", 
pwf
);

80  
rc
;

82 
	`mosquôto_ˇŒback_ªgi°î
(
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
pid
,

83 
MOSQ_EVT_BASIC_AUTH
, 
mosquôto_u≈wd_check_deÁu…
, 
NULL
, NULL);

87 if(
db
.
c⁄fig
->
£curôy_›ti⁄s
.
∑ssw‹d_fûe
){

88 
pwf
 = 
db
.
c⁄fig
->
£curôy_›ti⁄s
.
∑ssw‹d_fûe
;

89 if(
pwf
){

90 
rc
 = 
	`u≈wd__fûe_∑r£
(&
db
.
c⁄fig
->
£curôy_›ti⁄s
.
u≈wd
, 
pwf
);

91 if(
rc
){

92 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ o≥nögÖassw‹d fûê\"%s\".", 
pwf
);

93  
rc
;

96 
	`mosquôto_ˇŒback_ªgi°î
(
db
.
c⁄fig
->
£curôy_›ti⁄s
.
pid
,

97 
MOSQ_EVT_BASIC_AUTH
, 
mosquôto_u≈wd_check_deÁu…
, 
NULL
, NULL);

102 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

103 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

104 if(
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
a˛_fûe
){

105 
rc
 = 
	`a˛fûe__∑r£
(&
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
);

106 if(
rc
){

107 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ o≥nögá˛ fûê\"%s\".", 
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
a˛_fûe
);

108  
rc
;

110 
	`mosquôto_ˇŒback_ªgi°î
(
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
pid
,

111 
MOSQ_EVT_ACL_CHECK
, 
mosquôto_a˛_check_deÁu…
, 
NULL
, NULL);

115 if(
db
.
c⁄fig
->
£curôy_›ti⁄s
.
a˛_fûe
){

116 
rc
 = 
	`a˛fûe__∑r£
(&
db
.
c⁄fig
->
£curôy_›ti⁄s
);

117 if(
rc
){

118 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ o≥nögá˛ fûê\"%s\".", 
db
.
c⁄fig
->
£curôy_›ti⁄s
.
a˛_fûe
);

119  
rc
;

121 
	`mosquôto_ˇŒback_ªgi°î
(
db
.
c⁄fig
->
£curôy_›ti⁄s
.
pid
,

122 
MOSQ_EVT_ACL_CHECK
, 
mosquôto_a˛_check_deÁu…
, 
NULL
, NULL);

127 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

128 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

129 
pskf
 = 
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
psk_fûe
;

130 if(
pskf
){

131 
rc
 = 
	`psk__fûe_∑r£
(&
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
psk_id
, 
pskf
);

132 if(
rc
){

133 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ o≥nögÖsk fûê\"%s\".", 
pskf
);

134  
rc
;

139 
pskf
 = 
db
.
c⁄fig
->
£curôy_›ti⁄s
.
psk_fûe
;

140 if(
pskf
){

141 
rc
 = 
	`psk__fûe_∑r£
(&
db
.
c⁄fig
->
£curôy_›ti⁄s
.
psk_id
, 
pskf
);

142 if(
rc
){

143 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹ o≥nögÖsk fûê\"%s\".", 
pskf
);

144  
rc
;

149  
MOSQ_ERR_SUCCESS
;

150 
	}
}

152 
	$mosquôto_£curôy_˛ónup_deÁu…
(
boﬁ
 
ªlﬂd
)

154 
rc
;

155 
i
;

157 
rc
 = 
	`a˛__˛ónup
(
ªlﬂd
);

158 if(
rc
 !
MOSQ_ERR_SUCCESS
) Ñc;

160 
rc
 = 
	`u≈wd__˛ónup
(&
db
.
c⁄fig
->
£curôy_›ti⁄s
.
u≈wd
, 
ªlﬂd
);

161 if(
rc
 !
MOSQ_ERR_SUCCESS
) Ñc;

163 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

164 if(
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
u≈wd
){

165 
rc
 = 
	`u≈wd__˛ónup
(&
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
u≈wd
, 
ªlﬂd
);

166 if(
rc
 !
MOSQ_ERR_SUCCESS
) Ñc;

170 
rc
 = 
	`u≈wd__˛ónup
(&
db
.
c⁄fig
->
£curôy_›ti⁄s
.
psk_id
, 
ªlﬂd
);

171 if(
rc
 !
MOSQ_ERR_SUCCESS
) Ñc;

173 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

174 if(
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
psk_id
){

175 
rc
 = 
	`u≈wd__˛ónup
(&
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
psk_id
, 
ªlﬂd
);

176 if(
rc
 !
MOSQ_ERR_SUCCESS
) Ñc;

180 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

181 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

182 if(
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
pid
){

183 
	`mosquôto_ˇŒback_uƒegi°î
(
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
pid
,

184 
MOSQ_EVT_BASIC_AUTH
, 
mosquôto_u≈wd_check_deÁu…
, 
NULL
);

185 
	`mosquôto_ˇŒback_uƒegi°î
(
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
pid
,

186 
MOSQ_EVT_ACL_CHECK
, 
mosquôto_a˛_check_deÁu…
, 
NULL
);

188 
	`mosquôto__‰ì
(
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
.
pid
);

192 if(
db
.
c⁄fig
->
£curôy_›ti⁄s
.
pid
){

193 
	`mosquôto_ˇŒback_uƒegi°î
(
db
.
c⁄fig
->
£curôy_›ti⁄s
.
pid
,

194 
MOSQ_EVT_BASIC_AUTH
, 
mosquôto_u≈wd_check_deÁu…
, 
NULL
);

195 
	`mosquôto_ˇŒback_uƒegi°î
(
db
.
c⁄fig
->
£curôy_›ti⁄s
.
pid
,

196 
MOSQ_EVT_ACL_CHECK
, 
mosquôto_a˛_check_deÁu…
, 
NULL
);

198 
	`mosquôto__‰ì
(
db
.
c⁄fig
->
£curôy_›ti⁄s
.
pid
);

201  
MOSQ_ERR_SUCCESS
;

202 
	}
}

205 
	$add__a˛
(
mosquôto__£curôy_›ti⁄s
 *
£curôy_›ts
, c⁄° *
u£r
, c⁄° *
t›ic
, 
ac˚ss
)

207 
mosquôto__a˛_u£r
 *
a˛_u£r
=
NULL
, *
u£r_èû
;

208 
mosquôto__a˛
 *
a˛
, *
a˛_èû
;

209 *
loˇl_t›ic
;

210 
boﬁ
 
√w_u£r
 = 
Ál£
;

212 if(!
£curôy_›ts
 || !
t›ic
Ë 
MOSQ_ERR_INVAL
;

214 
loˇl_t›ic
 = 
	`mosquôto__°rdup
(
t›ic
);

215 if(!
loˇl_t›ic
){

216  
MOSQ_ERR_NOMEM
;

219 if(
£curôy_›ts
->
a˛_li°
){

220 
u£r_èû
 = 
£curôy_›ts
->
a˛_li°
;

221 
u£r_èû
){

222 if(
u£r
 =
NULL
){

223 if(
u£r_èû
->
u£∫ame
 =
NULL
){

224 
a˛_u£r
 = 
u£r_èû
;

227 }if(
u£r_èû
->
u£∫ame
 && !
	`°rcmp
(u£r_èû->u£∫ame, 
u£r
)){

228 
a˛_u£r
 = 
u£r_èû
;

231 
u£r_èû
 = u£r_èû->
√xt
;

234 if(!
a˛_u£r
){

235 
a˛_u£r
 = 
	`mosquôto__mÆloc
((
mosquôto__a˛_u£r
));

236 if(!
a˛_u£r
){

237 
	`mosquôto__‰ì
(
loˇl_t›ic
);

238  
MOSQ_ERR_NOMEM
;

240 
√w_u£r
 = 
åue
;

241 if(
u£r
){

242 
a˛_u£r
->
u£∫ame
 = 
	`mosquôto__°rdup
(
u£r
);

243 if(!
a˛_u£r
->
u£∫ame
){

244 
	`mosquôto__‰ì
(
loˇl_t›ic
);

245 
	`mosquôto__‰ì
(
a˛_u£r
);

246  
MOSQ_ERR_NOMEM
;

249 
a˛_u£r
->
u£∫ame
 = 
NULL
;

251 
a˛_u£r
->
√xt
 = 
NULL
;

252 
a˛_u£r
->
a˛
 = 
NULL
;

255 
a˛
 = 
	`mosquôto__mÆloc
((
mosquôto__a˛
));

256 if(!
a˛
){

257 
	`mosquôto__‰ì
(
loˇl_t›ic
);

258 
	`mosquôto__‰ì
(
a˛_u£r
->
u£∫ame
);

259 
	`mosquôto__‰ì
(
a˛_u£r
);

260  
MOSQ_ERR_NOMEM
;

262 
a˛
->
ac˚ss
 =áccess;

263 
a˛
->
t›ic
 = 
loˇl_t›ic
;

264 
a˛
->
√xt
 = 
NULL
;

265 
a˛
->
ccou¡
 = 0;

266 
a˛
->
ucou¡
 = 0;

269 if(
a˛_u£r
->
a˛
){

270 
a˛_èû
 = 
a˛_u£r
->
a˛
;

271 if(
ac˚ss
 =
MOSQ_ACL_NONE
){

273 
a˛
->
√xt
 = 
a˛_èû
;

274 
a˛_u£r
->
a˛
 =ácl;

276 
a˛_èû
->
√xt
){

277 
a˛_èû
 =á˛_èû->
√xt
;

279 
a˛_èû
->
√xt
 = 
a˛
;

282 
a˛_u£r
->
a˛
 =ácl;

285 if(
√w_u£r
){

287 if(
£curôy_›ts
->
a˛_li°
){

288 
u£r_èû
 = 
£curôy_›ts
->
a˛_li°
;

289 
u£r_èû
->
√xt
){

290 
u£r_èû
 = u£r_èû->
√xt
;

292 
u£r_èû
->
√xt
 = 
a˛_u£r
;

294 
£curôy_›ts
->
a˛_li°
 = 
a˛_u£r
;

298  
MOSQ_ERR_SUCCESS
;

299 
	}
}

301 
	$add__a˛_∑âîn
(
mosquôto__£curôy_›ti⁄s
 *
£curôy_›ts
, c⁄° *
t›ic
, 
ac˚ss
)

303 
mosquôto__a˛
 *
a˛
, *
a˛_èû
;

304 *
loˇl_t›ic
;

305 *
s
;

307 if(!
£curôy_›ts
| !
t›ic
Ë 
MOSQ_ERR_INVAL
;

309 
loˇl_t›ic
 = 
	`mosquôto__°rdup
(
t›ic
);

310 if(!
loˇl_t›ic
){

311  
MOSQ_ERR_NOMEM
;

314 
a˛
 = 
	`mosquôto__mÆloc
((
mosquôto__a˛
));

315 if(!
a˛
){

316 
	`mosquôto__‰ì
(
loˇl_t›ic
);

317  
MOSQ_ERR_NOMEM
;

319 
a˛
->
ac˚ss
 =áccess;

320 
a˛
->
t›ic
 = 
loˇl_t›ic
;

321 
a˛
->
√xt
 = 
NULL
;

323 
a˛
->
ccou¡
 = 0;

324 
s
 = 
loˇl_t›ic
;

325 
s
){

326 
s
 = 
	`°r°r
(s, "%c");

327 if(
s
){

328 
a˛
->
ccou¡
++;

329 
s
+=2;

333 
a˛
->
ucou¡
 = 0;

334 
s
 = 
loˇl_t›ic
;

335 
s
){

336 
s
 = 
	`°r°r
(s, "%u");

337 if(
s
){

338 
a˛
->
ucou¡
++;

339 
s
+=2;

343 if(
a˛
->
ccou¡
 =0 &&á˛->
ucou¡
 == 0){

344 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WARNING
,

346 
t›ic
);

349 if(
£curôy_›ts
->
a˛_∑âîns
){

350 
a˛_èû
 = 
£curôy_›ts
->
a˛_∑âîns
;

351 if(
ac˚ss
 =
MOSQ_ACL_NONE
){

353 
a˛
->
√xt
 = 
a˛_èû
;

354 
£curôy_›ts
->
a˛_∑âîns
 = 
a˛
;

356 
a˛_èû
->
√xt
){

357 
a˛_èû
 =á˛_èû->
√xt
;

359 
a˛_èû
->
√xt
 = 
a˛
;

362 
£curôy_›ts
->
a˛_∑âîns
 = 
a˛
;

365  
MOSQ_ERR_SUCCESS
;

366 
	}
}

368 
	$mosquôto_a˛_check_deÁu…
(
evít
, *
evít_d©a
, *
u£rd©a
)

370 
mosquôto_evt_a˛_check
 *
ed
 = 
evít_d©a
;

371 *
loˇl_a˛
;

372 
mosquôto__a˛
 *
a˛_roŸ
;

373 
boﬁ
 
ªsu…
;

374 
size_t
 
i
;

375 
size_t
 
Àn
, 
éí
, 
˛í
, 
uÀn
;

376 *
s
;

377 
mosquôto__£curôy_›ti⁄s
 *
£curôy_›ts
 = 
NULL
;

379 
	`UNUSED
(
evít
);

380 
	`UNUSED
(
u£rd©a
);

382 if(
ed
->
˛õ¡
->
bridge
Ë 
MOSQ_ERR_SUCCESS
;

383 if(
ed
->
ac˚ss
 =
MOSQ_ACL_SUBSCRIBE
 ||Éd->ac˚s†=
MOSQ_ACL_UNSUBSCRIBE
Ë 
MOSQ_ERR_SUCCESS
;

385 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

386 if(!
ed
->
˛õ¡
->
li°íî
Ë 
MOSQ_ERR_ACL_DENIED
;

387 
£curôy_›ts
 = &
ed
->
˛õ¡
->
li°íî
->
£curôy_›ti⁄s
;

389 
£curôy_›ts
 = &
db
.
c⁄fig
->
£curôy_›ti⁄s
;

391 if(!
£curôy_›ts
->
a˛_fûe
 && !£curôy_›ts->
a˛_li°
 && !£curôy_›ts->
a˛_∑âîns
){

392  
MOSQ_ERR_PLUGIN_DEFER
;

395 if(!
ed
->
˛õ¡
->
a˛_li°
 && !
£curôy_›ts
->
a˛_∑âîns
Ë 
MOSQ_ERR_ACL_DENIED
;

397 if(
ed
->
˛õ¡
->
a˛_li°
){

398 
a˛_roŸ
 = 
ed
->
˛õ¡
->
a˛_li°
->
a˛
;

400 
a˛_roŸ
 = 
NULL
;

404 
a˛_roŸ
){

408 if(
ed
->
t›ic
[0] ='$' && 
a˛_roŸ
->topic[0] != '$'){

409 
a˛_roŸ
 =á˛_roŸ->
√xt
;

412 
	`mosquôto_t›ic_m©ches_sub
(
a˛_roŸ
->
t›ic
, 
ed
->t›ic, &
ªsu…
);

413 if(
ªsu…
){

414 if(
a˛_roŸ
->
ac˚ss
 =
MOSQ_ACL_NONE
){

416  
MOSQ_ERR_ACL_DENIED
;

418 if(
ed
->
ac˚ss
 & 
a˛_roŸ
->access){

420  
MOSQ_ERR_SUCCESS
;

423 
a˛_roŸ
 =á˛_roŸ->
√xt
;

426 
a˛_roŸ
 = 
£curôy_›ts
->
a˛_∑âîns
;

428 if(
a˛_roŸ
){

436 if(
ed
->
˛õ¡
->
u£∫ame
 && 
	`°Ωbrk
(ed->client->username, "+#")){

437 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "ACL díyögác˚s†tÿ˛õ¡ wôh d™gîou†u£∫amê\"%s\"", 
ed
->
˛õ¡
->
u£∫ame
);

438  
MOSQ_ERR_ACL_DENIED
;

441 if(
ed
->
˛õ¡
->
id
 && 
	`°Ωbrk
(ed->client->id, "+#")){

442 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "ACL díyögác˚s†tÿ˛õ¡ wôh d™gîou†˛õ¡ id \"%s\"", 
ed
->
˛õ¡
->
id
);

443  
MOSQ_ERR_ACL_DENIED
;

448 if(!
ed
->
˛õ¡
->
id
Ë 
MOSQ_ERR_ACL_DENIED
;

449 
˛í
 = 
	`°æí
(
ed
->
˛õ¡
->
id
);

451 
a˛_roŸ
){

452 
éí
 = 
	`°æí
(
a˛_roŸ
->
t›ic
);

454 if(
a˛_roŸ
->
ucou¡
 && !
ed
->
˛õ¡
->
u£∫ame
){

455 
a˛_roŸ
 =á˛_roŸ->
√xt
;

459 if(
ed
->
˛õ¡
->
u£∫ame
){

460 
uÀn
 = 
	`°æí
(
ed
->
˛õ¡
->
u£∫ame
);

461 
Àn
 = 
éí
 + (
size_t
)
a˛_roŸ
->
ccou¡
*(
˛í
-2Ë+ (size_tÔ˛_roŸ->
ucou¡
*(
uÀn
-2);

463 
uÀn
 = 0;

464 
Àn
 = 
éí
 + (
size_t
)
a˛_roŸ
->
ccou¡
*(
˛í
-2);

466 
loˇl_a˛
 = 
	`mosquôto__mÆloc
(
Àn
+1);

467 if(!
loˇl_a˛
Ë 
MOSQ_ERR_NOMEM
;

468 
s
 = 
loˇl_a˛
;

469 
i
=0; i<
éí
; i++){

470 if(
i
<
éí
-1 && 
a˛_roŸ
->
t›ic
[i] == '%'){

471 if(
a˛_roŸ
->
t›ic
[
i
+1] == 'c'){

472 
i
++;

473 
	`°∫˝y
(
s
, 
ed
->
˛õ¡
->
id
, 
˛í
);

474 
s
+=
˛í
;

476 }if(
ed
->
˛õ¡
->
u£∫ame
 && 
a˛_roŸ
->
t›ic
[
i
+1] == 'u'){

477 
i
++;

478 
	`°∫˝y
(
s
, 
ed
->
˛õ¡
->
u£∫ame
, 
uÀn
);

479 
s
+=
uÀn
;

483 
s
[0] = 
a˛_roŸ
->
t›ic
[
i
];

484 
s
++;

486 
loˇl_a˛
[
Àn
] = '\0';

488 
	`mosquôto_t›ic_m©ches_sub
(
loˇl_a˛
, 
ed
->
t›ic
, &
ªsu…
);

489 
	`mosquôto__‰ì
(
loˇl_a˛
);

490 if(
ªsu…
){

491 if(
a˛_roŸ
->
ac˚ss
 =
MOSQ_ACL_NONE
){

493  
MOSQ_ERR_ACL_DENIED
;

495 if(
ed
->
ac˚ss
 & 
a˛_roŸ
->access){

497  
MOSQ_ERR_SUCCESS
;

501 
a˛_roŸ
 =á˛_roŸ->
√xt
;

504  
MOSQ_ERR_ACL_DENIED
;

505 
	}
}

508 
	$a˛fûe__∑r£
(
mosquôto__£curôy_›ti⁄s
 *
£curôy_›ts
)

510 
FILE
 *
a˛Âå
 = 
NULL
;

511 *
tokí
;

512 *
u£r
 = 
NULL
;

513 *
t›ic
;

514 *
ac˚ss_s
;

515 
ac˚ss
;

516 
rc
 = 
MOSQ_ERR_SUCCESS
;

517 
size_t
 
¶í
;

518 
t›ic_∑âîn
;

519 *
ßvïå
 = 
NULL
;

520 *
buf
 = 
NULL
;

521 
buÊí
 = 256;

523 if(!
db
.
c⁄fig
Ë 
MOSQ_ERR_INVAL
;

524 if(!
£curôy_›ts
Ë 
MOSQ_ERR_INVAL
;

525 if(!
£curôy_›ts
->
a˛_fûe
Ë 
MOSQ_ERR_SUCCESS
;

527 
buf
 = 
	`mosquôto__mÆloc
((
size_t
)
buÊí
);

528 if(
buf
 =
NULL
){

529 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

530  
MOSQ_ERR_NOMEM
;

533 
a˛Âå
 = 
	`mosquôto__f›í
(
£curôy_›ts
->
a˛_fûe
, "π", 
Ál£
);

534 if(!
a˛Âå
){

535 
	`mosquôto__‰ì
(
buf
);

536 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿ›íá˛_fûê\"%s\".", 
£curôy_›ts
->
a˛_fûe
);

537  
MOSQ_ERR_UNKNOWN
;

544 
	`fgës_exãndög
(&
buf
, &
buÊí
, 
a˛Âå
)){

545 
¶í
 = 
	`°æí
(
buf
);

546 
¶í
 > 0 && 
	`is•a˚
(
buf
[slen-1])){

547 
buf
[
¶í
-1] = '\0';

548 
¶í
 = 
	`°æí
(
buf
);

550 if(
buf
[0] == '#'){

553 
tokí
 = 
	`°πok_r
(
buf
, " ", &
ßvïå
);

554 if(
tokí
){

555 if(!
	`°rcmp
(
tokí
, "topic") || !strcmp(token, "pattern")){

556 if(!
	`°rcmp
(
tokí
, "topic")){

557 
t›ic_∑âîn
 = 0;

559 
t›ic_∑âîn
 = 1;

562 
ac˚ss_s
 = 
	`°πok_r
(
NULL
, " ", &
ßvïå
);

563 if(!
ac˚ss_s
){

564 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: Em±yÅ›i¯öá˛_fûê\"%s\".", 
£curôy_›ts
->
a˛_fûe
);

565 
rc
 = 
MOSQ_ERR_INVAL
;

568 
tokí
 = 
	`°πok_r
(
NULL
, "", &
ßvïå
);

569 if(
tokí
){

570 
t›ic
 = 
	`misc__åimbœnks
(
tokí
);

572 
t›ic
 = 
ac˚ss_s
;

573 
ac˚ss_s
 = 
NULL
;

575 if(
ac˚ss_s
){

576 if(!
	`°rcmp
(
ac˚ss_s
, "read")){

577 
ac˚ss
 = 
MOSQ_ACL_READ
;

578 }if(!
	`°rcmp
(
ac˚ss_s
, "write")){

579 
ac˚ss
 = 
MOSQ_ACL_WRITE
;

580 }if(!
	`°rcmp
(
ac˚ss_s
, "readwrite")){

581 
ac˚ss
 = 
MOSQ_ACL_READ
 | 
MOSQ_ACL_WRITE
;

582 }if(!
	`°rcmp
(
ac˚ss_s
, "deny")){

583 
ac˚ss
 = 
MOSQ_ACL_NONE
;

585 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆidÅ›i¯ac˚s†ty≥ \"%s\" i¿a˛_fûê\"%s\".", 
ac˚ss_s
, 
£curôy_›ts
->
a˛_fûe
);

586 
rc
 = 
MOSQ_ERR_INVAL
;

590 
ac˚ss
 = 
MOSQ_ACL_READ
 | 
MOSQ_ACL_WRITE
;

592 
rc
 = 
	`mosquôto_sub_t›ic_check
(
t›ic
);

593 if(
rc
 !
MOSQ_ERR_SUCCESS
){

594 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆid ACLÅ›i¯\"%s\" i¿a˛_fûê\"%s\".", 
t›ic
, 
£curôy_›ts
->
a˛_fûe
);

595 
rc
 = 
MOSQ_ERR_INVAL
;

599 if(
t›ic_∑âîn
 == 0){

600 
rc
 = 
	`add__a˛
(
£curôy_›ts
, 
u£r
, 
t›ic
, 
ac˚ss
);

602 
rc
 = 
	`add__a˛_∑âîn
(
£curôy_›ts
, 
t›ic
, 
ac˚ss
);

604 if(
rc
){

607 }if(!
	`°rcmp
(
tokí
, "user")){

608 
tokí
 = 
	`°πok_r
(
NULL
, "", &
ßvïå
);

609 if(
tokí
){

610 
tokí
 = 
	`misc__åimbœnks
(token);

611 if(
¶í
 == 0){

612 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: Missög u£∫amêöá˛_fûê\"%s\".", 
£curôy_›ts
->
a˛_fûe
);

613 
rc
 = 
MOSQ_ERR_INVAL
;

616 
	`mosquôto__‰ì
(
u£r
);

617 
u£r
 = 
	`mosquôto__°rdup
(
tokí
);

618 if(!
u£r
){

619 
rc
 = 
MOSQ_ERR_NOMEM
;

623 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: Missög u£∫amêöá˛_fûê\"%s\".", 
£curôy_›ts
->
a˛_fûe
);

624 
rc
 = 
MOSQ_ERR_INVAL
;

628 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆidÜöêöá˛_fûê\"%s\": %s.", 
£curôy_›ts
->
a˛_fûe
, 
buf
);

629 
rc
 = 
MOSQ_ERR_INVAL
;

635 
	`mosquôto__‰ì
(
buf
);

636 
	`mosquôto__‰ì
(
u£r
);

637 
	`f˛o£
(
a˛Âå
);

639  
rc
;

640 
	}
}

642 
	$‰ì__a˛
(
mosquôto__a˛
 *
a˛
)

644 if(!
a˛
) ;

646 if(
a˛
->
√xt
){

647 
	`‰ì__a˛
(
a˛
->
√xt
);

649 
	`mosquôto__‰ì
(
a˛
->
t›ic
);

650 
	`mosquôto__‰ì
(
a˛
);

651 
	}
}

654 
	$a˛__˛ónup_sögÀ
(
mosquôto__£curôy_›ti⁄s
 *
£curôy_›ts
)

656 
mosquôto__a˛_u£r
 *
u£r_èû
;

658 
£curôy_›ts
->
a˛_li°
){

659 
u£r_èû
 = 
£curôy_›ts
->
a˛_li°
->
√xt
;

661 
	`‰ì__a˛
(
£curôy_›ts
->
a˛_li°
->
a˛
);

662 
	`mosquôto__‰ì
(
£curôy_›ts
->
a˛_li°
->
u£∫ame
);

663 
	`mosquôto__‰ì
(
£curôy_›ts
->
a˛_li°
);

665 
£curôy_›ts
->
a˛_li°
 = 
u£r_èû
;

668 if(
£curôy_›ts
->
a˛_∑âîns
){

669 
	`‰ì__a˛
(
£curôy_›ts
->
a˛_∑âîns
);

670 
£curôy_›ts
->
a˛_∑âîns
 = 
NULL
;

672 
	}
}

675 
	$a˛__˛ónup
(
boﬁ
 
ªlﬂd
)

677 
mosquôto
 *
c⁄ãxt
, *
˘xt_tmp
 = 
NULL
;

678 
i
;

680 
	`UNUSED
(
ªlﬂd
);

688 
	`HASH_ITER
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
c⁄ãxt
, 
˘xt_tmp
){

689 
c⁄ãxt
->
a˛_li°
 = 
NULL
;

692 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

693 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

694 
	`a˛__˛ónup_sögÀ
(&
db
.
c⁄fig
->
li°íîs
[
i
].
£curôy_›ti⁄s
);

697 
	`a˛__˛ónup_sögÀ
(&
db
.
c⁄fig
->
£curôy_›ti⁄s
);

700  
MOSQ_ERR_SUCCESS
;

701 
	}
}

704 
	$a˛__föd_a˛s
(
mosquôto
 *
c⁄ãxt
)

706 
mosquôto__a˛_u£r
 *
a˛_èû
;

707 
mosquôto__£curôy_›ti⁄s
 *
£curôy_›ts
;

710 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

711 if(!
c⁄ãxt
->
li°íî
){

712  
MOSQ_ERR_INVAL
;

714 
£curôy_›ts
 = &
c⁄ãxt
->
li°íî
->
£curôy_›ti⁄s
;

716 
£curôy_›ts
 = &
db
.
c⁄fig
->
£curôy_›ti⁄s
;

719 if(
£curôy_›ts
->
a˛_li°
){

720 
a˛_èû
 = 
£curôy_›ts
->
a˛_li°
;

721 
a˛_èû
){

722 if(
c⁄ãxt
->
u£∫ame
){

723 if(
a˛_èû
->
u£∫ame
 && !
	`°rcmp
(
c⁄ãxt
->username,ácl_tail->username)){

724 
c⁄ãxt
->
a˛_li°
 = 
a˛_èû
;

728 if(
a˛_èû
->
u£∫ame
 =
NULL
){

729 
c⁄ãxt
->
a˛_li°
 = 
a˛_èû
;

733 
a˛_èû
 =á˛_èû->
√xt
;

736 
c⁄ãxt
->
a˛_li°
 = 
NULL
;

739  
MOSQ_ERR_SUCCESS
;

740 
	}
}

743 
	$pwfûe__∑r£
(c⁄° *
fûe
, 
mosquôto__u≈wd
 **
roŸ
)

745 
FILE
 *
pwfûe
;

746 
mosquôto__u≈wd
 *
u≈wd
;

747 *
u£∫ame
, *
∑ssw‹d
;

748 *
ßvïå
 = 
NULL
;

749 *
buf
;

750 
buÊí
 = 256;

752 
buf
 = 
	`mosquôto__mÆloc
((
size_t
)
buÊí
);

753 if(
buf
 =
NULL
){

754 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

755  
MOSQ_ERR_NOMEM
;

758 
pwfûe
 = 
	`mosquôto__f›í
(
fûe
, "π", 
Ál£
);

759 if(!
pwfûe
){

760 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿ›íÖwfûê\"%s\".", 
fûe
);

761 
	`mosquôto__‰ì
(
buf
);

762  
MOSQ_ERR_UNKNOWN
;

765 !
	`„of
(
pwfûe
)){

766 if(
	`fgës_exãndög
(&
buf
, &
buÊí
, 
pwfûe
)){

767 if(
buf
[0] == '#') ;

768 if(!
	`°rchr
(
buf
, ':')) ;

770 
u£∫ame
 = 
	`°πok_r
(
buf
, ":", &
ßvïå
);

771 if(
u£∫ame
){

772 
u≈wd
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__u≈wd
));

773 if(!
u≈wd
){

774 
	`f˛o£
(
pwfûe
);

775 
	`mosquôto__‰ì
(
buf
);

776  
MOSQ_ERR_NOMEM
;

778 
u£∫ame
 = 
	`misc__åimbœnks
(username);

779 if(
	`°æí
(
u£∫ame
) > 65535){

780 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "W¨nög: InvÆidÜöêöÖassw‹d fûê'%s', u£∫amêtoÿl⁄g.", 
fûe
);

781 
	`mosquôto__‰ì
(
u≈wd
);

785 
u≈wd
->
u£∫ame
 = 
	`mosquôto__°rdup
(username);

786 if(!
u≈wd
->
u£∫ame
){

787 
	`mosquôto__‰ì
(
u≈wd
);

788 
	`mosquôto__‰ì
(
buf
);

789 
	`f˛o£
(
pwfûe
);

790  
MOSQ_ERR_NOMEM
;

792 
∑ssw‹d
 = 
	`°πok_r
(
NULL
, ":", &
ßvïå
);

793 if(
∑ssw‹d
){

794 
∑ssw‹d
 = 
	`misc__åimbœnks
(password);

796 if(
	`°æí
(
∑ssw‹d
) > 65535){

797 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "W¨nög: InvÆidÜöêöÖassw‹d fûê'%s',Öassw‹dÅoÿl⁄g.", 
fûe
);

798 
	`mosquôto__‰ì
(
u≈wd
->
u£∫ame
);

799 
	`mosquôto__‰ì
(
u≈wd
);

803 
u≈wd
->
∑ssw‹d
 = 
	`mosquôto__°rdup
(password);

804 if(!
u≈wd
->
∑ssw‹d
){

805 
	`f˛o£
(
pwfûe
);

806 
	`mosquôto__‰ì
(
u≈wd
->
u£∫ame
);

807 
	`mosquôto__‰ì
(
u≈wd
);

808 
	`mosquôto__‰ì
(
buf
);

809  
MOSQ_ERR_NOMEM
;

812 
	`HASH_ADD_KEYPTR
(
hh
, *
roŸ
, 
u≈wd
->
u£∫ame
, 
	`°æí
(unpwd->username), unpwd);

814 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "W¨nög: InvÆidÜöêöÖassw‹d fûê'%s': %s", 
fûe
, 
buf
);

815 
	`mosquôto__‰ì
(
u≈wd
->
u£∫ame
);

816 
	`mosquôto__‰ì
(
u≈wd
);

821 
	`f˛o£
(
pwfûe
);

822 
	`mosquôto__‰ì
(
buf
);

824  
MOSQ_ERR_SUCCESS
;

825 
	}
}

828 
	$u≈wd__‰ì_ôem
(
mosquôto__u≈wd
 **
u≈wd
, mosquôto__u≈wd *
ôem
)

830 
	`mosquôto__‰ì
(
ôem
->
u£∫ame
);

831 
	`mosquôto__‰ì
(
ôem
->
∑ssw‹d
);

832 #ifde‡
WITH_TLS


833 
	`mosquôto__‰ì
(
ôem
->
ß…
);

835 
	`HASH_DEL
(*
u≈wd
, 
ôem
);

836 
	`mosquôto__‰ì
(
ôem
);

837 
	}
}

840 #ifde‡
WITH_TLS


841 
	$u≈wd__decode_∑ssw‹ds
(
mosquôto__u≈wd
 **
u≈wd
)

843 
mosquôto__u≈wd
 *
u
, *
tmp
 = 
NULL
;

844 *
tokí
;

845 *
ß…
;

846 
ß…_Àn
;

847 *
∑ssw‹d
;

848 
∑ssw‹d_Àn
;

849 
rc
;

850 
mosquôto_pwhash_ty≥
 
hashty≥
;

852 
	`HASH_ITER
(
hh
, *
u≈wd
, 
u
, 
tmp
){

854 if(
u
->
∑ssw‹d
 =
NULL
){

855 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: MissögÖassw‹d hash f‹ u£∏%s,ÑemovögÉ¡ry.", 
u
->
u£∫ame
);

856 
	`u≈wd__‰ì_ôem
(
u≈wd
, 
u
);

860 
tokí
 = 
	`°πok
(
u
->
∑ssw‹d
, "$");

861 if(
tokí
 =
NULL
){

862 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆidÖassw‹d hash f‹ u£∏%s,ÑemovögÉ¡ry.", 
u
->
u£∫ame
);

863 
	`u≈wd__‰ì_ôem
(
u≈wd
, 
u
);

867 if(!
	`°rcmp
(
tokí
, "6")){

868 
hashty≥
 = 
pw_sha512
;

869 }if(!
	`°rcmp
(
tokí
, "7")){

870 
hashty≥
 = 
pw_sha512_pbkdf2
;

872 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆidÖassw‹d hashÅy≥ f‹ u£∏%s,ÑemovögÉ¡ry.", 
u
->
u£∫ame
);

873 
	`u≈wd__‰ì_ôem
(
u≈wd
, 
u
);

877 if(
hashty≥
 =
pw_sha512_pbkdf2
){

878 
tokí
 = 
	`°πok
(
NULL
, "$");

879 if(
tokí
 =
NULL
){

880 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆidÖassw‹d hash f‹ u£∏%s,ÑemovögÉ¡ry.", 
u
->
u£∫ame
);

881 
	`u≈wd__‰ì_ôem
(
u≈wd
, 
u
);

884 
u
->
ôî©i⁄s
 = 
	`©oi
(
tokí
);

885 if(
u
->
ôî©i⁄s
 < 1){

886 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆid hash iãøti⁄†f‹ u£∏%s,ÑemovögÉ¡ry.", 
u
->
u£∫ame
);

887 
	`u≈wd__‰ì_ôem
(
u≈wd
, 
u
);

892 
tokí
 = 
	`°πok
(
NULL
, "$");

893 if(
tokí
 =
NULL
){

894 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆidÖassw‹d hash f‹ u£∏%s,ÑemovögÉ¡ry.", 
u
->
u£∫ame
);

895 
	`u≈wd__‰ì_ôem
(
u≈wd
, 
u
);

898 
rc
 = 
	`ba£64__decode
(
tokí
, &
ß…
, &
ß…_Àn
);

899 if(
rc
 =
MOSQ_ERR_SUCCESS
 && 
ß…_Àn
 == 12){

900 
u
->
ß…
 = salt;

901 
u
->
ß…_Àn
 = salt_len;

902 
tokí
 = 
	`°πok
(
NULL
, "$");

903 if(
tokí
){

904 
rc
 = 
	`ba£64__decode
(
tokí
, &
∑ssw‹d
, &
∑ssw‹d_Àn
);

905 if(
rc
 =
MOSQ_ERR_SUCCESS
 && 
∑ssw‹d_Àn
 == 64){

906 
	`mosquôto__‰ì
(
u
->
∑ssw‹d
);

907 
u
->
∑ssw‹d
 = (*)password;

908 
u
->
∑ssw‹d_Àn
 =Öassword_len;

909 
u
->
hashty≥
 = hashtype;

911 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿdecodê∑ssw‹d f‹ u£∏%s,ÑemovögÉ¡ry.", 
u
->
u£∫ame
);

912 
	`u≈wd__‰ì_ôem
(
u≈wd
, 
u
);

915 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: InvÆidÖassw‹d hash f‹ u£∏%s,ÑemovögÉ¡ry.", 
u
->
u£∫ame
);

916 
	`u≈wd__‰ì_ôem
(
u≈wd
, 
u
);

919 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿdecodê∑ssw‹d sÆàf‹ u£∏%s,ÑemovögÉ¡ry.", 
u
->
u£∫ame
);

920 
	`u≈wd__‰ì_ôem
(
u≈wd
, 
u
);

924  
MOSQ_ERR_SUCCESS
;

925 
	}
}

929 
	$u≈wd__fûe_∑r£
(
mosquôto__u≈wd
 **
u≈wd
, c⁄° *
∑ssw‹d_fûe
)

931 
rc
;

932 if(!
u≈wd
Ë 
MOSQ_ERR_INVAL
;

934 if(!
∑ssw‹d_fûe
Ë 
MOSQ_ERR_SUCCESS
;

936 
rc
 = 
	`pwfûe__∑r£
(
∑ssw‹d_fûe
, 
u≈wd
);

938 #ifde‡
WITH_TLS


939 if(
rc
) Ñc;

940 
rc
 = 
	`u≈wd__decode_∑ssw‹ds
(
u≈wd
);

943  
rc
;

944 
	}
}

946 
	$psk__fûe_∑r£
(
mosquôto__u≈wd
 **
psk_id
, c⁄° *
psk_fûe
)

948 
rc
;

949 
mosquôto__u≈wd
 *
u
, *
tmp
 = 
NULL
;

951 if(!
db
.
c⁄fig
 || !
psk_id
Ë 
MOSQ_ERR_INVAL
;

954 if(!
psk_fûe
Ë 
MOSQ_ERR_SUCCESS
;

956 
rc
 = 
	`pwfûe__∑r£
(
psk_fûe
, 
psk_id
);

957 if(
rc
) Ñc;

959 
	`HASH_ITER
(
hh
, (*
psk_id
), 
u
, 
tmp
){

961 if(!
u
->
∑ssw‹d
){

962 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: Em±yÖsk f‹ idítôy \"%s\".", 
u
->
u£∫ame
);

963  
MOSQ_ERR_INVAL
;

965 if(
	`°r•n
(
u
->
∑ssw‹d
, "0123456789abcdefABCDEF"Ë< 
	`°æí
(u->password)){

966 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹:Ösk f‹ idítôy \"%s\" c⁄èö†n⁄-hexadecimÆ ch¨a˘îs.", 
u
->
u£∫ame
);

967  
MOSQ_ERR_INVAL
;

970  
MOSQ_ERR_SUCCESS
;

971 
	}
}

974 #ifde‡
WITH_TLS


975 
	$mosquôto__memcmp_c⁄°
(c⁄° *
a
, c⁄° *
b
, 
size_t
 
Àn
)

977 
size_t
 
i
;

978 
rc
 = 0;

980 if(!
a
 || !
b
)  1;

982 
i
=0; i<
Àn
; i++){

983 if–((*)
a
)[
i
] !((*)
b
)[i] ){

984 
rc
 = 1;

987  
rc
;

988 
	}
}

992 
	$mosquôto_u≈wd_check_deÁu…
(
evít
, *
evít_d©a
, *
u£rd©a
)

994 
mosquôto_evt_basic_auth
 *
ed
 = 
evít_d©a
;

995 
mosquôto__u≈wd
 *
u
;

996 
mosquôto__u≈wd
 *
u≈wd_ªf
;

997 #ifde‡
WITH_TLS


998 
hash
[
EVP_MAX_MD_SIZE
];

999 
hash_Àn
;

1000 
rc
;

1003 
	`UNUSED
(
evít
);

1004 
	`UNUSED
(
u£rd©a
);

1006 if(
ed
->
˛õ¡
->
u£∫ame
 =
NULL
){

1007  
MOSQ_ERR_PLUGIN_DEFER
;

1010 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

1011 if(
ed
->
˛õ¡
->
bridge
Ë 
MOSQ_ERR_SUCCESS
;

1012 if(!
ed
->
˛õ¡
->
li°íî
Ë 
MOSQ_ERR_INVAL
;

1013 
u≈wd_ªf
 = 
ed
->
˛õ¡
->
li°íî
->
£curôy_›ti⁄s
.
u≈wd
;

1015 
u≈wd_ªf
 = 
db
.
c⁄fig
->
£curôy_›ti⁄s
.
u≈wd
;

1018 
	`HASH_FIND
(
hh
, 
u≈wd_ªf
, 
ed
->
˛õ¡
->
u£∫ame
, 
	`°æí
”d->˛õ¡->u£∫ame), 
u
);

1019 if(
u
){

1020 if(
u
->
∑ssw‹d
){

1021 if(
ed
->
˛õ¡
->
∑ssw‹d
){

1022 #ifde‡
WITH_TLS


1023 
rc
 = 
	`pw__dige°
(
ed
->
˛õ¡
->
∑ssw‹d
, 
u
->
ß…
, u->
ß…_Àn
, 
hash
, &
hash_Àn
, u->
hashty≥
, u->
ôî©i⁄s
);

1024 if(
rc
 =
MOSQ_ERR_SUCCESS
){

1025 if(
hash_Àn
 =
u
->
∑ssw‹d_Àn
 && !
	`mosquôto__memcmp_c⁄°
(u->
∑ssw‹d
, 
hash
, hash_len)){

1026  
MOSQ_ERR_SUCCESS
;

1028  
MOSQ_ERR_AUTH
;

1031  
rc
;

1034 if(!
	`°rcmp
(
u
->
∑ssw‹d
, 
ed
->
˛õ¡
->password)){

1035  
MOSQ_ERR_SUCCESS
;

1039  
MOSQ_ERR_AUTH
;

1042  
MOSQ_ERR_SUCCESS
;

1046  
MOSQ_ERR_AUTH
;

1047 
	}
}

1049 
	$u≈wd__˛ónup
(
mosquôto__u≈wd
 **
roŸ
, 
boﬁ
 
ªlﬂd
)

1051 
mosquôto__u≈wd
 *
u
, *
tmp
 = 
NULL
;

1053 
	`UNUSED
(
ªlﬂd
);

1055 if(!
roŸ
Ë 
MOSQ_ERR_INVAL
;

1057 
	`HASH_ITER
(
hh
, *
roŸ
, 
u
, 
tmp
){

1058 
	`HASH_DEL
(*
roŸ
, 
u
);

1059 
	`mosquôto__‰ì
(
u
->
∑ssw‹d
);

1060 
	`mosquôto__‰ì
(
u
->
u£∫ame
);

1061 #ifde‡
WITH_TLS


1062 
	`mosquôto__‰ì
(
u
->
ß…
);

1064 
	`mosquôto__‰ì
(
u
);

1067 *
roŸ
 = 
NULL
;

1069  
MOSQ_ERR_SUCCESS
;

1070 
	}
}

1073 #ifde‡
WITH_TLS


1074 
	$£curôy__disc⁄√˘_auth
(
mosquôto
 *
c⁄ãxt
)

1076 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

1077 
	`£nd__disc⁄√˘
(
c⁄ãxt
, 
MQTT_RC_ADMINISTRATIVE_ACTION
, 
NULL
);

1079 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_disc⁄√˘ög
);

1080 
	`do_disc⁄√˘
(
c⁄ãxt
, 
MOSQ_ERR_AUTH
);

1081 
	}
}

1090 
	$mosquôto_£curôy_≠∂y_deÁu…
()

1092 
mosquôto
 *
c⁄ãxt
, *
˘xt_tmp
 = 
NULL
;

1093 
mosquôto__a˛_u£r
 *
a˛_u£r_èû
;

1094 
boﬁ
 
Ælow_™⁄ymous
;

1095 
mosquôto__£curôy_›ti⁄s
 *
£curôy_›ts
 = 
NULL
;

1096 #ifde‡
WITH_TLS


1097 
i
;

1098 
X509
 *
˛õ¡_˚π
 = 
NULL
;

1099 
X509_NAME
 *
«me
;

1100 
X509_NAME_ENTRY
 *
«me_íåy
;

1101 
ASN1_STRING
 *
«me_a¢1
 = 
NULL
;

1102 
mosquôto__li°íî
 *
li°íî
;

1103 
BIO
 *
subje˘_bio
;

1104 *
d©a_°¨t
;

1105 
size_t
 
«me_Àngth
;

1106 *
subje˘
;

1109 #ifde‡
WITH_TLS


1110 
i
=0; i<
db
.
c⁄fig
->
li°íî_cou¡
; i++){

1111 
li°íî
 = &
db
.
c⁄fig
->
li°íîs
[
i
];

1112 if(
li°íî
 &&Üi°íî->
s¶_˘x
 &&Üi°íî->
˚πfûe
 &&Üi°íî->
keyfûe
 &&Üi°íî->
¸lfûe
 &&Üi°íî->
ªquúe_˚πifiˇã
){

1113 if(
	`√t__és_£rvî_˘x
(
li°íî
)){

1114  
MOSQ_ERR_TLS
;

1117 if(
	`√t__és_lﬂd_vîify
(
li°íî
)){

1118  
MOSQ_ERR_TLS
;

1124 
	`HASH_ITER
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
c⁄ãxt
, 
˘xt_tmp
){

1125 if(
c⁄ãxt
->
bridge
){

1130 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

1131 if(
c⁄ãxt
->
li°íî
){

1132 
Ælow_™⁄ymous
 = 
c⁄ãxt
->
li°íî
->
£curôy_›ti⁄s
.allow_anonymous;

1135 
Ælow_™⁄ymous
 = 
åue
;

1138 
Ælow_™⁄ymous
 = 
db
.
c⁄fig
->
£curôy_›ti⁄s
.allow_anonymous;

1141 if(!
Ælow_™⁄ymous
 && !
c⁄ãxt
->
u£∫ame
){

1142 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_disc⁄√˘ög
);

1143 
	`do_disc⁄√˘
(
c⁄ãxt
, 
MOSQ_ERR_AUTH
);

1148 #ifde‡
WITH_TLS


1149 if(
c⁄ãxt
->
li°íî
 && c⁄ãxt->li°íî->
s¶_˘x
 && (c⁄ãxt->li°íî->
u£_idítôy_as_u£∫ame
 || c⁄ãxt->li°íî->
u£_subje˘_as_u£∫ame
)){

1151 if(!
c⁄ãxt
->
s¶
){

1152 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

1153 
	`£nd__disc⁄√˘
(
c⁄ãxt
, 
MQTT_RC_ADMINISTRATIVE_ACTION
, 
NULL
);

1155 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_disc⁄√˘ög
);

1156 
	`do_disc⁄√˘
(
c⁄ãxt
, 
MOSQ_ERR_AUTH
);

1159 #ifde‡
FINAL_WITH_TLS_PSK


1160 if(
c⁄ãxt
->
li°íî
->
psk_höt
){

1162 if(!
c⁄ãxt
->
u£∫ame
){

1163 
	`£curôy__disc⁄√˘_auth
(
c⁄ãxt
);

1170 
	`mosquôto__‰ì
(
c⁄ãxt
->
u£∫ame
);

1171 
c⁄ãxt
->
u£∫ame
 = 
NULL
;

1172 
	`mosquôto__‰ì
(
c⁄ãxt
->
∑ssw‹d
);

1173 
c⁄ãxt
->
∑ssw‹d
 = 
NULL
;

1175 
˛õ¡_˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c⁄ãxt
->
s¶
);

1176 if(!
˛õ¡_˚π
){

1177 
	`£curôy__disc⁄√˘_auth
(
c⁄ãxt
);

1180 
«me
 = 
	`X509_gë_subje˘_«me
(
˛õ¡_˚π
);

1181 if(!
«me
){

1182 
	`X509_‰ì
(
˛õ¡_˚π
);

1183 
˛õ¡_˚π
 = 
NULL
;

1184 
	`£curôy__disc⁄√˘_auth
(
c⁄ãxt
);

1187 i‡(
c⁄ãxt
->
li°íî
->
u£_idítôy_as_u£∫ame
) {

1188 
i
 = 
	`X509_NAME_gë_ödex_by_NID
(
«me
, 
NID_comm⁄Name
, -1);

1189 if(
i
 == -1){

1190 
	`X509_‰ì
(
˛õ¡_˚π
);

1191 
˛õ¡_˚π
 = 
NULL
;

1192 
	`£curôy__disc⁄√˘_auth
(
c⁄ãxt
);

1195 
«me_íåy
 = 
	`X509_NAME_gë_íåy
(
«me
, 
i
);

1196 if(
«me_íåy
){

1197 
«me_a¢1
 = 
	`X509_NAME_ENTRY_gë_d©a
(
«me_íåy
);

1198 i‡(
«me_a¢1
 =
NULL
) {

1199 
	`X509_‰ì
(
˛õ¡_˚π
);

1200 
˛õ¡_˚π
 = 
NULL
;

1201 
	`£curôy__disc⁄√˘_auth
(
c⁄ãxt
);

1204 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

1205 
c⁄ãxt
->
u£∫ame
 = 
	`mosquôto__°rdup
((*Ë
	`ASN1_STRING_d©a
(
«me_a¢1
));

1207 
c⁄ãxt
->
u£∫ame
 = 
	`mosquôto__°rdup
((*Ë
	`ASN1_STRING_gë0_d©a
(
«me_a¢1
));

1209 if(!
c⁄ãxt
->
u£∫ame
){

1210 
	`X509_‰ì
(
˛õ¡_˚π
);

1211 
˛õ¡_˚π
 = 
NULL
;

1212 
	`£curôy__disc⁄√˘_auth
(
c⁄ãxt
);

1216 i‡((
size_t
)
	`ASN1_STRING_Àngth
(
«me_a¢1
Ë!
	`°æí
(
c⁄ãxt
->
u£∫ame
)) {

1217 
	`X509_‰ì
(
˛õ¡_˚π
);

1218 
˛õ¡_˚π
 = 
NULL
;

1219 
	`£curôy__disc⁄√˘_auth
(
c⁄ãxt
);

1224 
subje˘_bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

1225 
	`X509_NAME_¥öt_ex
(
subje˘_bio
, 
	`X509_gë_subje˘_«me
(
˛õ¡_˚π
), 0, 
XN_FLAG_RFC2253
);

1226 
d©a_°¨t
 = 
NULL
;

1227 
«me_Àngth
 = (
size_t
)
	`BIO_gë_mem_d©a
(
subje˘_bio
, &
d©a_°¨t
);

1228 
subje˘
 = 
	`mosquôto__mÆloc
(()*
«me_Àngth
+1);

1229 if(!
subje˘
){

1230 
	`BIO_‰ì
(
subje˘_bio
);

1231 
	`X509_‰ì
(
˛õ¡_˚π
);

1232 
˛õ¡_˚π
 = 
NULL
;

1233 
	`£curôy__disc⁄√˘_auth
(
c⁄ãxt
);

1236 
	`mem˝y
(
subje˘
, 
d©a_°¨t
, 
«me_Àngth
);

1237 
subje˘
[
«me_Àngth
] = '\0';

1238 
	`BIO_‰ì
(
subje˘_bio
);

1239 
c⁄ãxt
->
u£∫ame
 = 
subje˘
;

1241 if(!
c⁄ãxt
->
u£∫ame
){

1242 
	`X509_‰ì
(
˛õ¡_˚π
);

1243 
˛õ¡_˚π
 = 
NULL
;

1244 
	`£curôy__disc⁄√˘_auth
(
c⁄ãxt
);

1247 
	`X509_‰ì
(
˛õ¡_˚π
);

1248 
˛õ¡_˚π
 = 
NULL
;

1254 if(
	`mosquôto_u≈wd_check
(
c⁄ãxt
Ë!
MOSQ_ERR_SUCCESS
){

1255 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_disc⁄√˘ög
);

1256 
	`do_disc⁄√˘
(
c⁄ãxt
, 
MOSQ_ERR_AUTH
);

1263 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

1264 if(
c⁄ãxt
->
li°íî
){

1265 
£curôy_›ts
 = &
c⁄ãxt
->
li°íî
->
£curôy_›ti⁄s
;

1267 if(
c⁄ãxt
->
°©e
 !
mosq_cs_a˘ive
){

1268 
	`mosquôto__£t_°©e
(
c⁄ãxt
, 
mosq_cs_disc⁄√˘ög
);

1269 
	`do_disc⁄√˘
(
c⁄ãxt
, 
MOSQ_ERR_AUTH
);

1274 
£curôy_›ts
 = &
db
.
c⁄fig
->
£curôy_›ti⁄s
;

1277 if(
£curôy_›ts
 && securôy_›ts->
a˛_li°
){

1278 
a˛_u£r_èû
 = 
£curôy_›ts
->
a˛_li°
;

1279 
a˛_u£r_èû
){

1280 if(
a˛_u£r_èû
->
u£∫ame
){

1281 if(
c⁄ãxt
->
u£∫ame
){

1282 if(!
	`°rcmp
(
a˛_u£r_èû
->
u£∫ame
, 
c⁄ãxt
->username)){

1283 
c⁄ãxt
->
a˛_li°
 = 
a˛_u£r_èû
;

1288 if(!
c⁄ãxt
->
u£∫ame
){

1289 
c⁄ãxt
->
a˛_li°
 = 
a˛_u£r_èû
;

1293 
a˛_u£r_èû
 =á˛_u£r_èû->
√xt
;

1297  
MOSQ_ERR_SUCCESS
;

1298 
	}
}

1300 
	$mosquôto_psk_key_gë_deÁu…
(
mosquôto
 *
c⁄ãxt
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
)

1302 
mosquôto__u≈wd
 *
u
, *
tmp
 = 
NULL
;

1303 
mosquôto__u≈wd
 *
psk_id_ªf
 = 
NULL
;

1305 if(!
höt
 || !
idítôy
 || !
key
Ë 
MOSQ_ERR_INVAL
;

1307 if(
db
.
c⁄fig
->
≥r_li°íî_£âögs
){

1308 if(!
c⁄ãxt
->
li°íî
Ë 
MOSQ_ERR_INVAL
;

1309 
psk_id_ªf
 = 
c⁄ãxt
->
li°íî
->
£curôy_›ti⁄s
.
psk_id
;

1311 
psk_id_ªf
 = 
db
.
c⁄fig
->
£curôy_›ti⁄s
.
psk_id
;

1313 if(!
psk_id_ªf
Ë 
MOSQ_ERR_PLUGIN_DEFER
;

1315 
	`HASH_ITER
(
hh
, 
psk_id_ªf
, 
u
, 
tmp
){

1316 if(!
	`°rcmp
(
u
->
u£∫ame
, 
idítôy
)){

1317 
	`°∫˝y
(
key
, 
u
->
∑ssw‹d
, (
size_t
)
max_key_Àn
);

1318  
MOSQ_ERR_SUCCESS
;

1322  
MOSQ_ERR_AUTH
;

1323 
	}
}

1325 #ifde‡
WITH_TLS


1326 
	$pw__dige°
(c⁄° *
∑ssw‹d
, c⁄° *
ß…
, 
ß…_Àn
, *
hash
, *
hash_Àn
, 
mosquôto_pwhash_ty≥
 
hashty≥
, 
ôî©i⁄s
)

1328 c⁄° 
EVP_MD
 *
dige°
;

1329 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

1330 
EVP_MD_CTX
 
c⁄ãxt
;

1332 
EVP_MD_CTX
 *
c⁄ãxt
;

1335 
dige°
 = 
	`EVP_gë_dige°by«me
("sha512");

1336 if(!
dige°
){

1341 if(
hashty≥
 =
pw_sha512
){

1342 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

1343 
	`EVP_MD_CTX_öô
(&
c⁄ãxt
);

1344 
	`EVP_Dige°Inô_ex
(&
c⁄ãxt
, 
dige°
, 
NULL
);

1345 
	`EVP_Dige°Upd©e
(&
c⁄ãxt
, 
∑ssw‹d
, 
	`°æí
(password));

1346 
	`EVP_Dige°Upd©e
(&
c⁄ãxt
, 
ß…
, 
ß…_Àn
);

1348 
	`EVP_Dige°FöÆ_ex
(&
c⁄ãxt
, 
hash
, 
hash_Àn
);

1349 
	`EVP_MD_CTX_˛ónup
(&
c⁄ãxt
);

1351 
c⁄ãxt
 = 
	`EVP_MD_CTX_√w
();

1352 
	`EVP_Dige°Inô_ex
(
c⁄ãxt
, 
dige°
, 
NULL
);

1353 
	`EVP_Dige°Upd©e
(
c⁄ãxt
, 
∑ssw‹d
, 
	`°æí
(password));

1354 
	`EVP_Dige°Upd©e
(
c⁄ãxt
, 
ß…
, 
ß…_Àn
);

1356 
	`EVP_Dige°FöÆ_ex
(
c⁄ãxt
, 
hash
, 
hash_Àn
);

1357 
	`EVP_MD_CTX_‰ì
(
c⁄ãxt
);

1360 *
hash_Àn
 = 
EVP_MAX_MD_SIZE
;

1361 
	`PKCS5_PBKDF2_HMAC
(
∑ssw‹d
, ()
	`°æí
(password),

1362 
ß…
, ()
ß…_Àn
, 
ôî©i⁄s
,

1363 
dige°
, ()(*
hash_Àn
), 
hash
);

1366  
MOSQ_ERR_SUCCESS
;

1367 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/send_auth.c

19 
	~"c⁄fig.h
"

21 
	~"mosquôto_brokî_öã∫Æ.h
"

22 
	~"mqâ_¥Ÿocﬁ.h
"

23 
	~"mem‹y_mosq.h
"

24 
	~"∑ckë_mosq.h
"

25 
	~"¥›îty_mosq.h
"

26 
	~"utû_mosq.h
"

28 
	$£nd__auth
(
mosquôto
 *
c⁄ãxt
, 
uöt8_t
 
ªas⁄_code
, c⁄° *
auth_d©a
, 
uöt16_t
 
auth_d©a_Àn
)

30 
mosquôto__∑ckë
 *
∑ckë
 = 
NULL
;

31 
rc
;

32 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

33 
uöt32_t
 
ªmaöög_Àngth
;

35 if(
c⁄ãxt
->
auth_mëhod
 =
NULL
Ë 
MOSQ_ERR_INVAL
;

36 if(
c⁄ãxt
->
¥Ÿocﬁ
 !
mosq_p_mqâ5
Ë 
MOSQ_ERR_PROTOCOL
;

38 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Sídög AUTHÅÿ%†‘c%d, %s)", 
c⁄ãxt
->
id
, 
ªas⁄_code
, c⁄ãxt->
auth_mëhod
);

40 
ªmaöög_Àngth
 = 1;

42 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(&
¥›îtõs
, 
MQTT_PROP_AUTHENTICATION_METHOD
, 
c⁄ãxt
->
auth_mëhod
);

43 if(
rc
){

44 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

45  
rc
;

48 if(
auth_d©a
 !
NULL
 && 
auth_d©a_Àn
 > 0){

49 
rc
 = 
	`mosquôto_¥›îty_add_bö¨y
(&
¥›îtõs
, 
MQTT_PROP_AUTHENTICATION_DATA
, 
auth_d©a
, 
auth_d©a_Àn
);

50 if(
rc
){

51 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

52  
rc
;

56 
ªmaöög_Àngth
 +
	`¥›îty__gë_ªmaöög_Àngth
(
¥›îtõs
);

58 if(
	`∑ckë__check_ovîsize
(
c⁄ãxt
, 
ªmaöög_Àngth
)){

59 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

60 
	`mosquôto__‰ì
(
∑ckë
);

61  
MOSQ_ERR_OVERSIZE_PACKET
;

64 
∑ckë
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__∑ckë
));

65 if(!
∑ckë
Ë 
MOSQ_ERR_NOMEM
;

67 
∑ckë
->
comm™d
 = 
CMD_AUTH
;

68 
∑ckë
->
ªmaöög_Àngth
 =Ñemaining_length;

70 
rc
 = 
	`∑ckë__Æloc
(
∑ckë
);

71 if(
rc
){

72 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

73 
	`mosquôto__‰ì
(
∑ckë
);

74  
rc
;

76 
	`∑ckë__wrôe_byã
(
∑ckë
, 
ªas⁄_code
);

77 
	`¥›îty__wrôe_Æl
(
∑ckë
, 
¥›îtõs
, 
åue
);

78 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

80  
	`∑ckë__queue
(
c⁄ãxt
, 
∑ckë
);

81 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/send_connack.c

19 
	~"c⁄fig.h
"

21 
	~"mosquôto_brokî_öã∫Æ.h
"

22 
	~"mqâ_¥Ÿocﬁ.h
"

23 
	~"mem‹y_mosq.h
"

24 
	~"∑ckë_mosq.h
"

25 
	~"¥›îty_mosq.h
"

26 
	~"utû_mosq.h
"

28 
	$£nd__c⁄«ck
(
mosquôto
 *
c⁄ãxt
, 
uöt8_t
 
ack
, uöt8_à
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

30 
mosquôto__∑ckë
 *
∑ckë
 = 
NULL
;

31 
rc
;

32 
mosquôto_¥›îty
 *
c⁄«ck_¥›s
 = 
NULL
;

33 
uöt32_t
 
ªmaöög_Àngth
;

35 
rc
 = 
	`mosquôto_¥›îty_c›y_Æl
(&
c⁄«ck_¥›s
, 
¥›îtõs
);

36 if(
rc
){

37  
rc
;

40 if(
c⁄ãxt
->
id
){

41 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Sídög CONNACKÅÿ%†(%d, %d)", 
c⁄ãxt
->
id
, 
ack
, 
ªas⁄_code
);

43 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Sídög CONNACKÅÿ%†(%d, %d)", 
c⁄ãxt
->
addªss
, 
ack
, 
ªas⁄_code
);

46 
ªmaöög_Àngth
 = 2;

48 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

49 if(
ªas⁄_code
 < 128 && 
db
.
c⁄fig
->
ªèö_avaûabÀ
 =
Ál£
){

50 
rc
 = 
	`mosquôto_¥›îty_add_byã
(&
c⁄«ck_¥›s
, 
MQTT_PROP_RETAIN_AVAILABLE
, 0);

51 if(
rc
){

52 
	`mosquôto_¥›îty_‰ì_Æl
(&
c⁄«ck_¥›s
);

53  
rc
;

56 if(
ªas⁄_code
 < 128 && 
db
.
c⁄fig
->
max_∑ckë_size
 > 0){

57 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(&
c⁄«ck_¥›s
, 
MQTT_PROP_MAXIMUM_PACKET_SIZE
, 
db
.
c⁄fig
->
max_∑ckë_size
);

58 if(
rc
){

59 
	`mosquôto_¥›îty_‰ì_Æl
(&
c⁄«ck_¥›s
);

60  
rc
;

63 if(
ªas⁄_code
 < 128 && 
db
.
c⁄fig
->
max_öÊight_mesßges
 > 0){

64 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(&
c⁄«ck_¥›s
, 
MQTT_PROP_RECEIVE_MAXIMUM
, 
db
.
c⁄fig
->
max_öÊight_mesßges
);

65 if(
rc
){

66 
	`mosquôto_¥›îty_‰ì_Æl
(&
c⁄«ck_¥›s
);

67  
rc
;

70 if(
c⁄ãxt
->
li°íî
->
max_qos
 != 2){

71 
rc
 = 
	`mosquôto_¥›îty_add_byã
(&
c⁄«ck_¥›s
, 
MQTT_PROP_MAXIMUM_QOS
, 
c⁄ãxt
->
li°íî
->
max_qos
);

72 if(
rc
){

73 
	`mosquôto_¥›îty_‰ì_Æl
(&
c⁄«ck_¥›s
);

74  
rc
;

78 
ªmaöög_Àngth
 +
	`¥›îty__gë_ªmaöög_Àngth
(
c⁄«ck_¥›s
);

81 if(
	`∑ckë__check_ovîsize
(
c⁄ãxt
, 
ªmaöög_Àngth
)){

82 
	`mosquôto_¥›îty_‰ì_Æl
(&
c⁄«ck_¥›s
);

83  
MOSQ_ERR_OVERSIZE_PACKET
;

86 
∑ckë
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__∑ckë
));

87 if(!
∑ckë
){

88 
	`mosquôto_¥›îty_‰ì_Æl
(&
c⁄«ck_¥›s
);

89  
MOSQ_ERR_NOMEM
;

92 
∑ckë
->
comm™d
 = 
CMD_CONNACK
;

93 
∑ckë
->
ªmaöög_Àngth
 =Ñemaining_length;

95 
rc
 = 
	`∑ckë__Æloc
(
∑ckë
);

96 if(
rc
){

97 
	`mosquôto_¥›îty_‰ì_Æl
(&
c⁄«ck_¥›s
);

98 
	`mosquôto__‰ì
(
∑ckë
);

99  
rc
;

101 
	`∑ckë__wrôe_byã
(
∑ckë
, 
ack
);

102 
	`∑ckë__wrôe_byã
(
∑ckë
, 
ªas⁄_code
);

103 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

104 
	`¥›îty__wrôe_Æl
(
∑ckë
, 
c⁄«ck_¥›s
, 
åue
);

106 
	`mosquôto_¥›îty_‰ì_Æl
(&
c⁄«ck_¥›s
);

108  
	`∑ckë__queue
(
c⁄ãxt
, 
∑ckë
);

109 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/send_suback.c

19 
	~"c⁄fig.h
"

21 
	~"mosquôto_brokî_öã∫Æ.h
"

22 
	~"mqâ_¥Ÿocﬁ.h
"

23 
	~"mem‹y_mosq.h
"

24 
	~"∑ckë_mosq.h
"

25 
	~"¥›îty_mosq.h
"

26 
	~"utû_mosq.h
"

29 
	$£nd__suback
(
mosquôto
 *
c⁄ãxt
, 
uöt16_t
 
mid
, 
uöt32_t
 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
)

31 
mosquôto__∑ckë
 *
∑ckë
 = 
NULL
;

32 
rc
;

33 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

35 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "Sídög SUBACKÅÿ%s", 
c⁄ãxt
->
id
);

37 
∑ckë
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__∑ckë
));

38 if(!
∑ckë
Ë 
MOSQ_ERR_NOMEM
;

40 
∑ckë
->
comm™d
 = 
CMD_SUBACK
;

41 
∑ckë
->
ªmaöög_Àngth
 = 2+
∑ylﬂdÀn
;

42 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

43 
∑ckë
->
ªmaöög_Àngth
 +
	`¥›îty__gë_ªmaöög_Àngth
(
¥›îtõs
);

45 
rc
 = 
	`∑ckë__Æloc
(
∑ckë
);

46 if(
rc
){

47 
	`mosquôto__‰ì
(
∑ckë
);

48  
rc
;

50 
	`∑ckë__wrôe_uöt16
(
∑ckë
, 
mid
);

52 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

54 
	`¥›îty__wrôe_Æl
(
∑ckë
, 
¥›îtõs
, 
åue
);

57 if(
∑ylﬂdÀn
){

58 
	`∑ckë__wrôe_byãs
(
∑ckë
, 
∑ylﬂd
, 
∑ylﬂdÀn
);

61  
	`∑ckë__queue
(
c⁄ãxt
, 
∑ckë
);

62 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/send_unsuback.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

23 
	~"mosquôto_brokî_öã∫Æ.h
"

24 
	~"mqâ_¥Ÿocﬁ.h
"

25 
	~"mem‹y_mosq.h
"

26 
	~"∑ckë_mosq.h
"

27 
	~"¥›îty_mosq.h
"

30 
	$£nd__unsuback
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, 
ªas⁄_code_cou¡
, 
uöt8_t
 *
ªas⁄_codes
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

32 
mosquôto__∑ckë
 *
∑ckë
 = 
NULL
;

33 
rc
;

35 
	`as£π
(
mosq
);

36 
∑ckë
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__∑ckë
));

37 if(!
∑ckë
Ë 
MOSQ_ERR_NOMEM
;

39 
∑ckë
->
comm™d
 = 
CMD_UNSUBACK
;

40 
∑ckë
->
ªmaöög_Àngth
 = 2;

42 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

43 
∑ckë
->
ªmaöög_Àngth
 +
	`¥›îty__gë_ªmaöög_Àngth
(
¥›îtõs
);

44 
∑ckë
->
ªmaöög_Àngth
 +(
uöt32_t
)
ªas⁄_code_cou¡
;

47 
rc
 = 
	`∑ckë__Æloc
(
∑ckë
);

48 if(
rc
){

49 
	`mosquôto__‰ì
(
∑ckë
);

50  
rc
;

53 
	`∑ckë__wrôe_uöt16
(
∑ckë
, 
mid
);

55 if(
mosq
->
¥Ÿocﬁ
 =
mosq_p_mqâ5
){

56 
	`¥›îty__wrôe_Æl
(
∑ckë
, 
¥›îtõs
, 
åue
);

57 
	`∑ckë__wrôe_byãs
(
∑ckë
, 
ªas⁄_codes
, (
uöt32_t
)
ªas⁄_code_cou¡
);

60  
	`∑ckë__queue
(
mosq
, 
∑ckë
);

61 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/service.c

19 #i‡
deföed
(
WIN32
Ë|| deföed(
__CYGWIN__
)

21 
	~"c⁄fig.h
"

23 
	~<wödows.h
>

25 
	~"mem‹y_mosq.h
"

27 
run
;

28 
SERVICE_STATUS_HANDLE
 
	g£rvi˚_h™dÀ
 = 0;

29 
SERVICE_STATUS
 
	g£rvi˚_°©us
;

30 
maö
(
¨gc
, *
¨gv
[]);

32 
	$¥öt_îr‹
()

34 *
buf
 = 
NULL
;

36 
	`F‹m©Mesßge
(
FORMAT_MESSAGE_ALLOCATE_BUFFER
 | 
FORMAT_MESSAGE_FROM_SYSTEM
,

37 
NULL
, 
	`GëLa°Eº‹
(), 
LANG_NEUTRAL
, (
LPTSTR
)&
buf
, 0, NULL);

39 
	`Ârötf
(
°dîr
, "Eº‹: %s\n", 
buf
);

40 
	`LoˇlFªe
(
buf
);

41 
	}
}

45 
__°dˇŒ
 
	$£rvi˚_h™dÀr
(
DWORD
 
fdwC⁄åﬁ
)

47 
fdwC⁄åﬁ
){

48 
SERVICE_CONTROL_CONTINUE
:

51 
SERVICE_CONTROL_PAUSE
:

54 
SERVICE_CONTROL_SHUTDOWN
:

56 
SERVICE_CONTROL_STOP
:

58 
£rvi˚_°©us
.
dwCuºítSèã
 = 
SERVICE_STOP_PENDING
;

59 
	`SëSîvi˚Sètus
(
£rvi˚_h™dÀ
, &
£rvi˚_°©us
);

60 
run
 = 0;

63 
	}
}

66 
__°dˇŒ
 
	$£rvi˚_maö
(
DWORD
 
dwArgc
, 
LPTSTR
 *
ÕszArgv
)

68 **
¨gv
;

69 
¨gc
 = 1;

70 
c⁄f_∑th
[
MAX_PATH
 + 20];

71 
rc
;

73 
	`UNUSED
(
dwArgc
);

74 
	`UNUSED
(
ÕszArgv
);

76 
£rvi˚_h™dÀ
 = 
	`Regi°îSîvi˚CålH™dÀr
("mosquôto", 
£rvi˚_h™dÀr
);

77 if(
£rvi˚_h™dÀ
){

78 
	`mem£t
(
c⁄f_∑th
, 0, (conf_path));

79 
rc
 = 
	`GëEnvú⁄mítV¨übÀ
("MOSQUITTO_DIR", 
c⁄f_∑th
, 
MAX_PATH
);

80 if(!
rc
 ||Ñ¯=
MAX_PATH
){

81 
£rvi˚_°©us
.
dwCuºítSèã
 = 
SERVICE_STOPPED
;

82 
	`SëSîvi˚Sètus
(
£rvi˚_h™dÀ
, &
£rvi˚_°©us
);

85 
	`°rˇt
(
c⁄f_∑th
, "/mosquitto.conf");

87 
¨gv
 = 
	`mosquôto__mÆloc
((*)*3);

88 
¨gv
[0] = "mosquitto";

89 
¨gv
[1] = "-c";

90 
¨gv
[2] = 
c⁄f_∑th
;

91 
¨gc
 = 3;

93 
£rvi˚_°©us
.
dwSîvi˚Ty≥
 = 
SERVICE_WIN32_OWN_PROCESS
;

94 
£rvi˚_°©us
.
dwCuºítSèã
 = 
SERVICE_RUNNING
;

95 
£rvi˚_°©us
.
dwC⁄åﬁsAc˚±ed
 = 
SERVICE_ACCEPT_SHUTDOWN
 | 
SERVICE_ACCEPT_STOP
;

96 
£rvi˚_°©us
.
dwWö32ExôCode
 = 
NO_ERROR
;

97 
£rvi˚_°©us
.
dwCheckPoöt
 = 0;

98 
	`SëSîvi˚Sètus
(
£rvi˚_h™dÀ
, &
£rvi˚_°©us
);

100 
	`maö
(
¨gc
, 
¨gv
);

101 
	`mosquôto__‰ì
(
¨gv
);

103 
£rvi˚_°©us
.
dwCuºítSèã
 = 
SERVICE_STOPPED
;

104 
	`SëSîvi˚Sètus
(
£rvi˚_h™dÀ
, &
£rvi˚_°©us
);

106 
	}
}

108 
	$£rvi˚_ö°Æl
()

110 
SC_HANDLE
 
sc_m™agî
, 
svc_h™dÀ
;

111 
£rvi˚_°rög
[
MAX_PATH
 + 20];

112 
exe_∑th
[
MAX_PATH
 + 1];

113 
SERVICE_DESCRIPTION
 
svc_desc
;

115 
	`mem£t
(
exe_∑th
, 0, (exe_path));

116 if(
	`GëModuÀFûeName
(
NULL
, 
exe_∑th
, 
MAX_PATH
) == MAX_PATH){

117 
	`Ârötf
(
°dîr
, "Error: PathÅooÜong.\n");

120 
	`¢¥ötf
(
£rvi˚_°rög
, (£rvi˚_°rög), "\"%s\"Ñun", 
exe_∑th
);

122 
sc_m™agî
 = 
	`O≥nSCM™agî
(
NULL
, NULL, 
SC_MANAGER_CREATE_SERVICE
);

123 if(
sc_m™agî
){

124 
svc_h™dÀ
 = 
	`Cª©eSîvi˚
(
sc_m™agî
, "mosquitto", "Mosquitto Broker",

125 
SERVICE_START
 | 
SERVICE_STOP
 | 
SERVICE_CHANGE_CONFIG
,

126 
SERVICE_WIN32_OWN_PROCESS
, 
SERVICE_AUTO_START
, 
SERVICE_ERROR_NORMAL
,

127 
£rvi˚_°rög
, 
NULL
, NULL, NULL, NULL, NULL);

129 if(
svc_h™dÀ
){

130 
svc_desc
.
ÕDes¸ùti⁄
 = "Eclipse Mosquitto MQTT v5/v3.1.1 broker";

131 
	`Ch™geSîvi˚C⁄fig2
(
svc_h™dÀ
, 
SERVICE_CONFIG_DESCRIPTION
, &
svc_desc
);

132 
	`Clo£Sîvi˚H™dÀ
(
svc_h™dÀ
);

134 
	`¥öt_îr‹
();

136 
	`Clo£Sîvi˚H™dÀ
(
sc_m™agî
);

138 
	`¥öt_îr‹
();

140 
	}
}

142 
	$£rvi˚_unö°Æl
()

144 
SC_HANDLE
 
sc_m™agî
, 
svc_h™dÀ
;

145 
SERVICE_STATUS
 
°©us
;

147 
sc_m™agî
 = 
	`O≥nSCM™agî
(
NULL
, 
SERVICES_ACTIVE_DATABASE
, 
SC_MANAGER_CONNECT
);

148 if(
sc_m™agî
){

149 
svc_h™dÀ
 = 
	`O≥nSîvi˚
(
sc_m™agî
, "mosquôto", 
SERVICE_QUERY_STATUS
 | 
DELETE
);

150 if(
svc_h™dÀ
){

151 if(
	`QuîySîvi˚Sètus
(
svc_h™dÀ
, &
°©us
)){

152 if(
°©us
.
dwCuºítSèã
 =
SERVICE_STOPPED
){

153 
	`DñëeSîvi˚
(
svc_h™dÀ
);

156 
	`Clo£Sîvi˚H™dÀ
(
svc_h™dÀ
);

158 
	`¥öt_îr‹
();

160 
	`Clo£Sîvi˚H™dÀ
(
sc_m™agî
);

162 
	`¥öt_îr‹
();

164 
	}
}

166 
	$£rvi˚_run
()

168 
SERVICE_TABLE_ENTRY
 
°e
[] = {

169 { "mosquôto", 
£rvi˚_maö
 },

170 { 
NULL
, NULL }

173 
	`SèπSîvi˚CålDi•©chî
(
°e
);

174 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/session_expiry.c

19 
	~"c⁄fig.h
"

21 
	~<m©h.h
>

22 
	~<°dio.h
>

23 
	~<uéi°.h
>

25 
	~"mosquôto_brokî_öã∫Æ.h
"

26 
	~"mem‹y_mosq.h
"

27 
	~"sys_åì.h
"

28 
	~"time_mosq.h
"

30 
£ssi⁄_expúy_li°
 *
	gexpúy_li°
 = 
NULL
;

31 
time_t
 
	gœ°_check
 = 0;

34 
	$£ssi⁄_expúy__cmp
(
£ssi⁄_expúy_li°
 *
i1
, £ssi⁄_expúy_li° *
i2
)

36 if(
i1
->
c⁄ãxt
->
£ssi⁄_expúy_time
 =
i2
->context->session_expiry_time){

38 }if(
i1
->
c⁄ãxt
->
£ssi⁄_expúy_time
 > 
i2
->context->session_expiry_time){

43 
	}
}

46 
	$£ssi⁄_expúy__add
(
mosquôto
 *
c⁄ãxt
)

48 
£ssi⁄_expúy_li°
 *
ôem
;

50 if(
db
.
c⁄fig
->
≥rsi°ít_˛õ¡_expú©i⁄
 == 0){

51 if(
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 =
UINT32_MAX
){

54  
MOSQ_ERR_SUCCESS
;

58 
ôem
 = 
	`mosquôto__ˇŒoc
(1, (
£ssi⁄_expúy_li°
));

59 if(!
ôem
Ë 
MOSQ_ERR_NOMEM
;

61 
ôem
->
c⁄ãxt
 = context;

62 
ôem
->
c⁄ãxt
->
£ssi⁄_expúy_time
 = 
db
.
now_ªÆ_s
;

64 if(
db
.
c⁄fig
->
≥rsi°ít_˛õ¡_expú©i⁄
 == 0){

66 
ôem
->
c⁄ãxt
->
£ssi⁄_expúy_time
 +ôem->c⁄ãxt->
£ssi⁄_expúy_öãrvÆ
;

69 if(
db
.
c⁄fig
->
≥rsi°ít_˛õ¡_expú©i⁄
 < 
ôem
->
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
){

71 
ôem
->
c⁄ãxt
->
£ssi⁄_expúy_time
 +
db
.
c⁄fig
->
≥rsi°ít_˛õ¡_expú©i⁄
;

74 
ôem
->
c⁄ãxt
->
£ssi⁄_expúy_time
 +ôem->c⁄ãxt->
£ssi⁄_expúy_öãrvÆ
;

77 
c⁄ãxt
->
expúy_li°_ôem
 = 
ôem
;

79 
	`DL_INSERT_INORDER
(
expúy_li°
, 
ôem
, 
£ssi⁄_expúy__cmp
);

81  
MOSQ_ERR_SUCCESS
;

82 
	}
}

85 
	$£ssi⁄_expúy__add_‰om_≥rsi°í˚
(
mosquôto
 *
c⁄ãxt
, 
time_t
 
expúy_time
)

87 
£ssi⁄_expúy_li°
 *
ôem
;

89 if(
db
.
c⁄fig
->
≥rsi°ít_˛õ¡_expú©i⁄
 == 0){

90 if(
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 =
UINT32_MAX
){

93  
MOSQ_ERR_SUCCESS
;

97 
ôem
 = 
	`mosquôto__ˇŒoc
(1, (
£ssi⁄_expúy_li°
));

98 if(!
ôem
Ë 
MOSQ_ERR_NOMEM
;

100 
ôem
->
c⁄ãxt
 = context;

101 
ôem
->
c⁄ãxt
->
£ssi⁄_expúy_time
 = 
expúy_time
;

102 
c⁄ãxt
->
expúy_li°_ôem
 = 
ôem
;

104 
	`DL_INSERT_INORDER
(
expúy_li°
, 
ôem
, 
£ssi⁄_expúy__cmp
);

106  
MOSQ_ERR_SUCCESS
;

107 
	}
}

110 
	$£ssi⁄_expúy__ªmove
(
mosquôto
 *
c⁄ãxt
)

112 if(
c⁄ãxt
->
expúy_li°_ôem
){

113 
	`DL_DELETE
(
expúy_li°
, 
c⁄ãxt
->
expúy_li°_ôem
);

114 
	`mosquôto__‰ì
(
c⁄ãxt
->
expúy_li°_ôem
);

115 
c⁄ãxt
->
expúy_li°_ôem
 = 
NULL
;

117 
	}
}

121 
	$£ssi⁄_expúy__ªmove_Æl
()

123 
£ssi⁄_expúy_li°
 *
ôem
, *
tmp
;

124 
mosquôto
 *
c⁄ãxt
;

126 
	`DL_FOREACH_SAFE
(
expúy_li°
, 
ôem
, 
tmp
){

127 
c⁄ãxt
 = 
ôem
->context;

128 
	`£ssi⁄_expúy__ªmove
(
c⁄ãxt
);

129 
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 = 0;

130 
c⁄ãxt
->
wûl_dñay_öãrvÆ
 = 0;

131 
	`wûl_dñay__ªmove
(
c⁄ãxt
);

132 
	`c⁄ãxt__disc⁄√˘
(
c⁄ãxt
);

134 
	}
}

136 
	$£ssi⁄_expúy__check
()

138 
£ssi⁄_expúy_li°
 *
ôem
, *
tmp
;

139 
mosquôto
 *
c⁄ãxt
;

141 if(
db
.
now_ªÆ_s
 <
œ°_check
) ;

143 
œ°_check
 = 
db
.
now_ªÆ_s
;

145 
	`DL_FOREACH_SAFE
(
expúy_li°
, 
ôem
, 
tmp
){

146 if(
ôem
->
c⁄ãxt
->
£ssi⁄_expúy_time
 < 
db
.
now_ªÆ_s
){

148 
c⁄ãxt
 = 
ôem
->context;

149 
	`£ssi⁄_expúy__ªmove
(
c⁄ãxt
);

151 if(
c⁄ãxt
->
id
){

152 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Expúög clõ¡ %†duêtÿtimeout.", 
c⁄ãxt
->
id
);

154 
	`G_CLIENTS_EXPIRED_INC
();

157 
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 = 0;

159 
c⁄ãxt
->
wûl_dñay_öãrvÆ
 = 0;

160 
	`wûl_dñay__ªmove
(
c⁄ãxt
);

161 
	`c⁄ãxt__£nd_wûl
(
c⁄ãxt
);

162 
	`c⁄ãxt__add_to_disu£d
(
c⁄ãxt
);

167 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/signals.c

19 #ifde‡
WIN32


20 #i‚de‡
WIN32_LEAN_AND_MEAN


21 
	#WIN32_LEAN_AND_MEAN


	)

23 
	~<wödows.h
>

26 
	~"c⁄fig.h
"

28 
	~<°dio.h
>

29 
	~<°dboﬁ.h
>

30 
	~<sig«l.h
>

32 
	~"mosquôto_brokî_öã∫Æ.h
"

34 #ifde‡
WITH_PERSISTENCE


35 
boﬁ
 
Êag_db_backup
;

37 
boﬁ
 
Êag_ªlﬂd
;

38 
boﬁ
 
Êag_åì_¥öt
;

39 
run
;

41 #ifde‡
SIGHUP


43 
	$h™dÀ_sighup
(
sig«l
)

45 
	`UNUSED
(
sig«l
);

47 
Êag_ªlﬂd
 = 
åue
;

48 
	}
}

52 
	$h™dÀ_sigöt
(
sig«l
)

54 
	`UNUSED
(
sig«l
);

56 
run
 = 0;

57 
	}
}

60 
	$h™dÀ_sigu§1
(
sig«l
)

62 
	`UNUSED
(
sig«l
);

64 #ifde‡
WITH_PERSISTENCE


65 
Êag_db_backup
 = 
åue
;

67 
	}
}

70 
	$h™dÀ_sigu§2
(
sig«l
)

72 
	`UNUSED
(
sig«l
);

74 
Êag_åì_¥öt
 = 
åue
;

75 
	}
}

90 #ifde‡
WIN32


91 
DWORD
 
WINAPI
 
	$SigThªadProc
(* 
d©a
)

93 
TCHAR
 
evt_«me
[
MAX_PATH
];

94 
HANDLE
 
evt
[3];

95 
pid
 = 
	`GëCuºítPro˚ssId
();

97 
	`UNUSED
(
d©a
);

99 
	`•rötf_s
(
evt_«me
, 
MAX_PATH
, "mosq%d_shutdown", 
pid
);

100 
evt
[0] = 
	`Cª©eEvít
(
NULL
, 
TRUE
, 
FALSE
, 
evt_«me
);

101 
	`•rötf_s
(
evt_«me
, 
MAX_PATH
, "mosq%d_ªlﬂd", 
pid
);

102 
evt
[1] = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, 
evt_«me
);

103 
	`•rötf_s
(
evt_«me
, 
MAX_PATH
, "mosq%d_backup", 
pid
);

104 
evt
[2] = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, 
evt_«me
);

106 
åue
) {

107 
wr
 = 
	`WaôF‹Mu…ùÀObje˘s
((
evt
Ë/ (
HANDLE
),Évt, 
FALSE
, 
INFINITE
);

108 
wr
) {

109 
WAIT_OBJECT_0
 + 0:

110 
	`h™dÀ_sigöt
(
SIGINT
);

112 
WAIT_OBJECT_0
 + 1:

113 
Êag_ªlﬂd
 = 
åue
;

115 
WAIT_OBJECT_0
 + 2:

116 
	`h™dÀ_sigu§1
(0);

121 
	`Clo£H™dÀ
(
evt
[0]);

122 
	`Clo£H™dÀ
(
evt
[1]);

123 
	`Clo£H™dÀ
(
evt
[2]);

125 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/subs.c

50 
	~"c⁄fig.h
"

52 
	~<as£π.h
>

53 
	~<°dio.h
>

54 
	~<°rög.h
>

56 
	~"mosquôto_brokî_öã∫Æ.h
"

57 
	~"mem‹y_mosq.h
"

58 
	~"mqâ_¥Ÿocﬁ.h
"

59 
	~"utû_mosq.h
"

61 
	~"uéi°.h
"

63 
	$subs__£nd
(
mosquôto__subÀaf
 *
Àaf
, c⁄° *
t›ic
, 
uöt8_t
 
qos
, 
ªèö
, 
mosquôto_msg_°‹e
 *
°‹ed
)

65 
boﬁ
 
˛õ¡_ªèö
;

66 
uöt16_t
 
mid
;

67 
uöt8_t
 
˛õ¡_qos
, 
msg_qos
;

68 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

69 
rc2
;

72 
rc2
 = 
	`mosquôto_a˛_check
(
Àaf
->
c⁄ãxt
, 
t›ic
, 
°‹ed
->
∑ylﬂdÀn
, st‹ed->
∑ylﬂd
, st‹ed->
qos
, st‹ed->
ªèö
, 
MOSQ_ACL_READ
);

73 if(
rc2
 =
MOSQ_ERR_ACL_DENIED
){

74  
MOSQ_ERR_SUCCESS
;

75 }if(
rc2
 =
MOSQ_ERR_SUCCESS
){

76 
˛õ¡_qos
 = 
Àaf
->
qos
;

78 if(
db
.
c⁄fig
->
upgøde_outgoög_qos
){

79 
msg_qos
 = 
˛õ¡_qos
;

81 if(
qos
 > 
˛õ¡_qos
){

82 
msg_qos
 = 
˛õ¡_qos
;

84 
msg_qos
 = 
qos
;

87 if(
msg_qos
){

88 
mid
 = 
	`mosquôto__mid_gíî©e
(
Àaf
->
c⁄ãxt
);

90 
mid
 = 0;

92 if(
Àaf
->
ªèö_as_published
){

93 
˛õ¡_ªèö
 = 
ªèö
;

95 
˛õ¡_ªèö
 = 
Ál£
;

97 if(
Àaf
->
idítifõr
){

98 
	`mosquôto_¥›îty_add_v¨öt
(&
¥›îtõs
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 
Àaf
->
idítifõr
);

100 if(
	`db__mesßge_ö£π
(
Àaf
->
c⁄ãxt
, 
mid
, 
mosq_md_out
, 
msg_qos
, 
˛õ¡_ªèö
, 
°‹ed
, 
¥›îtõs
, 
åue
) == 1){

107 
	}
}

110 
	$subs__sh¨ed_¥o˚ss
(
mosquôto__subhõr
 *
hõr
, c⁄° *
t›ic
, 
uöt8_t
 
qos
, 
ªèö
, 
mosquôto_msg_°‹e
 *
°‹ed
)

112 
rc
 = 0, 
rc2
;

113 
mosquôto__subsh¨ed
 *
sh¨ed
, *
sh¨ed_tmp
;

114 
mosquôto__subÀaf
 *
Àaf
;

116 
	`HASH_ITER
(
hh
, 
hõr
->
sh¨ed
, sh¨ed, 
sh¨ed_tmp
){

117 
Àaf
 = 
sh¨ed
->
subs
;

118 
rc2
 = 
	`subs__£nd
(
Àaf
, 
t›ic
, 
qos
, 
ªèö
, 
°‹ed
);

120 
	`DL_DELETE
(
sh¨ed
->
subs
, 
Àaf
);

121 
	`DL_APPEND
(
sh¨ed
->
subs
, 
Àaf
);

123 if(
rc2
Ë
rc
 = 1;

126  
rc
;

127 
	}
}

129 
	$subs__¥o˚ss
(
mosquôto__subhõr
 *
hõr
, c⁄° *
sour˚_id
, c⁄° *
t›ic
, 
uöt8_t
 
qos
, 
ªèö
, 
mosquôto_msg_°‹e
 *
°‹ed
)

131 
rc
 = 0;

132 
rc2
;

133 
mosquôto__subÀaf
 *
Àaf
;

135 
rc
 = 
	`subs__sh¨ed_¥o˚ss
(
hõr
, 
t›ic
, 
qos
, 
ªèö
, 
°‹ed
);

137 
Àaf
 = 
hõr
->
subs
;

138 
sour˚_id
 && 
Àaf
){

139 if(!
Àaf
->
c⁄ãxt
->
id
 || (Àaf->
no_loˇl
 && !
	`°rcmp
÷óf->c⁄ãxt->id, 
sour˚_id
))){

140 
Àaf
 =Üóf->
√xt
;

143 
rc2
 = 
	`subs__£nd
(
Àaf
, 
t›ic
, 
qos
, 
ªèö
, 
°‹ed
);

144 if(
rc2
){

145 
rc
 = 1;

147 
Àaf
 =Üóf->
√xt
;

149 if(
hõr
->
subs
 || hõr->
sh¨ed
){

150  
rc
;

152  
MOSQ_ERR_NO_SUBSCRIBERS
;

154 
	}
}

157 
	$sub__add_Àaf
(
mosquôto
 *
c⁄ãxt
, 
uöt8_t
 
qos
, 
uöt32_t
 
idítifõr
, 
›ti⁄s
, 
mosquôto__subÀaf
 **
hód
, mosquôto__subÀa‡**
√wÀaf
)

159 
mosquôto__subÀaf
 *
Àaf
;

161 *
√wÀaf
 = 
NULL
;

162 
Àaf
 = *
hód
;

164 
Àaf
){

165 if(
Àaf
->
c⁄ãxt
 &&Üóf->c⁄ãxt->
id
 && !
	`°rcmp
(leaf->context->id, context->id)){

169 
Àaf
->
qos
 = qos;

170 
Àaf
->
idítifõr
 = identifier;

171  
MOSQ_ERR_SUB_EXISTS
;

173 
Àaf
 =Üóf->
√xt
;

175 
Àaf
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__subÀaf
));

176 if(!
Àaf
Ë 
MOSQ_ERR_NOMEM
;

177 
Àaf
->
c⁄ãxt
 = context;

178 
Àaf
->
qos
 = qos;

179 
Àaf
->
idítifõr
 = identifier;

180 
Àaf
->
no_loˇl
 = ((
›ti⁄s
 & 
MQTT_SUB_OPT_NO_LOCAL
) != 0);

181 
Àaf
->
ªèö_as_published
 = ((
›ti⁄s
 & 
MQTT_SUB_OPT_RETAIN_AS_PUBLISHED
) != 0);

183 
	`DL_APPEND
(*
hód
, 
Àaf
);

184 *
√wÀaf
 = 
Àaf
;

186  
MOSQ_ERR_SUCCESS
;

187 
	}
}

190 
	$sub__ªmove_sh¨ed_Àaf
(
mosquôto__subhõr
 *
subhõr
, 
mosquôto__subsh¨ed
 *
sh¨ed
, 
mosquôto__subÀaf
 *
Àaf
)

192 
	`DL_DELETE
(
sh¨ed
->
subs
, 
Àaf
);

193 if(
sh¨ed
->
subs
 =
NULL
){

194 
	`HASH_DELETE
(
hh
, 
subhõr
->
sh¨ed
, shared);

195 
	`mosquôto__‰ì
(
sh¨ed
->
«me
);

196 
	`mosquôto__‰ì
(
sh¨ed
);

198 
	`mosquôto__‰ì
(
Àaf
);

199 
	}
}

202 
	$sub__add_sh¨ed
(
mosquôto
 *
c⁄ãxt
, c⁄° *
sub
, 
uöt8_t
 
qos
, 
uöt32_t
 
idítifõr
, 
›ti⁄s
, 
mosquôto__subhõr
 *
subhõr
, c⁄° *
sh¨íame
)

204 
mosquôto__subÀaf
 *
√wÀaf
;

205 
mosquôto__subsh¨ed
 *
sh¨ed
 = 
NULL
;

206 
mosquôto__˛õ¡_sub
 **
subs
;

207 
mosquôto__˛õ¡_sub
 *
csub
;

208 
i
;

209 
size_t
 
¶í
;

210 
rc
;

212 
¶í
 = 
	`°æí
(
sh¨íame
);

214 
	`HASH_FIND
(
hh
, 
subhõr
->
sh¨ed
, 
sh¨íame
, 
¶í
, shared);

215 if(
sh¨ed
 =
NULL
){

216 
sh¨ed
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__subsh¨ed
));

217 if(!
sh¨ed
){

218  
MOSQ_ERR_NOMEM
;

220 
sh¨ed
->
«me
 = 
	`mosquôto__°rdup
(
sh¨íame
);

221 if(
sh¨ed
->
«me
 =
NULL
){

222 
	`mosquôto__‰ì
(
sh¨ed
);

223  
MOSQ_ERR_NOMEM
;

226 
	`HASH_ADD_KEYPTR
(
hh
, 
subhõr
->
sh¨ed
, sh¨ed->
«me
, 
¶í
, shared);

229 
rc
 = 
	`sub__add_Àaf
(
c⁄ãxt
, 
qos
, 
idítifõr
, 
›ti⁄s
, &
sh¨ed
->
subs
, &
√wÀaf
);

230 if(
rc
 > 0){

231 if(
sh¨ed
->
subs
 =
NULL
){

232 
	`HASH_DELETE
(
hh
, 
subhõr
->
sh¨ed
, shared);

233 
	`mosquôto__‰ì
(
sh¨ed
->
«me
);

234 
	`mosquôto__‰ì
(
sh¨ed
);

236  
rc
;

239 if(
rc
 !
MOSQ_ERR_SUB_EXISTS
){

240 
¶í
 = 
	`°æí
(
sub
);

241 
csub
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__˛õ¡_sub
Ë+ 
¶í
 + 1);

242 if(
csub
 =
NULL
Ë 
MOSQ_ERR_NOMEM
;

243 
	`mem˝y
(
csub
->
t›ic_fûãr
, 
sub
, 
¶í
);

244 
csub
->
hõr
 = 
subhõr
;

245 
csub
->
sh¨ed
 = shared;

247 
i
=0; i<
c⁄ãxt
->
sub_cou¡
; i++){

248 if(!
c⁄ãxt
->
subs
[
i
]){

249 
c⁄ãxt
->
subs
[
i
] = 
csub
;

253 if(
i
 =
c⁄ãxt
->
sub_cou¡
){

254 
subs
 = 
	`mosquôto__ªÆloc
(
c⁄ãxt
->subs, (
mosquôto__˛õ¡_sub
 *)*(
size_t
)(c⁄ãxt->
sub_cou¡
 + 1));

255 if(!
subs
){

256 
	`sub__ªmove_sh¨ed_Àaf
(
subhõr
, 
sh¨ed
, 
√wÀaf
);

257 
	`mosquôto__‰ì
(
√wÀaf
);

258 
	`mosquôto__‰ì
(
csub
);

259  
MOSQ_ERR_NOMEM
;

261 
c⁄ãxt
->
subs
 = subs;

262 
c⁄ãxt
->
sub_cou¡
++;

263 
c⁄ãxt
->
subs
[c⁄ãxt->
sub_cou¡
-1] = 
csub
;

265 #ifde‡
WITH_SYS_TREE


266 
db
.
sh¨ed_subs¸ùti⁄_cou¡
++;

270 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ31
 || c⁄ãxt->¥Ÿocﬁ =
mosq_p_mqâ5
){

271  
rc
;

275  
MOSQ_ERR_SUCCESS
;

277 
	}
}

280 
	$sub__add_n‹mÆ
(
mosquôto
 *
c⁄ãxt
, c⁄° *
sub
, 
uöt8_t
 
qos
, 
uöt32_t
 
idítifõr
, 
›ti⁄s
, 
mosquôto__subhõr
 *
subhõr
)

282 
mosquôto__subÀaf
 *
√wÀaf
 = 
NULL
;

283 
mosquôto__˛õ¡_sub
 **
subs
;

284 
mosquôto__˛õ¡_sub
 *
csub
;

285 
i
;

286 
rc
;

287 
size_t
 
¶í
;

289 
rc
 = 
	`sub__add_Àaf
(
c⁄ãxt
, 
qos
, 
idítifõr
, 
›ti⁄s
, &
subhõr
->
subs
, &
√wÀaf
);

290 if(
rc
 > 0){

291  
rc
;

294 if(
rc
 !
MOSQ_ERR_SUB_EXISTS
){

295 
¶í
 = 
	`°æí
(
sub
);

296 
csub
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__˛õ¡_sub
Ë+ 
¶í
 + 1);

297 if(
csub
 =
NULL
Ë 
MOSQ_ERR_NOMEM
;

298 
	`mem˝y
(
csub
->
t›ic_fûãr
, 
sub
, 
¶í
);

299 
csub
->
hõr
 = 
subhõr
;

300 
csub
->
sh¨ed
 = 
NULL
;

302 
i
=0; i<
c⁄ãxt
->
sub_cou¡
; i++){

303 if(!
c⁄ãxt
->
subs
[
i
]){

304 
c⁄ãxt
->
subs
[
i
] = 
csub
;

308 if(
i
 =
c⁄ãxt
->
sub_cou¡
){

309 
subs
 = 
	`mosquôto__ªÆloc
(
c⁄ãxt
->subs, (
mosquôto__˛õ¡_sub
 *)*(
size_t
)(c⁄ãxt->
sub_cou¡
 + 1));

310 if(!
subs
){

311 
	`DL_DELETE
(
subhõr
->
subs
, 
√wÀaf
);

312 
	`mosquôto__‰ì
(
√wÀaf
);

313 
	`mosquôto__‰ì
(
csub
);

314  
MOSQ_ERR_NOMEM
;

316 
c⁄ãxt
->
subs
 = subs;

317 
c⁄ãxt
->
sub_cou¡
++;

318 
c⁄ãxt
->
subs
[c⁄ãxt->
sub_cou¡
-1] = 
csub
;

320 #ifde‡
WITH_SYS_TREE


321 
db
.
subs¸ùti⁄_cou¡
++;

325 if(
c⁄ãxt
->
¥Ÿocﬁ
 =
mosq_p_mqâ31
 || c⁄ãxt->¥Ÿocﬁ =
mosq_p_mqâ5
){

326  
rc
;

330  
MOSQ_ERR_SUCCESS
;

332 
	}
}

335 
	$sub__add_c⁄ãxt
(
mosquôto
 *
c⁄ãxt
, c⁄° *
t›ic_fûãr
, 
uöt8_t
 
qos
, 
uöt32_t
 
idítifõr
, 
›ti⁄s
, 
mosquôto__subhõr
 *
subhõr
, *c⁄° *c⁄° 
t›ics
, c⁄° *
sh¨íame
)

337 
mosquôto__subhõr
 *
bønch
;

338 
t›ic_ödex
 = 0;

339 
size_t
 
t›i˛í
;

342 
t›ics
 &&Å›ics[
t›ic_ödex
] !
NULL
){

343 
t›i˛í
 = 
	`°æí
(
t›ics
[
t›ic_ödex
]);

344 if(
t›i˛í
 > 
UINT16_MAX
){

345  
MOSQ_ERR_INVAL
;

347 
	`HASH_FIND
(
hh
, 
subhõr
->
chûdªn
, 
t›ics
[
t›ic_ödex
], 
t›i˛í
, 
bønch
);

348 if(!
bønch
){

350 
bønch
 = 
	`sub__add_hõr_íåy
(
subhõr
, &subhõr->
chûdªn
, 
t›ics
[
t›ic_ödex
], (
uöt16_t
)
t›i˛í
);

351 if(!
bønch
Ë 
MOSQ_ERR_NOMEM
;

353 
subhõr
 = 
bønch
;

354 
t›ic_ödex
++;

358 if(
c⁄ãxt
 && c⁄ãxt->
id
){

359 if(
sh¨íame
){

360  
	`sub__add_sh¨ed
(
c⁄ãxt
, 
t›ic_fûãr
, 
qos
, 
idítifõr
, 
›ti⁄s
, 
subhõr
, 
sh¨íame
);

362  
	`sub__add_n‹mÆ
(
c⁄ãxt
, 
t›ic_fûãr
, 
qos
, 
idítifõr
, 
›ti⁄s
, 
subhõr
);

365  
MOSQ_ERR_SUCCESS
;

367 
	}
}

370 
	$sub__ªmove_n‹mÆ
(
mosquôto
 *
c⁄ãxt
, 
mosquôto__subhõr
 *
subhõr
, 
uöt8_t
 *
ªas⁄
)

372 
mosquôto__subÀaf
 *
Àaf
;

373 
i
;

375 
Àaf
 = 
subhõr
->
subs
;

376 
Àaf
){

377 if(
Àaf
->
c⁄ãxt
==context){

378 #ifde‡
WITH_SYS_TREE


379 
db
.
subs¸ùti⁄_cou¡
--;

381 
	`DL_DELETE
(
subhõr
->
subs
, 
Àaf
);

382 
	`mosquôto__‰ì
(
Àaf
);

388 
i
=0; i<
c⁄ãxt
->
sub_cou¡
; i++){

389 if(
c⁄ãxt
->
subs
[
i
] && c⁄ãxt->subs[i]->
hõr
 =
subhõr
){

390 
	`mosquôto__‰ì
(
c⁄ãxt
->
subs
[
i
]);

391 
c⁄ãxt
->
subs
[
i
] = 
NULL
;

395 *
ªas⁄
 = 0;

396  
MOSQ_ERR_SUCCESS
;

398 
Àaf
 =Üóf->
√xt
;

400  
MOSQ_ERR_NO_SUBSCRIBERS
;

401 
	}
}

404 
	$sub__ªmove_sh¨ed
(
mosquôto
 *
c⁄ãxt
, 
mosquôto__subhõr
 *
subhõr
, 
uöt8_t
 *
ªas⁄
, c⁄° *
sh¨íame
)

406 
mosquôto__subsh¨ed
 *
sh¨ed
;

407 
mosquôto__subÀaf
 *
Àaf
;

408 
i
;

410 
	`HASH_FIND
(
hh
, 
subhõr
->
sh¨ed
, 
sh¨íame
, 
	`°æí
(sharename), shared);

411 if(
sh¨ed
){

412 
Àaf
 = 
sh¨ed
->
subs
;

413 
Àaf
){

414 if(
Àaf
->
c⁄ãxt
==context){

415 #ifde‡
WITH_SYS_TREE


416 
db
.
sh¨ed_subs¸ùti⁄_cou¡
--;

418 
	`DL_DELETE
(
sh¨ed
->
subs
, 
Àaf
);

419 
	`mosquôto__‰ì
(
Àaf
);

425 
i
=0; i<
c⁄ãxt
->
sub_cou¡
; i++){

426 if(
c⁄ãxt
->
subs
[
i
]

427 && 
c⁄ãxt
->
subs
[
i
]->
hõr
 =
subhõr


428 && 
c⁄ãxt
->
subs
[
i
]->
sh¨ed
 == shared){

430 
	`mosquôto__‰ì
(
c⁄ãxt
->
subs
[
i
]);

431 
c⁄ãxt
->
subs
[
i
] = 
NULL
;

436 if(
sh¨ed
->
subs
 =
NULL
){

437 
	`HASH_DELETE
(
hh
, 
subhõr
->
sh¨ed
, shared);

438 
	`mosquôto__‰ì
(
sh¨ed
->
«me
);

439 
	`mosquôto__‰ì
(
sh¨ed
);

442 *
ªas⁄
 = 0;

443  
MOSQ_ERR_SUCCESS
;

445 
Àaf
 =Üóf->
√xt
;

447  
MOSQ_ERR_NO_SUBSCRIBERS
;

449  
MOSQ_ERR_NO_SUBSCRIBERS
;

451 
	}
}

454 
	$sub__ªmove_ªcur£
(
mosquôto
 *
c⁄ãxt
, 
mosquôto__subhõr
 *
subhõr
, **
t›ics
, 
uöt8_t
 *
ªas⁄
, c⁄° *
sh¨íame
)

456 
mosquôto__subhõr
 *
bønch
;

458 if(
t›ics
 =
NULL
 ||Åopics[0] == NULL){

459 if(
sh¨íame
){

460  
	`sub__ªmove_sh¨ed
(
c⁄ãxt
, 
subhõr
, 
ªas⁄
, 
sh¨íame
);

462  
	`sub__ªmove_n‹mÆ
(
c⁄ãxt
, 
subhõr
, 
ªas⁄
);

466 
	`HASH_FIND
(
hh
, 
subhõr
->
chûdªn
, 
t›ics
[0], 
	`°æí
—›ics[0]), 
bønch
);

467 if(
bønch
){

468 
	`sub__ªmove_ªcur£
(
c⁄ãxt
, 
bønch
, &(
t›ics
[1]), 
ªas⁄
, 
sh¨íame
);

469 if(!
bønch
->
chûdªn
 && !bønch->
subs
 && !bønch->
sh¨ed
){

470 
	`HASH_DELETE
(
hh
, 
subhõr
->
chûdªn
, 
bønch
);

471 
	`mosquôto__‰ì
(
bønch
->
t›ic
);

472 
	`mosquôto__‰ì
(
bønch
);

475  
MOSQ_ERR_SUCCESS
;

476 
	}
}

479 
	$sub__£¨ch
(
mosquôto__subhõr
 *
subhõr
, **
•lô_t›ics
, c⁄° *
sour˚_id
, c⁄° *
t›ic
, 
uöt8_t
 
qos
, 
ªèö
, 
mosquôto_msg_°‹e
 *
°‹ed
)

482 
mosquôto__subhõr
 *
bønch
;

483 
rc
;

484 
boﬁ
 
have_subs¸ibîs
 = 
Ál£
;

486 if(
•lô_t›ics
 && split_topics[0]){

488 
	`HASH_FIND
(
hh
, 
subhõr
->
chûdªn
, 
•lô_t›ics
[0], 
	`°æí
(•lô_t›ics[0]), 
bønch
);

490 if(
bønch
){

491 
rc
 = 
	`sub__£¨ch
(
bønch
, &(
•lô_t›ics
[1]), 
sour˚_id
, 
t›ic
, 
qos
, 
ªèö
, 
°‹ed
);

492 if(
rc
 =
MOSQ_ERR_SUCCESS
){

493 
have_subs¸ibîs
 = 
åue
;

494 }if(
rc
 !
MOSQ_ERR_NO_SUBSCRIBERS
){

495  
rc
;

497 if(
•lô_t›ics
[1] =
NULL
){

498 
rc
 = 
	`subs__¥o˚ss
(
bønch
, 
sour˚_id
, 
t›ic
, 
qos
, 
ªèö
, 
°‹ed
);

499 if(
rc
 =
MOSQ_ERR_SUCCESS
){

500 
have_subs¸ibîs
 = 
åue
;

501 }if(
rc
 !
MOSQ_ERR_NO_SUBSCRIBERS
){

502  
rc
;

508 
	`HASH_FIND
(
hh
, 
subhõr
->
chûdªn
, "+", 1, 
bønch
);

510 if(
bønch
){

511 
rc
 = 
	`sub__£¨ch
(
bønch
, &(
•lô_t›ics
[1]), 
sour˚_id
, 
t›ic
, 
qos
, 
ªèö
, 
°‹ed
);

512 if(
rc
 =
MOSQ_ERR_SUCCESS
){

513 
have_subs¸ibîs
 = 
åue
;

514 }if(
rc
 !
MOSQ_ERR_NO_SUBSCRIBERS
){

515  
rc
;

517 if(
•lô_t›ics
[1] =
NULL
){

518 
rc
 = 
	`subs__¥o˚ss
(
bønch
, 
sour˚_id
, 
t›ic
, 
qos
, 
ªèö
, 
°‹ed
);

519 if(
rc
 =
MOSQ_ERR_SUCCESS
){

520 
have_subs¸ibîs
 = 
åue
;

521 }if(
rc
 !
MOSQ_ERR_NO_SUBSCRIBERS
){

522  
rc
;

529 
	`HASH_FIND
(
hh
, 
subhõr
->
chûdªn
, "#", 1, 
bønch
);

530 if(
bønch
 && !bønch->
chûdªn
){

535 
rc
 = 
	`subs__¥o˚ss
(
bønch
, 
sour˚_id
, 
t›ic
, 
qos
, 
ªèö
, 
°‹ed
);

536 if(
rc
 =
MOSQ_ERR_SUCCESS
){

537 
have_subs¸ibîs
 = 
åue
;

538 }if(
rc
 !
MOSQ_ERR_NO_SUBSCRIBERS
){

539  
rc
;

543 if(
have_subs¸ibîs
){

544  
MOSQ_ERR_SUCCESS
;

546  
MOSQ_ERR_NO_SUBSCRIBERS
;

548 
	}
}

551 
mosquôto__subhõr
 *
	$sub__add_hõr_íåy
(
mosquôto__subhõr
 *
∑ª¡
, mosquôto__subhõ∏**
siblög
, c⁄° *
t›ic
, 
uöt16_t
 
Àn
)

553 
mosquôto__subhõr
 *
chûd
;

555 
	`as£π
(
siblög
);

557 
chûd
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto__subhõr
));

558 if(!
chûd
){

559 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

560  
NULL
;

562 
chûd
->
∑ª¡
 =Öarent;

563 
chûd
->
t›ic_Àn
 = 
Àn
;

564 
chûd
->
t›ic
 = 
	`mosquôto__°rdup
(topic);

565 if(!
chûd
->
t›ic
){

566 
chûd
->
t›ic_Àn
 = 0;

567 
	`mosquôto__‰ì
(
chûd
);

568 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

569  
NULL
;

572 
	`HASH_ADD_KEYPTR
(
hh
, *
siblög
, 
chûd
->
t›ic
, chûd->
t›ic_Àn
, child);

574  
chûd
;

575 
	}
}

578 
	$sub__add
(
mosquôto
 *
c⁄ãxt
, c⁄° *
sub
, 
uöt8_t
 
qos
, 
uöt32_t
 
idítifõr
, 
›ti⁄s
, 
mosquôto__subhõr
 **
roŸ
)

580 
rc
 = 0;

581 
mosquôto__subhõr
 *
subhõr
;

582 c⁄° *
sh¨íame
 = 
NULL
;

583 *
loˇl_sub
;

584 **
t›ics
;

585 
size_t
 
t›i˛í
;

587 
	`as£π
(
roŸ
);

588 
	`as£π
(*
roŸ
);

589 
	`as£π
(
sub
);

591 
rc
 = 
	`sub__t›ic_tokíi£
(
sub
, &
loˇl_sub
, &
t›ics
, &
sh¨íame
);

592 if(
rc
) Ñc;

594 
t›i˛í
 = 
	`°æí
(
t›ics
[0]);

595 if(
t›i˛í
 > 
UINT16_MAX
){

596 
	`mosquôto__‰ì
(
loˇl_sub
);

597 
	`mosquôto__‰ì
(
t›ics
);

598  
MOSQ_ERR_INVAL
;

600 
	`HASH_FIND
(
hh
, *
roŸ
, 
t›ics
[0], 
t›i˛í
, 
subhõr
);

601 if(!
subhõr
){

602 
subhõr
 = 
	`sub__add_hõr_íåy
(
NULL
, 
roŸ
, 
t›ics
[0], (
uöt16_t
)
t›i˛í
);

603 if(!
subhõr
){

604 
	`mosquôto__‰ì
(
loˇl_sub
);

605 
	`mosquôto__‰ì
(
t›ics
);

606 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Error: Out of memory.");

607  
MOSQ_ERR_NOMEM
;

611 
rc
 = 
	`sub__add_c⁄ãxt
(
c⁄ãxt
, 
sub
, 
qos
, 
idítifõr
, 
›ti⁄s
, 
subhõr
, 
t›ics
, 
sh¨íame
);

613 
	`mosquôto__‰ì
(
loˇl_sub
);

614 
	`mosquôto__‰ì
(
t›ics
);

616  
rc
;

617 
	}
}

619 
	$sub__ªmove
(
mosquôto
 *
c⁄ãxt
, c⁄° *
sub
, 
mosquôto__subhõr
 *
roŸ
, 
uöt8_t
 *
ªas⁄
)

621 
rc
 = 0;

622 
mosquôto__subhõr
 *
subhõr
;

623 c⁄° *
sh¨íame
 = 
NULL
;

624 *
loˇl_sub
 = 
NULL
;

625 **
t›ics
 = 
NULL
;

627 
	`as£π
(
roŸ
);

628 
	`as£π
(
sub
);

630 
rc
 = 
	`sub__t›ic_tokíi£
(
sub
, &
loˇl_sub
, &
t›ics
, &
sh¨íame
);

631 if(
rc
) Ñc;

633 
	`HASH_FIND
(
hh
, 
roŸ
, 
t›ics
[0], 
	`°æí
—›ics[0]), 
subhõr
);

634 if(
subhõr
){

635 *
ªas⁄
 = 
MQTT_RC_NO_SUBSCRIPTION_EXISTED
;

636 
rc
 = 
	`sub__ªmove_ªcur£
(
c⁄ãxt
, 
subhõr
, 
t›ics
, 
ªas⁄
, 
sh¨íame
);

639 
	`mosquôto__‰ì
(
loˇl_sub
);

640 
	`mosquôto__‰ì
(
t›ics
);

642  
rc
;

643 
	}
}

645 
	$sub__mesßges_queue
(c⁄° *
sour˚_id
, c⁄° *
t›ic
, 
uöt8_t
 
qos
, 
ªèö
, 
mosquôto_msg_°‹e
 **
°‹ed
)

647 
rc
 = 
MOSQ_ERR_SUCCESS
, 
rc2
;

648 
mosquôto__subhõr
 *
subhõr
;

649 **
•lô_t›ics
 = 
NULL
;

650 *
loˇl_t›ic
 = 
NULL
;

652 
	`as£π
(
t›ic
);

654 if(
	`sub__t›ic_tokíi£
(
t›ic
, &
loˇl_t›ic
, &
•lô_t›ics
, 
NULL
))  1;

660 
	`db__msg_°‹e_ªf_öc
(*
°‹ed
);

662 
	`HASH_FIND
(
hh
, 
db
.
subs
, 
•lô_t›ics
[0], 
	`°æí
(•lô_t›ics[0]), 
subhõr
);

663 if(
subhõr
){

664 
rc
 = 
	`sub__£¨ch
(
subhõr
, 
•lô_t›ics
, 
sour˚_id
, 
t›ic
, 
qos
, 
ªèö
, *
°‹ed
);

667 if(
ªèö
){

668 
rc2
 = 
	`ªèö__°‹e
(
t›ic
, *
°‹ed
, 
•lô_t›ics
);

669 if(
rc2
Ë
rc
 =Ñc2;

672 
	`mosquôto__‰ì
(
•lô_t›ics
);

673 
	`mosquôto__‰ì
(
loˇl_t›ic
);

675 
	`db__msg_°‹e_ªf_dec
(
°‹ed
);

677  
rc
;

678 
	}
}

682 
mosquôto__subhõr
 *
	$tmp_ªmove_subs
(
mosquôto__subhõr
 *
sub
)

684 
mosquôto__subhõr
 *
∑ª¡
;

686 if(!
sub
 || !sub->
∑ª¡
){

687  
NULL
;

690 if(
sub
->
chûdªn
 || sub->
subs
){

691  
NULL
;

694 
∑ª¡
 = 
sub
->parent;

695 
	`HASH_DELETE
(
hh
, 
∑ª¡
->
chûdªn
, 
sub
);

696 
	`mosquôto__‰ì
(
sub
->
t›ic
);

697 
	`mosquôto__‰ì
(
sub
);

699 if(
∑ª¡
->
subs
 =
NULL


700 && 
∑ª¡
->
chûdªn
 =
NULL


701 && 
∑ª¡
->
sh¨ed
 =
NULL


702 && 
∑ª¡
->parent){

704  
∑ª¡
;

706  
NULL
;

708 
	}
}

713 
	$sub__˛ón_£ssi⁄
(
mosquôto
 *
c⁄ãxt
)

715 
i
;

716 
mosquôto__subÀaf
 *
Àaf
;

717 
mosquôto__subhõr
 *
hõr
;

719 
i
=0; i<
c⁄ãxt
->
sub_cou¡
; i++){

720 if(
c⁄ãxt
->
subs
[
i
] =
NULL
){

724 
hõr
 = 
c⁄ãxt
->
subs
[
i
]->hier;

726 if(
c⁄ãxt
->
subs
[
i
]->
sh¨ed
){

727 
Àaf
 = 
c⁄ãxt
->
subs
[
i
]->
sh¨ed
->subs;

728 
Àaf
){

729 if(
Àaf
->
c⁄ãxt
==context){

730 #ifde‡
WITH_SYS_TREE


731 
db
.
sh¨ed_subs¸ùti⁄_cou¡
--;

733 
	`sub__ªmove_sh¨ed_Àaf
(
c⁄ãxt
->
subs
[
i
]->
hõr
, c⁄ãxt->subs[i]->
sh¨ed
, 
Àaf
);

736 
Àaf
 =Üóf->
√xt
;

739 
Àaf
 = 
hõr
->
subs
;

740 
Àaf
){

741 if(
Àaf
->
c⁄ãxt
==context){

742 #ifde‡
WITH_SYS_TREE


743 
db
.
subs¸ùti⁄_cou¡
--;

745 
	`DL_DELETE
(
hõr
->
subs
, 
Àaf
);

746 
	`mosquôto__‰ì
(
Àaf
);

749 
Àaf
 =Üóf->
√xt
;

752 
	`mosquôto__‰ì
(
c⁄ãxt
->
subs
[
i
]);

753 
c⁄ãxt
->
subs
[
i
] = 
NULL
;

755 if(
hõr
->
subs
 =
NULL


756 && 
hõr
->
chûdªn
 =
NULL


757 && 
hõr
->
sh¨ed
 =
NULL


758 && 
hõr
->
∑ª¡
){

761 
hõr
 = 
	`tmp_ªmove_subs
(hier);

762 }
hõr
);

765 
	`mosquôto__‰ì
(
c⁄ãxt
->
subs
);

766 
c⁄ãxt
->
subs
 = 
NULL
;

767 
c⁄ãxt
->
sub_cou¡
 = 0;

769  
MOSQ_ERR_SUCCESS
;

770 
	}
}

772 
	$sub__åì_¥öt
(
mosquôto__subhõr
 *
roŸ
, 
Àvñ
)

774 
i
;

775 
mosquôto__subhõr
 *
bønch
, *
bønch_tmp
;

776 
mosquôto__subÀaf
 *
Àaf
;

778 
	`HASH_ITER
(
hh
, 
roŸ
, 
bønch
, 
bønch_tmp
){

779 if(
Àvñ
 > -1){

780 
i
=0; i<(
Àvñ
+2)*2; i++){

781 
	`¥ötf
(" ");

783 
	`¥ötf
("%s", 
bønch
->
t›ic
);

784 
Àaf
 = 
bønch
->
subs
;

785 
Àaf
){

786 if(
Àaf
->
c⁄ãxt
){

787 
	`¥ötf
(" (%s, %d)", 
Àaf
->
c⁄ãxt
->
id
,Üóf->
qos
);

789 
	`¥ötf
(" (%s, %d)", "", 
Àaf
->
qos
);

791 
Àaf
 =Üóf->
√xt
;

793 
	`¥ötf
("\n");

796 
	`sub__åì_¥öt
(
bønch
->
chûdªn
, 
Àvñ
+1);

798 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/sys_tree.c

19 #ifde‡
WITH_SYS_TREE


21 
	~"c⁄fig.h
"

23 
	~<m©h.h
>

24 
	~<°dio.h
>

25 
	~<limôs.h
>

27 
	~"mosquôto_brokî_öã∫Æ.h
"

28 
	~"mem‹y_mosq.h
"

29 
	~"time_mosq.h
"

31 
	#BUFLEN
 100

	)

33 
	#SYS_TREE_QOS
 2

	)

35 
uöt64_t
 
	gg_byãs_ª˚ived
 = 0;

36 
uöt64_t
 
	gg_byãs_£¡
 = 0;

37 
uöt64_t
 
	gg_pub_byãs_ª˚ived
 = 0;

38 
uöt64_t
 
	gg_pub_byãs_£¡
 = 0;

39 
	gg_msgs_ª˚ived
 = 0;

40 
	gg_msgs_£¡
 = 0;

41 
	gg_pub_msgs_ª˚ived
 = 0;

42 
	gg_pub_msgs_£¡
 = 0;

43 
	gg_msgs_dr›≥d
 = 0;

44 
	gg_˛õ¡s_expúed
 = 0;

45 
	gg_sockë_c⁄√˘i⁄s
 = 0;

46 
	gg_c⁄√˘i⁄_cou¡
 = 0;

48 
	$sys_åì__öô
()

50 
buf
[64];

51 
uöt32_t
 
Àn
;

53 if(
db
.
c⁄fig
->
sys_öãrvÆ
 == 0){

58 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 64, "mosquôtÿvîsi⁄ %s", 
VERSION
);

59 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/vîsi⁄", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 0, NULL);

60 
	}
}

62 
	$sys_åì__upd©e_˛õ¡s
(*
buf
)

64 
˛õ¡_cou¡
 = 
UINT_MAX
;

65 
˛õ¡s_expúed
 = 
UINT_MAX
;

66 
˛õ¡_max
 = 0;

67 
disc⁄√˘ed_cou¡
 = 
UINT_MAX
;

68 
c⁄√˘ed_cou¡
 = 
UINT_MAX
;

69 
uöt32_t
 
Àn
;

71 
cou¡_tŸÆ
, 
cou¡_by_sock
;

73 
cou¡_tŸÆ
 = 
	`HASH_CNT
(
hh_id
, 
db
.
c⁄ãxts_by_id
);

74 
cou¡_by_sock
 = 
	`HASH_CNT
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
);

76 if(
˛õ¡_cou¡
 !
cou¡_tŸÆ
){

77 
˛õ¡_cou¡
 = 
cou¡_tŸÆ
;

78 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%d", 
˛õ¡_cou¡
);

79 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/˛õ¡s/tŸÆ", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

81 if(
˛õ¡_cou¡
 > 
˛õ¡_max
){

82 
˛õ¡_max
 = 
˛õ¡_cou¡
;

83 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%d", 
˛õ¡_max
);

84 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/˛õ¡s/maximum", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

88 if(
disc⁄√˘ed_cou¡
 !
cou¡_tŸÆ
-
cou¡_by_sock
){

89 
disc⁄√˘ed_cou¡
 = 
cou¡_tŸÆ
-
cou¡_by_sock
;

90 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%d", 
disc⁄√˘ed_cou¡
);

91 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/˛õ¡s/öa˘ive", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

92 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/˛õ¡s/disc⁄√˘ed", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

94 if(
c⁄√˘ed_cou¡
 !
cou¡_by_sock
){

95 
c⁄√˘ed_cou¡
 = 
cou¡_by_sock
;

96 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%d", 
c⁄√˘ed_cou¡
);

97 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/˛õ¡s/a˘ive", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

98 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/˛õ¡s/c⁄√˘ed", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

100 if(
g_˛õ¡s_expúed
 !
˛õ¡s_expúed
){

101 
˛õ¡s_expúed
 = 
g_˛õ¡s_expúed
;

102 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%d", 
˛õ¡s_expúed
);

103 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/˛õ¡s/expúed", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

105 
	}
}

107 #ifde‡
REAL_WITH_MEMORY_TRACKING


108 
	$sys_åì__upd©e_mem‹y
(*
buf
)

110 
cuºít_hóp
 = 
ULONG_MAX
;

111 
max_hóp
 = 
ULONG_MAX
;

112 
vÆue_ul
;

113 
uöt32_t
 
Àn
;

115 
vÆue_ul
 = 
	`mosquôto__mem‹y_u£d
();

116 if(
cuºít_hóp
 !
vÆue_ul
){

117 
cuºít_hóp
 = 
vÆue_ul
;

118 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%lu", 
cuºít_hóp
);

119 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/hóp/cuºít", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

121 
vÆue_ul
 =
	`mosquôto__max_mem‹y_u£d
();

122 if(
max_hóp
 !
vÆue_ul
){

123 
max_hóp
 = 
vÆue_ul
;

124 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%lu", 
max_hóp
);

125 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/hóp/maximum", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

127 
	}
}

130 
	$ˇlc_lﬂd
(*
buf
, c⁄° *
t›ic
, 
boﬁ
 
öôül
, 
exp⁄ít
, 
öãrvÆ
, *
cuºít
)

132 
√w_vÆue
;

133 
uöt32_t
 
Àn
;

135 i‡(
öôül
) {

136 
√w_vÆue
 = *
cuºít
;

137 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%.2f", 
√w_vÆue
);

138 
	`db__mesßges_ósy_queue
(
NULL
, 
t›ic
, 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

140 
√w_vÆue
 = 
öãrvÆ
 + 
exp⁄ít
*((*
cuºít
) - interval);

141 if(
	`Ábs
(
√w_vÆue
 - (*
cuºít
)) >= 0.01){

142 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%.2f", 
√w_vÆue
);

143 
	`db__mesßges_ósy_queue
(
NULL
, 
t›ic
, 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

146 (*
cuºít
Ë
√w_vÆue
;

147 
	}
}

155 
	$sys_åì__upd©e
(
öãrvÆ
, 
time_t
 
°¨t_time
)

157 
time_t
 
œ°_upd©e
 = 0;

158 
time_t
 
u±ime
;

159 
buf
[
BUFLEN
];

161 
msg_°‹e_cou¡
 = 
INT_MAX
;

162 
msg_°‹e_byãs
 = 
ULONG_MAX
;

163 
msgs_ª˚ived
 = 
ULONG_MAX
;

164 
msgs_£¡
 = 
ULONG_MAX
;

165 
publish_dr›≥d
 = 
ULONG_MAX
;

166 
pub_msgs_ª˚ived
 = 
ULONG_MAX
;

167 
pub_msgs_£¡
 = 
ULONG_MAX
;

168 
byãs_ª˚ived
 = 
ULLONG_MAX
;

169 
byãs_£¡
 = 
ULLONG_MAX
;

170 
pub_byãs_ª˚ived
 = 
ULLONG_MAX
;

171 
pub_byãs_£¡
 = 
ULLONG_MAX
;

172 
subs¸ùti⁄_cou¡
 = 
INT_MAX
;

173 
sh¨ed_subs¸ùti⁄_cou¡
 = 
INT_MAX
;

174 
ªèöed_cou¡
 = 
INT_MAX
;

176 
msgs_ª˚ived_lﬂd1
 = 0;

177 
msgs_ª˚ived_lﬂd5
 = 0;

178 
msgs_ª˚ived_lﬂd15
 = 0;

179 
msgs_£¡_lﬂd1
 = 0;

180 
msgs_£¡_lﬂd5
 = 0;

181 
msgs_£¡_lﬂd15
 = 0;

182 
publish_dr›≥d_lﬂd1
 = 0;

183 
publish_dr›≥d_lﬂd5
 = 0;

184 
publish_dr›≥d_lﬂd15
 = 0;

185 
msgs_ª˚ived_öãrvÆ
, 
msgs_£¡_öãrvÆ
, 
publish_dr›≥d_öãrvÆ
;

187 
publish_ª˚ived_lﬂd1
 = 0;

188 
publish_ª˚ived_lﬂd5
 = 0;

189 
publish_ª˚ived_lﬂd15
 = 0;

190 
publish_£¡_lﬂd1
 = 0;

191 
publish_£¡_lﬂd5
 = 0;

192 
publish_£¡_lﬂd15
 = 0;

193 
publish_ª˚ived_öãrvÆ
, 
publish_£¡_öãrvÆ
;

195 
byãs_ª˚ived_lﬂd1
 = 0;

196 
byãs_ª˚ived_lﬂd5
 = 0;

197 
byãs_ª˚ived_lﬂd15
 = 0;

198 
byãs_£¡_lﬂd1
 = 0;

199 
byãs_£¡_lﬂd5
 = 0;

200 
byãs_£¡_lﬂd15
 = 0;

201 
byãs_ª˚ived_öãrvÆ
, 
byãs_£¡_öãrvÆ
;

203 
sockë_lﬂd1
 = 0;

204 
sockë_lﬂd5
 = 0;

205 
sockë_lﬂd15
 = 0;

206 
sockë_öãrvÆ
;

208 
c⁄√˘i⁄_lﬂd1
 = 0;

209 
c⁄√˘i⁄_lﬂd5
 = 0;

210 
c⁄√˘i⁄_lﬂd15
 = 0;

211 
c⁄√˘i⁄_öãrvÆ
;

213 
exp⁄ít
;

214 
i_mu…
;

215 
uöt32_t
 
Àn
;

216 
boﬁ
 
öôül_publish
;

218 if(
öãrvÆ
 && 
db
.
now_s
 - i¡îvÆ > 
œ°_upd©e
){

219 
u±ime
 = 
db
.
now_s
 - 
°¨t_time
;

220 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%d sec⁄ds", ()
u±ime
);

221 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/u±ime", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

223 
	`sys_åì__upd©e_˛õ¡s
(
buf
);

224 
öôül_publish
 = 
Ál£
;

225 if(
œ°_upd©e
 == 0){

226 
öôül_publish
 = 
åue
;

227 
œ°_upd©e
 = 1;

229 if(
œ°_upd©e
 > 0){

230 
i_mu…
 = 60.0/()(
db
.
now_s
-
œ°_upd©e
);

232 
msgs_ª˚ived_öãrvÆ
 = ()(
g_msgs_ª˚ived
 - 
msgs_ª˚ived
)*
i_mu…
;

233 
msgs_£¡_öãrvÆ
 = ()(
g_msgs_£¡
 - 
msgs_£¡
)*
i_mu…
;

234 
publish_dr›≥d_öãrvÆ
 = ()(
g_msgs_dr›≥d
 - 
publish_dr›≥d
)*
i_mu…
;

236 
publish_ª˚ived_öãrvÆ
 = ()(
g_pub_msgs_ª˚ived
 - 
pub_msgs_ª˚ived
)*
i_mu…
;

237 
publish_£¡_öãrvÆ
 = ()(
g_pub_msgs_£¡
 - 
pub_msgs_£¡
)*
i_mu…
;

239 
byãs_ª˚ived_öãrvÆ
 = ()(
g_byãs_ª˚ived
 - 
byãs_ª˚ived
)*
i_mu…
;

240 
byãs_£¡_öãrvÆ
 = ()(
g_byãs_£¡
 - 
byãs_£¡
)*
i_mu…
;

242 
sockë_öãrvÆ
 = 
g_sockë_c⁄√˘i⁄s
*
i_mu…
;

243 
g_sockë_c⁄√˘i⁄s
 = 0;

244 
c⁄√˘i⁄_öãrvÆ
 = 
g_c⁄√˘i⁄_cou¡
*
i_mu…
;

245 
g_c⁄√˘i⁄_cou¡
 = 0;

248 
exp⁄ít
 = 
	`exp
(-1.0*()(
db
.
now_s
-
œ°_upd©e
)/60.0);

250 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/mesßges/ª˚ived/1mö", 
öôül_publish
, 
exp⁄ít
, 
msgs_ª˚ived_öãrvÆ
, &
msgs_ª˚ived_lﬂd1
);

251 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/mesßges/£¡/1mö", 
öôül_publish
, 
exp⁄ít
, 
msgs_£¡_öãrvÆ
, &
msgs_£¡_lﬂd1
);

252 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/publish/dr›≥d/1mö", 
öôül_publish
, 
exp⁄ít
, 
publish_dr›≥d_öãrvÆ
, &
publish_dr›≥d_lﬂd1
);

253 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/publish/ª˚ived/1mö", 
öôül_publish
, 
exp⁄ít
, 
publish_ª˚ived_öãrvÆ
, &
publish_ª˚ived_lﬂd1
);

254 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/publish/£¡/1mö", 
öôül_publish
, 
exp⁄ít
, 
publish_£¡_öãrvÆ
, &
publish_£¡_lﬂd1
);

255 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/byãs/ª˚ived/1mö", 
öôül_publish
, 
exp⁄ít
, 
byãs_ª˚ived_öãrvÆ
, &
byãs_ª˚ived_lﬂd1
);

256 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/byãs/£¡/1mö", 
öôül_publish
, 
exp⁄ít
, 
byãs_£¡_öãrvÆ
, &
byãs_£¡_lﬂd1
);

257 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/sockës/1mö", 
öôül_publish
, 
exp⁄ít
, 
sockë_öãrvÆ
, &
sockë_lﬂd1
);

258 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/c⁄√˘i⁄s/1mö", 
öôül_publish
, 
exp⁄ít
, 
c⁄√˘i⁄_öãrvÆ
, &
c⁄√˘i⁄_lﬂd1
);

261 
exp⁄ít
 = 
	`exp
(-1.0*()(
db
.
now_s
-
œ°_upd©e
)/300.0);

263 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/mesßges/ª˚ived/5mö", 
öôül_publish
, 
exp⁄ít
, 
msgs_ª˚ived_öãrvÆ
, &
msgs_ª˚ived_lﬂd5
);

264 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/mesßges/£¡/5mö", 
öôül_publish
, 
exp⁄ít
, 
msgs_£¡_öãrvÆ
, &
msgs_£¡_lﬂd5
);

265 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/publish/dr›≥d/5mö", 
öôül_publish
, 
exp⁄ít
, 
publish_dr›≥d_öãrvÆ
, &
publish_dr›≥d_lﬂd5
);

266 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/publish/ª˚ived/5mö", 
öôül_publish
, 
exp⁄ít
, 
publish_ª˚ived_öãrvÆ
, &
publish_ª˚ived_lﬂd5
);

267 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/publish/£¡/5mö", 
öôül_publish
, 
exp⁄ít
, 
publish_£¡_öãrvÆ
, &
publish_£¡_lﬂd5
);

268 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/byãs/ª˚ived/5mö", 
öôül_publish
, 
exp⁄ít
, 
byãs_ª˚ived_öãrvÆ
, &
byãs_ª˚ived_lﬂd5
);

269 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/byãs/£¡/5mö", 
öôül_publish
, 
exp⁄ít
, 
byãs_£¡_öãrvÆ
, &
byãs_£¡_lﬂd5
);

270 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/sockës/5mö", 
öôül_publish
, 
exp⁄ít
, 
sockë_öãrvÆ
, &
sockë_lﬂd5
);

271 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/c⁄√˘i⁄s/5mö", 
öôül_publish
, 
exp⁄ít
, 
c⁄√˘i⁄_öãrvÆ
, &
c⁄√˘i⁄_lﬂd5
);

274 
exp⁄ít
 = 
	`exp
(-1.0*()(
db
.
now_s
-
œ°_upd©e
)/900.0);

276 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/mesßges/ª˚ived/15mö", 
öôül_publish
, 
exp⁄ít
, 
msgs_ª˚ived_öãrvÆ
, &
msgs_ª˚ived_lﬂd15
);

277 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/mesßges/£¡/15mö", 
öôül_publish
, 
exp⁄ít
, 
msgs_£¡_öãrvÆ
, &
msgs_£¡_lﬂd15
);

278 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/publish/dr›≥d/15mö", 
öôül_publish
, 
exp⁄ít
, 
publish_dr›≥d_öãrvÆ
, &
publish_dr›≥d_lﬂd15
);

279 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/publish/ª˚ived/15mö", 
öôül_publish
, 
exp⁄ít
, 
publish_ª˚ived_öãrvÆ
, &
publish_ª˚ived_lﬂd15
);

280 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/publish/£¡/15mö", 
öôül_publish
, 
exp⁄ít
, 
publish_£¡_öãrvÆ
, &
publish_£¡_lﬂd15
);

281 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/byãs/ª˚ived/15mö", 
öôül_publish
, 
exp⁄ít
, 
byãs_ª˚ived_öãrvÆ
, &
byãs_ª˚ived_lﬂd15
);

282 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/byãs/£¡/15mö", 
öôül_publish
, 
exp⁄ít
, 
byãs_£¡_öãrvÆ
, &
byãs_£¡_lﬂd15
);

283 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/sockës/15mö", 
öôül_publish
, 
exp⁄ít
, 
sockë_öãrvÆ
, &
sockë_lﬂd15
);

284 
	`ˇlc_lﬂd
(
buf
, "$SYS/brokî/lﬂd/c⁄√˘i⁄s/15mö", 
öôül_publish
, 
exp⁄ít
, 
c⁄√˘i⁄_öãrvÆ
, &
c⁄√˘i⁄_lﬂd15
);

287 if(
db
.
msg_°‹e_cou¡
 != msg_store_count){

288 
msg_°‹e_cou¡
 = 
db
.msg_store_count;

289 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%d", 
msg_°‹e_cou¡
);

290 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/mesßges/°‹ed", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

291 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/°‹e/mesßges/cou¡", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

294 i‡(
db
.
msg_°‹e_byãs
 != msg_store_bytes){

295 
msg_°‹e_byãs
 = 
db
.msg_store_bytes;

296 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%lu", 
msg_°‹e_byãs
);

297 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/°‹e/mesßges/byãs", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

300 if(
db
.
subs¸ùti⁄_cou¡
 != subscription_count){

301 
subs¸ùti⁄_cou¡
 = 
db
.subscription_count;

302 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%d", 
subs¸ùti⁄_cou¡
);

303 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/subs¸ùti⁄s/cou¡", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

306 if(
db
.
sh¨ed_subs¸ùti⁄_cou¡
 != shared_subscription_count){

307 
sh¨ed_subs¸ùti⁄_cou¡
 = 
db
.shared_subscription_count;

308 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%d", 
sh¨ed_subs¸ùti⁄_cou¡
);

309 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/sh¨ed_subs¸ùti⁄s/cou¡", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

312 if(
db
.
ªèöed_cou¡
 !=Ñetained_count){

313 
ªèöed_cou¡
 = 
db
.retained_count;

314 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%d", 
ªèöed_cou¡
);

315 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/ªèöed mesßges/cou¡", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

318 #ifde‡
REAL_WITH_MEMORY_TRACKING


319 
	`sys_åì__upd©e_mem‹y
(
buf
);

322 if(
msgs_ª˚ived
 !
g_msgs_ª˚ived
){

323 
msgs_ª˚ived
 = 
g_msgs_ª˚ived
;

324 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%lu", 
msgs_ª˚ived
);

325 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/mesßges/ª˚ived", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

328 if(
msgs_£¡
 !
g_msgs_£¡
){

329 
msgs_£¡
 = 
g_msgs_£¡
;

330 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%lu", 
msgs_£¡
);

331 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/mesßges/£¡", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

334 if(
publish_dr›≥d
 !
g_msgs_dr›≥d
){

335 
publish_dr›≥d
 = 
g_msgs_dr›≥d
;

336 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%lu", 
publish_dr›≥d
);

337 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/publish/mesßges/dr›≥d", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

340 if(
pub_msgs_ª˚ived
 !
g_pub_msgs_ª˚ived
){

341 
pub_msgs_ª˚ived
 = 
g_pub_msgs_ª˚ived
;

342 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%lu", 
pub_msgs_ª˚ived
);

343 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/publish/mesßges/ª˚ived", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

346 if(
pub_msgs_£¡
 !
g_pub_msgs_£¡
){

347 
pub_msgs_£¡
 = 
g_pub_msgs_£¡
;

348 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%lu", 
pub_msgs_£¡
);

349 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/publish/mesßges/£¡", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

352 if(
byãs_ª˚ived
 !
g_byãs_ª˚ived
){

353 
byãs_ª˚ived
 = 
g_byãs_ª˚ived
;

354 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%Œu", 
byãs_ª˚ived
);

355 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/byãs/ª˚ived", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

358 if(
byãs_£¡
 !
g_byãs_£¡
){

359 
byãs_£¡
 = 
g_byãs_£¡
;

360 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%Œu", 
byãs_£¡
);

361 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/byãs/£¡", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

364 if(
pub_byãs_ª˚ived
 !
g_pub_byãs_ª˚ived
){

365 
pub_byãs_ª˚ived
 = 
g_pub_byãs_ª˚ived
;

366 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%Œu", 
pub_byãs_ª˚ived
);

367 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/publish/byãs/ª˚ived", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

370 if(
pub_byãs_£¡
 !
g_pub_byãs_£¡
){

371 
pub_byãs_£¡
 = 
g_pub_byãs_£¡
;

372 
Àn
 = (
uöt32_t
)
	`¢¥ötf
(
buf
, 
BUFLEN
, "%Œu", 
pub_byãs_£¡
);

373 
	`db__mesßges_ósy_queue
(
NULL
, "$SYS/brokî/publish/byãs/£¡", 
SYS_TREE_QOS
, 
Àn
, 
buf
, 1, 60, NULL);

376 
œ°_upd©e
 = 
db
.
now_s
;

378 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/sys_tree.h

19 #i‚de‡
SYS_TREE_H


20 
	#SYS_TREE_H


	)

22 #i‡
deföed
(
WITH_SYS_TREE
Ë&& deföed(
WITH_BROKER
)

23 
uöt64_t
 
g_byãs_ª˚ived
;

24 
uöt64_t
 
g_byãs_£¡
;

25 
uöt64_t
 
g_pub_byãs_ª˚ived
;

26 
uöt64_t
 
g_pub_byãs_£¡
;

27 
g_msgs_ª˚ived
;

28 
g_msgs_£¡
;

29 
g_pub_msgs_ª˚ived
;

30 
g_pub_msgs_£¡
;

31 
g_msgs_dr›≥d
;

32 
g_˛õ¡s_expúed
;

33 
g_sockë_c⁄√˘i⁄s
;

34 
g_c⁄√˘i⁄_cou¡
;

36 
	#G_BYTES_RECEIVED_INC
(
A
Ë(
g_byãs_ª˚ived
+=(
uöt64_t
)(A))

	)

37 
	#G_BYTES_SENT_INC
(
A
Ë(
g_byãs_£¡
+=(
uöt64_t
)(A))

	)

38 
	#G_PUB_BYTES_RECEIVED_INC
(
A
Ë(
g_pub_byãs_ª˚ived
+=(A))

	)

39 
	#G_PUB_BYTES_SENT_INC
(
A
Ë(
g_pub_byãs_£¡
+=(A))

	)

40 
	#G_MSGS_RECEIVED_INC
(
A
Ë(
g_msgs_ª˚ived
+=(A))

	)

41 
	#G_MSGS_SENT_INC
(
A
Ë(
g_msgs_£¡
+=(A))

	)

42 
	#G_PUB_MSGS_RECEIVED_INC
(
A
Ë(
g_pub_msgs_ª˚ived
+=(A))

	)

43 
	#G_PUB_MSGS_SENT_INC
(
A
Ë(
g_pub_msgs_£¡
+=(A))

	)

44 
	#G_MSGS_DROPPED_INC
(Ë(
g_msgs_dr›≥d
++)

	)

45 
	#G_CLIENTS_EXPIRED_INC
(Ë(
g_˛õ¡s_expúed
++)

	)

46 
	#G_SOCKET_CONNECTIONS_INC
(Ë(
g_sockë_c⁄√˘i⁄s
++)

	)

47 
	#G_CONNECTION_COUNT_INC
(Ë(
g_c⁄√˘i⁄_cou¡
++)

	)

51 
	#G_BYTES_RECEIVED_INC
(
A
)

	)

52 
	#G_BYTES_SENT_INC
(
A
)

	)

53 
	#G_PUB_BYTES_RECEIVED_INC
(
A
)

	)

54 
	#G_PUB_BYTES_SENT_INC
(
A
)

	)

55 
	#G_MSGS_RECEIVED_INC
(
A
)

	)

56 
	#G_MSGS_SENT_INC
(
A
)

	)

57 
	#G_PUB_MSGS_RECEIVED_INC
(
A
)

	)

58 
	#G_PUB_MSGS_SENT_INC
(
A
)

	)

59 
	#G_MSGS_DROPPED_INC
()

	)

60 
	#G_CLIENTS_EXPIRED_INC
()

	)

61 
	#G_SOCKET_CONNECTIONS_INC
()

	)

62 
	#G_CONNECTION_COUNT_INC
()

	)

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/topic_tok.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

25 
	~"mosquôto_brokî_öã∫Æ.h
"

26 
	~"mem‹y_mosq.h
"

27 
	~"mqâ_¥Ÿocﬁ.h
"

28 
	~"utû_mosq.h
"

30 
	~"uéi°.h
"

33 *
	$°πok_hõr
(*
°r
, **
ßvïå
)

35 *
c
;

37 if(
°r
 !
NULL
){

38 *
ßvïå
 = 
°r
;

41 if(*
ßvïå
 =
NULL
){

42  
NULL
;

45 
c
 = 
	`°rchr
(*
ßvïå
, '/');

46 if(
c
){

47 
°r
 = *
ßvïå
;

48 *
ßvïå
 = 
c
+1;

49 
c
[0] = '\0';

50 }if(*
ßvïå
){

52 
°r
 = *
ßvïå
;

53 *
ßvïå
 = 
NULL
;

55  
°r
;

56 
	}
}

59 
	$sub__t›ic_tokíi£
(c⁄° *
subt›ic
, **
loˇl_sub
, ***
t›ics
, c⁄° **
sh¨íame
)

61 *
ßvïå
 = 
NULL
;

62 *
tokí
;

63 
cou¡
;

64 
t›ic_ödex
 = 0;

65 
i
;

66 
size_t
 
Àn
;

68 
Àn
 = 
	`°æí
(
subt›ic
);

69 if(
Àn
 == 0){

70  
MOSQ_ERR_INVAL
;

73 *
loˇl_sub
 = 
	`mosquôto__°rdup
(
subt›ic
);

74 if((*
loˇl_sub
Ë=
NULL
Ë 
MOSQ_ERR_NOMEM
;

76 
cou¡
 = 0;

77 
ßvïå
 = *
loˇl_sub
;

78 
ßvïå
){

79 
ßvïå
 = 
	`°rchr
(&saveptr[1], '/');

80 
cou¡
++;

82 *
t›ics
 = 
	`mosquôto__ˇŒoc
((
size_t
)(
cou¡
+3) , (*));

83 if((*
t›ics
Ë=
NULL
){

84 
	`mosquôto__‰ì
(*
loˇl_sub
);

85  
MOSQ_ERR_NOMEM
;

88 if((*
loˇl_sub
)[0] != '$'){

89 (*
t›ics
)[
t›ic_ödex
] = "";

90 
t›ic_ödex
++;

93 
tokí
 = 
	`°πok_hõr
((*
loˇl_sub
), &
ßvïå
);

94 
tokí
){

95 (*
t›ics
)[
t›ic_ödex
] = 
tokí
;

96 
t›ic_ödex
++;

97 
tokí
 = 
	`°πok_hõr
(
NULL
, &
ßvïå
);

100 if(!
	`°rcmp
((*
t›ics
)[0], "$share")){

101 if(
cou¡
 < 2){

102 
	`mosquôto__‰ì
(*
loˇl_sub
);

103 
	`mosquôto__‰ì
(*
t›ics
);

104  
MOSQ_ERR_PROTOCOL
;

107 if(
sh¨íame
){

108 (*
sh¨íame
Ë(*
t›ics
)[1];

111 
i
=1; i<
cou¡
-1; i++){

112 (*
t›ics
)[
i
] = (*topics)[i+1];

114 (*
t›ics
)[0] = "";

115 (*
t›ics
)[
cou¡
-1] = 
NULL
;

117  
MOSQ_ERR_SUCCESS
;

118 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/websockets.c

19 #ifde‡
WITH_WEBSOCKETS


21 
	~"c⁄fig.h
"

23 
	~<libwebsockës.h
>

24 
	~"mosquôto_öã∫Æ.h
"

25 
	~"mosquôto_brokî_öã∫Æ.h
"

26 
	~"mqâ_¥Ÿocﬁ.h
"

27 
	~"mem‹y_mosq.h
"

28 
	~"∑ckë_mosq.h
"

29 
	~"sys_åì.h
"

30 
	~"utû_mosq.h
"

32 
	~<°dlib.h
>

33 
	~<î∫o.h
>

34 
	~<sys/°©.h
>

36 #i‚de‡
WIN32


37 
	~<sys/sockë.h
>

43 
	#WS_SERV_BUF_SIZE
 4096

	)

44 
	#WS_TX_BUF_SIZE
 (
WS_SERV_BUF_SIZE
*2)

	)

46 
ˇŒback_mqâ
(

47 
lws
 *
wsi
,

48 
lws_ˇŒback_ªas⁄s
 
ªas⁄
,

49 *
u£r
,

50 *
ö
,

51 
size_t
 
Àn
);

53 
ˇŒback_hâp
(

54 
lws
 *
wsi
,

55 
lws_ˇŒback_ªas⁄s
 
ªas⁄
,

56 *
u£r
,

57 *
ö
,

58 
size_t
 
Àn
);

60 
	emosq_ws_¥Ÿocﬁs
 {

61 
	mPROTOCOL_HTTP
 = 0,

62 
	mPROTOCOL_MQTT
,

63 
	mDEMO_PROTOCOL_COUNT


66 
	slibws_hâp_d©a
 {

67 
FILE
 *
	mÂå
;

70 
lws_¥Ÿocﬁs
 
	g¥Ÿocﬁs
[] = {

74 
ˇŒback_hâp
,

75  (
libws_hâp_d©a
),

78 
NULL
,

79 
WS_TX_BUF_SIZE


83 
ˇŒback_mqâ
,

84 (
libws_mqâ_d©a
),

87 
NULL
,

88 
WS_TX_BUF_SIZE


92 
ˇŒback_mqâ
,

93 (
libws_mqâ_d©a
),

96 
NULL
,

97 
WS_TX_BUF_SIZE


100 
NULL
,

101 
NULL
,

105 
NULL
,

110 
	$ósy_addªss
(
sock
, 
mosquôto
 *
mosq
)

112 
addªss
[1024];

114 if(!
	`√t__sockë_gë_addªss
(
sock
, 
addªss
, 1024, &
mosq
->
ªmŸe_p‹t
)){

115 
mosq
->
addªss
 = 
	`mosquôto__°rdup
(address);

117 
	}
}

119 
	$ˇŒback_mqâ
(

120 
lws
 *
wsi
,

121 
lws_ˇŒback_ªas⁄s
 
ªas⁄
,

122 *
u£r
,

123 *
ö
,

124 
size_t
 
Àn
)

126 
mosquôto
 *
mosq
 = 
NULL
;

127 
mosquôto__∑ckë
 *
∑ckë
;

128 
cou¡
;

129 
ucou¡
;

130 c⁄° 
lws_¥Ÿocﬁs
 *
p
;

131 
libws_mqâ_d©a
 *
u
 = (libws_mqâ_d©®*)
u£r
;

132 
size_t
 
pos
;

133 
uöt8_t
 *
buf
;

134 
rc
;

135 
uöt8_t
 
byã
;

136 
ù_addr_buff
[1024];

138 
ªas⁄
) {

139 
LWS_CALLBACK_ESTABLISHED
:

140 
mosq
 = 
	`c⁄ãxt__öô
(
WEBSOCKET_CLIENT
);

141 if(
mosq
){

142 
p
 = 
	`lws_gë_¥Ÿocﬁ
(
wsi
);

143 
mosq
->
li°íî
 = 
p
->
u£r
;

144 if(!
mosq
->
li°íî
){

145 
	`mosquôto__‰ì
(
mosq
);

148 
mosq
->
wsi
 = wsi;

149 #ifde‡
WITH_TLS


150 if(
ö
){

151 
mosq
->
s¶
 = (
SSL
 *)
ö
;

152 if(!
mosq
->
li°íî
->
s¶_˘x
){

153 
mosq
->
li°íî
->
s¶_˘x
 = 
	`SSL_gë_SSL_CTX
(mosq->
s¶
);

157 
u
->
mosq
 = mosq;

162 i‡(
	`lws_hdr_c›y
(
wsi
, 
ù_addr_buff
, (ù_addr_buff), 
WSI_TOKEN_X_FORWARDED_FOR
) > 0) {

163 
mosq
->
addªss
 = 
	`mosquôto__°rdup
(
ù_addr_buff
);

165 
	`ósy_addªss
(
	`lws_gë_sockë_fd
(
wsi
), 
mosq
);

167 if(!
mosq
->
addªss
){

169 
	`mosquôto__‰ì
(
mosq
);

170 
u
->
mosq
 = 
NULL
;

173 if(
mosq
->
li°íî
->
max_c⁄√˘i⁄s
 > 0 && mosq->li°íî->
˛õ¡_cou¡
 > mosq->listener->max_connections){

174 if(
db
.
c⁄fig
->
c⁄√˘i⁄_mesßges
 =
åue
){

175 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_NOTICE
, "Clõ¡ c⁄√˘i⁄ from %†díõd: max_c⁄√˘i⁄†ex˚eded.", 
mosq
->
addªss
);

177 
	`mosquôto__‰ì
(
mosq
->
addªss
);

178 
	`mosquôto__‰ì
(
mosq
);

179 
u
->
mosq
 = 
NULL
;

182 
mosq
->
sock
 = 
	`lws_gë_sockë_fd
(
wsi
);

183 
	`HASH_ADD
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, 
sock
, (
mosq
->sock), mosq);

184 
	`mux__add_ö
(
mosq
);

187 
LWS_CALLBACK_CLOSED
:

188 if(!
u
){

191 
mosq
 = 
u
->mosq;

192 if(
mosq
){

193 if(
mosq
->
sock
 !
INVALID_SOCKET
){

194 
	`HASH_DELETE
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, 
mosq
);

195 
mosq
->
sock
 = 
INVALID_SOCKET
;

196 
	`mux__dñëe
(
mosq
);

198 
mosq
->
wsi
 = 
NULL
;

199 #ifde‡
WITH_TLS


200 
mosq
->
s¶
 = 
NULL
;

202 
	`do_disc⁄√˘
(
mosq
, 
MOSQ_ERR_CONN_LOST
);

206 
LWS_CALLBACK_SERVER_WRITEABLE
:

207 if(!
u
){

210 
mosq
 = 
u
->mosq;

211 if(!
mosq
){

215 
rc
 = 
	`db__mesßge_wrôe_öÊight_out_œã°
(
mosq
);

216 if(
rc
)  -1;

217 
rc
 = 
	`db__mesßge_wrôe_queued_out
(
mosq
);

218 if(
rc
)  -1;

220 if(
mosq
->
out_∑ckë
 && !mosq->
cuºít_out_∑ckë
){

221 
mosq
->
cuºít_out_∑ckë
 = mosq->
out_∑ckë
;

222 
mosq
->
out_∑ckë
 = mosq->out_∑ckë->
√xt
;

223 if(!
mosq
->
out_∑ckë
){

224 
mosq
->
out_∑ckë_œ°
 = 
NULL
;

226 
mosq
->
out_∑ckë_cou¡
--;

229 
mosq
->
cuºít_out_∑ckë
 && !
	`lws_£nd_pùe_choked
(mosq->
wsi
)){

230 
∑ckë
 = 
mosq
->
cuºít_out_∑ckë
;

232 if(
∑ckë
->
pos
 =0 &&Öackë->
to_¥o˚ss
 =∑ckë->
∑ckë_Àngth
){

239 
	`memmove
(&
∑ckë
->
∑ylﬂd
[
LWS_PRE
],Öackë->∑ylﬂd,Öackë->
∑ckë_Àngth
);

240 
∑ckë
->
pos
 +
LWS_PRE
;

242 
cou¡
 = 
	`lws_wrôe
(
wsi
, &
∑ckë
->
∑ylﬂd
[∑ckë->
pos
],Öackë->
to_¥o˚ss
, 
LWS_WRITE_BINARY
);

243 if(
cou¡
 < 0){

244 i‡(
mosq
->
°©e
 =
mosq_cs_disc⁄√˘_ws


245 || 
mosq
->
°©e
 =
mosq_cs_disc⁄√˘ög


246 || 
mosq
->
°©e
 =
mosq_cs_disu£d
){

252 
ucou¡
 = ()
cou¡
;

253 #ifde‡
WITH_SYS_TREE


254 
g_byãs_£¡
 +
ucou¡
;

256 
∑ckë
->
to_¥o˚ss
 -
ucou¡
;

257 
∑ckë
->
pos
 +
ucou¡
;

258 if(
∑ckë
->
to_¥o˚ss
 > 0){

259 i‡(
mosq
->
°©e
 =
mosq_cs_disc⁄√˘_ws


260 || 
mosq
->
°©e
 =
mosq_cs_disc⁄√˘ög


261 || 
mosq
->
°©e
 =
mosq_cs_disu£d
){

268 #ifde‡
WITH_SYS_TREE


269 
g_msgs_£¡
++;

270 if(((
∑ckë
->
comm™d
)&0xF0Ë=
CMD_PUBLISH
){

271 
g_pub_msgs_£¡
++;

276 
mosq
->
cuºít_out_∑ckë
 = mosq->
out_∑ckë
;

277 if(
mosq
->
out_∑ckë
){

278 
mosq
->
out_∑ckë
 = mosq->out_∑ckë->
√xt
;

279 if(!
mosq
->
out_∑ckë
){

280 
mosq
->
out_∑ckë_œ°
 = 
NULL
;

282 
mosq
->
out_∑ckë_cou¡
--;

285 
	`∑ckë__˛ónup
(
∑ckë
);

286 
	`mosquôto__‰ì
(
∑ckë
);

288 
mosq
->
√xt_msg_out
 = 
db
.
now_s
 + mosq->
kì∑live
;

290 i‡(
mosq
->
°©e
 =
mosq_cs_disc⁄√˘_ws


291 || 
mosq
->
°©e
 =
mosq_cs_disc⁄√˘ög


292 || 
mosq
->
°©e
 =
mosq_cs_disu£d
){

296 if(
mosq
->
cuºít_out_∑ckë
){

297 
	`lws_ˇŒback_⁄_wrôabÀ
(
mosq
->
wsi
);

301 
LWS_CALLBACK_RECEIVE
:

302 if(!
u
 || !u->
mosq
){

305 
mosq
 = 
u
->mosq;

306 
pos
 = 0;

307 
buf
 = (
uöt8_t
 *)
ö
;

308 
	`G_BYTES_RECEIVED_INC
(
Àn
);

309 
pos
 < 
Àn
){

310 if(!
mosq
->
ö_∑ckë
.
comm™d
){

311 
mosq
->
ö_∑ckë
.
comm™d
 = 
buf
[
pos
];

312 
pos
++;

314 if(
mosq
->
°©e
 =
mosq_cs_√w
 && (mosq->
ö_∑ckë
.
comm™d
&0xF0Ë!
CMD_CONNECT
){

318 if(
mosq
->
ö_∑ckë
.
ªmaöög_cou¡
 <= 0){

320 if(
pos
 =
Àn
){

323 
byã
 = 
buf
[
pos
];

324 
pos
++;

326 
mosq
->
ö_∑ckë
.
ªmaöög_cou¡
--;

330 if(
mosq
->
ö_∑ckë
.
ªmaöög_cou¡
 < -4){

334 
mosq
->
ö_∑ckë
.
ªmaöög_Àngth
 +(
byã
 & 127Ë* mosq->ö_∑ckë.
ªmaöög_mu…
;

335 
mosq
->
ö_∑ckë
.
ªmaöög_mu…
 *= 128;

336 }(
byã
 & 128) != 0);

337 
mosq
->
ö_∑ckë
.
ªmaöög_cou¡
 = (
öt8_t
)(mosq->in_packet.remaining_count * -1);

339 if(
mosq
->
ö_∑ckë
.
ªmaöög_Àngth
 > 0){

340 
mosq
->
ö_∑ckë
.
∑ylﬂd
 = 
	`mosquôto__mÆloc
(mosq->ö_∑ckë.
ªmaöög_Àngth
*(
uöt8_t
));

341 if(!
mosq
->
ö_∑ckë
.
∑ylﬂd
){

344 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 = mosq->ö_∑ckë.
ªmaöög_Àngth
;

347 if(
mosq
->
ö_∑ckë
.
to_¥o˚ss
>0){

348 if((
uöt32_t
)
Àn
 - 
pos
 >
mosq
->
ö_∑ckë
.
to_¥o˚ss
){

349 
	`mem˝y
(&
mosq
->
ö_∑ckë
.
∑ylﬂd
[mosq->ö_∑ckë.
pos
], &
buf
[pos], mosq->ö_∑ckë.
to_¥o˚ss
);

350 
mosq
->
ö_∑ckë
.
pos
 +mosq->ö_∑ckë.
to_¥o˚ss
;

351 
pos
 +
mosq
->
ö_∑ckë
.
to_¥o˚ss
;

352 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 = 0;

354 
	`mem˝y
(&
mosq
->
ö_∑ckë
.
∑ylﬂd
[mosq->ö_∑ckë.
pos
], &
buf
[pos], 
Àn
-pos);

355 
mosq
->
ö_∑ckë
.
pos
 +(
uöt32_t
)(
Àn
-pos);

356 
mosq
->
ö_∑ckë
.
to_¥o˚ss
 -(
uöt32_t
)(
Àn
-
pos
);

361 
mosq
->
ö_∑ckë
.
pos
 = 0;

363 #ifde‡
WITH_SYS_TREE


364 
	`G_MSGS_RECEIVED_INC
(1);

365 if(((
mosq
->
ö_∑ckë
.
comm™d
)&0xF0Ë=
CMD_PUBLISH
){

366 
	`G_PUB_MSGS_RECEIVED_INC
(1);

369 
rc
 = 
	`h™dÀ__∑ckë
(
mosq
);

372 
	`∑ckë__˛ónup
(&
mosq
->
ö_∑ckë
);

374 
	`kì∑live__upd©e
(
mosq
);

376 if(
rc
 && (
mosq
->
out_∑ckë
 || mosq->
cuºít_out_∑ckë
)) {

377 if(
mosq
->
°©e
 !
mosq_cs_disc⁄√˘ög
){

378 
	`mosquôto__£t_°©e
(
mosq
, 
mosq_cs_disc⁄√˘_ws
);

380 
	`lws_ˇŒback_⁄_wrôabÀ
(
mosq
->
wsi
);

381 } i‡(
rc
) {

382 
	`do_disc⁄√˘
(
mosq
, 
MOSQ_ERR_CONN_LOST
);

393 
	}
}

396 *
	$hâp__ˇn⁄iˇl_fûíame
(

397 
lws
 *
wsi
,

398 c⁄° *
ö
,

399 c⁄° *
hâp_dú
)

401 
size_t
 
öÀn
, 
¶í
;

402 *
fûíame
, *
fûíame_ˇn⁄iˇl
;

404 
öÀn
 = 
	`°æí
(
ö
);

405 if(
ö
[
öÀn
-1] == '/'){

406 
¶í
 = 
	`°æí
(
hâp_dú
Ë+ 
öÀn
 + strlen("/index.html") + 2;

408 
¶í
 = 
	`°æí
(
hâp_dú
Ë+ 
öÀn
 + 2;

410 
fûíame
 = 
	`mosquôto__mÆloc
(
¶í
);

411 if(!
fûíame
){

412 
	`lws_ªtu∫_hâp_°©us
(
wsi
, 
HTTP_STATUS_INTERNAL_SERVER_ERROR
, 
NULL
);

413  
NULL
;

415 if(((*)
ö
)[
öÀn
-1] == '/'){

416 
	`¢¥ötf
(
fûíame
, 
¶í
, "%s%södex.html", 
hâp_dú
, (*)
ö
);

418 
	`¢¥ötf
(
fûíame
, 
¶í
, "%s%s", 
hâp_dú
, (*)
ö
);

423 #ifde‡
WIN32


424 
fûíame_ˇn⁄iˇl
 = 
	`_fuŒ∑th
(
NULL
, 
fûíame
, 0);

425 
	`mosquôto__‰ì
(
fûíame
);

426 if(!
fûíame_ˇn⁄iˇl
){

427 
	`lws_ªtu∫_hâp_°©us
(
wsi
, 
HTTP_STATUS_INTERNAL_SERVER_ERROR
, 
NULL
);

428  
NULL
;

431 
fûíame_ˇn⁄iˇl
 = 
	`ªÆ∑th
(
fûíame
, 
NULL
);

432 
	`mosquôto__‰ì
(
fûíame
);

433 if(!
fûíame_ˇn⁄iˇl
){

434 if(
î∫o
 =
EACCES
){

435 
	`lws_ªtu∫_hâp_°©us
(
wsi
, 
HTTP_STATUS_FORBIDDEN
, 
NULL
);

436 }if(
î∫o
 =
EINVAL
 ||Éºnÿ=
EIO
 ||Éºnÿ=
ELOOP
){

437 
	`lws_ªtu∫_hâp_°©us
(
wsi
, 
HTTP_STATUS_INTERNAL_SERVER_ERROR
, 
NULL
);

438 }if(
î∫o
 =
ENAMETOOLONG
){

439 
	`lws_ªtu∫_hâp_°©us
(
wsi
, 
HTTP_STATUS_REQ_URI_TOO_LONG
, 
NULL
);

440 }if(
î∫o
 =
ENOENT
 ||Éºnÿ=
ENOTDIR
){

441 
	`lws_ªtu∫_hâp_°©us
(
wsi
, 
HTTP_STATUS_NOT_FOUND
, 
NULL
);

443  
NULL
;

446 if(
	`°∫cmp
(
hâp_dú
, 
fûíame_ˇn⁄iˇl
, 
	`°æí
(http_dir))){

448 
	`‰ì
(
fûíame_ˇn⁄iˇl
);

449 
	`lws_ªtu∫_hâp_°©us
(
wsi
, 
HTTP_STATUS_FORBIDDEN
, 
NULL
);

450  
NULL
;

453  
fûíame_ˇn⁄iˇl
;

454 
	}
}

457 
	$ˇŒback_hâp
(

458 
lws
 *
wsi
,

459 
lws_ˇŒback_ªas⁄s
 
ªas⁄
,

460 *
u£r
,

461 *
ö
,

462 
size_t
 
Àn
)

464 
libws_hâp_d©a
 *
u
 = (libws_hâp_d©®*)
u£r
;

465 
libws_mqâ_hack
 *
hack
;

466 *
hâp_dú
;

467 
size_t
 
buÊí
;

468 
size_t
 
wÀn
;

469 
rc
;

470 *
fûíame_ˇn⁄iˇl
;

471 
buf
[4096];

472 
°©
 
fûe°©
;

473 
mosquôto
 *
mosq
;

474 
lws_pﬁœrgs
 *
pﬁœrgs
 = (lws_pﬁœrg†*)
ö
;

478 
ªas⁄
) {

479 
LWS_CALLBACK_HTTP
:

480 if(!
u
){

484 
hack
 = (
libws_mqâ_hack
 *)
	`lws_c⁄ãxt_u£r
(
	`lws_gë_c⁄ãxt
(
wsi
));

485 if(!
hack
){

488 
hâp_dú
 = 
hack
->http_dir;

490 if(!
hâp_dú
){

496 if(
	`lws_hdr_tŸÆ_Àngth
(
wsi
, 
WSI_TOKEN_POST_URI
)){

497 
	`lws_ªtu∫_hâp_°©us
(
wsi
, 
HTTP_STATUS_METHOD_NOT_ALLOWED
, 
NULL
);

501 
fûíame_ˇn⁄iˇl
 = 
	`hâp__ˇn⁄iˇl_fûíame
(
wsi
, (*)
ö
, 
hâp_dú
);

502 if(!
fûíame_ˇn⁄iˇl
)  -1;

504 
u
->
Âå
 = 
	`f›í
(
fûíame_ˇn⁄iˇl
, "rb");

505 if(!
u
->
Âå
){

506 
	`‰ì
(
fûíame_ˇn⁄iˇl
);

507 
	`lws_ªtu∫_hâp_°©us
(
wsi
, 
HTTP_STATUS_NOT_FOUND
, 
NULL
);

510 if(
	`f°©
(
	`fûío
(
u
->
Âå
), &
fûe°©
) < 0){

511 
	`‰ì
(
fûíame_ˇn⁄iˇl
);

512 
	`lws_ªtu∫_hâp_°©us
(
wsi
, 
HTTP_STATUS_INTERNAL_SERVER_ERROR
, 
NULL
);

513 
	`f˛o£
(
u
->
Âå
);

514 
u
->
Âå
 = 
NULL
;

519 if((
fûe°©
.
°_mode
 & 
S_IFDIR
) == S_IFDIR){

520 
	`f˛o£
(
u
->
Âå
);

521 
u
->
Âå
 = 
NULL
;

522 
	`‰ì
(
fûíame_ˇn⁄iˇl
);

525 
buÊí
 = (
size_t
)
	`¢¥ötf
((*)
buf
, 4096, "HTTP/1.0 302 OK\r\n"

527 (*)
ö
);

528  
	`lws_wrôe
(
wsi
, 
buf
, 
buÊí
, 
LWS_WRITE_HTTP
);

531 if((
fûe°©
.
°_mode
 & 
S_IFREG
) != S_IFREG){

532 
	`lws_ªtu∫_hâp_°©us
(
wsi
, 
HTTP_STATUS_FORBIDDEN
, 
NULL
);

533 
	`f˛o£
(
u
->
Âå
);

534 
u
->
Âå
 = 
NULL
;

535 
	`‰ì
(
fûíame_ˇn⁄iˇl
);

539 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_DEBUG
, "hâ∞£rvög fûê\"%s\".", 
fûíame_ˇn⁄iˇl
);

540 
	`‰ì
(
fûíame_ˇn⁄iˇl
);

542 
buÊí
 = (
size_t
)
	`¢¥ötf
((*)
buf
, 4096, "HTTP/1.0 200 OK\r\n"

545 ()
fûe°©
.
°_size
);

546 if(
	`lws_wrôe
(
wsi
, 
buf
, 
buÊí
, 
LWS_WRITE_HTTP
) < 0){

547 
	`f˛o£
(
u
->
Âå
);

548 
u
->
Âå
 = 
NULL
;

551 
	`lws_ˇŒback_⁄_wrôabÀ
(
wsi
);

554 
LWS_CALLBACK_HTTP_BODY
:

558 
LWS_CALLBACK_HTTP_BODY_COMPLETION
:

562 
LWS_CALLBACK_FILTER_HTTP_CONNECTION
:

566 
LWS_CALLBACK_HTTP_WRITEABLE
:

568 if(
u
 && u->
Âå
){

570 
buÊí
 = 
	`‰ód
(
buf
, 1, (buf), 
u
->
Âå
);

571 if(
buÊí
 < 1){

572 
	`f˛o£
(
u
->
Âå
);

573 
u
->
Âå
 = 
NULL
;

576 
rc
 = 
	`lws_wrôe
(
wsi
, 
buf
, 
buÊí
, 
LWS_WRITE_HTTP
);

577 if(
rc
 < 0){

580 
wÀn
 = (
size_t
)
rc
;

581 if(
wÀn
 < 
buÊí
){

582 if(
	`f£ek
(
u
->
Âå
, ()(
buÊí
-
wÀn
), 
SEEK_CUR
) < 0){

583 
	`f˛o£
(
u
->
Âå
);

584 
u
->
Âå
 = 
NULL
;

588 if(
buÊí
 < (
buf
)){

589 
	`f˛o£
(
u
->
Âå
);

590 
u
->
Âå
 = 
NULL
;

593 }
u
->
Âå
 && !
	`lws_£nd_pùe_choked
(
wsi
));

594 
	`lws_ˇŒback_⁄_wrôabÀ
(
wsi
);

600 
LWS_CALLBACK_CLOSED
:

601 
LWS_CALLBACK_CLOSED_HTTP
:

602 
LWS_CALLBACK_HTTP_FILE_COMPLETION
:

603 if(
u
 && u->
Âå
){

604 
	`f˛o£
(
u
->
Âå
);

605 
u
->
Âå
 = 
NULL
;

609 
LWS_CALLBACK_ADD_POLL_FD
:

610 
	`HASH_FIND
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, &
pﬁœrgs
->
fd
, ’ﬁœrgs->fd), 
mosq
);

611 if(
mosq
){

612 if(
pﬁœrgs
->
evíts
 & 
LWS_POLLOUT
){

613 
	`mux__add_out
(
mosq
);

614 
mosq
->
ws_w™t_wrôe
 = 
åue
;

616 
	`mux__ªmove_out
(
mosq
);

619 if(
pﬁœrgs
->
evíts
 & 
POLLIN
){

621 
	`li°íîs__add_websockës
(
	`lws_gë_c⁄ãxt
(
wsi
), 
pﬁœrgs
->
fd
);

626 
LWS_CALLBACK_DEL_POLL_FD
:

627 
	`HASH_FIND
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, &
pﬁœrgs
->
fd
, ’ﬁœrgs->fd), 
mosq
);

628 if(
mosq
){

629 
	`mux__dñëe
(
mosq
);

633 
LWS_CALLBACK_CHANGE_MODE_POLL_FD
:

634 
	`HASH_FIND
(
hh_sock
, 
db
.
c⁄ãxts_by_sock
, &
pﬁœrgs
->
fd
, ’ﬁœrgs->fd), 
mosq
);

635 if(
mosq
){

636 if(
pﬁœrgs
->
evíts
 & 
LWS_POLLHUP
){

638 }if(
pﬁœrgs
->
evíts
 & 
LWS_POLLOUT
){

639 
	`mux__add_out
(
mosq
);

640 
mosq
->
ws_w™t_wrôe
 = 
åue
;

642 
	`mux__ªmove_out
(
mosq
);

647 #ifde‡
WITH_TLS


648 
LWS_CALLBACK_OPENSSL_PERFORM_CLIENT_CERT_VERIFICATION
:

649 if(!
Àn
 || (
	`SSL_gë_vîify_ªsu…
((
SSL
*)
ö
Ë!
X509_V_OK
)){

660 
	}
}

662 
	$log_wøp
(
Àvñ
, c⁄° *
löe
)

664 *
l
 = (*)
löe
;

665 
	`UNUSED
(
Àvñ
);

666 
l
[
	`°æí
(
löe
)-1] = '\0';

667 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_WEBSOCKETS
, "%s", 
l
);

668 
	}
}

670 
	$mosq_websockës_öô
(
mosquôto__li°íî
 *
li°íî
, c⁄° 
mosquôto__c⁄fig
 *
c⁄f
)

672 
lws_c⁄ãxt_¸óti⁄_öfo
 
öfo
;

673 
lws_¥Ÿocﬁs
 *
p
;

674 
size_t
 
¥Ÿocﬁ_cou¡
;

675 
i
;

676 
libws_mqâ_hack
 *
u£r
;

679 
¥Ÿocﬁ_cou¡
=0; 
¥Ÿocﬁs
[¥Ÿocﬁ_cou¡].
«me
;Örotocol_count++);

681 
p
 = 
	`mosquôto__ˇŒoc
(
¥Ÿocﬁ_cou¡
+1, (
lws_¥Ÿocﬁs
));

682 if(!
p
){

683 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Out of memory.");

686 
i
=0; 
¥Ÿocﬁs
[i].
«me
; i++){

687 
p
[
i
].
«me
 = 
¥Ÿocﬁs
[i].name;

688 
p
[
i
].
ˇŒback
 = 
¥Ÿocﬁs
[i].callback;

689 
p
[
i
].
≥r_£ssi⁄_d©a_size
 = 
¥Ÿocﬁs
[i].per_session_data_size;

690 
p
[
i
].
rx_buf„r_size
 = 
¥Ÿocﬁs
[i].rx_buffer_size;

691 
p
[
i
].
u£r
 = 
li°íî
;

694 
	`mem£t
(&
öfo
, 0, (info));

695 
öfo
.
iÁ˚
 = 
li°íî
->
ho°
;

696 
öfo
.
p‹t
 = 
li°íî
->port;

697 
öfo
.
¥Ÿocﬁs
 = 
p
;

698 
öfo
.
gid
 = -1;

699 
öfo
.
uid
 = -1;

700 #ifde‡
WITH_TLS


701 
öfo
.
s¶_ˇ_fûï©h
 = 
li°íî
->
ˇfûe
;

702 
öfo
.
s¶_˚π_fûï©h
 = 
li°íî
->
˚πfûe
;

703 
öfo
.
s¶_¥iv©e_key_fûï©h
 = 
li°íî
->
keyfûe
;

704 
öfo
.
s¶_cùhî_li°
 = 
li°íî
->
cùhîs
;

705 #i‡
	`deföed
(
WITH_WEBSOCKETS
Ë&& 
LWS_LIBRARY_VERSION_NUMBER
>=3001000

706 
öfo
.
és1_3_∂us_cùhî_li°
 = 
li°íî
->
cùhîs_és13
;

708 if(
li°íî
->
ªquúe_˚πifiˇã
){

709 
öfo
.
›ti⁄s
 |
LWS_SERVER_OPTION_REQUIRE_VALID_OPENSSL_CLIENT_CERT
;

713 
öfo
.
›ti⁄s
 |
LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT
;

714 if(
li°íî
->
sockë_domaö
 =
AF_INET
){

715 
öfo
.
›ti⁄s
 |
LWS_SERVER_OPTION_DISABLE_IPV6
;

717 
öfo
.
max_hâp_hódî_d©a
 = 
c⁄f
->
websockës_hódîs_size
;

719 
u£r
 = 
	`mosquôto__ˇŒoc
(1, (
libws_mqâ_hack
));

720 if(!
u£r
){

721 
	`mosquôto__‰ì
(
p
);

722 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Out of memory.");

726 if(
li°íî
->
hâp_dú
){

727 #ifde‡
WIN32


728 
u£r
->
hâp_dú
 = 
	`_fuŒ∑th
(
NULL
, 
li°íî
->http_dir, 0);

730 
u£r
->
hâp_dú
 = 
	`ªÆ∑th
(
li°íî
->hâp_dú, 
NULL
);

732 if(!
u£r
->
hâp_dú
){

733 
	`mosquôto__‰ì
(
u£r
);

734 
	`mosquôto__‰ì
(
p
);

735 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_ERR
, "Eº‹: U«bÀÅÿ›í hâ∞dú \"%s\".", 
li°íî
->
hâp_dú
);

739 
u£r
->
li°íî
 =Üistener;

741 
öfo
.
u£r
 = user;

742 
öfo
.
±_£rv_buf_size
 = 
WS_SERV_BUF_SIZE
;

743 
li°íî
->
ws_¥Ÿocﬁ
 = 
p
;

745 
	`lws_£t_log_Àvñ
(
c⁄f
->
websockës_log_Àvñ
, 
log_wøp
);

747 
	`log__¥ötf
(
NULL
, 
MOSQ_LOG_INFO
, "O≥nög websockë†li°í sockë o¿p‹à%d.", 
li°íî
->
p‹t
);

748 
li°íî
->
ws_ö_öô
 = 
åue
;

749 
li°íî
->
ws_c⁄ãxt
 = 
	`lws_¸óã_c⁄ãxt
(&
öfo
);

750 
li°íî
->
ws_ö_öô
 = 
Ál£
;

751 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/will_delay.c

19 
	~"c⁄fig.h
"

21 
	~<m©h.h
>

22 
	~<°dio.h
>

23 
	~<uéi°.h
>

25 
	~"mosquôto_brokî_öã∫Æ.h
"

26 
	~"mem‹y_mosq.h
"

27 
	~"time_mosq.h
"

29 
wûl_dñay_li°
 *
	gdñay_li°
 = 
NULL
;

30 
time_t
 
	gœ°_check
 = 0;

33 
	$wûl_dñay__cmp
(
wûl_dñay_li°
 *
i1
, wûl_dñay_li° *
i2
)

35  ()(
i1
->
c⁄ãxt
->
wûl_dñay_öãrvÆ
 - 
i2
->context->will_delay_interval);

36 
	}
}

39 
	$wûl_dñay__add
(
mosquôto
 *
c⁄ãxt
)

41 
wûl_dñay_li°
 *
ôem
;

43 if(
c⁄ãxt
->
wûl_dñay_íåy
){

44  
MOSQ_ERR_SUCCESS
;

47 
ôem
 = 
	`mosquôto__ˇŒoc
(1, (
wûl_dñay_li°
));

48 if(!
ôem
Ë 
MOSQ_ERR_NOMEM
;

50 
ôem
->
c⁄ãxt
 = context;

51 
c⁄ãxt
->
wûl_dñay_íåy
 = 
ôem
;

52 
ôem
->
c⁄ãxt
->
wûl_dñay_time
 = 
db
.
now_ªÆ_s
 + iãm->c⁄ãxt->
wûl_dñay_öãrvÆ
;

54 
	`DL_INSERT_INORDER
(
dñay_li°
, 
ôem
, 
wûl_dñay__cmp
);

56  
MOSQ_ERR_SUCCESS
;

57 
	}
}

61 
	$wûl_dñay__£nd_Æl
()

63 
wûl_dñay_li°
 *
ôem
, *
tmp
;

65 
	`DL_FOREACH_SAFE
(
dñay_li°
, 
ôem
, 
tmp
){

66 
	`DL_DELETE
(
dñay_li°
, 
ôem
);

67 
ôem
->
c⁄ãxt
->
wûl_dñay_öãrvÆ
 = 0;

68 
ôem
->
c⁄ãxt
->
wûl_dñay_íåy
 = 
NULL
;

69 
	`c⁄ãxt__£nd_wûl
(
ôem
->
c⁄ãxt
);

70 
	`mosquôto__‰ì
(
ôem
);

72 
	}
}

74 
	$wûl_dñay__check
()

76 
wûl_dñay_li°
 *
ôem
, *
tmp
;

78 if(
db
.
now_ªÆ_s
 <
œ°_check
) ;

80 
œ°_check
 = 
db
.
now_ªÆ_s
;

82 
	`DL_FOREACH_SAFE
(
dñay_li°
, 
ôem
, 
tmp
){

83 if(
ôem
->
c⁄ãxt
->
wûl_dñay_time
 < 
db
.
now_ªÆ_s
){

84 
	`DL_DELETE
(
dñay_li°
, 
ôem
);

85 
ôem
->
c⁄ãxt
->
wûl_dñay_öãrvÆ
 = 0;

86 
ôem
->
c⁄ãxt
->
wûl_dñay_íåy
 = 
NULL
;

87 
	`c⁄ãxt__£nd_wûl
(
ôem
->
c⁄ãxt
);

88 if(
ôem
->
c⁄ãxt
->
£ssi⁄_expúy_öãrvÆ
 == 0){

89 
	`c⁄ãxt__add_to_disu£d
(
ôem
->
c⁄ãxt
);

91 
	`mosquôto__‰ì
(
ôem
);

96 
	}
}

99 
	$wûl_dñay__ªmove
(
mosquôto
 *
mosq
)

101 if(
mosq
->
wûl_dñay_íåy
 !
NULL
){

102 
	`DL_DELETE
(
dñay_li°
, 
mosq
->
wûl_dñay_íåy
);

103 
	`mosquôto__‰ì
(
mosq
->
wûl_dñay_íåy
);

104 
mosq
->
wûl_dñay_íåy
 = 
NULL
;

106 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/src/xtreport.c

19 #ifde‡
WITH_XTREPORT


25 
	~"c⁄fig.h
"

27 
	~<°dio.h
>

28 
	~<uthash.h
>

30 
	~"mosquôto_brokî_öã∫Æ.h
"

31 
	~"mosquôto_öã∫Æ.h
"

32 
	~"√t_mosq.h
"

35 
	$˛õ¡_co°
(
FILE
 *
Âå
, 
mosquôto
 *
c⁄ãxt
, 
‚_ödex
)

37 
pkt_cou¡
, 
pkt_byãs
;

38 
cmsg_cou¡
;

39 
cmsg_byãs
;

40 
mosquôto__∑ckë
 *
pkt_tmp
;

41 
tByãs
;

43 
pkt_cou¡
 = 1;

44 
pkt_byãs
 = 
c⁄ãxt
->
ö_∑ckë
.
∑ckë_Àngth
;

45 if(
c⁄ãxt
->
cuºít_out_∑ckë
){

46 
pkt_cou¡
++;

47 
pkt_byãs
 +
c⁄ãxt
->
cuºít_out_∑ckë
->
∑ckë_Àngth
;

49 
pkt_tmp
 = 
c⁄ãxt
->
out_∑ckë
;

50 
pkt_tmp
){

51 
pkt_cou¡
++;

52 
pkt_byãs
 +
pkt_tmp
->
∑ckë_Àngth
;

53 
pkt_tmp
 =Ökt_tmp->
√xt
;

56 
cmsg_cou¡
 = 
c⁄ãxt
->
msgs_ö
.
öÊight_cou¡
 + c⁄ãxt->msgs_ö.
queued_cou¡
;

57 
cmsg_byãs
 = 
c⁄ãxt
->
msgs_ö
.
öÊight_byãs
 + c⁄ãxt->msgs_ö.
queued_byãs
;

58 
cmsg_cou¡
 +
c⁄ãxt
->
msgs_out
.
öÊight_cou¡
 + c⁄ãxt->msgs_out.
queued_cou¡
;

59 
cmsg_byãs
 +
c⁄ãxt
->
msgs_out
.
öÊight_byãs
 + c⁄ãxt->msgs_out.
queued_byãs
;

61 
tByãs
 = 
pkt_byãs
 + 
cmsg_byãs
;

62 if(
c⁄ãxt
->
id
){

63 
tByãs
 +()
	`°æí
(
c⁄ãxt
->
id
);

65 
	`Ârötf
(
Âå
, "%d %ld %lu %lu %lu %lu %d\n", 
‚_ödex
,

66 
tByãs
,

67 
pkt_cou¡
, 
cmsg_cou¡
,

68 
pkt_byãs
, 
cmsg_byãs
,

69 
c⁄ãxt
->
sock
 =
INVALID_SOCKET
?0:context->sock);

70 
	}
}

73 
	$xåï‹t
()

75 
pid_t
 
pid
;

76 
fûíame
[40];

77 
FILE
 *
Âå
;

78 
mosquôto
 *
c⁄ãxt
, *
˘xt_tmp
;

79 
‚_ödex
 = 2;

80 
ôî
 = 1;

82 
pid
 = 
	`gëpid
();

83 
	`¢¥ötf
(
fûíame
, 40, "/tmp/xtmosquôto.kcg.%d.%d", 
pid
, 
ôî
);

84 
ôî
++;

85 
Âå
 = 
	`f›í
(
fûíame
, "wt");

86 if(
Âå
 =
NULL
) ;

88 
	`Ârötf
(
Âå
, "# callgrind format\n");

89 
	`Ârötf
(
Âå
, "version: 1\n");

90 
	`Ârötf
(
Âå
, "creator: mosquitto\n");

91 
	`Ârötf
(
Âå
, "pid: %d\n", 
pid
);

92 
	`Ârötf
(
Âå
, "cmd: mosquitto\n\n");

94 
	`Ârötf
(
Âå
, "positions:Üine\n");

95 
	`Ârötf
(
Âå
, "event:ÅB :Åotal bytes\n");

96 
	`Ârötf
(
Âå
, "event:Ökt : currently queuedÖackets\n");

97 
	`Ârötf
(
Âå
, "event: cmsg : currentlyÖending client messages\n");

98 
	`Ârötf
(
Âå
, "event:ÖktB : currently queuedÖacket bytes\n");

99 
	`Ârötf
(
Âå
, "event: cmsgB : currentlyÖending client message bytes\n");

100 
	`Ârötf
(
Âå
, "events:ÅBÖkt cmsgÖktB cmsgB sock\n");

102 
	`Ârötf
(
Âå
, "fn=(1) clients\n");

103 
	`Ârötf
(
Âå
, "1 0 0 0 0 0 0\n");

105 
‚_ödex
 = 2;

106 
	`HASH_ITER
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
c⁄ãxt
, 
˘xt_tmp
){

107 if(
c⁄ãxt
->
id
){

108 
	`Ârötf
(
Âå
, "c‚=(%dË%s\n", 
‚_ödex
, 
c⁄ãxt
->
id
);

110 
	`Ârötf
(
Âå
, "c‚=(%dËunknown\n", 
‚_ödex
);

112 
	`Ârötf
(
Âå
, "ˇŒs=1 %d\n", 
‚_ödex
);

113 
	`˛õ¡_co°
(
Âå
, 
c⁄ãxt
, 
‚_ödex
);

114 
‚_ödex
++;

117 
‚_ödex
 = 2;

118 
	`HASH_ITER
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
c⁄ãxt
, 
˘xt_tmp
){

119 
	`Ârötf
(
Âå
, "‚=(%d)\n", 
‚_ödex
);

120 
	`˛õ¡_co°
(
Âå
, 
c⁄ãxt
, 
‚_ödex
);

121 
‚_ödex
++;

124 
	`f˛o£
(
Âå
);

125 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/08-tls-psk-bridge.c

1 
	~<î∫o.h
>

2 
	~<°dboﬁ.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<mosquôto.h
>

8 
	grun
 = -1;

9 
	g£¡_mid
;

11 
	$⁄_log
(
mosquôto
 *
mosq
, *
obj
, 
Àvñ
, c⁄° *
°r
)

13 
	`¥ötf
("%s\n", 
°r
);

14 
	}
}

16 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

18 if(
rc
){

19 
	`exô
(1);

21 
	`mosquôto_publish
(
mosq
, &
£¡_mid
, "psk/ã°", 
	`°æí
("mesßge"), "mesßge", 1, 
Ál£
);

23 
	}
}

25 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

27 if(
mid
 =
£¡_mid
){

28 
	`mosquôto_disc⁄√˘
(
mosq
);

29 
run
 = 0;

31 
	`exô
(1);

33 
	}
}

35 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

37 
run
 = 
rc
;

38 
	}
}

40 
	$maö
(
¨gc
, *
¨gv
[])

42 
rc
;

43 
mosquôto
 *
mosq
;

44 
p‹t
;

46 
p‹t
 = 
	`©oi
(
¨gv
[1]);

48 
	`mosquôto_lib_öô
();

50 
mosq
 = 
	`mosquôto_√w
("08-és-psk-bridge", 
åue
, 
NULL
);

51 
	`mosquôto_és_›ts_£t
(
mosq
, 1, "ésv1", 
NULL
);

52 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

53 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

54 
	`mosquôto_publish_ˇŒback_£t
(
mosq
, 
⁄_publish
);

55 
	`mosquôto_log_ˇŒback_£t
(
mosq
, 
⁄_log
);

57 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

58 if(
rc
) Ñc;

60 
run
 == -1){

61 
	`mosquôto_lo›
(
mosq
, -1, 1);

64 
	`mosquôto_lib_˛ónup
();

65  
run
;

66 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/08-tls-psk-pub.c

1 
	~<î∫o.h
>

2 
	~<°dboﬁ.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<mosquôto.h
>

8 
	grun
 = -1;

9 
	g£¡_mid
;

11 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

13 if(
rc
){

14 
	`exô
(1);

16 
	`mosquôto_publish
(
mosq
, &
£¡_mid
, "psk/ã°", 
	`°æí
("mesßge"), "mesßge", 0, 
Ál£
);

18 
	}
}

20 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

22 if(
mid
 =
£¡_mid
){

23 
	`mosquôto_disc⁄√˘
(
mosq
);

24 
run
 = 0;

26 
	`exô
(1);

28 
	}
}

30 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

32 
run
 = 
rc
;

33 
	}
}

35 
	$maö
(
¨gc
, *
¨gv
[])

37 
rc
;

38 
p‹t
;

39 
mosquôto
 *
mosq
;

41 
	`mosquôto_lib_öô
();

43 
p‹t
 = 
	`©oi
(
¨gv
[1]);

45 
mosq
 = 
	`mosquôto_√w
("08-és-psk-pub", 
åue
, 
NULL
);

46 
	`mosquôto_és_›ts_£t
(
mosq
, 1, "ésv1", 
NULL
);

47 
rc
 = 
	`mosquôto_és_psk_£t
(
mosq
, "dódbìf", "psk-id", 
NULL
);

48 if(
rc
){

49 
	`mosquôto_de°roy
(
mosq
);

50  
rc
;

52 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

53 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

54 
	`mosquôto_publish_ˇŒback_£t
(
mosq
, 
⁄_publish
);

56 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

57 if(
rc
){

58 
	`mosquôto_de°roy
(
mosq
);

59  
rc
;

62 
run
 == -1){

63 
	`mosquôto_lo›
(
mosq
, -1, 1);

66 
	`mosquôto_de°roy
(
mosq
);

68 
	`mosquôto_lib_˛ónup
();

69  
run
;

70 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_acl.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<mosquôto.h
>

4 
	~<mosquôto_brokî.h
>

5 
	~<mosquôto_∂ugö.h
>

7 
	$mosquôto_auth_∂ugö_vîsi⁄
()

10 
	}
}

12 
	$mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

14  
MOSQ_ERR_SUCCESS
;

15 
	}
}

17 
	$mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

19  
MOSQ_ERR_SUCCESS
;

20 
	}
}

22 
	$mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

24  
MOSQ_ERR_SUCCESS
;

25 
	}
}

27 
	$mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

29  
MOSQ_ERR_SUCCESS
;

30 
	}
}

32 
	$mosquôto_auth_a˛_check
(*
u£r_d©a
, 
ac˚ss
, 
mosquôto
 *
˛õ¡
, c⁄° 
mosquôto_a˛_msg
 *
msg
)

34 c⁄° *
u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
˛õ¡
);

36 if(
u£∫ame
 && !
	`°rcmp
(u£∫ame, "ªad⁄ly"Ë&& 
ac˚ss
 =
MOSQ_ACL_READ
){

37  
MOSQ_ERR_SUCCESS
;

38 }if(
u£∫ame
 && !
	`°rcmp
(u£∫ame, "ªad⁄ly"Ë&& 
ac˚ss
 =
MOSQ_ACL_SUBSCRIBE
 &&!
	`°rchr
(
msg
->
t›ic
, '#') && !strchr(msg->topic, '+')) {

39  
MOSQ_ERR_SUCCESS
;

41  
MOSQ_ERR_ACL_DENIED
;

43 
	}
}

45 
	$mosquôto_auth_u≈wd_check
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
)

47  
MOSQ_ERR_PLUGIN_DEFER
;

48 
	}
}

50 
	$mosquôto_auth_psk_key_gë
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
)

52  
MOSQ_ERR_AUTH
;

53 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_acl_change.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<mosquôto.h
>

4 
	~<mosquôto_brokî.h
>

5 
	~<mosquôto_∂ugö.h
>

7 
mosquôto_auth_a˛_check_v5
(
evít
, *
evít_d©a
, *
u£r_d©a
);

8 
mosquôto_auth_u≈wd_check_v5
(
evít
, *
evít_d©a
, *
u£r_d©a
);

10 
mosquôto_∂ugö_id_t
 *
	g∂g_id
;

12 
	glogö_cou¡
 = 0;

14 
	$mosquôto_∂ugö_vîsi⁄
(
suµ‹ãd_vîsi⁄_cou¡
, c⁄° *
suµ‹ãd_vîsi⁄s
)

17 
	}
}

19 
	$mosquôto_∂ugö_öô
(
mosquôto_∂ugö_id_t
 *
idítifõr
, **
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

21 
∂g_id
 = 
idítifõr
;

23 
	`mosquôto_ˇŒback_ªgi°î
(
∂g_id
, 
MOSQ_EVT_ACL_CHECK
, 
mosquôto_auth_a˛_check_v5
, 
NULL
, NULL);

24 
	`mosquôto_ˇŒback_ªgi°î
(
∂g_id
, 
MOSQ_EVT_BASIC_AUTH
, 
mosquôto_auth_u≈wd_check_v5
, 
NULL
, NULL);

26  
MOSQ_ERR_SUCCESS
;

27 
	}
}

29 
	$mosquôto_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

31 
	`mosquôto_ˇŒback_uƒegi°î
(
∂g_id
, 
MOSQ_EVT_ACL_CHECK
, 
mosquôto_auth_a˛_check_v5
, 
NULL
);

32 
	`mosquôto_ˇŒback_uƒegi°î
(
∂g_id
, 
MOSQ_EVT_BASIC_AUTH
, 
mosquôto_auth_u≈wd_check_v5
, 
NULL
);

34  
MOSQ_ERR_SUCCESS
;

35 
	}
}

37 
	$mosquôto_auth_a˛_check_v5
(
evít
, *
evít_d©a
, *
u£r_d©a
)

39 
mosquôto_evt_a˛_check
 *
ed
 = 
evít_d©a
;

41 if(
logö_cou¡
 =2 && 
ed
->
ac˚ss
 =
MOSQ_ACL_WRITE
){

42  
MOSQ_ERR_ACL_DENIED
;

44  
MOSQ_ERR_SUCCESS
;

46 
	}
}

48 
	$mosquôto_auth_u≈wd_check_v5
(
evít
, *
evít_d©a
, *
u£r_d©a
)

50 
logö_cou¡
++;

51  
MOSQ_ERR_SUCCESS
;

52 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_acl_sub_denied.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<mosquôto.h
>

4 
	~<mosquôto_brokî.h
>

5 
	~<mosquôto_∂ugö.h
>

7 
	$mosquôto_auth_∂ugö_vîsi⁄
()

10 
	}
}

12 
	$mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

14  
MOSQ_ERR_SUCCESS
;

15 
	}
}

17 
	$mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

19  
MOSQ_ERR_SUCCESS
;

20 
	}
}

22 
	$mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

24  
MOSQ_ERR_SUCCESS
;

25 
	}
}

27 
	$mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

29  
MOSQ_ERR_SUCCESS
;

30 
	}
}

32 
	$mosquôto_auth_a˛_check
(*
u£r_d©a
, 
ac˚ss
, 
mosquôto
 *
˛õ¡
, c⁄° 
mosquôto_a˛_msg
 *
msg
)

34 if(
ac˚ss
 =
MOSQ_ACL_SUBSCRIBE
){

35  
MOSQ_ERR_ACL_DENIED
;

37  
MOSQ_ERR_SUCCESS
;

39 
	}
}

41 
	$mosquôto_auth_u≈wd_check
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
)

43  
MOSQ_ERR_SUCCESS
;

44 
	}
}

46 
	$mosquôto_auth_psk_key_gë
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
)

48  
MOSQ_ERR_AUTH
;

49 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_context_params.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<mosquôto.h
>

5 
	~<mosquôto_brokî.h
>

6 
	~<mosquôto_∂ugö.h
>

8 
	$mosquôto_auth_∂ugö_vîsi⁄
()

11 
	}
}

13 
	$mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

15  
MOSQ_ERR_SUCCESS
;

16 
	}
}

18 
	$mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

20  
MOSQ_ERR_SUCCESS
;

21 
	}
}

23 
	$mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

25  
MOSQ_ERR_SUCCESS
;

26 
	}
}

28 
	$mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

30  
MOSQ_ERR_SUCCESS
;

31 
	}
}

33 
	$mosquôto_auth_a˛_check
(*
u£r_d©a
, 
ac˚ss
, 
mosquôto
 *
˛õ¡
, c⁄° 
mosquôto_a˛_msg
 *
msg
)

35  
MOSQ_ERR_PLUGIN_DEFER
;

36 
	}
}

38 
	$mosquôto_auth_u≈wd_check
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
)

40 c⁄° *
tmp
;

42 
tmp
 = 
	`mosquôto_˛õ¡_addªss
(
˛õ¡
);

43 if(!
tmp
 || 
	`°rcmp
(tmp, "127.0.0.1")){

44  
MOSQ_ERR_AUTH
;

47 if(!
	`mosquôto_˛õ¡_˛ón_£ssi⁄
(
˛õ¡
)){

48 
	`Ârötf
(
°dîr
, "mosquôto_auth_u≈wd_check cÀ™_£ssi⁄Éº‹: %d\n", 
	`mosquôto_˛õ¡_˛ón_£ssi⁄
(
˛õ¡
));

49  
MOSQ_ERR_AUTH
;

52 
tmp
 = 
	`mosquôto_˛õ¡_id
(
˛õ¡
);

53 if(!
tmp
 || 
	`°rcmp
(tmp, "client-params-test")){

54 
	`Ârötf
(
°dîr
, "mosquôto_auth_u≈wd_check clõ¡_idÉº‹: %s\n", 
tmp
);

55  
MOSQ_ERR_AUTH
;

58 if(
	`mosquôto_˛õ¡_kì∑live
(
˛õ¡
) != 42){

59 
	`Ârötf
(
°dîr
, "mosquôto_auth_u≈wd_check kì∑livêîr‹: %d\n", 
	`mosquôto_˛õ¡_kì∑live
(
˛õ¡
));

60  
MOSQ_ERR_AUTH
;

63 if(!
	`mosquôto_˛õ¡_˚πifiˇã
(
˛õ¡
)){

68 if(
	`mosquôto_˛õ¡_¥Ÿocﬁ
(
˛õ¡
Ë!
mp_mqâ
){

69 
	`Ârötf
(
°dîr
, "mosquôto_auth_u≈wd_checkÖrŸocﬁÉº‹: %d\n", 
	`mosquôto_˛õ¡_¥Ÿocﬁ
(
˛õ¡
));

70  
MOSQ_ERR_AUTH
;

73 if(
	`mosquôto_˛õ¡_sub_cou¡
(
˛õ¡
)){

74 
	`Ârötf
(
°dîr
, "mosquôto_auth_u≈wd_check sub_cou¡Éº‹: %d\n", 
	`mosquôto_˛õ¡_sub_cou¡
(
˛õ¡
));

75  
MOSQ_ERR_AUTH
;

78 
tmp
 = 
	`mosquôto_˛õ¡_u£∫ame
(
˛õ¡
);

79 if(!
tmp
 || 
	`°rcmp
(tmp, "client-username")){

80 
	`Ârötf
(
°dîr
, "mosquôto_auth_u≈wd_check u£∫amêîr‹: %s\n", 
tmp
);

81  
MOSQ_ERR_AUTH
;

84  
MOSQ_ERR_SUCCESS
;

85 
	}
}

87 
	$mosquôto_auth_psk_key_gë
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
)

89  
MOSQ_ERR_AUTH
;

90 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_extended_multiple.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<mosquôto.h
>

5 
	~<mosquôto_brokî.h
>

6 
	~<mosquôto_∂ugö.h
>

8 
	$mosquôto_auth_∂ugö_vîsi⁄
()

11 
	}
}

13 
	$mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

15  
MOSQ_ERR_SUCCESS
;

16 
	}
}

18 
	$mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

20  
MOSQ_ERR_SUCCESS
;

21 
	}
}

23 
	$mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

25  
MOSQ_ERR_SUCCESS
;

26 
	}
}

28 
	$mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

30  
MOSQ_ERR_SUCCESS
;

31 
	}
}

33 
	$mosquôto_auth_a˛_check
(*
u£r_d©a
, 
ac˚ss
, 
mosquôto
 *
˛õ¡
, c⁄° 
mosquôto_a˛_msg
 *
msg
)

35  
MOSQ_ERR_PLUGIN_DEFER
;

36 
	}
}

39 
	$mosquôto_auth_°¨t
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
mëhod
, 
boﬁ
 
ªauth
, c⁄° *
d©a
, 
uöt16_t
 
d©a_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
)

41 
i
;

43 if(!
	`°rcmp
(
mëhod
, "mirror")){

44 if(
d©a_Àn
 > 0){

45 *
d©a_out
 = 
	`mÆloc
(
d©a_Àn
);

46 if(!(*
d©a_out
)){

47  
MOSQ_ERR_NOMEM
;

49 
i
=0; i<
d©a_Àn
; i++){

50 ((
uöt8_t
 *)(*
d©a_out
))[
i
] = ((uöt8_à*)
d©a
)[
d©a_Àn
-i-1];

52 *
d©a_out_Àn
 = 
d©a_Àn
;

54  
MOSQ_ERR_AUTH_CONTINUE
;

56  
MOSQ_ERR_INVAL
;

59  
MOSQ_ERR_NOT_SUPPORTED
;

60 
	}
}

63 
	$mosquôto_auth_c⁄töue
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
mëhod
, c⁄° *
d©a
, 
uöt16_t
 
d©a_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
)

65 
Àn
;

67 if(!
	`°rcmp
(
mëhod
, "mirror")){

68 if(
d©a_Àn
 > 0){

69 
Àn
 = 
	`°æí
("su≥rˇli‰agûi°i˚xpülidocious")>
d©a_Àn
?data_len:strlen("supercalifragilisticexpialidocious");

70 if(!
	`memcmp
(
d©a
, "su≥rˇli‰agûi°i˚xpülidocious", 
Àn
)){

71  
MOSQ_ERR_SUCCESS
;

73  
MOSQ_ERR_AUTH
;

76  
MOSQ_ERR_INVAL
;

79  
MOSQ_ERR_NOT_SUPPORTED
;

80 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_extended_reauth.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<mosquôto.h
>

5 
	~<mosquôto_brokî.h
>

6 
	~<mosquôto_∂ugö.h
>

8 
	gauth_cou¡
 = 0;

10 
	$mosquôto_auth_∂ugö_vîsi⁄
()

13 
	}
}

15 
	$mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

17  
MOSQ_ERR_SUCCESS
;

18 
	}
}

20 
	$mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

22  
MOSQ_ERR_SUCCESS
;

23 
	}
}

25 
	$mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

27  
MOSQ_ERR_SUCCESS
;

28 
	}
}

30 
	$mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

32  
MOSQ_ERR_SUCCESS
;

33 
	}
}

35 
	$mosquôto_auth_a˛_check
(*
u£r_d©a
, 
ac˚ss
, 
mosquôto
 *
˛õ¡
, c⁄° 
mosquôto_a˛_msg
 *
msg
)

37  
MOSQ_ERR_PLUGIN_DEFER
;

38 
	}
}

41 
	$mosquôto_auth_°¨t
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
mëhod
, 
boﬁ
 
ªauth
, c⁄° *
d©a
, 
uöt16_t
 
d©a_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
)

43 if(
auth_cou¡
 == 0){

44 
auth_cou¡
++;

45  
MOSQ_ERR_SUCCESS
;

47  
MOSQ_ERR_AUTH
;

49 
	}
}

51 
	$mosquôto_auth_c⁄töue
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
mëhod
, c⁄° *
d©a
, 
uöt16_t
 
d©a_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
)

53  
MOSQ_ERR_AUTH
;

54 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_extended_single.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<mosquôto.h
>

5 
	~<mosquôto_brokî.h
>

6 
	~<mosquôto_∂ugö.h
>

8 
	$mosquôto_auth_∂ugö_vîsi⁄
()

11 
	}
}

13 
	$mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

15  
MOSQ_ERR_SUCCESS
;

16 
	}
}

18 
	$mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

20  
MOSQ_ERR_SUCCESS
;

21 
	}
}

23 
	$mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

25  
MOSQ_ERR_SUCCESS
;

26 
	}
}

28 
	$mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

30  
MOSQ_ERR_SUCCESS
;

31 
	}
}

33 
	$mosquôto_auth_a˛_check
(*
u£r_d©a
, 
ac˚ss
, 
mosquôto
 *
˛õ¡
, c⁄° 
mosquôto_a˛_msg
 *
msg
)

35  
MOSQ_ERR_PLUGIN_DEFER
;

36 
	}
}

39 
	$mosquôto_auth_°¨t
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
mëhod
, 
boﬁ
 
ªauth
, c⁄° *
d©a
, 
uöt16_t
 
d©a_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
)

41 
i
;

43 if(!
	`°rcmp
(
mëhod
, "error")){

44  
MOSQ_ERR_INVAL
;

45 }if(!
	`°rcmp
(
mëhod
, "non-matching")){

46  
MOSQ_ERR_NOT_SUPPORTED
;

47 }if(!
	`°rcmp
(
mëhod
, "single")){

48 
d©a_Àn
 = d©a_Àn>
	`°æí
("data")?strlen("data"):data_len;

49 if(!
	`memcmp
(
d©a
, "d©a", 
d©a_Àn
)){

50  
MOSQ_ERR_SUCCESS
;

52  
MOSQ_ERR_AUTH
;

54 }if(!
	`°rcmp
(
mëhod
, "change")){

55  
	`mosquôto_£t_u£∫ame
(
˛õ¡
, "new_username");

56 }if(!
	`°rcmp
(
mëhod
, "mirror")){

57 if(
d©a_Àn
 > 0){

58 *
d©a_out
 = 
	`mÆloc
(
d©a_Àn
);

59 if(!(*
d©a_out
)){

60  
MOSQ_ERR_NOMEM
;

62 
i
=0; i<
d©a_Àn
; i++){

63 ((
uöt8_t
 *)(*
d©a_out
))[
i
] = ((uöt8_à*)
d©a
)[
d©a_Àn
-i-1];

65 *
d©a_out_Àn
 = 
d©a_Àn
;

67  
MOSQ_ERR_SUCCESS
;

69  
MOSQ_ERR_INVAL
;

72  
MOSQ_ERR_NOT_SUPPORTED
;

73 
	}
}

75 
	$mosquôto_auth_c⁄töue
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
mëhod
, c⁄° *
d©a
, 
uöt16_t
 
d©a_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
)

77  
MOSQ_ERR_AUTH
;

78 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_extended_single2.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<mosquôto.h
>

5 
	~<mosquôto_brokî.h
>

6 
	~<mosquôto_∂ugö.h
>

8 
	$mosquôto_auth_∂ugö_vîsi⁄
()

11 
	}
}

13 
	$mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

15  
MOSQ_ERR_SUCCESS
;

16 
	}
}

18 
	$mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

20  
MOSQ_ERR_SUCCESS
;

21 
	}
}

23 
	$mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

25  
MOSQ_ERR_SUCCESS
;

26 
	}
}

28 
	$mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

30  
MOSQ_ERR_SUCCESS
;

31 
	}
}

33 
	$mosquôto_auth_a˛_check
(*
u£r_d©a
, 
ac˚ss
, 
mosquôto
 *
˛õ¡
, c⁄° 
mosquôto_a˛_msg
 *
msg
)

35  
MOSQ_ERR_PLUGIN_DEFER
;

36 
	}
}

39 
	$mosquôto_auth_°¨t
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
mëhod
, 
boﬁ
 
ªauth
, c⁄° *
d©a
, 
uöt16_t
 
d©a_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
)

41 
i
;

43 if(!
	`°rcmp
(
mëhod
, "error2")){

44  
MOSQ_ERR_INVAL
;

45 }if(!
	`°rcmp
(
mëhod
, "non-matching2")){

46  
MOSQ_ERR_NOT_SUPPORTED
;

47 }if(!
	`°rcmp
(
mëhod
, "single2")){

48 
d©a_Àn
 = d©a_Àn>
	`°æí
("data")?strlen("data"):data_len;

49 if(!
	`memcmp
(
d©a
, "d©a", 
d©a_Àn
)){

50  
MOSQ_ERR_SUCCESS
;

52  
MOSQ_ERR_AUTH
;

54 }if(!
	`°rcmp
(
mëhod
, "change2")){

55  
	`mosquôto_£t_u£∫ame
(
˛õ¡
, "new_username");

56 }if(!
	`°rcmp
(
mëhod
, "mirror2")){

57 if(
d©a_Àn
 > 0){

58 *
d©a_out
 = 
	`mÆloc
(
d©a_Àn
);

59 if(!(*
d©a_out
)){

60  
MOSQ_ERR_NOMEM
;

62 
i
=0; i<
d©a_Àn
; i++){

63 ((
uöt8_t
 *)(*
d©a_out
))[
i
] = ((uöt8_à*)
d©a
)[
d©a_Àn
-i-1];

65 *
d©a_out_Àn
 = 
d©a_Àn
;

67  
MOSQ_ERR_SUCCESS
;

69  
MOSQ_ERR_INVAL
;

72  
MOSQ_ERR_NOT_SUPPORTED
;

73 
	}
}

75 
	$mosquôto_auth_c⁄töue
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
mëhod
, c⁄° *
d©a
, 
uöt16_t
 
d©a_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
)

77  
MOSQ_ERR_AUTH
;

78 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_msg_params.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<mosquôto.h
>

5 
	~<mosquôto_brokî.h
>

6 
	~<mosquôto_∂ugö.h
>

8 
	$mosquôto_auth_∂ugö_vîsi⁄
()

11 
	}
}

13 
	$mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

15  
MOSQ_ERR_SUCCESS
;

16 
	}
}

18 
	$mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

20  
MOSQ_ERR_SUCCESS
;

21 
	}
}

23 
	$mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

25  
MOSQ_ERR_SUCCESS
;

26 
	}
}

28 
	$mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

30  
MOSQ_ERR_SUCCESS
;

31 
	}
}

33 
	$mosquôto_auth_a˛_check
(*
u£r_d©a
, 
ac˚ss
, 
mosquôto
 *
˛õ¡
, c⁄° 
mosquôto_a˛_msg
 *
msg
)

35 if(
ac˚ss
 =
MOSQ_ACL_SUBSCRIBE
){

36  
MOSQ_ERR_SUCCESS
;

39 if(!
msg
->
t›ic
 || 
	`°rcmp
(msg->topic, "param/topic")){

40 
	`ab‹t
();

41  
MOSQ_ERR_ACL_DENIED
;

44 if(!
msg
->
∑ylﬂd
 || 
	`°∫cmp
(msg->∑ylﬂd, "∑ylﬂd c⁄ã¡s", 
	`°æí
("payload contents"))){

45 
	`ab‹t
();

46  
MOSQ_ERR_ACL_DENIED
;

49 if(
msg
->
∑ylﬂdÀn
 !
	`°æí
("payload contents")){

50 
	`ab‹t
();

51  
MOSQ_ERR_ACL_DENIED
;

54 if(
msg
->
qos
 != 1){

55 
	`ab‹t
();

56  
MOSQ_ERR_ACL_DENIED
;

59 if(!
msg
->
ªèö
){

60 
	`ab‹t
();

61  
MOSQ_ERR_ACL_DENIED
;

64  
MOSQ_ERR_SUCCESS
;

65 
	}
}

67 
	$mosquôto_auth_u≈wd_check
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
)

69  
MOSQ_ERR_PLUGIN_DEFER
;

70 
	}
}

72 
	$mosquôto_auth_psk_key_gë
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
)

74  
MOSQ_ERR_AUTH
;

75 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_publish.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<mqâ_¥Ÿocﬁ.h
>

4 
	~<mosquôto.h
>

5 
	~<mosquôto_brokî.h
>

6 
	~<mosquôto_∂ugö.h
>

8 
	$mosquôto_auth_∂ugö_vîsi⁄
()

11 
	}
}

13 
	$mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

15  
MOSQ_ERR_SUCCESS
;

16 
	}
}

18 
	$mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

20  
MOSQ_ERR_SUCCESS
;

21 
	}
}

23 
	$mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

25  
MOSQ_ERR_SUCCESS
;

26 
	}
}

28 
	$mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

30  
MOSQ_ERR_SUCCESS
;

31 
	}
}

33 
	$mosquôto_auth_a˛_check
(*
u£r_d©a
, 
ac˚ss
, 
mosquôto
 *
˛õ¡
, c⁄° 
mosquôto_a˛_msg
 *
msg
)

35 
cou¡
 = 0;

36 
mosquôto_¥›îty
 *
¥›s
 = 
NULL
;

38 if(
ac˚ss
 =
MOSQ_ACL_WRITE
){

39 if(
cou¡
 == 0){

41 
	`mosquôto_brokî_publish_c›y
("missög-˛õ¡", "t›ic/2", 
	`°æí
("ã°-mesßge-2"), "ã°-mesßge-2", 2, 
åue
, 
NULL
);

42 
	`mosquôto_brokî_publish_c›y
("ã°-˛õ¡", "t›ic/0", 
	`°æí
("ã°-mesßge-0"), "ã°-mesßge-0", 0, 
åue
, 
NULL
);

43 
	`mosquôto_brokî_publish_c›y
("missög-˛õ¡", "t›ic/2", 
	`°æí
("ã°-mesßge-2"), "ã°-mesßge-2", 2, 
åue
, 
NULL
);

44 
	`mosquôto_brokî_publish_c›y
("ã°-˛õ¡", "t›ic/1", 
	`°æí
("ã°-mesßge-1"), "ã°-mesßge-1", 1, 
åue
, 
NULL
);

45 
	`mosquôto_brokî_publish_c›y
("missög-˛õ¡", "t›ic/2", 
	`°æí
("ã°-mesßge-2"), "ã°-mesßge-2", 2, 
åue
, 
NULL
);

46 
	`mosquôto_brokî_publish_c›y
("ã°-˛õ¡", "t›ic/2", 
	`°æí
("ã°-mesßge-2"), "ã°-mesßge-2", 2, 
åue
, 
NULL
);

47 
cou¡
 = 1;

49 
	`mosquôto_¥›îty_add_byã
(&
¥›s
, 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
, 1);

50 
	`mosquôto_brokî_publish_c›y
("ã°-˛õ¡", "t›ic/0", 
	`°æí
("ã°-mesßge-0"), "ã°-mesßge-0", 0, 
åue
, 
¥›s
);

51 
¥›s
 = 
NULL
;

52 
	`mosquôto_¥›îty_add_byã
(&
¥›s
, 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
, 1);

53 
	`mosquôto_brokî_publish_c›y
("ã°-˛õ¡", "t›ic/1", 
	`°æí
("ã°-mesßge-1"), "ã°-mesßge-1", 1, 
åue
, 
¥›s
);

54 
¥›s
 = 
NULL
;

55 
	`mosquôto_¥›îty_add_byã
(&
¥›s
, 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
, 1);

56 
	`mosquôto_brokî_publish_c›y
("ã°-˛õ¡", "t›ic/2", 
	`°æí
("ã°-mesßge-2"), "ã°-mesßge-2", 2, 
åue
, 
¥›s
);

60  
MOSQ_ERR_SUCCESS
;

61 
	}
}

63 
	$mosquôto_auth_u≈wd_check
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
)

65  
MOSQ_ERR_SUCCESS
;

66 
	}
}

68 
	$mosquôto_auth_psk_key_gë
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
)

70  
MOSQ_ERR_AUTH
;

71 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_pwd.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<mosquôto.h
>

4 
	~<mosquôto_brokî.h
>

5 
	~<mosquôto_∂ugö.h
>

7 
	$mosquôto_auth_∂ugö_vîsi⁄
()

10 
	}
}

12 
	$mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

14  
MOSQ_ERR_SUCCESS
;

15 
	}
}

17 
	$mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

19  
MOSQ_ERR_SUCCESS
;

20 
	}
}

22 
	$mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

24  
MOSQ_ERR_SUCCESS
;

25 
	}
}

27 
	$mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

29  
MOSQ_ERR_SUCCESS
;

30 
	}
}

32 
	$mosquôto_auth_a˛_check
(*
u£r_d©a
, 
ac˚ss
, 
mosquôto
 *
˛õ¡
, c⁄° 
mosquôto_a˛_msg
 *
msg
)

34  
MOSQ_ERR_PLUGIN_DEFER
;

35 
	}
}

37 
	$mosquôto_auth_u≈wd_check
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
)

39 if(!
	`°rcmp
(
u£∫ame
, "ã°-u£∫ame"Ë&& 
∑ssw‹d
 && !strcmp(password, "cnwTICONIURW")){

40  
MOSQ_ERR_SUCCESS
;

41 }if(!
	`°rcmp
(
u£∫ame
, "readonly")){

42  
MOSQ_ERR_SUCCESS
;

43 }if(!
	`°rcmp
(
u£∫ame
, "test-username@v2")){

44  
MOSQ_ERR_PLUGIN_DEFER
;

46  
MOSQ_ERR_AUTH
;

48 
	}
}

50 
	$mosquôto_auth_psk_key_gë
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
)

52  
MOSQ_ERR_AUTH
;

53 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_v2.c

1 
	~<°rög.h
>

2 
	~<°dboﬁ.h
>

3 
	~"mosquôto_∂ugö_v2.h
"

10 
	emosq_îr_t
 {

11 
	mMOSQ_ERR_SUCCESS
 = 0,

12 
	mMOSQ_ERR_AUTH
 = 11,

13 
	mMOSQ_ERR_ACL_DENIED
 = 12

16 
	$mosquôto_auth_∂ugö_vîsi⁄
()

19 
	}
}

21 
	$mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_auth_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

23  
MOSQ_ERR_SUCCESS
;

24 
	}
}

26 
	$mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_auth_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

28  
MOSQ_ERR_SUCCESS
;

29 
	}
}

31 
	$mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_auth_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

33  
MOSQ_ERR_SUCCESS
;

34 
	}
}

36 
	$mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_auth_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

38  
MOSQ_ERR_SUCCESS
;

39 
	}
}

41 
	$mosquôto_auth_a˛_check
(*
u£r_d©a
, c⁄° *
˛õ¡id
, c⁄° *
u£∫ame
, c⁄° *
t›ic
, 
ac˚ss
)

43 if(!
	`°rcmp
(
u£∫ame
, "ªad⁄ly"Ë&& 
ac˚ss
 =
MOSQ_ACL_READ
){

44  
MOSQ_ERR_SUCCESS
;

46  
MOSQ_ERR_ACL_DENIED
;

48 
	}
}

50 
	$mosquôto_auth_u≈wd_check
(*
u£r_d©a
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
)

52 if(!
	`°rcmp
(
u£∫ame
, "ã°-u£∫ame"Ë&& 
∑ssw‹d
 && !strcmp(password, "cnwTICONIURW")){

53  
MOSQ_ERR_SUCCESS
;

54 }if(!
	`°rcmp
(
u£∫ame
, "readonly")){

55  
MOSQ_ERR_SUCCESS
;

56 }if(!
	`°rcmp
(
u£∫ame
, "test-username@v2")){

57  
MOSQ_ERR_SUCCESS
;

59  
MOSQ_ERR_AUTH
;

61 
	}
}

63 
	$mosquôto_auth_psk_key_gë
(*
u£r_d©a
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
)

65  
MOSQ_ERR_AUTH
;

66 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_v4.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<mosquôto.h
>

4 
	~<mosquôto_brokî.h
>

5 
	~<mosquôto_∂ugö.h
>

7 
	$mosquôto_auth_∂ugö_vîsi⁄
()

10 
	}
}

12 
	$mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

14  
MOSQ_ERR_SUCCESS
;

15 
	}
}

17 
	$mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

19  
MOSQ_ERR_SUCCESS
;

20 
	}
}

22 
	$mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

24  
MOSQ_ERR_SUCCESS
;

25 
	}
}

27 
	$mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

29  
MOSQ_ERR_SUCCESS
;

30 
	}
}

32 
	$mosquôto_auth_a˛_check
(*
u£r_d©a
, 
ac˚ss
, 
mosquôto
 *
˛õ¡
, c⁄° 
mosquôto_a˛_msg
 *
msg
)

34 c⁄° *
u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
˛õ¡
);

36 if(
u£∫ame
 && !
	`°rcmp
(u£∫ame, "ªad⁄ly"Ë&& 
ac˚ss
 =
MOSQ_ACL_READ
){

37  
MOSQ_ERR_SUCCESS
;

38 }if(
u£∫ame
 && !
	`°rcmp
(u£∫ame, "ªad⁄ly"Ë&& 
ac˚ss
 =
MOSQ_ACL_SUBSCRIBE
 &&!
	`°rchr
(
msg
->
t›ic
, '#') && !strchr(msg->topic, '+')) {

39  
MOSQ_ERR_SUCCESS
;

40 }if(
u£∫ame
 && !
	`°rcmp
(username, "readwrite")){

41 if((!
	`°rcmp
(
msg
->
t›ic
, "ªad⁄ly"Ë&& 
ac˚ss
 =
MOSQ_ACL_READ
)

42 || !
	`°rcmp
(
msg
->
t›ic
, "writeable")){

44  
MOSQ_ERR_SUCCESS
;

46  
MOSQ_ERR_ACL_DENIED
;

50  
MOSQ_ERR_ACL_DENIED
;

52 
	}
}

54 
	$mosquôto_auth_u≈wd_check
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
)

56 if(!
	`°rcmp
(
u£∫ame
, "ã°-u£∫ame"Ë&& 
∑ssw‹d
 && !strcmp(password, "cnwTICONIURW")){

57  
MOSQ_ERR_SUCCESS
;

58 }if(!
	`°rcmp
(
u£∫ame
, "readonly") || !strcmp(username, "readwrite")){

59  
MOSQ_ERR_SUCCESS
;

60 }if(!
	`°rcmp
(
u£∫ame
, "test-username@v2")){

61  
MOSQ_ERR_PLUGIN_DEFER
;

63  
MOSQ_ERR_AUTH
;

65 
	}
}

67 
	$mosquôto_auth_psk_key_gë
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
)

69  
MOSQ_ERR_AUTH
;

70 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_v5.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<mosquôto.h
>

4 
	~<mosquôto_brokî.h
>

5 
	~<mosquôto_∂ugö.h
>

7 
mosquôto_auth_a˛_check_v5
(
evít
, *
evít_d©a
, *
u£r_d©a
);

8 
mosquôto_auth_u≈wd_check_v5
(
evít
, *
evít_d©a
, *
u£r_d©a
);

10 
mosquôto_∂ugö_id_t
 *
	g∂g_id
;

13 
	$mosquôto_∂ugö_vîsi⁄
(
suµ‹ãd_vîsi⁄_cou¡
, c⁄° *
suµ‹ãd_vîsi⁄s
)

16 
	}
}

18 
	$mosquôto_∂ugö_öô
(
mosquôto_∂ugö_id_t
 *
idítifõr
, **
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

20 
∂g_id
 = 
idítifõr
;

22 
	`mosquôto_ˇŒback_ªgi°î
(
∂g_id
, 
MOSQ_EVT_ACL_CHECK
, 
mosquôto_auth_a˛_check_v5
, 
NULL
, NULL);

23 
	`mosquôto_ˇŒback_ªgi°î
(
∂g_id
, 
MOSQ_EVT_BASIC_AUTH
, 
mosquôto_auth_u≈wd_check_v5
, 
NULL
, NULL);

25  
MOSQ_ERR_SUCCESS
;

26 
	}
}

28 
	$mosquôto_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

30 
	`mosquôto_ˇŒback_uƒegi°î
(
∂g_id
, 
MOSQ_EVT_ACL_CHECK
, 
mosquôto_auth_a˛_check_v5
, 
NULL
);

31 
	`mosquôto_ˇŒback_uƒegi°î
(
∂g_id
, 
MOSQ_EVT_BASIC_AUTH
, 
mosquôto_auth_u≈wd_check_v5
, 
NULL
);

33  
MOSQ_ERR_SUCCESS
;

34 
	}
}

36 
	$mosquôto_auth_a˛_check_v5
(
evít
, *
evít_d©a
, *
u£r_d©a
)

38 
mosquôto_evt_a˛_check
 *
ed
 = 
evít_d©a
;

39 c⁄° *
u£∫ame
 = 
	`mosquôto_˛õ¡_u£∫ame
(
ed
->
˛õ¡
);

41 if(
u£∫ame
 && !
	`°rcmp
(u£∫ame, "ªad⁄ly"Ë&& 
ed
->
ac˚ss
 =
MOSQ_ACL_READ
){

42  
MOSQ_ERR_SUCCESS
;

43 }if(
u£∫ame
 && !
	`°rcmp
(u£∫ame, "ªad⁄ly"Ë&& 
ed
->
ac˚ss
 =
MOSQ_ACL_SUBSCRIBE
 &&!
	`°rchr
”d->
t›ic
, '#') && !strchr(ed->topic, '+')) {

44  
MOSQ_ERR_SUCCESS
;

45 }if(
u£∫ame
 && !
	`°rcmp
(username, "readwrite")){

46 if((!
	`°rcmp
(
ed
->
t›ic
, "ªad⁄ly"Ë&&Éd->
ac˚ss
 =
MOSQ_ACL_READ
)

47 || !
	`°rcmp
(
ed
->
t›ic
, "writeable")){

49  
MOSQ_ERR_SUCCESS
;

51  
MOSQ_ERR_ACL_DENIED
;

55  
MOSQ_ERR_ACL_DENIED
;

57 
	}
}

59 
	$mosquôto_auth_u≈wd_check_v5
(
evít
, *
evít_d©a
, *
u£r_d©a
)

61 
mosquôto_evt_basic_auth
 *
ed
 = 
evít_d©a
;

63 if(!
	`°rcmp
(
ed
->
u£∫ame
, "ã°-u£∫ame"Ë&&Éd->
∑ssw‹d
 && !strcmp(ed->password, "cnwTICONIURW")){

64  
MOSQ_ERR_SUCCESS
;

65 }if(!
	`°rcmp
(
ed
->
u£∫ame
, "readonly") || !strcmp(ed->username, "readwrite")){

66  
MOSQ_ERR_SUCCESS
;

67 }if(!
	`°rcmp
(
ed
->
u£∫ame
, "test-username@v2")){

68  
MOSQ_ERR_PLUGIN_DEFER
;

70  
MOSQ_ERR_AUTH
;

72 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_v5_handle_message.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<mosquôto.h
>

5 
	~<mosquôto_brokî.h
>

6 
	~<mosquôto_∂ugö.h
>

8 
h™dÀ_publish
(
evít
, *
evít_d©a
, *
u£r_d©a
);

10 
mosquôto_∂ugö_id_t
 *
	g∂g_id
;

13 
	$mosquôto_∂ugö_vîsi⁄
(
suµ‹ãd_vîsi⁄_cou¡
, c⁄° *
suµ‹ãd_vîsi⁄s
)

16 
	}
}

18 
	$mosquôto_∂ugö_öô
(
mosquôto_∂ugö_id_t
 *
idítifõr
, **
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

20 
∂g_id
 = 
idítifõr
;

22 
	`mosquôto_ˇŒback_ªgi°î
(
∂g_id
, 
MOSQ_EVT_MESSAGE
, 
h™dÀ_publish
, 
NULL
, NULL);

24  
MOSQ_ERR_SUCCESS
;

25 
	}
}

27 
	$mosquôto_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

29 
	`mosquôto_ˇŒback_uƒegi°î
(
∂g_id
, 
MOSQ_EVT_MESSAGE
, 
h™dÀ_publish
, 
NULL
);

31  
MOSQ_ERR_SUCCESS
;

32 
	}
}

34 
	$h™dÀ_publish
(
evít
, *
evít_d©a
, *
u£r_d©a
)

36 
mosquôto_evt_mesßge
 *
ed
 = 
evít_d©a
;

38 
	`mosquôto_‰ì
(
ed
->
t›ic
);

39 
ed
->
t›ic
 = 
	`mosquôto_°rdup
("fixed-topic");

40  
MOSQ_ERR_SUCCESS
;

41 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_v5_handle_tick.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<mosquôto.h
>

5 
	~<mosquôto_brokî.h
>

6 
	~<mosquôto_∂ugö.h
>

8 
h™dÀ_tick
(
evít
, *
evít_d©a
, *
u£r_d©a
);

10 
mosquôto_∂ugö_id_t
 *
	g∂g_id
;

13 
	$mosquôto_∂ugö_vîsi⁄
(
suµ‹ãd_vîsi⁄_cou¡
, c⁄° *
suµ‹ãd_vîsi⁄s
)

16 
	}
}

18 
	$mosquôto_∂ugö_öô
(
mosquôto_∂ugö_id_t
 *
idítifõr
, **
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

20 
∂g_id
 = 
idítifõr
;

22 
	`mosquôto_ˇŒback_ªgi°î
(
∂g_id
, 
MOSQ_EVT_TICK
, 
h™dÀ_tick
, 
NULL
, NULL);

24  
MOSQ_ERR_SUCCESS
;

25 
	}
}

27 
	$mosquôto_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

29 
	`mosquôto_ˇŒback_uƒegi°î
(
∂g_id
, 
MOSQ_EVT_TICK
, 
h™dÀ_tick
, 
NULL
);

31  
MOSQ_ERR_SUCCESS
;

32 
	}
}

34 
	$h™dÀ_tick
(
evít
, *
evít_d©a
, *
u£r_d©a
)

36 
	`mosquôto_brokî_publish_c›y
("∂ugö-tick-ã°", "t›ic/tick", 
	`°æí
("ã°-mesßge"), "ã°-mesßge", 0, 
Ál£
, 
NULL
);

37  
MOSQ_ERR_SUCCESS
;

38 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/mosquitto_plugin_v2.h

17 #i‚de‡
MOSQUITTO_PLUGIN_H


18 
	#MOSQUITTO_PLUGIN_H


	)

20 
	#MOSQ_AUTH_PLUGIN_VERSION
 2

	)

22 
	#MOSQ_ACL_NONE
 0x00

	)

23 
	#MOSQ_ACL_READ
 0x01

	)

24 
	#MOSQ_ACL_WRITE
 0x02

	)

26 
	smosquôto_auth_›t
 {

27 *
	mkey
;

28 *
	mvÆue
;

74 
mosquôto_log_¥ötf
(
Àvñ
, c⁄° *
fmt
, ...);

93 
mosquôto_auth_∂ugö_vîsi⁄
();

114 
mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_auth_›t
 *
auth_›ts
, 
auth_›t_cou¡
);

134 
mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_auth_›t
 *
auth_›ts
, 
auth_›t_cou¡
);

158 
mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_auth_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
);

182 
mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_auth_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
);

192 
mosquôto_auth_a˛_check
(*
u£r_d©a
, c⁄° *
˛õ¡id
, c⁄° *
u£∫ame
, c⁄° *
t›ic
, 
ac˚ss
);

202 
mosquôto_auth_u≈wd_check
(*
u£r_d©a
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
);

226 
mosquôto_auth_psk_key_gë
(*
u£r_d©a
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
);

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/plugin_control.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<mqâ_¥Ÿocﬁ.h
>

4 
	~<mosquôto.h
>

5 
	~<mosquôto_brokî.h
>

6 
	~<mosquôto_∂ugö.h
>

8 
mosquôto_∂ugö_id_t
 *
	g∂g_id
 = 
NULL
;

10 
	$c⁄åﬁ_ˇŒback
(
evít
, *
evít_d©a
, *
u£rd©a
)

12 
mosquôto_evt_c⁄åﬁ
 *
ed
 = 
evít_d©a
;

14 
	`mosquôto_brokî_publish_c›y
(
NULL
, 
ed
->
t›ic
,Éd->
∑ylﬂdÀn
,Éd->
∑ylﬂd
, 0, 0, NULL);

17 
	}
}

20 
	$mosquôto_∂ugö_vîsi⁄
(
suµ‹ãd_vîsi⁄_cou¡
, c⁄° *
suµ‹ãd_vîsi⁄s
)

22  
MOSQ_PLUGIN_VERSION
;

23 
	}
}

25 
	$mosquôto_∂ugö_öô
(
mosquôto_∂ugö_id_t
 *
idítifõr
, **
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

27 
i
;

28 
buf
[100];

30 
∂g_id
 = 
idítifõr
;

32 
i
=0; i<100; i++){

33 
	`¢¥ötf
(
buf
, (buf), "$CONTROL/u£r-m™agemít/v%d", 
i
);

34 
	`mosquôto_ˇŒback_ªgi°î
(
∂g_id
, 
MOSQ_EVT_CONTROL
, 
c⁄åﬁ_ˇŒback
, "$CONTROL/u£r-m™agemít/v1", 
NULL
);

36  
MOSQ_ERR_SUCCESS
;

37 
	}
}

39 
	$mosquôto_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

41 
i
;

42 
buf
[100];

44 
i
=0; i<100; i++){

45 
	`¢¥ötf
(
buf
, (buf), "$CONTROL/u£r-m™agemít/v%d", 
i
);

46 
	`mosquôto_ˇŒback_uƒegi°î
(
∂g_id
, 
MOSQ_EVT_CONTROL
, 
c⁄åﬁ_ˇŒback
, "$CONTROL/user-management/v1");

48  
MOSQ_ERR_SUCCESS
;

49 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/01-con-discon-success.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<mosquôto.h
>

6 
	grun
 = -1;

8 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

10 if(
rc
){

11 
	`exô
(1);

13 
	`mosquôto_disc⁄√˘
(
mosq
);

15 
	}
}

17 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

19 
run
 = 
rc
;

20 
	}
}

22 
	$maö
(
¨gc
, *
¨gv
[])

24 
rc
;

25 
mosquôto
 *
mosq
;

27 
p‹t
 = 
	`©oi
(
¨gv
[1]);

29 
	`mosquôto_lib_öô
();

31 
mosq
 = 
	`mosquôto_√w
("01-c⁄-disc⁄-suc˚ss", 
åue
, 
NULL
);

32 if(
mosq
 =
NULL
){

35 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

36 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

38 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

40 
run
 == -1){

41 
	`mosquôto_lo›
(
mosq
, -1, 1);

44 
	`mosquôto_de°roy
(
mosq
);

46 
	`mosquôto_lib_˛ónup
();

47  
run
;

48 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/01-keepalive-pingreq.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<mosquôto.h
>

6 
	grun
 = -1;

8 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

10 if(
rc
){

11 
	`exô
(1);

13 
	}
}

15 
	$maö
(
¨gc
, *
¨gv
[])

17 
rc
;

18 
mosquôto
 *
mosq
;

20 
p‹t
 = 
	`©oi
(
¨gv
[1]);

22 
	`mosquôto_lib_öô
();

24 
mosq
 = 
	`mosquôto_√w
("01-kì∑live-pögªq", 
åue
, 
NULL
);

25 if(
mosq
 =
NULL
){

28 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

30 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 5);

31 if(
rc
 != 0) Ñc;

33 
run
 == -1){

34 
rc
 = 
	`mosquôto_lo›
(
mosq
, -1, 1);

35 if(
rc
 != 0) ;

38 
	`mosquôto_de°roy
(
mosq
);

39 
	`mosquôto_lib_˛ónup
();

40  
run
;

41 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/01-no-clean-session.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

8 
	$maö
(
¨gc
, *
¨gv
[])

10 
rc
;

11 
mosquôto
 *
mosq
;

13 
p‹t
 = 
	`©oi
(
¨gv
[1]);

15 
	`mosquôto_lib_öô
();

17 
mosq
 = 
	`mosquôto_√w
("01-no-˛ón-£ssi⁄", 
Ál£
, 
NULL
);

18 if(
mosq
 =
NULL
){

22 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

24 
run
 == -1){

25 
	`mosquôto_lo›
(
mosq
, -1, 1);

27 
	`mosquôto_de°roy
(
mosq
);

29 
	`mosquôto_lib_˛ónup
();

30  
run
;

31 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/01-server-keepalive-pingreq.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<mosquôto.h
>

6 
	grun
 = -1;

8 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

10 if(
rc
){

11 
	`exô
(1);

13 
	}
}

15 
	$maö
(
¨gc
, *
¨gv
[])

17 
rc
;

18 
mosquôto
 *
mosq
;

20 
p‹t
 = 
	`©oi
(
¨gv
[1]);

22 
	`mosquôto_lib_öô
();

24 
mosq
 = 
	`mosquôto_√w
("01-£rvî-kì∑live-pögªq", 
åue
, 
NULL
);

25 if(
mosq
 =
NULL
){

28 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
MQTT_PROTOCOL_V5
);

29 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

31 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

33 
run
 == -1){

34 
	`mosquôto_lo›
(
mosq
, -1, 1);

37 
	`mosquôto_de°roy
(
mosq
);

38 
	`mosquôto_lib_˛ónup
();

39  
run
;

40 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/01-unpwd-set.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

8 
	$maö
(
¨gc
, *
¨gv
[])

10 
rc
;

11 
mosquôto
 *
mosq
;

13 
p‹t
 = 
	`©oi
(
¨gv
[1]);

15 
	`mosquôto_lib_öô
();

17 
mosq
 = 
	`mosquôto_√w
("01-u≈wd-£t", 
åue
, 
NULL
);

18 if(
mosq
 =
NULL
){

21 
	`mosquôto_u£∫ame_pw_£t
(
mosq
, "uname", ";'[08gn=#");

23 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

25 
run
 == -1){

26 
	`mosquôto_lo›
(
mosq
, -1, 1);

28 
	`mosquôto_de°roy
(
mosq
);

30 
	`mosquôto_lib_˛ónup
();

31  
run
;

32 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/01-will-set.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

8 
	$maö
(
¨gc
, *
¨gv
[])

10 
rc
;

11 
mosquôto
 *
mosq
;

13 
p‹t
 = 
	`©oi
(
¨gv
[1]);

15 
	`mosquôto_lib_öô
();

17 
mosq
 = 
	`mosquôto_√w
("01-wûl-£t", 
åue
, 
NULL
);

18 if(
mosq
 =
NULL
){

21 
	`mosquôto_wûl_£t
(
mosq
, "t›ic/⁄/u√x≥˘ed/disc⁄√˘", 
	`°æí
("wû»mesßge"), "wû»mesßge", 1, 
åue
);

23 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

25 
run
 == -1){

26 
	`mosquôto_lo›
(
mosq
, -1, 1);

28 
	`mosquôto_de°roy
(
mosq
);

30 
	`mosquôto_lib_˛ónup
();

31  
run
;

32 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/01-will-unpwd-set.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

8 
	$maö
(
¨gc
, *
¨gv
[])

10 
rc
;

11 
mosquôto
 *
mosq
;

13 
p‹t
 = 
	`©oi
(
¨gv
[1]);

15 
	`mosquôto_lib_öô
();

17 
mosq
 = 
	`mosquôto_√w
("01-wûl-u≈wd-£t", 
åue
, 
NULL
);

18 if(
mosq
 =
NULL
){

21 
	`mosquôto_u£∫ame_pw_£t
(
mosq
, "oibvvwqw", "#'^2hg9a&nm38*us");

22 
	`mosquôto_wûl_£t
(
mosq
, "wûl-t›ic", 
	`°æí
("wû»mesßge"), "wû»mesßge", 2, 
Ál£
);

24 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

26 
run
 == -1){

27 
	`mosquôto_lo›
(
mosq
, -1, 1);

29 
	`mosquôto_de°roy
(
mosq
);

31 
	`mosquôto_lib_˛ónup
();

32  
run
;

33 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/02-subscribe-qos0.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<mosquôto.h
>

6 
	grun
 = -1;

8 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

10 if(
rc
){

11 
	`exô
(1);

13 
	`mosquôto_subs¸ibe
(
mosq
, 
NULL
, "qos0/test", 0);

15 
	}
}

17 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

19 
run
 = 
rc
;

20 
	}
}

22 
	$⁄_subs¸ibe
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

24 
	`mosquôto_disc⁄√˘
(
mosq
);

25 
	}
}

27 
	$maö
(
¨gc
, *
¨gv
[])

29 
rc
;

30 
mosquôto
 *
mosq
;

32 
p‹t
 = 
	`©oi
(
¨gv
[1]);

34 
	`mosquôto_lib_öô
();

36 
mosq
 = 
	`mosquôto_√w
("subs¸ibe-qos0-ã°", 
åue
, 
NULL
);

37 if(
mosq
 =
NULL
){

40 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

41 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

42 
	`mosquôto_subs¸ibe_ˇŒback_£t
(
mosq
, 
⁄_subs¸ibe
);

44 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

46 
run
 == -1){

47 
	`mosquôto_lo›
(
mosq
, -1, 1);

49 
	`mosquôto_de°roy
(
mosq
);

51 
	`mosquôto_lib_˛ónup
();

52  
run
;

53 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/02-subscribe-qos1-async1.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<time.h
>

5 
	~<mosquôto.h
>

9 
	grun
 = -1;

10 
boﬁ
 
	gshould_run
 = 
åue
;

12 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

14 if(
rc
){

15 
	`exô
(1);

17 
	`mosquôto_subs¸ibe
(
mosq
, 
NULL
, "qos1/test", 1);

19 
	}
}

21 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

23 
run
 = 
rc
;

24 
	}
}

26 
	$⁄_subs¸ibe
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

29 
should_run
 = 
Ál£
;

30 
	}
}

32 
	$maö
(
¨gc
, *
¨gv
[])

34 
rc
;

35 
mosquôto
 *
mosq
;

37 
p‹t
 = 
	`©oi
(
¨gv
[1]);

39 
	`mosquôto_lib_öô
();

41 
mosq
 = 
	`mosquôto_√w
("subs¸ibe-qos1-ã°", 
åue
, 
NULL
);

42 if(
mosq
 =
NULL
){

45 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

46 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

47 
	`mosquôto_subs¸ibe_ˇŒback_£t
(
mosq
, 
⁄_subs¸ibe
);

49 
rc
 = 
	`mosquôto_lo›_°¨t
(
mosq
);

50 if(
rc
){

51 
	`¥ötf
("lo›_°¨àÁûed: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

52  
rc
;

55 
rc
 = 
	`mosquôto_c⁄√˘_async
(
mosq
, "loˇlho°", 
p‹t
, 60);

56 if(
rc
){

57 
	`¥ötf
("c⁄√˘_asyn¯Áûed: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

58  
rc
;

62 
time•ec
 
tv
 = { 0, 50e6 };

63 
should_run
){

64 
	`«no¶ìp
(&
tv
, 
NULL
);

67 
	`mosquôto_disc⁄√˘
(
mosq
);

68 
	`mosquôto_lo›_°›
(
mosq
, 
Ál£
);

69 
	`mosquôto_de°roy
(
mosq
);

71 
	`mosquôto_lib_˛ónup
();

72  
run
;

73 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/02-subscribe-qos1-async2.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<time.h
>

5 
	~<mosquôto.h
>

9 
	grun
 = -1;

10 
boﬁ
 
	gshould_run
 = 
åue
;

12 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

14 if(
rc
){

15 
	`exô
(1);

17 
	`mosquôto_subs¸ibe
(
mosq
, 
NULL
, "qos1/test", 1);

19 
	}
}

21 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

23 
run
 = 
rc
;

24 
	}
}

26 
	$⁄_subs¸ibe
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

29 
should_run
 = 
Ál£
;

30 
	}
}

32 
	$maö
(
¨gc
, *
¨gv
[])

34 
rc
;

35 
mosquôto
 *
mosq
;

37 
p‹t
 = 
	`©oi
(
¨gv
[1]);

39 
	`mosquôto_lib_öô
();

41 
mosq
 = 
	`mosquôto_√w
("subs¸ibe-qos1-ã°", 
åue
, 
NULL
);

42 if(
mosq
 =
NULL
){

45 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

46 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

47 
	`mosquôto_subs¸ibe_ˇŒback_£t
(
mosq
, 
⁄_subs¸ibe
);

49 
rc
 = 
	`mosquôto_c⁄√˘_async
(
mosq
, "loˇlho°", 
p‹t
, 60);

50 if(
rc
){

51 
	`¥ötf
("c⁄√˘_asyn¯Áûed: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

54 
rc
 = 
	`mosquôto_lo›_°¨t
(
mosq
);

55 if(
rc
){

56 
	`¥ötf
("lo›_°¨àÁûed: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

60 
time•ec
 
tv
 = { 0, 50e6 };

61 
should_run
){

62 
	`«no¶ìp
(&
tv
, 
NULL
);

65 
	`mosquôto_disc⁄√˘
(
mosq
);

66 
	`mosquôto_lo›_°›
(
mosq
, 
Ál£
);

67 
	`mosquôto_de°roy
(
mosq
);

69 
	`mosquôto_lib_˛ónup
();

70  
run
;

71 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/02-subscribe-qos1.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<mosquôto.h
>

6 
	grun
 = -1;

8 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

10 if(
rc
){

11 
	`exô
(1);

13 
	`mosquôto_subs¸ibe
(
mosq
, 
NULL
, "qos1/test", 1);

15 
	}
}

17 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

19 
run
 = 
rc
;

20 
	}
}

22 
	$⁄_subs¸ibe
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

24 
	`mosquôto_disc⁄√˘
(
mosq
);

25 
	}
}

27 
	$maö
(
¨gc
, *
¨gv
[])

29 
rc
;

30 
mosquôto
 *
mosq
;

32 
p‹t
 = 
	`©oi
(
¨gv
[1]);

34 
	`mosquôto_lib_öô
();

36 
mosq
 = 
	`mosquôto_√w
("subs¸ibe-qos1-ã°", 
åue
, 
NULL
);

37 if(
mosq
 =
NULL
){

40 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

41 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

42 
	`mosquôto_subs¸ibe_ˇŒback_£t
(
mosq
, 
⁄_subs¸ibe
);

44 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

46 
run
 == -1){

47 
	`mosquôto_lo›
(
mosq
, -1, 1);

49 
	`mosquôto_de°roy
(
mosq
);

51 
	`mosquôto_lib_˛ónup
();

52  
run
;

53 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/02-subscribe-qos2.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<mosquôto.h
>

6 
	grun
 = -1;

8 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

10 if(
rc
){

11 
	`exô
(1);

13 
	`mosquôto_subs¸ibe
(
mosq
, 
NULL
, "qos2/test", 2);

15 
	}
}

17 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

19 
run
 = 
rc
;

20 
	}
}

22 
	$⁄_subs¸ibe
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

24 
	`mosquôto_disc⁄√˘
(
mosq
);

25 
	}
}

27 
	$maö
(
¨gc
, *
¨gv
[])

29 
rc
;

30 
mosquôto
 *
mosq
;

32 
p‹t
 = 
	`©oi
(
¨gv
[1]);

34 
	`mosquôto_lib_öô
();

36 
mosq
 = 
	`mosquôto_√w
("subs¸ibe-qos2-ã°", 
åue
, 
NULL
);

37 if(
mosq
 =
NULL
){

40 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

41 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

42 
	`mosquôto_subs¸ibe_ˇŒback_£t
(
mosq
, 
⁄_subs¸ibe
);

44 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

46 
run
 == -1){

47 
	`mosquôto_lo›
(
mosq
, -1, 1);

50 
	`mosquôto_de°roy
(
mosq
);

51 
	`mosquôto_lib_˛ónup
();

52  
run
;

53 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/02-unsubscribe-multiple-v5.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<mosquôto.h
>

6 
	grun
 = -1;

8 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

10 if(
rc
){

11 
	`exô
(1);

13 
	`mosquôto_subs¸ibe
(
mosq
, 
NULL
, "unsubscribe/test", 2);

15 
	}
}

17 
	$⁄_subs¸ibe
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
sub_cou¡
, c⁄° *
subs
)

19 *
unsubs
[] = {"unsubscribe/test", "no-sub"};

21 
	`mosquôto_unsubs¸ibe_mu…ùÀ
(
mosq
, 
NULL
, 2, 
unsubs
, NULL);

22 
	}
}

24 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

26 
run
 = 
rc
;

27 
	}
}

29 
	$⁄_unsubs¸ibe
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

31 
	`mosquôto_disc⁄√˘
(
mosq
);

32 
	}
}

35 
	$maö
(
¨gc
, *
¨gv
[])

37 
rc
;

38 
mosquôto
 *
mosq
;

40 
p‹t
 = 
	`©oi
(
¨gv
[1]);

42 
	`mosquôto_lib_öô
();

44 
mosq
 = 
	`mosquôto_√w
("unsubs¸ibe-ã°", 
åue
, 
NULL
);

45 if(
mosq
 =
NULL
){

48 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
MQTT_PROTOCOL_V5
);

49 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

50 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

51 
	`mosquôto_subs¸ibe_ˇŒback_£t
(
mosq
, 
⁄_subs¸ibe
);

52 
	`mosquôto_unsubs¸ibe_ˇŒback_£t
(
mosq
, 
⁄_unsubs¸ibe
);

54 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

56 
run
 == -1){

57 
	`mosquôto_lo›
(
mosq
, -1, 1);

59 
	`mosquôto_de°roy
(
mosq
);

61 
	`mosquôto_lib_˛ónup
();

62  
run
;

63 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/02-unsubscribe-v5.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<mosquôto.h
>

6 
	grun
 = -1;

8 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

10 if(
rc
){

11 
	`exô
(1);

13 
	`mosquôto_unsubs¸ibe
(
mosq
, 
NULL
, "unsubscribe/test");

15 
	}
}

17 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

19 
run
 = 
rc
;

20 
	}
}

22 
	$⁄_unsubs¸ibe
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

24 
	`mosquôto_disc⁄√˘
(
mosq
);

25 
	}
}

27 
	$maö
(
¨gc
, *
¨gv
[])

29 
rc
;

30 
mosquôto
 *
mosq
;

32 
p‹t
 = 
	`©oi
(
¨gv
[1]);

34 
	`mosquôto_lib_öô
();

36 
mosq
 = 
	`mosquôto_√w
("unsubs¸ibe-ã°", 
åue
, 
NULL
);

37 if(
mosq
 =
NULL
){

40 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
MQTT_PROTOCOL_V5
);

41 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

42 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

43 
	`mosquôto_unsubs¸ibe_ˇŒback_£t
(
mosq
, 
⁄_unsubs¸ibe
);

45 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

47 
run
 == -1){

48 
	`mosquôto_lo›
(
mosq
, -1, 1);

50 
	`mosquôto_de°roy
(
mosq
);

52 
	`mosquôto_lib_˛ónup
();

53  
run
;

54 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/02-unsubscribe.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<mosquôto.h
>

6 
	grun
 = -1;

8 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

10 if(
rc
){

11 
	`exô
(1);

13 
	`mosquôto_unsubs¸ibe
(
mosq
, 
NULL
, "unsubscribe/test");

15 
	}
}

17 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

19 
run
 = 
rc
;

20 
	}
}

22 
	$⁄_unsubs¸ibe
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

24 
	`mosquôto_disc⁄√˘
(
mosq
);

25 
	}
}

27 
	$maö
(
¨gc
, *
¨gv
[])

29 
rc
;

30 
mosquôto
 *
mosq
;

32 
p‹t
 = 
	`©oi
(
¨gv
[1]);

34 
	`mosquôto_lib_öô
();

36 
mosq
 = 
	`mosquôto_√w
("unsubs¸ibe-ã°", 
åue
, 
NULL
);

37 if(
mosq
 =
NULL
){

40 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

41 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

42 
	`mosquôto_unsubs¸ibe_ˇŒback_£t
(
mosq
, 
⁄_unsubs¸ibe
);

44 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

46 
run
 == -1){

47 
	`mosquôto_lo›
(
mosq
, -1, 1);

50 
	`mosquôto_de°roy
(
mosq
);

51 
	`mosquôto_lib_˛ónup
();

52  
run
;

53 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-b2c-qos1-unexpected-puback.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

11 if(
rc
){

12 
	`¥ötf
("C⁄√˘Éº‹: %d\n", 
rc
);

13 
	`exô
(1);

15 
	}
}

17 
	$maö
(
¨gc
, *
¨gv
[])

19 
rc
;

20 
mosquôto
 *
mosq
;

22 
p‹t
 = 
	`©oi
(
¨gv
[1]);

24 
	`mosquôto_lib_öô
();

26 
mosq
 = 
	`mosquôto_√w
("publish-qos1-ã°", 
åue
, &
run
);

27 if(
mosq
 =
NULL
){

30 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

32 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 5);

34 
run
 == -1){

35 
rc
 = 
	`mosquôto_lo›
(
mosq
, 300, 1);

36 if(
rc
){

37 
	`exô
(0);

41 
	`mosquôto_lib_˛ónup
();

43 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-b2c-qos1.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

9 if(
rc
){

10 
	`exô
(1);

12 
	}
}

14 
	$⁄_mesßge
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
msg
)

16 if(
msg
->
mid
 != 123){

17 
	`¥ötf
("InvÆid mid (%d)\n", 
msg
->
mid
);

18 
	`exô
(1);

20 if(
msg
->
qos
 != 1){

21 
	`¥ötf
("InvÆid qo†(%d)\n", 
msg
->
qos
);

22 
	`exô
(1);

24 if(
	`°rcmp
(
msg
->
t›ic
, "pub/qos1/receive")){

25 
	`¥ötf
("InvÆidÅ›i¯(%s)\n", 
msg
->
t›ic
);

26 
	`exô
(1);

28 if(
	`°rcmp
(
msg
->
∑ylﬂd
, "message")){

29 
	`¥ötf
("InvÆidÖaylﬂd (%s)\n", (*)
msg
->
∑ylﬂd
);

30 
	`exô
(1);

32 if(
msg
->
∑ylﬂdÀn
 != 7){

33 
	`¥ötf
("InvÆidÖaylﬂdÀ¿(%d)\n", 
msg
->
∑ylﬂdÀn
);

34 
	`exô
(1);

36 if(
msg
->
ªèö
 !
Ál£
){

37 
	`¥ötf
("InvÆidÑëaö (%d)\n", 
msg
->
ªèö
);

38 
	`exô
(1);

41 
	`exô
(0);

42 
	}
}

44 
	$maö
(
¨gc
, *
¨gv
[])

46 
rc
;

47 
mosquôto
 *
mosq
;

49 
p‹t
 = 
	`©oi
(
¨gv
[1]);

51 
	`mosquôto_lib_öô
();

53 
mosq
 = 
	`mosquôto_√w
("publish-qos1-ã°", 
åue
, 
NULL
);

54 if(
mosq
 =
NULL
){

57 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

58 
	`mosquôto_mesßge_ˇŒback_£t
(
mosq
, 
⁄_mesßge
);

59 
	`mosquôto_mesßge_ªåy_£t
(
mosq
, 3);

61 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

64 
	`mosquôto_lo›
(
mosq
, 300, 1);

66 
	`mosquôto_de°roy
(
mosq
);

68 
	`mosquôto_lib_˛ónup
();

70 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-b2c-qos2-len.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

11 if(
rc
){

12 
	`exô
(1);

14 
	}
}

16 
	$⁄_mesßge
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
msg
)

18 if(
msg
->
mid
 != 56){

19 
	`¥ötf
("InvÆid mid (%d)\n", 
msg
->
mid
);

20 
	`exô
(1);

22 if(
msg
->
qos
 != 2){

23 
	`¥ötf
("InvÆid qo†(%d)\n", 
msg
->
qos
);

24 
	`exô
(1);

26 if(
	`°rcmp
(
msg
->
t›ic
, "len/qos2/test")){

27 
	`¥ötf
("InvÆidÅ›i¯(%s)\n", 
msg
->
t›ic
);

28 
	`exô
(1);

30 if(
	`°rcmp
(
msg
->
∑ylﬂd
, "message")){

31 
	`¥ötf
("InvÆidÖaylﬂd (%s)\n", (*)
msg
->
∑ylﬂd
);

32 
	`exô
(1);

34 if(
msg
->
∑ylﬂdÀn
 != 7){

35 
	`¥ötf
("InvÆidÖaylﬂdÀ¿(%d)\n", 
msg
->
∑ylﬂdÀn
);

36 
	`exô
(1);

38 if(
msg
->
ªèö
 !
Ál£
){

39 
	`¥ötf
("InvÆidÑëaö (%d)\n", 
msg
->
ªèö
);

40 
	`exô
(1);

43 
	`mosquôto_disc⁄√˘
(
mosq
);

44 
	}
}

46 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

48 
run
 = 0;

49 
	}
}

51 
	$maö
(
¨gc
, *
¨gv
[])

53 
rc
;

54 
mosquôto
 *
mosq
;

56 
p‹t
 = 
	`©oi
(
¨gv
[1]);

58 
	`mosquôto_lib_öô
();

60 
mosq
 = 
	`mosquôto_√w
("publish-qos2-ã°", 
åue
, &
run
);

61 if(
mosq
 =
NULL
){

64 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
MQTT_PROTOCOL_V5
);

65 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

66 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

67 
	`mosquôto_mesßge_ˇŒback_£t
(
mosq
, 
⁄_mesßge
);

69 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

71 
run
 == -1){

72 
	`mosquôto_lo›
(
mosq
, 100, 1);

75 
	`mosquôto_de°roy
(
mosq
);

76 
	`mosquôto_lib_˛ónup
();

77  
run
;

78 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-b2c-qos2-unexpected-pubcomp.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

11 if(
rc
){

12 
	`¥ötf
("C⁄√˘Éº‹: %d\n", 
rc
);

13 
	`exô
(1);

15 
	}
}

17 
	$maö
(
¨gc
, *
¨gv
[])

19 
rc
;

20 
mosquôto
 *
mosq
;

22 
p‹t
 = 
	`©oi
(
¨gv
[1]);

24 
	`mosquôto_lib_öô
();

26 
mosq
 = 
	`mosquôto_√w
("publish-qos2-ã°", 
åue
, &
run
);

27 if(
mosq
 =
NULL
){

30 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

32 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 5);

34 
run
 == -1){

35 
rc
 = 
	`mosquôto_lo›
(
mosq
, 300, 1);

36 if(
rc
){

37 
	`exô
(0);

41 
	`mosquôto_lib_˛ónup
();

43 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-b2c-qos2-unexpected-pubrel.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

11 if(
rc
){

12 
	`exô
(1);

14 
	}
}

16 
	$⁄_mesßge
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
msg
)

18 if(!
	`°rcmp
(
msg
->
t›ic
, "quit")){

19 
run
 = 0;

22 if(
msg
->
mid
 != 13423){

23 
	`¥ötf
("InvÆid mid (%d)\n", 
msg
->
mid
);

24 
	`exô
(1);

26 if(
msg
->
qos
 != 2){

27 
	`¥ötf
("InvÆid qo†(%d)\n", 
msg
->
qos
);

28 
	`exô
(1);

30 if(
	`°rcmp
(
msg
->
t›ic
, "pub/qos2/receive")){

31 
	`¥ötf
("InvÆidÅ›i¯(%s)\n", 
msg
->
t›ic
);

32 
	`exô
(1);

34 if(
	`°rcmp
(
msg
->
∑ylﬂd
, "message")){

35 
	`¥ötf
("InvÆidÖaylﬂd (%s)\n", (*)
msg
->
∑ylﬂd
);

36 
	`exô
(1);

38 if(
msg
->
∑ylﬂdÀn
 != 7){

39 
	`¥ötf
("InvÆidÖaylﬂdÀ¿(%d)\n", 
msg
->
∑ylﬂdÀn
);

40 
	`exô
(1);

42 if(
msg
->
ªèö
 !
Ál£
){

43 
	`¥ötf
("InvÆidÑëaö (%d)\n", 
msg
->
ªèö
);

44 
	`exô
(1);

47 
	}
}

49 
	$maö
(
¨gc
, *
¨gv
[])

51 
rc
;

52 
mosquôto
 *
mosq
;

54 
p‹t
 = 
	`©oi
(
¨gv
[1]);

56 
	`mosquôto_lib_öô
();

58 
mosq
 = 
	`mosquôto_√w
("publish-qos2-ã°", 
åue
, &
run
);

59 if(
mosq
 =
NULL
){

62 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

63 
	`mosquôto_mesßge_ˇŒback_£t
(
mosq
, 
⁄_mesßge
);

64 
	`mosquôto_mesßge_ªåy_£t
(
mosq
, 5);

66 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

68 
run
 == -1){

69 
rc
 = 
	`mosquôto_lo›
(
mosq
, 300, 1);

70 if(
rc
){

71 
	`¥ötf
("%d:%s\n", 
rc
, 
	`mosquôto_°ªº‹
(rc));

72 
	`exô
(1);

76 
	`mosquôto_de°roy
(
mosq
);

77 
	`mosquôto_lib_˛ónup
();

78  
run
;

79 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-b2c-qos2.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

11 if(
rc
){

12 
	`exô
(1);

14 
	}
}

16 
	$⁄_mesßge
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
msg
)

18 if(
msg
->
mid
 != 13423){

19 
	`¥ötf
("InvÆid mid (%d)\n", 
msg
->
mid
);

20 
	`exô
(1);

22 if(
msg
->
qos
 != 2){

23 
	`¥ötf
("InvÆid qo†(%d)\n", 
msg
->
qos
);

24 
	`exô
(1);

26 if(
	`°rcmp
(
msg
->
t›ic
, "pub/qos2/receive")){

27 
	`¥ötf
("InvÆidÅ›i¯(%s)\n", 
msg
->
t›ic
);

28 
	`exô
(1);

30 if(
	`°rcmp
(
msg
->
∑ylﬂd
, "message")){

31 
	`¥ötf
("InvÆidÖaylﬂd (%s)\n", (*)
msg
->
∑ylﬂd
);

32 
	`exô
(1);

34 if(
msg
->
∑ylﬂdÀn
 != 7){

35 
	`¥ötf
("InvÆidÖaylﬂdÀ¿(%d)\n", 
msg
->
∑ylﬂdÀn
);

36 
	`exô
(1);

38 if(
msg
->
ªèö
 !
Ál£
){

39 
	`¥ötf
("InvÆidÑëaö (%d)\n", 
msg
->
ªèö
);

40 
	`exô
(1);

43 
run
 = 0;

44 
	}
}

46 
	$maö
(
¨gc
, *
¨gv
[])

48 
rc
;

49 
mosquôto
 *
mosq
;

51 
p‹t
 = 
	`©oi
(
¨gv
[1]);

53 
	`mosquôto_lib_öô
();

55 
mosq
 = 
	`mosquôto_√w
("publish-qos2-ã°", 
åue
, &
run
);

56 if(
mosq
 =
NULL
){

59 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

60 
	`mosquôto_mesßge_ˇŒback_£t
(
mosq
, 
⁄_mesßge
);

61 
	`mosquôto_mesßge_ªåy_£t
(
mosq
, 5);

63 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

65 
run
 == -1){

66 
	`mosquôto_lo›
(
mosq
, 300, 1);

69 
	`mosquôto_de°roy
(
mosq
);

70 
	`mosquôto_lib_˛ónup
();

71  
run
;

72 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos1-disconnect.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

8 
	gfú°_c⁄√˘i⁄
 = 1;

10 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

12 if(
rc
){

13 
	`exô
(1);

15 if(
fú°_c⁄√˘i⁄
 == 1){

16 
	`mosquôto_publish
(
mosq
, 
NULL
, "pub/qos1/ã°", 
	`°æí
("mesßge"), "mesßge", 1, 
Ál£
);

17 
fú°_c⁄√˘i⁄
 = 0;

20 
	}
}

22 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

24 
	`mosquôto_disc⁄√˘
(
mosq
);

25 
	}
}

27 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

29 if(
rc
){

30 
	`mosquôto_ªc⁄√˘
(
mosq
);

32 
run
 = 0;

34 
	}
}

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
rc
;

39 
mosquôto
 *
mosq
;

41 
p‹t
 = 
	`©oi
(
¨gv
[1]);

43 
	`mosquôto_lib_öô
();

45 
mosq
 = 
	`mosquôto_√w
("publish-qos1-ã°", 
åue
, 
NULL
);

46 if(
mosq
 =
NULL
){

49 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

50 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

51 
	`mosquôto_publish_ˇŒback_£t
(
mosq
, 
⁄_publish
);

52 
	`mosquôto_mesßge_ªåy_£t
(
mosq
, 3);

54 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

56 
run
 == -1){

57 
	`mosquôto_lo›
(
mosq
, 300, 1);

59 
	`mosquôto_de°roy
(
mosq
);

61 
	`mosquôto_lib_˛ónup
();

62  
run
;

63 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos1-len.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

11 if(
rc
){

12 
	`exô
(1);

14 
	`mosquôto_publish
(
mosq
, 
NULL
, "pub/qos1/ã°", 
	`°æí
("mesßge"), "mesßge", 1, 
Ál£
);

16 
	}
}

18 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

20 
	`mosquôto_disc⁄√˘
(
mosq
);

21 
	}
}

23 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

25 
run
 = 0;

26 
	}
}

28 
	$maö
(
¨gc
, *
¨gv
[])

30 
rc
;

31 
mosquôto
 *
mosq
;

33 
p‹t
 = 
	`©oi
(
¨gv
[1]);

35 
	`mosquôto_lib_öô
();

37 
mosq
 = 
	`mosquôto_√w
("publish-qos1-ã°", 
åue
, 
NULL
);

38 if(
mosq
 =
NULL
){

41 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
MQTT_PROTOCOL_V5
);

42 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

43 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

44 
	`mosquôto_publish_ˇŒback_£t
(
mosq
, 
⁄_publish
);

45 
	`mosquôto_mesßge_ªåy_£t
(
mosq
, 3);

47 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

49 
run
 == -1){

50 
	`mosquôto_lo›
(
mosq
, 300, 1);

53 
	`mosquôto_de°roy
(
mosq
);

54 
	`mosquôto_lib_˛ónup
();

55  
run
;

56 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos1-receive-maximum.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
, 
Êags
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

11 
i
;

13 if(
rc
){

14 
	`exô
(1);

17 
i
=0; i<6; i++){

18 
	`mosquôto_publish_v5
(
mosq
, 
NULL
, "t›ic", 5, "12345", 1, 
Ál£
, NULL);

20 
	}
}

22 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

24 if(
mid
 == 6){

25 
	`mosquôto_disc⁄√˘
(
mosq
);

26 
run
 = 0;

28 
	}
}

30 
	$maö
(
¨gc
, *
¨gv
[])

32 
rc
;

33 
mosquôto
 *
mosq
;

34 
mosquôto_¥›îty
 *
¥›s
 = 
NULL
;

36 
p‹t
 = 
	`©oi
(
¨gv
[1]);

38 
	`mosquôto_lib_öô
();

40 
mosq
 = 
	`mosquôto_√w
("publish-qos1-ã°", 
åue
, &
run
);

41 if(
mosq
 =
NULL
){

44 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
MQTT_PROTOCOL_V5
);

46 
	`mosquôto_c⁄√˘_v5_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

47 
	`mosquôto_publish_v5_ˇŒback_£t
(
mosq
, 
⁄_publish
);

49 
rc
 = 
	`mosquôto_c⁄√˘_böd_v5
(
mosq
, "loˇlho°", 
p‹t
, 60, 
NULL
, NULL);

51 
run
 == -1){

52 
	`mosquôto_lo›
(
mosq
, 300, 1);

55 
	`mosquôto_de°roy
(
mosq
);

56 
	`mosquôto_lib_˛ónup
();

57  
run
;

58 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos2-disconnect.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

8 
	gfú°_c⁄√˘i⁄
 = 1;

10 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

12 if(
rc
){

13 
	`exô
(1);

15 if(
fú°_c⁄√˘i⁄
 == 1){

16 
	`mosquôto_publish
(
mosq
, 
NULL
, "pub/qos2/ã°", 
	`°æí
("mesßge"), "mesßge", 2, 
Ál£
);

17 
fú°_c⁄√˘i⁄
 = 0;

20 
	}
}

22 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

24 
	`mosquôto_disc⁄√˘
(
mosq
);

25 
	}
}

27 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

29 if(
rc
){

30 
	`mosquôto_ªc⁄√˘
(
mosq
);

32 
run
 = 0;

34 
	}
}

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
rc
;

39 
mosquôto
 *
mosq
;

41 
p‹t
 = 
	`©oi
(
¨gv
[1]);

43 
	`mosquôto_lib_öô
();

45 
mosq
 = 
	`mosquôto_√w
("publish-qos2-ã°", 
åue
, 
NULL
);

46 if(
mosq
 =
NULL
){

49 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

50 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

51 
	`mosquôto_publish_ˇŒback_£t
(
mosq
, 
⁄_publish
);

52 
	`mosquôto_mesßge_ªåy_£t
(
mosq
, 3);

54 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

56 
run
 == -1){

57 
	`mosquôto_lo›
(
mosq
, 300, 1);

59 
	`mosquôto_de°roy
(
mosq
);

61 
	`mosquôto_lib_˛ónup
();

62  
run
;

63 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos2-len.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

11 if(
rc
){

12 
	`exô
(1);

14 
	`mosquôto_publish
(
mosq
, 
NULL
, "pub/qos2/ã°", 
	`°æí
("mesßge"), "mesßge", 2, 
Ál£
);

16 
	}
}

18 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

20 
	`mosquôto_disc⁄√˘
(
mosq
);

21 
	}
}

23 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

25 
run
 = 0;

26 
	}
}

28 
	$maö
(
¨gc
, *
¨gv
[])

30 
rc
;

31 
mosquôto
 *
mosq
;

33 
p‹t
 = 
	`©oi
(
¨gv
[1]);

35 
	`mosquôto_lib_öô
();

37 
mosq
 = 
	`mosquôto_√w
("publish-qos2-ã°", 
åue
, 
NULL
);

38 if(
mosq
 =
NULL
){

41 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
MQTT_PROTOCOL_V5
);

42 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

43 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

44 
	`mosquôto_publish_v5_ˇŒback_£t
(
mosq
, 
⁄_publish
);

45 
	`mosquôto_mesßge_ªåy_£t
(
mosq
, 3);

47 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

49 
run
 == -1){

50 
	`mosquôto_lo›
(
mosq
, 300, 1);

53 
	`mosquôto_de°roy
(
mosq
);

54 
	`mosquôto_lib_˛ónup
();

55  
run
;

56 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos2-maximum-qos-0.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

11 if(
rc
){

12 
	`exô
(1);

14 
rc
 = 
	`mosquôto_publish
(
mosq
, 
NULL
, "maximum/qos/qos2", 
	`°æí
("mesßge"), "mesßge", 2, 
Ál£
);

15 if(
rc
 !
MOSQ_ERR_QOS_NOT_SUPPORTED
Ë
run
 = 1;

16 
rc
 = 
	`mosquôto_publish
(
mosq
, 
NULL
, "maximum/qos/qos1", 
	`°æí
("mesßge"), "mesßge", 1, 
Ál£
);

17 if(
rc
 !
MOSQ_ERR_QOS_NOT_SUPPORTED
Ë
run
 = 1;

18 
rc
 = 
	`mosquôto_publish
(
mosq
, 
NULL
, "maximum/qos/qos0", 
	`°æí
("mesßge"), "mesßge", 0, 
Ál£
);

19 if(
rc
 !
MOSQ_ERR_SUCCESS
Ë
run
 = 1;

21 
	}
}

23 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

25 if(
mid
 == 1){

26 
	`mosquôto_disc⁄√˘
(
mosq
);

28 
	}
}

30 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

32 
run
 = 0;

33 
	}
}

35 
	$maö
(
¨gc
, *
¨gv
[])

37 
rc
;

38 
mosquôto
 *
mosq
;

40 
p‹t
 = 
	`©oi
(
¨gv
[1]);

42 
	`mosquôto_lib_öô
();

44 
mosq
 = 
	`mosquôto_√w
("publish-qos2-ã°", 
åue
, 
NULL
);

45 if(
mosq
 =
NULL
){

48 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
MQTT_PROTOCOL_V5
);

49 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

50 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

51 
	`mosquôto_publish_ˇŒback_£t
(
mosq
, 
⁄_publish
);

53 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

55 
run
 == -1){

56 
	`mosquôto_lo›
(
mosq
, 50, 1);

59 
	`mosquôto_de°roy
(
mosq
);

60 
	`mosquôto_lib_˛ónup
();

61  
run
;

62 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos2-maximum-qos-1.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

11 if(
rc
){

12 
	`exô
(1);

14 
rc
 = 
	`mosquôto_publish
(
mosq
, 
NULL
, "maximum/qos/qos2", 
	`°æí
("mesßge"), "mesßge", 2, 
Ál£
);

15 if(
rc
 !
MOSQ_ERR_QOS_NOT_SUPPORTED
Ë
run
 = 1;

16 
rc
 = 
	`mosquôto_publish
(
mosq
, 
NULL
, "maximum/qos/qos1", 
	`°æí
("mesßge"), "mesßge", 1, 
Ál£
);

17 if(
rc
 !
MOSQ_ERR_SUCCESS
Ë
run
 = 1;

18 
rc
 = 
	`mosquôto_publish
(
mosq
, 
NULL
, "maximum/qos/qos0", 
	`°æí
("mesßge"), "mesßge", 0, 
Ál£
);

19 if(
rc
 !
MOSQ_ERR_SUCCESS
Ë
run
 = 1;

21 
	}
}

23 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

25 if(
mid
 == 2){

26 
	`mosquôto_disc⁄√˘
(
mosq
);

28 
	}
}

30 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

32 
run
 = 0;

33 
	}
}

35 
	$maö
(
¨gc
, *
¨gv
[])

37 
rc
;

38 
mosquôto
 *
mosq
;

40 
p‹t
 = 
	`©oi
(
¨gv
[1]);

42 
	`mosquôto_lib_öô
();

44 
mosq
 = 
	`mosquôto_√w
("publish-qos2-ã°", 
åue
, 
NULL
);

45 if(
mosq
 =
NULL
){

48 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
MQTT_PROTOCOL_V5
);

49 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

50 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

51 
	`mosquôto_publish_ˇŒback_£t
(
mosq
, 
⁄_publish
);

53 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

55 
run
 == -1){

56 
	`mosquôto_lo›
(
mosq
, 50, 1);

58 
	`mosquôto_lo›
(
mosq
, 50, 1);

60 
	`mosquôto_de°roy
(
mosq
);

61 
	`mosquôto_lib_˛ónup
();

62  
run
;

63 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos2-pubrec-error.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
, 
Êags
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

11 if(
rc
){

12 
	`exô
(1);

14 
	`mosquôto_publish_v5
(
mosq
, 
NULL
, "t›ic", 
	`°æí
("ªje˘ed"), "ªje˘ed", 2, 
Ál£
, NULL);

15 
	`mosquôto_publish_v5
(
mosq
, 
NULL
, "t›ic", 
	`°æí
("ac˚±ed"), "ac˚±ed", 2, 
Ál£
, NULL);

16 
	}
}

18 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

20 if(
mid
 == 2){

21 
run
 = 0;

23 
	}
}

25 
	$maö
(
¨gc
, *
¨gv
[])

27 
rc
;

28 
mosquôto
 *
mosq
;

29 
mosquôto_¥›îty
 *
¥›s
 = 
NULL
;

31 
p‹t
 = 
	`©oi
(
¨gv
[1]);

33 
	`mosquôto_lib_öô
();

35 
mosq
 = 
	`mosquôto_√w
("publish-qos2-ã°", 
åue
, &
run
);

36 if(
mosq
 =
NULL
){

39 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
MQTT_PROTOCOL_V5
);

41 
	`mosquôto_c⁄√˘_v5_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

42 
	`mosquôto_publish_v5_ˇŒback_£t
(
mosq
, 
⁄_publish
);

44 
rc
 = 
	`mosquôto_c⁄√˘_böd_v5
(
mosq
, "loˇlho°", 
p‹t
, 60, 
NULL
, NULL);

46 
run
 == -1){

47 
	`mosquôto_lo›
(
mosq
, 100, 1);

50 
	`mosquôto_de°roy
(
mosq
);

51 
	`mosquôto_lib_˛ónup
();

52  
run
;

53 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos2-receive-maximum-1.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
, 
Êags
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

11 
i
;

13 if(
rc
){

14 
	`exô
(1);

17 
i
=0; i<5; i++){

18 
	`mosquôto_publish_v5
(
mosq
, 
NULL
, "t›ic", 5, "12345", 2, 
Ál£
, NULL);

20 
	}
}

22 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

24 if(
mid
 == 5){

25 
	`mosquôto_disc⁄√˘
(
mosq
);

26 
run
 = 0;

28 
	}
}

30 
	$maö
(
¨gc
, *
¨gv
[])

32 
rc
;

33 
mosquôto
 *
mosq
;

34 
mosquôto_¥›îty
 *
¥›s
 = 
NULL
;

36 
p‹t
 = 
	`©oi
(
¨gv
[1]);

38 
	`mosquôto_lib_öô
();

40 
mosq
 = 
	`mosquôto_√w
("publish-qos2-ã°", 
åue
, &
run
);

41 if(
mosq
 =
NULL
){

44 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
MQTT_PROTOCOL_V5
);

46 
	`mosquôto_c⁄√˘_v5_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

47 
	`mosquôto_publish_v5_ˇŒback_£t
(
mosq
, 
⁄_publish
);

49 
rc
 = 
	`mosquôto_c⁄√˘_böd_v5
(
mosq
, "loˇlho°", 
p‹t
, 60, 
NULL
, NULL);

51 
run
 == -1){

52 
	`mosquôto_lo›
(
mosq
, 300, 1);

55 
	`mosquôto_de°roy
(
mosq
);

56 
	`mosquôto_lib_˛ónup
();

57  
run
;

58 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos2-receive-maximum-2.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
, 
Êags
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

11 
i
;

13 if(
rc
){

14 
	`exô
(1);

17 
i
=0; i<5; i++){

18 
	`mosquôto_publish_v5
(
mosq
, 
NULL
, "t›ic", 5, "12345", 2, 
Ál£
, NULL);

20 
	}
}

22 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

24 if(
mid
 == 5){

25 
	`mosquôto_disc⁄√˘
(
mosq
);

26 
run
 = 0;

28 
	}
}

30 
	$maö
(
¨gc
, *
¨gv
[])

32 
rc
;

33 
mosquôto
 *
mosq
;

34 
mosquôto_¥›îty
 *
¥›s
 = 
NULL
;

36 
p‹t
 = 
	`©oi
(
¨gv
[1]);

38 
	`mosquôto_lib_öô
();

40 
mosq
 = 
	`mosquôto_√w
("publish-qos2-ã°", 
åue
, &
run
);

41 if(
mosq
 =
NULL
){

44 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
MQTT_PROTOCOL_V5
);

46 
	`mosquôto_c⁄√˘_v5_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

47 
	`mosquôto_publish_v5_ˇŒback_£t
(
mosq
, 
⁄_publish
);

49 
rc
 = 
	`mosquôto_c⁄√˘_böd_v5
(
mosq
, "loˇlho°", 
p‹t
, 60, 
NULL
, NULL);

51 
run
 == -1){

52 
	`mosquôto_lo›
(
mosq
, 300, 1);

55 
	`mosquôto_de°roy
(
mosq
);

56 
	`mosquôto_lib_˛ónup
();

57  
run
;

58 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos2.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

11 if(
rc
){

12 
	`exô
(1);

14 
	`mosquôto_publish
(
mosq
, 
NULL
, "pub/qos2/ã°", 
	`°æí
("mesßge"), "mesßge", 2, 
Ál£
);

16 
	}
}

18 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

20 
	`mosquôto_disc⁄√˘
(
mosq
);

21 
	}
}

23 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

25 
run
 = 0;

26 
	}
}

28 
	$maö
(
¨gc
, *
¨gv
[])

30 
rc
;

31 
mosquôto
 *
mosq
;

33 
p‹t
 = 
	`©oi
(
¨gv
[1]);

35 
	`mosquôto_lib_öô
();

37 
mosq
 = 
	`mosquôto_√w
("publish-qos2-ã°", 
åue
, 
NULL
);

38 if(
mosq
 =
NULL
){

41 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

42 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

43 
	`mosquôto_publish_ˇŒback_£t
(
mosq
, 
⁄_publish
);

45 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

47 
run
 == -1){

48 
	`mosquôto_lo›
(
mosq
, 300, 1);

50 
	`mosquôto_de°roy
(
mosq
);

52 
	`mosquôto_lib_˛ónup
();

53  
run
;

54 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-qos0-no-payload.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

8 
	g£¡_mid
 = -1;

10 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

12 if(
rc
){

13 
	`exô
(1);

15 
	`mosquôto_publish
(
mosq
, &
£¡_mid
, "pub/qos0/no-∑ylﬂd/ã°", 0, 
NULL
, 0, 
Ál£
);

17 
	}
}

19 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

21 if(
mid
 =
£¡_mid
){

22 
	`mosquôto_disc⁄√˘
(
mosq
);

23 
run
 = 0;

25 
	`exô
(1);

27 
	}
}

29 
	$maö
(
¨gc
, *
¨gv
[])

31 
rc
;

32 
mosquôto
 *
mosq
;

34 
p‹t
 = 
	`©oi
(
¨gv
[1]);

36 
	`mosquôto_lib_öô
();

38 
mosq
 = 
	`mosquôto_√w
("publish-qos0-ã°-≈", 
åue
, 
NULL
);

39 if(
mosq
 =
NULL
){

42 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

43 
	`mosquôto_publish_ˇŒback_£t
(
mosq
, 
⁄_publish
);

45 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

47 
run
 == -1){

48 
	`mosquôto_lo›
(
mosq
, -1, 1);

50 
	`mosquôto_de°roy
(
mosq
);

52 
	`mosquôto_lib_˛ónup
();

53  
run
;

54 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-qos0.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

8 
	g£¡_mid
 = -1;

10 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

12 if(
rc
){

13 
	`exô
(1);

15 
	`mosquôto_publish
(
mosq
, &
£¡_mid
, "pub/qos0/ã°", 
	`°æí
("mesßge"), "mesßge", 0, 
Ál£
);

17 
	}
}

19 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

21 if(
mid
 =
£¡_mid
){

22 
	`mosquôto_disc⁄√˘
(
mosq
);

23 
run
 = 0;

25 
	`exô
(1);

27 
	}
}

29 
	$maö
(
¨gc
, *
¨gv
[])

31 
rc
;

32 
mosquôto
 *
mosq
;

34 
p‹t
 = 
	`©oi
(
¨gv
[1]);

36 
	`mosquôto_lib_öô
();

38 
mosq
 = 
	`mosquôto_√w
("publish-qos0-ã°", 
åue
, 
NULL
);

39 if(
mosq
 =
NULL
){

42 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

43 
	`mosquôto_publish_ˇŒback_£t
(
mosq
, 
⁄_publish
);

45 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

47 
run
 == -1){

48 
rc
 = 
	`mosquôto_lo›
(
mosq
, -1, 1);

51 
	`mosquôto_de°roy
(
mosq
);

52 
	`mosquôto_lib_˛ónup
();

53  
run
;

54 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-request-response-1.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

6 
	~<mqâ_¥Ÿocﬁ.h
>

8 
	grun
 = -1;

9 
	g£¡_mid
 = -1;

11 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

13 if(
rc
){

14 
	`exô
(1);

16 
	`mosquôto_subs¸ibe
(
mosq
, 
NULL
, "response/topic", 0);

18 
	}
}

20 
	$⁄_subs¸ibe
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

22 
mosquôto_¥›îty
 *
¥›s
 = 
NULL
;

23 
	`mosquôto_¥›îty_add_°rög
(&
¥›s
, 
MQTT_PROP_RESPONSE_TOPIC
, "response/topic");

24 
	`mosquôto_publish_v5
(
mosq
, 
NULL
, "ªque°/t›ic", 6, "a˘i⁄", 0, 0, 
¥›s
);

25 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›s
);

26 
	}
}

28 
	$⁄_mesßge
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
msg
)

30 if(!
	`°rcmp
(
msg
->
∑ylﬂd
, "aÑesponse")){

31 
run
 = 0;

33 
run
 = 1;

35 
	}
}

37 
	$maö
(
¨gc
, *
¨gv
[])

39 
rc
;

40 
mosquôto
 *
mosq
;

41 
vî
 = 
PROTOCOL_VERSION_v5
;

43 
p‹t
 = 
	`©oi
(
¨gv
[1]);

45 
	`mosquôto_lib_öô
();

47 
mosq
 = 
	`mosquôto_√w
("ªque°-ã°", 
åue
, 
NULL
);

48 if(
mosq
 =
NULL
){

51 
	`mosquôto_›ts_£t
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, &
vî
);

52 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

53 
	`mosquôto_subs¸ibe_ˇŒback_£t
(
mosq
, 
⁄_subs¸ibe
);

54 
	`mosquôto_mesßge_ˇŒback_£t
(
mosq
, 
⁄_mesßge
);

56 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

58 
run
 == -1){

59 
rc
 = 
	`mosquôto_lo›
(
mosq
, -1, 1);

61 
	`mosquôto_de°roy
(
mosq
);

63 
	`mosquôto_lib_˛ónup
();

64  
run
;

65 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-request-response-2.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

6 
	~<mqâ_¥Ÿocﬁ.h
>

8 
	grun
 = -1;

9 
	g£¡_mid
 = -1;

11 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

13 if(
rc
){

14 
	`exô
(1);

16 
	`mosquôto_subs¸ibe
(
mosq
, 
NULL
, "request/topic", 0);

18 
	}
}

20 
	$⁄_mesßge_v5
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
msg
, c⁄° 
mosquôto_¥›îty
 *
¥›s
)

22 c⁄° 
mosquôto_¥›îty
 *
p_ª•
, *
p_c‹r
 = 
NULL
;

23 *
ª•_t›ic
 = 
NULL
;

24 
rc
;

26 if(!
	`°rcmp
(
msg
->
t›ic
, "request/topic")){

27 
p_ª•
 = 
	`mosquôto_¥›îty_ªad_°rög
(
¥›s
, 
MQTT_PROP_RESPONSE_TOPIC
, &
ª•_t›ic
, 
Ál£
);

28 if(
p_ª•
){

29 
p_c‹r
 = 
	`mosquôto_¥›îty_ªad_bö¨y
(
¥›s
, 
MQTT_PROP_CORRELATION_DATA
, 
NULL
, NULL, 
Ál£
);

30 
rc
 = 
	`mosquôto_publish_v5
(
mosq
, 
NULL
, 
ª•_t›ic
, 
	`°æí
("®ª•⁄£"), "®ª•⁄£", 0, 
Ál£
, 
p_c‹r
);

31 
	`‰ì
(
ª•_t›ic
);

34 
	}
}

36 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

38 
run
 = 0;

39 
	}
}

42 
	$maö
(
¨gc
, *
¨gv
[])

44 
rc
;

45 
mosquôto
 *
mosq
;

46 
vî
 = 
PROTOCOL_VERSION_v5
;

48 
p‹t
 = 
	`©oi
(
¨gv
[1]);

50 
	`mosquôto_lib_öô
();

52 
mosq
 = 
	`mosquôto_√w
("ª•⁄£-ã°", 
åue
, 
NULL
);

53 if(
mosq
 =
NULL
){

56 
	`mosquôto_›ts_£t
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, &
vî
);

57 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

58 
	`mosquôto_publish_ˇŒback_£t
(
mosq
, 
⁄_publish
);

59 
	`mosquôto_mesßge_v5_ˇŒback_£t
(
mosq
, 
⁄_mesßge_v5
);

61 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

63 
run
 == -1){

64 
rc
 = 
	`mosquôto_lo›
(
mosq
, -1, 1);

66 
	`mosquôto_de°roy
(
mosq
);

68 
	`mosquôto_lib_˛ónup
();

69  
run
;

70 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-request-response-correlation-1.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

6 
	~<mqâ_¥Ÿocﬁ.h
>

8 
	grun
 = -1;

9 
	g£¡_mid
 = -1;

11 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

13 if(
rc
){

14 
	`exô
(1);

16 
	`mosquôto_subs¸ibe
(
mosq
, 
NULL
, "response/topic", 0);

18 
	}
}

20 
	$⁄_subs¸ibe
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

22 
mosquôto_¥›îty
 *
¥›s
 = 
NULL
;

23 
	`mosquôto_¥›îty_add_°rög
(&
¥›s
, 
MQTT_PROP_RESPONSE_TOPIC
, "response/topic");

24 
	`mosquôto_¥›îty_add_bö¨y
(&
¥›s
, 
MQTT_PROP_CORRELATION_DATA
, "corridor", 8);

25 
	`mosquôto_publish_v5
(
mosq
, 
NULL
, "ªque°/t›ic", 6, "a˘i⁄", 0, 0, 
¥›s
);

26 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›s
);

27 
	}
}

29 
	$⁄_mesßge
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
msg
)

31 if(!
	`°rcmp
(
msg
->
∑ylﬂd
, "aÑesponse")){

32 
run
 = 0;

34 
run
 = 1;

36 
	}
}

38 
	$maö
(
¨gc
, *
¨gv
[])

40 
rc
;

41 
mosquôto
 *
mosq
;

42 
vî
 = 
PROTOCOL_VERSION_v5
;

44 
p‹t
 = 
	`©oi
(
¨gv
[1]);

46 
	`mosquôto_lib_öô
();

48 
mosq
 = 
	`mosquôto_√w
("ªque°-ã°", 
åue
, 
NULL
);

49 if(
mosq
 =
NULL
){

52 
	`mosquôto_›ts_£t
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, &
vî
);

53 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

54 
	`mosquôto_subs¸ibe_ˇŒback_£t
(
mosq
, 
⁄_subs¸ibe
);

55 
	`mosquôto_mesßge_ˇŒback_£t
(
mosq
, 
⁄_mesßge
);

57 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

59 
run
 == -1){

60 
rc
 = 
	`mosquôto_lo›
(
mosq
, -1, 1);

62 
	`mosquôto_de°roy
(
mosq
);

64 
	`mosquôto_lib_˛ónup
();

65  
run
;

66 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/04-retain-qos0.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

11 if(
rc
){

12 
	`exô
(1);

14 
	`mosquôto_publish
(
mosq
, 
NULL
, "ªèö/qos0/ã°", 
	`°æí
("ªèöed mesßge"), "ªèöed mesßge", 0, 
åue
);

16 
	}
}

18 
	$maö
(
¨gc
, *
¨gv
[])

20 
rc
;

21 
mosquôto
 *
mosq
;

23 
p‹t
 = 
	`©oi
(
¨gv
[1]);

25 
	`mosquôto_lib_öô
();

27 
mosq
 = 
	`mosquôto_√w
("ªèö-qos0-ã°", 
åue
, 
NULL
);

28 if(
mosq
 =
NULL
){

31 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

33 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

35 
run
 == -1){

36 
	`mosquôto_lo›
(
mosq
, -1, 1);

38 
	`mosquôto_de°roy
(
mosq
);

40 
	`mosquôto_lib_˛ónup
();

41  
run
;

42 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/08-ssl-bad-cacert.c

1 
	~<î∫o.h
>

2 
	~<°dboﬁ.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<mosquôto.h
>

7 
	$maö
(
¨gc
, *
¨gv
[])

9 
rc
 = 1;

10 
mosquôto
 *
mosq
;

12 
	`mosquôto_lib_öô
();

14 
mosq
 = 
	`mosquôto_√w
("08-s¶-bad-ˇ˚π", 
åue
, 
NULL
);

15 if(
mosq
 =
NULL
){

18 if(
	`mosquôto_és_£t
(
mosq
, "this/fûe/d€¢t/exi°", 
NULL
, NULL, NULL, NULLË=
MOSQ_ERR_INVAL
){

19 
rc
 = 0;

21 
	`mosquôto_de°roy
(
mosq
);

22 
	`mosquôto_lib_˛ónup
();

23  
rc
;

24 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/08-ssl-connect-cert-auth-custom-ssl-ctx-default.c

1 
	~<î∫o.h
>

2 
	~<sig«l.h
>

3 
	~<°dboﬁ.h
>

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<mosquôto.h
>

7 
	~<›ís¶/s¶.h
>

9 
	grun
 = -1;

11 
	$h™dÀ_sigöt
(
sig«l
)

13 
run
 = 0;

14 
	}
}

16 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

18 if(
rc
){

19 
	`exô
(1);

21 
	`mosquôto_disc⁄√˘
(
mosq
);

23 
	}
}

25 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

27 
run
 = 
rc
;

28 
	}
}

30 
	$maö
(
¨gc
, *
¨gv
[])

32 
rc
;

33 
mosquôto
 *
mosq
;

34 
SSL_CTX
 *
s¶_˘x
;

35 
p‹t
 = 
	`©oi
(
¨gv
[1]);

37 
	`mosquôto_lib_öô
();

39 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
 \

40 | 
OPENSSL_INIT_ADD_ALL_DIGESTS
 \

41 | 
OPENSSL_INIT_LOAD_CONFIG
, 
NULL
);

42 
s¶_˘x
 = 
	`SSL_CTX_√w
(
	`TLS_˛õ¡_mëhod
());

44 
mosq
 = 
	`mosquôto_√w
("08-s¶-c⁄√˘-¸t-auth", 
åue
, 
NULL
);

45 if(
mosq
 =
NULL
){

49 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_SSL_CTX_WITH_DEFAULTS
, 1);

50 
	`mosquôto_void_›ti⁄
(
mosq
, 
MOSQ_OPT_SSL_CTX
, 
s¶_˘x
);

52 
	`mosquôto_és_£t
(
mosq
, "../s¶/ã°-roŸ-ˇ.¸t", "../s¶/˚πs", "../s¶/˛õ¡.¸t", "../s¶/˛õ¡.key", 
NULL
);

53 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

54 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

56 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

58 
	`sig«l
(
SIGINT
, 
h™dÀ_sigöt
);

59 
run
 == -1){

60 
	`mosquôto_lo›
(
mosq
, -1, 1);

62 
	`SSL_CTX_‰ì
(
s¶_˘x
);

63 
	`mosquôto_de°roy
(
mosq
);

65 
	`mosquôto_lib_˛ónup
();

66  
run
;

67 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/08-ssl-connect-cert-auth-custom-ssl-ctx.c

1 
	~<î∫o.h
>

2 
	~<sig«l.h
>

3 
	~<°dboﬁ.h
>

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<mosquôto.h
>

7 
	~<›ís¶/s¶.h
>

9 
	grun
 = -1;

11 
	$h™dÀ_sigöt
(
sig«l
)

13 
run
 = 0;

14 
	}
}

16 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

18 if(
rc
){

19 
	`exô
(1);

21 
	`mosquôto_disc⁄√˘
(
mosq
);

23 
	}
}

25 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

27 
run
 = 
rc
;

28 
	}
}

30 
	$maö
(
¨gc
, *
¨gv
[])

32 
rc
;

33 
mosquôto
 *
mosq
;

34 
SSL_CTX
 *
s¶_˘x
;

35 
p‹t
 = 
	`©oi
(
¨gv
[1]);

37 
	`mosquôto_lib_öô
();

39 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
 \

40 | 
OPENSSL_INIT_ADD_ALL_DIGESTS
 \

41 | 
OPENSSL_INIT_LOAD_CONFIG
, 
NULL
);

42 
s¶_˘x
 = 
	`SSL_CTX_√w
(
	`TLS_˛õ¡_mëhod
());

44 
	`SSL_CTX_£t_vîify
(
s¶_˘x
, 
SSL_VERIFY_PEER
, 
NULL
);

45 
	`SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
s¶_˘x
, "../ssl/client.crt");

46 
	`SSL_CTX_u£_Priv©eKey_fûe
(
s¶_˘x
, "../s¶/˛õ¡.key", 
SSL_FILETYPE_PEM
);

47 
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
s¶_˘x
, "../ssl/test-root-ca.crt", "../ssl/certs");

49 
mosq
 = 
	`mosquôto_√w
("08-s¶-c⁄√˘-¸t-auth", 
åue
, 
NULL
);

50 if(
mosq
 =
NULL
){

53 
	`mosquôto_és_£t
(
mosq
, "../s¶/ã°-roŸ-ˇ.¸t", "../s¶/˚πs", "../s¶/˛õ¡.¸t", "../s¶/˛õ¡.key", 
NULL
);

54 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

55 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

57 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_SSL_CTX_WITH_DEFAULTS
, 0);

58 
	`mosquôto_void_›ti⁄
(
mosq
, 
MOSQ_OPT_SSL_CTX
, 
s¶_˘x
);

60 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

62 
	`sig«l
(
SIGINT
, 
h™dÀ_sigöt
);

63 
run
 == -1){

64 
	`mosquôto_lo›
(
mosq
, -1, 1);

66 
	`SSL_CTX_‰ì
(
s¶_˘x
);

67 
	`mosquôto_de°roy
(
mosq
);

69 
	`mosquôto_lib_˛ónup
();

70  
run
;

71 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/08-ssl-connect-cert-auth-enc.c

1 
	~<î∫o.h
>

2 
	~<°dboﬁ.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<mosquôto.h
>

8 
	grun
 = -1;

10 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

12 if(
rc
){

13 
	`exô
(1);

15 
	`mosquôto_disc⁄√˘
(
mosq
);

17 
	}
}

19 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

21 
run
 = 
rc
;

22 
	}
}

24 
	$∑ssw‹d_ˇŒback
(* 
buf
, 
size
, 
rwÊag
, * 
u£rd©a
)

26 
	`°∫˝y
(
buf
, "∑ssw‹d", 
size
);

27 
buf
[
size
-1] = '\0';

29  
	`°æí
(
buf
);

30 
	}
}

32 
	$maö
(
¨gc
, *
¨gv
[])

34 
rc
;

35 
mosquôto
 *
mosq
;

37 
p‹t
 = 
	`©oi
(
¨gv
[1]);

39 
	`mosquôto_lib_öô
();

41 
mosq
 = 
	`mosquôto_√w
("08-s¶-c⁄√˘-¸t-auth-íc", 
åue
, 
NULL
);

42 if(
mosq
 =
NULL
){

45 
	`mosquôto_és_£t
(
mosq
, "../s¶/ã°-roŸ-ˇ.¸t", "../s¶/˚πs", "../s¶/˛õ¡-í¸y±ed.¸t", "../s¶/˛õ¡-í¸y±ed.key", 
∑ssw‹d_ˇŒback
);

46 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

47 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

49 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

51 
run
 == -1){

52 
	`mosquôto_lo›
(
mosq
, -1, 1);

54 
	`mosquôto_de°roy
(
mosq
);

56 
	`mosquôto_lib_˛ónup
();

57  
run
;

58 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/08-ssl-connect-cert-auth.c

1 
	~<î∫o.h
>

2 
	~<°dboﬁ.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

11 if(
rc
){

12 
	`exô
(1);

14 
	`mosquôto_disc⁄√˘
(
mosq
);

16 
	}
}

18 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

20 
run
 = 
rc
;

21 
	}
}

23 
	$maö
(
¨gc
, *
¨gv
[])

25 
rc
;

26 
mosquôto
 *
mosq
;

28 
p‹t
 = 
	`©oi
(
¨gv
[1]);

30 
	`mosquôto_lib_öô
();

32 
mosq
 = 
	`mosquôto_√w
("08-s¶-c⁄√˘-¸t-auth", 
åue
, 
NULL
);

33 if(
mosq
 =
NULL
){

36 
	`mosquôto_és_£t
(
mosq
, "../s¶/ã°-roŸ-ˇ.¸t", "../s¶/˚πs", "../s¶/˛õ¡.¸t", "../s¶/˛õ¡.key", 
NULL
);

37 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

38 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

40 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

42 
run
 == -1){

43 
	`mosquôto_lo›
(
mosq
, -1, 1);

45 
	`mosquôto_de°roy
(
mosq
);

47 
	`mosquôto_lib_˛ónup
();

48  
run
;

49 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/08-ssl-connect-no-auth.c

1 
	~<î∫o.h
>

2 
	~<°dboﬁ.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

11 if(
rc
){

12 
	`exô
(1);

14 
	`mosquôto_disc⁄√˘
(
mosq
);

16 
	}
}

18 
	$⁄_disc⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

20 
run
 = 
rc
;

21 
	}
}

23 
	$maö
(
¨gc
, *
¨gv
[])

25 
rc
;

26 
mosquôto
 *
mosq
;

28 
p‹t
 = 
	`©oi
(
¨gv
[1]);

30 
	`mosquôto_lib_öô
();

32 
mosq
 = 
	`mosquôto_√w
("08-s¶-c⁄√˘-no-auth", 
åue
, 
NULL
);

33 if(
mosq
 =
NULL
){

36 
	`mosquôto_és_£t
(
mosq
, "../s¶/Æl-ˇ.¸t", 
NULL
, NULL, NULL, NULL);

37 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

38 
	`mosquôto_disc⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_disc⁄√˘
);

40 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

42 
run
 == -1){

43 
	`mosquôto_lo›
(
mosq
, -1, 1);

45 
	`mosquôto_de°roy
(
mosq
);

47 
	`mosquôto_lib_˛ónup
();

48  
run
;

49 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/08-ssl-fake-cacert.c

1 
	~<î∫o.h
>

2 
	~<°dboﬁ.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

9 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

11 
	`exô
(1);

12 
	}
}

14 
	$maö
(
¨gc
, *
¨gv
[])

16 
rc
;

17 
mosquôto
 *
mosq
;

19 
p‹t
 = 
	`©oi
(
¨gv
[1]);

21 
	`mosquôto_lib_öô
();

23 
mosq
 = 
	`mosquôto_√w
("08-s¶-c⁄√˘-¸t-auth", 
åue
, 
NULL
);

24 if(
mosq
 =
NULL
){

27 
	`mosquôto_és_£t
(
mosq
, "../s¶/ã°-Áke-roŸ-ˇ.¸t", 
NULL
, "../ssl/client.crt", "../ssl/client.key", NULL);

28 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

30 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

32 
rc
 = 
	`mosquôto_lo›_f‹evî
(
mosq
, -1, 1);

33 
	`mosquôto_de°roy
(
mosq
);

34 
	`mosquôto_lib_˛ónup
();

35 if(
rc
 =
MOSQ_ERR_ERRNO
 && 
î∫o
 =
EPROTO
){

40 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/09-util-topic-tokenise.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<mosquôto.h
>

5 
	$¥öt_îr‹
(c⁄° *
t›ic
, **
t›ics
, 
t›ic_cou¡
)

7 
i
;

8 
	`¥ötf
("TOPIC: %s\n", 
t›ic
);

9 
	`¥ötf
("TOKENS: ");

10 
i
=0; i<
t›ic_cou¡
; i++){

11 
	`¥ötf
("%s", 
t›ics
[
i
]);

12 if(
i
+1<
t›ic_cou¡
){

13 
	`¥ötf
("/");

16 
	`¥ötf
("\n");

17 
	}
}

19 
	$maö
(
¨gc
, *
¨gv
[])

21 **
t›ics
;

22 
t›ic_cou¡
;

23 
boﬁ
 
m©ch
;

25 if(
	`mosquôto_sub_t›ic_tokíi£
("t›ic", &
t›ics
, &
t›ic_cou¡
)){

26 
	`¥ötf
("Out of memory.\n");

29 if(
t›ic_cou¡
 !1 || 
	`°rcmp
(
t›ics
[0], "topic")){

30 
	`¥öt_îr‹
("t›ic", 
t›ics
, 
t›ic_cou¡
);

33 
	`mosquôto_sub_t›ic_tokís_‰ì
(&
t›ics
, 
t›ic_cou¡
);

35 if(
	`mosquôto_sub_t›ic_tokíi£
("a/dìp/t›ic/hõørchy", &
t›ics
, &
t›ic_cou¡
)){

36 
	`¥ötf
("Out of memory.\n");

39 if(
t›ic_cou¡
 != 4

40 || 
	`°rcmp
(
t›ics
[0], "a")

41 || 
	`°rcmp
(
t›ics
[1], "deep")

42 || 
	`°rcmp
(
t›ics
[2], "topic")

43 || 
	`°rcmp
(
t›ics
[3], "hierarchy")){

44 
	`¥öt_îr‹
("a/dìp/t›ic/hõørchy", 
t›ics
, 
t›ic_cou¡
);

47 
	`mosquôto_sub_t›ic_tokís_‰ì
(&
t›ics
, 
t›ic_cou¡
);

49 if(
	`mosquôto_sub_t›ic_tokíi£
("/a/dìp/t›ic/hõørchy", &
t›ics
, &
t›ic_cou¡
)){

50 
	`¥ötf
("Out of memory.\n");

53 if(
t›ic_cou¡
 != 5

54 || 
t›ics
[0]

55 || 
	`°rcmp
(
t›ics
[1], "a")

56 || 
	`°rcmp
(
t›ics
[2], "deep")

57 || 
	`°rcmp
(
t›ics
[3], "topic")

58 || 
	`°rcmp
(
t›ics
[4], "hierarchy")){

59 
	`¥öt_îr‹
("/a/dìp/t›ic/hõørchy", 
t›ics
, 
t›ic_cou¡
);

62 
	`mosquôto_sub_t›ic_tokís_‰ì
(&
t›ics
, 
t›ic_cou¡
);

64 if(
	`mosquôto_sub_t›ic_tokíi£
("a/b/c", &
t›ics
, &
t›ic_cou¡
)){

65 
	`¥ötf
("Out of memory.\n");

68 if(
t›ic_cou¡
 != 3

69 || 
	`°rcmp
(
t›ics
[0], "a")

70 || 
	`°rcmp
(
t›ics
[1], "b")

71 || 
	`°rcmp
(
t›ics
[2], "c")){

72 
	`¥öt_îr‹
("a/b/c", 
t›ics
, 
t›ic_cou¡
);

75 
	`mosquôto_sub_t›ic_tokís_‰ì
(&
t›ics
, 
t›ic_cou¡
);

77 if(
	`mosquôto_sub_t›ic_tokíi£
("/a/b/c", &
t›ics
, &
t›ic_cou¡
)){

78 
	`¥ötf
("Out of memory.\n");

81 if(
t›ic_cou¡
 != 4

82 || 
t›ics
[0]

83 || 
	`°rcmp
(
t›ics
[1], "a")

84 || 
	`°rcmp
(
t›ics
[2], "b")

85 || 
	`°rcmp
(
t›ics
[3], "c")){

86 
	`¥öt_îr‹
("/a/b/c", 
t›ics
, 
t›ic_cou¡
);

89 
	`mosquôto_sub_t›ic_tokís_‰ì
(&
t›ics
, 
t›ic_cou¡
);

91 if(
	`mosquôto_sub_t›ic_tokíi£
("a///hõørchy", &
t›ics
, &
t›ic_cou¡
)){

92 
	`¥ötf
("Out of memory.\n");

95 if(
t›ic_cou¡
 != 4

96 || 
	`°rcmp
(
t›ics
[0], "a")

97 || 
t›ics
[1]

98 || 
t›ics
[2]

99 || 
	`°rcmp
(
t›ics
[3], "hierarchy")){

100 
	`¥öt_îr‹
("a///hõørchy", 
t›ics
, 
t›ic_cou¡
);

103 
	`mosquôto_sub_t›ic_tokís_‰ì
(&
t›ics
, 
t›ic_cou¡
);

105 if(
	`mosquôto_sub_t›ic_tokíi£
("/a///hõørchy", &
t›ics
, &
t›ic_cou¡
)){

106 
	`¥ötf
("Out of memory.\n");

109 if(
t›ic_cou¡
 != 5

110 || 
t›ics
[0]

111 || 
	`°rcmp
(
t›ics
[1], "a")

112 || 
t›ics
[2]

113 || 
t›ics
[3]

114 || 
	`°rcmp
(
t›ics
[4], "hierarchy")){

115 
	`¥öt_îr‹
("/a///hõørchy", 
t›ics
, 
t›ic_cou¡
);

118 
	`mosquôto_sub_t›ic_tokís_‰ì
(&
t›ics
, 
t›ic_cou¡
);

120 if(
	`mosquôto_sub_t›ic_tokíi£
("/a///hõørchy/", &
t›ics
, &
t›ic_cou¡
)){

121 
	`¥ötf
("Out of memory.\n");

124 if(
t›ic_cou¡
 != 6

125 || 
t›ics
[0]

126 || 
	`°rcmp
(
t›ics
[1], "a")

127 || 
t›ics
[2]

128 || 
t›ics
[3]

129 || 
	`°rcmp
(
t›ics
[4], "hierarchy")

130 || 
t›ics
[3]){

131 
	`¥öt_îr‹
("/a///hõørchy/", 
t›ics
, 
t›ic_cou¡
);

134 
	`mosquôto_sub_t›ic_tokís_‰ì
(&
t›ics
, 
t›ic_cou¡
);

137 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/11-prop-oversize-packet.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

7 
	grun
 = -1;

8 
	g£¡_mid
 = -1;

10 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

12 if(
rc
){

13 
	`exô
(1);

15 
rc
 = 
	`mosquôto_subs¸ibe
(
mosq
, 
NULL
, "0123456789012345678901234567890", 0);

16 if(
rc
 !
MOSQ_ERR_OVERSIZE_PACKET
){

17 
	`¥ötf
("Fail on subscribe\n");

18 
	`exô
(1);

21 
rc
 = 
	`mosquôto_unsubs¸ibe
(
mosq
, 
NULL
, "0123456789012345678901234567890");

22 if(
rc
 !
MOSQ_ERR_OVERSIZE_PACKET
){

23 
	`¥ötf
("Fail on unsubscribe\n");

24 
	`exô
(1);

27 
rc
 = 
	`mosquôto_publish
(
mosq
, &
£¡_mid
, "pub/ã°", 
	`°æí
("0123456789012345678"), "0123456789012345678", 0, 
Ál£
);

28 if(
rc
 !
MOSQ_ERR_OVERSIZE_PACKET
){

29 
	`¥ötf
("Fail onÖublish 1\n");

30 
	`exô
(1);

32 
rc
 = 
	`mosquôto_publish
(
mosq
, &
£¡_mid
, "pub/ã°", 
	`°æí
("012345678901234567"), "012345678901234567", 0, 
Ál£
);

33 if(
rc
 !
MOSQ_ERR_SUCCESS
){

34 
	`¥ötf
("Fail onÖublish 2\n");

35 
	`exô
(1);

38 
	}
}

40 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

42 if(
mid
 =
£¡_mid
){

43 
	`mosquôto_disc⁄√˘
(
mosq
);

44 
run
 = 0;

46 
	`exô
(1);

48 
	}
}

50 
	$maö
(
¨gc
, *
¨gv
[])

52 
rc
;

53 
mosquôto
 *
mosq
;

55 
p‹t
 = 
	`©oi
(
¨gv
[1]);

57 
	`mosquôto_lib_öô
();

59 
mosq
 = 
	`mosquôto_√w
("publish-qos0-ã°", 
åue
, 
NULL
);

60 if(
mosq
 =
NULL
){

63 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
MQTT_PROTOCOL_V5
);

64 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

65 
	`mosquôto_publish_ˇŒback_£t
(
mosq
, 
⁄_publish
);

67 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

69 
run
 == -1){

70 
rc
 = 
	`mosquôto_lo›
(
mosq
, -1, 1);

72 
	`mosquôto_de°roy
(
mosq
);

74 
	`mosquôto_lib_˛ónup
();

75  
run
;

76 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/11-prop-recv-qos0.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

6 
	~<mqâ_¥Ÿocﬁ.h
>

8 
	grun
 = -1;

9 
	g£¡_mid
 = -1;

11 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

13 
rc2
;

14 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

16 if(
rc
){

17 
	`exô
(1);

19 
	}
}

22 
	$⁄_mesßge_v5
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
msg
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

24 
rc
;

25 *
°r
;

27 if(
¥›îtõs
){

28 if(
	`mosquôto_¥›îty_ªad_°rög
(
¥›îtõs
, 
MQTT_PROP_CONTENT_TYPE
, &
°r
, 
Ál£
)){

29 
rc
 = 
	`°rcmp
(
°r
, "plain/text");

30 
	`‰ì
(
°r
);

32 if(
rc
 == 0){

33 if(
	`mosquôto_¥›îty_ªad_°rög
(
¥›îtõs
, 
MQTT_PROP_RESPONSE_TOPIC
, &
°r
, 
Ál£
)){

34 
rc
 = 
	`°rcmp
(
°r
, "msg/123");

35 
	`‰ì
(
°r
);

37 if(
rc
 == 0){

38 if(
msg
->
qos
 == 0){

39 
	`mosquôto_publish
(
mosq
, 
NULL
, "ok", 2, "ok", 0, 0);

49 
	`exô
(1);

50 
	}
}

53 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

55 
run
 = 0;

56 
	}
}

58 
	$maö
(
¨gc
, *
¨gv
[])

60 
rc
;

61 
tmp
;

62 
mosquôto
 *
mosq
;

64 
p‹t
 = 
	`©oi
(
¨gv
[1]);

66 
	`mosquôto_lib_öô
();

68 
mosq
 = 
	`mosquôto_√w
("¥›-ã°", 
åue
, 
NULL
);

69 if(
mosq
 =
NULL
){

72 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

73 
	`mosquôto_mesßge_v5_ˇŒback_£t
(
mosq
, 
⁄_mesßge_v5
);

74 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
MQTT_PROTOCOL_V5
);

76 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

78 
run
 == -1){

79 
rc
 = 
	`mosquôto_lo›
(
mosq
, -1, 1);

81 
	`mosquôto_de°roy
(
mosq
);

83 
	`mosquôto_lib_˛ónup
();

84  
run
;

85 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/11-prop-recv-qos1.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

6 
	~<mqâ_¥Ÿocﬁ.h
>

8 
	grun
 = -1;

9 
	g£¡_mid
 = -1;

11 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

13 
rc2
;

14 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

16 if(
rc
){

17 
	`exô
(1);

19 
	}
}

22 
	$⁄_mesßge_v5
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
msg
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

24 
rc
;

25 *
°r
;

27 if(
¥›îtõs
){

28 if(
	`mosquôto_¥›îty_ªad_°rög
(
¥›îtõs
, 
MQTT_PROP_CONTENT_TYPE
, &
°r
, 
Ál£
)){

29 
rc
 = 
	`°rcmp
(
°r
, "plain/text");

30 
	`‰ì
(
°r
);

32 if(
rc
 == 0){

33 if(
	`mosquôto_¥›îty_ªad_°rög
(
¥›îtõs
, 
MQTT_PROP_RESPONSE_TOPIC
, &
°r
, 
Ál£
)){

34 
rc
 = 
	`°rcmp
(
°r
, "msg/123");

35 
	`‰ì
(
°r
);

37 if(
rc
 == 0){

38 if(
msg
->
qos
 == 1){

39 
	`mosquôto_publish
(
mosq
, 
NULL
, "ok", 2, "ok", 0, 0);

49 
	`exô
(1);

50 
	}
}

53 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

55 
run
 = 0;

56 
	}
}

58 
	$maö
(
¨gc
, *
¨gv
[])

60 
rc
;

61 
tmp
;

62 
mosquôto
 *
mosq
;

64 
p‹t
 = 
	`©oi
(
¨gv
[1]);

66 
	`mosquôto_lib_öô
();

68 
mosq
 = 
	`mosquôto_√w
("¥›-ã°", 
åue
, 
NULL
);

69 if(
mosq
 =
NULL
){

72 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

73 
	`mosquôto_mesßge_v5_ˇŒback_£t
(
mosq
, 
⁄_mesßge_v5
);

74 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
MQTT_PROTOCOL_V5
);

76 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

78 
run
 == -1){

79 
rc
 = 
	`mosquôto_lo›
(
mosq
, -1, 1);

81 
	`mosquôto_de°roy
(
mosq
);

83 
	`mosquôto_lib_˛ónup
();

84  
run
;

85 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/11-prop-recv-qos2.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

6 
	~<mqâ_¥Ÿocﬁ.h
>

8 
	grun
 = -1;

9 
	g£¡_mid
 = -1;

11 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

13 
rc2
;

14 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

16 if(
rc
){

17 
	`exô
(1);

19 
	}
}

22 
	$⁄_mesßge_v5
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
msg
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

24 
rc
;

25 *
°r
;

27 if(
¥›îtõs
){

28 if(
	`mosquôto_¥›îty_ªad_°rög
(
¥›îtõs
, 
MQTT_PROP_CONTENT_TYPE
, &
°r
, 
Ál£
)){

29 
rc
 = 
	`°rcmp
(
°r
, "plain/text");

30 
	`‰ì
(
°r
);

32 if(
rc
 == 0){

33 if(
	`mosquôto_¥›îty_ªad_°rög
(
¥›îtõs
, 
MQTT_PROP_RESPONSE_TOPIC
, &
°r
, 
Ál£
)){

34 
rc
 = 
	`°rcmp
(
°r
, "msg/123");

35 
	`‰ì
(
°r
);

37 if(
rc
 == 0){

38 if(
msg
->
qos
 == 2){

39 
	`mosquôto_publish
(
mosq
, 
NULL
, "ok", 2, "ok", 0, 0);

49 
	`exô
(1);

50 
	}
}

53 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

55 
run
 = 0;

56 
	}
}

58 
	$maö
(
¨gc
, *
¨gv
[])

60 
rc
;

61 
tmp
;

62 
mosquôto
 *
mosq
;

64 
p‹t
 = 
	`©oi
(
¨gv
[1]);

66 
	`mosquôto_lib_öô
();

68 
mosq
 = 
	`mosquôto_√w
("¥›-ã°", 
åue
, 
NULL
);

69 if(
mosq
 =
NULL
){

72 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

73 
	`mosquôto_mesßge_v5_ˇŒback_£t
(
mosq
, 
⁄_mesßge_v5
);

74 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
MQTT_PROTOCOL_V5
);

76 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

78 
run
 == -1){

79 
rc
 = 
	`mosquôto_lo›
(
mosq
, -1, 1);

82 
	`mosquôto_de°roy
(
mosq
);

83 
	`mosquôto_lib_˛ónup
();

84  
run
;

85 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/11-prop-send-content-type.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

6 
	~<mqâ_¥Ÿocﬁ.h
>

8 
	grun
 = -1;

9 
	g£¡_mid
 = -1;

11 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

13 
rc2
;

14 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

16 if(
rc
){

17 
	`exô
(1);

19 
rc2
 = 
	`mosquôto_¥›îty_add_°rög
(&
¥›li°
, 
MQTT_PROP_CONTENT_TYPE
, "application/json");

20 
	`mosquôto_publish_v5
(
mosq
, &
£¡_mid
, "¥›/qos0", 
	`°æí
("mesßge"), "mesßge", 0, 
Ál£
, 
¥›li°
);

21 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

23 
	}
}

25 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

27 if(
mid
 =
£¡_mid
){

28 
	`mosquôto_disc⁄√˘
(
mosq
);

29 
run
 = 0;

31 
	`exô
(1);

33 
	}
}

35 
	$maö
(
¨gc
, *
¨gv
[])

37 
rc
;

38 
tmp
;

39 
mosquôto
 *
mosq
;

41 
p‹t
 = 
	`©oi
(
¨gv
[1]);

43 
	`mosquôto_lib_öô
();

45 
mosq
 = 
	`mosquôto_√w
("¥›-ã°", 
åue
, 
NULL
);

46 if(
mosq
 =
NULL
){

49 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

50 
	`mosquôto_publish_ˇŒback_£t
(
mosq
, 
⁄_publish
);

51 
tmp
 = 
MQTT_PROTOCOL_V5
;

52 
	`mosquôto_›ts_£t
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, &
tmp
);

54 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

56 
run
 == -1){

57 
rc
 = 
	`mosquôto_lo›
(
mosq
, -1, 1);

60 
	`mosquôto_de°roy
(
mosq
);

61 
	`mosquôto_lib_˛ónup
();

62  
run
;

63 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/11-prop-send-payload-format.c

1 
	~<°dboﬁ.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<mosquôto.h
>

6 
	~<mqâ_¥Ÿocﬁ.h
>

8 
	grun
 = -1;

9 
	g£¡_mid
 = -1;

11 
	$⁄_c⁄√˘
(
mosquôto
 *
mosq
, *
obj
, 
rc
)

13 
rc2
;

14 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

16 if(
rc
){

17 
	`exô
(1);

19 
rc2
 = 
	`mosquôto_¥›îty_add_byã
(&
¥›li°
, 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
, 1);

20 
	`mosquôto_publish_v5
(
mosq
, &
£¡_mid
, "¥›/qos0", 
	`°æí
("mesßge"), "mesßge", 0, 
Ál£
, 
¥›li°
);

21 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

23 
	}
}

25 
	$⁄_publish
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

27 if(
mid
 =
£¡_mid
){

28 
	`mosquôto_disc⁄√˘
(
mosq
);

29 
run
 = 0;

31 
	`exô
(1);

33 
	}
}

35 
	$maö
(
¨gc
, *
¨gv
[])

37 
rc
;

38 
tmp
;

39 
mosquôto
 *
mosq
;

41 
p‹t
 = 
	`©oi
(
¨gv
[1]);

43 
	`mosquôto_lib_öô
();

45 
mosq
 = 
	`mosquôto_√w
("¥›-ã°", 
åue
, 
NULL
);

46 if(
mosq
 =
NULL
){

49 
	`mosquôto_c⁄√˘_ˇŒback_£t
(
mosq
, 
⁄_c⁄√˘
);

50 
	`mosquôto_publish_ˇŒback_£t
(
mosq
, 
⁄_publish
);

51 
tmp
 = 
MQTT_PROTOCOL_V5
;

52 
	`mosquôto_›ts_£t
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, &
tmp
);

54 
rc
 = 
	`mosquôto_c⁄√˘
(
mosq
, "loˇlho°", 
p‹t
, 60);

56 
run
 == -1){

57 
rc
 = 
	`mosquôto_lo›
(
mosq
, -1, 1);

59 
	`mosquôto_de°roy
(
mosq
);

61 
	`mosquôto_lib_˛ónup
();

62  
run
;

63 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/01-con-discon-success.cpp

4 
	~<mosquôt›p.h
>

6 
	grun
 = -1;

8 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


10 
public
:

11 
mosquôt›p_ã°
(c⁄° *
id
);

13 
⁄_c⁄√˘
(
rc
);

14 
⁄_disc⁄√˘
(
rc
);

17 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

19 
	}
}

21 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

23 if(
rc
){

24 
	`exô
(1);

26 
	`disc⁄√˘
();

28 
	}
}

30 
	gmosquôt›p_ã°
::
	$⁄_disc⁄√˘
(
rc
)

32 
run
 = 
rc
;

33 
	}
}

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
mosquôt›p_ã°
 *
mosq
;

40 
p‹t
 = 
	`©oi
(
¨gv
[1]);

42 
mosqµ
::
	`lib_öô
();

44 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("01-con-discon-success");

46 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

48 
run
 == -1){

49 
mosq
->
	`lo›
();

51 
dñëe
 
mosq
;

53 
mosqµ
::
	`lib_˛ónup
();

55  
run
;

56 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/01-keepalive-pingreq.cpp

1 
	~<mosquôt›p.h
>

3 
	grun
 = -1;

5 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


7 
public
:

8 
mosquôt›p_ã°
(c⁄° *
id
);

10 
⁄_c⁄√˘
(
rc
);

13 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

15 
	}
}

17 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

19 if(
rc
){

20 
	`exô
(1);

22 
	}
}

24 
	$maö
(
¨gc
, *
¨gv
[])

26 
mosquôt›p_ã°
 *
mosq
;

28 
p‹t
 = 
	`©oi
(
¨gv
[1]);

30 
mosqµ
::
	`lib_öô
();

32 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("01-keepalive-pingreq");

34 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 5);

36 
run
 == -1){

37 
mosq
->
	`lo›
();

39 
dñëe
 
mosq
;

41 
dñëe
 
mosq
;

42 
mosqµ
::
	`lib_˛ónup
();

44  
run
;

45 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/01-no-clean-session.cpp

1 
	~<c°rög
>

2 
	~<mosquôt›p.h
>

4 
	grun
 = -1;

6 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


8 
public
:

9 
mosquôt›p_ã°
(c⁄° *
id
, 
boﬁ
 
˛ón_£ssi⁄
);

12 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
, 
boﬁ
 
˛ón_£ssi⁄
Ë: 
mosqµ
::
	$mosquôt›p
(
id
, 
˛ón_£ssi⁄
)

14 
	}
}

16 
	$maö
(
¨gc
, *
¨gv
[])

18 
mosquôt›p_ã°
 *
mosq
;

20 
p‹t
 = 
	`©oi
(
¨gv
[1]);

22 
mosqµ
::
	`lib_öô
();

24 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("01-no-˛ón-£ssi⁄", 
Ál£
);

26 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

28 
run
 == -1){

29 
mosq
->
	`lo›
();

31 
dñëe
 
mosq
;

33 
dñëe
 
mosq
;

34 
mosqµ
::
	`lib_˛ónup
();

36  
run
;

37 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/01-unpwd-set.cpp

1 
	~<c°rög
>

2 
	~<mosquôt›p.h
>

4 
	grun
 = -1;

6 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


8 
public
:

9 
mosquôt›p_ã°
(c⁄° *
id
);

12 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

14 
	}
}

16 
	$maö
(
¨gc
, *
¨gv
[])

18 
mosquôt›p_ã°
 *
mosq
;

20 
p‹t
 = 
	`©oi
(
¨gv
[1]);

22 
mosqµ
::
	`lib_öô
();

24 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("01-unpwd-set");

25 
mosq
->
	`u£∫ame_pw_£t
("uname", ";'[08gn=#");

27 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

29 
run
 == -1){

30 
mosq
->
	`lo›
();

32 
dñëe
 
mosq
;

34 
dñëe
 
mosq
;

35 
mosqµ
::
	`lib_˛ónup
();

37  
run
;

38 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/01-will-set.cpp

4 
	~<c°rög
>

5 
	~<mosquôt›p.h
>

7 
	grun
 = -1;

9 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


11 
public
:

12 
mosquôt›p_ã°
(c⁄° *
id
);

15 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

17 
	}
}

19 
	$maö
(
¨gc
, *
¨gv
[])

21 
mosquôt›p_ã°
 *
mosq
;

23 
p‹t
 = 
	`©oi
(
¨gv
[1]);

25 
mosqµ
::
	`lib_öô
();

27 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("01-will-set");

28 
mosq
->
	`wûl_£t
("t›ic/⁄/u√x≥˘ed/disc⁄√˘", 
	`°æí
("wû»mesßge"), "wû»mesßge", 1, 
åue
);

30 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

32 
run
 == -1){

33 
mosq
->
	`lo›
();

35 
dñëe
 
mosq
;

37 
dñëe
 
mosq
;

38 
mosqµ
::
	`lib_˛ónup
();

40  
run
;

41 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/01-will-unpwd-set.cpp

1 
	~<c°rög
>

2 
	~<mosquôt›p.h
>

4 
	grun
 = -1;

6 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


8 
public
:

9 
mosquôt›p_ã°
(c⁄° *
id
);

12 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

14 
	}
}

16 
	$maö
(
¨gc
, *
¨gv
[])

18 
mosquôt›p_ã°
 *
mosq
;

20 
p‹t
 = 
	`©oi
(
¨gv
[1]);

22 
mosqµ
::
	`lib_öô
();

24 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("01-will-unpwd-set");

25 
mosq
->
	`u£∫ame_pw_£t
("oibvvwqw", "#'^2hg9a&nm38*us");

26 
mosq
->
	`wûl_£t
("wûl-t›ic", 
	`°æí
("wû»mesßge"), "wû»mesßge", 2, 
Ál£
);

28 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

30 
run
 == -1){

31 
mosq
->
	`lo›
();

33 
dñëe
 
mosq
;

35 
dñëe
 
mosq
;

36 
mosqµ
::
	`lib_˛ónup
();

38  
run
;

39 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/02-subscribe-qos0.cpp

1 
	~<mosquôt›p.h
>

3 
	grun
 = -1;

5 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


7 
public
:

8 
mosquôt›p_ã°
(c⁄° *
id
);

10 
⁄_c⁄√˘
(
rc
);

11 
⁄_disc⁄√˘
(
rc
);

12 
⁄_subs¸ibe
(
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
);

15 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

17 
	}
}

19 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

21 if(
rc
){

22 
	`exô
(1);

24 
	`subs¸ibe
(
NULL
, "qos0/test", 0);

26 
	}
}

28 
	gmosquôt›p_ã°
::
	$⁄_disc⁄√˘
(
rc
)

30 
run
 = 
rc
;

31 
	}
}

33 
	gmosquôt›p_ã°
::
	$⁄_subs¸ibe
(
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

35 
	`disc⁄√˘
();

36 
	}
}

38 
	$maö
(
¨gc
, *
¨gv
[])

40 
mosquôt›p_ã°
 *
mosq
;

42 
p‹t
 = 
	`©oi
(
¨gv
[1]);

44 
mosqµ
::
	`lib_öô
();

46 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("subscribe-qos0-test");

48 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

50 
run
 == -1){

51 
mosq
->
	`lo›
();

53 
dñëe
 
mosq
;

55 
dñëe
 
mosq
;

56 
mosqµ
::
	`lib_˛ónup
();

58  
run
;

59 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/02-subscribe-qos1.cpp

1 
	~<mosquôt›p.h
>

3 
	grun
 = -1;

5 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


7 
public
:

8 
mosquôt›p_ã°
(c⁄° *
id
);

10 
⁄_c⁄√˘
(
rc
);

11 
⁄_disc⁄√˘
(
rc
);

12 
⁄_subs¸ibe
(
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
);

15 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

17 
	}
}

19 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

21 if(
rc
){

22 
	`exô
(1);

24 
	`subs¸ibe
(
NULL
, "qos1/test", 1);

26 
	}
}

28 
	gmosquôt›p_ã°
::
	$⁄_disc⁄√˘
(
rc
)

30 
run
 = 
rc
;

31 
	}
}

33 
	gmosquôt›p_ã°
::
	$⁄_subs¸ibe
(
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

35 
	`disc⁄√˘
();

36 
	}
}

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
mosquôt›p_ã°
 *
mosq
;

43 
p‹t
 = 
	`©oi
(
¨gv
[1]);

45 
mosqµ
::
	`lib_öô
();

47 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("subscribe-qos1-test");

49 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

51 
run
 == -1){

52 
mosq
->
	`lo›
();

55 
dñëe
 
mosq
;

56 
mosqµ
::
	`lib_˛ónup
();

58  
run
;

59 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/02-subscribe-qos2.cpp

1 
	~<mosquôt›p.h
>

3 
	grun
 = -1;

5 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


7 
public
:

8 
mosquôt›p_ã°
(c⁄° *
id
);

10 
⁄_c⁄√˘
(
rc
);

11 
⁄_disc⁄√˘
(
rc
);

12 
⁄_subs¸ibe
(
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
);

15 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

17 
	}
}

19 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

21 if(
rc
){

22 
	`exô
(1);

24 
	`subs¸ibe
(
NULL
, "qos2/test", 2);

26 
	}
}

28 
	gmosquôt›p_ã°
::
	$⁄_disc⁄√˘
(
rc
)

30 
run
 = 
rc
;

31 
	}
}

33 
	gmosquôt›p_ã°
::
	$⁄_subs¸ibe
(
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

35 
	`disc⁄√˘
();

36 
	}
}

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
mosquôt›p_ã°
 *
mosq
;

43 
p‹t
 = 
	`©oi
(
¨gv
[1]);

45 
mosqµ
::
	`lib_öô
();

47 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("subscribe-qos2-test");

49 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

51 
run
 == -1){

52 
mosq
->
	`lo›
();

54 
dñëe
 
mosq
;

56 
dñëe
 
mosq
;

57 
mosqµ
::
	`lib_˛ónup
();

59  
run
;

60 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/02-unsubscribe.cpp

1 
	~<mosquôt›p.h
>

3 
	grun
 = -1;

5 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


7 
public
:

8 
mosquôt›p_ã°
(c⁄° *
id
);

10 
⁄_c⁄√˘
(
rc
);

11 
⁄_disc⁄√˘
(
rc
);

12 
⁄_unsubs¸ibe
(
mid
);

15 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

17 
	}
}

19 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

21 if(
rc
){

22 
	`exô
(1);

24 
	`unsubs¸ibe
(
NULL
, "unsubscribe/test");

26 
	}
}

28 
	gmosquôt›p_ã°
::
	$⁄_disc⁄√˘
(
rc
)

30 
run
 = 
rc
;

31 
	}
}

33 
	gmosquôt›p_ã°
::
	$⁄_unsubs¸ibe
(
mid
)

35 
	`disc⁄√˘
();

36 
	}
}

38 
	$maö
(
¨gc
, *
¨gv
[])

40 
mosquôt›p_ã°
 *
mosq
;

42 
p‹t
 = 
	`©oi
(
¨gv
[1]);

44 
mosqµ
::
	`lib_öô
();

46 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("unsubscribe-test");

48 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

50 
run
 == -1){

51 
mosq
->
	`lo›
();

53 
dñëe
 
mosq
;

55 
mosqµ
::
	`lib_˛ónup
();

57  
run
;

58 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/03-publish-b2c-qos1.cpp

1 
	~<c°dio
>

2 
	~<c°dlib
>

3 
	~<c°rög
>

5 
	~<mosquôt›p.h
>

7 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


9 
public
:

10 
mosquôt›p_ã°
(c⁄° *
id
);

12 
⁄_c⁄√˘
(
rc
);

13 
⁄_mesßge
(c⁄° 
mosquôto_mesßge
 *
msg
);

16 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

18 
	}
}

20 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

22 if(
rc
){

23 
	`exô
(1);

25 
	}
}

27 
	gmosquôt›p_ã°
::
	$⁄_mesßge
(c⁄° 
mosquôto_mesßge
 *
msg
)

29 if(
msg
->
mid
 != 123){

30 
	`¥ötf
("InvÆid mid (%d)\n", 
msg
->
mid
);

31 
	`exô
(1);

33 if(
msg
->
qos
 != 1){

34 
	`¥ötf
("InvÆid qo†(%d)\n", 
msg
->
qos
);

35 
	`exô
(1);

37 if(
	`°rcmp
(
msg
->
t›ic
, "pub/qos1/receive")){

38 
	`¥ötf
("InvÆidÅ›i¯(%s)\n", 
msg
->
t›ic
);

39 
	`exô
(1);

41 if(
	`°rcmp
((*)
msg
->
∑ylﬂd
, "message")){

42 
	`¥ötf
("InvÆidÖaylﬂd (%s)\n", (*)
msg
->
∑ylﬂd
);

43 
	`exô
(1);

45 if(
msg
->
∑ylﬂdÀn
 != 7){

46 
	`¥ötf
("InvÆidÖaylﬂdÀ¿(%d)\n", 
msg
->
∑ylﬂdÀn
);

47 
	`exô
(1);

49 if(
msg
->
ªèö
 !
Ál£
){

50 
	`¥ötf
("InvÆidÑëaö (%d)\n", 
msg
->
ªèö
);

51 
	`exô
(1);

54 
	`exô
(0);

55 
	}
}

57 
	$maö
(
¨gc
, *
¨gv
[])

59 
mosquôt›p_ã°
 *
mosq
;

61 
p‹t
 = 
	`©oi
(
¨gv
[1]);

63 
mosqµ
::
	`lib_öô
();

65 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("publish-qos1-test");

66 
mosq
->
	`mesßge_ªåy_£t
(3);

68 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

71 
mosq
->
	`lo›
();

73 
dñëe
 
mosq
;

75 
dñëe
 
mosq
;

76 
mosqµ
::
	`lib_˛ónup
();

79 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/03-publish-b2c-qos2.cpp

1 
	~<c°dio
>

2 
	~<c°dlib
>

3 
	~<c°rög
>

5 
	~<mosquôt›p.h
>

7 
	grun
 = -1;

9 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


11 
public
:

12 
mosquôt›p_ã°
(c⁄° *
id
);

14 
⁄_c⁄√˘
(
rc
);

15 
⁄_mesßge
(c⁄° 
mosquôto_mesßge
 *
msg
);

18 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

20 
	}
}

22 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

24 if(
rc
){

25 
	`exô
(1);

27 
	}
}

29 
	gmosquôt›p_ã°
::
	$⁄_mesßge
(c⁄° 
mosquôto_mesßge
 *
msg
)

31 if(
msg
->
mid
 != 13423){

32 
	`¥ötf
("InvÆid mid (%d)\n", 
msg
->
mid
);

33 
	`exô
(1);

35 if(
msg
->
qos
 != 2){

36 
	`¥ötf
("InvÆid qo†(%d)\n", 
msg
->
qos
);

37 
	`exô
(1);

39 if(
	`°rcmp
(
msg
->
t›ic
, "pub/qos2/receive")){

40 
	`¥ötf
("InvÆidÅ›i¯(%s)\n", 
msg
->
t›ic
);

41 
	`exô
(1);

43 if(
	`°rcmp
((*)
msg
->
∑ylﬂd
, "message")){

44 
	`¥ötf
("InvÆidÖaylﬂd (%s)\n", (*)
msg
->
∑ylﬂd
);

45 
	`exô
(1);

47 if(
msg
->
∑ylﬂdÀn
 != 7){

48 
	`¥ötf
("InvÆidÖaylﬂdÀ¿(%d)\n", 
msg
->
∑ylﬂdÀn
);

49 
	`exô
(1);

51 if(
msg
->
ªèö
 !
Ál£
){

52 
	`¥ötf
("InvÆidÑëaö (%d)\n", 
msg
->
ªèö
);

53 
	`exô
(1);

56 
run
 = 0;

57 
	}
}

59 
	$maö
(
¨gc
, *
¨gv
[])

61 
mosquôt›p_ã°
 *
mosq
;

63 
p‹t
 = 
	`©oi
(
¨gv
[1]);

65 
mosqµ
::
	`lib_öô
();

67 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("publish-qos2-test");

68 
mosq
->
	`mesßge_ªåy_£t
(3);

70 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

72 
run
 == -1){

73 
mosq
->
	`lo›
();

76 
dñëe
 
mosq
;

77 
mosqµ
::
	`lib_˛ónup
();

79  
run
;

80 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/03-publish-c2b-qos1-disconnect.cpp

1 
	~<c°dlib
>

2 
	~<c°rög
>

4 
	~<mosquôt›p.h
>

6 
	grun
 = -1;

7 
	gfú°_c⁄√˘i⁄
 = 1;

9 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


11 
public
:

12 
mosquôt›p_ã°
(c⁄° *
id
);

14 
⁄_c⁄√˘
(
rc
);

15 
⁄_disc⁄√˘
(
rc
);

16 
⁄_publish
(
mid
);

19 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

21 
	}
}

23 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

25 if(
rc
){

26 
	`exô
(1);

28 if(
fú°_c⁄√˘i⁄
 == 1){

29 
	`publish
(
NULL
, "pub/qos1/ã°", 
	`°æí
("mesßge"), "mesßge", 1, 
Ál£
);

30 
fú°_c⁄√˘i⁄
 = 0;

33 
	}
}

35 
	gmosquôt›p_ã°
::
	$⁄_disc⁄√˘
(
rc
)

37 if(
rc
){

38 
	`ªc⁄√˘
();

40 
run
 = 0;

42 
	}
}

44 
	gmosquôt›p_ã°
::
	$⁄_publish
(
mid
)

46 
	`disc⁄√˘
();

47 
	}
}

49 
	$maö
(
¨gc
, *
¨gv
[])

51 
mosquôt›p_ã°
 *
mosq
;

53 
p‹t
 = 
	`©oi
(
¨gv
[1]);

55 
mosqµ
::
	`lib_öô
();

57 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("publish-qos1-test");

58 
mosq
->
	`mesßge_ªåy_£t
(3);

60 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

62 
run
 == -1){

63 
mosq
->
	`lo›
();

65 
dñëe
 
mosq
;

67 
dñëe
 
mosq
;

68 
mosqµ
::
	`lib_˛ónup
();

70  
run
;

71 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/03-publish-c2b-qos2-disconnect.cpp

1 
	~<c°dlib
>

2 
	~<c°rög
>

4 
	~<mosquôt›p.h
>

6 
	grun
 = -1;

7 
	gfú°_c⁄√˘i⁄
 = 1;

9 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


11 
public
:

12 
mosquôt›p_ã°
(c⁄° *
id
);

14 
⁄_c⁄√˘
(
rc
);

15 
⁄_disc⁄√˘
(
rc
);

16 
⁄_publish
(
mid
);

19 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

21 
	}
}

23 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

25 if(
rc
){

26 
	`exô
(1);

28 if(
fú°_c⁄√˘i⁄
 == 1){

29 
	`publish
(
NULL
, "pub/qos2/ã°", 
	`°æí
("mesßge"), "mesßge", 2, 
Ál£
);

30 
fú°_c⁄√˘i⁄
 = 0;

33 
	}
}

35 
	gmosquôt›p_ã°
::
	$⁄_disc⁄√˘
(
rc
)

37 if(
rc
){

38 
	`ªc⁄√˘
();

40 
run
 = 0;

42 
	}
}

44 
	gmosquôt›p_ã°
::
	$⁄_publish
(
mid
)

46 
	`disc⁄√˘
();

47 
	}
}

49 
	$maö
(
¨gc
, *
¨gv
[])

51 
mosquôt›p_ã°
 *
mosq
;

53 
p‹t
 = 
	`©oi
(
¨gv
[1]);

55 
mosqµ
::
	`lib_öô
();

57 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("publish-qos2-test");

58 
mosq
->
	`mesßge_ªåy_£t
(3);

60 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

62 
run
 == -1){

63 
mosq
->
	`lo›
();

65 
dñëe
 
mosq
;

67 
dñëe
 
mosq
;

68 
mosqµ
::
	`lib_˛ónup
();

70  
run
;

71 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/03-publish-c2b-qos2.cpp

1 
	~<c°dlib
>

2 
	~<c°rög
>

4 
	~<mosquôt›p.h
>

6 
	grun
 = -1;

8 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


10 
public
:

11 
mosquôt›p_ã°
(c⁄° *
id
);

13 
⁄_c⁄√˘
(
rc
);

14 
⁄_disc⁄√˘
(
rc
);

15 
⁄_publish
(
mid
);

18 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

20 
	}
}

22 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

24 if(
rc
){

25 
	`exô
(1);

27 
	`publish
(
NULL
, "pub/qos2/ã°", 
	`°æí
("mesßge"), "mesßge", 2, 
Ál£
);

29 
	}
}

31 
	gmosquôt›p_ã°
::
	$⁄_disc⁄√˘
(
rc
)

33 
run
 = 0;

34 
	}
}

36 
	gmosquôt›p_ã°
::
	$⁄_publish
(
mid
)

38 
	`disc⁄√˘
();

39 
	}
}

41 
	$maö
(
¨gc
, *
¨gv
[])

43 
mosquôt›p_ã°
 *
mosq
;

45 
p‹t
 = 
	`©oi
(
¨gv
[1]);

47 
mosqµ
::
	`lib_öô
();

49 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("publish-qos2-test");

51 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

53 
run
 == -1){

54 
mosq
->
	`lo›
();

57 
dñëe
 
mosq
;

58 
mosqµ
::
	`lib_˛ónup
();

60  
run
;

61 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/03-publish-qos0-no-payload.cpp

1 
	~<c°rög
>

3 
	~<mosquôt›p.h
>

5 
	grun
 = -1;

6 
	g£¡_mid
 = -1;

8 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


10 
public
:

11 
mosquôt›p_ã°
(c⁄° *
id
);

13 
⁄_c⁄√˘
(
rc
);

14 
⁄_publish
(
mid
);

17 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

19 
	}
}

21 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

23 if(
rc
){

24 
	`exô
(1);

26 
	`publish
(&
£¡_mid
, "pub/qos0/no-∑ylﬂd/ã°", 0, 
NULL
, 0, 
Ál£
);

28 
	}
}

30 
	gmosquôt›p_ã°
::
	$⁄_publish
(
mid
)

32 if(
£¡_mid
 =
mid
){

33 
	`disc⁄√˘
();

35 
	`exô
(1);

37 
	}
}

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
mosquôt›p_ã°
 *
mosq
;

43 
p‹t
 = 
	`©oi
(
¨gv
[1]);

45 
mosqµ
::
	`lib_öô
();

47 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("publish-qos0-test-np");

49 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

51 
run
 == -1){

52 
mosq
->
	`lo›
();

54 
dñëe
 
mosq
;

56 
dñëe
 
mosq
;

57 
mosqµ
::
	`lib_˛ónup
();

59  
run
;

60 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/03-publish-qos0.cpp

1 
	~<c°rög
>

3 
	~<mosquôt›p.h
>

5 
	grun
 = -1;

6 
	g£¡_mid
 = -1;

8 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


10 
public
:

11 
mosquôt›p_ã°
(c⁄° *
id
);

13 
⁄_c⁄√˘
(
rc
);

14 
⁄_publish
(
mid
);

17 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

19 
	}
}

21 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

23 if(
rc
){

24 
	`exô
(1);

26 
	`publish
(&
£¡_mid
, "pub/qos0/ã°", 
	`°æí
("mesßge"), "mesßge", 0, 
Ál£
);

28 
	}
}

30 
	gmosquôt›p_ã°
::
	$⁄_publish
(
mid
)

32 if(
£¡_mid
 =
mid
){

33 
	`disc⁄√˘
();

35 
	`exô
(1);

37 
	}
}

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
mosquôt›p_ã°
 *
mosq
;

43 
p‹t
 = 
	`©oi
(
¨gv
[1]);

45 
mosqµ
::
	`lib_öô
();

47 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("publish-qos0-test");

49 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

51 
run
 == -1){

52 
mosq
->
	`lo›
();

54 
dñëe
 
mosq
;

56 
dñëe
 
mosq
;

57 
mosqµ
::
	`lib_˛ónup
();

59  
run
;

60 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/04-retain-qos0.cpp

1 
	~<c°rög
>

3 
	~<mosquôt›p.h
>

5 
	grun
 = -1;

7 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


9 
public
:

10 
mosquôt›p_ã°
(c⁄° *
id
);

12 
⁄_c⁄√˘
(
rc
);

15 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

17 
	}
}

19 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

21 if(
rc
){

22 
	`exô
(1);

24 
	`publish
(
NULL
, "ªèö/qos0/ã°", 
	`°æí
("ªèöed mesßge"), "ªèöed mesßge", 0, 
åue
);

26 
	}
}

28 
	$maö
(
¨gc
, *
¨gv
[])

30 
mosquôt›p_ã°
 *
mosq
;

32 
p‹t
 = 
	`©oi
(
¨gv
[1]);

34 
mosqµ
::
	`lib_öô
();

36 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("retain-qos0-test");

38 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

40 
run
 == -1){

41 
mosq
->
	`lo›
();

43 
dñëe
 
mosq
;

45 
dñëe
 
mosq
;

46 
mosqµ
::
	`lib_˛ónup
();

48  
run
;

49 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/08-ssl-bad-cacert.cpp

1 
	~<mosquôt›p.h
>

3 
	grun
 = -1;

5 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


7 
public
:

8 
mosquôt›p_ã°
(c⁄° *
id
);

11 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

13 
	}
}

15 
	$maö
(
¨gc
, *
¨gv
[])

17 
mosquôt›p_ã°
 *
mosq
;

18 
rc
 = 1;

20 
mosqµ
::
	`lib_öô
();

22 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("08-ssl-bad-cacert");

24 
mosq
->
	`és_›ts_£t
(1, "ésv1", 
NULL
);

25 if(
mosq
->
	`és_£t
("this/fûe/d€¢t/exi°"Ë=
MOSQ_ERR_INVAL
){

26 
rc
 = 0;

28 
dñëe
 
mosq
;

29 
mosqµ
::
	`lib_˛ónup
();

31  
rc
;

32 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/08-ssl-connect-cert-auth-enc.cpp

1 
	~<c°rög
>

2 
	~<mosquôt›p.h
>

4 
	grun
 = -1;

6 
	$∑ssw‹d_ˇŒback
(* 
buf
, 
size
, 
rwÊag
, * 
u£rd©a
)

8 
	`°∫˝y
(
buf
, "∑ssw‹d", 
size
);

9 
buf
[
size
-1] = '\0';

11  
	`°æí
(
buf
);

12 
	}
}

14 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


16 
public
:

17 
mosquôt›p_ã°
(c⁄° *
id
);

19 
⁄_c⁄√˘
(
rc
);

20 
⁄_disc⁄√˘
(
rc
);

23 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

25 
	}
}

27 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

29 if(
rc
){

30 
	`exô
(1);

32 
	`disc⁄√˘
();

34 
	}
}

36 
	gmosquôt›p_ã°
::
	$⁄_disc⁄√˘
(
rc
)

38 
run
 = 
rc
;

39 
	}
}

42 
	$maö
(
¨gc
, *
¨gv
[])

44 
mosquôt›p_ã°
 *
mosq
;

46 
p‹t
 = 
	`©oi
(
¨gv
[1]);

48 
mosqµ
::
	`lib_öô
();

50 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("08-ssl-connect-crt-auth-enc");

52 
mosq
->
	`és_›ts_£t
(1, "ésv1", 
NULL
);

54 
mosq
->
	`és_£t
("../s¶/Æl-ˇ.¸t", 
NULL
, "../s¶/˛õ¡-í¸y±ed.¸t", "../s¶/˛õ¡-í¸y±ed.key", 
∑ssw‹d_ˇŒback
);

55 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

57 
run
 == -1){

58 
mosq
->
	`lo›
();

60 
dñëe
 
mosq
;

62 
dñëe
 
mosq
;

63 
mosqµ
::
	`lib_˛ónup
();

65  
run
;

66 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/08-ssl-connect-cert-auth.cpp

1 
	~<mosquôt›p.h
>

3 
	grun
 = -1;

5 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


7 
public
:

8 
mosquôt›p_ã°
(c⁄° *
id
);

10 
⁄_c⁄√˘
(
rc
);

11 
⁄_disc⁄√˘
(
rc
);

14 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

16 
	}
}

18 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

20 if(
rc
){

21 
	`exô
(1);

23 
	`disc⁄√˘
();

25 
	}
}

27 
	gmosquôt›p_ã°
::
	$⁄_disc⁄√˘
(
rc
)

29 
run
 = 
rc
;

30 
	}
}

33 
	$maö
(
¨gc
, *
¨gv
[])

35 
mosquôt›p_ã°
 *
mosq
;

37 
p‹t
 = 
	`©oi
(
¨gv
[1]);

39 
mosqµ
::
	`lib_öô
();

41 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("08-ssl-connect-crt-auth");

43 
mosq
->
	`és_›ts_£t
(1, "ésv1", 
NULL
);

45 
mosq
->
	`és_£t
("../s¶/Æl-ˇ.¸t", 
NULL
, "../ssl/client.crt", "../ssl/client.key");

46 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

48 
run
 == -1){

49 
mosq
->
	`lo›
();

51 
dñëe
 
mosq
;

53 
dñëe
 
mosq
;

54 
mosqµ
::
	`lib_˛ónup
();

56  
run
;

57 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/08-ssl-connect-no-auth.cpp

1 
	~<mosquôt›p.h
>

3 
	grun
 = -1;

5 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


7 
public
:

8 
mosquôt›p_ã°
(c⁄° *
id
);

10 
⁄_c⁄√˘
(
rc
);

11 
⁄_disc⁄√˘
(
rc
);

14 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

16 
	}
}

18 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

20 if(
rc
){

21 
	`exô
(1);

23 
	`disc⁄√˘
();

25 
	}
}

27 
	gmosquôt›p_ã°
::
	$⁄_disc⁄√˘
(
rc
)

29 
run
 = 
rc
;

30 
	}
}

33 
	$maö
(
¨gc
, *
¨gv
[])

35 
mosquôt›p_ã°
 *
mosq
;

37 
p‹t
 = 
	`©oi
(
¨gv
[1]);

39 
mosqµ
::
	`lib_öô
();

41 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("08-ssl-connect-no-auth");

43 
mosq
->
	`és_›ts_£t
(1, "ésv1", 
NULL
);

45 
mosq
->
	`és_£t
("../ssl/all-ca.crt");

46 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

48 
run
 == -1){

49 
mosq
->
	`lo›
();

51 
dñëe
 
mosq
;

53 
dñëe
 
mosq
;

54 
mosqµ
::
	`lib_˛ónup
();

56  
run
;

57 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/08-ssl-fake-cacert.cpp

1 
	~<î∫o.h
>

2 
	~<mosquôt›p.h
>

4 
	grun
 = -1;

6 ˛as†
	cmosquôt›p_ã°
 : 
public
 
mosqµ
::
mosquôt›p


8 
public
:

9 
mosquôt›p_ã°
(c⁄° *
id
);

11 
⁄_c⁄√˘
(
rc
);

14 
	gmosquôt›p_ã°
::
	$mosquôt›p_ã°
(c⁄° *
id
Ë: 
mosqµ
::
	$mosquôt›p
(
id
)

16 
	}
}

18 
mosquôt›p_ã°
::
	$⁄_c⁄√˘
(
rc
)

20 
	`exô
(1);

21 
	}
}

23 
	$maö
(
¨gc
, *
¨gv
[])

25 
mosquôt›p_ã°
 *
mosq
;

26 
rc
;

28 
p‹t
 = 
	`©oi
(
¨gv
[1]);

30 
mosqµ
::
	`lib_öô
();

32 
mosq
 = 
√w
 
	`mosquôt›p_ã°
("08-ssl-fake-cacert");

34 
mosq
->
	`és_›ts_£t
(1, "ésv1", 
NULL
);

35 
mosq
->
	`és_£t
("../s¶/ã°-Áke-roŸ-ˇ.¸t", 
NULL
, "../ssl/client.crt", "../ssl/client.key");

36 
mosq
->
	`c⁄√˘
("loˇlho°", 
p‹t
, 60);

38 
rc
 = 
mosq
->
	`lo›_f‹evî
();

39 
dñëe
 
mosq
;

40 
mosqµ
::
	`lib_˛ónup
();

41 if(
rc
 =
MOSQ_ERR_ERRNO
 && 
î∫o
 =
EPROTO
){

46 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/09-util-topic-tokenise.cpp

1 
	~<c°dio
>

2 
	~<c°rög
>

3 
	~<mosquôt›p.h
>

5 
	$¥öt_îr‹
(c⁄° *
t›ic
, **
t›ics
, 
t›ic_cou¡
)

7 
i
;

8 
	`¥ötf
("TOPIC: %s\n", 
t›ic
);

9 
	`¥ötf
("TOKENS: ");

10 
i
=0; i<
t›ic_cou¡
; i++){

11 
	`¥ötf
("%s", 
t›ics
[
i
]);

12 if(
i
+1<
t›ic_cou¡
){

13 
	`¥ötf
("/");

16 
	`¥ötf
("\n");

17 
	}
}

19 
	$maö
(
¨gc
, *
¨gv
[])

21 **
t›ics
;

22 
t›ic_cou¡
;

24 if(
mosqµ
::
	`sub_t›ic_tokíi£
("t›ic", &
t›ics
, &
t›ic_cou¡
)){

25 
	`¥ötf
("Out of memory.\n");

28 if(
t›ic_cou¡
 !1 || 
	`°rcmp
(
t›ics
[0], "topic")){

29 
	`¥öt_îr‹
("t›ic", 
t›ics
, 
t›ic_cou¡
);

32 
mosqµ
::
	`sub_t›ic_tokís_‰ì
(&
t›ics
, 
t›ic_cou¡
);

34 if(
mosqµ
::
	`sub_t›ic_tokíi£
("a/dìp/t›ic/hõørchy", &
t›ics
, &
t›ic_cou¡
)){

35 
	`¥ötf
("Out of memory.\n");

38 if(
t›ic_cou¡
 != 4

39 || 
	`°rcmp
(
t›ics
[0], "a")

40 || 
	`°rcmp
(
t›ics
[1], "deep")

41 || 
	`°rcmp
(
t›ics
[2], "topic")

42 || 
	`°rcmp
(
t›ics
[3], "hierarchy")){

43 
	`¥öt_îr‹
("a/dìp/t›ic/hõørchy", 
t›ics
, 
t›ic_cou¡
);

46 
mosqµ
::
	`sub_t›ic_tokís_‰ì
(&
t›ics
, 
t›ic_cou¡
);

48 if(
mosqµ
::
	`sub_t›ic_tokíi£
("/a/dìp/t›ic/hõørchy", &
t›ics
, &
t›ic_cou¡
)){

49 
	`¥ötf
("Out of memory.\n");

52 if(
t›ic_cou¡
 != 5

53 || 
t›ics
[0]

54 || 
	`°rcmp
(
t›ics
[1], "a")

55 || 
	`°rcmp
(
t›ics
[2], "deep")

56 || 
	`°rcmp
(
t›ics
[3], "topic")

57 || 
	`°rcmp
(
t›ics
[4], "hierarchy")){

58 
	`¥öt_îr‹
("/a/dìp/t›ic/hõørchy", 
t›ics
, 
t›ic_cou¡
);

61 
mosqµ
::
	`sub_t›ic_tokís_‰ì
(&
t›ics
, 
t›ic_cou¡
);

63 if(
mosqµ
::
	`sub_t›ic_tokíi£
("a/b/c", &
t›ics
, &
t›ic_cou¡
)){

64 
	`¥ötf
("Out of memory.\n");

67 if(
t›ic_cou¡
 != 3

68 || 
	`°rcmp
(
t›ics
[0], "a")

69 || 
	`°rcmp
(
t›ics
[1], "b")

70 || 
	`°rcmp
(
t›ics
[2], "c")){

71 
	`¥öt_îr‹
("a/b/c", 
t›ics
, 
t›ic_cou¡
);

74 
mosqµ
::
	`sub_t›ic_tokís_‰ì
(&
t›ics
, 
t›ic_cou¡
);

76 if(
mosqµ
::
	`sub_t›ic_tokíi£
("/a/b/c", &
t›ics
, &
t›ic_cou¡
)){

77 
	`¥ötf
("Out of memory.\n");

80 if(
t›ic_cou¡
 != 4

81 || 
t›ics
[0]

82 || 
	`°rcmp
(
t›ics
[1], "a")

83 || 
	`°rcmp
(
t›ics
[2], "b")

84 || 
	`°rcmp
(
t›ics
[3], "c")){

85 
	`¥öt_îr‹
("/a/b/c", 
t›ics
, 
t›ic_cou¡
);

88 
mosqµ
::
	`sub_t›ic_tokís_‰ì
(&
t›ics
, 
t›ic_cou¡
);

90 if(
mosqµ
::
	`sub_t›ic_tokíi£
("a///hõørchy", &
t›ics
, &
t›ic_cou¡
)){

91 
	`¥ötf
("Out of memory.\n");

94 if(
t›ic_cou¡
 != 4

95 || 
	`°rcmp
(
t›ics
[0], "a")

96 || 
t›ics
[1]

97 || 
t›ics
[2]

98 || 
	`°rcmp
(
t›ics
[3], "hierarchy")){

99 
	`¥öt_îr‹
("a///hõørchy", 
t›ics
, 
t›ic_cou¡
);

102 
mosqµ
::
	`sub_t›ic_tokís_‰ì
(&
t›ics
, 
t›ic_cou¡
);

104 if(
mosqµ
::
	`sub_t›ic_tokíi£
("/a///hõørchy", &
t›ics
, &
t›ic_cou¡
)){

105 
	`¥ötf
("Out of memory.\n");

108 if(
t›ic_cou¡
 != 5

109 || 
t›ics
[0]

110 || 
	`°rcmp
(
t›ics
[1], "a")

111 || 
t›ics
[2]

112 || 
t›ics
[3]

113 || 
	`°rcmp
(
t›ics
[4], "hierarchy")){

114 
	`¥öt_îr‹
("/a///hõørchy", 
t›ics
, 
t›ic_cou¡
);

117 
mosqµ
::
	`sub_t›ic_tokís_‰ì
(&
t›ics
, 
t›ic_cou¡
);

119 if(
mosqµ
::
	`sub_t›ic_tokíi£
("/a///hõørchy/", &
t›ics
, &
t›ic_cou¡
)){

120 
	`¥ötf
("Out of memory.\n");

123 if(
t›ic_cou¡
 != 6

124 || 
t›ics
[0]

125 || 
	`°rcmp
(
t›ics
[1], "a")

126 || 
t›ics
[2]

127 || 
t›ics
[3]

128 || 
	`°rcmp
(
t›ics
[4], "hierarchy")

129 || 
t›ics
[3]){

130 
	`¥öt_îr‹
("/a///hõørchy/", 
t›ics
, 
t›ic_cou¡
);

133 
mosqµ
::
	`sub_t›ic_tokís_‰ì
(&
t›ics
, 
t›ic_cou¡
);

136 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/old/msgsps_common.h

1 
	#HOST
 "127.0.0.1"

	)

2 
	#PORT
 1883

	)

4 
	#PUB_QOS
 1

	)

5 
	#SUB_QOS
 1

	)

6 
	#MESSAGE_SIZE
 1024L

	)

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/old/msgsps_pub.c

3 
	~<°dboﬁ.h
>

4 
	~<°döt.h
>

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<uni°d.h
>

8 
	~<mosquôto.h
>

9 
	~<°d©omic.h
>

11 
	~<msg•s_comm⁄.h
>

13 
©omic_öt
 
	gmesßge_cou¡
 = 0;

15 
	$my_publish_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
mid
)

17 
mesßge_cou¡
++;

18 
	}
}

20 
	$maö
(
¨gc
, *
¨gv
[])

22 
mosquôto
 *
mosq
;

23 
i
;

24 
uöt8_t
 
buf
[
MESSAGE_SIZE
];

26 
	`mosquôto_lib_öô
();

28 
mosq
 = 
	`mosquôto_√w
(
NULL
, 
åue
, NULL);

29 
	`mosquôto_publish_ˇŒback_£t
(
mosq
, 
my_publish_ˇŒback
);

30 
	`mosquôto_c⁄√˘
(
mosq
, 
HOST
, 
PORT
, 600);

31 
	`mosquôto_lo›_°¨t
(
mosq
);

33 
i
=0;

35 
	`mosquôto_publish
(
mosq
, 
NULL
, "≥rf/ã°", (
buf
), buf, 
PUB_QOS
, 
Ál£
);

36 
	`u¶ìp
(100);

37 
i
++;

38 if(
i
 == 10000){

40 
i
 = 
mesßge_cou¡
;

41 
mesßge_cou¡
 = 0;

42 
	`¥ötf
("%d\n", 
i
);

43 
i
 = 0;

46 
	`mosquôto_lo›_°›
(
mosq
, 
Ál£
);

47 
	`mosquôto_de°roy
(
mosq
);

48 
	`mosquôto_lib_˛ónup
();

51 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/old/msgsps_sub.c

3 
	~<°dboﬁ.h
>

4 
	~<°döt.h
>

5 
	~<°dio.h
>

6 
	~<sys/time.h
>

7 
	~<uni°d.h
>

8 
	~<mosquôto.h
>

9 
	~<°d©omic.h
>

11 
	~<msg•s_comm⁄.h
>

13 
©omic_öt
 
	gmesßge_cou¡
 = 0;

15 
	$my_mesßge_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
msg
)

17 
mesßge_cou¡
++;

18 
	}
}

20 
	$maö
(
¨gc
, *
¨gv
[])

22 
mosquôto
 *
mosq
;

23 
c
;

25 
	`mosquôto_lib_öô
();

27 
mosq
 = 
	`mosquôto_√w
(
NULL
, 
åue
, NULL);

28 
	`mosquôto_mesßge_ˇŒback_£t
(
mosq
, 
my_mesßge_ˇŒback
);

30 
	`mosquôto_c⁄√˘
(
mosq
, 
HOST
, 
PORT
, 600);

31 
	`mosquôto_subs¸ibe
(
mosq
, 
NULL
, "≥rf/ã°", 
SUB_QOS
);

33 
	`mosquôto_lo›_°¨t
(
mosq
);

35 
	`¶ìp
(1);

36 
c
 = 
mesßge_cou¡
;

37 
mesßge_cou¡
 = 0;

38 
	`¥ötf
("%d\n", 
c
);

42 
	`mosquôto_de°roy
(
mosq
);

43 
	`mosquôto_lib_˛ónup
();

46 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/random/auth_plugin.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<time.h
>

4 
	~<mosquôto.h
>

5 
	~<mosquôto_brokî.h
>

6 
	~<mosquôto_∂ugö.h
>

8 
	$mosquôto_auth_∂ugö_vîsi⁄
()

10  
MOSQ_AUTH_PLUGIN_VERSION
;

11 
	}
}

13 
	$mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

15 
	`§™dom
(
	`time
(
NULL
));

16  
MOSQ_ERR_SUCCESS
;

17 
	}
}

19 
	$mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
)

21  
MOSQ_ERR_SUCCESS
;

22 
	}
}

24 
	$mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

26  
MOSQ_ERR_SUCCESS
;

27 
	}
}

29 
	$mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
auth_›ts
, 
auth_›t_cou¡
, 
boﬁ
 
ªlﬂd
)

31  
MOSQ_ERR_SUCCESS
;

32 
	}
}

34 
	$mosquôto_auth_a˛_check
(*
u£r_d©a
, 
ac˚ss
, 
mosquôto
 *
˛õ¡
, c⁄° 
mosquôto_a˛_msg
 *
msg
)

36 if(
	`øndom
() % 2 == 0){

37  
MOSQ_ERR_SUCCESS
;

39  
MOSQ_ERR_ACL_DENIED
;

41 
	}
}

43 
	$mosquôto_auth_u≈wd_check
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
)

45 if(
	`øndom
() % 2 == 0){

46  
MOSQ_ERR_SUCCESS
;

48  
MOSQ_ERR_AUTH
;

50 
	}
}

52 
	$mosquôto_auth_psk_key_gë
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
)

54  
MOSQ_ERR_AUTH
;

55 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/bridge_topic_test.c

1 
	~"c⁄fig.h
"

2 
	~<°dio.h
>

4 
	~<CUnô/CUnô.h
>

5 
	~<CUnô/Basic.h
>

7 
	#WITH_BRIDGE


	)

8 
	#WITH_BROKER


	)

10 
	~"mosquôto_brokî_öã∫Æ.h
"

11 
	~"¥›îty_mosq.h
"

12 
	~"∑ckë_mosq.h
"

14 
	$m≠_vÆid_hñ≥r
(c⁄° *
t›ic
, c⁄° *
loˇl_¥efix
, c⁄° *
ªmŸe_¥efix
, c⁄° *
öcomög
, c⁄° *
ex≥˘ed
)

16 
mosquôto
 
mosq
;

17 
mosquôto__bridge
 
bridge
;

18 *
m≠_t›ic
;

19 
rc
;

21 
	`mem£t
(&
mosq
, 0, (
mosquôto
));

22 
	`mem£t
(&
bridge
, 0, (
mosquôto__bridge
));

24 
mosq
.
bridge
 = &bridge;

26 
rc
 = 
	`bridge__add_t›ic
(&
bridge
, 
t›ic
, 
bd_ö
, 0, 
loˇl_¥efix
, 
ªmŸe_¥efix
);

27 
	`CU_ASSERT_EQUAL
(
rc
, 0);

29 
m≠_t›ic
 = 
	`°rdup
(
öcomög
);

30 
rc
 = 
	`bridge__ªm≠_t›ic_ö
(&
mosq
, &
m≠_t›ic
);

31 
	`CU_ASSERT_EQUAL
(
rc
, 0);

32 
	`CU_ASSERT_PTR_NOT_NULL
(
m≠_t›ic
);

33 if(
t›ic
){

34 
	`CU_ASSERT_STRING_EQUAL
(
m≠_t›ic
, 
ex≥˘ed
);

35 
	`‰ì
(
m≠_t›ic
);

37 
	}
}

39 
	$m≠_övÆid_hñ≥r
(c⁄° *
t›ic
, c⁄° *
loˇl_¥efix
, c⁄° *
ªmŸe_¥efix
)

41 
mosquôto
 
mosq
;

42 
mosquôto__bridge
 
bridge
;

43 
rc
;

45 
	`mem£t
(&
mosq
, 0, (
mosquôto
));

46 
	`mem£t
(&
bridge
, 0, (
mosquôto__bridge
));

48 
mosq
.
bridge
 = &bridge;

50 
rc
 = 
	`bridge__add_t›ic
(&
bridge
, 
t›ic
, 
bd_ö
, 0, 
loˇl_¥efix
, 
ªmŸe_¥efix
);

51 
	`CU_ASSERT_NOT_EQUAL
(
rc
, 0);

52 
	}
}

55 
	$TEST_ªm≠_vÆid
()

58 
	`m≠_vÆid_hñ≥r
("pattern", "L/", "R/", "R/pattern", "L/pattern");

59 
	`m≠_vÆid_hñ≥r
("∑âîn", "L/", 
NULL
, "pattern", "L/pattern");

60 
	`m≠_vÆid_hñ≥r
("∑âîn", 
NULL
, "R/", "R/pattern", "pattern");

61 
	`m≠_vÆid_hñ≥r
("∑âîn", 
NULL
, NULL, "pattern", "pattern");

62 
	`m≠_vÆid_hñ≥r
(
NULL
, "local", "remote", "local", "remote");

63 
	}
}

65 
	$TEST_ªm≠_övÆid
()

68 
	`m≠_övÆid_hñ≥r
(
NULL
, "L/", NULL);

69 
	`m≠_övÆid_hñ≥r
(
NULL
, NULL, "R/");

70 
	`m≠_övÆid_hñ≥r
(
NULL
, NULL, NULL);

71 
	}
}

78 
	$öô_bridge_ã°s
()

80 
CU_pSuôe
 
ã°_suôe
 = 
NULL
;

82 
ã°_suôe
 = 
	`CU_add_suôe
("Bridgêªm≠", 
NULL
, NULL);

83 if(!
ã°_suôe
){

84 
	`¥ötf
("Errorádding CUnit BridgeÑemapÅest suite.\n");

89 || !
	`CU_add_ã°
(
ã°_suôe
, "Rem≠ vÆid", 
TEST_ªm≠_vÆid
)

90 || !
	`CU_add_ã°
(
ã°_suôe
, "Rem≠ invÆid", 
TEST_ªm≠_övÆid
)

93 
	`¥ötf
("Errorádding BridgeÑemap CUnitÅests.\n");

98 
	}
}

100 
	$maö
(
¨gc
, *
¨gv
[])

102 
Áûs
;

104 
	`UNUSED
(
¨gc
);

105 
	`UNUSED
(
¨gv
);

107 if(
	`CU_öôülize_ªgi°ry
(Ë!
CUE_SUCCESS
){

108 
	`¥ötf
("Error initializing CUnitÑegistry.\n");

113 || 
	`öô_bridge_ã°s
()

116 
	`CU_˛ónup_ªgi°ry
();

120 
	`CU_basic_£t_mode
(
CU_BRM_VERBOSE
);

121 
	`CU_basic_run_ã°s
();

122 
Áûs
 = 
	`CU_gë_numbî_of_Áûuªs
();

123 
	`CU_˛ónup_ªgi°ry
();

125  ()
Áûs
;

126 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/datatype_read.c

1 
	~<CUnô/CUnô.h
>

2 
	~<CUnô/Basic.h
>

4 
	~"∑ckë_mosq.h
"

6 
	$byã_ªad_hñ≥r
(

7 
uöt8_t
 *
∑ylﬂd
,

8 
uöt32_t
 
ªmaöög_Àngth
,

9 
rc_ex≥˘ed
,

10 
uöt8_t
 
vÆue_ex≥˘ed
)

12 
mosquôto__∑ckë
 
∑ckë
;

13 
uöt8_t
 
vÆue
 = 0;

14 
rc
;

16 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

17 
∑ckë
.
∑ylﬂd
 =Öayload;

18 
∑ckë
.
ªmaöög_Àngth
 =Ñemaining_length;

19 
rc
 = 
	`∑ckë__ªad_byã
(&
∑ckë
, &
vÆue
);

20 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

21 
	`CU_ASSERT_EQUAL
(
vÆue
, 
vÆue_ex≥˘ed
);

22 
	}
}

25 
	$uöt16_ªad_hñ≥r
(

26 
uöt8_t
 *
∑ylﬂd
,

27 
uöt32_t
 
ªmaöög_Àngth
,

28 
rc_ex≥˘ed
,

29 
uöt16_t
 
vÆue_ex≥˘ed
)

31 
mosquôto__∑ckë
 
∑ckë
;

32 
uöt16_t
 
vÆue
 = 0;

33 
rc
;

35 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

36 
∑ckë
.
∑ylﬂd
 =Öayload;

37 
∑ckë
.
ªmaöög_Àngth
 =Ñemaining_length;

38 
rc
 = 
	`∑ckë__ªad_uöt16
(&
∑ckë
, &
vÆue
);

39 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

40 
	`CU_ASSERT_EQUAL
(
vÆue
, 
vÆue_ex≥˘ed
);

41 
	}
}

44 
	$uöt32_ªad_hñ≥r
(

45 
uöt8_t
 *
∑ylﬂd
,

46 
uöt32_t
 
ªmaöög_Àngth
,

47 
rc_ex≥˘ed
,

48 
uöt32_t
 
vÆue_ex≥˘ed
)

50 
mosquôto__∑ckë
 
∑ckë
;

51 
uöt32_t
 
vÆue
 = 0;

52 
rc
;

54 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

55 
∑ckë
.
∑ylﬂd
 =Öayload;

56 
∑ckë
.
ªmaöög_Àngth
 =Ñemaining_length;

57 
rc
 = 
	`∑ckë__ªad_uöt32
(&
∑ckë
, &
vÆue
);

58 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

59 
	`CU_ASSERT_EQUAL
(
vÆue
, 
vÆue_ex≥˘ed
);

60 
	}
}

63 
	$v¨öt_ªad_hñ≥r
(

64 
uöt8_t
 *
∑ylﬂd
,

65 
uöt32_t
 
ªmaöög_Àngth
,

66 
rc_ex≥˘ed
,

67 
uöt32_t
 
vÆue_ex≥˘ed
,

68 
uöt8_t
 
byãs_ex≥˘ed
)

70 
mosquôto__∑ckë
 
∑ckë
;

71 
uöt32_t
 
vÆue
 = 
UINT32_MAX
;

72 
uöt8_t
 
byãs
 = 
UINT8_MAX
;

73 
rc
;

75 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

76 
∑ckë
.
∑ylﬂd
 =Öayload;

77 
∑ckë
.
ªmaöög_Àngth
 =Ñemaining_length;

78 
rc
 = 
	`∑ckë__ªad_v¨öt
(&
∑ckë
, &
vÆue
, &
byãs
);

79 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

80 
	`CU_ASSERT_EQUAL
(
vÆue
, 
vÆue_ex≥˘ed
);

81 
	`CU_ASSERT_EQUAL
(
byãs
, 
byãs_ex≥˘ed
);

82 
	}
}

85 
	$bö¨y_ªad_hñ≥r
(

86 
uöt8_t
 *
∑ylﬂd
,

87 
uöt32_t
 
ªmaöög_Àngth
,

88 
rc_ex≥˘ed
,

89 c⁄° 
uöt8_t
 *
vÆue_ex≥˘ed
,

90 
Àngth_ex≥˘ed
)

92 
mosquôto__∑ckë
 
∑ckë
;

93 
uöt8_t
 *
vÆue
 = 
NULL
;

94 
uöt16_t
 
Àngth
 = 
UINT16_MAX
;

95 
rc
;

97 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

98 
∑ckë
.
∑ylﬂd
 =Öayload;

99 
∑ckë
.
ªmaöög_Àngth
 =Ñemaining_length;

100 
rc
 = 
	`∑ckë__ªad_bö¨y
(&
∑ckë
, (
uöt8_t
 **)&
vÆue
, &
Àngth
);

101 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

102 if(
vÆue_ex≥˘ed
){

104 
	`CU_ASSERT_NSTRING_EQUAL
(
vÆue
, 
vÆue_ex≥˘ed
, 
Àngth_ex≥˘ed
);

106 
	`CU_ASSERT_EQUAL
(
vÆue
, 
NULL
);

108 
	`CU_ASSERT_EQUAL
(
Àngth
, 
Àngth_ex≥˘ed
);

109 
	`‰ì
(
vÆue
);

110 
	}
}

113 
	$°rög_ªad_hñ≥r
(

114 
uöt8_t
 *
∑ylﬂd
,

115 
uöt32_t
 
ªmaöög_Àngth
,

116 
rc_ex≥˘ed
,

117 c⁄° 
uöt8_t
 *
vÆue_ex≥˘ed
,

118 
uöt16_t
 
Àngth_ex≥˘ed
)

120 
mosquôto__∑ckë
 
∑ckë
;

121 
uöt8_t
 *
vÆue
 = 
NULL
;

122 
uöt16_t
 
Àngth
 = 
UINT16_MAX
;

123 
rc
;

125 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

126 
∑ckë
.
∑ylﬂd
 =Öayload;

127 
∑ckë
.
ªmaöög_Àngth
 =Ñemaining_length;

128 
rc
 = 
	`∑ckë__ªad_°rög
(&
∑ckë
, (**)&
vÆue
, &
Àngth
);

129 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

130 if(
vÆue_ex≥˘ed
){

131 if(
vÆue
){

132 
	`CU_ASSERT_NSTRING_EQUAL
(
vÆue
, 
vÆue_ex≥˘ed
, 
Àngth_ex≥˘ed
);

135 
	`CU_ASSERT_PTR_NULL
(
vÆue
);

137 
	`CU_ASSERT_EQUAL
(
Àngth
, 
Àngth_ex≥˘ed
);

138 
	`‰ì
(
vÆue
);

139 
	}
}

142 
	$byãs_ªad_hñ≥r
(

143 
uöt8_t
 *
∑ylﬂd
,

144 
uöt32_t
 
ªmaöög_Àngth
,

145 
rc_ex≥˘ed
,

146 c⁄° 
uöt8_t
 *
vÆue_ex≥˘ed
,

147 
cou¡
)

149 
mosquôto__∑ckë
 
∑ckë
;

150 
uöt8_t
 
vÆue
[
cou¡
];

151 
rc
;

152 
i
;

154 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

155 
∑ckë
.
∑ylﬂd
 =Öayload;

156 
∑ckë
.
ªmaöög_Àngth
 =Ñemaining_length;

157 
rc
 = 
	`∑ckë__ªad_byãs
(&
∑ckë
, 
vÆue
, (
uöt32_t
)
cou¡
);

158 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

159 if(
rc
 =
MOSQ_ERR_SUCCESS
){

160 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 
cou¡
);

162 if(
vÆue_ex≥˘ed
){

163 
i
=0; i<
cou¡
; i++){

164 
	`CU_ASSERT_EQUAL
(
vÆue
[
i
], 
vÆue_ex≥˘ed
[i]);

167 
	}
}

179 
	$TEST_byã_ªad_em±y
()

182 
	`byã_ªad_hñ≥r
(
NULL
, 0, 
MOSQ_ERR_MALFORMED_PACKET
, 0);

183 
	}
}

191 
	$TEST_byã_ªad_suc˚ss
()

193 
uöt8_t
 
∑ylﬂd
[20];

196 
	`mem£t
(
∑ylﬂd
, 0, (payload));

197 
∑ylﬂd
[0] = 0x00;

198 
	`byã_ªad_hñ≥r
(
∑ylﬂd
, 1, 
MOSQ_ERR_SUCCESS
, 0x00);

201 
	`mem£t
(
∑ylﬂd
, 0, (payload));

202 
∑ylﬂd
[0] = 0x1F;

203 
	`byã_ªad_hñ≥r
(
∑ylﬂd
, 1, 
MOSQ_ERR_SUCCESS
, 0x1F);

206 
	`mem£t
(
∑ylﬂd
, 0, (payload));

207 
∑ylﬂd
[0] = 0xFF;

208 
	`byã_ªad_hñ≥r
(
∑ylﬂd
, 1, 
MOSQ_ERR_SUCCESS
, 0xFF);

210 
	}
}

222 
	$TEST_uöt16_ªad_em±y
()

225 
	`uöt16_ªad_hñ≥r
(
NULL
, 0, 
MOSQ_ERR_MALFORMED_PACKET
, 0);

226 
	}
}

234 
	$TEST_uöt16_ªad_åunˇãd
()

236 
uöt8_t
 
∑ylﬂd
[20];

239 
	`mem£t
(
∑ylﬂd
, 0, (payload));

240 
∑ylﬂd
[0] = 0x38;

241 
	`uöt16_ªad_hñ≥r
(
∑ylﬂd
, 1, 
MOSQ_ERR_MALFORMED_PACKET
, 0);

242 
	}
}

251 
	$TEST_uöt16_ªad_suc˚ss
()

253 
uöt8_t
 
∑ylﬂd
[20];

256 
	`mem£t
(
∑ylﬂd
, 0, (payload));

257 
∑ylﬂd
[0] = 0x00;

258 
∑ylﬂd
[1] = 0x00;

259 
	`uöt16_ªad_hñ≥r
(
∑ylﬂd
, 2, 
MOSQ_ERR_SUCCESS
, 0x0000);

262 
	`mem£t
(
∑ylﬂd
, 0, (payload));

263 
∑ylﬂd
[0] = 0x38;

264 
∑ylﬂd
[1] = 0xF3;

265 
	`uöt16_ªad_hñ≥r
(
∑ylﬂd
, 2, 
MOSQ_ERR_SUCCESS
, 0x38F3);

268 
	`mem£t
(
∑ylﬂd
, 0, (payload));

269 
∑ylﬂd
[0] = 0xFF;

270 
∑ylﬂd
[1] = 0xFF;

271 
	`uöt16_ªad_hñ≥r
(
∑ylﬂd
, 2, 
MOSQ_ERR_SUCCESS
, 0xFFFF);

273 
	}
}

285 
	$TEST_uöt32_ªad_em±y
()

288 
	`uöt32_ªad_hñ≥r
(
NULL
, 0, 
MOSQ_ERR_MALFORMED_PACKET
, 0);

289 
	}
}

297 
	$TEST_uöt32_ªad_åunˇãd
()

299 
uöt8_t
 
∑ylﬂd
[20];

302 
	`mem£t
(
∑ylﬂd
, 0, (payload));

303 
∑ylﬂd
[0] = 0x38;

304 
	`uöt32_ªad_hñ≥r
(
∑ylﬂd
, 1, 
MOSQ_ERR_MALFORMED_PACKET
, 0);

307 
	`mem£t
(
∑ylﬂd
, 0, (payload));

308 
∑ylﬂd
[0] = 0x38;

309 
∑ylﬂd
[1] = 0x38;

310 
	`uöt32_ªad_hñ≥r
(
∑ylﬂd
, 2, 
MOSQ_ERR_MALFORMED_PACKET
, 0);

313 
	`mem£t
(
∑ylﬂd
, 0, (payload));

314 
∑ylﬂd
[0] = 0x38;

315 
∑ylﬂd
[1] = 0x38;

316 
∑ylﬂd
[2] = 0x38;

317 
	`uöt32_ªad_hñ≥r
(
∑ylﬂd
, 3, 
MOSQ_ERR_MALFORMED_PACKET
, 0);

318 
	}
}

327 
	$TEST_uöt32_ªad_suc˚ss
()

329 
uöt8_t
 
∑ylﬂd
[20];

332 
	`mem£t
(
∑ylﬂd
, 0, (payload));

333 
∑ylﬂd
[0] = 0x00;

334 
∑ylﬂd
[1] = 0x00;

335 
∑ylﬂd
[2] = 0x00;

336 
∑ylﬂd
[3] = 0x00;

337 
	`uöt32_ªad_hñ≥r
(
∑ylﬂd
, 4, 
MOSQ_ERR_SUCCESS
, 0x00000000);

340 
	`mem£t
(
∑ylﬂd
, 0, (payload));

341 
∑ylﬂd
[0] = 0x12;

342 
∑ylﬂd
[1] = 0x34;

343 
∑ylﬂd
[2] = 0x56;

344 
∑ylﬂd
[3] = 0x78;

345 
	`uöt32_ªad_hñ≥r
(
∑ylﬂd
, 4, 
MOSQ_ERR_SUCCESS
, 0x12345678);

348 
	`mem£t
(
∑ylﬂd
, 0, (payload));

349 
∑ylﬂd
[0] = 0xFF;

350 
∑ylﬂd
[1] = 0xFF;

351 
∑ylﬂd
[2] = 0xFF;

352 
∑ylﬂd
[3] = 0xFF;

353 
	`uöt32_ªad_hñ≥r
(
∑ylﬂd
, 4, 
MOSQ_ERR_SUCCESS
, 0xFFFFFFFF);

355 
	}
}

367 
	$TEST_v¨öt_ªad_em±y
()

370 
	`v¨öt_ªad_hñ≥r
(
NULL
, 0, 
MOSQ_ERR_MALFORMED_PACKET
, 
UINT32_MAX
, 
UINT8_MAX
);

371 
	}
}

379 
	$TEST_v¨öt_ªad_åunˇãd
()

381 
uöt8_t
 
∑ylﬂd
[20];

384 
	`mem£t
(
∑ylﬂd
, 0, (payload));

385 
∑ylﬂd
[0] = 0x80;

386 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 1, 
MOSQ_ERR_MALFORMED_PACKET
, 
UINT32_MAX
, 
UINT8_MAX
);

389 
	`mem£t
(
∑ylﬂd
, 1, (payload));

390 
∑ylﬂd
[0] = 0x80;

391 
∑ylﬂd
[1] = 0x80;

392 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 2, 
MOSQ_ERR_MALFORMED_PACKET
, 
UINT32_MAX
, 
UINT8_MAX
);

395 
	`mem£t
(
∑ylﬂd
, 0, (payload));

396 
∑ylﬂd
[0] = 0x80;

397 
∑ylﬂd
[1] = 0x80;

398 
∑ylﬂd
[2] = 0x80;

399 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 3, 
MOSQ_ERR_MALFORMED_PACKET
, 
UINT32_MAX
, 
UINT8_MAX
);

402 
	`mem£t
(
∑ylﬂd
, 0, (payload));

403 
∑ylﬂd
[0] = 0x80;

404 
∑ylﬂd
[1] = 0x80;

405 
∑ylﬂd
[2] = 0x80;

406 
∑ylﬂd
[3] = 0x80;

407 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 4, 
MOSQ_ERR_MALFORMED_PACKET
, 
UINT32_MAX
, 
UINT8_MAX
);

408 
	}
}

416 
	$TEST_v¨öt_ªad_bound¨õs
()

418 
uöt8_t
 
∑ylﬂd
[20];

421 
	`mem£t
(
∑ylﬂd
, 0, (payload));

422 
∑ylﬂd
[0] = 0x00;

423 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 1, 
MOSQ_ERR_SUCCESS
, 0, 1);

426 
	`mem£t
(
∑ylﬂd
, 0, (payload));

427 
∑ylﬂd
[0] = 0x7F;

428 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 1, 
MOSQ_ERR_SUCCESS
, 127, 1);

431 
	`mem£t
(
∑ylﬂd
, 0, (payload));

432 
∑ylﬂd
[0] = 0x80;

433 
∑ylﬂd
[1] = 0x01;

434 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 2, 
MOSQ_ERR_SUCCESS
, 128, 2);

437 
	`mem£t
(
∑ylﬂd
, 0, (payload));

438 
∑ylﬂd
[0] = 0xFF;

439 
∑ylﬂd
[1] = 0x7F;

440 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 2, 
MOSQ_ERR_SUCCESS
, 16383, 2);

443 
	`mem£t
(
∑ylﬂd
, 0, (payload));

444 
∑ylﬂd
[0] = 0x80;

445 
∑ylﬂd
[1] = 0x80;

446 
∑ylﬂd
[2] = 0x01;

447 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 3, 
MOSQ_ERR_SUCCESS
, 16384, 3);

450 
	`mem£t
(
∑ylﬂd
, 0, (payload));

451 
∑ylﬂd
[0] = 0xFF;

452 
∑ylﬂd
[1] = 0xFF;

453 
∑ylﬂd
[2] = 0x7F;

454 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 3, 
MOSQ_ERR_SUCCESS
, 2097151, 3);

457 
	`mem£t
(
∑ylﬂd
, 0, (payload));

458 
∑ylﬂd
[0] = 0x80;

459 
∑ylﬂd
[1] = 0x80;

460 
∑ylﬂd
[2] = 0x80;

461 
∑ylﬂd
[3] = 0x01;

462 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 4, 
MOSQ_ERR_SUCCESS
, 2097152, 4);

465 
	`mem£t
(
∑ylﬂd
, 0, (payload));

466 
∑ylﬂd
[0] = 0xFF;

467 
∑ylﬂd
[1] = 0xFF;

468 
∑ylﬂd
[2] = 0xFF;

469 
∑ylﬂd
[3] = 0x7F;

470 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 4, 
MOSQ_ERR_SUCCESS
, 268435455, 4);

471 
	}
}

478 
	$TEST_v¨öt_ªad_5_byãs
()

480 
uöt8_t
 
∑ylﬂd
[20];

483 
	`mem£t
(
∑ylﬂd
, 0, (payload));

484 
∑ylﬂd
[0] = 0x80;

485 
∑ylﬂd
[1] = 0x80;

486 
∑ylﬂd
[2] = 0x80;

487 
∑ylﬂd
[3] = 0x80;

488 
∑ylﬂd
[4] = 0x01;

489 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 5, 
MOSQ_ERR_MALFORMED_PACKET
, 
UINT32_MAX
, 
UINT8_MAX
);

490 
	}
}

498 
	$TEST_v¨öt_ªad_ovîl⁄g_ícodög
()

500 
uöt8_t
 
∑ylﬂd
[20];

503 
	`mem£t
(
∑ylﬂd
, 0, (payload));

504 
∑ylﬂd
[0] = 0x80;

505 
∑ylﬂd
[1] = 0x00;

506 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 2, 
MOSQ_ERR_MALFORMED_PACKET
, 
UINT32_MAX
, 
UINT8_MAX
);

509 
	`mem£t
(
∑ylﬂd
, 0, (payload));

510 
∑ylﬂd
[0] = 0xFF;

511 
∑ylﬂd
[1] = 0x00;

512 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 2, 
MOSQ_ERR_MALFORMED_PACKET
, 
UINT32_MAX
, 
UINT8_MAX
);

515 
	`mem£t
(
∑ylﬂd
, 0, (payload));

516 
∑ylﬂd
[0] = 0x80;

517 
∑ylﬂd
[1] = 0x81;

518 
∑ylﬂd
[2] = 0x00;

519 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 3, 
MOSQ_ERR_MALFORMED_PACKET
, 
UINT32_MAX
, 
UINT8_MAX
);

522 
	`mem£t
(
∑ylﬂd
, 0, (payload));

523 
∑ylﬂd
[0] = 0xFF;

524 
∑ylﬂd
[1] = 0xFF;

525 
∑ylﬂd
[2] = 0x00;

526 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 3, 
MOSQ_ERR_MALFORMED_PACKET
, 
UINT32_MAX
, 
UINT8_MAX
);

529 
	`mem£t
(
∑ylﬂd
, 0, (payload));

530 
∑ylﬂd
[0] = 0x80;

531 
∑ylﬂd
[1] = 0x80;

532 
∑ylﬂd
[2] = 0x81;

533 
∑ylﬂd
[3] = 0x00;

534 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 4, 
MOSQ_ERR_MALFORMED_PACKET
, 
UINT32_MAX
, 
UINT8_MAX
);

537 
	`mem£t
(
∑ylﬂd
, 0, (payload));

538 
∑ylﬂd
[0] = 0xFF;

539 
∑ylﬂd
[1] = 0xFF;

540 
∑ylﬂd
[2] = 0xFF;

541 
∑ylﬂd
[3] = 0x00;

542 
	`v¨öt_ªad_hñ≥r
(
∑ylﬂd
, 4, 
MOSQ_ERR_MALFORMED_PACKET
, 
UINT32_MAX
, 
UINT8_MAX
);

543 
	}
}

555 
	$TEST_°rög_ªad_em±y
()

557 
	`°rög_ªad_hñ≥r
(
NULL
, 0, 
MOSQ_ERR_MALFORMED_PACKET
, NULL, 
UINT16_MAX
);

558 
	}
}

565 
	$TEST_°rög_ªad_åunˇãd
()

567 
uöt8_t
 
∑ylﬂd
[20];

570 
	`mem£t
(
∑ylﬂd
, 0, (payload));

571 
∑ylﬂd
[0] = 0x02;

572 
	`°rög_ªad_hñ≥r
(
∑ylﬂd
, 1, 
MOSQ_ERR_MALFORMED_PACKET
, 
NULL
, 
UINT16_MAX
);

575 
	`mem£t
(
∑ylﬂd
, 0, (payload));

576 
∑ylﬂd
[0] = 0x02;

577 
∑ylﬂd
[1] = 0x02;

578 
	`°rög_ªad_hñ≥r
(
∑ylﬂd
, 2, 
MOSQ_ERR_MALFORMED_PACKET
, 
NULL
, 
UINT16_MAX
);

581 
	`mem£t
(
∑ylﬂd
, 0, (payload));

582 
∑ylﬂd
[0] = 0x00;

583 
∑ylﬂd
[1] = 0x02;

584 
∑ylﬂd
[2] = 'a';

585 
	`°rög_ªad_hñ≥r
(
∑ylﬂd
, 3, 
MOSQ_ERR_MALFORMED_PACKET
, 
NULL
, 
UINT16_MAX
);

588 
	`mem£t
(
∑ylﬂd
, 0, (payload));

589 
∑ylﬂd
[0] = 0x00;

590 
∑ylﬂd
[1] = 0x03;

591 
∑ylﬂd
[2] = 'a';

592 
∑ylﬂd
[3] = 'b';

593 
	`°rög_ªad_hñ≥r
(
∑ylﬂd
, 4, 
MOSQ_ERR_MALFORMED_PACKET
, 
NULL
, 
UINT16_MAX
);

594 
	}
}

602 
	$TEST_°rög_ªad_em±y_°rög
()

604 
uöt8_t
 
∑ylﬂd
[20];

606 
	`mem£t
(
∑ylﬂd
, 0, (payload));

607 
∑ylﬂd
[0] = 0x00;

608 
∑ylﬂd
[1] = 0x00;

609 
	`°rög_ªad_hñ≥r
(
∑ylﬂd
, 2, 
MOSQ_ERR_SUCCESS
, (c⁄° 
uöt8_t
 *)"", 0);

610 
	}
}

617 
	$TEST_°rög_ªad_vÆid_°rög
()

619 
uöt8_t
 
∑ylﬂd
[20];

621 
	`mem£t
(
∑ylﬂd
, 0, (payload));

622 
∑ylﬂd
[0] = 0x00;

623 
∑ylﬂd
[1] = 0x0b;

624 
∑ylﬂd
[2] = 't';

625 
∑ylﬂd
[3] = 'e';

626 
∑ylﬂd
[4] = 's';

627 
∑ylﬂd
[5] = 't';

628 
∑ylﬂd
[6] = ' ';

629 
∑ylﬂd
[7] = 's';

630 
∑ylﬂd
[8] = 't';

631 
∑ylﬂd
[9] = 'r';

632 
∑ylﬂd
[10] = 'i';

633 
∑ylﬂd
[11] = 'n';

634 
∑ylﬂd
[12] = 'g';

635 
	`°rög_ªad_hñ≥r
(
∑ylﬂd
, 13, 
MOSQ_ERR_SUCCESS
, (c⁄° 
uöt8_t
 *)"test string", 11);

636 
	}
}

644 
	$TEST_°rög_ªad_mÆf‹med_°rög
()

646 
uöt8_t
 
∑ylﬂd
[20];

648 
	`mem£t
(
∑ylﬂd
, 0, (payload));

649 
∑ylﬂd
[0] = 0x00;

650 
∑ylﬂd
[1] = 0x07;

651 
∑ylﬂd
[2] = 't';

652 
∑ylﬂd
[3] = 'e';

653 
∑ylﬂd
[4] = 's';

654 
∑ylﬂd
[5] = 't';

655 
∑ylﬂd
[6] = 0xED;

656 
∑ylﬂd
[7] = 0xA0;

657 
∑ylﬂd
[8] = 0x80;

658 
	`°rög_ªad_hñ≥r
(
∑ylﬂd
, 9, 
MOSQ_ERR_MALFORMED_UTF8
, 
NULL
, 0);

659 
	}
}

667 
	$TEST_°rög_ªad_mqâ_1_5_4_3
()

669 
uöt8_t
 
∑ylﬂd
[20];

671 
	`mem£t
(
∑ylﬂd
, 0, (payload));

672 
∑ylﬂd
[0] = 0x00;

673 
∑ylﬂd
[1] = 0x0b;

674 
∑ylﬂd
[2] = 't';

675 
∑ylﬂd
[3] = 'e';

676 
∑ylﬂd
[4] = 's';

677 
∑ylﬂd
[5] = 't';

678 
∑ylﬂd
[6] = 0xEF;

679 
∑ylﬂd
[7] = 0xBB;

680 
∑ylﬂd
[8] = 0xBF;

681 
∑ylﬂd
[9] = 't';

682 
∑ylﬂd
[10] = 'e';

683 
∑ylﬂd
[11] = 's';

684 
∑ylﬂd
[12] = 't';

685 
	`°rög_ªad_hñ≥r
(
∑ylﬂd
, 13, 
MOSQ_ERR_SUCCESS
, &payload[2], 11);

686 
	}
}

698 
	$TEST_bö¨y_d©a_ªad_em±y
()

700 
	`bö¨y_ªad_hñ≥r
(
NULL
, 0, 
MOSQ_ERR_MALFORMED_PACKET
, NULL, 
UINT16_MAX
);

701 
	}
}

709 
	$TEST_bö¨y_d©a_ªad_åunˇãd
()

711 
uöt8_t
 
∑ylﬂd
[20];

714 
	`mem£t
(
∑ylﬂd
, 0, (payload));

715 
∑ylﬂd
[0] = 0x02;

716 
	`bö¨y_ªad_hñ≥r
(
∑ylﬂd
, 1, 
MOSQ_ERR_MALFORMED_PACKET
, 
NULL
, 
UINT16_MAX
);

719 
	`mem£t
(
∑ylﬂd
, 0, (payload));

720 
∑ylﬂd
[0] = 0x02;

721 
∑ylﬂd
[1] = 0x02;

722 
	`bö¨y_ªad_hñ≥r
(
∑ylﬂd
, 2, 
MOSQ_ERR_MALFORMED_PACKET
, 
NULL
, 
UINT16_MAX
);

725 
	`mem£t
(
∑ylﬂd
, 0, (payload));

726 
∑ylﬂd
[0] = 0x00;

727 
∑ylﬂd
[1] = 0x02;

728 
∑ylﬂd
[2] = 'a';

729 
	`bö¨y_ªad_hñ≥r
(
∑ylﬂd
, 3, 
MOSQ_ERR_MALFORMED_PACKET
, 
NULL
, 
UINT16_MAX
);

732 
	`mem£t
(
∑ylﬂd
, 0, (payload));

733 
∑ylﬂd
[0] = 0x00;

734 
∑ylﬂd
[1] = 0x03;

735 
∑ylﬂd
[2] = 'a';

736 
∑ylﬂd
[3] = 'b';

737 
	`bö¨y_ªad_hñ≥r
(
∑ylﬂd
, 4, 
MOSQ_ERR_MALFORMED_PACKET
, 
NULL
, 
UINT16_MAX
);

738 
	}
}

750 
	$TEST_byãs_ªad_em±y
()

753 
	`byãs_ªad_hñ≥r
(
NULL
, 0, 
MOSQ_ERR_SUCCESS
, NULL, 0);

754 
	}
}

761 
	$TEST_byãs_ªad_åunˇãd
()

763 
	`byãs_ªad_hñ≥r
(
NULL
, 0, 
MOSQ_ERR_MALFORMED_PACKET
, NULL, 1);

764 
	}
}

771 
	$TEST_byãs_ªad_suc˚ss
()

773 
uöt8_t
 
∑ylﬂd
[20];

774 
uöt8_t
 
i
;

776 
i
=0; i<20; i++){

777 
∑ylﬂd
[
i
] = (
uöt8_t
)(i*2);

779 
	`byãs_ªad_hñ≥r
(
∑ylﬂd
, 20, 
MOSQ_ERR_SUCCESS
,Öayload, 20);

780 
	}
}

787 
	$öô_d©©y≥_ªad_ã°s
()

789 
CU_pSuôe
 
ã°_suôe
 = 
NULL
;

791 
ã°_suôe
 = 
	`CU_add_suôe
("D©©y≥Ñód", 
NULL
, NULL);

792 if(!
ã°_suôe
){

793 
	`¥ötf
("Errorádding CUnitÅest suite.\n");

798 || !
	`CU_add_ã°
(
ã°_suôe
, "ByãÑód (em±yÖackë)", 
TEST_byã_ªad_em±y
)

799 || !
	`CU_add_ã°
(
ã°_suôe
, "ByãÑód (suc˚s†vÆues)", 
TEST_byã_ªad_suc˚ss
)

800 || !
	`CU_add_ã°
(
ã°_suôe
, "TwÿByã I¡egîÑód (em±yÖackë)", 
TEST_uöt16_ªad_em±y
)

801 || !
	`CU_add_ã°
(
ã°_suôe
, "TwÿByã I¡egîÑód (åunˇãdÖackë)", 
TEST_uöt16_ªad_åunˇãd
)

802 || !
	`CU_add_ã°
(
ã°_suôe
, "TwÿByã I¡egîÑód (suc˚s†vÆues)", 
TEST_uöt16_ªad_suc˚ss
)

803 || !
	`CU_add_ã°
(
ã°_suôe
, "Fou∏Byã I¡egîÑód (em±yÖackë)", 
TEST_uöt32_ªad_em±y
)

804 || !
	`CU_add_ã°
(
ã°_suôe
, "Fou∏Byã I¡egîÑód (åunˇãdÖackë)", 
TEST_uöt32_ªad_åunˇãd
)

805 || !
	`CU_add_ã°
(
ã°_suôe
, "Fou∏Byã I¡egîÑód (suc˚s†vÆues)", 
TEST_uöt32_ªad_suc˚ss
)

806 || !
	`CU_add_ã°
(
ã°_suôe
, "V¨übÀ Byã I¡egîÑód (em±yÖackë)", 
TEST_v¨öt_ªad_em±y
)

807 || !
	`CU_add_ã°
(
ã°_suôe
, "V¨übÀ Byã I¡egîÑód (åunˇãdÖackës)", 
TEST_v¨öt_ªad_åunˇãd
)

808 || !
	`CU_add_ã°
(
ã°_suôe
, "V¨übÀ Byã I¡egîÑód (ícodög bound¨õs)", 
TEST_v¨öt_ªad_bound¨õs
)

809 || !
	`CU_add_ã°
(
ã°_suôe
, "V¨übÀ Byã I¡egîÑód (fivêbyãÉncodög)", 
TEST_v¨öt_ªad_5_byãs
)

810 || !
	`CU_add_ã°
(
ã°_suôe
, "V¨übÀ Byã I¡egîÑód (ovîl⁄gÉncodögs)", 
TEST_v¨öt_ªad_ovîl⁄g_ícodög
)

811 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8 såögÑód (em±yÖackë)", 
TEST_°rög_ªad_em±y
)

812 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8 såögÑód (åunˇãdÖackë)", 
TEST_°rög_ªad_åunˇãd
)

813 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8 såögÑód (em±y såög)", 
TEST_°rög_ªad_em±y_°rög
)

814 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8 såögÑód (vÆid såög)", 
TEST_°rög_ªad_vÆid_°rög
)

815 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8 såögÑód (mÆf‹med såög)", 
TEST_°rög_ªad_mÆf‹med_°rög
)

816 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8 såögÑód (MQTT-1.5.4-3)", 
TEST_°rög_ªad_mqâ_1_5_4_3
)

817 || !
	`CU_add_ã°
(
ã°_suôe
, "Bö¨y D©®ªad (em±yÖackë)", 
TEST_bö¨y_d©a_ªad_em±y
)

818 || !
	`CU_add_ã°
(
ã°_suôe
, "Bö¨y D©®ªad (åunˇãdÖackë)", 
TEST_bö¨y_d©a_ªad_åunˇãd
)

819 || !
	`CU_add_ã°
(
ã°_suôe
, "Byã†ªad (em±yÖackë)", 
TEST_byãs_ªad_em±y
)

820 || !
	`CU_add_ã°
(
ã°_suôe
, "Byã†ªad (åunˇãdÖackë)", 
TEST_byãs_ªad_åunˇãd
)

821 || !
	`CU_add_ã°
(
ã°_suôe
, "Byã†ªad (suc˚ss)", 
TEST_byãs_ªad_suc˚ss
)

824 
	`¥ötf
("Errorádding DatatypeÑead CUnitÅests.\n");

829 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/datatype_write.c

1 
	~<CUnô/CUnô.h
>

2 
	~<CUnô/Basic.h
>

4 
	~<¨∑/öë.h
>

6 
	~"∑ckë_mosq.h
"

13 
	$TEST_byã_wrôe
()

15 
uöt8_t
 
∑ylﬂd
[260];

16 
mosquôto__∑ckë
 
∑ckë
;

17 
i
;

19 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

20 
	`mem£t
(
∑ylﬂd
, 0, (payload));

21 
∑ckë
.
∑ylﬂd
 =Öayload;

22 
∑ckë
.
∑ckë_Àngth
 = 256;

24 
i
=0; i<256; i++){

25 
	`∑ckë__wrôe_byã
(&
∑ckë
, (
uöt8_t
)(255-
i
));

28 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 256);

29 
i
=0; i<256; i++){

30 
	`CU_ASSERT_EQUAL
(
∑ylﬂd
[
i
], (
uöt8_t
)(255-i));

32 
	}
}

40 
	$TEST_uöt16_wrôe
()

42 
uöt8_t
 
∑ylﬂd
[650];

43 
uöt16_t
 *
∑ylﬂd16
;

44 
mosquôto__∑ckë
 
∑ckë
;

45 
i
;

47 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

48 
	`mem£t
(
∑ylﬂd
, 0, (payload));

49 
∑ckë
.
∑ylﬂd
 =Öayload;

50 
∑ckë
.
∑ckë_Àngth
 = 650;

52 
i
=0; i<325; i++){

53 
	`∑ckë__wrôe_uöt16
(&
∑ckë
, (
uöt16_t
)(100*
i
));

56 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 650);

57 
∑ylﬂd16
 = (
uöt16_t
 *)
∑ylﬂd
;

58 
i
=0; i<325; i++){

59 
	`CU_ASSERT_EQUAL
(
∑ylﬂd16
[
i
], 
	`ht⁄s
((
uöt16_t
)(100*i)));

61 
	}
}

69 
	$TEST_uöt32_wrôe
()

71 
uöt8_t
 *
∑ylﬂd
;

72 
uöt32_t
 *
∑ylﬂd32
;

73 
mosquôto__∑ckë
 
∑ckë
;

74 
i
;

76 
∑ylﬂd
 = 
	`ˇŒoc
(42000, (
uöt32_t
));

77 if(!
∑ylﬂd
){

78 
	`CU_FAIL_FATAL
("Out of memory");

81 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

82 
∑ckë
.
∑ylﬂd
 =Öayload;

83 
∑ckë
.
∑ckë_Àngth
 = 42000;

85 
i
=0; i<10500; i++){

86 
	`∑ckë__wrôe_uöt32
(&
∑ckë
, (
uöt32_t
)(1000*
i
));

89 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 42000);

90 
∑ylﬂd32
 = (
uöt32_t
 *)
∑ylﬂd
;

91 
i
=0; i<10500; i++){

92 
	`CU_ASSERT_EQUAL
(
∑ylﬂd32
[
i
], 
	`ht⁄l
((
uöt32_t
)(1000*i)));

94 
	`‰ì
(
∑ylﬂd
);

95 
	}
}

103 
	$TEST_°rög_wrôe
()

105 
uöt8_t
 
∑ylﬂd
[100];

106 
mosquôto__∑ckë
 
∑ckë
;

108 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

109 
	`mem£t
(
∑ylﬂd
, 0, 100);

111 
∑ckë
.
∑ylﬂd
 =Öayload;

112 
∑ckë
.
∑ckë_Àngth
 = 100;

114 
	`∑ckë__wrôe_°rög
(&
∑ckë
, "fú°Åe°", 
	`°æí
("firstÅest"));

115 
	`∑ckë__wrôe_°rög
(&
∑ckë
, "£c⁄dÅe°", 
	`°æí
("secondÅest"));

117 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 2+10+2+11);

118 
	`CU_ASSERT_EQUAL
(
∑ylﬂd
[0], 0);

119 
	`CU_ASSERT_EQUAL
(
∑ylﬂd
[1], 10);

120 
	`CU_ASSERT_NSTRING_EQUAL
(
∑ylﬂd
+2, "firstÅest", 10);

121 
	`CU_ASSERT_EQUAL
(
∑ylﬂd
[2+10+0], 0);

122 
	`CU_ASSERT_EQUAL
(
∑ylﬂd
[2+10+1], 11);

123 
	`CU_ASSERT_NSTRING_EQUAL
(
∑ylﬂd
+2+10+2, "secondÅest", 11);

124 
	}
}

131 
	$öô_d©©y≥_wrôe_ã°s
()

133 
CU_pSuôe
 
ã°_suôe
 = 
NULL
;

135 
ã°_suôe
 = 
	`CU_add_suôe
("D©©y≥ wrôe", 
NULL
, NULL);

136 if(!
ã°_suôe
){

137 
	`¥ötf
("Errorádding CUnitÅest suite.\n");

142 || !
	`CU_add_ã°
(
ã°_suôe
, "Byã wrôe", 
TEST_byã_wrôe
)

143 || !
	`CU_add_ã°
(
ã°_suôe
, "TwÿByã I¡egî wrôe", 
TEST_uöt16_wrôe
)

144 || !
	`CU_add_ã°
(
ã°_suôe
, "Fou∏Byã I¡egî wrôe", 
TEST_uöt32_wrôe
)

145 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8 Såög wrôe", 
TEST_°rög_wrôe
)

148 
	`¥ötf
("Errorádding Datatype write CUnitÅests.\n");

153 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/misc_trim_test.c

1 
	~<CUnô/CUnô.h
>

2 
	~<CUnô/Basic.h
>

4 
	~<misc_mosq.h
>

7 
	$πrim_hñ≥r
(c⁄° *
ex≥˘ed
, *
buf
)

9 *
ªs
;

11 
ªs
 = 
	`misc__åimbœnks
(
buf
);

12 
	`CU_ASSERT_PTR_NOT_NULL
(
ªs
);

13 if(
ªs
){

14 
	`CU_ASSERT_EQUAL
(
	`°æí
(
buf
), såÀn(
ªs
));

15 
	`CU_ASSERT_STRING_EQUAL
(
ªs
, 
ex≥˘ed
);

16 
	`CU_ASSERT_PTR_EQUAL
(
ªs
, 
buf
);

18 
	}
}

21 
	$…rim_hñ≥r
(c⁄° *
ex≥˘ed
, *
buf
)

23 *
ªs
;

25 
ªs
 = 
	`misc__åimbœnks
(
buf
);

26 
	`CU_ASSERT_PTR_NOT_NULL
(
ªs
);

27 if(
ªs
){

28 
	`CU_ASSERT_EQUAL
(
	`°æí
(
ex≥˘ed
), såÀn(
ªs
));

29 
	`CU_ASSERT_STRING_EQUAL
(
ªs
, 
ex≥˘ed
);

31 
	}
}

34 
	$TEST_nuŒ_öput
()

36 *
ªs
;

38 
ªs
 = 
	`misc__åimbœnks
(
NULL
);

39 
	`CU_ASSERT_PTR_NULL
(
ªs
);

40 
	}
}

43 
	$TEST_em±y_öput
()

45 
buf
[10];

46 *
ªs
;

48 
	`mem£t
(
buf
, 0, (buf));

49 
ªs
 = 
	`misc__åimbœnks
(
buf
);

50 
	`CU_ASSERT_PTR_NOT_NULL
(
ªs
);

51 if(
ªs
){

52 
	`CU_ASSERT_STRING_EQUAL
(
ªs
, "");

54 
	}
}

57 
	$TEST_no_bœnks
()

59 
buf
[10] = "noblanks";

61 
	`πrim_hñ≥r
("nobœnks", 
buf
);

62 
	}
}

65 
	$TEST_πrim
()

67 
buf1
[20] = "spaces ";

68 
buf2
[20] = "spaces ";

69 
buf3
[20] = "spaces ";

70 
buf4
[20] = "spaces ";

71 
buf5
[20] = "tabs\t";

72 
buf6
[20] = "tabs\t\t";

73 
buf7
[20] = "tabs\t\t\t";

74 
buf8
[20] = "tabs\t\t\t\t";

75 
buf9
[20] = "mixed \t";

76 
buf10
[20] = "mixed\t ";

77 
buf11
[20] = "mixed\t\t ";

78 
buf12
[20] = "mixed \t \t ";

80 
	`πrim_hñ≥r
("•a˚s", 
buf1
);

81 
	`πrim_hñ≥r
("•a˚s", 
buf2
);

82 
	`πrim_hñ≥r
("•a˚s", 
buf3
);

83 
	`πrim_hñ≥r
("•a˚s", 
buf4
);

84 
	`πrim_hñ≥r
("èbs", 
buf5
);

85 
	`πrim_hñ≥r
("èbs", 
buf6
);

86 
	`πrim_hñ≥r
("èbs", 
buf7
);

87 
	`πrim_hñ≥r
("èbs", 
buf8
);

88 
	`πrim_hñ≥r
("mixed", 
buf9
);

89 
	`πrim_hñ≥r
("mixed", 
buf10
);

90 
	`πrim_hñ≥r
("mixed", 
buf11
);

91 
	`πrim_hñ≥r
("mixed", 
buf12
);

92 
	}
}

95 
	$TEST_…rim
()

97 
buf1
[20] = " spaces";

98 
buf2
[20] = " spaces";

99 
buf3
[20] = " spaces";

100 
buf4
[20] = " spaces";

101 
buf5
[20] = "\ttabs";

102 
buf6
[20] = "\t\ttabs";

103 
buf7
[20] = "\t\t\ttabs";

104 
buf8
[20] = "\t\t\t\ttabs";

105 
buf9
[20] = "\t mixed";

106 
buf10
[20] = " \tmixed";

107 
buf11
[20] = " \t\tmixed";

108 
buf12
[20] = "\t \t mixed";

110 
	`…rim_hñ≥r
("•a˚s", 
buf1
);

111 
	`…rim_hñ≥r
("•a˚s", 
buf2
);

112 
	`…rim_hñ≥r
("•a˚s", 
buf3
);

113 
	`…rim_hñ≥r
("•a˚s", 
buf4
);

114 
	`…rim_hñ≥r
("èbs", 
buf5
);

115 
	`…rim_hñ≥r
("èbs", 
buf6
);

116 
	`…rim_hñ≥r
("èbs", 
buf7
);

117 
	`…rim_hñ≥r
("èbs", 
buf8
);

118 
	`…rim_hñ≥r
("mixed", 
buf9
);

119 
	`…rim_hñ≥r
("mixed", 
buf10
);

120 
	`…rim_hñ≥r
("mixed", 
buf11
);

121 
	`…rim_hñ≥r
("mixed", 
buf12
);

122 
	}
}

125 
	$TEST_båim
()

127 
buf1
[20] = " spaces ";

128 
buf2
[20] = " spaces ";

129 
buf3
[20] = " spaces ";

130 
buf4
[20] = " spaces ";

131 
buf5
[20] = "\ttabs\t";

132 
buf6
[20] = "\t\ttabs\t\t";

133 
buf7
[20] = "\t\t\ttabs\t\t\t";

134 
buf8
[20] = "\t\t\t\ttabs\t\t\t\t";

135 
buf9
[20] = "\t mixed \t";

136 
buf10
[20] = " \tmixed\t ";

137 
buf11
[20] = " \t\tmixed\t\t ";

138 
buf12
[20] = "\t \t mixed \t \t ";

140 
	`…rim_hñ≥r
("•a˚s", 
buf1
);

141 
	`…rim_hñ≥r
("•a˚s", 
buf2
);

142 
	`…rim_hñ≥r
("•a˚s", 
buf3
);

143 
	`…rim_hñ≥r
("•a˚s", 
buf4
);

144 
	`…rim_hñ≥r
("èbs", 
buf5
);

145 
	`…rim_hñ≥r
("èbs", 
buf6
);

146 
	`…rim_hñ≥r
("èbs", 
buf7
);

147 
	`…rim_hñ≥r
("èbs", 
buf8
);

148 
	`…rim_hñ≥r
("mixed", 
buf9
);

149 
	`…rim_hñ≥r
("mixed", 
buf10
);

150 
	`…rim_hñ≥r
("mixed", 
buf11
);

151 
	`…rim_hñ≥r
("mixed", 
buf12
);

152 
	}
}

159 
	$öô_misc_åim_ã°s
()

161 
CU_pSuôe
 
ã°_suôe
 = 
NULL
;

163 
ã°_suôe
 = 
	`CU_add_suôe
("Mis¯°rögÅrim", 
NULL
, NULL);

164 if(!
ã°_suôe
){

165 
	`¥ötf
("Errorádding CUnit Misc stringÅrimÅest suite.\n");

170 || !
	`CU_add_ã°
(
ã°_suôe
, "NuŒ i≈ut", 
TEST_nuŒ_öput
)

171 || !
	`CU_add_ã°
(
ã°_suôe
, "Em±y i≈ut", 
TEST_em±y_öput
)

172 || !
	`CU_add_ã°
(
ã°_suôe
, "Nÿbœnks", 
TEST_no_bœnks
)

173 || !
	`CU_add_ã°
(
ã°_suôe
, "Righàåim", 
TEST_πrim
)

174 || !
	`CU_add_ã°
(
ã°_suôe
, "Le·Årim", 
TEST_…rim
)

175 || !
	`CU_add_ã°
(
ã°_suôe
, "BŸhÅrim", 
TEST_båim
)

178 
	`¥ötf
("Errorádding MiscÅopic CUnitÅests.\n");

183 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/persist_read_stubs.c

1 
	~<time.h
>

3 
	#WITH_BROKER


	)

5 
	~<loggög_mosq.h
>

6 
	~<mem‹y_mosq.h
>

7 
	~<mosquôto_brokî_öã∫Æ.h
>

8 
	~<√t_mosq.h
>

9 
	~<£nd_mosq.h
>

10 
	~<time_mosq.h
>

12 *
œ°_sub
;

13 
œ°_qos
;

14 
uöt32_t
 
œ°_idítifõr
;

15 
mosquôto_db
 
db
;

17 
mosquôto
 *
	$c⁄ãxt__öô
(
mosq_sock_t
 
sock
)

19 
mosquôto
 *
m
;

21 
	`UNUSED
(
sock
);

23 
m
 = 
	`mosquôto__ˇŒoc
(1, (
mosquôto
));

24 if(
m
){

25 
m
->
msgs_ö
.
öÊight_maximum
 = 20;

26 
m
->
msgs_out
.
öÊight_maximum
 = 20;

27 
m
->
msgs_ö
.
öÊight_quŸa
 = 20;

28 
m
->
msgs_out
.
öÊight_quŸa
 = 20;

30  
m
;

31 
	}
}

33 
	$db__msg_°‹e_‰ì
(
mosquôto_msg_°‹e
 *
°‹e
)

35 
i
;

37 
	`mosquôto__‰ì
(
°‹e
->
sour˚_id
);

38 
	`mosquôto__‰ì
(
°‹e
->
sour˚_u£∫ame
);

39 if(
°‹e
->
de°_ids
){

40 
i
=0; i<
°‹e
->
de°_id_cou¡
; i++){

41 
	`mosquôto__‰ì
(
°‹e
->
de°_ids
[
i
]);

43 
	`mosquôto__‰ì
(
°‹e
->
de°_ids
);

45 
	`mosquôto__‰ì
(
°‹e
->
t›ic
);

46 
	`mosquôto_¥›îty_‰ì_Æl
(&
°‹e
->
¥›îtõs
);

47 
	`mosquôto__‰ì
(
°‹e
->
∑ylﬂd
);

48 
	`mosquôto__‰ì
(
°‹e
);

49 
	}
}

51 
	$db__mesßge_°‹e
(c⁄° 
mosquôto
 *
sour˚
, 
mosquôto_msg_°‹e
 *
°‹ed
, 
uöt32_t
 
mesßge_expúy_öãrvÆ
, 
dbid_t
 
°‹e_id
, 
mosquôto_msg_‹igö
 
‹igö
)

53 
rc
 = 
MOSQ_ERR_SUCCESS
;

55 
	`UNUSED
(
‹igö
);

57 if(
sour˚
 && sour˚->
id
){

58 
°‹ed
->
sour˚_id
 = 
	`mosquôto__°rdup
(
sour˚
->
id
);

60 
°‹ed
->
sour˚_id
 = 
	`mosquôto__°rdup
("");

62 if(!
°‹ed
->
sour˚_id
){

63 
rc
 = 
MOSQ_ERR_NOMEM
;

64 
îr‹
;

67 if(
sour˚
 && sour˚->
u£∫ame
){

68 
°‹ed
->
sour˚_u£∫ame
 = 
	`mosquôto__°rdup
(
sour˚
->
u£∫ame
);

69 if(!
°‹ed
->
sour˚_u£∫ame
){

70 
rc
 = 
MOSQ_ERR_NOMEM
;

71 
îr‹
;

74 if(
sour˚
){

75 
°‹ed
->
sour˚_li°íî
 = 
sour˚
->
li°íî
;

77 
°‹ed
->
mid
 = 0;

78 if(
mesßge_expúy_öãrvÆ
 > 0){

79 
°‹ed
->
mesßge_expúy_time
 = 
	`time
(
NULL
Ë+ 
mesßge_expúy_öãrvÆ
;

81 
°‹ed
->
mesßge_expúy_time
 = 0;

84 
°‹ed
->
de°_ids
 = 
NULL
;

85 
°‹ed
->
de°_id_cou¡
 = 0;

86 
db
.
msg_°‹e_cou¡
++;

87 
db
.
msg_°‹e_byãs
 +
°‹ed
->
∑ylﬂdÀn
;

89 if(!
°‹e_id
){

90 
°‹ed
->
db_id
 = ++
db
.
œ°_db_id
;

92 
°‹ed
->
db_id
 = 
°‹e_id
;

95 
db
.
msg_°‹e
 = 
°‹ed
;

97  
MOSQ_ERR_SUCCESS
;

98 
îr‹
:

99 
	`db__msg_°‹e_‰ì
(
°‹ed
);

100  
rc
;

101 
	}
}

103 
	$log__¥ötf
(
mosquôto
 *
mosq
, 
¥i‹ôy
, c⁄° *
fmt
, ...)

105 
	`UNUSED
(
mosq
);

106 
	`UNUSED
(
¥i‹ôy
);

107 
	`UNUSED
(
fmt
);

110 
	}
}

112 
time_t
 
	$mosquôto_time
()

115 
	}
}

117 
	$√t__sockë_˛o£
(
mosquôto
 *
mosq
)

119 
	`UNUSED
(
mosq
);

121  
MOSQ_ERR_SUCCESS
;

122 
	}
}

124 
	$£nd__pögªq
(
mosquôto
 *
mosq
)

126 
	`UNUSED
(
mosq
);

128  
MOSQ_ERR_SUCCESS
;

129 
	}
}

131 
	$mosquôto_a˛_check
(
mosquôto
 *
c⁄ãxt
, c⁄° *
t›ic
, 
uöt32_t
 
∑ylﬂdÀn
, * 
∑ylﬂd
, 
uöt8_t
 
qos
, 
boﬁ
 
ªèö
, 
ac˚ss
)

133 
	`UNUSED
(
c⁄ãxt
);

134 
	`UNUSED
(
t›ic
);

135 
	`UNUSED
(
∑ylﬂdÀn
);

136 
	`UNUSED
(
∑ylﬂd
);

137 
	`UNUSED
(
qos
);

138 
	`UNUSED
(
ªèö
);

139 
	`UNUSED
(
ac˚ss
);

141  
MOSQ_ERR_SUCCESS
;

142 
	}
}

144 
	$a˛__föd_a˛s
(
mosquôto
 *
c⁄ãxt
)

146 
	`UNUSED
(
c⁄ãxt
);

148  
MOSQ_ERR_SUCCESS
;

149 
	}
}

152 
	$sub__add
(
mosquôto
 *
c⁄ãxt
, c⁄° *
sub
, 
uöt8_t
 
qos
, 
uöt32_t
 
idítifõr
, 
›ti⁄s
, 
mosquôto__subhõr
 **
roŸ
)

154 
	`UNUSED
(
c⁄ãxt
);

155 
	`UNUSED
(
›ti⁄s
);

156 
	`UNUSED
(
roŸ
);

158 
œ°_sub
 = 
	`°rdup
(
sub
);

159 
œ°_qos
 = 
qos
;

160 
œ°_idítifõr
 = 
idítifõr
;

162  
MOSQ_ERR_SUCCESS
;

163 
	}
}

165 
	$db__mesßge_ö£π
(
mosquôto
 *
c⁄ãxt
, 
uöt16_t
 
mid
, 
mosquôto_msg_dúe˘i⁄
 
dú
, 
uöt8_t
 
qos
, 
boﬁ
 
ªèö
, 
mosquôto_msg_°‹e
 *
°‹ed
, 
mosquôto_¥›îty
 *
¥›îtõs
, boﬁ 
upd©e
)

167 
	`UNUSED
(
c⁄ãxt
);

168 
	`UNUSED
(
mid
);

169 
	`UNUSED
(
dú
);

170 
	`UNUSED
(
qos
);

171 
	`UNUSED
(
ªèö
);

172 
	`UNUSED
(
°‹ed
);

173 
	`UNUSED
(
¥›îtõs
);

174 
	`UNUSED
(
upd©e
);

176  
MOSQ_ERR_SUCCESS
;

177 
	}
}

179 
	$db__msg_°‹e_ªf_dec
(
mosquôto_msg_°‹e
 **
°‹e
)

181 
	`UNUSED
(
°‹e
);

182 
	}
}

184 
	$db__msg_°‹e_ªf_öc
(
mosquôto_msg_°‹e
 *
°‹e
)

186 
°‹e
->
ªf_cou¡
++;

187 
	}
}

189 
	$db__msg_add_to_öÊight_°©s
(
mosquôto_msg_d©a
 *
msg_d©a
, 
mosquôto_˛õ¡_msg
 *
msg
)

191 
	`UNUSED
(
msg_d©a
);

192 
	`UNUSED
(
msg
);

193 
	}
}

195 
	$db__msg_add_to_queued_°©s
(
mosquôto_msg_d©a
 *
msg_d©a
, 
mosquôto_˛õ¡_msg
 *
msg
)

197 
	`UNUSED
(
msg_d©a
);

198 
	`UNUSED
(
msg
);

199 
	}
}

201 
	$c⁄ãxt__add_to_by_id
(
mosquôto
 *
c⁄ãxt
)

203 if(
c⁄ãxt
->
ö_by_id
 =
Ál£
){

204 
c⁄ãxt
->
ö_by_id
 = 
åue
;

205 
	`HASH_ADD_KEYPTR
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
c⁄ãxt
->
id
, 
	`°æí
(context->id), context);

207 
	}
}

209 
	$£ssi⁄_expúy__add_‰om_≥rsi°í˚
(
mosquôto
 *
c⁄ãxt
, 
time_t
 
expúy_time
)

211 
	`UNUSED
(
c⁄ãxt
);

212 
	`UNUSED
(
expúy_time
);

214 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/persist_read_test.c

6 
	~<CUnô/CUnô.h
>

7 
	~<CUnô/Basic.h
>

9 
	#WITH_BROKER


	)

10 
	#WITH_PERSISTENCE


	)

12 
	~"mosquôto_brokî_öã∫Æ.h
"

13 
	~"≥rsi°.h
"

14 
	~"¥›îty_mosq.h
"

16 *
	gœ°_sub
 = 
NULL
;

17 
	gœ°_qos
;

18 
uöt32_t
 
	gœ°_idítifõr
;

20 
mosquôto_db
 
	gdb
;

22 
	$TEST_≥rsi°í˚_dißbÀd
()

24 
mosquôto__c⁄fig
 
c⁄fig
;

25 
rc
;

27 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

28 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

29 
db
.
c⁄fig
 = &config;

31 
rc
 = 
	`≥rsi°__ª°‹e
();

32 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

33 
	}
}

36 
	$TEST_em±y_fûe
()

38 
mosquôto__c⁄fig
 
c⁄fig
;

39 
rc
;

41 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

42 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

43 
db
.
c⁄fig
 = &config;

45 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

47 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/empty.test-db";

48 
rc
 = 
	`≥rsi°__ª°‹e
();

49 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

50 
	}
}

53 
	$TEST_c‹ru±_hódî
()

55 
mosquôto__c⁄fig
 
c⁄fig
;

56 
rc
;

58 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

59 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

60 
db
.
c⁄fig
 = &config;

62 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

64 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/corrupt-header-short.test-db";

65 
rc
 = 
	`≥rsi°__ª°‹e
();

66 
	`CU_ASSERT_EQUAL
(
rc
, 1);

68 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/corrupt-header-long.test-db";

69 
rc
 = 
	`≥rsi°__ª°‹e
();

70 
	`CU_ASSERT_EQUAL
(
rc
, 1);

71 
	}
}

73 
	$TEST_unsuµ‹ãd_vîsi⁄
()

75 
mosquôto__c⁄fig
 
c⁄fig
;

76 
rc
;

78 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

79 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

80 
db
.
c⁄fig
 = &config;

82 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

83 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/unsupported-version.test-db";

85 
rc
 = 
	`≥rsi°__ª°‹e
();

86 
	`CU_ASSERT_EQUAL
(
rc
, 1);

87 
	}
}

90 
	$TEST_v3_c⁄fig_ok
()

92 
mosquôto__c⁄fig
 
c⁄fig
;

93 
rc
;

95 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

96 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

97 
db
.
c⁄fig
 = &config;

99 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

100 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v3-cfg.test-db";

102 
rc
 = 
	`≥rsi°__ª°‹e
();

103 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

104 
	`CU_ASSERT_EQUAL
(
db
.
œ°_db_id
, 0x7856341200000000);

105 
	}
}

108 
	$TEST_v4_c⁄fig_ok
()

110 
mosquôto__c⁄fig
 
c⁄fig
;

111 
rc
;

113 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

114 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

115 
db
.
c⁄fig
 = &config;

117 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

118 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v4-cfg.test-db";

120 
rc
 = 
	`≥rsi°__ª°‹e
();

121 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

122 
	`CU_ASSERT_EQUAL
(
db
.
œ°_db_id
, 0x7856341200000000);

123 
	}
}

126 
	$TEST_v3_c⁄fig_åunˇãd
()

128 
mosquôto__c⁄fig
 
c⁄fig
;

129 
rc
;

131 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

132 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

133 
db
.
c⁄fig
 = &config;

135 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

136 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v3-cfg-truncated.test-db";

138 
rc
 = 
	`≥rsi°__ª°‹e
();

139 
	`CU_ASSERT_EQUAL
(
rc
, 1);

140 
	`CU_ASSERT_EQUAL
(
db
.
œ°_db_id
, 0);

141 
	}
}

144 
	$TEST_v3_c⁄fig_bad_dbid
()

146 
mosquôto__c⁄fig
 
c⁄fig
;

147 
rc
;

149 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

150 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

151 
db
.
c⁄fig
 = &config;

153 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

154 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v3-cfg-bad-dbid.test-db";

156 
rc
 = 
	`≥rsi°__ª°‹e
();

157 
	`CU_ASSERT_EQUAL
(
rc
, 1);

158 
	`CU_ASSERT_EQUAL
(
db
.
œ°_db_id
, 0);

159 
	}
}

162 
	$TEST_v3_bad_chunk
()

164 
mosquôto__c⁄fig
 
c⁄fig
;

165 
rc
;

167 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

168 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

169 
db
.
c⁄fig
 = &config;

171 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

172 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v3-bad-chunk.test-db";

174 
rc
 = 
	`≥rsi°__ª°‹e
();

175 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

176 
	`CU_ASSERT_EQUAL
(
db
.
œ°_db_id
, 0x17);

177 
	}
}

180 
	$TEST_v3_mesßge_°‹e
()

182 
mosquôto__c⁄fig
 
c⁄fig
;

183 
rc
;

185 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

186 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

187 
db
.
c⁄fig
 = &config;

189 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

190 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v3-message-store.test-db";

192 
rc
 = 
	`≥rsi°__ª°‹e
();

193 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

194 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e_cou¡
, 1);

195 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e_byãs
, 7);

196 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
msg_°‹e
);

197 if(
db
.
msg_°‹e
){

198 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
db_id
, 1);

199 
	`CU_ASSERT_STRING_EQUAL
(
db
.
msg_°‹e
->
sour˚_id
, "source_id");

200 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
sour˚_mid
, 2);

201 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
mid
, 0);

202 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
qos
, 2);

203 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
ªèö
, 1);

204 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
msg_°‹e
->
t›ic
);

205 if(
db
.
msg_°‹e
->
t›ic
){

206 
	`CU_ASSERT_STRING_EQUAL
(
db
.
msg_°‹e
->
t›ic
, "topic");

208 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
∑ylﬂdÀn
, 7);

209 if(
db
.
msg_°‹e
->
∑ylﬂdÀn
 == 7){

210 
	`CU_ASSERT_NSTRING_EQUAL
(
db
.
msg_°‹e
->
∑ylﬂd
, "payload", 7);

213 
	}
}

215 
	$TEST_v3_˛õ¡
()

217 
mosquôto__c⁄fig
 
c⁄fig
;

218 
mosquôto
 *
c⁄ãxt
;

219 
rc
;

221 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

222 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

223 
db
.
c⁄fig
 = &config;

225 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

226 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v3-client.test-db";

228 
rc
 = 
	`≥rsi°__ª°‹e
();

229 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

231 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
c⁄ãxts_by_id
);

232 
	`HASH_FIND
(
hh_id
, 
db
.
c⁄ãxts_by_id
, "˛õ¡-id", 
	`°æí
("˛õ¡-id"), 
c⁄ãxt
);

233 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
);

234 if(
c⁄ãxt
){

235 
	`CU_ASSERT_PTR_NULL
(
c⁄ãxt
->
msgs_ö
.
öÊight
);

236 
	`CU_ASSERT_PTR_NULL
(
c⁄ãxt
->
msgs_out
.
öÊight
);

237 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
œ°_mid
, 0x5287);

239 
	}
}

241 
	$TEST_v3_˛õ¡_mesßge
()

243 
mosquôto__c⁄fig
 
c⁄fig
;

244 
mosquôto
 *
c⁄ãxt
;

245 
rc
;

247 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

248 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

249 
db
.
c⁄fig
 = &config;

251 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

252 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v3-client-message.test-db";

253 
c⁄fig
.
max_öÊight_mesßges
 = 20;

255 
rc
 = 
	`≥rsi°__ª°‹e
();

256 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

258 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
c⁄ãxts_by_id
);

259 
	`HASH_FIND
(
hh_id
, 
db
.
c⁄ãxts_by_id
, "˛õ¡-id", 
	`°æí
("˛õ¡-id"), 
c⁄ãxt
);

260 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
);

261 if(
c⁄ãxt
){

262 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
->
msgs_out
.
öÊight
);

263 if(
c⁄ãxt
->
msgs_out
.
öÊight
){

264 
	`CU_ASSERT_PTR_NULL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
√xt
);

265 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
);

266 if(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
){

267 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
ªf_cou¡
, 1);

268 
	`CU_ASSERT_STRING_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
sour˚_id
, "source_id");

269 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
sour˚_mid
, 2);

270 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
mid
, 0);

271 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
qos
, 2);

272 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
ªèö
, 1);

273 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
t›ic
);

274 if(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
t›ic
){

275 
	`CU_ASSERT_STRING_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
t›ic
, "topic");

277 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
∑ylﬂdÀn
, 7);

278 if(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
∑ylﬂdÀn
 == 7){

279 
	`CU_ASSERT_NSTRING_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
∑ylﬂd
, "payload", 7);

282 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
mid
, 0x73);

283 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
qos
, 1);

284 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
ªèö
, 0);

285 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
dúe˘i⁄
, 
mosq_md_out
);

286 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°©e
, 
mosq_ms_waô_f‹_puback
);

287 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
dup
, 0);

288 
	`CU_ASSERT_PTR_NULL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
¥›îtõs
);

291 
	}
}

293 
	$TEST_v3_ªèö
()

295 
mosquôto__c⁄fig
 
c⁄fig
;

296 
rc
;

298 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

299 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

300 
db
.
c⁄fig
 = &config;

302 
	`ªèö__öô
();

303 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

304 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v3-retain.test-db";

306 
rc
 = 
	`≥rsi°__ª°‹e
();

307 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

308 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e_cou¡
, 1);

309 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e_byãs
, 7);

310 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
msg_°‹e
);

311 if(
db
.
msg_°‹e
){

312 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
db_id
, 0x54);

313 
	`CU_ASSERT_STRING_EQUAL
(
db
.
msg_°‹e
->
sour˚_id
, "source_id");

314 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
sour˚_mid
, 2);

315 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
mid
, 0);

316 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
qos
, 2);

317 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
ªèö
, 1);

318 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
msg_°‹e
->
t›ic
);

319 if(
db
.
msg_°‹e
->
t›ic
){

320 
	`CU_ASSERT_STRING_EQUAL
(
db
.
msg_°‹e
->
t›ic
, "topic");

322 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
∑ylﬂdÀn
, 7);

323 if(
db
.
msg_°‹e
->
∑ylﬂdÀn
 == 7){

324 
	`CU_ASSERT_NSTRING_EQUAL
(
db
.
msg_°‹e
->
∑ylﬂd
, "payload", 7);

327 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
ªèös
);

328 if(
db
.
ªèös
){

329 
	`CU_ASSERT_STRING_EQUAL
(
db
.
ªèös
->
t›ic
, "");

330 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
ªèös
->
chûdªn
);

331 if(
db
.
ªèös
->
chûdªn
){

332 
	`CU_ASSERT_STRING_EQUAL
(
db
.
ªèös
->
chûdªn
->
t›ic
, "");

333 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
ªèös
->
chûdªn
->children);

334 if(
db
.
ªèös
->
chûdªn
->children){

335 
	`CU_ASSERT_STRING_EQUAL
(
db
.
ªèös
->
chûdªn
->chûdªn->
t›ic
, "topic");

339 
	}
}

341 
	$TEST_v3_sub
()

343 
mosquôto__c⁄fig
 
c⁄fig
;

344 
mosquôto
 *
c⁄ãxt
;

345 
rc
;

347 
œ°_sub
 = 
NULL
;

348 
œ°_qos
 = -1;

350 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

351 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

352 
db
.
c⁄fig
 = &config;

354 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

355 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v3-sub.test-db";

357 
rc
 = 
	`≥rsi°__ª°‹e
();

358 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

360 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
c⁄ãxts_by_id
);

361 
	`HASH_FIND
(
hh_id
, 
db
.
c⁄ãxts_by_id
, "˛õ¡-id", 
	`°æí
("˛õ¡-id"), 
c⁄ãxt
);

362 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
);

363 if(
c⁄ãxt
){

364 
	`CU_ASSERT_PTR_NOT_NULL
(
œ°_sub
);

365 if(
œ°_sub
){

366 
	`CU_ASSERT_STRING_EQUAL
(
œ°_sub
, "subscription")

367 
	`‰ì
(
œ°_sub
);

369 
	`CU_ASSERT_EQUAL
(
œ°_qos
, 1);

371 
	}
}

373 
	$TEST_v4_mesßge_°‹e
()

375 
mosquôto__c⁄fig
 
c⁄fig
;

376 
rc
;

378 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

379 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

380 
db
.
c⁄fig
 = &config;

382 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

383 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v4-message-store.test-db";

385 
rc
 = 
	`≥rsi°__ª°‹e
();

386 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

387 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e_cou¡
, 1);

388 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e_byãs
, 7);

389 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
msg_°‹e
);

390 if(
db
.
msg_°‹e
){

391 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
db_id
, 0xFEDCBA9876543210);

392 
	`CU_ASSERT_STRING_EQUAL
(
db
.
msg_°‹e
->
sour˚_id
, "source_id");

393 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
sour˚_mid
, 0x88);

394 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
mid
, 0);

395 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
qos
, 1);

396 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
ªèö
, 0);

397 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
msg_°‹e
->
t›ic
);

398 if(
db
.
msg_°‹e
->
t›ic
){

399 
	`CU_ASSERT_STRING_EQUAL
(
db
.
msg_°‹e
->
t›ic
, "topic");

401 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
∑ylﬂdÀn
, 7);

402 if(
db
.
msg_°‹e
->
∑ylﬂdÀn
 == 7){

403 
	`CU_ASSERT_NSTRING_EQUAL
(
db
.
msg_°‹e
->
∑ylﬂd
, "payload", 7);

406 
	}
}

408 
	$TEST_v6_c⁄fig_ok
()

410 
mosquôto__c⁄fig
 
c⁄fig
;

411 
rc
;

413 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

414 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

415 
db
.
c⁄fig
 = &config;

417 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

418 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v6-cfg.test-db";

420 
rc
 = 
	`≥rsi°__ª°‹e
();

421 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

422 
	`CU_ASSERT_EQUAL
(
db
.
œ°_db_id
, 0x7856341200000000);

423 
	}
}

426 
	$TEST_v5_c⁄fig_åunˇãd
()

428 
mosquôto__c⁄fig
 
c⁄fig
;

429 
rc
;

431 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

432 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

433 
db
.
c⁄fig
 = &config;

435 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

436 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v5-cfg-truncated.test-db";

438 
rc
 = 
	`≥rsi°__ª°‹e
();

439 
	`CU_ASSERT_EQUAL
(
rc
, 1);

440 
	`CU_ASSERT_EQUAL
(
db
.
œ°_db_id
, 0);

441 
	}
}

444 
	$TEST_v5_bad_chunk
()

446 
mosquôto__c⁄fig
 
c⁄fig
;

447 
rc
;

449 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

450 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

451 
db
.
c⁄fig
 = &config;

453 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

454 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v5-bad-chunk.test-db";

456 
rc
 = 
	`≥rsi°__ª°‹e
();

457 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

458 
	`CU_ASSERT_EQUAL
(
db
.
œ°_db_id
, 0x17);

459 
	}
}

462 
	$TEST_v6_mesßge_°‹e
()

464 
mosquôto__c⁄fig
 
c⁄fig
;

465 
rc
;

467 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

468 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

469 
db
.
c⁄fig
 = &config;

471 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

472 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v6-message-store.test-db";

474 
rc
 = 
	`≥rsi°__ª°‹e
();

475 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

476 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e_cou¡
, 1);

477 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e_byãs
, 7);

478 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
msg_°‹e
);

479 if(
db
.
msg_°‹e
){

480 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
db_id
, 1);

481 
	`CU_ASSERT_STRING_EQUAL
(
db
.
msg_°‹e
->
sour˚_id
, "source_id");

482 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
sour˚_mid
, 2);

483 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
mid
, 0);

484 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
qos
, 2);

485 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
ªèö
, 1);

486 
	`CU_ASSERT_STRING_EQUAL
(
db
.
msg_°‹e
->
t›ic
, "topic");

487 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
∑ylﬂdÀn
, 7);

488 if(
db
.
msg_°‹e
->
∑ylﬂdÀn
 == 7){

489 
	`CU_ASSERT_NSTRING_EQUAL
(
db
.
msg_°‹e
->
∑ylﬂd
, "payload", 7);

491 
	`CU_ASSERT_PTR_NULL
(
db
.
msg_°‹e
->
¥›îtõs
);

493 
	}
}

496 
	$TEST_v6_mesßge_°‹e_¥›s
()

498 
mosquôto__c⁄fig
 
c⁄fig
;

499 
mosquôto__li°íî
 
li°íî
;

500 
rc
;

502 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

503 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

504 
	`mem£t
(&
li°íî
, 0, (
mosquôto__li°íî
));

505 
db
.
c⁄fig
 = &config;

507 
li°íî
.
p‹t
 = 1883;

508 
c⁄fig
.
li°íîs
 = &
li°íî
;

509 
c⁄fig
.
li°íî_cou¡
 = 1;

511 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

512 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v6-message-store-props.test-db";

514 
rc
 = 
	`≥rsi°__ª°‹e
();

515 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

516 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e_cou¡
, 1);

517 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e_byãs
, 7);

518 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
msg_°‹e
);

519 if(
db
.
msg_°‹e
){

520 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
db_id
, 1);

521 
	`CU_ASSERT_STRING_EQUAL
(
db
.
msg_°‹e
->
sour˚_id
, "source_id");

522 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
sour˚_mid
, 2);

523 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
mid
, 0);

524 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
qos
, 2);

525 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
ªèö
, 1);

526 
	`CU_ASSERT_STRING_EQUAL
(
db
.
msg_°‹e
->
t›ic
, "topic");

527 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
∑ylﬂdÀn
, 7);

528 if(
db
.
msg_°‹e
->
∑ylﬂdÀn
 == 7){

529 
	`CU_ASSERT_NSTRING_EQUAL
(
db
.
msg_°‹e
->
∑ylﬂd
, "payload", 7);

531 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
msg_°‹e
->
¥›îtõs
);

532 if(
db
.
msg_°‹e
->
¥›îtõs
){

533 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
¥›îtõs
->
idítifõr
, 1);

534 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
¥›îtõs
->
vÆue
.
i8
, 1);

536 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
msg_°‹e
->
sour˚_li°íî
);

538 
	}
}

540 
	$TEST_v5_˛õ¡
()

542 
mosquôto__c⁄fig
 
c⁄fig
;

543 
mosquôto
 *
c⁄ãxt
;

544 
rc
;

546 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

547 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

548 
db
.
c⁄fig
 = &config;

550 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

551 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v5-client.test-db";

553 
rc
 = 
	`≥rsi°__ª°‹e
();

554 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

556 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
c⁄ãxts_by_id
);

557 
	`HASH_FIND
(
hh_id
, 
db
.
c⁄ãxts_by_id
, "˛õ¡-id", 
	`°æí
("˛õ¡-id"), 
c⁄ãxt
);

558 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
);

559 if(
c⁄ãxt
){

560 
	`CU_ASSERT_PTR_NULL
(
c⁄ãxt
->
msgs_ö
.
öÊight
);

561 
	`CU_ASSERT_PTR_NULL
(
c⁄ãxt
->
msgs_out
.
öÊight
);

562 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
œ°_mid
, 0x5287);

564 
	}
}

566 
	$TEST_v6_˛õ¡
()

568 
mosquôto__c⁄fig
 
c⁄fig
;

569 
mosquôto
 *
c⁄ãxt
;

570 
mosquôto__li°íî
 
li°íî
;

571 
rc
;

573 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

574 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

575 
	`mem£t
(&
li°íî
, 0, (
mosquôto__li°íî
));

576 
db
.
c⁄fig
 = &config;

578 
li°íî
.
p‹t
 = 1883;

579 
c⁄fig
.
≥r_li°íî_£âögs
 = 
åue
;

580 
c⁄fig
.
li°íîs
 = &
li°íî
;

581 
c⁄fig
.
li°íî_cou¡
 = 1;

582 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

583 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v6-client.test-db";

585 
rc
 = 
	`≥rsi°__ª°‹e
();

586 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

588 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
c⁄ãxts_by_id
);

589 
	`HASH_FIND
(
hh_id
, 
db
.
c⁄ãxts_by_id
, "˛õ¡-id", 
	`°æí
("˛õ¡-id"), 
c⁄ãxt
);

590 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
);

591 if(
c⁄ãxt
){

592 
	`CU_ASSERT_PTR_NULL
(
c⁄ãxt
->
msgs_ö
.
öÊight
);

593 
	`CU_ASSERT_PTR_NULL
(
c⁄ãxt
->
msgs_out
.
öÊight
);

594 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
œ°_mid
, 0x5287);

595 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
li°íî
, &listener);

596 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
->
u£∫ame
);

597 if(
c⁄ãxt
->
u£∫ame
){

598 
	`CU_ASSERT_STRING_EQUAL
(
c⁄ãxt
->
u£∫ame
, "usrname");

601 
	}
}

603 
	$TEST_v6_˛õ¡_mesßge
()

605 
mosquôto__c⁄fig
 
c⁄fig
;

606 
mosquôto
 *
c⁄ãxt
;

607 
rc
;

609 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

610 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

611 
db
.
c⁄fig
 = &config;

613 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

614 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v6-client-message.test-db";

616 
rc
 = 
	`≥rsi°__ª°‹e
();

617 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

619 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
c⁄ãxts_by_id
);

620 
	`HASH_FIND
(
hh_id
, 
db
.
c⁄ãxts_by_id
, "˛õ¡-id", 
	`°æí
("˛õ¡-id"), 
c⁄ãxt
);

621 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
);

622 if(
c⁄ãxt
){

623 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
->
msgs_out
.
öÊight
);

624 if(
c⁄ãxt
->
msgs_out
.
öÊight
){

625 
	`CU_ASSERT_PTR_NULL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
√xt
);

626 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
);

627 if(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
){

628 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
ªf_cou¡
, 1);

629 
	`CU_ASSERT_STRING_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
sour˚_id
, "source_id");

630 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
sour˚_mid
, 2);

631 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
mid
, 0);

632 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
qos
, 2);

633 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
ªèö
, 1);

634 
	`CU_ASSERT_STRING_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
t›ic
, "topic");

635 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
∑ylﬂdÀn
, 7);

636 if(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
∑ylﬂdÀn
 == 7){

637 
	`CU_ASSERT_NSTRING_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
∑ylﬂd
, "payload", 7);

640 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
mid
, 0x73);

641 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
qos
, 1);

642 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
ªèö
, 0);

643 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
dúe˘i⁄
, 
mosq_md_out
);

644 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°©e
, 
mosq_ms_waô_f‹_puback
);

645 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
dup
, 0);

646 
	`CU_ASSERT_PTR_NULL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
¥›îtõs
);

649 
	}
}

651 
	$TEST_v6_˛õ¡_mesßge_¥›s
()

653 
mosquôto__c⁄fig
 
c⁄fig
;

654 
mosquôto
 *
c⁄ãxt
;

655 
rc
;

657 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

658 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

659 
db
.
c⁄fig
 = &config;

661 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

662 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v6-client-message-props.test-db";

664 
rc
 = 
	`≥rsi°__ª°‹e
();

665 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

667 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
c⁄ãxts_by_id
);

668 
	`HASH_FIND
(
hh_id
, 
db
.
c⁄ãxts_by_id
, "˛õ¡-id", 
	`°æí
("˛õ¡-id"), 
c⁄ãxt
);

669 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
);

670 if(
c⁄ãxt
){

671 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
->
msgs_out
.
öÊight
);

672 if(
c⁄ãxt
->
msgs_out
.
öÊight
){

673 
	`CU_ASSERT_PTR_NULL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
√xt
);

674 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
);

675 if(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
){

676 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
ªf_cou¡
, 1);

677 
	`CU_ASSERT_STRING_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
sour˚_id
, "source_id");

678 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
sour˚_mid
, 2);

679 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
mid
, 0);

680 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
qos
, 2);

681 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
ªèö
, 1);

682 
	`CU_ASSERT_STRING_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
t›ic
, "topic");

683 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
∑ylﬂdÀn
, 7);

684 if(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
∑ylﬂdÀn
 == 7){

685 
	`CU_ASSERT_NSTRING_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°‹e
->
∑ylﬂd
, "payload", 7);

688 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
mid
, 0x73);

689 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
qos
, 1);

690 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
ªèö
, 0);

691 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
dúe˘i⁄
, 
mosq_md_out
);

692 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
°©e
, 
mosq_ms_waô_f‹_puback
);

693 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
dup
, 0);

694 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
¥›îtõs
);

695 if(
c⁄ãxt
->
msgs_out
.
öÊight
->
¥›îtõs
){

696 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
¥›îtõs
->
idítifõr
, 1);

697 
	`CU_ASSERT_EQUAL
(
c⁄ãxt
->
msgs_out
.
öÊight
->
¥›îtõs
->
vÆue
.
i8
, 1);

701 
	}
}

703 
	$TEST_v6_ªèö
()

705 
mosquôto__c⁄fig
 
c⁄fig
;

706 
rc
;

708 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

709 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

710 
db
.
c⁄fig
 = &config;

712 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

713 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v6-retain.test-db";

715 
	`ªèö__öô
();

716 
rc
 = 
	`≥rsi°__ª°‹e
();

717 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

718 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e_cou¡
, 1);

719 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e_byãs
, 7);

720 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
msg_°‹e
);

721 if(
db
.
msg_°‹e
){

722 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
db_id
, 0x54);

723 
	`CU_ASSERT_STRING_EQUAL
(
db
.
msg_°‹e
->
sour˚_id
, "source_id");

724 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
sour˚_mid
, 2);

725 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
mid
, 0);

726 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
qos
, 2);

727 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
ªèö
, 1);

728 
	`CU_ASSERT_STRING_EQUAL
(
db
.
msg_°‹e
->
t›ic
, "topic");

729 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
∑ylﬂdÀn
, 7);

730 if(
db
.
msg_°‹e
->
∑ylﬂdÀn
 == 7){

731 
	`CU_ASSERT_NSTRING_EQUAL
(
db
.
msg_°‹e
->
∑ylﬂd
, "payload", 7);

734 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
ªèös
);

735 if(
db
.
ªèös
){

736 
	`CU_ASSERT_STRING_EQUAL
(
db
.
ªèös
->
t›ic
, "");

737 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
ªèös
->
chûdªn
);

738 if(
db
.
ªèös
->
chûdªn
){

739 
	`CU_ASSERT_STRING_EQUAL
(
db
.
ªèös
->
chûdªn
->
t›ic
, "");

740 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
ªèös
->
chûdªn
->children);

741 if(
db
.
ªèös
->
chûdªn
->children){

742 
	`CU_ASSERT_STRING_EQUAL
(
db
.
ªèös
->
chûdªn
->chûdªn->
t›ic
, "topic");

746 
	}
}

748 
	$TEST_v6_sub
()

750 
mosquôto__c⁄fig
 
c⁄fig
;

751 
mosquôto
 *
c⁄ãxt
;

752 
rc
;

754 
œ°_sub
 = 
NULL
;

755 
œ°_qos
 = -1;

757 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

758 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

759 
db
.
c⁄fig
 = &config;

761 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

762 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v6-sub.test-db";

764 
rc
 = 
	`≥rsi°__ª°‹e
();

765 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

767 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
c⁄ãxts_by_id
);

768 
	`HASH_FIND
(
hh_id
, 
db
.
c⁄ãxts_by_id
, "˛õ¡-id", 
	`°æí
("˛õ¡-id"), 
c⁄ãxt
);

769 
	`CU_ASSERT_PTR_NOT_NULL
(
c⁄ãxt
);

770 if(
c⁄ãxt
){

771 
	`CU_ASSERT_PTR_NOT_NULL
(
œ°_sub
);

772 if(
œ°_sub
){

773 
	`CU_ASSERT_STRING_EQUAL
(
œ°_sub
, "subscription")

774 
	`‰ì
(
œ°_sub
);

776 
	`CU_ASSERT_EQUAL
(
œ°_qos
, 1);

777 
	`CU_ASSERT_EQUAL
(
œ°_idítifõr
, 0x7623);

779 
	}
}

785 
	$öô_≥rsi°_ªad_ã°s
()

787 
CU_pSuôe
 
ã°_suôe
 = 
NULL
;

789 
ã°_suôe
 = 
	`CU_add_suôe
("Pîsi°Ñód", 
NULL
, NULL);

790 if(!
ã°_suôe
){

791 
	`¥ötf
("Errorádding CUnitÖersistÑeadÅest suite.\n");

796 || !
	`CU_add_ã°
(
ã°_suôe
, "Pîsi°í˚ dißbÀd", 
TEST_≥rsi°í˚_dißbÀd
)

797 || !
	`CU_add_ã°
(
ã°_suôe
, "Em±y fûe", 
TEST_em±y_fûe
)

798 || !
	`CU_add_ã°
(
ã°_suôe
, "C‹ru± hódî", 
TEST_c‹ru±_hódî
)

799 || !
	`CU_add_ã°
(
ã°_suôe
, "Unsuµ‹ãd vîsi⁄", 
TEST_unsuµ‹ãd_vîsi⁄
)

800 || !
	`CU_add_ã°
(
ã°_suôe
, "v3 c⁄fig ok", 
TEST_v3_c⁄fig_ok
)

801 || !
	`CU_add_ã°
(
ã°_suôe
, "v3 c⁄fig badÅrunˇãd", 
TEST_v3_c⁄fig_åunˇãd
)

802 || !
	`CU_add_ã°
(
ã°_suôe
, "v3 c⁄fig bad dbid", 
TEST_v3_c⁄fig_bad_dbid
)

803 || !
	`CU_add_ã°
(
ã°_suôe
, "v3 bad chunk", 
TEST_v3_bad_chunk
)

804 || !
	`CU_add_ã°
(
ã°_suôe
, "v3 mesßgê°‹e", 
TEST_v3_mesßge_°‹e
)

805 || !
	`CU_add_ã°
(
ã°_suôe
, "v3 clõ¡", 
TEST_v3_˛õ¡
)

806 || !
	`CU_add_ã°
(
ã°_suôe
, "v3 clõ¡ mesßge", 
TEST_v3_˛õ¡_mesßge
)

807 || !
	`CU_add_ã°
(
ã°_suôe
, "v3Ñëaö", 
TEST_v3_ªèö
)

808 || !
	`CU_add_ã°
(
ã°_suôe
, "v3 sub", 
TEST_v3_sub
)

809 || !
	`CU_add_ã°
(
ã°_suôe
, "v4 c⁄fig ok", 
TEST_v4_c⁄fig_ok
)

810 || !
	`CU_add_ã°
(
ã°_suôe
, "v4 mesßgê°‹e", 
TEST_v4_mesßge_°‹e
)

811 || !
	`CU_add_ã°
(
ã°_suôe
, "v5 clõ¡", 
TEST_v5_˛õ¡
)

812 || !
	`CU_add_ã°
(
ã°_suôe
, "v5 c⁄fig badÅrunˇãd", 
TEST_v5_c⁄fig_åunˇãd
)

813 || !
	`CU_add_ã°
(
ã°_suôe
, "v5 bad chunk", 
TEST_v5_bad_chunk
)

814 || !
	`CU_add_ã°
(
ã°_suôe
, "v6 c⁄fig ok", 
TEST_v6_c⁄fig_ok
)

815 || !
	`CU_add_ã°
(
ã°_suôe
, "v6 mesßgê°‹e", 
TEST_v6_mesßge_°‹e
)

816 || !
	`CU_add_ã°
(
ã°_suôe
, "v6 mesßgê°‹e+¥›s", 
TEST_v6_mesßge_°‹e_¥›s
)

817 || !
	`CU_add_ã°
(
ã°_suôe
, "v6 clõ¡", 
TEST_v6_˛õ¡
)

818 || !
	`CU_add_ã°
(
ã°_suôe
, "v6 clõ¡ mesßge", 
TEST_v6_˛õ¡_mesßge
)

819 || !
	`CU_add_ã°
(
ã°_suôe
, "v6 clõ¡ mesßge+¥›s", 
TEST_v6_˛õ¡_mesßge_¥›s
)

820 || !
	`CU_add_ã°
(
ã°_suôe
, "v6Ñëaö", 
TEST_v6_ªèö
)

821 || !
	`CU_add_ã°
(
ã°_suôe
, "v6 sub", 
TEST_v6_sub
)

824 
	`¥ötf
("ErroráddingÖersist CUnitÅests.\n");

829 
	}
}

831 
	$maö
(
¨gc
, *
¨gv
[])

833 
Áûs
;

835 
	`UNUSED
(
¨gc
);

836 
	`UNUSED
(
¨gv
);

838 if(
	`CU_öôülize_ªgi°ry
(Ë!
CUE_SUCCESS
){

839 
	`¥ötf
("Error initializing CUnitÑegistry.\n");

844 || 
	`öô_≥rsi°_ªad_ã°s
()

847 
	`CU_˛ónup_ªgi°ry
();

851 
	`CU_basic_£t_mode
(
CU_BRM_VERBOSE
);

852 
	`CU_basic_run_ã°s
();

853 
Áûs
 = 
	`CU_gë_numbî_of_Áûuªs
();

854 
	`CU_˛ónup_ªgi°ry
();

856  ()
Áûs
;

857 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/persist_write_stubs.c

1 
	~<time.h
>

3 
	#WITH_BROKER


	)

5 
	~<loggög_mosq.h
>

6 
	~<mem‹y_mosq.h
>

7 
	~<mosquôto_brokî_öã∫Æ.h
>

8 
	~<√t_mosq.h
>

9 
	~<£nd_mosq.h
>

10 
	~<time_mosq.h
>

12 
uöt64_t
 
œ°_ªèöed
;

13 *
œ°_sub
;

14 
œ°_qos
;

16 
mosquôto
 *
	$c⁄ãxt__öô
(
mosq_sock_t
 
sock
)

18 
	`UNUSED
(
sock
);

20  
	`mosquôto__ˇŒoc
(1, (
mosquôto
));

21 
	}
}

23 
	$log__¥ötf
(
mosquôto
 *
mosq
, 
¥i‹ôy
, c⁄° *
fmt
, ...)

25 
	`UNUSED
(
mosq
);

26 
	`UNUSED
(
¥i‹ôy
);

27 
	`UNUSED
(
fmt
);

30 
	}
}

32 
time_t
 
	$mosquôto_time
()

35 
	}
}

37 
	$√t__sockë_˛o£
(
mosquôto
 *
mosq
)

39 
	`UNUSED
(
mosq
);

41  
MOSQ_ERR_SUCCESS
;

42 
	}
}

44 
	$£nd__pögªq
(
mosquôto
 *
mosq
)

46 
	`UNUSED
(
mosq
);

48  
MOSQ_ERR_SUCCESS
;

49 
	}
}

51 
	$mosquôto_a˛_check
(
mosquôto
 *
c⁄ãxt
, c⁄° *
t›ic
, 
uöt32_t
 
∑ylﬂdÀn
, * 
∑ylﬂd
, 
uöt8_t
 
qos
, 
boﬁ
 
ªèö
, 
ac˚ss
)

53 
	`UNUSED
(
c⁄ãxt
);

54 
	`UNUSED
(
t›ic
);

55 
	`UNUSED
(
∑ylﬂdÀn
);

56 
	`UNUSED
(
∑ylﬂd
);

57 
	`UNUSED
(
qos
);

58 
	`UNUSED
(
ªèö
);

59 
	`UNUSED
(
ac˚ss
);

61  
MOSQ_ERR_SUCCESS
;

62 
	}
}

64 
	$a˛__föd_a˛s
(
mosquôto
 *
c⁄ãxt
)

66 
	`UNUSED
(
c⁄ãxt
);

68  
MOSQ_ERR_SUCCESS
;

69 
	}
}

72 
	$£nd__publish
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, c⁄° *
t›ic
, 
uöt32_t
 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
uöt8_t
 
qos
, 
boﬁ
 
ªèö
, boﬁ 
dup
, c⁄° 
mosquôto_¥›îty
 *
cmsg_¥›s
, c⁄° mosquôto_¥›îty *
°‹e_¥›s
, uöt32_à
expúy_öãrvÆ
)

74 
	`UNUSED
(
mosq
);

75 
	`UNUSED
(
mid
);

76 
	`UNUSED
(
t›ic
);

77 
	`UNUSED
(
∑ylﬂdÀn
);

78 
	`UNUSED
(
∑ylﬂd
);

79 
	`UNUSED
(
qos
);

80 
	`UNUSED
(
ªèö
);

81 
	`UNUSED
(
dup
);

82 
	`UNUSED
(
cmsg_¥›s
);

83 
	`UNUSED
(
°‹e_¥›s
);

84 
	`UNUSED
(
expúy_öãrvÆ
);

86  
MOSQ_ERR_SUCCESS
;

87 
	}
}

89 
	$£nd__pubcomp
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

91 
	`UNUSED
(
mosq
);

92 
	`UNUSED
(
mid
);

93 
	`UNUSED
(
¥›îtõs
);

95  
MOSQ_ERR_SUCCESS
;

96 
	}
}

98 
	$£nd__pubªc
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, 
uöt8_t
 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

100 
	`UNUSED
(
mosq
);

101 
	`UNUSED
(
mid
);

102 
	`UNUSED
(
ªas⁄_code
);

103 
	`UNUSED
(
¥›îtõs
);

105  
MOSQ_ERR_SUCCESS
;

106 
	}
}

108 
	$£nd__pubªl
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

110 
	`UNUSED
(
mosq
);

111 
	`UNUSED
(
mid
);

112 
	`UNUSED
(
¥›îtõs
);

114  
MOSQ_ERR_SUCCESS
;

115 
	}
}

117 
	$c⁄ãxt__add_to_by_id
(
mosquôto
 *
c⁄ãxt
)

119 if(
c⁄ãxt
->
ö_by_id
 =
Ál£
){

120 
c⁄ãxt
->
ö_by_id
 = 
åue
;

121 
	`HASH_ADD_KEYPTR
(
hh_id
, 
db
.
c⁄ãxts_by_id
, 
c⁄ãxt
->
id
, 
	`°æí
(context->id), context);

123 
	}
}

125 
	$£ssi⁄_expúy__add_‰om_≥rsi°í˚
(
mosquôto
 *
c⁄ãxt
, 
time_t
 
expúy_time
)

127 
	`UNUSED
(
c⁄ãxt
);

128 
	`UNUSED
(
expúy_time
);

130 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/persist_write_test.c

6 
	~<CUnô/CUnô.h
>

7 
	~<CUnô/Basic.h
>

9 
	#WITH_BROKER


	)

10 
	#WITH_PERSISTENCE


	)

12 
	~"mosquôto_brokî_öã∫Æ.h
"

13 
	~"≥rsi°.h
"

15 
uöt64_t
 
	gœ°_ªèöed
;

16 *
	gœ°_sub
 = 
NULL
;

17 
	gœ°_qos
;

19 
mosquôto_db
 
	gdb
;

22 
	$fûe_ªad
(c⁄° *
fûíame
, 
uöt8_t
 **
d©a
, 
size_t
 *
Àn
)

24 
FILE
 *
Âå
;

25 
size_t
 
rc
;

27 
Âå
 = 
	`f›í
(
fûíame
, "rb");

28 if(!
Âå
)  1;

30 
	`f£ek
(
Âå
, 0, 
SEEK_END
);

31 *
Àn
 = (
size_t
)
	`·ñl
(
Âå
);

32 *
d©a
 = 
	`mÆloc
(*
Àn
);

33 if(!(*
d©a
)){

34 
	`f˛o£
(
Âå
);

37 
	`f£ek
(
Âå
, 0, 
SEEK_SET
);

38 
rc
 = 
	`‰ód
(*
d©a
, 1, *
Àn
, 
Âå
);

39 
	`f˛o£
(
Âå
);

41 if(
rc
 =*
Àn
){

44 *
Àn
 = 0;

45 
	`‰ì
(*
d©a
);

48 
	}
}

51 
	$fûe_diff
(c⁄° *
⁄e
, c⁄° *
two
)

53 
size_t
 
Àn1
, 
Àn2
;

54 
uöt8_t
 *
d©a1
 = 
NULL
, *
d©a2
 = NULL;

55 
rc
 = 1;

57 if(
	`fûe_ªad
(
⁄e
, &
d©a1
, &
Àn1
)){

61 if(
	`fûe_ªad
(
two
, &
d©a2
, &
Àn2
)){

62 
	`‰ì
(
d©a1
);

66 if(
Àn1
 =
Àn2
){

67 
rc
 = 
	`memcmp
(
d©a1
, 
d©a2
, 
Àn1
);

69 
	`‰ì
(
d©a1
);

70 
	`‰ì
(
d©a2
);

72  
rc
;

73 
	}
}

75 
	$TEST_≥rsi°í˚_dißbÀd
()

77 
mosquôto__c⁄fig
 
c⁄fig
;

78 
rc
;

80 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

81 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

82 
db
.
c⁄fig
 = &config;

83 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

85 
rc
 = 
	`≥rsi°__backup
(
Ál£
);

86 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

88 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "disabled.db";

89 
rc
 = 
	`≥rsi°__backup
(
Ál£
);

90 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

91 
	}
}

94 
	$TEST_em±y_fûe
()

96 
mosquôto__c⁄fig
 
c⁄fig
;

97 
rc
;

99 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

100 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

101 
db
.
c⁄fig
 = &config;

103 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

105 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "empty.db";

106 
rc
 = 
	`≥rsi°__backup
(
Ál£
);

107 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

108 
	`CU_ASSERT_EQUAL
(0, 
	`fûe_diff
("files/persist_write/empty.test-db", "empty.db"));

109 
	`u∆ök
("empty.db");

110 
	}
}

113 
	$TEST_v6_c⁄fig_ok
()

115 
mosquôto__c⁄fig
 
c⁄fig
;

116 
rc
;

118 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

119 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

120 
db
.
c⁄fig
 = &config;

122 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

123 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v6-cfg.test-db";

124 
rc
 = 
	`≥rsi°__ª°‹e
();

125 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

127 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "v6-cfg.db";

128 
rc
 = 
	`≥rsi°__backup
(
åue
);

129 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

131 
	`CU_ASSERT_EQUAL
(0, 
	`fûe_diff
("files/persist_read/v6-cfg.test-db", "v6-cfg.db"));

132 
	`u∆ök
("v6-cfg.db");

133 
	}
}

136 
	$TEST_v6_mesßge_°‹e_no_ªf
()

138 
mosquôto__c⁄fig
 
c⁄fig
;

139 
rc
;

141 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

142 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

143 
db
.
c⁄fig
 = &config;

145 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

146 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v6-message-store.test-db";

147 
rc
 = 
	`≥rsi°__ª°‹e
();

148 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

150 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "v6-message-store-no-ref.db";

151 
rc
 = 
	`≥rsi°__backup
(
åue
);

152 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

154 
	`CU_ASSERT_EQUAL
(0, 
	`fûe_diff
("files/persist_write/v6-message-store-no-ref.test-db", "v6-message-store-no-ref.db"));

155 
	`u∆ök
("v6-message-store-no-ref.db");

156 
	}
}

159 
	$TEST_v6_mesßge_°‹e_¥›s
()

161 
mosquôto__c⁄fig
 
c⁄fig
;

162 
mosquôto__li°íî
 
li°íî
;

163 
rc
;

165 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

166 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

167 
	`mem£t
(&
li°íî
, 0, (
mosquôto__li°íî
));

168 
db
.
c⁄fig
 = &config;

169 
li°íî
.
p‹t
 = 1883;

170 
c⁄fig
.
≥r_li°íî_£âögs
 = 
åue
;

171 
c⁄fig
.
li°íîs
 = &
li°íî
;

172 
c⁄fig
.
li°íî_cou¡
 = 1;

174 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

175 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v6-message-store-props.test-db";

176 
rc
 = 
	`≥rsi°__ª°‹e
();

177 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

179 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "v6-message-store-props.db";

180 
rc
 = 
	`≥rsi°__backup
(
åue
);

181 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

183 
	`CU_ASSERT_EQUAL
(0, 
	`fûe_diff
("files/persist_read/v6-message-store-props.test-db", "v6-message-store-props.db"));

184 
	`u∆ök
("v6-message-store-props.db");

185 
	}
}

188 
	$TEST_v6_˛õ¡
()

190 
mosquôto__c⁄fig
 
c⁄fig
;

191 
mosquôto__li°íî
 
li°íî
;

192 
rc
;

194 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

195 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

196 
	`mem£t
(&
li°íî
, 0, (
mosquôto__li°íî
));

197 
db
.
c⁄fig
 = &config;

198 
li°íî
.
p‹t
 = 1883;

199 
c⁄fig
.
≥r_li°íî_£âögs
 = 
åue
;

200 
c⁄fig
.
li°íîs
 = &
li°íî
;

201 
c⁄fig
.
li°íî_cou¡
 = 1;

203 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

204 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v6-client.test-db";

205 
rc
 = 
	`≥rsi°__ª°‹e
();

206 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

208 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "v6-client.db";

209 
rc
 = 
	`≥rsi°__backup
(
åue
);

210 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

212 
	`CU_ASSERT_EQUAL
(0, 
	`fûe_diff
("files/persist_read/v6-client.test-db", "v6-client.db"));

213 
	`u∆ök
("v6-client.db");

214 
	}
}

217 
	$TEST_v6_˛õ¡_mesßge
()

219 
mosquôto__c⁄fig
 
c⁄fig
;

220 
mosquôto__li°íî
 
li°íî
;

221 
rc
;

223 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

224 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

225 
	`mem£t
(&
li°íî
, 0, (
mosquôto__li°íî
));

226 
db
.
c⁄fig
 = &config;

227 
li°íî
.
p‹t
 = 1883;

228 
c⁄fig
.
≥r_li°íî_£âögs
 = 
åue
;

229 
c⁄fig
.
li°íîs
 = &
li°íî
;

230 
c⁄fig
.
li°íî_cou¡
 = 1;

232 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

233 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v6-client-message.test-db";

234 
rc
 = 
	`≥rsi°__ª°‹e
();

235 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

237 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "v6-client-message.db";

238 
rc
 = 
	`≥rsi°__backup
(
åue
);

239 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

241 
	`CU_ASSERT_EQUAL
(0, 
	`fûe_diff
("files/persist_read/v6-client-message.test-db", "v6-client-message.db"));

242 
	`u∆ök
("v6-client-message.db");

243 
	}
}

246 
	$TEST_v6_˛õ¡_mesßge_¥›s
()

248 
mosquôto__c⁄fig
 
c⁄fig
;

249 
mosquôto__li°íî
 
li°íî
;

250 
rc
;

252 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

253 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

254 
	`mem£t
(&
li°íî
, 0, (
mosquôto__li°íî
));

255 
db
.
c⁄fig
 = &config;

256 
li°íî
.
p‹t
 = 1883;

257 
c⁄fig
.
≥r_li°íî_£âögs
 = 
åue
;

258 
c⁄fig
.
li°íîs
 = &
li°íî
;

259 
c⁄fig
.
li°íî_cou¡
 = 1;

261 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

262 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v6-client-message-props.test-db";

263 
rc
 = 
	`≥rsi°__ª°‹e
();

264 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

266 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
msg_°‹e
);

267 if(
db
.
msg_°‹e
){

268 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
msg_°‹e
->
sour˚_li°íî
);

269 if(
db
.
msg_°‹e
->
sour˚_li°íî
){

270 
	`CU_ASSERT_EQUAL
(
db
.
msg_°‹e
->
sour˚_li°íî
->
p‹t
, 1883);

274 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "v6-client-message-props.db";

275 
rc
 = 
	`≥rsi°__backup
(
åue
);

276 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

278 
	`CU_ASSERT_EQUAL
(0, 
	`fûe_diff
("files/persist_read/v6-client-message-props.test-db", "v6-client-message-props.db"));

279 
	`u∆ök
("v6-client-message-props.db");

280 
	}
}

283 
	$TEST_v6_sub
()

285 
mosquôto__c⁄fig
 
c⁄fig
;

286 
mosquôto__li°íî
 
li°íî
;

287 
rc
;

289 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

290 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

291 
	`mem£t
(&
li°íî
, 0, (
mosquôto__li°íî
));

292 
db
.
c⁄fig
 = &config;

293 
li°íî
.
p‹t
 = 1883;

294 
c⁄fig
.
≥r_li°íî_£âögs
 = 
åue
;

295 
c⁄fig
.
li°íîs
 = &
li°íî
;

296 
c⁄fig
.
li°íî_cou¡
 = 1;

298 
	`db__›í
(&
c⁄fig
);

300 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

301 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_read/v6-sub.test-db";

302 
rc
 = 
	`≥rsi°__ª°‹e
();

303 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

305 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "v6-sub.db";

306 
rc
 = 
	`≥rsi°__backup
(
åue
);

307 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

309 
	`CU_ASSERT_EQUAL
(0, 
	`fûe_diff
("files/persist_read/v6-sub.test-db", "v6-sub.db"));

310 
	`u∆ök
("v6-sub.db");

311 
	}
}

315 
NOT
 
WORKING


316 
	$TEST_v5_fuŒ
()

318 
mosquôto__c⁄fig
 
c⁄fig
;

319 
rc
;

321 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

322 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

323 
db
.
c⁄fig
 = &config;

325 
	`db__›í
(&
c⁄fig
);

327 
c⁄fig
.
≥rsi°í˚
 = 
åue
;

328 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "files/persist_write/v5-full.test-db";

329 
rc
 = 
	`≥rsi°__ª°‹e
();

330 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

332 
c⁄fig
.
≥rsi°í˚_fûï©h
 = "v5-full.db";

333 
rc
 = 
	`≥rsi°__backup
(
åue
);

334 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

336 
	`CU_ASSERT_EQUAL
(0, 
	`fûe_diff
("files/persist_write/v5-full.test-db", "v5-full.db"));

337 
	`u∆ök
("v5-full.db");

338 
	}
}

347 
	$maö
(
¨gc
, *
¨gv
[])

349 
CU_pSuôe
 
ã°_suôe
 = 
NULL
;

350 
Áûs
;

352 
	`UNUSED
(
¨gc
);

353 
	`UNUSED
(
¨gv
);

355 if(
	`CU_öôülize_ªgi°ry
(Ë!
CUE_SUCCESS
){

356 
	`¥ötf
("Error initializing CUnitÑegistry.\n");

360 
ã°_suôe
 = 
	`CU_add_suôe
("Pîsi° wrôe", 
NULL
, NULL);

361 if(!
ã°_suôe
){

362 
	`¥ötf
("Errorádding CUnitÖersist writeÅest suite.\n");

363 
	`CU_˛ónup_ªgi°ry
();

368 || !
	`CU_add_ã°
(
ã°_suôe
, "Pîsi°í˚ dißbÀd", 
TEST_≥rsi°í˚_dißbÀd
)

369 || !
	`CU_add_ã°
(
ã°_suôe
, "Em±y fûe", 
TEST_em±y_fûe
)

370 || !
	`CU_add_ã°
(
ã°_suôe
, "v6 c⁄fig ok", 
TEST_v6_c⁄fig_ok
)

371 || !
	`CU_add_ã°
(
ã°_suôe
, "v6 mesßgê°‹ê(mesßgêha†nÿªfs)", 
TEST_v6_mesßge_°‹e_no_ªf
)

372 || !
	`CU_add_ã°
(
ã°_suôe
, "v6 mesßgê°‹ê+Ör›s", 
TEST_v6_mesßge_°‹e_¥›s
)

373 || !
	`CU_add_ã°
(
ã°_suôe
, "v6 clõ¡", 
TEST_v6_˛õ¡
)

374 || !
	`CU_add_ã°
(
ã°_suôe
, "v6 clõ¡ mesßge", 
TEST_v6_˛õ¡_mesßge
)

375 || !
	`CU_add_ã°
(
ã°_suôe
, "v6 clõ¡ mesßge+¥›s", 
TEST_v6_˛õ¡_mesßge_¥›s
)

376 || !
	`CU_add_ã°
(
ã°_suôe
, "v6 sub", 
TEST_v6_sub
)

380 
	`¥ötf
("ErroráddingÖersist CUnitÅests.\n");

381 
	`CU_˛ónup_ªgi°ry
();

385 
	`CU_basic_£t_mode
(
CU_BRM_VERBOSE
);

386 
	`CU_basic_run_ã°s
();

387 
Áûs
 = 
	`CU_gë_numbî_of_Áûuªs
();

388 
	`CU_˛ónup_ªgi°ry
();

390  ()
Áûs
;

391 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/property_add.c

1 
	~<CUnô/CUnô.h
>

2 
	~<CUnô/Basic.h
>

4 
	~"mqâ_¥Ÿocﬁ.h
"

5 
	~"¥›îty_mosq.h
"

6 
	~"∑ckë_mosq.h
"

12 
	$bad_add_byã_hñ≥r
(
idítifõr
)

14 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

15 
rc
;

17 
rc
 = 
	`mosquôto_¥›îty_add_byã
(&
¥›li°
, 
idítifõr
, 1);

18 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

19 
	`CU_ASSERT_PTR_NULL
(
¥›li°
);

20 
	}
}

22 
	$bad_add_öt16_hñ≥r
(
idítifõr
)

24 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

25 
rc
;

27 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(&
¥›li°
, 
idítifõr
, 1);

28 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

29 
	`CU_ASSERT_PTR_NULL
(
¥›li°
);

30 
	}
}

32 
	$bad_add_öt32_hñ≥r
(
idítifõr
)

34 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

35 
rc
;

37 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(&
¥›li°
, 
idítifõr
, 1);

38 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

39 
	`CU_ASSERT_PTR_NULL
(
¥›li°
);

40 
	}
}

42 
	$bad_add_v¨öt_hñ≥r
(
idítifõr
)

44 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

45 
rc
;

47 
rc
 = 
	`mosquôto_¥›îty_add_v¨öt
(&
¥›li°
, 
idítifõr
, 1);

48 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

49 
	`CU_ASSERT_PTR_NULL
(
¥›li°
);

50 
	}
}

52 
	$bad_add_bö¨y_hñ≥r
(
idítifõr
)

54 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

55 
rc
;

57 
rc
 = 
	`mosquôto_¥›îty_add_bö¨y
(&
¥›li°
, 
idítifõr
, "test", 4);

58 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

59 
	`CU_ASSERT_PTR_NULL
(
¥›li°
);

60 
	}
}

62 
	$bad_add_°rög_hñ≥r
(
idítifõr
)

64 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

65 
rc
;

67 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(&
¥›li°
, 
idítifõr
, "test");

68 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

69 
	`CU_ASSERT_PTR_NULL
(
¥›li°
);

70 
	}
}

72 
	$bad_add_°rög_∑ú_hñ≥r
(
idítifõr
)

74 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

75 
rc
;

77 
rc
 = 
	`mosquôto_¥›îty_add_°rög_∑ú
(&
¥›li°
, 
idítifõr
, "key", "value");

78 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

79 
	`CU_ASSERT_PTR_NULL
(
¥›li°
);

80 
	}
}

82 
	$TEST_add_bad_byã
()

84 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
);

85 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_CONTENT_TYPE
);

86 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_RESPONSE_TOPIC
);

87 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_CORRELATION_DATA
);

88 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
);

89 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_SESSION_EXPIRY_INTERVAL
);

90 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
);

91 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_SERVER_KEEP_ALIVE
);

92 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_AUTHENTICATION_METHOD
);

93 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_AUTHENTICATION_DATA
);

94 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_WILL_DELAY_INTERVAL
);

95 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_RESPONSE_INFORMATION
);

96 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_SERVER_REFERENCE
);

97 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_REASON_STRING
);

98 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_RECEIVE_MAXIMUM
);

99 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
);

100 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_TOPIC_ALIAS
);

101 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_USER_PROPERTY
);

102 
	`bad_add_byã_hñ≥r
(
MQTT_PROP_MAXIMUM_PACKET_SIZE
);

103 
	}
}

105 
	$TEST_add_bad_öt16
()

107 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
);

108 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
);

109 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_CONTENT_TYPE
);

110 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_RESPONSE_TOPIC
);

111 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_CORRELATION_DATA
);

112 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
);

113 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_SESSION_EXPIRY_INTERVAL
);

114 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
);

115 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_AUTHENTICATION_METHOD
);

116 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_AUTHENTICATION_DATA
);

117 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
);

118 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_WILL_DELAY_INTERVAL
);

119 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
);

120 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_RESPONSE_INFORMATION
);

121 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_SERVER_REFERENCE
);

122 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_REASON_STRING
);

123 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_MAXIMUM_QOS
);

124 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_RETAIN_AVAILABLE
);

125 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_USER_PROPERTY
);

126 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_MAXIMUM_PACKET_SIZE
);

127 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_WILDCARD_SUB_AVAILABLE
);

128 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
);

129 
	`bad_add_öt16_hñ≥r
(
MQTT_PROP_SHARED_SUB_AVAILABLE
);

130 
	}
}

132 
	$TEST_add_bad_öt32
()

134 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
);

135 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_CONTENT_TYPE
);

136 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_RESPONSE_TOPIC
);

137 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_CORRELATION_DATA
);

138 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
);

139 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
);

140 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_SERVER_KEEP_ALIVE
);

141 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_AUTHENTICATION_METHOD
);

142 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_AUTHENTICATION_DATA
);

143 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
);

144 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
);

145 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_RESPONSE_INFORMATION
);

146 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_SERVER_REFERENCE
);

147 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_REASON_STRING
);

148 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_RECEIVE_MAXIMUM
);

149 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
);

150 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_TOPIC_ALIAS
);

151 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_MAXIMUM_QOS
);

152 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_RETAIN_AVAILABLE
);

153 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_USER_PROPERTY
);

154 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_WILDCARD_SUB_AVAILABLE
);

155 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
);

156 
	`bad_add_öt32_hñ≥r
(
MQTT_PROP_SHARED_SUB_AVAILABLE
);

157 
	}
}

159 
	$TEST_add_bad_v¨öt
()

161 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
);

162 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
);

163 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_CONTENT_TYPE
);

164 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_RESPONSE_TOPIC
);

165 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_CORRELATION_DATA
);

166 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_SESSION_EXPIRY_INTERVAL
);

167 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
);

168 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_SERVER_KEEP_ALIVE
);

169 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_AUTHENTICATION_METHOD
);

170 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_AUTHENTICATION_DATA
);

171 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
);

172 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_WILL_DELAY_INTERVAL
);

173 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
);

174 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_RESPONSE_INFORMATION
);

175 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_SERVER_REFERENCE
);

176 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_REASON_STRING
);

177 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_RECEIVE_MAXIMUM
);

178 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
);

179 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_TOPIC_ALIAS
);

180 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_MAXIMUM_QOS
);

181 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_RETAIN_AVAILABLE
);

182 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_USER_PROPERTY
);

183 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_MAXIMUM_PACKET_SIZE
);

184 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_WILDCARD_SUB_AVAILABLE
);

185 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
);

186 
	`bad_add_v¨öt_hñ≥r
(
MQTT_PROP_SHARED_SUB_AVAILABLE
);

187 
	}
}

189 
	$TEST_add_bad_bö¨y
()

191 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
);

192 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
);

193 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_CONTENT_TYPE
);

194 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_RESPONSE_TOPIC
);

195 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
);

196 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_SESSION_EXPIRY_INTERVAL
);

197 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
);

198 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_SERVER_KEEP_ALIVE
);

199 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_AUTHENTICATION_METHOD
);

200 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
);

201 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_WILL_DELAY_INTERVAL
);

202 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
);

203 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_RESPONSE_INFORMATION
);

204 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_SERVER_REFERENCE
);

205 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_REASON_STRING
);

206 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_RECEIVE_MAXIMUM
);

207 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
);

208 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_TOPIC_ALIAS
);

209 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_MAXIMUM_QOS
);

210 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_RETAIN_AVAILABLE
);

211 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_USER_PROPERTY
);

212 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_MAXIMUM_PACKET_SIZE
);

213 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_WILDCARD_SUB_AVAILABLE
);

214 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
);

215 
	`bad_add_bö¨y_hñ≥r
(
MQTT_PROP_SHARED_SUB_AVAILABLE
);

216 
	}
}

218 
	$TEST_add_bad_°rög
()

220 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
);

221 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
);

222 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_CORRELATION_DATA
);

223 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
);

224 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_SESSION_EXPIRY_INTERVAL
);

225 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_SERVER_KEEP_ALIVE
);

226 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_AUTHENTICATION_DATA
);

227 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
);

228 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_WILL_DELAY_INTERVAL
);

229 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
);

230 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_RECEIVE_MAXIMUM
);

231 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
);

232 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_TOPIC_ALIAS
);

233 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_MAXIMUM_QOS
);

234 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_RETAIN_AVAILABLE
);

235 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_USER_PROPERTY
);

236 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_MAXIMUM_PACKET_SIZE
);

237 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_WILDCARD_SUB_AVAILABLE
);

238 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
);

239 
	`bad_add_°rög_hñ≥r
(
MQTT_PROP_SHARED_SUB_AVAILABLE
);

240 
	}
}

242 
	$TEST_add_bad_°rög_∑ú
()

244 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
);

245 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
);

246 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_CONTENT_TYPE
);

247 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_RESPONSE_TOPIC
);

248 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_CORRELATION_DATA
);

249 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
);

250 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_SESSION_EXPIRY_INTERVAL
);

251 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
);

252 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_SERVER_KEEP_ALIVE
);

253 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_AUTHENTICATION_METHOD
);

254 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_AUTHENTICATION_DATA
);

255 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
);

256 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_WILL_DELAY_INTERVAL
);

257 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
);

258 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_RESPONSE_INFORMATION
);

259 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_SERVER_REFERENCE
);

260 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_REASON_STRING
);

261 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_RECEIVE_MAXIMUM
);

262 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
);

263 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_TOPIC_ALIAS
);

264 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_MAXIMUM_QOS
);

265 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_RETAIN_AVAILABLE
);

266 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_MAXIMUM_PACKET_SIZE
);

267 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_WILDCARD_SUB_AVAILABLE
);

268 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
);

269 
	`bad_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_SHARED_SUB_AVAILABLE
);

270 
	}
}

276 
	$sögÀ_add_byã_hñ≥r
(
idítifõr
)

278 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

279 
rc
;

281 
rc
 = 
	`mosquôto_¥›îty_add_byã
(&
¥›li°
, 
idítifõr
, 1);

282 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

283 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

284 if(
¥›li°
){

285 
	`CU_ASSERT_EQUAL
(
¥›li°
->
idítifõr
, identifier);

286 
	`CU_ASSERT_EQUAL
(
¥›li°
->
vÆue
.
i8
, 1);

287 
	`CU_ASSERT_PTR_NULL
(
¥›li°
->
√xt
);

289 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

291 
	}
}

293 
	$sögÀ_add_öt16_hñ≥r
(
idítifõr
)

295 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

296 
rc
;

298 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(&
¥›li°
, 
idítifõr
, 11234);

299 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

300 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

301 if(
¥›li°
){

302 
	`CU_ASSERT_EQUAL
(
¥›li°
->
idítifõr
, identifier);

303 
	`CU_ASSERT_EQUAL
(
¥›li°
->
vÆue
.
i16
, 11234);

304 
	`CU_ASSERT_PTR_NULL
(
¥›li°
->
√xt
);

306 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

308 
	}
}

310 
	$sögÀ_add_öt32_hñ≥r
(
idítifõr
)

312 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

313 
rc
;

315 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(&
¥›li°
, 
idítifõr
, 765432);

316 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

317 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

318 if(
¥›li°
){

319 
	`CU_ASSERT_EQUAL
(
¥›li°
->
idítifõr
, identifier);

320 
	`CU_ASSERT_EQUAL
(
¥›li°
->
vÆue
.
i32
, 765432);

321 
	`CU_ASSERT_PTR_NULL
(
¥›li°
->
√xt
);

323 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

325 
	}
}

327 
	$sögÀ_add_v¨öt_hñ≥r
(
idítifõr
)

329 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

330 
rc
;

332 
rc
 = 
	`mosquôto_¥›îty_add_v¨öt
(&
¥›li°
, 
idítifõr
, 139123999);

333 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

334 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

335 if(
¥›li°
){

336 
	`CU_ASSERT_EQUAL
(
¥›li°
->
idítifõr
, identifier);

337 
	`CU_ASSERT_EQUAL
(
¥›li°
->
vÆue
.
v¨öt
, 139123999);

338 
	`CU_ASSERT_PTR_NULL
(
¥›li°
->
√xt
);

340 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

342 
	}
}

344 
	$sögÀ_add_bö¨y_hñ≥r
(
idítifõr
)

346 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

347 
rc
;

349 
rc
 = 
	`mosquôto_¥›îty_add_bö¨y
(&
¥›li°
, 
idítifõr
, "test", 4);

350 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

351 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

352 if(
¥›li°
){

353 
	`CU_ASSERT_EQUAL
(
¥›li°
->
idítifõr
, identifier);

354 
	`CU_ASSERT_EQUAL
(
¥›li°
->
vÆue
.
bö
.
Àn
, 4);

355 
	`CU_ASSERT_NSTRING_EQUAL
(
¥›li°
->
vÆue
.
bö
.
v
, "test", 4);

356 
	`CU_ASSERT_PTR_NULL
(
¥›li°
->
√xt
);

358 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

360 
	}
}

362 
	$sögÀ_add_°rög_hñ≥r
(
idítifõr
)

364 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

365 
rc
;

367 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(&
¥›li°
, 
idítifõr
, "string");

368 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

369 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

370 if(
¥›li°
){

371 
	`CU_ASSERT_EQUAL
(
¥›li°
->
idítifõr
, identifier);

372 
	`CU_ASSERT_STRING_EQUAL
(
¥›li°
->
vÆue
.
s
.
v
, "string");

373 
	`CU_ASSERT_EQUAL
(
¥›li°
->
vÆue
.
s
.
Àn
, 
	`°æí
("string"));

374 
	`CU_ASSERT_PTR_NULL
(
¥›li°
->
√xt
);

376 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

378 
	}
}

380 
	$sögÀ_add_°rög_∑ú_hñ≥r
(
idítifõr
)

382 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

383 
rc
;

385 
rc
 = 
	`mosquôto_¥›îty_add_°rög_∑ú
(&
¥›li°
, 
idítifõr
, "key", "value");

386 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

387 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

388 if(
¥›li°
){

389 
	`CU_ASSERT_EQUAL
(
¥›li°
->
idítifõr
, identifier);

390 
	`CU_ASSERT_STRING_EQUAL
(
¥›li°
->
«me
.
v
, "key");

391 
	`CU_ASSERT_EQUAL
(
¥›li°
->
«me
.
Àn
, 
	`°æí
("key"));

392 
	`CU_ASSERT_STRING_EQUAL
(
¥›li°
->
vÆue
.
s
.
v
, "value");

393 
	`CU_ASSERT_EQUAL
(
¥›li°
->
vÆue
.
s
.
Àn
, 
	`°æí
("value"));

394 
	`CU_ASSERT_PTR_NULL
(
¥›li°
->
√xt
);

396 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

398 
	}
}

400 
	$TEST_add_sögÀ_byã
()

402 
	`sögÀ_add_byã_hñ≥r
(
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
);

403 
	`sögÀ_add_byã_hñ≥r
(
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
);

404 
	`sögÀ_add_byã_hñ≥r
(
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
);

405 
	`sögÀ_add_byã_hñ≥r
(
MQTT_PROP_MAXIMUM_QOS
);

406 
	`sögÀ_add_byã_hñ≥r
(
MQTT_PROP_RETAIN_AVAILABLE
);

407 
	`sögÀ_add_byã_hñ≥r
(
MQTT_PROP_WILDCARD_SUB_AVAILABLE
);

408 
	`sögÀ_add_byã_hñ≥r
(
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
);

409 
	`sögÀ_add_byã_hñ≥r
(
MQTT_PROP_SHARED_SUB_AVAILABLE
);

410 
	}
}

412 
	$TEST_add_sögÀ_öt16
()

414 
	`sögÀ_add_öt16_hñ≥r
(
MQTT_PROP_SERVER_KEEP_ALIVE
);

415 
	`sögÀ_add_öt16_hñ≥r
(
MQTT_PROP_RECEIVE_MAXIMUM
);

416 
	`sögÀ_add_öt16_hñ≥r
(
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
);

417 
	`sögÀ_add_öt16_hñ≥r
(
MQTT_PROP_TOPIC_ALIAS
);

418 
	}
}

420 
	$TEST_add_sögÀ_öt32
()

422 
	`sögÀ_add_öt32_hñ≥r
(
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
);

423 
	`sögÀ_add_öt32_hñ≥r
(
MQTT_PROP_SESSION_EXPIRY_INTERVAL
);

424 
	`sögÀ_add_öt32_hñ≥r
(
MQTT_PROP_WILL_DELAY_INTERVAL
);

425 
	`sögÀ_add_öt32_hñ≥r
(
MQTT_PROP_MAXIMUM_PACKET_SIZE
);

426 
	}
}

428 
	$TEST_add_sögÀ_v¨öt
()

430 
	`sögÀ_add_v¨öt_hñ≥r
(
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
);

431 
	}
}

433 
	$TEST_add_sögÀ_bö¨y
()

435 
	`sögÀ_add_bö¨y_hñ≥r
(
MQTT_PROP_CORRELATION_DATA
);

436 
	`sögÀ_add_bö¨y_hñ≥r
(
MQTT_PROP_AUTHENTICATION_DATA
);

437 
	}
}

439 
	$TEST_add_sögÀ_°rög
()

441 
	`sögÀ_add_°rög_hñ≥r
(
MQTT_PROP_CONTENT_TYPE
);

442 
	`sögÀ_add_°rög_hñ≥r
(
MQTT_PROP_RESPONSE_TOPIC
);

443 
	`sögÀ_add_°rög_hñ≥r
(
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
);

444 
	`sögÀ_add_°rög_hñ≥r
(
MQTT_PROP_AUTHENTICATION_METHOD
);

445 
	`sögÀ_add_°rög_hñ≥r
(
MQTT_PROP_RESPONSE_INFORMATION
);

446 
	`sögÀ_add_°rög_hñ≥r
(
MQTT_PROP_SERVER_REFERENCE
);

447 
	`sögÀ_add_°rög_hñ≥r
(
MQTT_PROP_REASON_STRING
);

448 
	}
}

450 
	$TEST_add_sögÀ_°rög_∑ú
()

452 
	`sögÀ_add_°rög_∑ú_hñ≥r
(
MQTT_PROP_USER_PROPERTY
);

453 
	}
}

459 
	$TEST_add_Æl_c⁄√˘
()

461 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

462 
mosquôto_¥›îty
 *
p
;

463 
cou¡
;

464 
rc
;

466 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(&
¥›li°
, 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
, 86400);

467 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

468 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

469 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(&
¥›li°
, 
MQTT_PROP_AUTHENTICATION_METHOD
, "basic");

470 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

471 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

472 
rc
 = 
	`mosquôto_¥›îty_add_bö¨y
(&
¥›li°
, 
MQTT_PROP_AUTHENTICATION_DATA
, "∑ssw‹d", 
	`°æí
("password"));

473 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

474 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

475 
rc
 = 
	`mosquôto_¥›îty_add_byã
(&
¥›li°
, 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
, 1);

476 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

477 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

478 
rc
 = 
	`mosquôto_¥›îty_add_byã
(&
¥›li°
, 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
, 1);

479 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

480 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

481 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(&
¥›li°
, 
MQTT_PROP_RECEIVE_MAXIMUM
, 1024);

482 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

483 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

484 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(&
¥›li°
, 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
, 64);

485 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

486 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

487 
rc
 = 
	`mosquôto_¥›îty_add_°rög_∑ú
(&
¥›li°
, 
MQTT_PROP_USER_PROPERTY
, "user-agent", "mosquitto/test");

488 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

489 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

490 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(&
¥›li°
, 
MQTT_PROP_MAXIMUM_PACKET_SIZE
, 200000000);

491 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

492 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

494 
p
 = 
¥›li°
;

495 
cou¡
 = 0;

496 
p
){

497 
cou¡
++;

498 
p
 =Ö->
√xt
;

500 
	`CU_ASSERT_EQUAL
(
cou¡
, 9);

502 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

503 
	}
}

506 
	$TEST_add_Æl_c⁄«ck
()

508 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

509 
mosquôto_¥›îty
 *
p
;

510 
cou¡
;

511 
rc
;

513 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(&
¥›li°
, 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
, 86400);

514 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

515 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

516 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(&
¥›li°
, 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
, "clientid");

517 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

518 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

519 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(&
¥›li°
, 
MQTT_PROP_SERVER_KEEP_ALIVE
, 900);

520 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

521 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

522 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(&
¥›li°
, 
MQTT_PROP_AUTHENTICATION_METHOD
, "basic");

523 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

524 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

525 
rc
 = 
	`mosquôto_¥›îty_add_bö¨y
(&
¥›li°
, 
MQTT_PROP_AUTHENTICATION_DATA
, "∑ssw‹d", 
	`°æí
("password"));

526 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

527 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

528 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(&
¥›li°
, 
MQTT_PROP_RESPONSE_INFORMATION
, "response");

529 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

530 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

531 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(&
¥›li°
, 
MQTT_PROP_SERVER_REFERENCE
, "localhost");

532 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

533 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

534 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(&
¥›li°
, 
MQTT_PROP_REASON_STRING
, "reason");

535 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

536 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

537 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(&
¥›li°
, 
MQTT_PROP_RECEIVE_MAXIMUM
, 1024);

538 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

539 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

540 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(&
¥›li°
, 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
, 64);

541 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

542 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

543 
rc
 = 
	`mosquôto_¥›îty_add_byã
(&
¥›li°
, 
MQTT_PROP_MAXIMUM_QOS
, 1);

544 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

545 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

546 
rc
 = 
	`mosquôto_¥›îty_add_byã
(&
¥›li°
, 
MQTT_PROP_RETAIN_AVAILABLE
, 0);

547 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

548 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

549 
rc
 = 
	`mosquôto_¥›îty_add_°rög_∑ú
(&
¥›li°
, 
MQTT_PROP_USER_PROPERTY
, "user-agent", "mosquitto/test");

550 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

551 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

552 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(&
¥›li°
, 
MQTT_PROP_MAXIMUM_PACKET_SIZE
, 200000000);

553 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

554 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

555 
rc
 = 
	`mosquôto_¥›îty_add_byã
(&
¥›li°
, 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
, 0);

556 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

557 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

558 
rc
 = 
	`mosquôto_¥›îty_add_byã
(&
¥›li°
, 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
, 0);

559 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

560 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

561 
rc
 = 
	`mosquôto_¥›îty_add_byã
(&
¥›li°
, 
MQTT_PROP_SHARED_SUB_AVAILABLE
, 0);

562 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

563 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

565 
p
 = 
¥›li°
;

566 
cou¡
 = 0;

567 
p
){

568 
cou¡
++;

569 
p
 =Ö->
√xt
;

571 
	`CU_ASSERT_EQUAL
(
cou¡
, 17);

573 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

574 
	}
}

577 
	$TEST_check_Àngth
()

579 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
;

580 
rc
;

581 
Àn
;

582 
v¨byãs
;

583 
i
;

585 
Àn
 = 
	`¥›îty__gë_ªmaöög_Àngth
(
¥›li°
);

586 
	`CU_ASSERT_EQUAL
(
Àn
, 1);

588 
i
=1; i<10000; i++){

589 
rc
 = 
	`mosquôto_¥›îty_add_byã
(&
¥›li°
, 
MQTT_PROP_SHARED_SUB_AVAILABLE
, 0);

590 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

591 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°
);

592 if(
¥›li°
){

593 
Àn
 = 
	`¥›îty__gë_ªmaöög_Àngth
(
¥›li°
);

594 if(
i
 < 64){

595 
v¨byãs
 = 1;

596 }if(
i
 < 8192){

597 
v¨byãs
 = 2;

599 
v¨byãs
 = 3;

601 
	`CU_ASSERT_EQUAL
(
Àn
, 
v¨byãs
+2*
i
);

606 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

607 
	}
}

613 
	$öô_¥›îty_add_ã°s
()

615 
CU_pSuôe
 
ã°_suôe
 = 
NULL
;

617 
ã°_suôe
 = 
	`CU_add_suôe
("Pr›îtyádd", 
NULL
, NULL);

618 if(!
ã°_suôe
){

619 
	`¥ötf
("Errorádding CUnit PropertyáddÅest suite.\n");

624 || !
	`CU_add_ã°
(
ã°_suôe
, "AddÇŸhög, checkÜígth", 
TEST_check_Àngth
)

625 || !
	`CU_add_ã°
(
ã°_suôe
, "Add bad byã", 
TEST_add_bad_byã
)

626 || !
	`CU_add_ã°
(
ã°_suôe
, "Add bad i¡16", 
TEST_add_bad_öt16
)

627 || !
	`CU_add_ã°
(
ã°_suôe
, "Add bad i¡32", 
TEST_add_bad_öt32
)

628 || !
	`CU_add_ã°
(
ã°_suôe
, "Add bad v¨öt", 
TEST_add_bad_v¨öt
)

629 || !
	`CU_add_ã°
(
ã°_suôe
, "Add bad bö¨y", 
TEST_add_bad_bö¨y
)

630 || !
	`CU_add_ã°
(
ã°_suôe
, "Add bad såög", 
TEST_add_bad_°rög
)

631 || !
	`CU_add_ã°
(
ã°_suôe
, "Add bad såögÖaú", 
TEST_add_bad_°rög_∑ú
)

632 || !
	`CU_add_ã°
(
ã°_suôe
, "Add sögÀ byã", 
TEST_add_sögÀ_byã
)

633 || !
	`CU_add_ã°
(
ã°_suôe
, "Add sögÀ i¡16", 
TEST_add_sögÀ_öt16
)

634 || !
	`CU_add_ã°
(
ã°_suôe
, "Add sögÀ i¡32", 
TEST_add_sögÀ_öt32
)

635 || !
	`CU_add_ã°
(
ã°_suôe
, "Add sögÀ v¨öt", 
TEST_add_sögÀ_v¨öt
)

636 || !
	`CU_add_ã°
(
ã°_suôe
, "Add sögÀ bö¨y", 
TEST_add_sögÀ_bö¨y
)

637 || !
	`CU_add_ã°
(
ã°_suôe
, "Add sögÀ såög", 
TEST_add_sögÀ_°rög
)

638 || !
	`CU_add_ã°
(
ã°_suôe
, "Add sögÀ såögÖaú", 
TEST_add_sögÀ_°rög_∑ú
)

639 || !
	`CU_add_ã°
(
ã°_suôe
, "AddáŒ CONNECT", 
TEST_add_Æl_c⁄√˘
)

640 || !
	`CU_add_ã°
(
ã°_suôe
, "AddáŒ CONNACK", 
TEST_add_Æl_c⁄«ck
)

643 
	`¥ötf
("Errorádding Property Add CUnitÅests.\n");

648 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/property_read.c

1 
	~<CUnô/CUnô.h
>

2 
	~<CUnô/Basic.h
>

4 
	~"mqâ_¥Ÿocﬁ.h
"

5 
	~"¥›îty_mosq.h
"

6 
	~"∑ckë_mosq.h
"

8 
	$byã_¥›_ªad_hñ≥r
(

9 
comm™d
,

10 
uöt8_t
 *
∑ylﬂd
,

11 
uöt32_t
 
ªmaöög_Àngth
,

12 
rc_ex≥˘ed
,

13 
uöt8_t
 
idítifõr
,

14 
uöt8_t
 
vÆue_ex≥˘ed
)

16 
mosquôto__∑ckë
 
∑ckë
;

17 
mosquôto_¥›îty
 *
¥›îtõs
;

18 
rc
;

20 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

21 
∑ckë
.
∑ylﬂd
 =Öayload;

22 
∑ckë
.
ªmaöög_Àngth
 =Ñemaining_length;

23 
rc
 = 
	`¥›îty__ªad_Æl
(
comm™d
, &
∑ckë
, &
¥›îtõs
);

25 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

26 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 
ªmaöög_Àngth
);

27 if(
¥›îtõs
){

28 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
idítifõr
, identifier);

29 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
vÆue
.
i8
, 
vÆue_ex≥˘ed
);

30 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
->
√xt
, 
NULL
);

31 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 2);

32 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

34 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
, 
NULL
);

35 
	}
}

37 
	$du∂iˇã_byã_hñ≥r
(
comm™d
, 
uöt8_t
 
idítifõr
)

39 
uöt8_t
 
∑ylﬂd
[20];

41 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

42 
∑ylﬂd
[0] = 4;

43 
∑ylﬂd
[1] = 
idítifõr
;

44 
∑ylﬂd
[2] = 1;

45 
∑ylﬂd
[3] = 
idítifõr
;

46 
∑ylﬂd
[4] = 0;

48 
	`byã_¥›_ªad_hñ≥r
(
comm™d
, 
∑ylﬂd
, 5, 
MOSQ_ERR_DUPLICATE_PROPERTY
, 
idítifõr
, 1);

49 
	}
}

51 
	$bad_byã_hñ≥r
(
comm™d
, 
uöt8_t
 
idítifõr
)

53 
uöt8_t
 
∑ylﬂd
[20];

55 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

56 
∑ylﬂd
[0] = 2;

57 
∑ylﬂd
[1] = 
idítifõr
;

58 
∑ylﬂd
[2] = 2;

60 
	`byã_¥›_ªad_hñ≥r
(
comm™d
, 
∑ylﬂd
, 3, 
MOSQ_ERR_PROTOCOL
, 
idítifõr
, 0);

61 
	}
}

64 
	$öt32_¥›_ªad_hñ≥r
(

65 
comm™d
,

66 
uöt8_t
 *
∑ylﬂd
,

67 
uöt32_t
 
ªmaöög_Àngth
,

68 
rc_ex≥˘ed
,

69 
uöt8_t
 
idítifõr
,

70 
uöt32_t
 
vÆue_ex≥˘ed
)

72 
mosquôto__∑ckë
 
∑ckë
;

73 
mosquôto_¥›îty
 *
¥›îtõs
;

74 
rc
;

76 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

77 
∑ckë
.
∑ylﬂd
 =Öayload;

78 
∑ckë
.
ªmaöög_Àngth
 =Ñemaining_length;

79 
rc
 = 
	`¥›îty__ªad_Æl
(
comm™d
, &
∑ckë
, &
¥›îtõs
);

81 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

82 if(
rc
 !
rc_ex≥˘ed
){

83 
	`¥ötf
("%d / %d\n", 
rc
, 
rc_ex≥˘ed
);

85 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 
ªmaöög_Àngth
);

86 if(
¥›îtõs
){

87 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
idítifõr
, identifier);

88 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
vÆue
.
i32
, 
vÆue_ex≥˘ed
);

89 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
->
√xt
, 
NULL
);

90 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 5);

91 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

93 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
, 
NULL
);

94 
	}
}

96 
	$du∂iˇã_öt32_hñ≥r
(
comm™d
, 
uöt8_t
 
idítifõr
)

98 
uöt8_t
 
∑ylﬂd
[20];

100 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

101 
∑ylﬂd
[0] = 10;

102 
∑ylﬂd
[1] = 
idítifõr
;

103 
∑ylﬂd
[2] = 1;

104 
∑ylﬂd
[3] = 1;

105 
∑ylﬂd
[4] = 1;

106 
∑ylﬂd
[5] = 1;

107 
∑ylﬂd
[6] = 
idítifõr
;

108 
∑ylﬂd
[7] = 0;

109 
∑ylﬂd
[8] = 0;

110 
∑ylﬂd
[9] = 0;

111 
∑ylﬂd
[10] = 0;

113 
	`öt32_¥›_ªad_hñ≥r
(
comm™d
, 
∑ylﬂd
, 11, 
MOSQ_ERR_DUPLICATE_PROPERTY
, 
idítifõr
, 1);

114 
	}
}

117 
	$öt16_¥›_ªad_hñ≥r
(

118 
comm™d
,

119 
uöt8_t
 *
∑ylﬂd
,

120 
uöt32_t
 
ªmaöög_Àngth
,

121 
rc_ex≥˘ed
,

122 
uöt8_t
 
idítifõr
,

123 
uöt16_t
 
vÆue_ex≥˘ed
)

125 
mosquôto__∑ckë
 
∑ckë
;

126 
mosquôto_¥›îty
 *
¥›îtõs
;

127 
rc
;

129 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

130 
∑ckë
.
∑ylﬂd
 =Öayload;

131 
∑ckë
.
ªmaöög_Àngth
 =Ñemaining_length;

132 
rc
 = 
	`¥›îty__ªad_Æl
(
comm™d
, &
∑ckë
, &
¥›îtõs
);

134 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

135 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 
ªmaöög_Àngth
);

136 if(
¥›îtõs
){

137 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
idítifõr
, identifier);

138 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
vÆue
.
i16
, 
vÆue_ex≥˘ed
);

139 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
->
√xt
, 
NULL
);

140 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 3);

141 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

143 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
, 
NULL
);

144 
	}
}

146 
	$du∂iˇã_öt16_hñ≥r
(
comm™d
, 
uöt8_t
 
idítifõr
)

148 
uöt8_t
 
∑ylﬂd
[20];

150 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

151 
∑ylﬂd
[0] = 6;

152 
∑ylﬂd
[1] = 
idítifõr
;

153 
∑ylﬂd
[2] = 1;

154 
∑ylﬂd
[3] = 1;

155 
∑ylﬂd
[4] = 
idítifõr
;

156 
∑ylﬂd
[5] = 0;

157 
∑ylﬂd
[6] = 0;

159 
	`öt16_¥›_ªad_hñ≥r
(
comm™d
, 
∑ylﬂd
, 7, 
MOSQ_ERR_DUPLICATE_PROPERTY
, 
idítifõr
, 1);

160 
	}
}

162 
	$°rög_¥›_ªad_hñ≥r
(

163 
comm™d
,

164 
uöt8_t
 *
∑ylﬂd
,

165 
uöt32_t
 
ªmaöög_Àngth
,

166 
rc_ex≥˘ed
,

167 
uöt8_t
 
idítifõr
,

168 c⁄° *
vÆue_ex≥˘ed
)

170 
mosquôto__∑ckë
 
∑ckë
;

171 
mosquôto_¥›îty
 *
¥›îtõs
;

172 
rc
;

174 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

175 
∑ckë
.
∑ylﬂd
 =Öayload;

176 
∑ckë
.
ªmaöög_Àngth
 =Ñemaining_length;

177 
rc
 = 
	`¥›îty__ªad_Æl
(
comm™d
, &
∑ckë
, &
¥›îtõs
);

179 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

180 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 
ªmaöög_Àngth
);

181 if(
¥›îtõs
){

182 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
idítifõr
, identifier);

183 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
vÆue
.
s
.
Àn
, 
	`°æí
(
vÆue_ex≥˘ed
));

184 
	`CU_ASSERT_STRING_EQUAL
(
¥›îtõs
->
vÆue
.
s
.
v
, 
vÆue_ex≥˘ed
);

185 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
->
√xt
, 
NULL
);

186 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 1+2+
	`°æí
(
vÆue_ex≥˘ed
));

187 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

189 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
, 
NULL
);

190 
	}
}

192 
	$du∂iˇã_°rög_hñ≥r
(
comm™d
, 
uöt8_t
 
idítifõr
)

194 
uöt8_t
 
∑ylﬂd
[20];

196 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

197 
∑ylﬂd
[0] = 8;

198 
∑ylﬂd
[1] = 
idítifõr
;

199 
∑ylﬂd
[2] = 0;

200 
∑ylﬂd
[3] = 1;

201 
∑ylﬂd
[4] = 'h';

202 
∑ylﬂd
[5] = 
idítifõr
;

203 
∑ylﬂd
[6] = 0;

204 
∑ylﬂd
[7] = 1;

205 
∑ylﬂd
[8] = 'h';

207 
	`°rög_¥›_ªad_hñ≥r
(
comm™d
, 
∑ylﬂd
, 9, 
MOSQ_ERR_DUPLICATE_PROPERTY
, 
idítifõr
, "");

208 
	}
}

210 
	$bad_°rög_hñ≥r
(
uöt8_t
 
idítifõr
)

212 
uöt8_t
 
∑ylﬂd
[20];

214 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

215 
∑ylﬂd
[0] = 6;

216 
∑ylﬂd
[1] = 
idítifõr
;

217 
∑ylﬂd
[2] = 0;

218 
∑ylﬂd
[3] = 3;

219 
∑ylﬂd
[4] = 'h';

220 
∑ylﬂd
[5] = 0;

221 
∑ylﬂd
[6] = 'h';

223 
	`°rög_¥›_ªad_hñ≥r
(
CMD_PUBLISH
, 
∑ylﬂd
, 7, 
MOSQ_ERR_MALFORMED_UTF8
, 
idítifõr
, "");

224 
	}
}

226 
	$bö¨y_¥›_ªad_hñ≥r
(

227 
comm™d
,

228 
uöt8_t
 *
∑ylﬂd
,

229 
uöt32_t
 
ªmaöög_Àngth
,

230 
rc_ex≥˘ed
,

231 
uöt8_t
 
idítifõr
,

232 c⁄° 
uöt8_t
 *
vÆue_ex≥˘ed
,

233 
Àn_ex≥˘ed
)

235 
mosquôto__∑ckë
 
∑ckë
;

236 
mosquôto_¥›îty
 *
¥›îtõs
;

237 
rc
;

239 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

240 
∑ckë
.
∑ylﬂd
 =Öayload;

241 
∑ckë
.
ªmaöög_Àngth
 =Ñemaining_length;

242 
rc
 = 
	`¥›îty__ªad_Æl
(
comm™d
, &
∑ckë
, &
¥›îtõs
);

244 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

245 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 
ªmaöög_Àngth
);

246 if(
¥›îtõs
){

247 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
idítifõr
, identifier);

248 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
vÆue
.
bö
.
Àn
, 
Àn_ex≥˘ed
);

249 
	`CU_ASSERT_EQUAL
(
	`memcmp
(
¥›îtõs
->
vÆue
.
bö
.
v
, 
vÆue_ex≥˘ed
, (
size_t
)
Àn_ex≥˘ed
), 0);

250 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
->
√xt
, 
NULL
);

251 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 1+2+
Àn_ex≥˘ed
);

252 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

254 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
, 
NULL
);

255 
	}
}

257 
	$du∂iˇã_bö¨y_hñ≥r
(
comm™d
, 
uöt8_t
 
idítifõr
)

259 
uöt8_t
 
∑ylﬂd
[20];

261 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

262 
∑ylﬂd
[0] = 8;

263 
∑ylﬂd
[1] = 
idítifõr
;

264 
∑ylﬂd
[2] = 0;

265 
∑ylﬂd
[3] = 1;

266 
∑ylﬂd
[4] = 'h';

267 
∑ylﬂd
[5] = 
idítifõr
;

268 
∑ylﬂd
[6] = 0;

269 
∑ylﬂd
[7] = 1;

270 
∑ylﬂd
[8] = 'h';

272 
	`°rög_¥›_ªad_hñ≥r
(
comm™d
, 
∑ylﬂd
, 9, 
MOSQ_ERR_DUPLICATE_PROPERTY
, 
idítifõr
, "");

273 
	}
}

275 
	$°rög_∑ú_¥›_ªad_hñ≥r
(

276 
uöt8_t
 *
∑ylﬂd
,

277 
uöt32_t
 
ªmaöög_Àngth
,

278 
rc_ex≥˘ed
,

279 
uöt8_t
 
idítifõr
,

280 c⁄° *
«me_ex≥˘ed
,

281 c⁄° *
vÆue_ex≥˘ed
,

282 
boﬁ
 
ex≥˘_mu…ùÀ
)

284 
mosquôto__∑ckë
 
∑ckë
;

285 
mosquôto_¥›îty
 *
¥›îtõs
;

286 
rc
;

288 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

289 
∑ckë
.
∑ylﬂd
 =Öayload;

290 
∑ckë
.
ªmaöög_Àngth
 =Ñemaining_length;

291 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_CONNECT
, &
∑ckë
, &
¥›îtõs
);

293 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

294 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 
ªmaöög_Àngth
);

295 if(
¥›îtõs
){

296 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
idítifõr
, identifier);

297 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
«me
.
Àn
, 
	`°æí
(
«me_ex≥˘ed
));

298 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
vÆue
.
s
.
Àn
, 
	`°æí
(
vÆue_ex≥˘ed
));

299 
	`CU_ASSERT_STRING_EQUAL
(
¥›îtõs
->
«me
.
v
, 
«me_ex≥˘ed
);

300 
	`CU_ASSERT_STRING_EQUAL
(
¥›îtõs
->
vÆue
.
s
.
v
, 
vÆue_ex≥˘ed
);

301 if(
ex≥˘_mu…ùÀ
){

302 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›îtõs
->
√xt
);

304 
	`CU_ASSERT_PTR_NULL
(
¥›îtõs
->
√xt
);

305 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 1+2+
	`°æí
(
«me_ex≥˘ed
)+2+°æí(
vÆue_ex≥˘ed
));

307 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

309 
	`CU_ASSERT_PTR_NULL
(
¥›îtõs
);

310 
	}
}

312 
	$v¨öt_¥›_ªad_hñ≥r
(

313 
uöt8_t
 *
∑ylﬂd
,

314 
uöt32_t
 
ªmaöög_Àngth
,

315 
rc_ex≥˘ed
,

316 
uöt8_t
 
idítifõr
,

317 
uöt32_t
 
vÆue_ex≥˘ed
)

319 
mosquôto__∑ckë
 
∑ckë
;

320 
mosquôto_¥›îty
 *
¥›îtõs
;

321 
rc
;

323 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

324 
∑ckë
.
∑ylﬂd
 =Öayload;

325 
∑ckë
.
ªmaöög_Àngth
 =Ñemaining_length;

326 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_PUBLISH
, &
∑ckë
, &
¥›îtõs
);

328 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

329 if(
rc
 !
rc_ex≥˘ed
){

330 
	`¥ötf
("%d / %d\n", 
rc
, 
rc_ex≥˘ed
);

332 if(
¥›îtõs
){

333 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
idítifõr
, identifier);

334 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
vÆue
.
v¨öt
, 
vÆue_ex≥˘ed
);

335 
	`CU_ASSERT_PTR_NULL
(
¥›îtõs
->
√xt
);

336 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 
	`∑ckë__v¨öt_byãs
(
vÆue_ex≥˘ed
)+1);

337 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

339 
	`CU_ASSERT_PTR_NULL
(
¥›îtõs
);

340 
	}
}

342 
	$∑ckë_hñ≥r_ªas⁄_°rög_u£r_¥›îty
(
comm™d
)

344 
uöt8_t
 
∑ylﬂd
[24] = {23,

345 
MQTT_PROP_REASON_STRING
, 0, 6, 'r', 'e', 'a', 's', 'o', 'n',

346 
MQTT_PROP_USER_PROPERTY
, 0, 4, 'n', 'a', 'm', 'e', 0, 5, 'v', 'a', 'l', 'u', 'e'};

348 
mosquôto__∑ckë
 
∑ckë
;

349 
mosquôto_¥›îty
 *
¥›îtõs
, *
p
;

350 
rc
;

352 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

353 
∑ckë
.
∑ylﬂd
 =Öayload;

354 
∑ckë
.
ªmaöög_Àngth
 = (
∑ylﬂd
);;

355 
rc
 = 
	`¥›îty__ªad_Æl
(
comm™d
, &
∑ckë
, &
¥›îtõs
);

357 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

358 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›îtõs
);

359 if(
¥›îtõs
){

360 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›îtõs
->
√xt
);

361 
p
 = 
¥›îtõs
;

363 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_REASON_STRING
);

364 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "reason");

365 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("reason"));

367 
p
 =Ö->
√xt
;

368 if(
p
){

369 
	`CU_ASSERT_PTR_NULL
(
p
->
√xt
);

371 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_USER_PROPERTY
);

372 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "value");

373 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("value"));

374 
	`CU_ASSERT_STRING_EQUAL
(
p
->
«me
.
v
, "name");

375 
	`CU_ASSERT_EQUAL
(
p
->
«me
.
Àn
, 
	`°æí
("name"));

378 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

380 
	}
}

386 
	$TEST_no_¥›îtõs
()

388 
mosquôto__∑ckë
 
∑ckë
;

389 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

390 
uöt8_t
 
∑ylﬂd
[5];

391 
rc
;

393 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

394 
	`mem£t
(
∑ylﬂd
, 0, (payload));

395 
∑ckë
.
∑ylﬂd
 =Öayload;

396 
∑ckë
.
ªmaöög_Àngth
 = 1;

397 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_CONNECT
, &
∑ckë
, &
¥›îtõs
);

398 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

399 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
, 
NULL
);

400 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 1);

401 
	}
}

403 
	$TEST_åunˇãd
()

405 
mosquôto__∑ckë
 
∑ckë
;

406 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

407 
uöt8_t
 
∑ylﬂd
[5];

408 
rc
;

411 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

412 
	`mem£t
(
∑ylﬂd
, 0, (payload));

413 
∑ckë
.
∑ylﬂd
 =Öayload;

414 
∑ckë
.
ªmaöög_Àngth
 = 0;

415 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_CONNECT
, &
∑ckë
, &
¥›îtõs
);

416 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_MALFORMED_PACKET
);

417 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
, 
NULL
);

418 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 0);

421 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

422 
	`mem£t
(
∑ylﬂd
, 0, (payload));

423 
∑ylﬂd
[0] = 2;

424 
∑ckë
.
∑ylﬂd
 =Öayload;

425 
∑ckë
.
ªmaöög_Àngth
 = 1;

426 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_CONNECT
, &
∑ckë
, &
¥›îtõs
);

427 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_MALFORMED_PACKET
);

428 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
, 
NULL
);

429 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 1);

432 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

433 
	`mem£t
(
∑ylﬂd
, 0, (payload));

434 
∑ylﬂd
[0] = 4;

435 
∑ylﬂd
[1] = 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
;

436 
∑ckë
.
∑ylﬂd
 =Öayload;

437 
∑ckë
.
ªmaöög_Àngth
 = 2;

438 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_CONNECT
, &
∑ckë
, &
¥›îtõs
);

439 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_MALFORMED_PACKET
);

440 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
, 
NULL
);

441 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 2);

442 
	}
}

448 
	$TEST_övÆid_¥›îty_id
()

450 
mosquôto__∑ckë
 
∑ckë
;

451 
mosquôto_¥›îty
 *
¥›îtõs
 = 
NULL
;

452 
uöt8_t
 
∑ylﬂd
[5];

453 
rc
;

456 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

457 
	`mem£t
(
∑ylﬂd
, 0, (payload));

458 
∑ylﬂd
[0] = 4;

459 
∑ckë
.
∑ylﬂd
 =Öayload;

460 
∑ckë
.
ªmaöög_Àngth
 = 2;

461 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_CONNECT
, &
∑ckë
, &
¥›îtõs
);

462 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_MALFORMED_PACKET
);

463 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
, 
NULL
);

464 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 2);

467 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

468 
	`mem£t
(
∑ylﬂd
, 0, (payload));

469 
∑ylﬂd
[0] = 4;

470 
∑ylﬂd
[1] = 4;

471 
∑ckë
.
∑ylﬂd
 =Öayload;

472 
∑ckë
.
ªmaöög_Àngth
 = 2;

473 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_CONNECT
, &
∑ckë
, &
¥›îtõs
);

474 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_MALFORMED_PACKET
);

475 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
, 
NULL
);

476 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 2);

477 
	}
}

483 
	$TEST_sögÀ_∑ylﬂd_f‹m©_ödiˇt‹
()

485 
uöt8_t
 
∑ylﬂd
[20];

487 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

488 
∑ylﬂd
[0] = 2;

489 
∑ylﬂd
[1] = 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
;

490 
∑ylﬂd
[2] = 1;

492 
	`byã_¥›_ªad_hñ≥r
(
CMD_PUBLISH
, 
∑ylﬂd
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
, 1);

493 
	}
}

495 
	$TEST_sögÀ_ªque°_¥obÀm_öf‹m©i⁄
()

497 
uöt8_t
 
∑ylﬂd
[20];

499 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

500 
∑ylﬂd
[0] = 2;

501 
∑ylﬂd
[1] = 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
;

502 
∑ylﬂd
[2] = 1;

504 
	`byã_¥›_ªad_hñ≥r
(
CMD_CONNECT
, 
∑ylﬂd
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
, 1);

505 
	}
}

507 
	$TEST_sögÀ_ªque°_ª•⁄£_öf‹m©i⁄
()

509 
uöt8_t
 
∑ylﬂd
[20];

511 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

512 
∑ylﬂd
[0] = 2;

513 
∑ylﬂd
[1] = 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
;

514 
∑ylﬂd
[2] = 1;

516 
	`byã_¥›_ªad_hñ≥r
(
CMD_CONNECT
, 
∑ylﬂd
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
, 1);

517 
	}
}

519 
	$TEST_sögÀ_maximum_qos
()

521 
uöt8_t
 
∑ylﬂd
[20];

523 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

524 
∑ylﬂd
[0] = 2;

525 
∑ylﬂd
[1] = 
MQTT_PROP_MAXIMUM_QOS
;

526 
∑ylﬂd
[2] = 1;

528 
	`byã_¥›_ªad_hñ≥r
(
CMD_CONNACK
, 
∑ylﬂd
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_MAXIMUM_QOS
, 1);

529 
	}
}

531 
	$TEST_sögÀ_ªèö_avaûabÀ
()

533 
uöt8_t
 
∑ylﬂd
[20];

535 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

536 
∑ylﬂd
[0] = 2;

537 
∑ylﬂd
[1] = 
MQTT_PROP_RETAIN_AVAILABLE
;

538 
∑ylﬂd
[2] = 1;

540 
	`byã_¥›_ªad_hñ≥r
(
CMD_CONNACK
, 
∑ylﬂd
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_RETAIN_AVAILABLE
, 1);

541 
	}
}

543 
	$TEST_sögÀ_wûdˇrd_subs¸ùti⁄_avaûabÀ
()

545 
uöt8_t
 
∑ylﬂd
[20];

547 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

548 
∑ylﬂd
[0] = 2;

549 
∑ylﬂd
[1] = 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
;

550 
∑ylﬂd
[2] = 0;

552 
	`byã_¥›_ªad_hñ≥r
(
CMD_CONNACK
, 
∑ylﬂd
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
, 0);

553 
	}
}

555 
	$TEST_sögÀ_subs¸ùti⁄_idítifõr_avaûabÀ
()

557 
uöt8_t
 
∑ylﬂd
[20];

559 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

560 
∑ylﬂd
[0] = 2;

561 
∑ylﬂd
[1] = 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
;

562 
∑ylﬂd
[2] = 0;

564 
	`byã_¥›_ªad_hñ≥r
(
CMD_CONNACK
, 
∑ylﬂd
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
, 0);

565 
	}
}

567 
	$TEST_sögÀ_sh¨ed_subs¸ùti⁄_avaûabÀ
()

569 
uöt8_t
 
∑ylﬂd
[20];

571 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

572 
∑ylﬂd
[0] = 2;

573 
∑ylﬂd
[1] = 
MQTT_PROP_SHARED_SUB_AVAILABLE
;

574 
∑ylﬂd
[2] = 1;

576 
	`byã_¥›_ªad_hñ≥r
(
CMD_CONNACK
, 
∑ylﬂd
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SHARED_SUB_AVAILABLE
, 1);

577 
	}
}

579 
	$TEST_sögÀ_mesßge_expúy_öãrvÆ
()

581 
uöt8_t
 
∑ylﬂd
[20];

583 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

584 
∑ylﬂd
[0] = 5;

585 
∑ylﬂd
[1] = 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
;

586 
∑ylﬂd
[2] = 0x12;

587 
∑ylﬂd
[3] = 0x23;

588 
∑ylﬂd
[4] = 0x34;

589 
∑ylﬂd
[5] = 0x45;

591 
	`öt32_¥›_ªad_hñ≥r
(
CMD_WILL
, 
∑ylﬂd
, 6, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
, 0x12233445);

592 
	}
}

594 
	$TEST_sögÀ_£ssi⁄_expúy_öãrvÆ
()

596 
uöt8_t
 
∑ylﬂd
[20];

598 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

599 
∑ylﬂd
[0] = 5;

600 
∑ylﬂd
[1] = 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
;

601 
∑ylﬂd
[2] = 0x45;

602 
∑ylﬂd
[3] = 0x34;

603 
∑ylﬂd
[4] = 0x23;

604 
∑ylﬂd
[5] = 0x12;

606 
	`öt32_¥›_ªad_hñ≥r
(
CMD_CONNACK
, 
∑ylﬂd
, 6, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
, 0x45342312);

607 
	}
}

609 
	$TEST_sögÀ_wûl_dñay_öãrvÆ
()

611 
uöt8_t
 
∑ylﬂd
[20];

613 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

614 
∑ylﬂd
[0] = 5;

615 
∑ylﬂd
[1] = 
MQTT_PROP_WILL_DELAY_INTERVAL
;

616 
∑ylﬂd
[2] = 0x45;

617 
∑ylﬂd
[3] = 0x34;

618 
∑ylﬂd
[4] = 0x23;

619 
∑ylﬂd
[5] = 0x12;

621 
	`öt32_¥›_ªad_hñ≥r
(
CMD_WILL
, 
∑ylﬂd
, 6, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_WILL_DELAY_INTERVAL
, 0x45342312);

622 
	}
}

624 
	$TEST_sögÀ_maximum_∑ckë_size
()

626 
uöt8_t
 
∑ylﬂd
[20];

628 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

629 
∑ylﬂd
[0] = 5;

630 
∑ylﬂd
[1] = 
MQTT_PROP_MAXIMUM_PACKET_SIZE
;

631 
∑ylﬂd
[2] = 0x45;

632 
∑ylﬂd
[3] = 0x34;

633 
∑ylﬂd
[4] = 0x23;

634 
∑ylﬂd
[5] = 0x12;

636 
	`öt32_¥›_ªad_hñ≥r
(
CMD_CONNECT
, 
∑ylﬂd
, 6, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_MAXIMUM_PACKET_SIZE
, 0x45342312);

637 
	}
}

639 
	$TEST_sögÀ_£rvî_kìp_Æive
()

641 
uöt8_t
 
∑ylﬂd
[20];

643 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

644 
∑ylﬂd
[0] = 3;

645 
∑ylﬂd
[1] = 
MQTT_PROP_SERVER_KEEP_ALIVE
;

646 
∑ylﬂd
[2] = 0x45;

647 
∑ylﬂd
[3] = 0x34;

649 
	`öt16_¥›_ªad_hñ≥r
(
CMD_CONNACK
, 
∑ylﬂd
, 4, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SERVER_KEEP_ALIVE
, 0x4534);

650 
	}
}

652 
	$TEST_sögÀ_ª˚ive_maximum
()

654 
uöt8_t
 
∑ylﬂd
[20];

656 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

657 
∑ylﬂd
[0] = 3;

658 
∑ylﬂd
[1] = 
MQTT_PROP_RECEIVE_MAXIMUM
;

659 
∑ylﬂd
[2] = 0x68;

660 
∑ylﬂd
[3] = 0x42;

662 
	`öt16_¥›_ªad_hñ≥r
(
CMD_CONNACK
, 
∑ylﬂd
, 4, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_RECEIVE_MAXIMUM
, 0x6842);

663 
	}
}

665 
	$TEST_sögÀ_t›ic_Æüs_maximum
()

667 
uöt8_t
 
∑ylﬂd
[20];

669 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

670 
∑ylﬂd
[0] = 3;

671 
∑ylﬂd
[1] = 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
;

672 
∑ylﬂd
[2] = 0x68;

673 
∑ylﬂd
[3] = 0x42;

675 
	`öt16_¥›_ªad_hñ≥r
(
CMD_CONNECT
, 
∑ylﬂd
, 4, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
, 0x6842);

676 
	}
}

678 
	$TEST_sögÀ_t›ic_Æüs
()

680 
uöt8_t
 
∑ylﬂd
[20];

682 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

683 
∑ylﬂd
[0] = 3;

684 
∑ylﬂd
[1] = 
MQTT_PROP_TOPIC_ALIAS
;

685 
∑ylﬂd
[2] = 0x68;

686 
∑ylﬂd
[3] = 0x42;

688 
	`öt16_¥›_ªad_hñ≥r
(
CMD_PUBLISH
, 
∑ylﬂd
, 4, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_TOPIC_ALIAS
, 0x6842);

689 
	}
}

691 
	$TEST_sögÀ_c⁄ã¡_ty≥
()

693 
uöt8_t
 
∑ylﬂd
[20];

695 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

696 
∑ylﬂd
[0] = 8;

697 
∑ylﬂd
[1] = 
MQTT_PROP_CONTENT_TYPE
;

698 
∑ylﬂd
[2] = 0x00;

699 
∑ylﬂd
[3] = 0x05;

700 
∑ylﬂd
[4] = 'h';

701 
∑ylﬂd
[5] = 'e';

702 
∑ylﬂd
[6] = 'l';

703 
∑ylﬂd
[7] = 'l';

704 
∑ylﬂd
[8] = 'o';

706 
	`°rög_¥›_ªad_hñ≥r
(
CMD_PUBLISH
, 
∑ylﬂd
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_CONTENT_TYPE
, "hello");

707 
	}
}

709 
	$TEST_sögÀ_ª•⁄£_t›ic
()

711 
uöt8_t
 
∑ylﬂd
[20];

713 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

714 
∑ylﬂd
[0] = 8;

715 
∑ylﬂd
[1] = 
MQTT_PROP_RESPONSE_TOPIC
;

716 
∑ylﬂd
[2] = 0x00;

717 
∑ylﬂd
[3] = 0x05;

718 
∑ylﬂd
[4] = 'h';

719 
∑ylﬂd
[5] = 'e';

720 
∑ylﬂd
[6] = 'l';

721 
∑ylﬂd
[7] = 'l';

722 
∑ylﬂd
[8] = 'o';

724 
	`°rög_¥›_ªad_hñ≥r
(
CMD_WILL
, 
∑ylﬂd
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_RESPONSE_TOPIC
, "hello");

725 
	}
}

727 
	$TEST_sögÀ_assig√d_˛õ¡_idítifõr
()

729 
uöt8_t
 
∑ylﬂd
[20];

731 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

732 
∑ylﬂd
[0] = 8;

733 
∑ylﬂd
[1] = 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
;

734 
∑ylﬂd
[2] = 0x00;

735 
∑ylﬂd
[3] = 0x05;

736 
∑ylﬂd
[4] = 'h';

737 
∑ylﬂd
[5] = 'e';

738 
∑ylﬂd
[6] = 'l';

739 
∑ylﬂd
[7] = 'l';

740 
∑ylﬂd
[8] = 'o';

742 
	`°rög_¥›_ªad_hñ≥r
(
CMD_CONNACK
, 
∑ylﬂd
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
, "hello");

743 
	}
}

745 
	$TEST_sögÀ_authítiˇti⁄_mëhod
()

747 
uöt8_t
 
∑ylﬂd
[20];

749 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

750 
∑ylﬂd
[0] = 8;

751 
∑ylﬂd
[1] = 
MQTT_PROP_AUTHENTICATION_METHOD
;

752 
∑ylﬂd
[2] = 0x00;

753 
∑ylﬂd
[3] = 0x05;

754 
∑ylﬂd
[4] = 'h';

755 
∑ylﬂd
[5] = 'e';

756 
∑ylﬂd
[6] = 'l';

757 
∑ylﬂd
[7] = 'l';

758 
∑ylﬂd
[8] = 'o';

760 
	`°rög_¥›_ªad_hñ≥r
(
CMD_AUTH
, 
∑ylﬂd
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_AUTHENTICATION_METHOD
, "hello");

761 
	}
}

763 
	$TEST_sögÀ_ª•⁄£_öf‹m©i⁄
()

765 
uöt8_t
 
∑ylﬂd
[20];

767 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

768 
∑ylﬂd
[0] = 8;

769 
∑ylﬂd
[1] = 
MQTT_PROP_RESPONSE_INFORMATION
;

770 
∑ylﬂd
[2] = 0x00;

771 
∑ylﬂd
[3] = 0x05;

772 
∑ylﬂd
[4] = 'h';

773 
∑ylﬂd
[5] = 'e';

774 
∑ylﬂd
[6] = 'l';

775 
∑ylﬂd
[7] = 'l';

776 
∑ylﬂd
[8] = 'o';

778 
	`°rög_¥›_ªad_hñ≥r
(
CMD_CONNACK
, 
∑ylﬂd
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_RESPONSE_INFORMATION
, "hello");

779 
	}
}

781 
	$TEST_sögÀ_£rvî_ª„ªn˚
()

783 
uöt8_t
 
∑ylﬂd
[20];

785 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

786 
∑ylﬂd
[0] = 8;

787 
∑ylﬂd
[1] = 
MQTT_PROP_SERVER_REFERENCE
;

788 
∑ylﬂd
[2] = 0x00;

789 
∑ylﬂd
[3] = 0x05;

790 
∑ylﬂd
[4] = 'h';

791 
∑ylﬂd
[5] = 'e';

792 
∑ylﬂd
[6] = 'l';

793 
∑ylﬂd
[7] = 'l';

794 
∑ylﬂd
[8] = 'o';

796 
	`°rög_¥›_ªad_hñ≥r
(
CMD_CONNACK
, 
∑ylﬂd
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SERVER_REFERENCE
, "hello");

797 
	}
}

799 
	$TEST_sögÀ_ªas⁄_°rög
()

801 
uöt8_t
 
∑ylﬂd
[20];

803 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

804 
∑ylﬂd
[0] = 8;

805 
∑ylﬂd
[1] = 
MQTT_PROP_REASON_STRING
;

806 
∑ylﬂd
[2] = 0x00;

807 
∑ylﬂd
[3] = 0x05;

808 
∑ylﬂd
[4] = 'h';

809 
∑ylﬂd
[5] = 'e';

810 
∑ylﬂd
[6] = 'l';

811 
∑ylﬂd
[7] = 'l';

812 
∑ylﬂd
[8] = 'o';

814 
	`°rög_¥›_ªad_hñ≥r
(
CMD_PUBCOMP
, 
∑ylﬂd
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_REASON_STRING
, "hello");

815 
	}
}

817 
	$TEST_sögÀ_c‹ªœti⁄_d©a
()

819 
uöt8_t
 
∑ylﬂd
[20];

821 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

822 
∑ylﬂd
[0] = 8;

823 
∑ylﬂd
[1] = 
MQTT_PROP_CORRELATION_DATA
;

824 
∑ylﬂd
[2] = 0x00;

825 
∑ylﬂd
[3] = 0x05;

826 
∑ylﬂd
[4] = 1;

827 
∑ylﬂd
[5] = 'e';

828 
∑ylﬂd
[6] = 0;

829 
∑ylﬂd
[7] = 'l';

830 
∑ylﬂd
[8] = 9;

832 
	`bö¨y_¥›_ªad_hñ≥r
(
CMD_PUBLISH
, 
∑ylﬂd
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_CORRELATION_DATA
, &payload[4], 5);

833 
	}
}

835 
	$TEST_sögÀ_authítiˇti⁄_d©a
()

837 
uöt8_t
 
∑ylﬂd
[20];

839 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

840 
∑ylﬂd
[0] = 8;

841 
∑ylﬂd
[1] = 
MQTT_PROP_AUTHENTICATION_DATA
;

842 
∑ylﬂd
[2] = 0x00;

843 
∑ylﬂd
[3] = 0x05;

844 
∑ylﬂd
[4] = 1;

845 
∑ylﬂd
[5] = 'e';

846 
∑ylﬂd
[6] = 0;

847 
∑ylﬂd
[7] = 'l';

848 
∑ylﬂd
[8] = 9;

850 
	`bö¨y_¥›_ªad_hñ≥r
(
CMD_CONNECT
, 
∑ylﬂd
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_AUTHENTICATION_DATA
, &payload[4], 5);

851 
	}
}

853 
	$TEST_sögÀ_u£r_¥›îty
()

855 
uöt8_t
 
∑ylﬂd
[20];

857 
∑ylﬂd
[0] = 9;

858 
∑ylﬂd
[1] = 
MQTT_PROP_USER_PROPERTY
;

859 
∑ylﬂd
[2] = 0;

860 
∑ylﬂd
[3] = 2;

861 
∑ylﬂd
[4] = 'z';

862 
∑ylﬂd
[5] = 'a';

863 
∑ylﬂd
[6] = 0;

864 
∑ylﬂd
[7] = 2;

865 
∑ylﬂd
[8] = 'b';

866 
∑ylﬂd
[9] = 'c';

868 
	`°rög_∑ú_¥›_ªad_hñ≥r
(
∑ylﬂd
, 10, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_USER_PROPERTY
, "za", "bc", 
Ál£
);

869 
	}
}

871 
	$TEST_sögÀ_subs¸ùti⁄_idítifõr
()

873 
uöt8_t
 
∑ylﬂd
[20];

875 
∑ylﬂd
[0] = 2;

876 
∑ylﬂd
[1] = 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
;

877 
∑ylﬂd
[2] = 0;

878 
	`v¨öt_¥›_ªad_hñ≥r
(
∑ylﬂd
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 0);

880 
∑ylﬂd
[0] = 2;

881 
∑ylﬂd
[1] = 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
;

882 
∑ylﬂd
[2] = 0x7F;

883 
	`v¨öt_¥›_ªad_hñ≥r
(
∑ylﬂd
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 127);

885 
∑ylﬂd
[0] = 3;

886 
∑ylﬂd
[1] = 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
;

887 
∑ylﬂd
[2] = 0x80;

888 
∑ylﬂd
[3] = 0x01;

889 
	`v¨öt_¥›_ªad_hñ≥r
(
∑ylﬂd
, 4, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 128);

891 
∑ylﬂd
[0] = 3;

892 
∑ylﬂd
[1] = 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
;

893 
∑ylﬂd
[2] = 0xFF;

894 
∑ylﬂd
[3] = 0x7F;

895 
	`v¨öt_¥›_ªad_hñ≥r
(
∑ylﬂd
, 4, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 16383);

897 
∑ylﬂd
[0] = 4;

898 
∑ylﬂd
[1] = 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
;

899 
∑ylﬂd
[2] = 0x80;

900 
∑ylﬂd
[3] = 0x80;

901 
∑ylﬂd
[4] = 0x01;

902 
	`v¨öt_¥›_ªad_hñ≥r
(
∑ylﬂd
, 5, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 16384);

904 
∑ylﬂd
[0] = 4;

905 
∑ylﬂd
[1] = 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
;

906 
∑ylﬂd
[2] = 0xFF;

907 
∑ylﬂd
[3] = 0xFF;

908 
∑ylﬂd
[4] = 0x7F;

909 
	`v¨öt_¥›_ªad_hñ≥r
(
∑ylﬂd
, 5, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 2097151);

911 
∑ylﬂd
[0] = 5;

912 
∑ylﬂd
[1] = 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
;

913 
∑ylﬂd
[2] = 0x80;

914 
∑ylﬂd
[3] = 0x80;

915 
∑ylﬂd
[4] = 0x80;

916 
∑ylﬂd
[5] = 0x01;

917 
	`v¨öt_¥›_ªad_hñ≥r
(
∑ylﬂd
, 6, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 2097152);

920 
∑ylﬂd
[0] = 5;

921 
∑ylﬂd
[1] = 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
;

922 
∑ylﬂd
[2] = 0xFF;

923 
∑ylﬂd
[3] = 0xFF;

924 
∑ylﬂd
[4] = 0xFF;

925 
∑ylﬂd
[5] = 0x7F;

926 
	`v¨öt_¥›_ªad_hñ≥r
(
∑ylﬂd
, 6, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 268435455);

927 
	}
}

933 
	$TEST_du∂iˇã_∑ylﬂd_f‹m©_ödiˇt‹
()

935 
	`du∂iˇã_byã_hñ≥r
(
CMD_PUBLISH
, 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
);

936 
	}
}

938 
	$TEST_du∂iˇã_ªque°_¥obÀm_öf‹m©i⁄
()

940 
	`du∂iˇã_byã_hñ≥r
(
CMD_CONNECT
, 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
);

941 
	}
}

943 
	$TEST_du∂iˇã_ªque°_ª•⁄£_öf‹m©i⁄
()

945 
	`du∂iˇã_byã_hñ≥r
(
CMD_CONNECT
, 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
);

946 
	}
}

948 
	$TEST_du∂iˇã_maximum_qos
()

950 
	`du∂iˇã_byã_hñ≥r
(
CMD_CONNACK
, 
MQTT_PROP_MAXIMUM_QOS
);

951 
	}
}

953 
	$TEST_du∂iˇã_ªèö_avaûabÀ
()

955 
	`du∂iˇã_byã_hñ≥r
(
CMD_CONNACK
, 
MQTT_PROP_RETAIN_AVAILABLE
);

956 
	}
}

958 
	$TEST_du∂iˇã_wûdˇrd_subs¸ùti⁄_avaûabÀ
()

960 
	`du∂iˇã_byã_hñ≥r
(
CMD_CONNACK
, 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
);

961 
	}
}

963 
	$TEST_du∂iˇã_subs¸ùti⁄_idítifõr_avaûabÀ
()

965 
	`du∂iˇã_byã_hñ≥r
(
CMD_CONNACK
, 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
);

966 
	}
}

968 
	$TEST_du∂iˇã_sh¨ed_subs¸ùti⁄_avaûabÀ
()

970 
	`du∂iˇã_byã_hñ≥r
(
CMD_CONNACK
, 
MQTT_PROP_SHARED_SUB_AVAILABLE
);

971 
	}
}

973 
	$TEST_du∂iˇã_mesßge_expúy_öãrvÆ
()

975 
	`du∂iˇã_öt32_hñ≥r
(
CMD_PUBLISH
, 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
);

976 
	}
}

978 
	$TEST_du∂iˇã_£ssi⁄_expúy_öãrvÆ
()

980 
	`du∂iˇã_öt32_hñ≥r
(
CMD_DISCONNECT
, 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
);

981 
	}
}

983 
	$TEST_du∂iˇã_wûl_dñay_öãrvÆ
()

985 
	`du∂iˇã_öt32_hñ≥r
(
CMD_WILL
, 
MQTT_PROP_WILL_DELAY_INTERVAL
);

986 
	}
}

988 
	$TEST_du∂iˇã_maximum_∑ckë_size
()

990 
	`du∂iˇã_öt32_hñ≥r
(
CMD_CONNECT
, 
MQTT_PROP_MAXIMUM_PACKET_SIZE
);

991 
	}
}

993 
	$TEST_du∂iˇã_£rvî_kìp_Æive
()

995 
	`du∂iˇã_öt16_hñ≥r
(
CMD_CONNACK
, 
MQTT_PROP_SERVER_KEEP_ALIVE
);

996 
	}
}

998 
	$TEST_du∂iˇã_ª˚ive_maximum
()

1000 
	`du∂iˇã_öt16_hñ≥r
(
CMD_CONNACK
, 
MQTT_PROP_RECEIVE_MAXIMUM
);

1001 
	}
}

1003 
	$TEST_du∂iˇã_t›ic_Æüs_maximum
()

1005 
	`du∂iˇã_öt16_hñ≥r
(
CMD_CONNECT
, 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
);

1006 
	}
}

1008 
	$TEST_du∂iˇã_t›ic_Æüs
()

1010 
	`du∂iˇã_öt16_hñ≥r
(
CMD_PUBLISH
, 
MQTT_PROP_TOPIC_ALIAS
);

1011 
	}
}

1013 
	$TEST_du∂iˇã_c⁄ã¡_ty≥
()

1015 
	`du∂iˇã_°rög_hñ≥r
(
CMD_PUBLISH
, 
MQTT_PROP_CONTENT_TYPE
);

1016 
	}
}

1018 
	$TEST_du∂iˇã_ª•⁄£_t›ic
()

1020 
	`du∂iˇã_°rög_hñ≥r
(
CMD_PUBLISH
, 
MQTT_PROP_RESPONSE_TOPIC
);

1021 
	}
}

1023 
	$TEST_du∂iˇã_assig√d_˛õ¡_idítifõr
()

1025 
	`du∂iˇã_°rög_hñ≥r
(
CMD_CONNACK
, 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
);

1026 
	}
}

1028 
	$TEST_du∂iˇã_authítiˇti⁄_mëhod
()

1030 
	`du∂iˇã_°rög_hñ≥r
(
CMD_AUTH
, 
MQTT_PROP_AUTHENTICATION_METHOD
);

1031 
	}
}

1033 
	$TEST_du∂iˇã_ª•⁄£_öf‹m©i⁄
()

1035 
	`du∂iˇã_°rög_hñ≥r
(
CMD_CONNACK
, 
MQTT_PROP_RESPONSE_INFORMATION
);

1036 
	}
}

1038 
	$TEST_du∂iˇã_£rvî_ª„ªn˚
()

1040 
	`du∂iˇã_°rög_hñ≥r
(
CMD_CONNACK
, 
MQTT_PROP_SERVER_REFERENCE
);

1041 
	}
}

1043 
	$TEST_du∂iˇã_ªas⁄_°rög
()

1045 
	`du∂iˇã_°rög_hñ≥r
(
CMD_PUBACK
, 
MQTT_PROP_REASON_STRING
);

1046 
	}
}

1048 
	$TEST_du∂iˇã_c‹ªœti⁄_d©a
()

1050 
	`du∂iˇã_bö¨y_hñ≥r
(
CMD_PUBLISH
, 
MQTT_PROP_CORRELATION_DATA
);

1051 
	}
}

1053 
	$TEST_du∂iˇã_authítiˇti⁄_d©a
()

1055 
	`du∂iˇã_bö¨y_hñ≥r
(
CMD_CONNACK
, 
MQTT_PROP_AUTHENTICATION_DATA
);

1056 
	}
}

1058 
	$TEST_du∂iˇã_u£r_¥›îty
()

1060 
uöt8_t
 
∑ylﬂd
[20];

1062 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

1063 
∑ylﬂd
[0] = 18;

1064 
∑ylﬂd
[1] = 
MQTT_PROP_USER_PROPERTY
;

1065 
∑ylﬂd
[2] = 0;

1066 
∑ylﬂd
[3] = 2;

1067 
∑ylﬂd
[4] = 'a';

1068 
∑ylﬂd
[5] = 'b';

1069 
∑ylﬂd
[6] = 0;

1070 
∑ylﬂd
[7] = 2;

1071 
∑ylﬂd
[8] = 'g';

1072 
∑ylﬂd
[9] = 'h';

1073 
∑ylﬂd
[10] = 
MQTT_PROP_USER_PROPERTY
;

1074 
∑ylﬂd
[11] = 0;

1075 
∑ylﬂd
[12] = 2;

1076 
∑ylﬂd
[13] = 'c';

1077 
∑ylﬂd
[14] = 'd';

1078 
∑ylﬂd
[15] = 0;

1079 
∑ylﬂd
[16] = 2;

1080 
∑ylﬂd
[17] = 'e';

1081 
∑ylﬂd
[18] = 'f';

1083 
	`°rög_∑ú_¥›_ªad_hñ≥r
(
∑ylﬂd
, 19, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_USER_PROPERTY
, "ab", "gh", 
åue
);

1084 
	}
}

1086 
	$TEST_du∂iˇã_subs¸ùti⁄_idítifõr
()

1088 
uöt8_t
 
∑ylﬂd
[20];

1090 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

1091 
∑ylﬂd
[0] = 4;

1092 
∑ylﬂd
[1] = 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
;

1093 
∑ylﬂd
[2] = 0x80;

1094 
∑ylﬂd
[3] = 0x02;

1095 
∑ylﬂd
[4] = 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
;

1096 
∑ylﬂd
[5] = 0x04;

1098 
	`v¨öt_¥›_ªad_hñ≥r
(
∑ylﬂd
, 5, 
MOSQ_ERR_MALFORMED_PACKET
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 0);

1099 
	}
}

1105 
	$TEST_bad_ªque°_¥obÀm_öf‹m©i⁄
()

1107 
	`bad_byã_hñ≥r
(
CMD_CONNECT
, 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
);

1108 
	}
}

1110 
	$TEST_bad_ªque°_ª•⁄£_öf‹m©i⁄
()

1112 
	`bad_byã_hñ≥r
(
CMD_CONNECT
, 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
);

1113 
	}
}

1115 
	$TEST_bad_maximum_qos
()

1117 
	`bad_byã_hñ≥r
(
CMD_CONNACK
, 
MQTT_PROP_MAXIMUM_QOS
);

1118 
	}
}

1120 
	$TEST_bad_ªèö_avaûabÀ
()

1122 
	`bad_byã_hñ≥r
(
CMD_CONNACK
, 
MQTT_PROP_RETAIN_AVAILABLE
);

1123 
	}
}

1125 
	$TEST_bad_wûdˇrd_sub_avaûabÀ
()

1127 
	`bad_byã_hñ≥r
(
CMD_CONNACK
, 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
);

1128 
	}
}

1130 
	$TEST_bad_subs¸ùti⁄_id_avaûabÀ
()

1132 
	`bad_byã_hñ≥r
(
CMD_CONNACK
, 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
);

1133 
	}
}

1135 
	$TEST_bad_sh¨ed_sub_avaûabÀ
()

1137 
	`bad_byã_hñ≥r
(
CMD_CONNACK
, 
MQTT_PROP_SHARED_SUB_AVAILABLE
);

1138 
	}
}

1140 
	$TEST_bad_maximum_∑ckë_size
()

1142 
uöt8_t
 
∑ylﬂd
[20];

1144 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

1145 
∑ylﬂd
[0] = 5;

1146 
∑ylﬂd
[1] = 
MQTT_PROP_MAXIMUM_PACKET_SIZE
;

1147 
∑ylﬂd
[2] = 0;

1148 
∑ylﬂd
[3] = 0;

1149 
∑ylﬂd
[4] = 0;

1150 
∑ylﬂd
[5] = 0;

1152 
	`öt32_¥›_ªad_hñ≥r
(
CMD_CONNACK
, 
∑ylﬂd
, 6, 
MOSQ_ERR_PROTOCOL
, 
MQTT_PROP_MAXIMUM_PACKET_SIZE
, 0);

1153 
	}
}

1155 
	$TEST_bad_ª˚ive_maximum
()

1157 
uöt8_t
 
∑ylﬂd
[20];

1159 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

1160 
∑ylﬂd
[0] = 3;

1161 
∑ylﬂd
[1] = 
MQTT_PROP_RECEIVE_MAXIMUM
;

1162 
∑ylﬂd
[2] = 0;

1163 
∑ylﬂd
[3] = 0;

1165 
	`öt32_¥›_ªad_hñ≥r
(
CMD_CONNECT
, 
∑ylﬂd
, 4, 
MOSQ_ERR_PROTOCOL
, 
MQTT_PROP_RECEIVE_MAXIMUM
, 0);

1166 
	}
}

1168 
	$TEST_bad_t›ic_Æüs
()

1170 
uöt8_t
 
∑ylﬂd
[20];

1172 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

1173 
∑ylﬂd
[0] = 3;

1174 
∑ylﬂd
[1] = 
MQTT_PROP_TOPIC_ALIAS
;

1175 
∑ylﬂd
[2] = 0;

1176 
∑ylﬂd
[3] = 0;

1178 
	`öt32_¥›_ªad_hñ≥r
(
CMD_PUBLISH
, 
∑ylﬂd
, 4, 
MOSQ_ERR_PROTOCOL
, 
MQTT_PROP_TOPIC_ALIAS
, 0);

1179 
	}
}

1181 
	$TEST_bad_c⁄ã¡_ty≥
()

1183 
	`bad_°rög_hñ≥r
(
MQTT_PROP_CONTENT_TYPE
);

1184 
	}
}

1186 
	$TEST_bad_subs¸ùti⁄_idítifõr
()

1188 
uöt8_t
 
∑ylﬂd
[20];

1190 
	`mem£t
(&
∑ylﬂd
, 0, (payload));

1191 
∑ylﬂd
[0] = 6;

1192 
∑ylﬂd
[1] = 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
;

1193 
∑ylﬂd
[2] = 0xFF;

1194 
∑ylﬂd
[3] = 0xFF;

1195 
∑ylﬂd
[4] = 0xFF;

1196 
∑ylﬂd
[5] = 0xFF;

1197 
∑ylﬂd
[6] = 0x01;

1199 
	`v¨öt_¥›_ªad_hñ≥r
(
∑ylﬂd
, 7, 
MOSQ_ERR_MALFORMED_PACKET
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 0);

1200 
	}
}

1206 
	$TEST_∑ckë_c⁄√˘
()

1208 
uöt8_t
 
∑ylﬂd
[] = {0,

1209 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
, 0x12, 0x45, 0x00, 0x00,

1210 
MQTT_PROP_RECEIVE_MAXIMUM
, 0x00, 0x05,

1211 
MQTT_PROP_MAXIMUM_PACKET_SIZE
, 0x12, 0x45, 0x00, 0x00,

1212 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
, 0x00, 0x02,

1213 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
, 1,

1214 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
, 1,

1215 
MQTT_PROP_USER_PROPERTY
, 0, 4, 'n', 'a', 'm', 'e', 0, 5, 'v', 'a', 'l', 'u', 'e',

1216 
MQTT_PROP_AUTHENTICATION_METHOD
, 0x00, 0x04, 'n', 'o', 'n', 'e',

1217 
MQTT_PROP_AUTHENTICATION_DATA
, 0x00, 0x02, 1, 2};

1219 
mosquôto__∑ckë
 
∑ckë
;

1220 
mosquôto_¥›îty
 *
¥›îtõs
, *
p
;

1221 
rc
;

1223 
∑ylﬂd
[0] = (payload)-1;

1225 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

1226 
∑ckë
.
∑ylﬂd
 =Öayload;

1227 
∑ckë
.
ªmaöög_Àngth
 = (
∑ylﬂd
);;

1228 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_CONNECT
, &
∑ckë
, &
¥›îtõs
);

1230 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

1231 
p
 = 
¥›îtõs
;

1232 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›îtõs
);

1233 if(
p
){

1234 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1235 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
);

1236 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i32
, 0x12450000);

1238 
p
 =Ö->
√xt
;

1239 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1240 if(
p
){

1241 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1242 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_RECEIVE_MAXIMUM
);

1243 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i16
, 0x0005);

1245 
p
 =Ö->
√xt
;

1246 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1247 if(
p
){

1248 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1249 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_MAXIMUM_PACKET_SIZE
);

1250 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i32
, 0x12450000);

1252 
p
 =Ö->
√xt
;

1253 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1254 if(
p
){

1255 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1256 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
);

1257 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i16
, 0x0002);

1259 
p
 =Ö->
√xt
;

1260 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1261 if(
p
){

1262 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1263 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
);

1264 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i8
, 1);

1266 
p
 =Ö->
√xt
;

1267 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1268 if(
p
){

1269 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1270 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
);

1271 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i8
, 1);

1273 
p
 =Ö->
√xt
;

1274 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1275 if(
p
){

1276 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1277 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_USER_PROPERTY
);

1278 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "value");

1279 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("value"));

1280 
	`CU_ASSERT_STRING_EQUAL
(
p
->
«me
.
v
, "name");

1281 
	`CU_ASSERT_EQUAL
(
p
->
«me
.
Àn
, 
	`°æí
("name"));

1283 
p
 =Ö->
√xt
;

1284 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1285 if(
p
){

1286 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1287 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_AUTHENTICATION_METHOD
);

1288 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "none");

1289 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("none"));

1291 
p
 =Ö->
√xt
;

1292 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1293 if(
p
){

1294 
	`CU_ASSERT_PTR_NULL
(
p
->
√xt
);

1295 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_AUTHENTICATION_DATA
);

1296 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
bö
.
v
[0], 1);

1297 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
bö
.
v
[1], 2);

1298 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 2);

1309 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

1310 
	}
}

1312 
	$TEST_∑ckë_c⁄«ck
()

1314 
uöt8_t
 
∑ylﬂd
[] = {0,

1315 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
, 0x12, 0x45, 0x00, 0x00,

1316 
MQTT_PROP_RECEIVE_MAXIMUM
, 0x00, 0x05,

1317 
MQTT_PROP_MAXIMUM_QOS
, 1,

1318 
MQTT_PROP_RETAIN_AVAILABLE
, 0,

1319 
MQTT_PROP_MAXIMUM_PACKET_SIZE
, 0x12, 0x45, 0x00, 0x00,

1320 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
, 0x00, 0x02, 'a', 'b',

1321 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
, 0x00, 0x02,

1322 
MQTT_PROP_REASON_STRING
, 0, 6, 'r', 'e', 'a', 's', 'o', 'n',

1323 
MQTT_PROP_USER_PROPERTY
, 0, 4, 'n', 'a', 'm', 'e', 0, 5, 'v', 'a', 'l', 'u', 'e',

1324 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
, 0,

1325 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
, 0,

1326 
MQTT_PROP_SHARED_SUB_AVAILABLE
, 0,

1327 
MQTT_PROP_SERVER_KEEP_ALIVE
, 0x00, 0xFF,

1328 
MQTT_PROP_RESPONSE_INFORMATION
, 0x00, 0x03, 'r', 's', 'p',

1329 
MQTT_PROP_SERVER_REFERENCE
, 0x00, 0x04, 's', 'e', 'r', 'v',

1330 
MQTT_PROP_AUTHENTICATION_METHOD
, 0x00, 0x04, 'n', 'o', 'n', 'e',

1331 
MQTT_PROP_AUTHENTICATION_DATA
, 0x00, 0x02, 1, 2};

1333 
mosquôto__∑ckë
 
∑ckë
;

1334 
mosquôto_¥›îty
 *
¥›îtõs
, *
p
;

1335 
rc
;

1337 
∑ylﬂd
[0] = (payload)-1;

1339 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

1340 
∑ckë
.
∑ylﬂd
 =Öayload;

1341 
∑ckë
.
ªmaöög_Àngth
 = (
∑ylﬂd
);;

1342 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_CONNACK
, &
∑ckë
, &
¥›îtõs
);

1344 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

1345 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›îtõs
);

1346 
p
 = 
¥›îtõs
;

1348 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1349 if(
p
){

1350 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
);

1351 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i32
, 0x12450000);

1353 
p
 =Ö->
√xt
;

1354 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1355 if(
p
){

1356 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1357 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_RECEIVE_MAXIMUM
);

1358 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i16
, 0x0005);

1360 
p
 =Ö->
√xt
;

1361 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1362 if(
p
){

1363 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1364 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_MAXIMUM_QOS
);

1365 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i8
, 1);

1367 
p
 =Ö->
√xt
;

1368 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1369 if(
p
){

1370 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1371 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_RETAIN_AVAILABLE
);

1372 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i8
, 0);

1374 
p
 =Ö->
√xt
;

1375 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1376 if(
p
){

1377 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1378 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_MAXIMUM_PACKET_SIZE
);

1379 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i32
, 0x12450000);

1381 
p
 =Ö->
√xt
;

1382 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1383 if(
p
){

1384 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1385 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
);

1386 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "ab");

1387 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("ab"));

1389 
p
 =Ö->
√xt
;

1390 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1391 if(
p
){

1392 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1393 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
);

1394 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i16
, 0x0002);

1396 
p
 =Ö->
√xt
;

1397 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1398 if(
p
){

1399 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1400 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_REASON_STRING
);

1401 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "reason");

1402 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("reason"));

1404 
p
 =Ö->
√xt
;

1405 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1406 if(
p
){

1407 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1408 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_USER_PROPERTY
);

1409 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "value");

1410 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("value"));

1411 
	`CU_ASSERT_STRING_EQUAL
(
p
->
«me
.
v
, "name");

1412 
	`CU_ASSERT_EQUAL
(
p
->
«me
.
Àn
, 
	`°æí
("name"));

1414 
p
 =Ö->
√xt
;

1415 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1416 if(
p
){

1417 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1418 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
);

1419 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i8
, 0);

1421 
p
 =Ö->
√xt
;

1422 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1423 if(
p
){

1424 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1425 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
);

1426 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i8
, 0);

1428 
p
 =Ö->
√xt
;

1429 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1430 if(
p
){

1431 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1432 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_SHARED_SUB_AVAILABLE
);

1433 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i8
, 0);

1435 
p
 =Ö->
√xt
;

1436 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1437 if(
p
){

1438 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1439 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_SERVER_KEEP_ALIVE
);

1440 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i16
, 0x00FF);

1442 
p
 =Ö->
√xt
;

1443 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1444 if(
p
){

1445 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1446 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_RESPONSE_INFORMATION
);

1447 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "rsp");

1448 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("rsp"));

1450 
p
 =Ö->
√xt
;

1451 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1452 if(
p
){

1453 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1454 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_SERVER_REFERENCE
);

1455 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "serv");

1456 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("serv"));

1458 
p
 =Ö->
√xt
;

1459 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1460 if(
p
){

1461 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1462 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_AUTHENTICATION_METHOD
);

1463 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "none");

1464 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("none"));

1466 
p
 =Ö->
√xt
;

1467 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1468 if(
p
){

1469 
	`CU_ASSERT_PTR_NULL
(
p
->
√xt
);

1470 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_AUTHENTICATION_DATA
);

1471 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
bö
.
v
[0], 1);

1472 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
bö
.
v
[1], 2);

1473 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 2);

1492 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

1493 
	}
}

1495 
	$TEST_∑ckë_publish
()

1497 
uöt8_t
 
∑ylﬂd
[] = {0,

1498 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
, 1,

1499 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
, 0x12, 0x45, 0x00, 0x00,

1500 
MQTT_PROP_TOPIC_ALIAS
, 0x00, 0x02,

1501 
MQTT_PROP_RESPONSE_TOPIC
, 0, 6, 'r', 'e', 's', 'p', 'o', 'n',

1502 
MQTT_PROP_CORRELATION_DATA
, 0x00, 0x02, 1, 2,

1503 
MQTT_PROP_USER_PROPERTY
, 0, 4, 'n', 'a', 'm', 'e', 0, 5, 'v', 'a', 'l', 'u', 'e',

1504 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 0x04,

1505 
MQTT_PROP_CONTENT_TYPE
, 0, 5, 'e', 'm', 'p', 't', 'y'};

1507 
mosquôto__∑ckë
 
∑ckë
;

1508 
mosquôto_¥›îty
 *
¥›îtõs
, *
p
;

1509 
rc
;

1511 
∑ylﬂd
[0] = (payload)-1;

1513 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

1514 
∑ckë
.
∑ylﬂd
 =Öayload;

1515 
∑ckë
.
ªmaöög_Àngth
 = (
∑ylﬂd
);;

1516 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_PUBLISH
, &
∑ckë
, &
¥›îtõs
);

1518 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

1519 
p
 = 
¥›îtõs
;

1521 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1522 if(
p
){

1523 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1524 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
);

1525 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i8
, 1);

1527 
p
 =Ö->
√xt
;

1528 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1529 if(
p
){

1530 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1531 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
);

1532 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i32
, 0x12450000);

1534 
p
 =Ö->
√xt
;

1535 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1536 if(
p
){

1537 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1538 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_TOPIC_ALIAS
);

1539 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i16
, 0x0002);

1541 
p
 =Ö->
√xt
;

1542 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1543 if(
p
){

1544 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1545 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_RESPONSE_TOPIC
);

1546 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "respon");

1547 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("respon"));

1549 
p
 =Ö->
√xt
;

1550 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1551 if(
p
){

1552 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1553 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_CORRELATION_DATA
);

1554 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
bö
.
v
[0], 1);

1555 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
bö
.
v
[1], 2);

1556 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
bö
.
Àn
, 2);

1558 
p
 =Ö->
√xt
;

1559 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1560 if(
p
){

1561 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1562 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_USER_PROPERTY
);

1563 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "value");

1564 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("value"));

1565 
	`CU_ASSERT_STRING_EQUAL
(
p
->
«me
.
v
, "name");

1566 
	`CU_ASSERT_EQUAL
(
p
->
«me
.
Àn
, 
	`°æí
("name"));

1568 
p
 =Ö->
√xt
;

1569 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1570 if(
p
){

1571 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1572 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
);

1573 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
v¨öt
, 0x00000004);

1575 
p
 =Ö->
√xt
;

1576 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1577 if(
p
){

1578 
	`CU_ASSERT_PTR_NULL
(
p
->
√xt
);

1579 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_CONTENT_TYPE
);

1580 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "empty");

1581 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("empty"));

1591 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

1592 
	}
}

1594 
	$TEST_∑ckë_puback
()

1596 
	`∑ckë_hñ≥r_ªas⁄_°rög_u£r_¥›îty
(
CMD_PUBACK
);

1597 
	}
}

1599 
	$TEST_∑ckë_pubªc
()

1601 
	`∑ckë_hñ≥r_ªas⁄_°rög_u£r_¥›îty
(
CMD_PUBREC
);

1602 
	}
}

1604 
	$TEST_∑ckë_pubªl
()

1606 
	`∑ckë_hñ≥r_ªas⁄_°rög_u£r_¥›îty
(
CMD_PUBREL
);

1607 
	}
}

1609 
	$TEST_∑ckë_pubcomp
()

1611 
	`∑ckë_hñ≥r_ªas⁄_°rög_u£r_¥›îty
(
CMD_PUBCOMP
);

1612 
	}
}

1614 
	$TEST_∑ckë_subs¸ibe
()

1616 
uöt8_t
 
∑ylﬂd
[] = {0,

1617 
MQTT_PROP_USER_PROPERTY
, 0, 4, 'n', 'a', 'm', 'e', 0, 5, 'v', 'a', 'l', 'u', 'e',

1618 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 0x04};

1620 
mosquôto__∑ckë
 
∑ckë
;

1621 
mosquôto_¥›îty
 *
¥›îtõs
, *
p
;

1622 
rc
;

1624 
∑ylﬂd
[0] = (payload)-1;

1626 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

1627 
∑ckë
.
∑ylﬂd
 =Öayload;

1628 
∑ckë
.
ªmaöög_Àngth
 = (
∑ylﬂd
);;

1629 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_SUBSCRIBE
, &
∑ckë
, &
¥›îtõs
);

1631 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

1632 
p
 = 
¥›îtõs
;

1634 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1635 if(
p
){

1636 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1637 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_USER_PROPERTY
);

1638 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "value");

1639 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("value"));

1640 
	`CU_ASSERT_STRING_EQUAL
(
p
->
«me
.
v
, "name");

1641 
	`CU_ASSERT_EQUAL
(
p
->
«me
.
Àn
, 
	`°æí
("name"));

1643 
p
 =Ö->
√xt
;

1644 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1645 if(
p
){

1646 
	`CU_ASSERT_PTR_NULL
(
p
->
√xt
);

1647 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
);

1648 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
v¨öt
, 0x00000004);

1652 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

1653 
	}
}

1655 
	$TEST_∑ckë_suback
()

1657 
	`∑ckë_hñ≥r_ªas⁄_°rög_u£r_¥›îty
(
CMD_SUBACK
);

1658 
	}
}

1660 
	$TEST_∑ckë_unsubs¸ibe
()

1662 
uöt8_t
 
∑ylﬂd
[] = {0,

1663 
MQTT_PROP_USER_PROPERTY
, 0, 4, 'n', 'a', 'm', 'e', 0, 5, 'v', 'a', 'l', 'u', 'e'};

1665 
mosquôto__∑ckë
 
∑ckë
;

1666 
mosquôto_¥›îty
 *
¥›îtõs
, *
p
;

1667 
rc
;

1669 
∑ylﬂd
[0] = (payload)-1;

1671 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

1672 
∑ckë
.
∑ylﬂd
 =Öayload;

1673 
∑ckë
.
ªmaöög_Àngth
 = (
∑ylﬂd
);;

1674 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_UNSUBSCRIBE
, &
∑ckë
, &
¥›îtõs
);

1676 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

1677 
p
 = 
¥›îtõs
;

1679 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1680 if(
p
){

1681 
	`CU_ASSERT_PTR_NULL
(
p
->
√xt
);

1682 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_USER_PROPERTY
);

1683 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "value");

1684 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("value"));

1685 
	`CU_ASSERT_STRING_EQUAL
(
p
->
«me
.
v
, "name");

1686 
	`CU_ASSERT_EQUAL
(
p
->
«me
.
Àn
, 
	`°æí
("name"));

1689 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

1690 
	}
}

1692 
	$TEST_∑ckë_unsuback
()

1694 
	`∑ckë_hñ≥r_ªas⁄_°rög_u£r_¥›îty
(
CMD_UNSUBACK
);

1695 
	}
}

1697 
	$TEST_∑ckë_disc⁄√˘
()

1699 
uöt8_t
 
∑ylﬂd
[] = {0,

1700 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
, 0x12, 0x45, 0x00, 0x00,

1701 
MQTT_PROP_REASON_STRING
, 0, 6, 'r', 'e', 'a', 's', 'o', 'n',

1702 
MQTT_PROP_USER_PROPERTY
, 0, 4, 'n', 'a', 'm', 'e', 0, 5, 'v', 'a', 'l', 'u', 'e'};

1704 
mosquôto__∑ckë
 
∑ckë
;

1705 
mosquôto_¥›îty
 *
¥›îtõs
, *
p
;

1706 
rc
;

1708 
∑ylﬂd
[0] = (payload)-1;

1710 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

1711 
∑ckë
.
∑ylﬂd
 =Öayload;

1712 
∑ckë
.
ªmaöög_Àngth
 = (
∑ylﬂd
);;

1713 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_DISCONNECT
, &
∑ckë
, &
¥›îtõs
);

1715 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

1716 
p
 = 
¥›îtõs
;

1718 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1719 if(
p
){

1720 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1721 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
);

1722 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
i32
, 0x12450000);

1724 
p
 =Ö->
√xt
;

1725 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1726 if(
p
){

1727 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1728 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_REASON_STRING
);

1729 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "reason");

1730 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("reason"));

1732 
p
 =Ö->
√xt
;

1733 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1734 if(
p
){

1735 
	`CU_ASSERT_PTR_NULL
(
p
->
√xt
);

1736 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_USER_PROPERTY
);

1737 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "value");

1738 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("value"));

1739 
	`CU_ASSERT_STRING_EQUAL
(
p
->
«me
.
v
, "name");

1740 
	`CU_ASSERT_EQUAL
(
p
->
«me
.
Àn
, 
	`°æí
("name"));

1745 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

1746 
	}
}

1748 
	$TEST_∑ckë_auth
()

1750 
uöt8_t
 
∑ylﬂd
[] = {0,

1751 
MQTT_PROP_AUTHENTICATION_METHOD
, 0x00, 0x04, 'n', 'o', 'n', 'e',

1752 
MQTT_PROP_AUTHENTICATION_DATA
, 0x00, 0x02, 1, 2,

1753 
MQTT_PROP_REASON_STRING
, 0, 6, 'r', 'e', 'a', 's', 'o', 'n',

1754 
MQTT_PROP_USER_PROPERTY
, 0, 4, 'n', 'a', 'm', 'e', 0, 5, 'v', 'a', 'l', 'u', 'e'};

1756 
mosquôto__∑ckë
 
∑ckë
;

1757 
mosquôto_¥›îty
 *
¥›îtõs
, *
p
;

1758 
rc
;

1760 
∑ylﬂd
[0] = (payload)-1;

1762 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

1763 
∑ckë
.
∑ylﬂd
 =Öayload;

1764 
∑ckë
.
ªmaöög_Àngth
 = (
∑ylﬂd
);;

1765 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_AUTH
, &
∑ckë
, &
¥›îtõs
);

1767 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

1768 
p
 = 
¥›îtõs
;

1770 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1771 if(
p
){

1772 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1773 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_AUTHENTICATION_METHOD
);

1774 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "none");

1775 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("none"));

1777 
p
 =Ö->
√xt
;

1778 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1779 if(
p
){

1780 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1781 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_AUTHENTICATION_DATA
);

1782 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
bö
.
v
[0], 1);

1783 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
bö
.
v
[1], 2);

1784 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 2);

1786 
p
 =Ö->
√xt
;

1787 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1788 if(
p
){

1789 
	`CU_ASSERT_PTR_NOT_NULL
(
p
->
√xt
);

1790 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_REASON_STRING
);

1791 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "reason");

1792 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("reason"));

1794 
p
 =Ö->
√xt
;

1795 
	`CU_ASSERT_PTR_NOT_NULL
(
p
);

1796 if(
p
){

1797 
	`CU_ASSERT_PTR_NULL
(
p
->
√xt
);

1798 
	`CU_ASSERT_EQUAL
(
p
->
idítifõr
, 
MQTT_PROP_USER_PROPERTY
);

1799 
	`CU_ASSERT_STRING_EQUAL
(
p
->
vÆue
.
s
.
v
, "value");

1800 
	`CU_ASSERT_EQUAL
(
p
->
vÆue
.
s
.
Àn
, 
	`°æí
("value"));

1801 
	`CU_ASSERT_STRING_EQUAL
(
p
->
«me
.
v
, "name");

1802 
	`CU_ASSERT_EQUAL
(
p
->
«me
.
Àn
, 
	`°æí
("name"));

1808 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

1809 
	}
}

1816 
	$öô_¥›îty_ªad_ã°s
()

1818 
CU_pSuôe
 
ã°_suôe
 = 
NULL
;

1820 
ã°_suôe
 = 
	`CU_add_suôe
("Pr›îtyÑód", 
NULL
, NULL);

1821 if(!
ã°_suôe
){

1822 
	`¥ötf
("Errorádding CUnit PropertyÑeadÅest suite.\n");

1827 || !
	`CU_add_ã°
(
ã°_suôe
, "TrunˇãdÖackë", 
TEST_åunˇãd
)

1828 || !
	`CU_add_ã°
(
ã°_suôe
, "InvÆidÖr›îty ID", 
TEST_övÆid_¥›îty_id
)

1829 || !
	`CU_add_ã°
(
ã°_suôe
, "Nÿ¥›îtõs", 
TEST_no_¥›îtõs
)

1830 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Paylﬂd F‹m© Indiˇt‹", 
TEST_sögÀ_∑ylﬂd_f‹m©_ödiˇt‹
)

1831 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Reque° ProbÀm Inf‹m©i⁄", 
TEST_sögÀ_ªque°_¥obÀm_öf‹m©i⁄
)

1832 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Reque° Re•⁄£ Inf‹m©i⁄", 
TEST_sögÀ_ªque°_ª•⁄£_öf‹m©i⁄
)

1833 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Maximum QoS", 
TEST_sögÀ_maximum_qos
)

1834 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Rëaö AvaûabÀ", 
TEST_sögÀ_ªèö_avaûabÀ
)

1835 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Wûdˇrd Subs¸ùti⁄ AvaûabÀ", 
TEST_sögÀ_wûdˇrd_subs¸ùti⁄_avaûabÀ
)

1836 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Subs¸ùti⁄ Idítifõ∏AvaûabÀ", 
TEST_sögÀ_subs¸ùti⁄_idítifõr_avaûabÀ
)

1837 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Sh¨ed Subs¸ùti⁄ AvaûabÀ", 
TEST_sögÀ_sh¨ed_subs¸ùti⁄_avaûabÀ
)

1838 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ MesßgêExpúy I¡îvÆ", 
TEST_sögÀ_mesßge_expúy_öãrvÆ
)

1839 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Sessi⁄ Expúy I¡îvÆ", 
TEST_sögÀ_£ssi⁄_expúy_öãrvÆ
)

1840 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Wû»Dñay I¡îvÆ", 
TEST_sögÀ_wûl_dñay_öãrvÆ
)

1841 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Maximum Packë Size", 
TEST_sögÀ_maximum_∑ckë_size
)

1842 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Sîvî Kì∞Alive", 
TEST_sögÀ_£rvî_kìp_Æive
)

1843 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Re˚ivêMaximum", 
TEST_sögÀ_ª˚ive_maximum
)

1844 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ T›i¯Alü†Maximum", 
TEST_sögÀ_t›ic_Æüs_maximum
)

1845 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ T›i¯Alüs", 
TEST_sögÀ_t›ic_Æüs
)

1846 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ C⁄ã¡ Ty≥", 
TEST_sögÀ_c⁄ã¡_ty≥
)

1847 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Re•⁄£ T›ic", 
TEST_sögÀ_ª•⁄£_t›ic
)

1848 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Assig√d Clõ¡ Idítifõr", 
TEST_sögÀ_assig√d_˛õ¡_idítifõr
)

1849 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Authítiˇti⁄ Mëhod", 
TEST_sögÀ_authítiˇti⁄_mëhod
)

1850 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Re•⁄£ Inf‹m©i⁄", 
TEST_sögÀ_ª•⁄£_öf‹m©i⁄
)

1851 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Sîvî Re„ªn˚", 
TEST_sögÀ_£rvî_ª„ªn˚
)

1852 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Rós⁄ Såög", 
TEST_sögÀ_ªas⁄_°rög
)

1853 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ C‹ªœti⁄ D©a", 
TEST_sögÀ_c‹ªœti⁄_d©a
)

1854 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Authítiˇti⁄ D©a", 
TEST_sögÀ_authítiˇti⁄_d©a
)

1855 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ U£∏Pr›îty", 
TEST_sögÀ_u£r_¥›îty
)

1856 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Subs¸ùti⁄ Idítifõr", 
TEST_sögÀ_subs¸ùti⁄_idítifõr
)

1857 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Paylﬂd F‹m© Indiˇt‹", 
TEST_du∂iˇã_∑ylﬂd_f‹m©_ödiˇt‹
)

1858 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Reque° ProbÀm Inf‹m©i⁄", 
TEST_du∂iˇã_ªque°_¥obÀm_öf‹m©i⁄
)

1859 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Reque° Re•⁄£ Inf‹m©i⁄", 
TEST_du∂iˇã_ªque°_ª•⁄£_öf‹m©i⁄
)

1860 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Maximum QoS", 
TEST_du∂iˇã_maximum_qos
)

1861 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Rëaö AvaûabÀ", 
TEST_du∂iˇã_ªèö_avaûabÀ
)

1862 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Wûdˇrd Subs¸ùti⁄ AvaûabÀ", 
TEST_du∂iˇã_wûdˇrd_subs¸ùti⁄_avaûabÀ
)

1863 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Subs¸ùti⁄ Idítifõ∏AvaûabÀ", 
TEST_du∂iˇã_subs¸ùti⁄_idítifõr_avaûabÀ
)

1864 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Sh¨ed Subs¸ùti⁄ AvaûabÀ", 
TEST_du∂iˇã_sh¨ed_subs¸ùti⁄_avaûabÀ
)

1865 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã MesßgêExpúy I¡îvÆ", 
TEST_du∂iˇã_mesßge_expúy_öãrvÆ
)

1866 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Sessi⁄ Expúy I¡îvÆ", 
TEST_du∂iˇã_£ssi⁄_expúy_öãrvÆ
)

1867 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Wû»Dñay I¡îvÆ", 
TEST_du∂iˇã_wûl_dñay_öãrvÆ
)

1868 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Maximum Packë Size", 
TEST_du∂iˇã_maximum_∑ckë_size
)

1869 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Sîvî Kì∞Alive", 
TEST_du∂iˇã_£rvî_kìp_Æive
)

1870 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Re˚ivêMaximum", 
TEST_du∂iˇã_ª˚ive_maximum
)

1871 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã T›i¯Alü†Maximum", 
TEST_du∂iˇã_t›ic_Æüs_maximum
)

1872 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã T›i¯Alüs", 
TEST_du∂iˇã_t›ic_Æüs
)

1873 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã C⁄ã¡ Ty≥", 
TEST_du∂iˇã_c⁄ã¡_ty≥
)

1874 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Re•⁄£ T›ic", 
TEST_du∂iˇã_ª•⁄£_t›ic
)

1875 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Assig√d Clõ¡ ID", 
TEST_du∂iˇã_assig√d_˛õ¡_idítifõr
)

1876 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Authítiˇti⁄ Mëhod", 
TEST_du∂iˇã_authítiˇti⁄_mëhod
)

1877 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Re•⁄£ Inf‹m©i⁄", 
TEST_du∂iˇã_ª•⁄£_öf‹m©i⁄
)

1878 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Sîvî Re„ªn˚", 
TEST_du∂iˇã_£rvî_ª„ªn˚
)

1879 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Rós⁄ Såög", 
TEST_du∂iˇã_ªas⁄_°rög
)

1880 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã C‹ªœti⁄ D©a", 
TEST_du∂iˇã_c‹ªœti⁄_d©a
)

1881 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Authítiˇti⁄ D©a", 
TEST_du∂iˇã_authítiˇti⁄_d©a
)

1882 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã U£∏Pr›îty", 
TEST_du∂iˇã_u£r_¥›îty
)

1883 || !
	`CU_add_ã°
(
ã°_suôe
, "Du∂iˇã Subs¸ùti⁄ Idítifõr", 
TEST_du∂iˇã_subs¸ùti⁄_idítifõr
)

1884 || !
	`CU_add_ã°
(
ã°_suôe
, "Bad Reque° ProbÀm Inf‹m©i⁄", 
TEST_bad_ªque°_¥obÀm_öf‹m©i⁄
)

1885 || !
	`CU_add_ã°
(
ã°_suôe
, "Bad Reque° Re•⁄£ Inf‹m©i⁄", 
TEST_bad_ªque°_ª•⁄£_öf‹m©i⁄
)

1886 || !
	`CU_add_ã°
(
ã°_suôe
, "Bad Maximum QoS", 
TEST_bad_maximum_qos
)

1887 || !
	`CU_add_ã°
(
ã°_suôe
, "Bad Rëaö AvaûabÀ", 
TEST_bad_ªèö_avaûabÀ
)

1888 || !
	`CU_add_ã°
(
ã°_suôe
, "Bad Wûdˇrd Subs¸ùti⁄ AvaûabÀ", 
TEST_bad_wûdˇrd_sub_avaûabÀ
)

1889 || !
	`CU_add_ã°
(
ã°_suôe
, "Bad Subs¸ùti⁄ Idítifõ∏AvaûabÀ", 
TEST_bad_subs¸ùti⁄_id_avaûabÀ
)

1890 || !
	`CU_add_ã°
(
ã°_suôe
, "Bad Sh¨ed Subs¸ùti⁄ AvaûabÀ", 
TEST_bad_sh¨ed_sub_avaûabÀ
)

1891 || !
	`CU_add_ã°
(
ã°_suôe
, "Bad Maximum Packë Size", 
TEST_bad_maximum_∑ckë_size
)

1892 || !
	`CU_add_ã°
(
ã°_suôe
, "Bad Re˚ivêMaximum", 
TEST_bad_ª˚ive_maximum
)

1893 || !
	`CU_add_ã°
(
ã°_suôe
, "Bad T›i¯Alüs", 
TEST_bad_t›ic_Æüs
)

1894 || !
	`CU_add_ã°
(
ã°_suôe
, "Bad C⁄ã¡ Ty≥", 
TEST_bad_c⁄ã¡_ty≥
)

1895 || !
	`CU_add_ã°
(
ã°_suôe
, "Bad Subs¸ùti⁄ Idítifõr", 
TEST_bad_subs¸ùti⁄_idítifõr
)

1896 || !
	`CU_add_ã°
(
ã°_suôe
, "Packë CONNECT", 
TEST_∑ckë_c⁄√˘
)

1897 || !
	`CU_add_ã°
(
ã°_suôe
, "Packë CONNACK", 
TEST_∑ckë_c⁄«ck
)

1898 || !
	`CU_add_ã°
(
ã°_suôe
, "Packë PUBLISH", 
TEST_∑ckë_publish
)

1899 || !
	`CU_add_ã°
(
ã°_suôe
, "Packë PUBACK", 
TEST_∑ckë_puback
)

1900 || !
	`CU_add_ã°
(
ã°_suôe
, "Packë PUBREC", 
TEST_∑ckë_pubªc
)

1901 || !
	`CU_add_ã°
(
ã°_suôe
, "Packë PUBREL", 
TEST_∑ckë_pubªl
)

1902 || !
	`CU_add_ã°
(
ã°_suôe
, "Packë PUBCOMP", 
TEST_∑ckë_pubcomp
)

1903 || !
	`CU_add_ã°
(
ã°_suôe
, "Packë SUBSCRIBE", 
TEST_∑ckë_subs¸ibe
)

1904 || !
	`CU_add_ã°
(
ã°_suôe
, "Packë SUBACK", 
TEST_∑ckë_suback
)

1905 || !
	`CU_add_ã°
(
ã°_suôe
, "Packë UNSUBSCRIBE", 
TEST_∑ckë_unsubs¸ibe
)

1906 || !
	`CU_add_ã°
(
ã°_suôe
, "Packë UNSUBACK", 
TEST_∑ckë_unsuback
)

1907 || !
	`CU_add_ã°
(
ã°_suôe
, "Packë DISCONNECT", 
TEST_∑ckë_disc⁄√˘
)

1908 || !
	`CU_add_ã°
(
ã°_suôe
, "Packë AUTH", 
TEST_∑ckë_auth
)

1911 
	`¥ötf
("Errorádding PropertyÑead CUnitÅests.\n");

1916 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/property_user_read.c

1 
	~<CUnô/CUnô.h
>

2 
	~<CUnô/Basic.h
>

4 
	~"mqâ_¥Ÿocﬁ.h
"

5 
	~"¥›îty_mosq.h
"

6 
	~"∑ckë_mosq.h
"

8 
	$gíî©e_fuŒ_¥›li°
(
mosquôto_¥›îty
 **
¥›li°
)

10 
rc
;

14 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
, 1);

15 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

16 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

17 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(
¥›li°
, 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
, 3600);

18 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

19 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

20 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(
¥›li°
, 
MQTT_PROP_CONTENT_TYPE
, "application/json");

21 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

22 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

23 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(
¥›li°
, 
MQTT_PROP_RESPONSE_TOPIC
, "response/topic");

24 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

25 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

26 
rc
 = 
	`mosquôto_¥›îty_add_bö¨y
(
¥›li°
, 
MQTT_PROP_CORRELATION_DATA
, "c‹ªœti⁄-d©a", 
	`°æí
("correlation-data"));

27 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

28 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

29 
rc
 = 
	`mosquôto_¥›îty_add_v¨öt
(
¥›li°
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 63);

30 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

31 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

32 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(
¥›li°
, 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
, 86400);

33 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

34 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

35 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(
¥›li°
, 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
, "mosquitto-test");

36 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

37 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

38 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(
¥›li°
, 
MQTT_PROP_SERVER_KEEP_ALIVE
, 180);

39 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

40 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

41 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(
¥›li°
, 
MQTT_PROP_AUTHENTICATION_METHOD
, "basic");

42 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

43 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

44 
rc
 = 
	`mosquôto_¥›îty_add_bö¨y
(
¥›li°
, 
MQTT_PROP_AUTHENTICATION_DATA
, "∑ssw‹d", 
	`°æí
("password"));

45 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

46 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

47 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
, 1);

48 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

49 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

50 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(
¥›li°
, 
MQTT_PROP_WILL_DELAY_INTERVAL
, 1800);

51 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

52 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

53 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
, 1);

54 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

55 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

56 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(
¥›li°
, 
MQTT_PROP_RESPONSE_INFORMATION
, "response");

57 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

58 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

59 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(
¥›li°
, 
MQTT_PROP_SERVER_REFERENCE
, "localhost");

60 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

61 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

62 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(
¥›li°
, 
MQTT_PROP_REASON_STRING
, "reason");

63 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

64 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

65 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(
¥›li°
, 
MQTT_PROP_RECEIVE_MAXIMUM
, 1024);

66 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

67 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

68 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(
¥›li°
, 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
, 64);

69 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

70 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

71 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(
¥›li°
, 
MQTT_PROP_TOPIC_ALIAS
, 15);

72 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

73 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

74 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
MQTT_PROP_MAXIMUM_QOS
, 0);

75 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

76 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

77 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
MQTT_PROP_RETAIN_AVAILABLE
, 0);

78 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

79 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

80 
rc
 = 
	`mosquôto_¥›îty_add_°rög_∑ú
(
¥›li°
, 
MQTT_PROP_USER_PROPERTY
, "user-agent", "mosquitto/test");

81 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

82 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

83 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(
¥›li°
, 
MQTT_PROP_MAXIMUM_PACKET_SIZE
, 200000000);

84 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

85 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

86 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
, 0);

87 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

88 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

89 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
, 0);

90 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

91 if(
rc
 !
MOSQ_ERR_SUCCESS
) ;

92 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
MQTT_PROP_SHARED_SUB_AVAILABLE
, 0);

93 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

94 
	}
}

96 
	$gíî©e_∑πül_¥›li°
(
mosquôto_¥›îty
 **
¥›li°
)

98 
rc
;

101 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(
¥›li°
, 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
, 3600);

102 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

104 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(
¥›li°
, 
MQTT_PROP_RESPONSE_TOPIC
, "response/topic");

105 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

109 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(
¥›li°
, 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
, "mosquitto-test");

110 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

112 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(
¥›li°
, 
MQTT_PROP_AUTHENTICATION_METHOD
, "basic");

113 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

114 
rc
 = 
	`mosquôto_¥›îty_add_bö¨y
(
¥›li°
, 
MQTT_PROP_AUTHENTICATION_DATA
, "∑ssw‹d", 
	`°æí
("password"));

115 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

116 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
, 1);

117 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

118 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(
¥›li°
, 
MQTT_PROP_WILL_DELAY_INTERVAL
, 1800);

119 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

120 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
, 1);

121 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

122 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(
¥›li°
, 
MQTT_PROP_RESPONSE_INFORMATION
, "response");

123 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

124 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(
¥›li°
, 
MQTT_PROP_SERVER_REFERENCE
, "localhost");

125 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

126 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(
¥›li°
, 
MQTT_PROP_REASON_STRING
, "reason");

127 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

128 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(
¥›li°
, 
MQTT_PROP_RECEIVE_MAXIMUM
, 1024);

129 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

130 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(
¥›li°
, 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
, 64);

131 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

132 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(
¥›li°
, 
MQTT_PROP_TOPIC_ALIAS
, 15);

133 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

134 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
MQTT_PROP_MAXIMUM_QOS
, 0);

135 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

136 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
MQTT_PROP_RETAIN_AVAILABLE
, 0);

137 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

139 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(
¥›li°
, 
MQTT_PROP_MAXIMUM_PACKET_SIZE
, 200000000);

140 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

141 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
, 0);

142 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

143 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
, 0);

144 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

145 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
MQTT_PROP_SHARED_SUB_AVAILABLE
, 0);

146 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

147 
	}
}

153 
	$ªad_byã_hñ≥r
(c⁄° 
mosquôto_¥›îty
 *
¥›li°
, 
idítifõr
, 
uöt8_t
 
ex≥˘ed_vÆue
)

155 c⁄° 
mosquôto_¥›îty
 *
¥›
;

156 
uöt8_t
 
vÆue
;

158 
¥›
 = 
	`mosquôto_¥›îty_ªad_byã
(
¥›li°
, 
idítifõr
, &
vÆue
, 
Ál£
);

159 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›
);

160 
	`CU_ASSERT_EQUAL
(
vÆue
, 
ex≥˘ed_vÆue
);

161 
	}
}

163 
	$ªad_öt16_hñ≥r
(c⁄° 
mosquôto_¥›îty
 *
¥›li°
, 
idítifõr
, 
uöt16_t
 
ex≥˘ed_vÆue
)

165 c⁄° 
mosquôto_¥›îty
 *
¥›
;

166 
uöt16_t
 
vÆue
;

168 
¥›
 = 
	`mosquôto_¥›îty_ªad_öt16
(
¥›li°
, 
idítifõr
, &
vÆue
, 
Ál£
);

169 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›
);

170 
	`CU_ASSERT_EQUAL
(
vÆue
, 
ex≥˘ed_vÆue
);

171 
	}
}

173 
	$ªad_öt32_hñ≥r
(c⁄° 
mosquôto_¥›îty
 *
¥›li°
, 
idítifõr
, 
uöt32_t
 
ex≥˘ed_vÆue
)

175 c⁄° 
mosquôto_¥›îty
 *
¥›
;

176 
uöt32_t
 
vÆue
;

178 
¥›
 = 
	`mosquôto_¥›îty_ªad_öt32
(
¥›li°
, 
idítifõr
, &
vÆue
, 
Ál£
);

179 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›
);

180 
	`CU_ASSERT_EQUAL
(
vÆue
, 
ex≥˘ed_vÆue
);

181 
	}
}

183 
	$ªad_v¨öt_hñ≥r
(c⁄° 
mosquôto_¥›îty
 *
¥›li°
, 
idítifõr
, 
uöt32_t
 
ex≥˘ed_vÆue
)

185 c⁄° 
mosquôto_¥›îty
 *
¥›
;

186 
uöt32_t
 
vÆue
;

188 
¥›
 = 
	`mosquôto_¥›îty_ªad_v¨öt
(
¥›li°
, 
idítifõr
, &
vÆue
, 
Ál£
);

189 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›
);

190 
	`CU_ASSERT_EQUAL
(
vÆue
, 
ex≥˘ed_vÆue
);

191 
	}
}

193 
	$ªad_bö¨y_hñ≥r
(c⁄° 
mosquôto_¥›îty
 *
¥›li°
, 
idítifõr
, *
ex≥˘ed_vÆue
, 
uöt16_t
 
ex≥˘ed_Àngth
)

195 c⁄° 
mosquôto_¥›îty
 *
¥›
;

196 *
vÆue
 = 
NULL
;

197 
uöt16_t
 
Àngth
;

199 
¥›
 = 
	`mosquôto_¥›îty_ªad_bö¨y
(
¥›li°
, 
idítifõr
, &
vÆue
, &
Àngth
, 
Ál£
);

200 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›
);

201 
	`CU_ASSERT_EQUAL
(
Àngth
, 
ex≥˘ed_Àngth
);

202 
	`CU_ASSERT_PTR_NOT_NULL
(
vÆue
);

203 if(
vÆue
){

204 
	`CU_ASSERT_NSTRING_EQUAL
(
vÆue
, 
ex≥˘ed_vÆue
, 
ex≥˘ed_Àngth
);

206 
	`‰ì
(
vÆue
);

207 
	}
}

209 
	$ªad_°rög_hñ≥r
(c⁄° 
mosquôto_¥›îty
 *
¥›li°
, 
idítifõr
, *
ex≥˘ed_vÆue
)

211 c⁄° 
mosquôto_¥›îty
 *
¥›
;

212 *
vÆue
 = 
NULL
;

214 
¥›
 = 
	`mosquôto_¥›îty_ªad_°rög
(
¥›li°
, 
idítifõr
, &
vÆue
, 
Ál£
);

215 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›
);

216 
	`CU_ASSERT_PTR_NOT_NULL
(
vÆue
);

217 if(
vÆue
){

218 
	`CU_ASSERT_STRING_EQUAL
(
vÆue
, 
ex≥˘ed_vÆue
);

220 
	`‰ì
(
vÆue
);

221 
	}
}

223 
	$ªad_°rög_∑ú_hñ≥r
(c⁄° 
mosquôto_¥›îty
 *
¥›li°
, 
idítifõr
, *
ex≥˘ed_key
, *
ex≥˘ed_vÆue
)

225 c⁄° 
mosquôto_¥›îty
 *
¥›
;

226 *
key
 = 
NULL
, *
vÆue
 = NULL;

228 
¥›
 = 
	`mosquôto_¥›îty_ªad_°rög_∑ú
(
¥›li°
, 
idítifõr
, &
key
, &
vÆue
, 
Ál£
);

229 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›
);

231 
	`CU_ASSERT_PTR_NOT_NULL
(
key
);

232 if(
key
){

233 
	`CU_ASSERT_STRING_EQUAL
(
key
, 
ex≥˘ed_key
);

236 
	`CU_ASSERT_PTR_NOT_NULL
(
vÆue
);

237 if(
vÆue
){

238 
	`CU_ASSERT_STRING_EQUAL
(
vÆue
, 
ex≥˘ed_vÆue
);

240 
	`‰ì
(
key
);

241 
	`‰ì
(
vÆue
);

242 
	}
}

245 
	$TEST_ªad_sögÀ_byã
()

247 
rc
;

248 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
, *
¥›li°_c›y
 = NULL;

250 
	`gíî©e_fuŒ_¥›li°
(&
¥›li°
);

251 if(!
¥›li°
) ;

253 
	`ªad_byã_hñ≥r
(
¥›li°
, 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
, 1);

254 
	`ªad_byã_hñ≥r
(
¥›li°
, 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
, 1);

255 
	`ªad_byã_hñ≥r
(
¥›li°
, 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
, 1);

256 
	`ªad_byã_hñ≥r
(
¥›li°
, 
MQTT_PROP_MAXIMUM_QOS
, 0);

257 
	`ªad_byã_hñ≥r
(
¥›li°
, 
MQTT_PROP_RETAIN_AVAILABLE
, 0);

258 
	`ªad_byã_hñ≥r
(
¥›li°
, 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
, 0);

259 
	`ªad_byã_hñ≥r
(
¥›li°
, 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
, 0);

260 
	`ªad_byã_hñ≥r
(
¥›li°
, 
MQTT_PROP_SHARED_SUB_AVAILABLE
, 0);

262 
rc
 = 
	`mosquôto_¥›îty_c›y_Æl
(&
¥›li°_c›y
, 
¥›li°
);

263 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

264 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°_c›y
);

266 
	`ªad_byã_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
, 1);

267 
	`ªad_byã_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
, 1);

268 
	`ªad_byã_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
, 1);

269 
	`ªad_byã_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_MAXIMUM_QOS
, 0);

270 
	`ªad_byã_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_RETAIN_AVAILABLE
, 0);

271 
	`ªad_byã_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
, 0);

272 
	`ªad_byã_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
, 0);

273 
	`ªad_byã_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_SHARED_SUB_AVAILABLE
, 0);

275 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

276 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°_c›y
);

277 
	}
}

279 
	$TEST_ªad_sögÀ_öt16
()

281 
rc
;

282 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
, *
¥›li°_c›y
 = NULL;

284 
	`gíî©e_fuŒ_¥›li°
(&
¥›li°
);

285 if(!
¥›li°
) ;

287 
	`ªad_öt16_hñ≥r
(
¥›li°
, 
MQTT_PROP_SERVER_KEEP_ALIVE
, 180);

288 
	`ªad_öt16_hñ≥r
(
¥›li°
, 
MQTT_PROP_RECEIVE_MAXIMUM
, 1024);

289 
	`ªad_öt16_hñ≥r
(
¥›li°
, 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
, 64);

290 
	`ªad_öt16_hñ≥r
(
¥›li°
, 
MQTT_PROP_TOPIC_ALIAS
, 15);

292 
rc
 = 
	`mosquôto_¥›îty_c›y_Æl
(&
¥›li°_c›y
, 
¥›li°
);

293 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

294 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°_c›y
);

296 
	`ªad_öt16_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_SERVER_KEEP_ALIVE
, 180);

297 
	`ªad_öt16_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_RECEIVE_MAXIMUM
, 1024);

298 
	`ªad_öt16_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
, 64);

299 
	`ªad_öt16_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_TOPIC_ALIAS
, 15);

301 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

302 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°_c›y
);

303 
	}
}

305 
	$TEST_ªad_sögÀ_öt32
()

307 
rc
;

308 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
, *
¥›li°_c›y
 = NULL;

310 
	`gíî©e_fuŒ_¥›li°
(&
¥›li°
);

311 if(!
¥›li°
) ;

313 
	`ªad_öt32_hñ≥r
(
¥›li°
, 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
, 3600);

314 
	`ªad_öt32_hñ≥r
(
¥›li°
, 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
, 86400);

315 
	`ªad_öt32_hñ≥r
(
¥›li°
, 
MQTT_PROP_WILL_DELAY_INTERVAL
, 1800);

316 
	`ªad_öt32_hñ≥r
(
¥›li°
, 
MQTT_PROP_MAXIMUM_PACKET_SIZE
, 200000000);

318 
rc
 = 
	`mosquôto_¥›îty_c›y_Æl
(&
¥›li°_c›y
, 
¥›li°
);

319 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

320 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°_c›y
);

322 
	`ªad_öt32_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
, 3600);

323 
	`ªad_öt32_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
, 86400);

324 
	`ªad_öt32_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_WILL_DELAY_INTERVAL
, 1800);

325 
	`ªad_öt32_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_MAXIMUM_PACKET_SIZE
, 200000000);

327 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

328 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°_c›y
);

329 
	}
}

331 
	$TEST_ªad_sögÀ_v¨öt
()

333 
rc
;

334 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
, *
¥›li°_c›y
 = NULL;

336 
	`gíî©e_fuŒ_¥›li°
(&
¥›li°
);

337 if(!
¥›li°
) ;

339 
	`ªad_v¨öt_hñ≥r
(
¥›li°
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 63);

341 
rc
 = 
	`mosquôto_¥›îty_c›y_Æl
(&
¥›li°_c›y
, 
¥›li°
);

342 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

343 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°_c›y
);

345 
	`ªad_v¨öt_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 63);

347 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

348 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°_c›y
);

349 
	}
}

351 
	$TEST_ªad_sögÀ_bö¨y
()

353 
rc
;

354 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
, *
¥›li°_c›y
 = NULL;

356 
	`gíî©e_fuŒ_¥›li°
(&
¥›li°
);

357 if(!
¥›li°
) ;

359 
	`ªad_bö¨y_hñ≥r
(
¥›li°
, 
MQTT_PROP_CORRELATION_DATA
, "c‹ªœti⁄-d©a", 
	`°æí
("correlation-data"));

360 
	`ªad_bö¨y_hñ≥r
(
¥›li°
, 
MQTT_PROP_AUTHENTICATION_DATA
, "∑ssw‹d", 
	`°æí
("password"));

362 
rc
 = 
	`mosquôto_¥›îty_c›y_Æl
(&
¥›li°_c›y
, 
¥›li°
);

363 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

364 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°_c›y
);

366 if(
¥›li°_c›y
){

367 
	`ªad_bö¨y_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_CORRELATION_DATA
, "c‹ªœti⁄-d©a", 
	`°æí
("correlation-data"));

368 
	`ªad_bö¨y_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_AUTHENTICATION_DATA
, "∑ssw‹d", 
	`°æí
("password"));

371 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

372 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°_c›y
);

373 
	}
}

375 
	$TEST_ªad_sögÀ_°rög
()

377 
rc
;

378 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
, *
¥›li°_c›y
 = NULL;

380 
	`gíî©e_fuŒ_¥›li°
(&
¥›li°
);

381 if(!
¥›li°
) ;

383 
	`ªad_°rög_hñ≥r
(
¥›li°
, 
MQTT_PROP_CONTENT_TYPE
, "application/json");

384 
	`ªad_°rög_hñ≥r
(
¥›li°
, 
MQTT_PROP_RESPONSE_TOPIC
, "response/topic");

385 
	`ªad_°rög_hñ≥r
(
¥›li°
, 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
, "mosquitto-test");

386 
	`ªad_°rög_hñ≥r
(
¥›li°
, 
MQTT_PROP_AUTHENTICATION_METHOD
, "basic");

387 
	`ªad_°rög_hñ≥r
(
¥›li°
, 
MQTT_PROP_RESPONSE_INFORMATION
, "response");

388 
	`ªad_°rög_hñ≥r
(
¥›li°
, 
MQTT_PROP_SERVER_REFERENCE
, "localhost");

389 
	`ªad_°rög_hñ≥r
(
¥›li°
, 
MQTT_PROP_REASON_STRING
, "reason");

391 
rc
 = 
	`mosquôto_¥›îty_c›y_Æl
(&
¥›li°_c›y
, 
¥›li°
);

392 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

393 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°_c›y
);

395 if(
¥›li°_c›y
){

396 
	`ªad_°rög_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_CONTENT_TYPE
, "application/json");

397 
	`ªad_°rög_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_RESPONSE_TOPIC
, "response/topic");

398 
	`ªad_°rög_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
, "mosquitto-test");

399 
	`ªad_°rög_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_AUTHENTICATION_METHOD
, "basic");

400 
	`ªad_°rög_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_RESPONSE_INFORMATION
, "response");

401 
	`ªad_°rög_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_SERVER_REFERENCE
, "localhost");

402 
	`ªad_°rög_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_REASON_STRING
, "reason");

405 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

406 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°_c›y
);

407 
	}
}

409 
	$TEST_ªad_sögÀ_°rög_∑ú
()

411 
rc
;

412 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
, *
¥›li°_c›y
 = NULL;

414 
	`gíî©e_fuŒ_¥›li°
(&
¥›li°
);

415 if(!
¥›li°
) ;

417 
	`ªad_°rög_∑ú_hñ≥r
(
¥›li°
, 
MQTT_PROP_USER_PROPERTY
, "user-agent", "mosquitto/test");

419 
rc
 = 
	`mosquôto_¥›îty_c›y_Æl
(&
¥›li°_c›y
, 
¥›li°
);

420 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

421 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°_c›y
);

423 if(
¥›li°_c›y
){

424 
	`ªad_°rög_∑ú_hñ≥r
(
¥›li°_c›y
, 
MQTT_PROP_USER_PROPERTY
, "user-agent", "mosquitto/test");

427 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

428 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°_c›y
);

429 
	}
}

435 
	$missög_ªad_hñ≥r
(
mosquôto_¥›îty
 *
¥›li°
)

437 c⁄° 
mosquôto_¥›îty
 *
¥›
;

438 
uöt8_t
 
byã_vÆue
;

439 
uöt16_t
 
öt16_vÆue
;

440 
uöt32_t
 
öt32_vÆue
;

441 *
key
, *
vÆue
;

442 
uöt16_t
 
Àngth
;

445 
¥›
 = 
	`mosquôto_¥›îty_ªad_byã
(
¥›li°
, 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
, &
byã_vÆue
, 
Ál£
);

446 
	`CU_ASSERT_PTR_NULL
(
¥›
);

449 
¥›
 = 
	`mosquôto_¥›îty_ªad_öt32
(
¥›li°
, 
MQTT_PROP_WILL_DELAY_INTERVAL
, &
öt32_vÆue
, 
Ál£
);

450 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›
);

451 
	`CU_ASSERT_EQUAL
(
öt32_vÆue
, 1800);

454 
vÆue
 = 
NULL
;

455 
¥›
 = 
	`mosquôto_¥›îty_ªad_°rög
(
¥›li°
, 
MQTT_PROP_CONTENT_TYPE
, &
vÆue
, 
Ál£
);

456 
	`CU_ASSERT_PTR_NULL
(
¥›
);

459 
vÆue
 = 
NULL
;

460 
¥›
 = 
	`mosquôto_¥›îty_ªad_°rög
(
¥›li°
, 
MQTT_PROP_RESPONSE_TOPIC
, &
vÆue
, 
Ál£
);

461 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›
);

462 
	`CU_ASSERT_PTR_NOT_NULL
(
vÆue
);

463 if(
vÆue
){

464 
	`CU_ASSERT_STRING_EQUAL
(
vÆue
, "response/topic");

465 
	`‰ì
(
vÆue
);

469 
¥›
 = 
	`mosquôto_¥›îty_ªad_bö¨y
(
¥›li°
, 
MQTT_PROP_CORRELATION_DATA
, (**)&
vÆue
, &
Àngth
, 
Ál£
);

470 
	`CU_ASSERT_PTR_NULL
(
¥›
);

473 
¥›
 = 
	`mosquôto_¥›îty_ªad_byã
(
¥›li°
, 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
, &
byã_vÆue
, 
Ál£
);

474 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›
);

475 
	`CU_ASSERT_EQUAL
(
byã_vÆue
, 1);

478 
¥›
 = 
	`mosquôto_¥›îty_ªad_v¨öt
(
¥›li°
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, &
öt32_vÆue
, 
Ál£
);

479 
	`CU_ASSERT_PTR_NULL
(
¥›
);

482 
vÆue
 = 
NULL
;

483 
¥›
 = 
	`mosquôto_¥›îty_ªad_°rög
(
¥›li°
, 
MQTT_PROP_SERVER_REFERENCE
, &
vÆue
, 
Ál£
);

484 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›
);

485 
	`CU_ASSERT_PTR_NOT_NULL
(
vÆue
);

486 if(
vÆue
){

487 
	`CU_ASSERT_STRING_EQUAL
(
vÆue
, "localhost");

488 
	`‰ì
(
vÆue
);

492 
¥›
 = 
	`mosquôto_¥›îty_ªad_öt32
(
¥›li°
, 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
, &
öt32_vÆue
, 
Ál£
);

493 
	`CU_ASSERT_PTR_NULL
(
¥›
);

496 
vÆue
 = 
NULL
;

497 
¥›
 = 
	`mosquôto_¥›îty_ªad_bö¨y
(
¥›li°
, 
MQTT_PROP_AUTHENTICATION_DATA
, (**)&
vÆue
, &
Àngth
, 
Ál£
);

498 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›
);

499 
	`CU_ASSERT_PTR_NOT_NULL
(
vÆue
);

500 if(
vÆue
){

501 
	`CU_ASSERT_NSTRING_EQUAL
(
vÆue
, "∑ssw‹d", 
	`°æí
("password"));

502 
	`CU_ASSERT_EQUAL
(
Àngth
, 
	`°æí
("password"));

503 
	`‰ì
(
vÆue
);

507 
¥›
 = 
	`mosquôto_¥›îty_ªad_öt16
(
¥›li°
, 
MQTT_PROP_SERVER_KEEP_ALIVE
, &
öt16_vÆue
, 
Ál£
);

508 
	`CU_ASSERT_PTR_NULL
(
¥›
);

511 
¥›
 = 
	`mosquôto_¥›îty_ªad_öt16
(
¥›li°
, 
MQTT_PROP_RECEIVE_MAXIMUM
, &
öt16_vÆue
, 
Ál£
);

512 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›
);

513 
	`CU_ASSERT_EQUAL
(
öt16_vÆue
, 1024);

516 
¥›
 = 
	`mosquôto_¥›îty_ªad_°rög_∑ú
(
¥›li°
, 
MQTT_PROP_USER_PROPERTY
, &
key
, &
vÆue
, 
Ál£
);

517 
	`CU_ASSERT_PTR_NULL
(
¥›
);

518 
	}
}

521 
	$TEST_ªad_missög
()

523 
mosquôto_¥›îty
 *
¥›li°
 = 
NULL
, *
¥›li°_c›y
 = NULL;

524 
rc
;

526 
	`gíî©e_∑πül_¥›li°
(&
¥›li°
);

527 if(!
¥›li°
) ;

529 
	`missög_ªad_hñ≥r
(
¥›li°
);

530 
rc
 = 
	`mosquôto_¥›îty_c›y_Æl
(&
¥›li°_c›y
, 
¥›li°
);

531 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

532 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›li°_c›y
);

533 if(
¥›li°_c›y
){

534 
	`missög_ªad_hñ≥r
(
¥›li°_c›y
);

537 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°
);

538 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›li°_c›y
);

539 
	}
}

545 
	$°rög_to_¥›îty_öfo_hñ≥r
(c⁄° *
°r
, 
rc_ex≥˘ed
, 
idítifõr_ex≥˘ed
, 
ty≥_ex≥˘ed
)

547 
rc
;

548 
idítifõr
, 
ty≥
;

550 
rc
 = 
	`mosquôto_°rög_to_¥›îty_öfo
(
°r
, &
idítifõr
, &
ty≥
);

551 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

552 if(
rc
 =
MOSQ_ERR_SUCCESS
){

553 
	`CU_ASSERT_EQUAL
(
idítifõr
, 
idítifõr_ex≥˘ed
);

554 
	`CU_ASSERT_EQUAL
(
ty≥
, 
ty≥_ex≥˘ed
);

556 
	}
}

558 
	$TEST_°rög_to_¥›îty_öfo
()

560 
	`°rög_to_¥›îty_öfo_hñ≥r
("∑ylﬂd-f‹m©-ödiˇt‹", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
, 
MQTT_PROP_TYPE_BYTE
);

561 
	`°rög_to_¥›îty_öfo_hñ≥r
("mesßge-expúy-öãrvÆ", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
, 
MQTT_PROP_TYPE_INT32
);

562 
	`°rög_to_¥›îty_öfo_hñ≥r
("c⁄ã¡-ty≥", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_CONTENT_TYPE
, 
MQTT_PROP_TYPE_STRING
);

563 
	`°rög_to_¥›îty_öfo_hñ≥r
("ª•⁄£-t›ic", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_RESPONSE_TOPIC
, 
MQTT_PROP_TYPE_STRING
);

564 
	`°rög_to_¥›îty_öfo_hñ≥r
("c‹ªœti⁄-d©a", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_CORRELATION_DATA
, 
MQTT_PROP_TYPE_BINARY
);

565 
	`°rög_to_¥›îty_öfo_hñ≥r
("subs¸ùti⁄-idítifõr", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 
MQTT_PROP_TYPE_VARINT
);

566 
	`°rög_to_¥›îty_öfo_hñ≥r
("£ssi⁄-expúy-öãrvÆ", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
, 
MQTT_PROP_TYPE_INT32
);

567 
	`°rög_to_¥›îty_öfo_hñ≥r
("assig√d-˛õ¡-idítifõr", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
, 
MQTT_PROP_TYPE_STRING
);

568 
	`°rög_to_¥›îty_öfo_hñ≥r
("£rvî-kìp-Æive", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SERVER_KEEP_ALIVE
, 
MQTT_PROP_TYPE_INT16
);

569 
	`°rög_to_¥›îty_öfo_hñ≥r
("authítiˇti⁄-mëhod", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_AUTHENTICATION_METHOD
, 
MQTT_PROP_TYPE_STRING
);

570 
	`°rög_to_¥›îty_öfo_hñ≥r
("authítiˇti⁄-d©a", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_AUTHENTICATION_DATA
, 
MQTT_PROP_TYPE_BINARY
);

571 
	`°rög_to_¥›îty_öfo_hñ≥r
("ªque°-¥obÀm-öf‹m©i⁄", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
, 
MQTT_PROP_TYPE_BYTE
);

572 
	`°rög_to_¥›îty_öfo_hñ≥r
("wûl-dñay-öãrvÆ", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_WILL_DELAY_INTERVAL
, 
MQTT_PROP_TYPE_INT32
);

573 
	`°rög_to_¥›îty_öfo_hñ≥r
("ªque°-ª•⁄£-öf‹m©i⁄", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
, 
MQTT_PROP_TYPE_BYTE
);

574 
	`°rög_to_¥›îty_öfo_hñ≥r
("ª•⁄£-öf‹m©i⁄", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_RESPONSE_INFORMATION
, 
MQTT_PROP_TYPE_STRING
);

575 
	`°rög_to_¥›îty_öfo_hñ≥r
("£rvî-ª„ªn˚", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SERVER_REFERENCE
, 
MQTT_PROP_TYPE_STRING
);

576 
	`°rög_to_¥›îty_öfo_hñ≥r
("ªas⁄-°rög", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_REASON_STRING
, 
MQTT_PROP_TYPE_STRING
);

577 
	`°rög_to_¥›îty_öfo_hñ≥r
("ª˚ive-maximum", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_RECEIVE_MAXIMUM
, 
MQTT_PROP_TYPE_INT16
);

578 
	`°rög_to_¥›îty_öfo_hñ≥r
("t›ic-Æüs-maximum", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
, 
MQTT_PROP_TYPE_INT16
);

579 
	`°rög_to_¥›îty_öfo_hñ≥r
("t›ic-Æüs", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_TOPIC_ALIAS
, 
MQTT_PROP_TYPE_INT16
);

580 
	`°rög_to_¥›îty_öfo_hñ≥r
("maximum-qos", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_MAXIMUM_QOS
, 
MQTT_PROP_TYPE_BYTE
);

581 
	`°rög_to_¥›îty_öfo_hñ≥r
("ªèö-avaûabÀ", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_RETAIN_AVAILABLE
, 
MQTT_PROP_TYPE_BYTE
);

582 
	`°rög_to_¥›îty_öfo_hñ≥r
("u£r-¥›îty", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_USER_PROPERTY
, 
MQTT_PROP_TYPE_STRING_PAIR
);

583 
	`°rög_to_¥›îty_öfo_hñ≥r
("maximum-∑ckë-size", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_MAXIMUM_PACKET_SIZE
, 
MQTT_PROP_TYPE_INT32
);

584 
	`°rög_to_¥›îty_öfo_hñ≥r
("wûdˇrd-subs¸ùti⁄-avaûabÀ", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
, 
MQTT_PROP_TYPE_BYTE
);

585 
	`°rög_to_¥›îty_öfo_hñ≥r
("subs¸ùti⁄-idítifõr-avaûabÀ", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
, 
MQTT_PROP_TYPE_BYTE
);

586 
	`°rög_to_¥›îty_öfo_hñ≥r
("sh¨ed-subs¸ùti⁄-avaûabÀ", 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SHARED_SUB_AVAILABLE
, 
MQTT_PROP_TYPE_BYTE
);

588 
	`°rög_to_¥›îty_öfo_hñ≥r
("∑ylﬂd-f‹m©-ödiˇt‹1", 
MOSQ_ERR_INVAL
, 0, 0);

589 
	`°rög_to_¥›îty_öfo_hñ≥r
("∑ylﬂd", 
MOSQ_ERR_INVAL
, 0, 0);

590 
	`°rög_to_¥›îty_öfo_hñ≥r
("", 
MOSQ_ERR_INVAL
, 0, 0);

591 
	`°rög_to_¥›îty_öfo_hñ≥r
(
NULL
, 
MOSQ_ERR_INVAL
, 0, 0);

592 
	}
}

599 
	$öô_¥›îty_u£r_ªad_ã°s
()

601 
CU_pSuôe
 
ã°_suôe
 = 
NULL
;

603 
ã°_suôe
 = 
	`CU_add_suôe
("Pr›îty u£∏ªad", 
NULL
, NULL);

604 if(!
ã°_suôe
){

605 
	`¥ötf
("Errorádding CUnit Property userÑeadÅest suite.\n");

610 || !
	`CU_add_ã°
(
ã°_suôe
, "Ród sögÀ byã", 
TEST_ªad_sögÀ_byã
)

611 || !
	`CU_add_ã°
(
ã°_suôe
, "Ród sögÀ i¡16", 
TEST_ªad_sögÀ_öt16
)

612 || !
	`CU_add_ã°
(
ã°_suôe
, "Ród sögÀ i¡32", 
TEST_ªad_sögÀ_öt32
)

613 || !
	`CU_add_ã°
(
ã°_suôe
, "Ród sögÀ v¨öt", 
TEST_ªad_sögÀ_v¨öt
)

614 || !
	`CU_add_ã°
(
ã°_suôe
, "Ród sögÀ bö¨y", 
TEST_ªad_sögÀ_bö¨y
)

615 || !
	`CU_add_ã°
(
ã°_suôe
, "Ród sögÀ såög", 
TEST_ªad_sögÀ_°rög
)

616 || !
	`CU_add_ã°
(
ã°_suôe
, "Ród sögÀ såögÖaú", 
TEST_ªad_sögÀ_°rög_∑ú
)

617 || !
	`CU_add_ã°
(
ã°_suôe
, "Ród missög", 
TEST_ªad_missög
)

618 || !
	`CU_add_ã°
(
ã°_suôe
, "SåögÅÿ¥›îty info", 
TEST_°rög_to_¥›îty_öfo
)

621 
	`¥ötf
("Errorádding Property Add CUnitÅests.\n");

626 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/property_write.c

1 
	~<CUnô/CUnô.h
>

2 
	~<CUnô/Basic.h
>

4 
	~"mqâ_¥Ÿocﬁ.h
"

5 
	~"¥›îty_mosq.h
"

6 
	~"∑ckë_mosq.h
"

8 
	$byã_¥›_wrôe_hñ≥r
(

9 
comm™d
,

10 
uöt32_t
 
ªmaöög_Àngth
,

11 
rc_ex≥˘ed
,

12 
idítifõr
,

13 
uöt8_t
 
vÆue_ex≥˘ed
)

15 
mosquôto_¥›îty
 
¥›îty
;

16 
mosquôto__∑ckë
 
∑ckë
;

17 
mosquôto_¥›îty
 *
¥›îtõs
;

18 
rc
;

20 
	`mem£t
(&
¥›îty
, 0, (
mosquôto_¥›îty
));

22 
¥›îty
.
idítifõr
 = identifier;

23 
¥›îty
.
vÆue
.
i8
 = 
vÆue_ex≥˘ed
;

25 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

26 
∑ckë
.
ªmaöög_Àngth
 = 
	`¥›îty__gë_Àngth_Æl
(&
¥›îty
)+1;

27 
∑ckë
.
∑ckë_Àngth
 =Öackë.
ªmaöög_Àngth
+10;

28 
∑ckë
.
∑ylﬂd
 = 
	`ˇŒoc
’ackë.
ªmaöög_Àngth
+10, 1);

30 
	`CU_ASSERT_PTR_NOT_NULL
(
∑ckë
.
∑ylﬂd
);

31 if(!
∑ckë
.
∑ylﬂd
) ;

33 
	`¥›îty__wrôe_Æl
(&
∑ckë
, &
¥›îty
, 
åue
);

34 
∑ckë
.
pos
 = 0;

36 
rc
 = 
	`¥›îty__ªad_Æl
(
comm™d
, &
∑ckë
, &
¥›îtõs
);

38 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

39 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 
ªmaöög_Àngth
);

40 if(
¥›îtõs
){

41 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
idítifõr
, identifier);

42 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
vÆue
.
i8
, 
vÆue_ex≥˘ed
);

43 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
->
√xt
, 
NULL
);

44 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 2);

45 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

47 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
, 
NULL
);

48 
	`‰ì
(
∑ckë
.
∑ylﬂd
);

49 
	}
}

52 
	$öt32_¥›_wrôe_hñ≥r
(

53 
comm™d
,

54 
uöt32_t
 
ªmaöög_Àngth
,

55 
rc_ex≥˘ed
,

56 
idítifõr
,

57 
uöt32_t
 
vÆue_ex≥˘ed
)

59 
mosquôto_¥›îty
 
¥›îty
;

60 
mosquôto__∑ckë
 
∑ckë
;

61 
mosquôto_¥›îty
 *
¥›îtõs
;

62 
rc
;

64 
	`mem£t
(&
¥›îty
, 0, (
mosquôto_¥›îty
));

66 
¥›îty
.
idítifõr
 = identifier;

67 
¥›îty
.
vÆue
.
i32
 = 
vÆue_ex≥˘ed
;

69 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

70 
∑ckë
.
ªmaöög_Àngth
 = 
	`¥›îty__gë_Àngth_Æl
(&
¥›îty
)+1;

71 
∑ckë
.
∑ckë_Àngth
 =Öackë.
ªmaöög_Àngth
+10;

72 
∑ckë
.
∑ylﬂd
 = 
	`ˇŒoc
’ackë.
ªmaöög_Àngth
+10, 1);

74 
	`CU_ASSERT_PTR_NOT_NULL
(
∑ckë
.
∑ylﬂd
);

75 if(!
∑ckë
.
∑ylﬂd
) ;

77 
	`¥›îty__wrôe_Æl
(&
∑ckë
, &
¥›îty
, 
åue
);

78 
∑ckë
.
pos
 = 0;

80 
rc
 = 
	`¥›îty__ªad_Æl
(
comm™d
, &
∑ckë
, &
¥›îtõs
);

82 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

83 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 
ªmaöög_Àngth
);

84 if(
¥›îtõs
){

85 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
idítifõr
, identifier);

86 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
vÆue
.
i32
, 
vÆue_ex≥˘ed
);

87 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
->
√xt
, 
NULL
);

88 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 5);

89 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

91 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
, 
NULL
);

92 
	`‰ì
(
∑ckë
.
∑ylﬂd
);

93 
	}
}

96 
	$öt16_¥›_wrôe_hñ≥r
(

97 
comm™d
,

98 
uöt32_t
 
ªmaöög_Àngth
,

99 
rc_ex≥˘ed
,

100 
idítifõr
,

101 
uöt16_t
 
vÆue_ex≥˘ed
)

103 
mosquôto_¥›îty
 
¥›îty
;

104 
mosquôto__∑ckë
 
∑ckë
;

105 
mosquôto_¥›îty
 *
¥›îtõs
;

106 
rc
;

108 
	`mem£t
(&
¥›îty
, 0, (
mosquôto_¥›îty
));

110 
¥›îty
.
idítifõr
 = identifier;

111 
¥›îty
.
vÆue
.
i16
 = 
vÆue_ex≥˘ed
;

113 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

114 
∑ckë
.
ªmaöög_Àngth
 = 
	`¥›îty__gë_Àngth_Æl
(&
¥›îty
)+1;

115 
∑ckë
.
∑ckë_Àngth
 =Öackë.
ªmaöög_Àngth
+10;

116 
∑ckë
.
∑ylﬂd
 = 
	`ˇŒoc
’ackë.
ªmaöög_Àngth
+10, 1);

118 
	`CU_ASSERT_PTR_NOT_NULL
(
∑ckë
.
∑ylﬂd
);

119 if(!
∑ckë
.
∑ylﬂd
) ;

121 
	`¥›îty__wrôe_Æl
(&
∑ckë
, &
¥›îty
, 
åue
);

122 
∑ckë
.
pos
 = 0;

124 
rc
 = 
	`¥›îty__ªad_Æl
(
comm™d
, &
∑ckë
, &
¥›îtõs
);

126 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

127 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 
ªmaöög_Àngth
);

128 if(
¥›îtõs
){

129 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
idítifõr
, identifier);

130 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
vÆue
.
i16
, 
vÆue_ex≥˘ed
);

131 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
->
√xt
, 
NULL
);

132 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 3);

133 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

135 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
, 
NULL
);

136 
	`‰ì
(
∑ckë
.
∑ylﬂd
);

137 
	}
}

139 
	$°rög_¥›_wrôe_hñ≥r
(

140 
comm™d
,

141 
uöt32_t
 
ªmaöög_Àngth
,

142 
rc_ex≥˘ed
,

143 
idítifõr
,

144 c⁄° *
vÆue_ex≥˘ed
)

146 
mosquôto_¥›îty
 
¥›îty
;

147 
mosquôto__∑ckë
 
∑ckë
;

148 
mosquôto_¥›îty
 *
¥›îtõs
;

149 
rc
;

151 
	`mem£t
(&
¥›îty
, 0, (
mosquôto_¥›îty
));

153 
¥›îty
.
idítifõr
 = identifier;

154 
¥›îty
.
vÆue
.
s
.
v
 = 
	`°rdup
(
vÆue_ex≥˘ed
);

155 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›îty
.
vÆue
.
s
.
v
);

156 if(!
¥›îty
.
vÆue
.
s
.
v
) ;

158 
¥›îty
.
vÆue
.
s
.
Àn
 = (
uöt16_t
)
	`°æí
(
vÆue_ex≥˘ed
);

160 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

161 
∑ckë
.
ªmaöög_Àngth
 = 
	`¥›îty__gë_Àngth_Æl
(&
¥›îty
)+1;

162 
∑ckë
.
∑ckë_Àngth
 =Öackë.
ªmaöög_Àngth
+10;

163 
∑ckë
.
∑ylﬂd
 = 
	`ˇŒoc
’ackë.
ªmaöög_Àngth
+10, 1);

165 
	`CU_ASSERT_PTR_NOT_NULL
(
∑ckë
.
∑ylﬂd
);

166 if(!
∑ckë
.
∑ylﬂd
) ;

168 
	`¥›îty__wrôe_Æl
(&
∑ckë
, &
¥›îty
, 
åue
);

169 
∑ckë
.
pos
 = 0;

171 
rc
 = 
	`¥›îty__ªad_Æl
(
comm™d
, &
∑ckë
, &
¥›îtõs
);

173 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

174 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 
ªmaöög_Àngth
);

175 if(
¥›îtõs
){

176 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
idítifõr
, identifier);

177 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
vÆue
.
s
.
Àn
, 
	`°æí
(
vÆue_ex≥˘ed
));

178 
	`CU_ASSERT_STRING_EQUAL
(
¥›îtõs
->
vÆue
.
s
.
v
, 
vÆue_ex≥˘ed
);

179 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
->
√xt
, 
NULL
);

180 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 1+2+
	`°æí
(
vÆue_ex≥˘ed
));

181 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

183 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
, 
NULL
);

184 
	`‰ì
(
¥›îty
.
vÆue
.
s
.
v
);

185 
	`‰ì
(
∑ckë
.
∑ylﬂd
);

186 
	}
}

189 
	$bö¨y_¥›_wrôe_hñ≥r
(

190 
comm™d
,

191 
uöt32_t
 
ªmaöög_Àngth
,

192 
rc_ex≥˘ed
,

193 
idítifõr
,

194 c⁄° 
uöt8_t
 *
vÆue_ex≥˘ed
,

195 
uöt16_t
 
Àn_ex≥˘ed
)

197 
mosquôto_¥›îty
 
¥›îty
;

198 
mosquôto__∑ckë
 
∑ckë
;

199 
mosquôto_¥›îty
 *
¥›îtõs
;

200 
rc
;

202 
	`mem£t
(&
¥›îty
, 0, (
mosquôto_¥›îty
));

204 
¥›îty
.
idítifõr
 = identifier;

205 
¥›îty
.
vÆue
.
bö
.
v
 = 
	`mÆloc
(
Àn_ex≥˘ed
);

206 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›îty
.
vÆue
.
bö
.
v
);

207 if(!
¥›îty
.
vÆue
.
bö
.
v
) ;

209 
	`mem˝y
(
¥›îty
.
vÆue
.
bö
.
v
, 
vÆue_ex≥˘ed
, 
Àn_ex≥˘ed
);

210 
¥›îty
.
vÆue
.
bö
.
Àn
 = 
Àn_ex≥˘ed
;

212 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

213 
∑ckë
.
ªmaöög_Àngth
 = 
	`¥›îty__gë_Àngth_Æl
(&
¥›îty
)+1;

214 
∑ckë
.
∑ckë_Àngth
 =Öackë.
ªmaöög_Àngth
+10;

215 
∑ckë
.
∑ylﬂd
 = 
	`ˇŒoc
’ackë.
ªmaöög_Àngth
+10, 1);

217 
	`CU_ASSERT_PTR_NOT_NULL
(
∑ckë
.
∑ylﬂd
);

218 if(!
∑ckë
.
∑ylﬂd
) ;

220 
	`¥›îty__wrôe_Æl
(&
∑ckë
, &
¥›îty
, 
åue
);

221 
∑ckë
.
pos
 = 0;

223 
rc
 = 
	`¥›îty__ªad_Æl
(
comm™d
, &
∑ckë
, &
¥›îtõs
);

225 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

226 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 
ªmaöög_Àngth
);

227 if(
¥›îtõs
){

228 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
idítifõr
, identifier);

229 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
vÆue
.
bö
.
Àn
, 
Àn_ex≥˘ed
);

230 
	`CU_ASSERT_EQUAL
(
	`memcmp
(
¥›îtõs
->
vÆue
.
bö
.
v
, 
vÆue_ex≥˘ed
, 
Àn_ex≥˘ed
), 0);

231 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
->
√xt
, 
NULL
);

232 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 1+2+
Àn_ex≥˘ed
);

233 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

235 
	`CU_ASSERT_PTR_EQUAL
(
¥›îtõs
, 
NULL
);

236 
	`‰ì
(
¥›îty
.
vÆue
.
bö
.
v
);

237 
	`‰ì
(
∑ckë
.
∑ylﬂd
);

238 
	}
}

240 
	$°rög_∑ú_¥›_wrôe_hñ≥r
(

241 
uöt32_t
 
ªmaöög_Àngth
,

242 
rc_ex≥˘ed
,

243 
idítifõr
,

244 c⁄° *
«me_ex≥˘ed
,

245 c⁄° *
vÆue_ex≥˘ed
,

246 
boﬁ
 
ex≥˘_mu…ùÀ
)

248 
mosquôto_¥›îty
 
¥›îty
;

249 
mosquôto__∑ckë
 
∑ckë
;

250 
mosquôto_¥›îty
 *
¥›îtõs
;

251 
rc
;

253 
	`mem£t
(&
¥›îty
, 0, (
mosquôto_¥›îty
));

255 
¥›îty
.
idítifõr
 = identifier;

256 
¥›îty
.
vÆue
.
s
.
v
 = 
	`°rdup
(
vÆue_ex≥˘ed
);

257 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›îty
.
vÆue
.
s
.
v
);

258 if(!
¥›îty
.
vÆue
.
s
.
v
) ;

259 
¥›îty
.
vÆue
.
s
.
Àn
 = (
uöt16_t
)
	`°æí
(
vÆue_ex≥˘ed
);

261 
¥›îty
.
«me
.
v
 = 
	`°rdup
(
«me_ex≥˘ed
);

262 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›îty
.
«me
.
v
);

263 if(!
¥›îty
.
«me
.
v
) ;

265 
¥›îty
.
«me
.
Àn
 = (
uöt16_t
)
	`°æí
(
«me_ex≥˘ed
);

267 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

268 
∑ckë
.
ªmaöög_Àngth
 = 
	`¥›îty__gë_Àngth_Æl
(&
¥›îty
)+1;

269 
∑ckë
.
∑ckë_Àngth
 =Öackë.
ªmaöög_Àngth
+10;

270 
∑ckë
.
∑ylﬂd
 = 
	`ˇŒoc
’ackë.
ªmaöög_Àngth
+10, 1);

272 
	`CU_ASSERT_PTR_NOT_NULL
(
∑ckë
.
∑ylﬂd
);

273 if(!
∑ckë
.
∑ylﬂd
) ;

275 
	`¥›îty__wrôe_Æl
(&
∑ckë
, &
¥›îty
, 
åue
);

276 
∑ckë
.
pos
 = 0;

278 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_CONNECT
, &
∑ckë
, &
¥›îtõs
);

280 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

281 
	`CU_ASSERT_EQUAL
(
∑ckë
.
pos
, 
ªmaöög_Àngth
);

282 if(
¥›îtõs
){

283 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
idítifõr
, identifier);

284 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
«me
.
Àn
, 
	`°æí
(
«me_ex≥˘ed
));

285 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
vÆue
.
s
.
Àn
, 
	`°æí
(
vÆue_ex≥˘ed
));

286 
	`CU_ASSERT_STRING_EQUAL
(
¥›îtõs
->
«me
.
v
, 
«me_ex≥˘ed
);

287 
	`CU_ASSERT_STRING_EQUAL
(
¥›îtõs
->
vÆue
.
s
.
v
, 
vÆue_ex≥˘ed
);

288 if(
ex≥˘_mu…ùÀ
){

289 
	`CU_ASSERT_PTR_NOT_NULL
(
¥›îtõs
->
√xt
);

291 
	`CU_ASSERT_PTR_NULL
(
¥›îtõs
->
√xt
);

292 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 1+2+
	`°æí
(
«me_ex≥˘ed
)+2+°æí(
vÆue_ex≥˘ed
));

294 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

296 
	`CU_ASSERT_PTR_NULL
(
¥›îtõs
);

297 
	`‰ì
(
¥›îty
.
vÆue
.
s
.
v
);

298 
	`‰ì
(
¥›îty
.
«me
.
v
);

299 
	`‰ì
(
∑ckë
.
∑ylﬂd
);

300 
	}
}

302 
	$v¨öt_¥›_wrôe_hñ≥r
(

303 
uöt32_t
 
ªmaöög_Àngth
,

304 
rc_ex≥˘ed
,

305 
idítifõr
,

306 
uöt32_t
 
vÆue_ex≥˘ed
)

308 
mosquôto_¥›îty
 
¥›îty
;

309 
mosquôto__∑ckë
 
∑ckë
;

310 
mosquôto_¥›îty
 *
¥›îtõs
;

311 
rc
;

313 
	`mem£t
(&
¥›îty
, 0, (
mosquôto_¥›îty
));

315 
¥›îty
.
idítifõr
 = identifier;

316 
¥›îty
.
vÆue
.
v¨öt
 = 
vÆue_ex≥˘ed
;

318 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

319 
∑ckë
.
ªmaöög_Àngth
 = 
	`¥›îty__gë_Àngth_Æl
(&
¥›îty
)+1;

320 
	`CU_ASSERT_EQUAL
(
∑ckë
.
ªmaöög_Àngth
,Ñemaining_length);

322 
∑ckë
.
∑ckë_Àngth
 =Öackë.
ªmaöög_Àngth
+10;

323 
∑ckë
.
∑ylﬂd
 = 
	`ˇŒoc
’ackë.
ªmaöög_Àngth
+10, 1);

325 
	`CU_ASSERT_PTR_NOT_NULL
(
∑ckë
.
∑ylﬂd
);

326 if(!
∑ckë
.
∑ylﬂd
) ;

328 
	`¥›îty__wrôe_Æl
(&
∑ckë
, &
¥›îty
, 
åue
);

329 
∑ckë
.
pos
 = 0;

331 
rc
 = 
	`¥›îty__ªad_Æl
(
CMD_PUBLISH
, &
∑ckë
, &
¥›îtõs
);

333 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

334 if(
¥›îtõs
){

335 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
idítifõr
, identifier);

336 
	`CU_ASSERT_EQUAL
(
¥›îtõs
->
vÆue
.
v¨öt
, 
vÆue_ex≥˘ed
);

337 
	`CU_ASSERT_PTR_NULL
(
¥›îtõs
->
√xt
);

338 if(
vÆue_ex≥˘ed
 < 128){

339 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 2);

340 }if(
vÆue_ex≥˘ed
 < 16384){

341 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 3);

342 }if(
vÆue_ex≥˘ed
 < 2097152){

343 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 4);

344 }if(
vÆue_ex≥˘ed
 < 268435456){

345 
	`CU_ASSERT_EQUAL
(
	`¥›îty__gë_Àngth_Æl
(
¥›îtõs
), 5);

347 
	`CU_FAIL
("Incorrect varint value.");

349 
	`mosquôto_¥›îty_‰ì_Æl
(&
¥›îtõs
);

351 
	`CU_ASSERT_PTR_NULL
(
¥›îtõs
);

352 
	`‰ì
(
∑ckë
.
∑ylﬂd
);

353 
	}
}

359 
	$TEST_bad_idítifõr
()

361 
mosquôto_¥›îty
 
¥›îty
;

362 
mosquôto__∑ckë
 
∑ckë
;

363 
uöt8_t
 
∑ylﬂd
[10];

364 
rc
;

366 
	`mem£t
(&
¥›îty
, 0, (
mosquôto_¥›îty
));

367 
	`mem£t
(&
∑ckë
, 0, (
mosquôto__∑ckë
));

368 
¥›îty
.
idítifõr
 = 0xFFFF;

369 
∑ckë
.
∑ckë_Àngth
 = 10;

370 
∑ckë
.
ªmaöög_Àngth
 = 8;

371 
∑ckë
.
∑ylﬂd
 =Öayload;

372 
rc
 = 
	`¥›îty__wrôe_Æl
(&
∑ckë
, &
¥›îty
, 
åue
);

373 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

374 
	}
}

381 
	$TEST_sögÀ_∑ylﬂd_f‹m©_ödiˇt‹
()

383 
	`byã_¥›_wrôe_hñ≥r
(
CMD_PUBLISH
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
, 1);

384 
	}
}

386 
	$TEST_sögÀ_ªque°_¥obÀm_öf‹m©i⁄
()

388 
	`byã_¥›_wrôe_hñ≥r
(
CMD_CONNECT
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_REQUEST_PROBLEM_INFORMATION
, 1);

389 
	}
}

391 
	$TEST_sögÀ_ªque°_ª•⁄£_öf‹m©i⁄
()

393 
	`byã_¥›_wrôe_hñ≥r
(
CMD_CONNECT
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_REQUEST_RESPONSE_INFORMATION
, 1);

394 
	}
}

396 
	$TEST_sögÀ_maximum_qos
()

398 
	`byã_¥›_wrôe_hñ≥r
(
CMD_CONNACK
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_MAXIMUM_QOS
, 1);

399 
	}
}

401 
	$TEST_sögÀ_ªèö_avaûabÀ
()

403 
	`byã_¥›_wrôe_hñ≥r
(
CMD_CONNACK
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_RETAIN_AVAILABLE
, 1);

404 
	}
}

406 
	$TEST_sögÀ_wûdˇrd_subs¸ùti⁄_avaûabÀ
()

408 
	`byã_¥›_wrôe_hñ≥r
(
CMD_CONNACK
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_WILDCARD_SUB_AVAILABLE
, 0);

409 
	}
}

411 
	$TEST_sögÀ_subs¸ùti⁄_idítifõr_avaûabÀ
()

413 
	`byã_¥›_wrôe_hñ≥r
(
CMD_CONNACK
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
, 0);

414 
	}
}

416 
	$TEST_sögÀ_sh¨ed_subs¸ùti⁄_avaûabÀ
()

418 
	`byã_¥›_wrôe_hñ≥r
(
CMD_CONNACK
, 3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SHARED_SUB_AVAILABLE
, 1);

419 
	}
}

421 
	$TEST_sögÀ_mesßge_expúy_öãrvÆ
()

423 
	`öt32_¥›_wrôe_hñ≥r
(
CMD_PUBLISH
, 6, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
, 0x12233445);

424 
	}
}

426 
	$TEST_sögÀ_£ssi⁄_expúy_öãrvÆ
()

428 
	`öt32_¥›_wrôe_hñ≥r
(
CMD_CONNACK
, 6, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
, 0x45342312);

429 
	}
}

431 
	$TEST_sögÀ_wûl_dñay_öãrvÆ
()

433 
	`öt32_¥›_wrôe_hñ≥r
(
CMD_WILL
, 6, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_WILL_DELAY_INTERVAL
, 0x45342312);

434 
	}
}

436 
	$TEST_sögÀ_maximum_∑ckë_size
()

438 
	`öt32_¥›_wrôe_hñ≥r
(
CMD_CONNECT
, 6, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_MAXIMUM_PACKET_SIZE
, 0x45342312);

439 
	}
}

441 
	$TEST_sögÀ_£rvî_kìp_Æive
()

443 
	`öt16_¥›_wrôe_hñ≥r
(
CMD_CONNACK
, 4, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SERVER_KEEP_ALIVE
, 0x4534);

444 
	}
}

446 
	$TEST_sögÀ_ª˚ive_maximum
()

448 
	`öt16_¥›_wrôe_hñ≥r
(
CMD_CONNACK
, 4, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_RECEIVE_MAXIMUM
, 0x6842);

449 
	}
}

451 
	$TEST_sögÀ_t›ic_Æüs_maximum
()

453 
	`öt16_¥›_wrôe_hñ≥r
(
CMD_CONNECT
, 4, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_TOPIC_ALIAS_MAXIMUM
, 0x6842);

454 
	}
}

456 
	$TEST_sögÀ_t›ic_Æüs
()

458 
	`öt16_¥›_wrôe_hñ≥r
(
CMD_PUBLISH
, 4, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_TOPIC_ALIAS
, 0x6842);

459 
	}
}

461 
	$TEST_sögÀ_c⁄ã¡_ty≥
()

463 
	`°rög_¥›_wrôe_hñ≥r
(
CMD_PUBLISH
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_CONTENT_TYPE
, "hello");

464 
	}
}

466 
	$TEST_sögÀ_ª•⁄£_t›ic
()

468 
	`°rög_¥›_wrôe_hñ≥r
(
CMD_WILL
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_RESPONSE_TOPIC
, "hello");

469 
	}
}

471 
	$TEST_sögÀ_assig√d_˛õ¡_idítifõr
()

473 
	`°rög_¥›_wrôe_hñ≥r
(
CMD_CONNACK
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
, "hello");

474 
	}
}

476 
	$TEST_sögÀ_authítiˇti⁄_mëhod
()

478 
	`°rög_¥›_wrôe_hñ≥r
(
CMD_CONNECT
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_AUTHENTICATION_METHOD
, "hello");

479 
	}
}

481 
	$TEST_sögÀ_ª•⁄£_öf‹m©i⁄
()

483 
	`°rög_¥›_wrôe_hñ≥r
(
CMD_CONNACK
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_RESPONSE_INFORMATION
, "hello");

484 
	}
}

486 
	$TEST_sögÀ_£rvî_ª„ªn˚
()

488 
	`°rög_¥›_wrôe_hñ≥r
(
CMD_CONNACK
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SERVER_REFERENCE
, "hello");

489 
	}
}

491 
	$TEST_sögÀ_ªas⁄_°rög
()

493 
	`°rög_¥›_wrôe_hñ≥r
(
CMD_PUBREC
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_REASON_STRING
, "hello");

494 
	}
}

496 
	$TEST_sögÀ_c‹ªœti⁄_d©a
()

498 
uöt8_t
 
∑ylﬂd
[5] = {1, 'e', 0, 'l', 9};

500 
	`bö¨y_¥›_wrôe_hñ≥r
(
CMD_PUBLISH
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_CORRELATION_DATA
, 
∑ylﬂd
, 5);

501 
	}
}

503 
	$TEST_sögÀ_authítiˇti⁄_d©a
()

505 
uöt8_t
 
∑ylﬂd
[5] = {1, 'e', 0, 'l', 9};

507 
	`bö¨y_¥›_wrôe_hñ≥r
(
CMD_CONNECT
, 9, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_AUTHENTICATION_DATA
, 
∑ylﬂd
, 5);

508 
	}
}

510 
	$TEST_sögÀ_u£r_¥›îty
()

512 
	`°rög_∑ú_¥›_wrôe_hñ≥r
(10, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_USER_PROPERTY
, "za", "bc", 
Ál£
);

513 
	}
}

515 
	$TEST_sögÀ_subs¸ùti⁄_idítifõr
()

517 
	`v¨öt_¥›_wrôe_hñ≥r
(3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 0);

518 
	`v¨öt_¥›_wrôe_hñ≥r
(3, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 127);

519 
	`v¨öt_¥›_wrôe_hñ≥r
(4, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 128);

520 
	`v¨öt_¥›_wrôe_hñ≥r
(4, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 16383);

521 
	`v¨öt_¥›_wrôe_hñ≥r
(5, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 16384);

522 
	`v¨öt_¥›_wrôe_hñ≥r
(5, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 2097151);

523 
	`v¨öt_¥›_wrôe_hñ≥r
(6, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 2097152);

524 
	`v¨öt_¥›_wrôe_hñ≥r
(6, 
MOSQ_ERR_SUCCESS
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, 268435455);

525 
	}
}

532 
	$öô_¥›îty_wrôe_ã°s
()

534 
CU_pSuôe
 
ã°_suôe
 = 
NULL
;

536 
ã°_suôe
 = 
	`CU_add_suôe
("Pr›îty wrôe", 
NULL
, NULL);

537 if(!
ã°_suôe
){

538 
	`¥ötf
("Errorádding CUnit Property writeÅest suite.\n");

543 || !
	`CU_add_ã°
(
ã°_suôe
, "Bad idítifõr", 
TEST_bad_idítifõr
)

544 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Paylﬂd F‹m© Indiˇt‹", 
TEST_sögÀ_∑ylﬂd_f‹m©_ödiˇt‹
)

545 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Reque° ProbÀm Inf‹m©i⁄", 
TEST_sögÀ_ªque°_¥obÀm_öf‹m©i⁄
)

546 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Reque° Re•⁄£ Inf‹m©i⁄", 
TEST_sögÀ_ªque°_ª•⁄£_öf‹m©i⁄
)

547 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Maximum QoS", 
TEST_sögÀ_maximum_qos
)

548 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Rëaö AvaûabÀ", 
TEST_sögÀ_ªèö_avaûabÀ
)

549 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Wûdˇrd Subs¸ùti⁄ AvaûabÀ", 
TEST_sögÀ_wûdˇrd_subs¸ùti⁄_avaûabÀ
)

550 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Subs¸ùti⁄ Idítifõ∏AvaûabÀ", 
TEST_sögÀ_subs¸ùti⁄_idítifõr_avaûabÀ
)

551 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Sh¨ed Subs¸ùti⁄ AvaûabÀ", 
TEST_sögÀ_sh¨ed_subs¸ùti⁄_avaûabÀ
)

552 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ MesßgêExpúy I¡îvÆ", 
TEST_sögÀ_mesßge_expúy_öãrvÆ
)

553 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Sessi⁄ Expúy I¡îvÆ", 
TEST_sögÀ_£ssi⁄_expúy_öãrvÆ
)

554 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Wû»Dñay I¡îvÆ", 
TEST_sögÀ_wûl_dñay_öãrvÆ
)

555 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Maximum Packë Size", 
TEST_sögÀ_maximum_∑ckë_size
)

556 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Sîvî Kì∞Alive", 
TEST_sögÀ_£rvî_kìp_Æive
)

557 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Re˚ivêMaximum", 
TEST_sögÀ_ª˚ive_maximum
)

558 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ T›i¯Alü†Maximum", 
TEST_sögÀ_t›ic_Æüs_maximum
)

559 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ T›i¯Alüs", 
TEST_sögÀ_t›ic_Æüs
)

560 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ C⁄ã¡ Ty≥", 
TEST_sögÀ_c⁄ã¡_ty≥
)

561 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Re•⁄£ T›ic", 
TEST_sögÀ_ª•⁄£_t›ic
)

562 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Assig√d Clõ¡ Idítifõr", 
TEST_sögÀ_assig√d_˛õ¡_idítifõr
)

563 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Authítiˇti⁄ Mëhod", 
TEST_sögÀ_authítiˇti⁄_mëhod
)

564 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Re•⁄£ Inf‹m©i⁄", 
TEST_sögÀ_ª•⁄£_öf‹m©i⁄
)

565 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Sîvî Re„ªn˚", 
TEST_sögÀ_£rvî_ª„ªn˚
)

566 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Rós⁄ Såög", 
TEST_sögÀ_ªas⁄_°rög
)

567 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ C‹ªœti⁄ D©a", 
TEST_sögÀ_c‹ªœti⁄_d©a
)

568 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Authítiˇti⁄ D©a", 
TEST_sögÀ_authítiˇti⁄_d©a
)

569 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ U£∏Pr›îty", 
TEST_sögÀ_u£r_¥›îty
)

570 || !
	`CU_add_ã°
(
ã°_suôe
, "SögÀ Subs¸ùti⁄ Idítifõr", 
TEST_sögÀ_subs¸ùti⁄_idítifõr
)

573 
	`¥ötf
("Errorádding PropertyÑead CUnitÅests.\n");

578 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/publish_test.c

1 
	~<CUnô/CUnô.h
>

2 
	~<CUnô/Basic.h
>

4 
	~<mosquôto_öã∫Æ.h
>

5 
	~<utû_mosq.h
>

8 
	$TEST_maximum_∑ckë_size
()

10 
mosquôto
 
mosq
;

11 
rc
;

13 
	`mem£t
(&
mosq
, 0, (
mosquôto
));

15 
mosq
.
maximum_∑ckë_size
 = 5;

16 
rc
 = 
	`mosquôto_publish
(&
mosq
, 
NULL
, "t›ic/ovîsize", 
	`°æí
("payload"), "payload", 0, 0);

17 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_OVERSIZE_PACKET
);

18 
	}
}

24 
	$öô_publish_ã°s
()

26 
CU_pSuôe
 
ã°_suôe
 = 
NULL
;

28 
ã°_suôe
 = 
	`CU_add_suôe
("Publish", 
NULL
, NULL);

29 if(!
ã°_suôe
){

30 
	`¥ötf
("Errorádding CUnit PublishÅest suite.\n");

35 || !
	`CU_add_ã°
(
ã°_suôe
, "v5: MaximumÖackë size", 
TEST_maximum_∑ckë_size
)

38 
	`¥ötf
("Errorádding Publish CUnitÅests.\n");

43 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/stubs.c

1 
	~"c⁄fig.h
"

3 
	~<time.h
>

4 
	~<loggög_mosq.h
>

6 
	smosquôto_db
{

10 
	$log__¥ötf
(
mosquôto
 *
mosq
, 
¥i‹ôy
, c⁄° *
fmt
, ...)

12 
	`UNUSED
(
mosq
);

13 
	`UNUSED
(
¥i‹ôy
);

14 
	`UNUSED
(
fmt
);

17 
	}
}

19 
time_t
 
	$mosquôto_time
()

22 
	}
}

24 
	$√t__sockë_˛o£
(
mosquôto_db
 *
db
, 
mosquôto
 *
mosq
)

26 
	`UNUSED
(
db
);

27 
	`UNUSED
(
mosq
);

29  
MOSQ_ERR_SUCCESS
;

30 
	}
}

32 
	$£nd__pögªq
(
mosquôto
 *
mosq
)

34 
	`UNUSED
(
mosq
);

36  
MOSQ_ERR_SUCCESS
;

37 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/subs_stubs.c

1 
	~<time.h
>

3 
	#WITH_BROKER


	)

5 
	~<loggög_mosq.h
>

6 
	~<mem‹y_mosq.h
>

7 
	~<mosquôto_brokî_öã∫Æ.h
>

8 
	~<√t_mosq.h
>

9 
	~<£nd_mosq.h
>

10 
	~<time_mosq.h
>

13 
uöt64_t
 
œ°_ªèöed
;

14 *
œ°_sub
;

15 
œ°_qos
;

17 
mosquôto
 *
	$c⁄ãxt__öô
(
mosq_sock_t
 
sock
)

19  
	`mosquôto__ˇŒoc
(1, (
mosquôto
));

20 
	}
}

23 
	$db__mesßge_ö£π
(
mosquôto
 *
c⁄ãxt
, 
uöt16_t
 
mid
, 
mosquôto_msg_dúe˘i⁄
 
dú
, 
uöt8_t
 
qos
, 
boﬁ
 
ªèö
, 
mosquôto_msg_°‹e
 *
°‹ed
, 
mosquôto_¥›îty
 *
¥›îtõs
)

25  
MOSQ_ERR_SUCCESS
;

26 
	}
}

28 
	$db__msg_°‹e_ªf_dec
(
mosquôto_msg_°‹e
 **
°‹e
)

30 
	}
}

32 
	$db__msg_°‹e_ªf_öc
(
mosquôto_msg_°‹e
 *
°‹e
)

34 
°‹e
->
ªf_cou¡
++;

35 
	}
}

38 
	$log__¥ötf
(
mosquôto
 *
mosq
, 
¥i‹ôy
, c⁄° *
fmt
, ...)

40 
	`UNUSED
(
mosq
);

41 
	`UNUSED
(
¥i‹ôy
);

42 
	`UNUSED
(
fmt
);

45 
	}
}

47 
time_t
 
	$mosquôto_time
()

50 
	}
}

53 
	$√t__sockë_˛o£
(
mosquôto
 *
mosq
)

55  
MOSQ_ERR_SUCCESS
;

56 
	}
}

58 
	$£nd__pögªq
(
mosquôto
 *
mosq
)

60  
MOSQ_ERR_SUCCESS
;

61 
	}
}

63 
	$mosquôto_a˛_check
(
mosquôto
 *
c⁄ãxt
, c⁄° *
t›ic
, 
uöt32_ä
 
∑ylﬂdÀn
, * 
∑ylﬂd
, 
uöt8_t
 
qos
, 
boﬁ
 
ªèö
, 
ac˚ss
)

65  
MOSQ_ERR_SUCCESS
;

66 
	}
}

68 
	$a˛__föd_a˛s
(
mosquôto
 *
c⁄ãxt
)

70  
MOSQ_ERR_SUCCESS
;

71 
	}
}

75 
	$£nd__publish
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, c⁄° *
t›ic
, 
uöt32_t
 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
uöt8_t
 
qos
, 
boﬁ
 
ªèö
, boﬁ 
dup
, c⁄° 
mosquôto_¥›îty
 *
cmsg_¥›s
, c⁄° mosquôto_¥›îty *
°‹e_¥›s
, uöt32_à
expúy_öãrvÆ
)

77 
	`UNUSED
(
mosq
);

78 
	`UNUSED
(
mid
);

79 
	`UNUSED
(
t›ic
);

80 
	`UNUSED
(
∑ylﬂdÀn
);

81 
	`UNUSED
(
∑ylﬂd
);

82 
	`UNUSED
(
qos
);

83 
	`UNUSED
(
ªèö
);

84 
	`UNUSED
(
dup
);

85 
	`UNUSED
(
cmsg_¥›s
);

86 
	`UNUSED
(
°‹e_¥›s
);

87 
	`UNUSED
(
expúy_öãrvÆ
);

89  
MOSQ_ERR_SUCCESS
;

90 
	}
}

92 
	$£nd__pubcomp
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

94 
	`UNUSED
(
mosq
);

95 
	`UNUSED
(
mid
);

96 
	`UNUSED
(
¥›îtõs
);

98  
MOSQ_ERR_SUCCESS
;

99 
	}
}

101 
	$£nd__pubªc
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, 
uöt8_t
 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

103 
	`UNUSED
(
mosq
);

104 
	`UNUSED
(
mid
);

105 
	`UNUSED
(
ªas⁄_code
);

106 
	`UNUSED
(
¥›îtõs
);

108  
MOSQ_ERR_SUCCESS
;

109 
	}
}

111 
	$£nd__pubªl
(
mosquôto
 *
mosq
, 
uöt16_t
 
mid
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

113 
	`UNUSED
(
mosq
);

114 
	`UNUSED
(
mid
);

115 
	`UNUSED
(
¥›îtõs
);

117  
MOSQ_ERR_SUCCESS
;

118 
	}
}

120 
	$mosquôto_a˛_check
(
mosquôto
 *
c⁄ãxt
, c⁄° *
t›ic
, 
uöt32_t
 
∑ylﬂdÀn
, * 
∑ylﬂd
, 
uöt8_t
 
qos
, 
boﬁ
 
ªèö
, 
ac˚ss
)

122 
	`UNUSED
(
c⁄ãxt
);

123 
	`UNUSED
(
t›ic
);

124 
	`UNUSED
(
∑ylﬂdÀn
);

125 
	`UNUSED
(
∑ylﬂd
);

126 
	`UNUSED
(
qos
);

127 
	`UNUSED
(
ªèö
);

128 
	`UNUSED
(
ac˚ss
);

130  
MOSQ_ERR_SUCCESS
;

131 
	}
}

133 
uöt16_t
 
	$mosquôto__mid_gíî©e
(
mosquôto
 *
mosq
)

135 
uöt16_t
 
mid
 = 1;

137 
	`UNUSED
(
mosq
);

139  ++
mid
;

140 
	}
}

142 
	$mosquôto_¥›îty_add_v¨öt
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, 
uöt32_t
 
vÆue
)

144 
	`UNUSED
(
¥›li°
);

145 
	`UNUSED
(
idítifõr
);

146 
	`UNUSED
(
vÆue
);

148  
MOSQ_ERR_SUCCESS
;

149 
	}
}

151 
	$≥rsi°__backup
(
boﬁ
 
shutdown
)

153 
	`UNUSED
(
shutdown
);

155  
MOSQ_ERR_SUCCESS
;

156 
	}
}

158 
	$≥rsi°__ª°‹e
()

160  
MOSQ_ERR_SUCCESS
;

161 
	}
}

163 
	$mosquôto_¥›îty_‰ì_Æl
(
mosquôto_¥›îty
 **
¥›îtõs
)

165 
	`UNUSED
(
¥›îtõs
);

166 
	}
}

168 
	$ªèö__öô
()

170  
MOSQ_ERR_SUCCESS
;

171 
	}
}

173 
	$ªèö__˛ón
(
mosquôto__ªèöhõr
 **
ªèöhõr
)

175 
	`UNUSED
(
ªèöhõr
);

176 
	}
}

178 
	$ªèö__queue
(
mosquôto
 *
c⁄ãxt
, c⁄° *
sub
, 
uöt8_t
 
sub_qos
, 
uöt32_t
 
subs¸ùti⁄_idítifõr
)

180 
	`UNUSED
(
c⁄ãxt
);

181 
	`UNUSED
(
sub
);

182 
	`UNUSED
(
sub_qos
);

183 
	`UNUSED
(
subs¸ùti⁄_idítifõr
);

185  
MOSQ_ERR_SUCCESS
;

186 
	}
}

188 
	$ªèö__°‹e
(c⁄° *
t›ic
, 
mosquôto_msg_°‹e
 *
°‹ed
, **
•lô_t›ics
)

190 
	`UNUSED
(
t›ic
);

191 
	`UNUSED
(
°‹ed
);

192 
	`UNUSED
(
•lô_t›ics
);

194  
MOSQ_ERR_SUCCESS
;

195 
	}
}

198 
	$utû__de¸emít_ª˚ive_quŸa
(
mosquôto
 *
mosq
)

200 if(
mosq
->
msgs_ö
.
öÊight_quŸa
 > 0){

201 
mosq
->
msgs_ö
.
öÊight_quŸa
--;

203 
	}
}

205 
	$utû__de¸emít_£nd_quŸa
(
mosquôto
 *
mosq
)

207 if(
mosq
->
msgs_out
.
öÊight_quŸa
 > 0){

208 
mosq
->
msgs_out
.
öÊight_quŸa
--;

210 
	}
}

213 
	$utû__ö¸emít_ª˚ive_quŸa
(
mosquôto
 *
mosq
)

215 
mosq
->
msgs_ö
.
öÊight_quŸa
++;

216 
	}
}

218 
	$utû__ö¸emít_£nd_quŸa
(
mosquôto
 *
mosq
)

220 
mosq
->
msgs_out
.
öÊight_quŸa
++;

221 
	}
}

223 
	$£ssi⁄_expúy__add_‰om_≥rsi°í˚
(
mosquôto
 *
c⁄ãxt
, 
time_t
 
expúy_time
)

225 
	`UNUSED
(
c⁄ãxt
);

226 
	`UNUSED
(
expúy_time
);

228 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/subs_test.c

6 
	~<CUnô/CUnô.h
>

7 
	~<CUnô/Basic.h
>

9 
	#WITH_BROKER


	)

10 
	#WITH_PERSISTENCE


	)

12 
	~"mosquôto_brokî_öã∫Æ.h
"

13 
	~"mem‹y_mosq.h
"

15 
mosquôto_db
 
	gdb
;

17 
	$hõr_quick_check
(
mosquôto__subhõr
 **
sub
, 
mosquôto
 *
c⁄ãxt
, c⁄° *
t›ic
)

19 if(
sub
 !
NULL
){

20 
	`CU_ASSERT_EQUAL
((*
sub
)->
t›ic_Àn
, 
	`°æí
(
t›ic
));

21 
	`CU_ASSERT_PTR_NOT_NULL
((*
sub
)->
t›ic
);

22 if((*
sub
)->
t›ic
){

23 
	`CU_ASSERT_STRING_EQUAL
((*
sub
)->
t›ic
,Åopic);

25 if(
c⁄ãxt
){

26 
	`CU_ASSERT_PTR_NOT_NULL
((*
sub
)->
subs
);

27 if((*
sub
)->
subs
){

28 
	`CU_ASSERT_PTR_EQUAL
((*
sub
)->
subs
->
c⁄ãxt
, context);

29 
	`CU_ASSERT_PTR_NULL
((*
sub
)->
subs
->
√xt
);

32 
	`CU_ASSERT_PTR_NULL
((*
sub
)->
subs
);

34 (*
sub
Ë(*sub)->
chûdªn
;

36 
	}
}

39 
	$TEST_sub_add_sögÀ
()

41 
mosquôto__c⁄fig
 
c⁄fig
;

42 
mosquôto__li°íî
 
li°íî
;

43 
mosquôto
 
c⁄ãxt
;

44 
mosquôto__subhõr
 *
sub
;

45 
rc
;

47 
	`mem£t
(&
db
, 0, (
mosquôto_db
));

48 
	`mem£t
(&
c⁄fig
, 0, (
mosquôto__c⁄fig
));

49 
	`mem£t
(&
li°íî
, 0, (
mosquôto__li°íî
));

50 
	`mem£t
(&
c⁄ãxt
, 0, (
mosquôto
));

52 
c⁄ãxt
.
id
 = "client";

54 
db
.
c⁄fig
 = &config;

55 
li°íî
.
p‹t
 = 1883;

56 
c⁄fig
.
li°íîs
 = &
li°íî
;

57 
c⁄fig
.
li°íî_cou¡
 = 1;

59 
	`db__›í
(&
c⁄fig
);

61 
rc
 = 
	`sub__add
(&
c⁄ãxt
, "a/b/c/d/e", 0, 0, 0, &
db
.
subs
);

62 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

63 
	`CU_ASSERT_PTR_NOT_NULL
(
db
.
subs
);

64 if(
db
.
subs
){

65 
sub
 = 
db
.
subs
;

67 
	`hõr_quick_check
(&
sub
, 
NULL
, "");

68 
	`hõr_quick_check
(&
sub
, 
NULL
, "");

69 
	`hõr_quick_check
(&
sub
, 
NULL
, "a");

70 
	`hõr_quick_check
(&
sub
, 
NULL
, "b");

71 
	`hõr_quick_check
(&
sub
, 
NULL
, "c");

72 
	`hõr_quick_check
(&
sub
, 
NULL
, "d");

73 
	`hõr_quick_check
(&
sub
, &
c⁄ãxt
, "e");

74 
	`CU_ASSERT_PTR_NULL
(
sub
);

76 
	`mosquôto__‰ì
(
c⁄ãxt
.
subs
);

77 
	`db__˛o£
();

78 
	}
}

86 
	$maö
(
¨gc
, *
¨gv
[])

88 
CU_pSuôe
 
ã°_suôe
 = 
NULL
;

89 
Áûs
;

91 
	`UNUSED
(
¨gc
);

92 
	`UNUSED
(
¨gv
);

94 if(
	`CU_öôülize_ªgi°ry
(Ë!
CUE_SUCCESS
){

95 
	`¥ötf
("Error initializing CUnitÑegistry.\n");

99 
ã°_suôe
 = 
	`CU_add_suôe
("Subs", 
NULL
, NULL);

100 if(!
ã°_suôe
){

101 
	`¥ötf
("Errorádding CUnit SubsÅest suite.\n");

102 
	`CU_˛ónup_ªgi°ry
();

107 || !
	`CU_add_ã°
(
ã°_suôe
, "Subádd sögÀ", 
TEST_sub_add_sögÀ
)

110 
	`¥ötf
("Errorádding Subs CUnitÅests.\n");

111 
	`CU_˛ónup_ªgi°ry
();

115 
	`CU_basic_£t_mode
(
CU_BRM_VERBOSE
);

116 
	`CU_basic_run_ã°s
();

117 
Áûs
 = 
	`CU_gë_numbî_of_Áûuªs
();

118 
	`CU_˛ónup_ªgi°ry
();

120  ()
Áûs
;

121 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/test.c

1 
	~"c⁄fig.h
"

2 
	~<°dio.h
>

4 
	~<CUnô/CUnô.h
>

5 
	~<CUnô/Basic.h
>

7 
öô_d©©y≥_ªad_ã°s
();

8 
öô_d©©y≥_wrôe_ã°s
();

9 
öô_¥›îty_add_ã°s
();

10 
öô_¥›îty_ªad_ã°s
();

11 
öô_¥›îty_u£r_ªad_ã°s
();

12 
öô_¥›îty_wrôe_ã°s
();

13 
öô_utf8_ã°s
();

14 
öô_utû_t›ic_ã°s
();

15 
öô_misc_åim_ã°s
();

17 
	$maö
(
¨gc
, *
¨gv
[])

19 
Áûs
;

21 
	`UNUSED
(
¨gc
);

22 
	`UNUSED
(
¨gv
);

24 if(
	`CU_öôülize_ªgi°ry
(Ë!
CUE_SUCCESS
){

25 
	`¥ötf
("Error initializing CUnitÑegistry.\n");

30 || 
	`öô_utf8_ã°s
()

31 || 
	`öô_d©©y≥_ªad_ã°s
()

32 || 
	`öô_d©©y≥_wrôe_ã°s
()

33 || 
	`öô_¥›îty_add_ã°s
()

34 || 
	`öô_¥›îty_ªad_ã°s
()

35 || 
	`öô_¥›îty_u£r_ªad_ã°s
()

36 || 
	`öô_¥›îty_wrôe_ã°s
()

37 || 
	`öô_utû_t›ic_ã°s
()

38 || 
	`öô_misc_åim_ã°s
()

41 
	`CU_˛ónup_ªgi°ry
();

45 
	`CU_basic_£t_mode
(
CU_BRM_VERBOSE
);

46 
	`CU_basic_run_ã°s
();

47 
Áûs
 = 
	`CU_gë_numbî_of_Áûuªs
();

48 
	`CU_˛ónup_ªgi°ry
();

50  ()
Áûs
;

51 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/utf8.c

1 
	~<CUnô/CUnô.h
>

2 
	~<CUnô/Basic.h
>

4 
	~"mosquôto.h
"

10 
	$utf8_hñ≥r_Àn
(c⁄° *
ãxt
, 
Àn
, 
ex≥˘ed
)

12 
ªsu…
;

14 
ªsu…
 = 
	`mosquôto_vÆid©e_utf8
(
ãxt
, 
Àn
);

15 
	`CU_ASSERT_EQUAL
(
ªsu…
, 
ex≥˘ed
);

16 
	}
}

18 
	$utf8_hñ≥r
(c⁄° *
ãxt
, 
ex≥˘ed
)

20 
	`utf8_hñ≥r_Àn
(
ãxt
, ()
	`°æí
—ext), 
ex≥˘ed
);

21 
	}
}

24 
	$TEST_utf8_em±y
()

26 
	`utf8_hñ≥r_Àn
(
NULL
, 0, 
MOSQ_ERR_INVAL
);

27 
	}
}

30 
	$TEST_utf8_vÆid
()

33 
	`utf8_hñ≥r
("", 
MOSQ_ERR_SUCCESS
);

34 
	`utf8_hñ≥r
("You should sìÅhêGªek w‹d 'kosme': \"Œ∫·ΩπœÉŒºŒµ\"", 
MOSQ_ERR_SUCCESS
);

35 
	}
}

38 
	$TEST_utf8_åunˇãd
()

40 
uöt8_t
 
buf
[4];

43 
buf
[0] = 0xC2; buf[1] = 0;

44 
	`utf8_hñ≥r
((*)
buf
, 
MOSQ_ERR_MALFORMED_UTF8
);

46 
buf
[0] = 0xE0; buf[1] = 0xA0; buf[2] = 0;

47 
	`utf8_hñ≥r
((*)
buf
, 
MOSQ_ERR_MALFORMED_UTF8
);

49 
buf
[0] = 0xF0; buf[1] = 0x90; buf[2] = 0x80; buf[3] = 0;

50 
	`utf8_hñ≥r
((*)
buf
, 
MOSQ_ERR_MALFORMED_UTF8
);

51 
	}
}

54 
	$TEST_utf8_bound¨y_c⁄dôi⁄s
()

58 
	`utf8_hñ≥r_Àn
("2.1.1 1 byã (U-00000000): \"\0\"", 39, 
MOSQ_ERR_MALFORMED_UTF8
);

59 
	`utf8_hñ≥r
("2.1.2 2 byã†(U-00000080): \"¬Ä\"", 
MOSQ_ERR_MALFORMED_UTF8
);

60 
	`utf8_hñ≥r
("2.1.3 3 byã†(U-00000800): \"‡†Ä\"", 
MOSQ_ERR_SUCCESS
);

61 
	`utf8_hñ≥r
("2.1.4 4 byã†(U-00010000): \"êÄÄ\"", 
MOSQ_ERR_SUCCESS
);

65 
	`utf8_hñ≥r
("2.2.1 1 byã (U-0000007F): \"\"", 
MOSQ_ERR_MALFORMED_UTF8
);

66 
	`utf8_hñ≥r
("2.2.2 2 byã†(U-000007FF): \"ﬂø\"", 
MOSQ_ERR_SUCCESS
);

68 
	`utf8_hñ≥r
("2.2.3 3 byã†(U-0000FFFF): \"Ôøø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

70 
	`utf8_hñ≥r
("2.2.4 4 byã†(U-0010FFFF): \"˜øøø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

74 
	`utf8_hñ≥r
("2.3.1 U-0000D7FF =Éd 9‡b‡\"Ìüø\"", 
MOSQ_ERR_SUCCESS
);

75 
	`utf8_hñ≥r
("2.3.2 U-0000E000 =Éê80 80 = \"ÓÄÄ\"", 
MOSQ_ERR_SUCCESS
);

76 
	`utf8_hñ≥r
("2.3.3 U-0000FFFD =É‡b‡bd = \"ÔøΩ\"", 
MOSQ_ERR_SUCCESS
);

78 
	`utf8_hñ≥r
("2.3.4 U-0010FFFF = f4 8‡b‡b‡\"Ùèøø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

80 
	`utf8_hñ≥r
("2.3.5 U-00110000 = f4 90 80 80 = \"ÙêÄÄ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

81 
	}
}

84 
	$TEST_utf8_mÆf‹med_£quí˚s
()

86 
uöt8_t
 
buf
[100];

87 
i
;

90 
	`utf8_hñ≥r
("3.1.1 Fú° c⁄töu©i⁄ byã 0x80: \"Ä\"", 
MOSQ_ERR_MALFORMED_UTF8
);

91 
	`utf8_hñ≥r
("3.1.2 La° c⁄töu©i⁄ byã 0xbf: \"ø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

92 
	`utf8_hñ≥r
("3.1.3 2 c⁄töu©i⁄ byãs: \"Äø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

93 
	`utf8_hñ≥r
("3.1.4 3 c⁄töu©i⁄ byãs: \"ÄøÄ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

94 
	`utf8_hñ≥r
("3.1.5 4 c⁄töu©i⁄ byãs: \"ÄøÄø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

95 
	`utf8_hñ≥r
("3.1.6 5 c⁄töu©i⁄ byãs: \"ÄøÄøÄ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

96 
	`utf8_hñ≥r
("3.1.7 6 c⁄töu©i⁄ byãs: \"ÄøÄøÄø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

97 
	`utf8_hñ≥r
("3.1.8 7 c⁄töu©i⁄ byãs: \"ÄøÄøÄøÄ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

100 
	`mem£t
(
buf
, 0, (buf));

101 
i
=0x80; i<0x90; i++){

102 
buf
[
i
-0x80] = (
uöt8_t
)i;

104 
	`utf8_hñ≥r
((*)
buf
, 
MOSQ_ERR_MALFORMED_UTF8
);

105 
	`mem£t
(
buf
, 0, (buf));

106 
i
=0x90; i<0xa0; i++){

107 
buf
[
i
-0x90] = (
uöt8_t
)i;

109 
	`utf8_hñ≥r
((*)
buf
, 
MOSQ_ERR_MALFORMED_UTF8
);

111 
i
=0x80; i<0xA0; i++){

112 
buf
[0] = (
uöt8_t
)
i
;

113 
buf
[1] = 0;

114 
	`utf8_hñ≥r
((*)
buf
, 
MOSQ_ERR_MALFORMED_UTF8
);

117 
i
=0xA0; i<0xC0; i++){

118 
buf
[0] = (
uöt8_t
)
i
;

119 
buf
[1] = 0;

120 
	`utf8_hñ≥r
((*)
buf
, 
MOSQ_ERR_MALFORMED_UTF8
);

127 
	`utf8_hñ≥r
("¿ ¡ ¬ √ ƒ ≈ ∆ « » …   À Ã Õ Œ œ – — “ ” ‘ ’ ÷ ◊ ÿ Ÿ ⁄ € ‹ › ﬁ ﬂ ", 
MOSQ_ERR_MALFORMED_UTF8
);

128 
i
=0xC0; i<0xE0; i++){

129 
buf
[0] = (
uöt8_t
)
i
;

130 
buf
[1] = ' ';

131 
buf
[2] = 0;

132 
	`utf8_hñ≥r
((*)
buf
, 
MOSQ_ERR_MALFORMED_UTF8
);

137 
	`utf8_hñ≥r
("\"‡ · ‚ „ ‰ Â Ê Á Ë È Í Î Ï Ì Ó Ô \"", 
MOSQ_ERR_MALFORMED_UTF8
);

138 
i
=0xe0; i<0xf0; i++){

139 
buf
[0] = (
uöt8_t
)
i
;

140 
buf
[1] = ' ';

141 
buf
[2] = 0;

142 
	`utf8_hñ≥r
((*)
buf
, 
MOSQ_ERR_MALFORMED_UTF8
);

147 
	`utf8_hñ≥r
("\" Ò Ú Û Ù ı ˆ ˜ \"", 
MOSQ_ERR_MALFORMED_UTF8
);

148 
i
=0xF0; i<0xF8; i++){

149 
buf
[0] = (
uöt8_t
)
i
;

150 
buf
[1] = ' ';

151 
buf
[2] = 0;

152 
	`utf8_hñ≥r
((*)
buf
, 
MOSQ_ERR_MALFORMED_UTF8
);

157 
	`utf8_hñ≥r
("\"¯ ˘ ˙ ˚ \"", 
MOSQ_ERR_MALFORMED_UTF8
);

158 
i
=0xF8; i<0xFC; i++){

159 
buf
[0] = (
uöt8_t
)
i
;

160 
buf
[1] = ' ';

161 
buf
[2] = 0;

162 
	`utf8_hñ≥r
((*)
buf
, 
MOSQ_ERR_MALFORMED_UTF8
);

167 
	`utf8_hñ≥r
("\"¸ ˝ \"", 
MOSQ_ERR_MALFORMED_UTF8
);

168 
	`utf8_hñ≥r
("¸ ", 
MOSQ_ERR_MALFORMED_UTF8
);

169 
	`utf8_hñ≥r
("˝ ", 
MOSQ_ERR_MALFORMED_UTF8
);

170 
i
=0xFC; i<0xFE; i++){

171 
buf
[0] = (
uöt8_t
)
i
;

172 
buf
[1] = ' ';

173 
buf
[2] = 0;

174 
	`utf8_hñ≥r
((*)
buf
, 
MOSQ_ERR_MALFORMED_UTF8
);

183 
	`utf8_hñ≥r
("3.3.1 2-byã sequí˚ wôhÜa° byã missög (U+0000): \"¿\"", 
MOSQ_ERR_MALFORMED_UTF8
);

184 
	`utf8_hñ≥r
("3.3.2 3-byã sequí˚ wôhÜa° byã missög (U+0000): \"‡Ä\"", 
MOSQ_ERR_MALFORMED_UTF8
);

185 
	`utf8_hñ≥r
("3.3.3 4-byã sequí˚ wôhÜa° byã missög (U+0000): \"ÄÄ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

186 
	`utf8_hñ≥r
("3.3.4 5-byã sequí˚ wôhÜa° byã missög (U+0000): \"¯ÄÄÄ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

187 
	`utf8_hñ≥r
("3.3.5 6-byã sequí˚ wôhÜa° byã missög (U+0000): \"¸ÄÄÄÄ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

188 
	`utf8_hñ≥r
("3.3.6 2-byã sequí˚ wôhÜa° byã missög (U-000007FF): \"ﬂ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

189 
	`utf8_hñ≥r
("3.3.7 3-byã sequí˚ wôhÜa° byã missög (U-0000FFFF): \"Ôø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

190 
	`utf8_hñ≥r
("3.3.8 4-byã sequí˚ wôhÜa° byã missög (U-001FFFFF): \"˜øø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

191 
	`utf8_hñ≥r
("3.3.9 5-byã sequí˚ wôhÜa° byã missög (U-03FFFFFF): \"˚øøø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

192 
	`utf8_hñ≥r
("3.3.10 6-byã sequí˚ wôhÜa° byã missög (U-7FFFFFFF): \"˝øøøø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

199 
	`utf8_hñ≥r
("\"¿‡ÄÄÄ¯ÄÄÄ¸ÄÄÄÄﬂÔø˜øø˚øøø˝øøøø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

205 
	`utf8_hñ≥r
("3.5.1 fê\"˛\"", 
MOSQ_ERR_MALFORMED_UTF8
);

206 
	`utf8_hñ≥r
("3.5.2 f‡\"ˇ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

207 
	`utf8_hñ≥r
("3.5.3 fê„ f‡f‡\"˛˛ˇˇ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

208 
	}
}

210 
	$TEST_utf8_ovîl⁄g_ícodög
()

240 
	`utf8_hñ≥r
("4.1.1 U+002F = c0á‡ = \"¿Ø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

241 
	`utf8_hñ≥r
("4.1.2 U+002F =É0 80á‡ = \"‡ÄØ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

242 
	`utf8_hñ≥r
("4.1.3 U+002F = f0 80 80á‡ = \"ÄÄØ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

243 
	`utf8_hñ≥r
("4.1.4 U+002F = f8 80 80 80á‡ = \"¯ÄÄÄØ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

244 
	`utf8_hñ≥r
("4.1.5 U+002F = f¯80 80 80 80á‡\"¸ÄÄÄÄØ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

253 
	`utf8_hñ≥r
("4.2.1 U-0000007F = c1 b‡ = \"¡ø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

254 
	`utf8_hñ≥r
("4.2.2 U-000007FF =É0 9‡b‡ = \"‡üø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

255 
	`utf8_hñ≥r
("4.2.3 U-0000FFFF = f0 8‡b‡b‡ = \"èøø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

256 
	`utf8_hñ≥r
("4.2.4 U-001FFFFF = f8 87 b‡b‡b‡ = \"¯áøøø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

257 
	`utf8_hñ≥r
("4.2.5 U-03FFFFFF = f¯83 b‡b‡b‡b‡\"¸Éøøøø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

265 
	`utf8_hñ≥r
("4.3.1 U+0000 = c0 80 = \"¿Ä\"", 
MOSQ_ERR_MALFORMED_UTF8
);

266 
	`utf8_hñ≥r
("4.3.2 U+0000 =É0 80 80 = \"‡ÄÄ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

267 
	`utf8_hñ≥r
("4.3.3 U+0000 = f0 80 80 80 = \"ÄÄÄ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

268 
	`utf8_hñ≥r
("4.3.4 U+0000 = f8 80 80 80 80 = \"¯ÄÄÄÄ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

269 
	`utf8_hñ≥r
("4.3.5 U+0000 = f¯80 80 80 80 80 = \"¸ÄÄÄÄÄ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

270 
	}
}

273 
	$TEST_utf8_ûÀgÆ_code_posôi⁄s
()

284 
	`utf8_hñ≥r
("5.1.1 U+D800 =Édá0 80 = \"Ì†Ä\"", 
MOSQ_ERR_MALFORMED_UTF8
);

285 
	`utf8_hñ≥r
("5.1.2 U+DB7F =Édád b‡\"Ì≠ø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

286 
	`utf8_hñ≥r
("5.1.3 U+DB80 =Édáê80 = \"ÌÆÄ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

287 
	`utf8_hñ≥r
("5.1.4 U+DBFF =Édá‡b‡\"ÌØø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

288 
	`utf8_hñ≥r
("5.1.5 U+DC00 =Éd b0 80 = \"Ì∞Ä\"", 
MOSQ_ERR_MALFORMED_UTF8
);

289 
	`utf8_hñ≥r
("5.1.6 U+DF80 =Éd bê80 = \"ÌæÄ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

290 
	`utf8_hñ≥r
("5.1.7 U+DFFF =Éd b‡b‡\"Ìøø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

294 
	`utf8_hñ≥r
("5.2.1 U+D800 U+DC00 =Édá0 80Éd b0 80 = \"Ì†ÄÌ∞Ä\"", 
MOSQ_ERR_MALFORMED_UTF8
);

295 
	`utf8_hñ≥r
("5.2.2 U+D800 U+DFFF =Édá0 80Éd b‡b‡\"Ì†ÄÌøø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

296 
	`utf8_hñ≥r
("5.2.3 U+DB7F U+DC00 =Édád b‡ed b0 80 = \"Ì≠øÌ∞Ä\"", 
MOSQ_ERR_MALFORMED_UTF8
);

297 
	`utf8_hñ≥r
("5.2.4 U+DB7F U+DFFF =Édád b‡ed b‡b‡\"Ì≠øÌøø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

298 
	`utf8_hñ≥r
("5.2.5 U+DB80 U+DC00 =Édáê80Éd b0 80 = \"ÌÆÄÌ∞Ä\"", 
MOSQ_ERR_MALFORMED_UTF8
);

299 
	`utf8_hñ≥r
("5.2.6 U+DB80 U+DFFF =Édáê80Éd b‡b‡\"ÌÆÄÌøø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

300 
	`utf8_hñ≥r
("5.2.7 U+DBFF U+DC00 =Édá‡b‡ed b0 80 = \"ÌØøÌ∞Ä\"", 
MOSQ_ERR_MALFORMED_UTF8
);

301 
	`utf8_hñ≥r
("5.2.8 U+DBFF U+DFFF =Édá‡b‡ed b‡b‡\"ÌØøÌøø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

324 
	`utf8_hñ≥r
("5.3.1 U+FFFE =É‡b‡bê\"Ôøæ\"", 
MOSQ_ERR_MALFORMED_UTF8
);

325 
	`utf8_hñ≥r
("5.3.2 U+FFFF =É‡b‡b‡\"Ôøø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

330 
	`utf8_hñ≥r
("5.3.3 U+FDD0 .. U+FDEF = \"Ô∑êÔ∑ëÔ∑íÔ∑ìÔ∑îÔ∑ïÔ∑ñÔ∑óÔ∑òÔ∑ôÔ∑öÔ∑õÔ∑úÔ∑ùÔ∑ûÔ∑üÔ∑†Ô∑°Ô∑¢Ô∑£Ô∑§Ô∑•Ô∑¶Ô∑ßÔ∑®Ô∑©Ô∑™Ô∑´Ô∑¨Ô∑≠Ô∑ÆÔ∑Ø\"", 
MOSQ_ERR_MALFORMED_UTF8
);

331 
	`utf8_hñ≥r
("Ô∑ê", 
MOSQ_ERR_MALFORMED_UTF8
);

332 
	`utf8_hñ≥r
("Ô∑ë", 
MOSQ_ERR_MALFORMED_UTF8
);

333 
	`utf8_hñ≥r
("Ô∑í", 
MOSQ_ERR_MALFORMED_UTF8
);

334 
	`utf8_hñ≥r
("Ô∑ì", 
MOSQ_ERR_MALFORMED_UTF8
);

335 
	`utf8_hñ≥r
("Ô∑î", 
MOSQ_ERR_MALFORMED_UTF8
);

336 
	`utf8_hñ≥r
("Ô∑ï", 
MOSQ_ERR_MALFORMED_UTF8
);

337 
	`utf8_hñ≥r
("Ô∑ñ", 
MOSQ_ERR_MALFORMED_UTF8
);

338 
	`utf8_hñ≥r
("Ô∑ó", 
MOSQ_ERR_MALFORMED_UTF8
);

339 
	`utf8_hñ≥r
("Ô∑ò", 
MOSQ_ERR_MALFORMED_UTF8
);

340 
	`utf8_hñ≥r
("Ô∑ô", 
MOSQ_ERR_MALFORMED_UTF8
);

341 
	`utf8_hñ≥r
("Ô∑ö", 
MOSQ_ERR_MALFORMED_UTF8
);

342 
	`utf8_hñ≥r
("Ô∑õ", 
MOSQ_ERR_MALFORMED_UTF8
);

343 
	`utf8_hñ≥r
("Ô∑ú", 
MOSQ_ERR_MALFORMED_UTF8
);

344 
	`utf8_hñ≥r
("Ô∑ù", 
MOSQ_ERR_MALFORMED_UTF8
);

345 
	`utf8_hñ≥r
("Ô∑û", 
MOSQ_ERR_MALFORMED_UTF8
);

346 
	`utf8_hñ≥r
("Ô∑ü", 
MOSQ_ERR_MALFORMED_UTF8
);

347 
	`utf8_hñ≥r
("Ô∑†", 
MOSQ_ERR_MALFORMED_UTF8
);

348 
	`utf8_hñ≥r
("Ô∑°", 
MOSQ_ERR_MALFORMED_UTF8
);

349 
	`utf8_hñ≥r
("Ô∑¢", 
MOSQ_ERR_MALFORMED_UTF8
);

350 
	`utf8_hñ≥r
("Ô∑£", 
MOSQ_ERR_MALFORMED_UTF8
);

351 
	`utf8_hñ≥r
("Ô∑§", 
MOSQ_ERR_MALFORMED_UTF8
);

352 
	`utf8_hñ≥r
("Ô∑•", 
MOSQ_ERR_MALFORMED_UTF8
);

353 
	`utf8_hñ≥r
("Ô∑¶", 
MOSQ_ERR_MALFORMED_UTF8
);

354 
	`utf8_hñ≥r
("Ô∑ß", 
MOSQ_ERR_MALFORMED_UTF8
);

355 
	`utf8_hñ≥r
("Ô∑®", 
MOSQ_ERR_MALFORMED_UTF8
);

356 
	`utf8_hñ≥r
("Ô∑©", 
MOSQ_ERR_MALFORMED_UTF8
);

357 
	`utf8_hñ≥r
("Ô∑™", 
MOSQ_ERR_MALFORMED_UTF8
);

358 
	`utf8_hñ≥r
("Ô∑´", 
MOSQ_ERR_MALFORMED_UTF8
);

359 
	`utf8_hñ≥r
("Ô∑¨", 
MOSQ_ERR_MALFORMED_UTF8
);

360 
	`utf8_hñ≥r
("Ô∑≠", 
MOSQ_ERR_MALFORMED_UTF8
);

361 
	`utf8_hñ≥r
("Ô∑Æ", 
MOSQ_ERR_MALFORMED_UTF8
);

362 
	`utf8_hñ≥r
("Ô∑Ø", 
MOSQ_ERR_MALFORMED_UTF8
);

366 
	`utf8_hñ≥r
("üøæ", 
MOSQ_ERR_MALFORMED_UTF8
);

367 
	`utf8_hñ≥r
("üøø", 
MOSQ_ERR_MALFORMED_UTF8
);

368 
	`utf8_hñ≥r
("Øøæ", 
MOSQ_ERR_MALFORMED_UTF8
);

369 
	`utf8_hñ≥r
("Øøø", 
MOSQ_ERR_MALFORMED_UTF8
);

370 
	`utf8_hñ≥r
("øøæ", 
MOSQ_ERR_MALFORMED_UTF8
);

371 
	`utf8_hñ≥r
("øøø", 
MOSQ_ERR_MALFORMED_UTF8
);

372 
	`utf8_hñ≥r
("Òèøæ", 
MOSQ_ERR_MALFORMED_UTF8
);

373 
	`utf8_hñ≥r
("Òèøø", 
MOSQ_ERR_MALFORMED_UTF8
);

374 
	`utf8_hñ≥r
("Òüøæ", 
MOSQ_ERR_MALFORMED_UTF8
);

375 
	`utf8_hñ≥r
("Òüøø", 
MOSQ_ERR_MALFORMED_UTF8
);

376 
	`utf8_hñ≥r
("ÒØøæ", 
MOSQ_ERR_MALFORMED_UTF8
);

377 
	`utf8_hñ≥r
("ÒØøø", 
MOSQ_ERR_MALFORMED_UTF8
);

378 
	`utf8_hñ≥r
("Òøøæ", 
MOSQ_ERR_MALFORMED_UTF8
);

379 
	`utf8_hñ≥r
("Òøøø", 
MOSQ_ERR_MALFORMED_UTF8
);

380 
	`utf8_hñ≥r
("Úèøæ", 
MOSQ_ERR_MALFORMED_UTF8
);

381 
	`utf8_hñ≥r
("Úèøø", 
MOSQ_ERR_MALFORMED_UTF8
);

382 
	`utf8_hñ≥r
("Úüøæ", 
MOSQ_ERR_MALFORMED_UTF8
);

383 
	`utf8_hñ≥r
("Úüøø", 
MOSQ_ERR_MALFORMED_UTF8
);

384 
	`utf8_hñ≥r
("ÚØøæ", 
MOSQ_ERR_MALFORMED_UTF8
);

385 
	`utf8_hñ≥r
("ÚØøø", 
MOSQ_ERR_MALFORMED_UTF8
);

386 
	`utf8_hñ≥r
("Úøøæ", 
MOSQ_ERR_MALFORMED_UTF8
);

387 
	`utf8_hñ≥r
("Úøøø", 
MOSQ_ERR_MALFORMED_UTF8
);

388 
	`utf8_hñ≥r
("Ûèøæ", 
MOSQ_ERR_MALFORMED_UTF8
);

389 
	`utf8_hñ≥r
("Ûèøø", 
MOSQ_ERR_MALFORMED_UTF8
);

390 
	`utf8_hñ≥r
("Ûüøæ", 
MOSQ_ERR_MALFORMED_UTF8
);

391 
	`utf8_hñ≥r
("Ûüøø", 
MOSQ_ERR_MALFORMED_UTF8
);

392 
	`utf8_hñ≥r
("ÛØøæ", 
MOSQ_ERR_MALFORMED_UTF8
);

393 
	`utf8_hñ≥r
("ÛØøø", 
MOSQ_ERR_MALFORMED_UTF8
);

394 
	`utf8_hñ≥r
("Ûøøæ", 
MOSQ_ERR_MALFORMED_UTF8
);

395 
	`utf8_hñ≥r
("Ûøøø", 
MOSQ_ERR_MALFORMED_UTF8
);

396 
	`utf8_hñ≥r
("Ùèøæ", 
MOSQ_ERR_MALFORMED_UTF8
);

397 
	`utf8_hñ≥r
("Ùèøø", 
MOSQ_ERR_MALFORMED_UTF8
);

398 
	}
}

401 
	$TEST_utf8_c⁄åﬁ_ch¨a˘îs
()

403 
uöt8_t
 
buf
[10];

404 
i
;

407 
i
=0x01; i<0x20; i++){

408 
buf
[0] = (
uöt8_t
)
i
;

409 
buf
[1] = '\0';

410 
	`utf8_hñ≥r
((*)
buf
, 
MOSQ_ERR_MALFORMED_UTF8
);

414 
buf
[0] = 0x7F;

415 
buf
[1] = '\0';

416 
	`utf8_hñ≥r
((*)
buf
, 
MOSQ_ERR_MALFORMED_UTF8
);

419 
i
=0x80; i<0xA0; i++){

420 
buf
[0] = 0xC2;

421 
buf
[1] = (
uöt8_t
)(
i
-0x80);

422 
buf
[2] = '\0';

423 
	`utf8_hñ≥r
((*)
buf
, 
MOSQ_ERR_MALFORMED_UTF8
);

426 
	}
}

429 
	$TEST_utf8_mqâ_1_5_4_2
()

431 
uöt8_t
 
buf
[10] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '\0'};

433 
	`utf8_hñ≥r_Àn
((*)
buf
, 9, 
MOSQ_ERR_SUCCESS
);

435 
buf
[3] = '\0';

436 
	`utf8_hñ≥r_Àn
((*)
buf
, 9, 
MOSQ_ERR_MALFORMED_UTF8
);

437 
	}
}

440 
	$TEST_utf8_mqâ_1_5_4_3
()

442 
uöt8_t
 
buf
[10] = {'a', 'b', 0xEF, 0xBB, 0xBF, 'f', 'g', 'h', 'i', '\0'};

444 
	`utf8_hñ≥r_Àn
((*)
buf
, 9, 
MOSQ_ERR_SUCCESS
);

445 
	}
}

452 
	$öô_utf8_ã°s
()

454 
CU_pSuôe
 
ã°_suôe
 = 
NULL
;

456 
ã°_suôe
 = 
	`CU_add_suôe
("UTF-8", 
NULL
, NULL);

457 if(!
ã°_suôe
){

458 
	`¥ötf
("Errorádding CUnitÅest suite.\n");

463 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8Ém±y", 
TEST_utf8_em±y
)

464 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8 vÆid", 
TEST_utf8_vÆid
)

465 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8Årunˇãd", 
TEST_utf8_åunˇãd
)

466 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8 bound¨y c⁄dôi⁄s", 
TEST_utf8_bound¨y_c⁄dôi⁄s
)

467 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8 mÆf‹med sequí˚s", 
TEST_utf8_mÆf‹med_£quí˚s
)

468 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8 ovîl⁄gÉncodög", 
TEST_utf8_ovîl⁄g_ícodög
)

469 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8 iŒegÆ codêposôi⁄s", 
TEST_utf8_ûÀgÆ_code_posôi⁄s
)

470 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8 c⁄åﬁ ch¨a˘îs", 
TEST_utf8_c⁄åﬁ_ch¨a˘îs
)

471 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8 MQTT-1.5.4-2", 
TEST_utf8_mqâ_1_5_4_2
)

472 || !
	`CU_add_ã°
(
ã°_suôe
, "UTF-8 MQTT-1.5.4-3", 
TEST_utf8_mqâ_1_5_4_3
)

475 
	`¥ötf
("Errorádding UTF-8 CUnitÅests.\n");

480 
	}
}

	@open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/util_topic_test.c

1 
	~<CUnô/CUnô.h
>

2 
	~<CUnô/Basic.h
>

4 
	~<utû_mosq.h
>

6 
	$m©ch_hñ≥r
(c⁄° *
sub
, c⁄° *
t›ic
)

8 
rc
;

9 
boﬁ
 
m©ch
;

11 
rc
 = 
	`mosquôto_t›ic_m©ches_sub
(
sub
, 
t›ic
, &
m©ch
);

12 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

13 
	`CU_ASSERT_EQUAL
(
m©ch
, 
åue
);

14 if(
m©ch
 =
Ál£
){

15 
	`¥ötf
("1: %s:%s\n", 
sub
, 
t›ic
);

18 
rc
 = 
	`mosquôto_t›ic_m©ches_sub2
(
sub
, 
	`°æí
(sub), 
t›ic
, såÀn—›ic), &
m©ch
);

19 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_SUCCESS
);

20 
	`CU_ASSERT_EQUAL
(
m©ch
, 
åue
);

21 if(
m©ch
 =
Ál£
){

22 
	`¥ötf
("2: %s:%s\n", 
sub
, 
t›ic
);

24 
	}
}

26 
	$no_m©ch_hñ≥r
(
rc_ex≥˘ed
, c⁄° *
sub
, c⁄° *
t›ic
)

28 
rc
;

29 
boﬁ
 
m©ch
;

31 
rc
 = 
	`mosquôto_t›ic_m©ches_sub
(
sub
, 
t›ic
, &
m©ch
);

32 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

33 if(
rc
 !
rc_ex≥˘ed
){

34 
	`¥ötf
("%d:%d %s:%s\n", 
rc
, 
rc_ex≥˘ed
, 
sub
, 
t›ic
);

36 
	`CU_ASSERT_EQUAL
(
m©ch
, 
Ál£
);

38 
rc
 = 
	`mosquôto_t›ic_m©ches_sub2
(
sub
, 
	`°æí
(sub), 
t›ic
, såÀn—›ic), &
m©ch
);

39 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

40 if(
rc
 !
rc_ex≥˘ed
){

41 
	`¥ötf
("%d:%d %s:%s\n", 
rc
, 
rc_ex≥˘ed
, 
sub
, 
t›ic
);

43 
	`CU_ASSERT_EQUAL
(
m©ch
, 
Ál£
);

44 
	}
}

50 
	$TEST_em±y_öput
()

52 
rc
;

53 
boﬁ
 
m©ch
;

55 
rc
 = 
	`mosquôto_t›ic_m©ches_sub
("sub", 
NULL
, &
m©ch
);

56 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

57 
	`CU_ASSERT_EQUAL
(
m©ch
, 
Ál£
);

59 
rc
 = 
	`mosquôto_t›ic_m©ches_sub
(
NULL
, "t›ic", &
m©ch
);

60 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

61 
	`CU_ASSERT_EQUAL
(
m©ch
, 
Ál£
);

63 
rc
 = 
	`mosquôto_t›ic_m©ches_sub
(
NULL
, NULL, &
m©ch
);

64 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

65 
	`CU_ASSERT_EQUAL
(
m©ch
, 
Ál£
);

67 
rc
 = 
	`mosquôto_t›ic_m©ches_sub
("sub", "", &
m©ch
);

68 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

69 
	`CU_ASSERT_EQUAL
(
m©ch
, 
Ál£
);

71 
rc
 = 
	`mosquôto_t›ic_m©ches_sub
("", "t›ic", &
m©ch
);

72 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

73 
	`CU_ASSERT_EQUAL
(
m©ch
, 
Ál£
);

75 
rc
 = 
	`mosquôto_t›ic_m©ches_sub
("", "", &
m©ch
);

76 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

77 
	`CU_ASSERT_EQUAL
(
m©ch
, 
Ál£
);

79 
rc
 = 
	`mosquôto_t›ic_m©ches_sub2
("sub", 3, 
NULL
, 0, &
m©ch
);

80 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

81 
	`CU_ASSERT_EQUAL
(
m©ch
, 
Ál£
);

83 
rc
 = 
	`mosquôto_t›ic_m©ches_sub2
(
NULL
, 0, "t›ic", 5, &
m©ch
);

84 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

85 
	`CU_ASSERT_EQUAL
(
m©ch
, 
Ál£
);

87 
rc
 = 
	`mosquôto_t›ic_m©ches_sub2
(
NULL
, 0, NULL, 0, &
m©ch
);

88 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

89 
	`CU_ASSERT_EQUAL
(
m©ch
, 
Ál£
);

91 
rc
 = 
	`mosquôto_t›ic_m©ches_sub2
("sub", 3, "", 0, &
m©ch
);

92 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

93 
	`CU_ASSERT_EQUAL
(
m©ch
, 
Ál£
);

95 
rc
 = 
	`mosquôto_t›ic_m©ches_sub2
("", 0, "t›ic", 5, &
m©ch
);

96 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

97 
	`CU_ASSERT_EQUAL
(
m©ch
, 
Ál£
);

99 
rc
 = 
	`mosquôto_t›ic_m©ches_sub2
("", 0, "", 0, &
m©ch
);

100 
	`CU_ASSERT_EQUAL
(
rc
, 
MOSQ_ERR_INVAL
);

101 
	`CU_ASSERT_EQUAL
(
m©ch
, 
Ál£
);

102 
	}
}

108 
	$TEST_vÆid_m©chög
()

110 
	`m©ch_hñ≥r
("foo/#", "foo/");

111 
	`m©ch_hñ≥r
("foo/#", "foo");

112 
	`m©ch_hñ≥r
("foo//bar", "foo//bar");

113 
	`m©ch_hñ≥r
("foo//+", "foo//bar");

114 
	`m©ch_hñ≥r
("foo/+/+/baz", "foo///baz");

115 
	`m©ch_hñ≥r
("foo/bar/+", "foo/bar/");

116 
	`m©ch_hñ≥r
("foo/bar", "foo/bar");

117 
	`m©ch_hñ≥r
("foo/+", "foo/bar");

118 
	`m©ch_hñ≥r
("foo/+/baz", "foo/bar/baz");

119 
	`m©ch_hñ≥r
("A/B/+/#", "A/B/B/C");

120 
	`m©ch_hñ≥r
("foo/+/#", "foo/bar/baz");

121 
	`m©ch_hñ≥r
("foo/+/#", "foo/bar");

122 
	`m©ch_hñ≥r
("#", "foo/bar/baz");

123 
	`m©ch_hñ≥r
("#", "foo/bar/baz");

124 
	`m©ch_hñ≥r
("#", "/foo/bar");

125 
	`m©ch_hñ≥r
("/#", "/foo/bar");

126 
	}
}

129 
	$TEST_övÆid_but_m©chög
()

133 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "+foo", "+foo");

134 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "fo+o", "fo+o");

135 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo+", "foo+");

136 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "+foo/bar", "+foo/bar");

137 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo+/bar", "foo+/bar");

138 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo/+bar", "foo/+bar");

139 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo/bar+", "foo/bar+");

141 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "+foo", "afoo");

142 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "fo+o", "foao");

143 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo+", "fooa");

144 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "+foo/bar", "afoo/bar");

145 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo+/bar", "fooa/bar");

146 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo/+bar", "foo/abar");

147 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo/bar+", "foo/bara");

149 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "#foo", "#foo");

150 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "fo#o", "fo#o");

151 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo#", "foo#");

152 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "#foo/bar", "#foo/bar");

153 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo#/bar", "foo#/bar");

154 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo/#bar", "foo/#bar");

155 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo/bar#", "foo/bar#");

157 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo+", "fooa");

159 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo/+", "foo/+");

160 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo/#", "foo/+");

161 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo/+", "foo/bar/+");

162 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo/#", "foo/bar/+");

164 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo/+", "foo/#");

165 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo/#", "foo/#");

166 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo/+", "foo/bar/#");

167 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo/#", "foo/bar/#");

168 
	}
}

171 
	$TEST_vÆid_no_m©chög
()

173 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_SUCCESS
, "test/6/#", "test/3");

175 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_SUCCESS
, "foo/bar", "foo");

176 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_SUCCESS
, "foo/+", "foo/bar/baz");

177 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_SUCCESS
, "foo/+/baz", "foo/bar/bar");

179 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_SUCCESS
, "foo/+/#", "fo2/bar/baz");

181 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_SUCCESS
, "/#", "foo/bar");

183 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_SUCCESS
, "#", "$SYS/bar");

184 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_SUCCESS
, "$BOB/bar", "$SYS/bar");

185 
	}
}

188 
	$TEST_övÆid
()

190 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo#", "foo");

191 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "fo#o/", "foo");

192 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo#", "fooa");

193 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo+", "foo");

194 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo/#a", "foo");

195 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "#a", "foo");

196 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "foo/#abc", "foo");

197 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "#abc", "foo");

198 
	`no_m©ch_hñ≥r
(
MOSQ_ERR_INVAL
, "/#a", "foo/bar");

199 
	}
}

205 
	$pub_t›ic_hñ≥r
(c⁄° *
t›ic
, 
rc_ex≥˘ed
)

207 
rc
;

209 
rc
 = 
	`mosquôto_pub_t›ic_check
(
t›ic
);

210 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

212 
rc
 = 
	`mosquôto_pub_t›ic_check2
(
t›ic
, 
	`°æí
(topic));

213 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

214 
	}
}

216 
	$TEST_pub_t›ic_vÆid
()

218 
	`pub_t›ic_hñ≥r
("pub/t›ic", 
MOSQ_ERR_SUCCESS
);

219 
	`pub_t›ic_hñ≥r
("pub//t›ic", 
MOSQ_ERR_SUCCESS
);

220 
	`pub_t›ic_hñ≥r
("pub/ /t›ic", 
MOSQ_ERR_SUCCESS
);

221 
	}
}

223 
	$TEST_pub_t›ic_övÆid
()

225 
	`pub_t›ic_hñ≥r
("+pub/t›ic", 
MOSQ_ERR_INVAL
);

226 
	`pub_t›ic_hñ≥r
("pub+/t›ic", 
MOSQ_ERR_INVAL
);

227 
	`pub_t›ic_hñ≥r
("pub/+t›ic", 
MOSQ_ERR_INVAL
);

228 
	`pub_t›ic_hñ≥r
("pub/t›ic+", 
MOSQ_ERR_INVAL
);

229 
	`pub_t›ic_hñ≥r
("pub/t›ic/+", 
MOSQ_ERR_INVAL
);

230 
	`pub_t›ic_hñ≥r
("#pub/t›ic", 
MOSQ_ERR_INVAL
);

231 
	`pub_t›ic_hñ≥r
("pub#/t›ic", 
MOSQ_ERR_INVAL
);

232 
	`pub_t›ic_hñ≥r
("pub/#t›ic", 
MOSQ_ERR_INVAL
);

233 
	`pub_t›ic_hñ≥r
("pub/t›ic#", 
MOSQ_ERR_INVAL
);

234 
	`pub_t›ic_hñ≥r
("pub/t›ic/#", 
MOSQ_ERR_INVAL
);

235 
	`pub_t›ic_hñ≥r
("+/pub/t›ic", 
MOSQ_ERR_INVAL
);

236 
	}
}

243 
	$sub_t›ic_hñ≥r
(c⁄° *
t›ic
, 
rc_ex≥˘ed
)

245 
rc
;

247 
rc
 = 
	`mosquôto_sub_t›ic_check
(
t›ic
);

248 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

250 
rc
 = 
	`mosquôto_sub_t›ic_check2
(
t›ic
, 
	`°æí
(topic));

251 
	`CU_ASSERT_EQUAL
(
rc
, 
rc_ex≥˘ed
);

252 
	}
}

254 
	$TEST_sub_t›ic_vÆid
()

256 
	`sub_t›ic_hñ≥r
("sub/t›ic", 
MOSQ_ERR_SUCCESS
);

257 
	`sub_t›ic_hñ≥r
("sub//t›ic", 
MOSQ_ERR_SUCCESS
);

258 
	`sub_t›ic_hñ≥r
("sub/ /t›ic", 
MOSQ_ERR_SUCCESS
);

259 
	`sub_t›ic_hñ≥r
("sub/+/t›ic", 
MOSQ_ERR_SUCCESS
);

260 
	`sub_t›ic_hñ≥r
("+/+/+", 
MOSQ_ERR_SUCCESS
);

261 
	`sub_t›ic_hñ≥r
("+", 
MOSQ_ERR_SUCCESS
);

262 
	`sub_t›ic_hñ≥r
("sub/t›ic/#", 
MOSQ_ERR_SUCCESS
);

263 
	`sub_t›ic_hñ≥r
("sub//t›ic/#", 
MOSQ_ERR_SUCCESS
);

264 
	`sub_t›ic_hñ≥r
("sub/ /t›ic/#", 
MOSQ_ERR_SUCCESS
);

265 
	`sub_t›ic_hñ≥r
("sub/+/t›ic/#", 
MOSQ_ERR_SUCCESS
);

266 
	`sub_t›ic_hñ≥r
("+/+/+/#", 
MOSQ_ERR_SUCCESS
);

267 
	`sub_t›ic_hñ≥r
("#", 
MOSQ_ERR_SUCCESS
);

268 
	}
}

270 
	$TEST_sub_t›ic_övÆid
()

272 
	`sub_t›ic_hñ≥r
("+sub/t›ic", 
MOSQ_ERR_INVAL
);

273 
	`sub_t›ic_hñ≥r
("sub+/t›ic", 
MOSQ_ERR_INVAL
);

274 
	`sub_t›ic_hñ≥r
("sub/+t›ic", 
MOSQ_ERR_INVAL
);

275 
	`sub_t›ic_hñ≥r
("sub/t›ic+", 
MOSQ_ERR_INVAL
);

276 
	`sub_t›ic_hñ≥r
("#sub/t›ic", 
MOSQ_ERR_INVAL
);

277 
	`sub_t›ic_hñ≥r
("sub#/t›ic", 
MOSQ_ERR_INVAL
);

278 
	`sub_t›ic_hñ≥r
("sub/#t›ic", 
MOSQ_ERR_INVAL
);

279 
	`sub_t›ic_hñ≥r
("sub/t›ic#", 
MOSQ_ERR_INVAL
);

280 
	`sub_t›ic_hñ≥r
("#/sub/t›ic", 
MOSQ_ERR_INVAL
);

281 
	}
}

287 
	$öô_utû_t›ic_ã°s
()

289 
CU_pSuôe
 
ã°_suôe
 = 
NULL
;

291 
ã°_suôe
 = 
	`CU_add_suôe
("UtûÅ›ic", 
NULL
, NULL);

292 if(!
ã°_suôe
){

293 
	`¥ötf
("Errorádding CUnit utilÅopicÅest suite.\n");

298 || !
	`CU_add_ã°
(
ã°_suôe
, "M©chög: Em±y i≈ut", 
TEST_em±y_öput
)

299 || !
	`CU_add_ã°
(
ã°_suôe
, "M©chög: VÆid m©chög", 
TEST_vÆid_m©chög
)

300 || !
	`CU_add_ã°
(
ã°_suôe
, "M©chög: VÆidÇÿm©chög", 
TEST_vÆid_no_m©chög
)

301 || !
	`CU_add_ã°
(
ã°_suôe
, "M©chög: InvÆid buàm©chög", 
TEST_övÆid_but_m©chög
)

302 || !
	`CU_add_ã°
(
ã°_suôe
, "M©chög: InvÆid", 
TEST_övÆid
)

303 || !
	`CU_add_ã°
(
ã°_suôe
, "PubÅ›ic: VÆid", 
TEST_pub_t›ic_vÆid
)

304 || !
	`CU_add_ã°
(
ã°_suôe
, "PubÅ›ic: InvÆid", 
TEST_pub_t›ic_övÆid
)

305 || !
	`CU_add_ã°
(
ã°_suôe
, "SubÅ›ic: VÆid", 
TEST_sub_t›ic_vÆid
)

306 || !
	`CU_add_ã°
(
ã°_suôe
, "SubÅ›ic: InvÆid", 
TEST_sub_t›ic_övÆid
)

309 
	`¥ötf
("Errorádding utilÅopic CUnitÅests.\n");

314 
	}
}

	@open_source_lib/mosquitto/mosquitto/include/mosquitto.h

19 #i‚de‡
MOSQUITTO_H


20 
	#MOSQUITTO_H


	)

29 #ifde‡
__˝lu•lus


34 #ifde‡
WIN32


35 #ifde‡
mosquôto_EXPORTS


36 
	#libmosq_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

38 #i‚de‡
LIBMOSQUITTO_STATIC


39 #ifde‡
libmosquôto_EXPORTS


40 
	#libmosq_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

42 
	#libmosq_EXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

45 
	#libmosq_EXPORT


	)

49 
	#libmosq_EXPORT


	)

52 #i‡
deföed
(
_MSC_VER
Ë&& _MSC_VER < 1900 && !deföed(
boﬁ
)

53 #i‚de‡
__˝lu•lus


54 
	#boﬁ
 

	)

55 
	#åue
 1

	)

56 
	#Ál£
 0

	)

59 #i‚de‡
__˝lu•lus


60 
	~<°dboﬁ.h
>

64 
	~<°ddef.h
>

65 
	~<°döt.h
>

67 
	#LIBMOSQUITTO_MAJOR
 2

	)

68 
	#LIBMOSQUITTO_MINOR
 0

	)

69 
	#LIBMOSQUITTO_REVISION
 15

	)

71 
	#LIBMOSQUITTO_VERSION_NUMBER
 (
LIBMOSQUITTO_MAJOR
*1000000+
LIBMOSQUITTO_MINOR
*1000+
LIBMOSQUITTO_REVISION
)

	)

74 
	#MOSQ_LOG_NONE
 0

	)

75 
	#MOSQ_LOG_INFO
 (1<<0)

	)

76 
	#MOSQ_LOG_NOTICE
 (1<<1)

	)

77 
	#MOSQ_LOG_WARNING
 (1<<2)

	)

78 
	#MOSQ_LOG_ERR
 (1<<3)

	)

79 
	#MOSQ_LOG_DEBUG
 (1<<4)

	)

80 
	#MOSQ_LOG_SUBSCRIBE
 (1<<5)

	)

81 
	#MOSQ_LOG_UNSUBSCRIBE
 (1<<6)

	)

82 
	#MOSQ_LOG_WEBSOCKETS
 (1<<7)

	)

83 
	#MOSQ_LOG_INTERNAL
 0x80000000U

	)

84 
	#MOSQ_LOG_ALL
 0xFFFFFFFFU

	)

88 
	emosq_îr_t
 {

89 
MOSQ_ERR_AUTH_CONTINUE
 = -4,

90 
MOSQ_ERR_NO_SUBSCRIBERS
 = -3,

91 
MOSQ_ERR_SUB_EXISTS
 = -2,

92 
MOSQ_ERR_CONN_PENDING
 = -1,

93 
MOSQ_ERR_SUCCESS
 = 0,

94 
MOSQ_ERR_NOMEM
 = 1,

95 
MOSQ_ERR_PROTOCOL
 = 2,

96 
MOSQ_ERR_INVAL
 = 3,

97 
MOSQ_ERR_NO_CONN
 = 4,

98 
MOSQ_ERR_CONN_REFUSED
 = 5,

99 
MOSQ_ERR_NOT_FOUND
 = 6,

100 
MOSQ_ERR_CONN_LOST
 = 7,

101 
MOSQ_ERR_TLS
 = 8,

102 
MOSQ_ERR_PAYLOAD_SIZE
 = 9,

103 
MOSQ_ERR_NOT_SUPPORTED
 = 10,

104 
MOSQ_ERR_AUTH
 = 11,

105 
MOSQ_ERR_ACL_DENIED
 = 12,

106 
MOSQ_ERR_UNKNOWN
 = 13,

107 
MOSQ_ERR_ERRNO
 = 14,

108 
MOSQ_ERR_EAI
 = 15,

109 
MOSQ_ERR_PROXY
 = 16,

110 
MOSQ_ERR_PLUGIN_DEFER
 = 17,

111 
MOSQ_ERR_MALFORMED_UTF8
 = 18,

112 
MOSQ_ERR_KEEPALIVE
 = 19,

113 
MOSQ_ERR_LOOKUP
 = 20,

114 
MOSQ_ERR_MALFORMED_PACKET
 = 21,

115 
MOSQ_ERR_DUPLICATE_PROPERTY
 = 22,

116 
MOSQ_ERR_TLS_HANDSHAKE
 = 23,

117 
MOSQ_ERR_QOS_NOT_SUPPORTED
 = 24,

118 
MOSQ_ERR_OVERSIZE_PACKET
 = 25,

119 
MOSQ_ERR_OCSP
 = 26,

120 
MOSQ_ERR_TIMEOUT
 = 27,

121 
MOSQ_ERR_RETAIN_NOT_SUPPORTED
 = 28,

122 
MOSQ_ERR_TOPIC_ALIAS_INVALID
 = 29,

123 
MOSQ_ERR_ADMINISTRATIVE_ACTION
 = 30,

124 
MOSQ_ERR_ALREADY_EXISTS
 = 31,

133 
	emosq_›t_t
 {

134 
MOSQ_OPT_PROTOCOL_VERSION
 = 1,

135 
MOSQ_OPT_SSL_CTX
 = 2,

136 
MOSQ_OPT_SSL_CTX_WITH_DEFAULTS
 = 3,

137 
MOSQ_OPT_RECEIVE_MAXIMUM
 = 4,

138 
MOSQ_OPT_SEND_MAXIMUM
 = 5,

139 
MOSQ_OPT_TLS_KEYFORM
 = 6,

140 
MOSQ_OPT_TLS_ENGINE
 = 7,

141 
MOSQ_OPT_TLS_ENGINE_KPASS_SHA1
 = 8,

142 
MOSQ_OPT_TLS_OCSP_REQUIRED
 = 9,

143 
MOSQ_OPT_TLS_ALPN
 = 10,

144 
MOSQ_OPT_TCP_NODELAY
 = 11,

145 
MOSQ_OPT_BIND_ADDRESS
 = 12,

146 
MOSQ_OPT_TLS_USE_OS_CERTS
 = 13,

151 
	#MOSQ_MQTT_ID_MAX_LENGTH
 23

	)

153 
	#MQTT_PROTOCOL_V31
 3

	)

154 
	#MQTT_PROTOCOL_V311
 4

	)

155 
	#MQTT_PROTOCOL_V5
 5

	)

175 
	smosquôto_mesßge
{

176 
mid
;

177 *
t›ic
;

178 *
∑ylﬂd
;

179 
∑ylﬂdÀn
;

180 
qos
;

181 
boﬁ
 
ªèö
;

184 
mosquôto
;

185 
mqâ5__¥›îty
 
	tmosquôto_¥›îty
;

248 
libmosq_EXPORT
 
mosquôto_lib_vîsi⁄
(*
maj‹
, *
mö‹
, *
ªvisi⁄
);

264 
libmosq_EXPORT
 
mosquôto_lib_öô
();

277 
libmosq_EXPORT
 
mosquôto_lib_˛ónup
();

314 
libmosq_EXPORT
 
mosquôto
 *
mosquôto_√w
(c⁄° *
id
, 
boﬁ
 
˛ón_£ssi⁄
, *
obj
);

327 
libmosq_EXPORT
 
mosquôto_de°roy
(
mosquôto
 *
mosq
);

357 
libmosq_EXPORT
 
mosquôto_ªöôüli£
(
mosquôto
 *
mosq
, c⁄° *
id
, 
boﬁ
 
˛ón_£ssi⁄
, *
obj
);

392 
libmosq_EXPORT
 
mosquôto_wûl_£t
(
mosquôto
 *
mosq
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
);

435 
libmosq_EXPORT
 
mosquôto_wûl_£t_v5
(
mosquôto
 *
mosq
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
, 
mosquôto_¥›îty
 *
¥›îtõs
);

450 
libmosq_EXPORT
 
mosquôto_wûl_˛ór
(
mosquôto
 *
mosq
);

479 
libmosq_EXPORT
 
mosquôto_u£∫ame_pw_£t
(
mosquôto
 *
mosq
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
);

519 
libmosq_EXPORT
 
mosquôto_c⁄√˘
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
);

550 
libmosq_EXPORT
 
mosquôto_c⁄√˘_böd
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
, c⁄° *
böd_addªss
);

601 
libmosq_EXPORT
 
mosquôto_c⁄√˘_böd_v5
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
, c⁄° *
böd_addªss
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

632 
libmosq_EXPORT
 
mosquôto_c⁄√˘_async
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
);

674 
libmosq_EXPORT
 
mosquôto_c⁄√˘_böd_async
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, 
kì∑live
, c⁄° *
böd_addªss
);

713 
libmosq_EXPORT
 
mosquôto_c⁄√˘_§v
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
kì∑live
, c⁄° *
böd_addªss
);

740 
libmosq_EXPORT
 
mosquôto_ªc⁄√˘
(
mosquôto
 *
mosq
);

767 
libmosq_EXPORT
 
mosquôto_ªc⁄√˘_async
(
mosquôto
 *
mosq
);

786 
libmosq_EXPORT
 
mosquôto_disc⁄√˘
(
mosquôto
 *
mosq
);

817 
libmosq_EXPORT
 
mosquôto_disc⁄√˘_v5
(
mosquôto
 *
mosq
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

869 
libmosq_EXPORT
 
mosquôto_publish
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, c⁄° *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
);

924 
libmosq_EXPORT
 
mosquôto_publish_v5
(

925 
mosquôto
 *
mosq
,

926 *
mid
,

927 c⁄° *
t›ic
,

928 
∑ylﬂdÀn
,

929 c⁄° *
∑ylﬂd
,

930 
qos
,

931 
boﬁ
 
ªèö
,

932 c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

962 
libmosq_EXPORT
 
mosquôto_subs¸ibe
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
sub
, 
qos
);

1004 
libmosq_EXPORT
 
mosquôto_subs¸ibe_v5
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
sub
, 
qos
, 
›ti⁄s
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

1039 
libmosq_EXPORT
 
mosquôto_subs¸ibe_mu…ùÀ
(
mosquôto
 *
mosq
, *
mid
, 
sub_cou¡
, *c⁄° *c⁄° 
sub
, 
qos
, 
›ti⁄s
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

1063 
libmosq_EXPORT
 
mosquôto_unsubs¸ibe
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
sub
);

1107 
libmosq_EXPORT
 
mosquôto_unsubs¸ibe_v5
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
sub
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

1138 
libmosq_EXPORT
 
mosquôto_unsubs¸ibe_mu…ùÀ
(
mosquôto
 *
mosq
, *
mid
, 
sub_cou¡
, *c⁄° *c⁄° 
sub
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

1164 
libmosq_EXPORT
 
mosquôto_mesßge_c›y
(
mosquôto_mesßge
 *
d°
, c⁄° mosquôto_mesßgê*
§c
);

1177 
libmosq_EXPORT
 
mosquôto_mesßge_‰ì
(
mosquôto_mesßge
 **
mesßge
);

1190 
libmosq_EXPORT
 
mosquôto_mesßge_‰ì_c⁄ã¡s
(
mosquôto_mesßge
 *
mesßge
);

1242 
libmosq_EXPORT
 
mosquôto_lo›_f‹evî
(
mosquôto
 *
mosq
, 
timeout
, 
max_∑ckës
);

1262 
libmosq_EXPORT
 
mosquôto_lo›_°¨t
(
mosquôto
 *
mosq
);

1286 
libmosq_EXPORT
 
mosquôto_lo›_°›
(
mosquôto
 *
mosq
, 
boﬁ
 
f‹˚
);

1333 
libmosq_EXPORT
 
mosquôto_lo›
(
mosquôto
 *
mosq
, 
timeout
, 
max_∑ckës
);

1368 
libmosq_EXPORT
 
mosquôto_lo›_ªad
(
mosquôto
 *
mosq
, 
max_∑ckës
);

1398 
libmosq_EXPORT
 
mosquôto_lo›_wrôe
(
mosquôto
 *
mosq
, 
max_∑ckës
);

1422 
libmosq_EXPORT
 
mosquôto_lo›_misc
(
mosquôto
 *
mosq
);

1442 
libmosq_EXPORT
 
mosquôto_sockë
(
mosquôto
 *
mosq
);

1455 
libmosq_EXPORT
 
boﬁ
 
mosquôto_w™t_wrôe
(
mosquôto
 *
mosq
);

1472 
libmosq_EXPORT
 
mosquôto_thªaded_£t
(
mosquôto
 *
mosq
, 
boﬁ
 
thªaded
);

1518 
libmosq_EXPORT
 
mosquôto_›ts_£t
(
mosquôto
 *
mosq
, 
mosq_›t_t
 
›ti⁄
, *
vÆue
);

1576 
libmosq_EXPORT
 
mosquôto_öt_›ti⁄
(
mosquôto
 *
mosq
, 
mosq_›t_t
 
›ti⁄
, 
vÆue
);

1617 
libmosq_EXPORT
 
mosquôto_°rög_›ti⁄
(
mosquôto
 *
mosq
, 
mosq_›t_t
 
›ti⁄
, c⁄° *
vÆue
);

1640 
libmosq_EXPORT
 
mosquôto_void_›ti⁄
(
mosquôto
 *
mosq
, 
mosq_›t_t
 
›ti⁄
, *
vÆue
);

1677 
libmosq_EXPORT
 
mosquôto_ªc⁄√˘_dñay_£t
(
mosquôto
 *
mosq
, 
ªc⁄√˘_dñay
, 
ªc⁄√˘_dñay_max
, 
boﬁ
 
ªc⁄√˘_exp⁄ítül_backoff
);

1705 
libmosq_EXPORT
 
mosquôto_max_öÊight_mesßges_£t
(
mosquôto
 *
mosq
, 
max_öÊight_mesßges
);

1712 
libmosq_EXPORT
 
mosquôto_mesßge_ªåy_£t
(
mosquôto
 *
mosq
, 
mesßge_ªåy
);

1728 
libmosq_EXPORT
 
mosquôto_u£r_d©a_£t
(
mosquôto
 *
mosq
, *
obj
);

1740 
libmosq_EXPORT
 *
mosquôto_u£rd©a
(
mosquôto
 *
mosq
);

1796 
libmosq_EXPORT
 
mosquôto_és_£t
(
mosquôto
 *
mosq
,

1797 c⁄° *
ˇfûe
, c⁄° *
ˇ∑th
,

1798 c⁄° *
˚πfûe
, c⁄° *
keyfûe
,

1799 (*
pw_ˇŒback
)(*
buf
, 
size
, 
rwÊag
, *
u£rd©a
));

1826 
libmosq_EXPORT
 
mosquôto_és_ö£cuª_£t
(
mosquôto
 *
mosq
, 
boﬁ
 
vÆue
);

1860 
libmosq_EXPORT
 
mosquôto_és_›ts_£t
(
mosquôto
 *
mosq
, 
˚π_ªqs
, c⁄° *
és_vîsi⁄
, c⁄° *
cùhîs
);

1887 
libmosq_EXPORT
 
mosquôto_és_psk_£t
(
mosquôto
 *
mosq
, c⁄° *
psk
, c⁄° *
idítôy
, c⁄° *
cùhîs
);

1904 
libmosq_EXPORT
 *
mosquôto_s¶_gë
(
mosquôto
 *
mosq
);

1931 
libmosq_EXPORT
 
mosquôto_c⁄√˘_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_c⁄√˘
)(mosquitto *, *, ));

1953 
libmosq_EXPORT
 
mosquôto_c⁄√˘_wôh_Êags_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_c⁄√˘
)(mosquitto *, *, , ));

1981 
libmosq_EXPORT
 
mosquôto_c⁄√˘_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_c⁄√˘
)(mosquôtÿ*, *, , , c⁄° 
mosquôto_¥›îty
 *
¥›s
));

2001 
libmosq_EXPORT
 
mosquôto_disc⁄√˘_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_disc⁄√˘
)(mosquitto *, *, ));

2026 
libmosq_EXPORT
 
mosquôto_disc⁄√˘_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_disc⁄√˘
)(mosquôtÿ*, *, , c⁄° 
mosquôto_¥›îty
 *
¥›s
));

2052 
libmosq_EXPORT
 
mosquôto_publish_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_publish
)(mosquitto *, *, ));

2087 
libmosq_EXPORT
 
mosquôto_publish_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_publish
)(mosquôtÿ*, *, , , c⁄° 
mosquôto_¥›îty
 *
¥›s
));

2110 
libmosq_EXPORT
 
mosquôto_mesßge_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_mesßge
)(mosquôtÿ*, *, c⁄° 
mosquôto_mesßge
 *));

2138 
libmosq_EXPORT
 
mosquôto_mesßge_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_mesßge
)(mosquôtÿ*, *, c⁄° 
mosquôto_mesßge
 *, c⁄° 
mosquôto_¥›îty
 *
¥›s
));

2159 
libmosq_EXPORT
 
mosquôto_subs¸ibe_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_subs¸ibe
)(mosquitto *, *, , , const *));

2185 
libmosq_EXPORT
 
mosquôto_subs¸ibe_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_subs¸ibe
)(mosquôtÿ*, *, , , c⁄° *, c⁄° 
mosquôto_¥›îty
 *
¥›s
));

2203 
libmosq_EXPORT
 
mosquôto_unsubs¸ibe_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_unsubs¸ibe
)(mosquitto *, *, ));

2226 
libmosq_EXPORT
 
mosquôto_unsubs¸ibe_v5_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_unsubs¸ibe
)(mosquôtÿ*, *, , c⁄° 
mosquôto_¥›îty
 *
¥›s
));

2249 
libmosq_EXPORT
 
mosquôto_log_ˇŒback_£t
(
mosquôto
 *
mosq
, (*
⁄_log
)(mosquitto *, *, , const *));

2274 
libmosq_EXPORT
 
mosquôto_socks5_£t
(
mosquôto
 *
mosq
, c⁄° *
ho°
, 
p‹t
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
);

2295 
libmosq_EXPORT
 c⁄° *
mosquôto_°ªº‹
(
mosq_î∫o
);

2308 
libmosq_EXPORT
 c⁄° *
mosquôto_c⁄«ck_°rög
(
c⁄«ck_code
);

2321 
libmosq_EXPORT
 c⁄° *
mosquôto_ªas⁄_°rög
(
ªas⁄_code
);

2342 
libmosq_EXPORT
 
mosquôto_°rög_to_comm™d
(c⁄° *
°r
, *
cmd
);

2398 
libmosq_EXPORT
 
mosquôto_sub_t›ic_tokíi£
(c⁄° *
subt›ic
, ***
t›ics
, *
cou¡
);

2416 
libmosq_EXPORT
 
mosquôto_sub_t›ic_tokís_‰ì
(***
t›ics
, 
cou¡
);

2439 
libmosq_EXPORT
 
mosquôto_t›ic_m©ches_sub
(c⁄° *
sub
, c⁄° *
t›ic
, 
boﬁ
 *
ªsu…
);

2465 
libmosq_EXPORT
 
mosquôto_t›ic_m©ches_sub2
(c⁄° *
sub
, 
size_t
 
subÀn
, c⁄° *
t›ic
, size_à
t›i˛í
, 
boﬁ
 *
ªsu…
);

2490 
libmosq_EXPORT
 
mosquôto_pub_t›ic_check
(c⁄° *
t›ic
);

2516 
libmosq_EXPORT
 
mosquôto_pub_t›ic_check2
(c⁄° *
t›ic
, 
size_t
 
t›i˛í
);

2544 
libmosq_EXPORT
 
mosquôto_sub_t›ic_check
(c⁄° *
t›ic
);

2573 
libmosq_EXPORT
 
mosquôto_sub_t›ic_check2
(c⁄° *
t›ic
, 
size_t
 
t›i˛í
);

2591 
libmosq_EXPORT
 
mosquôto_vÆid©e_utf8
(c⁄° *
°r
, 
Àn
);

2601 
	slibmosquôto_wûl
 {

2602 *
t›ic
;

2603 *
∑ylﬂd
;

2604 
∑ylﬂdÀn
;

2605 
qos
;

2606 
boﬁ
 
ªèö
;

2609 
	slibmosquôto_auth
 {

2610 *
u£∫ame
;

2611 *
∑ssw‹d
;

2614 
	slibmosquôto_és
 {

2615 *
ˇfûe
;

2616 *
ˇ∑th
;

2617 *
˚πfûe
;

2618 *
keyfûe
;

2619 *
cùhîs
;

2620 *
és_vîsi⁄
;

2621 (*
pw_ˇŒback
)(*
buf
, 
size
, 
rwÊag
, *
u£rd©a
);

2622 
˚π_ªqs
;

2662 
libmosq_EXPORT
 
mosquôto_subs¸ibe_sim∂e
(

2663 
mosquôto_mesßge
 **
mesßges
,

2664 
msg_cou¡
,

2665 
boﬁ
 
w™t_ªèöed
,

2666 c⁄° *
t›ic
,

2667 
qos
,

2668 c⁄° *
ho°
,

2669 
p‹t
,

2670 c⁄° *
˛õ¡_id
,

2671 
kì∑live
,

2672 
boﬁ
 
˛ón_£ssi⁄
,

2673 c⁄° *
u£∫ame
,

2674 c⁄° *
∑ssw‹d
,

2675 c⁄° 
libmosquôto_wûl
 *
wûl
,

2676 c⁄° 
libmosquôto_és
 *
és
);

2715 
libmosq_EXPORT
 
mosquôto_subs¸ibe_ˇŒback
(

2716 (*
ˇŒback
)(
mosquôto
 *, *, c⁄° 
mosquôto_mesßge
 *),

2717 *
u£rd©a
,

2718 c⁄° *
t›ic
,

2719 
qos
,

2720 c⁄° *
ho°
,

2721 
p‹t
,

2722 c⁄° *
˛õ¡_id
,

2723 
kì∑live
,

2724 
boﬁ
 
˛ón_£ssi⁄
,

2725 c⁄° *
u£∫ame
,

2726 c⁄° *
∑ssw‹d
,

2727 c⁄° 
libmosquôto_wûl
 *
wûl
,

2728 c⁄° 
libmosquôto_és
 *
és
);

2761 
libmosq_EXPORT
 
mosquôto_¥›îty_add_byã
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, 
uöt8_t
 
vÆue
);

2785 
libmosq_EXPORT
 
mosquôto_¥›îty_add_öt16
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, 
uöt16_t
 
vÆue
);

2809 
libmosq_EXPORT
 
mosquôto_¥›îty_add_öt32
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, 
uöt32_t
 
vÆue
);

2833 
libmosq_EXPORT
 
mosquôto_¥›îty_add_v¨öt
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, 
uöt32_t
 
vÆue
);

2858 
libmosq_EXPORT
 
mosquôto_¥›îty_add_bö¨y
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, c⁄° *
vÆue
, 
uöt16_t
 
Àn
);

2883 
libmosq_EXPORT
 
mosquôto_¥›îty_add_°rög
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, c⁄° *
vÆue
);

2909 
libmosq_EXPORT
 
mosquôto_¥›îty_add_°rög_∑ú
(
mosquôto_¥›îty
 **
¥›li°
, 
idítifõr
, c⁄° *
«me
, c⁄° *
vÆue
);

2924 
libmosq_EXPORT
 
mosquôto_¥›îty_idítifõr
(c⁄° 
mosquôto_¥›îty
 *
¥›îty
);

2948 
libmosq_EXPORT
 c⁄° 
mosquôto_¥›îty
 *
mosquôto_¥›îty_√xt
(c⁄° mosquôto_¥›îty *
¥›li°
);

2990 
libmosq_EXPORT
 c⁄° 
mosquôto_¥›îty
 *
mosquôto_¥›îty_ªad_byã
(

2991 c⁄° 
mosquôto_¥›îty
 *
¥›li°
,

2992 
idítifõr
,

2993 
uöt8_t
 *
vÆue
,

2994 
boﬁ
 
skù_fú°
);

3015 
libmosq_EXPORT
 c⁄° 
mosquôto_¥›îty
 *
mosquôto_¥›îty_ªad_öt16
(

3016 c⁄° 
mosquôto_¥›îty
 *
¥›li°
,

3017 
idítifõr
,

3018 
uöt16_t
 *
vÆue
,

3019 
boﬁ
 
skù_fú°
);

3040 
libmosq_EXPORT
 c⁄° 
mosquôto_¥›îty
 *
mosquôto_¥›îty_ªad_öt32
(

3041 c⁄° 
mosquôto_¥›îty
 *
¥›li°
,

3042 
idítifõr
,

3043 
uöt32_t
 *
vÆue
,

3044 
boﬁ
 
skù_fú°
);

3065 
libmosq_EXPORT
 c⁄° 
mosquôto_¥›îty
 *
mosquôto_¥›îty_ªad_v¨öt
(

3066 c⁄° 
mosquôto_¥›îty
 *
¥›li°
,

3067 
idítifõr
,

3068 
uöt32_t
 *
vÆue
,

3069 
boﬁ
 
skù_fú°
);

3092 
libmosq_EXPORT
 c⁄° 
mosquôto_¥›îty
 *
mosquôto_¥›îty_ªad_bö¨y
(

3093 c⁄° 
mosquôto_¥›îty
 *
¥›li°
,

3094 
idítifõr
,

3095 **
vÆue
,

3096 
uöt16_t
 *
Àn
,

3097 
boﬁ
 
skù_fú°
);

3121 
libmosq_EXPORT
 c⁄° 
mosquôto_¥›îty
 *
mosquôto_¥›îty_ªad_°rög
(

3122 c⁄° 
mosquôto_¥›îty
 *
¥›li°
,

3123 
idítifõr
,

3124 **
vÆue
,

3125 
boﬁ
 
skù_fú°
);

3151 
libmosq_EXPORT
 c⁄° 
mosquôto_¥›îty
 *
mosquôto_¥›îty_ªad_°rög_∑ú
(

3152 c⁄° 
mosquôto_¥›îty
 *
¥›li°
,

3153 
idítifõr
,

3154 **
«me
,

3155 **
vÆue
,

3156 
boﬁ
 
skù_fú°
);

3171 
libmosq_EXPORT
 
mosquôto_¥›îty_‰ì_Æl
(
mosquôto_¥›îty
 **
¥›îtõs
);

3185 
libmosq_EXPORT
 
mosquôto_¥›îty_c›y_Æl
(
mosquôto_¥›îty
 **
de°
, c⁄° mosquôto_¥›îty *
§c
);

3200 
libmosq_EXPORT
 
mosquôto_¥›îty_check_comm™d
(
comm™d
, 
idítifõr
);

3223 
libmosq_EXPORT
 
mosquôto_¥›îty_check_Æl
(
comm™d
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

3239 
libmosq_EXPORT
 c⁄° *
mosquôto_¥›îty_idítifõr_to_°rög
(
idítifõr
);

3264 
libmosq_EXPORT
 
mosquôto_°rög_to_¥›îty_öfo
(c⁄° *
¥›«me
, *
idítifõr
, *
ty≥
);

3267 #ifde‡
__˝lu•lus


	@open_source_lib/mosquitto/mosquitto/include/mosquitto_broker.h

24 #i‚de‡
MOSQUITTO_BROKER_H


25 
	#MOSQUITTO_BROKER_H


	)

27 #ifde‡
__˝lu•lus


31 #i‡
deföed
(
WIN32
Ë&& deföed(
mosquôto_EXPORTS
)

32 
	#mosq_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

34 
	#mosq_EXPORT


	)

37 
	~<°dboﬁ.h
>

38 
	~<°ddef.h
>

39 
	~<°döt.h
>

40 
	~<time.h
>

42 
mosquôto
;

43 
mqâ5__¥›îty
 
	tmosquôto_¥›îty
;

45 
	emosquôto_¥Ÿocﬁ
 {

46 
mp_mqâ
,

47 
mp_mqâ¢
,

48 
mp_websockës


58 
	emosquôto_∂ugö_evít
 {

59 
MOSQ_EVT_RELOAD
 = 1,

60 
MOSQ_EVT_ACL_CHECK
 = 2,

61 
MOSQ_EVT_BASIC_AUTH
 = 3,

62 
MOSQ_EVT_EXT_AUTH_START
 = 4,

63 
MOSQ_EVT_EXT_AUTH_CONTINUE
 = 5,

64 
MOSQ_EVT_CONTROL
 = 6,

65 
MOSQ_EVT_MESSAGE
 = 7,

66 
MOSQ_EVT_PSK_KEY
 = 8,

67 
MOSQ_EVT_TICK
 = 9,

68 
MOSQ_EVT_DISCONNECT
 = 10,

72 
	smosquôto_evt_ªlﬂd
 {

73 *
futuª
;

74 
mosquôto_›t
 *
›ti⁄s
;

75 
›ti⁄_cou¡
;

76 *
futuª2
[4];

80 
	smosquôto_evt_a˛_check
 {

81 *
futuª
;

82 
mosquôto
 *
˛õ¡
;

83 c⁄° *
t›ic
;

84 c⁄° *
∑ylﬂd
;

85 
mosquôto_¥›îty
 *
¥›îtõs
;

86 
ac˚ss
;

87 
uöt32_t
 
∑ylﬂdÀn
;

88 
uöt8_t
 
qos
;

89 
boﬁ
 
ªèö
;

90 *
futuª2
[4];

94 
	smosquôto_evt_basic_auth
 {

95 *
futuª
;

96 
mosquôto
 *
˛õ¡
;

97 *
u£∫ame
;

98 *
∑ssw‹d
;

99 *
futuª2
[4];

103 
	smosquôto_evt_psk_key
 {

104 *
futuª
;

105 
mosquôto
 *
˛õ¡
;

106 c⁄° *
höt
;

107 c⁄° *
idítôy
;

108 *
key
;

109 
max_key_Àn
;

110 *
futuª2
[4];

114 
	smosquôto_evt_exãnded_auth
 {

115 *
futuª
;

116 
mosquôto
 *
˛õ¡
;

117 c⁄° *
d©a_ö
;

118 *
d©a_out
;

119 
uöt16_t
 
d©a_ö_Àn
;

120 
uöt16_t
 
d©a_out_Àn
;

121 c⁄° *
auth_mëhod
;

122 *
futuª2
[3];

126 
	smosquôto_evt_c⁄åﬁ
 {

127 *
futuª
;

128 
mosquôto
 *
˛õ¡
;

129 c⁄° *
t›ic
;

130 c⁄° *
∑ylﬂd
;

131 c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
;

132 *
ªas⁄_°rög
;

133 
uöt32_t
 
∑ylﬂdÀn
;

134 
uöt8_t
 
qos
;

135 
uöt8_t
 
ªas⁄_code
;

136 
boﬁ
 
ªèö
;

137 *
futuª2
[4];

141 
	smosquôto_evt_mesßge
 {

142 *
futuª
;

143 
mosquôto
 *
˛õ¡
;

144 *
t›ic
;

145 *
∑ylﬂd
;

146 
mosquôto_¥›îty
 *
¥›îtõs
;

147 *
ªas⁄_°rög
;

148 
uöt32_t
 
∑ylﬂdÀn
;

149 
uöt8_t
 
qos
;

150 
uöt8_t
 
ªas⁄_code
;

151 
boﬁ
 
ªèö
;

152 *
futuª2
[4];

157 
	smosquôto_evt_tick
 {

158 *
futuª
;

159 
now_ns
;

160 
√xt_ns
;

161 
time_t
 
now_s
;

162 
time_t
 
√xt_s
;

163 *
futuª2
[4];

167 
	smosquôto_evt_disc⁄√˘
 {

168 *
futuª
;

169 
mosquôto
 *
˛õ¡
;

170 
ªas⁄
;

171 *
futuª2
[4];

176 (*
MOSQ_FUNC_gíîic_ˇŒback
)(, *, *);

178 
mosquôto_∂ugö_id_t
 
	tmosquôto_∂ugö_id_t
;

208 
mosq_EXPORT
 
mosquôto_ˇŒback_ªgi°î
(

209 
mosquôto_∂ugö_id_t
 *
idítifõr
,

210 
evít
,

211 
MOSQ_FUNC_gíîic_ˇŒback
 
cb_func
,

212 c⁄° *
evít_d©a
,

213 *
u£rd©a
);

242 
mosq_EXPORT
 
mosquôto_ˇŒback_uƒegi°î
(

243 
mosquôto_∂ugö_id_t
 *
idítifõr
,

244 
evít
,

245 
MOSQ_FUNC_gíîic_ˇŒback
 
cb_func
,

246 c⁄° *
evít_d©a
);

261 
mosq_EXPORT
 *
mosquôto_ˇŒoc
(
size_t
 
nmemb
, size_à
size
);

266 
mosq_EXPORT
 
mosquôto_‰ì
(*
mem
);

271 
mosq_EXPORT
 *
mosquôto_mÆloc
(
size_t
 
size
);

276 
mosq_EXPORT
 *
mosquôto_ªÆloc
(*
±r
, 
size_t
 
size
);

281 
mosq_EXPORT
 *
mosquôto_°rdup
(c⁄° *
s
);

312 
mosq_EXPORT
 
mosquôto_log_¥ötf
(
Àvñ
, c⁄° *
fmt
, ...);

328 
mosq_EXPORT
 c⁄° *
mosquôto_˛õ¡_addªss
(c⁄° 
mosquôto
 *
˛õ¡
);

336 
mosq_EXPORT
 
boﬁ
 
mosquôto_˛õ¡_˛ón_£ssi⁄
(c⁄° 
mosquôto
 *
˛õ¡
);

344 
mosq_EXPORT
 c⁄° *
mosquôto_˛õ¡_id
(c⁄° 
mosquôto
 *
˛õ¡
);

352 
mosq_EXPORT
 
mosquôto_˛õ¡_kì∑live
(c⁄° 
mosquôto
 *
˛õ¡
);

368 
mosq_EXPORT
 *
mosquôto_˛õ¡_˚πifiˇã
(c⁄° 
mosquôto
 *
˛õ¡
);

380 
mosq_EXPORT
 
mosquôto_˛õ¡_¥Ÿocﬁ
(c⁄° 
mosquôto
 *
˛õ¡
);

393 
mosq_EXPORT
 
mosquôto_˛õ¡_¥Ÿocﬁ_vîsi⁄
(c⁄° 
mosquôto
 *
˛õ¡
);

401 
mosq_EXPORT
 
mosquôto_˛õ¡_sub_cou¡
(c⁄° 
mosquôto
 *
˛õ¡
);

409 
mosq_EXPORT
 c⁄° *
mosquôto_˛õ¡_u£∫ame
(c⁄° 
mosquôto
 *
˛õ¡
);

429 
mosq_EXPORT
 
mosquôto_£t_u£∫ame
(
mosquôto
 *
˛õ¡
, c⁄° *
u£∫ame
);

449 
mosq_EXPORT
 
mosquôto_kick_˛õ¡_by_˛õ¡id
(c⁄° *
˛õ¡id
, 
boﬁ
 
wôh_wûl
);

463 
mosq_EXPORT
 
mosquôto_kick_˛õ¡_by_u£∫ame
(c⁄° *
u£∫ame
, 
boﬁ
 
wôh_wûl
);

509 
mosq_EXPORT
 
mosquôto_brokî_publish
(

510 c⁄° *
˛õ¡id
,

511 c⁄° *
t›ic
,

512 
∑ylﬂdÀn
,

513 *
∑ylﬂd
,

514 
qos
,

515 
boﬁ
 
ªèö
,

516 
mosquôto_¥›îty
 *
¥›îtõs
);

548 
mosq_EXPORT
 
mosquôto_brokî_publish_c›y
(

549 c⁄° *
˛õ¡id
,

550 c⁄° *
t›ic
,

551 
∑ylﬂdÀn
,

552 c⁄° *
∑ylﬂd
,

553 
qos
,

554 
boﬁ
 
ªèö
,

555 
mosquôto_¥›îty
 *
¥›îtõs
);

557 #ifde‡
__˝lu•lus


	@open_source_lib/mosquitto/mosquitto/include/mosquitto_plugin.h

19 #i‚de‡
MOSQUITTO_PLUGIN_H


20 
	#MOSQUITTO_PLUGIN_H


	)

28 #ifde‡
__˝lu•lus


33 
	#MOSQ_PLUGIN_VERSION
 5

	)

36 
	#MOSQ_AUTH_PLUGIN_VERSION
 4

	)

38 
	#MOSQ_ACL_NONE
 0x00

	)

39 
	#MOSQ_ACL_READ
 0x01

	)

40 
	#MOSQ_ACL_WRITE
 0x02

	)

41 
	#MOSQ_ACL_SUBSCRIBE
 0x04

	)

42 
	#MOSQ_ACL_UNSUBSCRIBE
 0x08

	)

44 
	~<°dboﬁ.h
>

45 
	~<°döt.h
>

47 
	~<mosquôto_brokî.h
>

49 
mosquôto
;

51 
	smosquôto_›t
 {

52 *
key
;

53 *
vÆue
;

56 
	smosquôto_auth_›t
 {

57 *
key
;

58 *
vÆue
;

61 
	smosquôto_a˛_msg
 {

62 c⁄° *
t›ic
;

63 c⁄° *
∑ylﬂd
;

64 
∑ylﬂdÀn
;

65 
qos
;

66 
boﬁ
 
ªèö
;

69 #ifde‡
WIN32


70 
	#mosq_∂ugö_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

72 
	#mosq_∂ugö_EXPORT


	)

146 
mosq_∂ugö_EXPORT
 
mosquôto_∂ugö_vîsi⁄
(
suµ‹ãd_vîsi⁄_cou¡
, c⁄° *
suµ‹ãd_vîsi⁄s
);

169 
mosq_∂ugö_EXPORT
 
mosquôto_∂ugö_öô
(
mosquôto_∂ugö_id_t
 *
idítifõr
, **
u£rd©a
, 
mosquôto_›t
 *
›ti⁄s
, 
›ti⁄_cou¡
);

189 
mosq_∂ugö_EXPORT
 
mosquôto_∂ugö_˛ónup
(*
u£rd©a
, 
mosquôto_›t
 *
›ti⁄s
, 
›ti⁄_cou¡
);

212 
mosq_∂ugö_EXPORT
 
mosquôto_auth_∂ugö_vîsi⁄
();

234 
mosq_∂ugö_EXPORT
 
mosquôto_auth_∂ugö_öô
(**
u£r_d©a
, 
mosquôto_›t
 *
›ts
, 
›t_cou¡
);

256 
mosq_∂ugö_EXPORT
 
mosquôto_auth_∂ugö_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
›ts
, 
›t_cou¡
);

284 
mosq_∂ugö_EXPORT
 
mosquôto_auth_£curôy_öô
(*
u£r_d©a
, 
mosquôto_›t
 *
›ts
, 
›t_cou¡
, 
boﬁ
 
ªlﬂd
);

312 
mosq_∂ugö_EXPORT
 
mosquôto_auth_£curôy_˛ónup
(*
u£r_d©a
, 
mosquôto_›t
 *
›ts
, 
›t_cou¡
, 
boﬁ
 
ªlﬂd
);

339 
mosq_∂ugö_EXPORT
 
mosquôto_auth_a˛_check
(*
u£r_d©a
, 
ac˚ss
, 
mosquôto
 *
˛õ¡
, c⁄° 
mosquôto_a˛_msg
 *
msg
);

356 
mosq_∂ugö_EXPORT
 
mosquôto_auth_u≈wd_check
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
);

384 
mosq_∂ugö_EXPORT
 
mosquôto_auth_psk_key_gë
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
höt
, c⁄° *
idítôy
, *
key
, 
max_key_Àn
);

411 
mosq_∂ugö_EXPORT
 
mosquôto_auth_°¨t
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
mëhod
, 
boﬁ
 
ªauth
, c⁄° *
d©a_ö
, 
uöt16_t
 
d©a_ö_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
);

413 
mosq_∂ugö_EXPORT
 
mosquôto_auth_c⁄töue
(*
u£r_d©a
, 
mosquôto
 *
˛õ¡
, c⁄° *
mëhod
, c⁄° *
d©a_ö
, 
uöt16_t
 
d©a_ö_Àn
, **
d©a_out
, uöt16_à*
d©a_out_Àn
);

416 #ifde‡
__˝lu•lus


	@open_source_lib/mosquitto/mosquitto/include/mosquittopp.h

17 #i‚de‡
MOSQUITTOPP_H


18 
	#MOSQUITTOPP_H


	)

20 #i‡
deföed
(
_WIN32
Ë&& !deföed(
LIBMOSQUITTO_STATIC
)

21 #ifde‡
mosquôt›p_EXPORTS


22 
	#mosqµ_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

24 
	#mosqµ_EXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

27 
	#mosqµ_EXPORT


	)

30 
	~<c°dlib
>

31 
	~<mosquôto.h
>

32 
	~<time.h
>

34 
«me•a˚
 
	gmosqµ
 {

37 
mosqµ_EXPORT
 c⁄° * 
°ªº‹
(
mosq_î∫o
);

38 
mosqµ_EXPORT
 c⁄° * 
c⁄«ck_°rög
(
c⁄«ck_code
);

39 
mosqµ_EXPORT
 
sub_t›ic_tokíi£
(c⁄° *
subt›ic
, ***
t›ics
, *
cou¡
);

40 
mosqµ_EXPORT
 
sub_t›ic_tokís_‰ì
(***
t›ics
, 
cou¡
);

41 
mosqµ_EXPORT
 
lib_vîsi⁄
(*
maj‹
, *
mö‹
, *
ªvisi⁄
);

42 
mosqµ_EXPORT
 
lib_öô
();

43 
mosqµ_EXPORT
 
lib_˛ónup
();

44 
mosqµ_EXPORT
 
t›ic_m©ches_sub
(c⁄° *
sub
, c⁄° *
t›ic
, 
boﬁ
 *
ªsu…
);

45 
mosqµ_EXPORT
 
vÆid©e_utf8
(c⁄° *
°r
, 
Àn
);

46 
mosqµ_EXPORT
 
subs¸ibe_sim∂e
(

47 
mosquôto_mesßge
 **
mesßges
,

48 
msg_cou¡
,

49 
boﬁ
 
ªèöed
,

50 c⁄° *
t›ic
,

51 
qos
=0,

52 c⁄° *
ho°
="localhost",

53 
p‹t
=1883,

54 c⁄° *
˛õ¡_id
=
NULL
,

55 
kì∑live
=60,

56 
boﬁ
 
˛ón_£ssi⁄
=
åue
,

57 c⁄° *
u£∫ame
=
NULL
,

58 c⁄° *
∑ssw‹d
=
NULL
,

59 c⁄° 
libmosquôto_wûl
 *
wûl
=
NULL
,

60 c⁄° 
libmosquôto_és
 *
és
=
NULL
);

62 
mosqµ_EXPORT
 
subs¸ibe_ˇŒback
(

63 (*
ˇŒback
)(
mosquôto
 *, *, c⁄° 
mosquôto_mesßge
 *),

64 *
u£rd©a
,

65 c⁄° *
t›ic
,

66 
qos
=0,

67 c⁄° *
ho°
="localhost",

68 
p‹t
=1883,

69 c⁄° *
˛õ¡_id
=
NULL
,

70 
kì∑live
=60,

71 
boﬁ
 
˛ón_£ssi⁄
=
åue
,

72 c⁄° *
u£∫ame
=
NULL
,

73 c⁄° *
∑ssw‹d
=
NULL
,

74 c⁄° 
libmosquôto_wûl
 *
wûl
=
NULL
,

75 c⁄° 
libmosquôto_és
 *
és
=
NULL
);

83 ˛as†
	cmosqµ_EXPORT
 
	gmosquôt›p
 {

84 
	g¥iv©e
:

85 
mosquôto
 *
m_mosq
;

86 
	gpublic
:

87 
mosquôt›p
(c⁄° *
id
=
NULL
, 
boﬁ
 
˛ón_£ssi⁄
=
åue
);

88 
	gvútuÆ
 ~
mosquôt›p
();

90 
ªöôüli£
(c⁄° *
id
, 
boﬁ
 
˛ón_£ssi⁄
);

91 
sockë
();

92 
wûl_£t
(c⁄° *
t›ic
, 
∑ylﬂdÀn
=0, c⁄° *
∑ylﬂd
=
NULL
, 
qos
=0, 
boﬁ
 
ªèö
=
Ál£
);

93 
wûl_˛ór
();

94 
u£∫ame_pw_£t
(c⁄° *
u£∫ame
, c⁄° *
∑ssw‹d
=
NULL
);

95 
c⁄√˘
(c⁄° *
ho°
, 
p‹t
=1883, 
kì∑live
=60);

96 
c⁄√˘_async
(c⁄° *
ho°
, 
p‹t
=1883, 
kì∑live
=60);

97 
c⁄√˘
(c⁄° *
ho°
, 
p‹t
, 
kì∑live
, c⁄° *
böd_addªss
);

98 
c⁄√˘_async
(c⁄° *
ho°
, 
p‹t
, 
kì∑live
, c⁄° *
böd_addªss
);

99 
ªc⁄√˘
();

100 
ªc⁄√˘_async
();

101 
disc⁄√˘
();

102 
publish
(*
mid
, c⁄° *
t›ic
, 
∑ylﬂdÀn
=0, c⁄° *
∑ylﬂd
=
NULL
, 
qos
=0, 
boﬁ
 
ªèö
=
Ál£
);

103 
subs¸ibe
(*
mid
, c⁄° *
sub
, 
qos
=0);

104 
unsubs¸ibe
(*
mid
, c⁄° *
sub
);

105 
ªc⁄√˘_dñay_£t
(
ªc⁄√˘_dñay
, 
ªc⁄√˘_dñay_max
, 
boﬁ
 
ªc⁄√˘_exp⁄ítül_backoff
);

106 
max_öÊight_mesßges_£t
(
max_öÊight_mesßges
);

107 
mesßge_ªåy_£t
(
mesßge_ªåy
);

108 
u£r_d©a_£t
(*
u£rd©a
);

109 
és_£t
(c⁄° *
ˇfûe
, c⁄° *
ˇ∑th
=
NULL
, c⁄° *
˚πfûe
=NULL, c⁄° *
keyfûe
=NULL, (*
pw_ˇŒback
)(*
buf
, 
size
, 
rwÊag
, *
u£rd©a
)=NULL);

110 
és_›ts_£t
(
˚π_ªqs
, c⁄° *
és_vîsi⁄
=
NULL
, c⁄° *
cùhîs
=NULL);

111 
és_ö£cuª_£t
(
boﬁ
 
vÆue
);

112 
és_psk_£t
(c⁄° *
psk
, c⁄° *
idítôy
, c⁄° *
cùhîs
=
NULL
);

113 
›ts_£t
(
mosq_›t_t
 
›ti⁄
, *
vÆue
);

115 
lo›
(
timeout
=-1, 
max_∑ckës
=1);

116 
lo›_misc
();

117 
lo›_ªad
(
max_∑ckës
=1);

118 
lo›_wrôe
(
max_∑ckës
=1);

119 
lo›_f‹evî
(
timeout
=-1, 
max_∑ckës
=1);

120 
lo›_°¨t
();

121 
lo›_°›
(
boﬁ
 
f‹˚
=
Ál£
);

122 
boﬁ
 
w™t_wrôe
();

123 
thªaded_£t
(
boﬁ
 
thªaded
=
åue
);

124 
socks5_£t
(c⁄° *
ho°
, 
p‹t
=1080, c⁄° *
u£∫ame
=
NULL
, c⁄° *
∑ssw‹d
=NULL);

127 
vútuÆ
 
⁄_c⁄√˘
() {;}

128 
vútuÆ
 
⁄_c⁄√˘_wôh_Êags
(, ) {;}

129 
vútuÆ
 
⁄_disc⁄√˘
() {;}

130 
vútuÆ
 
⁄_publish
() {;}

131 
vútuÆ
 
⁄_mesßge
(c⁄° 
mosquôto_mesßge
 * ) {;}

132 
vútuÆ
 
⁄_subs¸ibe
(, , const * ) {;}

133 
vútuÆ
 
⁄_unsubs¸ibe
() {;}

134 
vútuÆ
 
⁄_log
(, const * ) {;}

135 
vútuÆ
 
⁄_îr‹
() {;}

	@open_source_lib/mosquitto/mosquitto/include/mqtt_protocol.h

19 #i‚de‡
MQTT_PROTOCOL_H


20 
	#MQTT_PROTOCOL_H


	)

27 
	#PROTOCOL_NAME_v31
 "MQIsdp"

	)

28 
	#PROTOCOL_VERSION_v31
 3

	)

30 
	#PROTOCOL_NAME
 "MQTT"

	)

32 
	#PROTOCOL_VERSION_v311
 4

	)

33 
	#PROTOCOL_VERSION_v5
 5

	)

37 
	#CMD_CONNECT
 0x10U

	)

38 
	#CMD_CONNACK
 0x20U

	)

39 
	#CMD_PUBLISH
 0x30U

	)

40 
	#CMD_PUBACK
 0x40U

	)

41 
	#CMD_PUBREC
 0x50U

	)

42 
	#CMD_PUBREL
 0x60U

	)

43 
	#CMD_PUBCOMP
 0x70U

	)

44 
	#CMD_SUBSCRIBE
 0x80U

	)

45 
	#CMD_SUBACK
 0x90U

	)

46 
	#CMD_UNSUBSCRIBE
 0xA0U

	)

47 
	#CMD_UNSUBACK
 0xB0U

	)

48 
	#CMD_PINGREQ
 0xC0U

	)

49 
	#CMD_PINGRESP
 0xD0U

	)

50 
	#CMD_DISCONNECT
 0xE0U

	)

51 
	#CMD_AUTH
 0xF0U

	)

54 
	#CMD_WILL
 0x100

	)

68 
	emqâ311_c⁄«ck_codes
 {

69 
	mCONNACK_ACCEPTED
 = 0,

70 
	mCONNACK_REFUSED_PROTOCOL_VERSION
 = 1,

71 
	mCONNACK_REFUSED_IDENTIFIER_REJECTED
 = 2,

72 
	mCONNACK_REFUSED_SERVER_UNAVAILABLE
 = 3,

73 
	mCONNACK_REFUSED_BAD_USERNAME_PASSWORD
 = 4,

74 
	mCONNACK_REFUSED_NOT_AUTHORIZED
 = 5,

127 
	emqâ5_ªtu∫_codes
 {

128 
	mMQTT_RC_SUCCESS
 = 0,

129 
	mMQTT_RC_NORMAL_DISCONNECTION
 = 0,

130 
	mMQTT_RC_GRANTED_QOS0
 = 0,

131 
	mMQTT_RC_GRANTED_QOS1
 = 1,

132 
	mMQTT_RC_GRANTED_QOS2
 = 2,

133 
	mMQTT_RC_DISCONNECT_WITH_WILL_MSG
 = 4,

134 
	mMQTT_RC_NO_MATCHING_SUBSCRIBERS
 = 16,

135 
	mMQTT_RC_NO_SUBSCRIPTION_EXISTED
 = 17,

136 
	mMQTT_RC_CONTINUE_AUTHENTICATION
 = 24,

137 
	mMQTT_RC_REAUTHENTICATE
 = 25,

139 
	mMQTT_RC_UNSPECIFIED
 = 128,

140 
	mMQTT_RC_MALFORMED_PACKET
 = 129,

141 
	mMQTT_RC_PROTOCOL_ERROR
 = 130,

142 
	mMQTT_RC_IMPLEMENTATION_SPECIFIC
 = 131,

143 
	mMQTT_RC_UNSUPPORTED_PROTOCOL_VERSION
 = 132,

144 
	mMQTT_RC_CLIENTID_NOT_VALID
 = 133,

145 
	mMQTT_RC_BAD_USERNAME_OR_PASSWORD
 = 134,

146 
	mMQTT_RC_NOT_AUTHORIZED
 = 135,

147 
	mMQTT_RC_SERVER_UNAVAILABLE
 = 136,

148 
	mMQTT_RC_SERVER_BUSY
 = 137,

149 
	mMQTT_RC_BANNED
 = 138,

150 
	mMQTT_RC_SERVER_SHUTTING_DOWN
 = 139,

151 
	mMQTT_RC_BAD_AUTHENTICATION_METHOD
 = 140,

152 
	mMQTT_RC_KEEP_ALIVE_TIMEOUT
 = 141,

153 
	mMQTT_RC_SESSION_TAKEN_OVER
 = 142,

154 
	mMQTT_RC_TOPIC_FILTER_INVALID
 = 143,

155 
	mMQTT_RC_TOPIC_NAME_INVALID
 = 144,

156 
	mMQTT_RC_PACKET_ID_IN_USE
 = 145,

157 
	mMQTT_RC_PACKET_ID_NOT_FOUND
 = 146,

158 
	mMQTT_RC_RECEIVE_MAXIMUM_EXCEEDED
 = 147,

159 
	mMQTT_RC_TOPIC_ALIAS_INVALID
 = 148,

160 
	mMQTT_RC_PACKET_TOO_LARGE
 = 149,

161 
	mMQTT_RC_MESSAGE_RATE_TOO_HIGH
 = 150,

162 
	mMQTT_RC_QUOTA_EXCEEDED
 = 151,

163 
	mMQTT_RC_ADMINISTRATIVE_ACTION
 = 152,

164 
	mMQTT_RC_PAYLOAD_FORMAT_INVALID
 = 153,

165 
	mMQTT_RC_RETAIN_NOT_SUPPORTED
 = 154,

166 
	mMQTT_RC_QOS_NOT_SUPPORTED
 = 155,

167 
	mMQTT_RC_USE_ANOTHER_SERVER
 = 156,

168 
	mMQTT_RC_SERVER_MOVED
 = 157,

169 
	mMQTT_RC_SHARED_SUBS_NOT_SUPPORTED
 = 158,

170 
	mMQTT_RC_CONNECTION_RATE_EXCEEDED
 = 159,

171 
	mMQTT_RC_MAXIMUM_CONNECT_TIME
 = 160,

172 
	mMQTT_RC_SUBSCRIPTION_IDS_NOT_SUPPORTED
 = 161,

173 
	mMQTT_RC_WILDCARD_SUBS_NOT_SUPPORTED
 = 162,

208 
	emqâ5_¥›îty
 {

209 
	mMQTT_PROP_PAYLOAD_FORMAT_INDICATOR
 = 1,

210 
	mMQTT_PROP_MESSAGE_EXPIRY_INTERVAL
 = 2,

211 
	mMQTT_PROP_CONTENT_TYPE
 = 3,

212 
	mMQTT_PROP_RESPONSE_TOPIC
 = 8,

213 
	mMQTT_PROP_CORRELATION_DATA
 = 9,

214 
	mMQTT_PROP_SUBSCRIPTION_IDENTIFIER
 = 11,

215 
	mMQTT_PROP_SESSION_EXPIRY_INTERVAL
 = 17,

216 
	mMQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
 = 18,

217 
	mMQTT_PROP_SERVER_KEEP_ALIVE
 = 19,

218 
	mMQTT_PROP_AUTHENTICATION_METHOD
 = 21,

219 
	mMQTT_PROP_AUTHENTICATION_DATA
 = 22,

220 
	mMQTT_PROP_REQUEST_PROBLEM_INFORMATION
 = 23,

221 
	mMQTT_PROP_WILL_DELAY_INTERVAL
 = 24,

222 
	mMQTT_PROP_REQUEST_RESPONSE_INFORMATION
 = 25,

223 
	mMQTT_PROP_RESPONSE_INFORMATION
 = 26,

224 
	mMQTT_PROP_SERVER_REFERENCE
 = 28,

225 
	mMQTT_PROP_REASON_STRING
 = 31,

226 
	mMQTT_PROP_RECEIVE_MAXIMUM
 = 33,

227 
	mMQTT_PROP_TOPIC_ALIAS_MAXIMUM
 = 34,

228 
	mMQTT_PROP_TOPIC_ALIAS
 = 35,

229 
	mMQTT_PROP_MAXIMUM_QOS
 = 36,

230 
	mMQTT_PROP_RETAIN_AVAILABLE
 = 37,

231 
	mMQTT_PROP_USER_PROPERTY
 = 38,

232 
	mMQTT_PROP_MAXIMUM_PACKET_SIZE
 = 39,

233 
	mMQTT_PROP_WILDCARD_SUB_AVAILABLE
 = 40,

234 
	mMQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
 = 41,

235 
	mMQTT_PROP_SHARED_SUB_AVAILABLE
 = 42,

238 
	emqâ5_¥›îty_ty≥
 {

239 
	mMQTT_PROP_TYPE_BYTE
 = 1,

240 
	mMQTT_PROP_TYPE_INT16
 = 2,

241 
	mMQTT_PROP_TYPE_INT32
 = 3,

242 
	mMQTT_PROP_TYPE_VARINT
 = 4,

243 
	mMQTT_PROP_TYPE_BINARY
 = 5,

244 
	mMQTT_PROP_TYPE_STRING
 = 6,

245 
	mMQTT_PROP_TYPE_STRING_PAIR
 = 7

272 
	emqâ5_sub_›ti⁄s
 {

273 
	mMQTT_SUB_OPT_NO_LOCAL
 = 0x04,

274 
	mMQTT_SUB_OPT_RETAIN_AS_PUBLISHED
 = 0x08,

275 
	mMQTT_SUB_OPT_SEND_RETAIN_ALWAYS
 = 0x00,

276 
	mMQTT_SUB_OPT_SEND_RETAIN_NEW
 = 0x10,

277 
	mMQTT_SUB_OPT_SEND_RETAIN_NEVER
 = 0x20,

280 
	#MQTT_MAX_PAYLOAD
 268435455U

	)

	@src/cJSON.c

27 #i‡!
deföed
(
_CRT_SECURE_NO_DEPRECATE
Ë&& deföed(
_MSC_VER
)

28 
	#_CRT_SECURE_NO_DEPRECATE


	)

31 #ifde‡
__GNUC__


32 #¥agm®
GCC
 
visibûôy
 
push
()

34 #i‡
deföed
(
_MSC_VER
)

35 #¥agm®
w¨nög
 (
push
)

37 #¥agm®
w¨nög
 (
dißbÀ
 : 4001)

40 
	~<°rög.h
>

41 
	~<°dio.h
>

42 
	~<m©h.h
>

43 
	~<°dlib.h
>

44 
	~<limôs.h
>

45 
	~<˘y≥.h
>

46 
	~<Êﬂt.h
>

48 #ifde‡
ENABLE_LOCALES


49 
	~<loˇÀ.h
>

52 #i‡
deföed
(
_MSC_VER
)

53 #¥agm®
w¨nög
 (
p›
)

55 #ifde‡
__GNUC__


56 #¥agm®
GCC
 
visibûôy
 
p›


59 
	~"cJSON.h
"

62 #ifde‡
åue


63 #unde‡
åue


65 
	#åue
 ((
cJSON_boﬁ
)1)

	)

67 #ifde‡
Ál£


68 #unde‡
Ál£


70 
	#Ál£
 ((
cJSON_boﬁ
)0)

	)

73 #i‚de‡
isöf


74 
	#isöf
(
d
Ë(
	`i¢™
((d - d)Ë&& !i¢™(d))

	)

76 #i‚de‡
i¢™


77 
	#i¢™
(
d
Ë(d !d)

	)

80 #i‚de‡
NAN


81 #ifde‡
_WIN32


82 
	#NAN
 
	`sqπ
(-1.0)

	)

84 
	#NAN
 0.0/0.0

	)

89 c⁄° *
	mjs⁄
;

90 
size_t
 
	mposôi⁄
;

91 } 
	tîr‹
;

92 
îr‹
 
	gglobÆ_îr‹
 = { 
NULL
, 0 };

94 
	$CJSON_PUBLIC
(c⁄° *Ë
	$cJSON_GëEº‹På
()

96  (c⁄° *Ë(
globÆ_îr‹
.
js⁄
 + globÆ_îr‹.
posôi⁄
);

97 
	}
}

99 
	$CJSON_PUBLIC
(*Ë
	$cJSON_GëSåögVÆue
(c⁄° 
cJSON
 * c⁄° 
ôem
)

101 i‡(!
	`cJSON_IsSåög
(
ôem
))

103  
NULL
;

106  
ôem
->
vÆue°rög
;

107 
	}
}

109 
	$CJSON_PUBLIC
(Ë
	$cJSON_GëNumbîVÆue
(c⁄° 
cJSON
 * c⁄° 
ôem
)

111 i‡(!
	`cJSON_IsNumbî
(
ôem
))

113  (Ë
NAN
;

116  
ôem
->
vÆuedoubÀ
;

117 
	}
}

120 #i‡(
CJSON_VERSION_MAJOR
 !1Ë|| (
CJSON_VERSION_MINOR
 !7Ë|| (
CJSON_VERSION_PATCH
 != 15)

121 #îr‹ 
cJSON
.
h
 
™d
 cJSON.
c
 
have
 
dif„ª¡
 
vîsi⁄s
. 
Make
 
suª
 
th©
 
bŸh
 havê
the
 
ßme
.

124 
	$CJSON_PUBLIC
(c⁄° *Ë
	$cJSON_Vîsi⁄
()

126 
vîsi⁄
[15];

127 
	`•rötf
(
vîsi⁄
, "%i.%i.%i", 
CJSON_VERSION_MAJOR
, 
CJSON_VERSION_MINOR
, 
CJSON_VERSION_PATCH
);

129  
vîsi⁄
;

130 
	}
}

133 
	$ˇ£_ö£nsôive_°rcmp
(c⁄° *
°rög1
, c⁄° *
°rög2
)

135 i‡((
°rög1
 =
NULL
Ë|| (
°rög2
 == NULL))

140 i‡(
°rög1
 =
°rög2
)

145 ; 
	`tﬁowî
(*
°rög1
Ë=tﬁowî(*
°rög2
); ()string1++, string2++)

147 i‡(*
°rög1
 == '\0')

153  
	`tﬁowî
(*
°rög1
Ë-Åﬁowî(*
°rög2
);

154 
	}
}

156 
	söã∫Æ_hooks


158 *(
CJSON_CDECL
 *
	mÆloˇã
)(
size_t
 
	msize
);

159 (
CJSON_CDECL
 *
	mdóŒoˇã
)(*
	mpoöãr
);

160 *(
CJSON_CDECL
 *
	mªÆloˇã
)(*
	mpoöãr
, 
size_t
 
	msize
);

161 } 
	töã∫Æ_hooks
;

163 #i‡
deföed
(
_MSC_VER
)

165 * 
CJSON_CDECL
 
	$öã∫Æ_mÆloc
(
size_t
 
size
)

167  
	`mÆloc
(
size
);

168 
	}
}

169 
CJSON_CDECL
 
	$öã∫Æ_‰ì
(*
poöãr
)

171 
	`‰ì
(
poöãr
);

172 
	}
}

173 * 
CJSON_CDECL
 
	$öã∫Æ_ªÆloc
(*
poöãr
, 
size_t
 
size
)

175  
	`ªÆloc
(
poöãr
, 
size
);

176 
	}
}

178 
	#öã∫Æ_mÆloc
 
mÆloc


	)

179 
	#öã∫Æ_‰ì
 
‰ì


	)

180 
	#öã∫Æ_ªÆloc
 
ªÆloc


	)

184 
	#°©ic_°æí
(
°rög_lôîÆ
Ë((°rög_lôîÆË- (""))

	)

186 
öã∫Æ_hooks
 
	gglobÆ_hooks
 = { 
öã∫Æ_mÆloc
, 
öã∫Æ_‰ì
, 
öã∫Æ_ªÆloc
 };

188 * 
	$cJSON_°rdup
(c⁄° * 
°rög
, c⁄° 
öã∫Æ_hooks
 * c⁄° 
hooks
)

190 
size_t
 
Àngth
 = 0;

191 *
c›y
 = 
NULL
;

193 i‡(
°rög
 =
NULL
)

195  
NULL
;

198 
Àngth
 = 
	`°æí
((c⁄° *)
°rög
) + ("");

199 
c›y
 = (*)
hooks
->
	`Æloˇã
(
Àngth
);

200 i‡(
c›y
 =
NULL
)

202  
NULL
;

204 
	`mem˝y
(
c›y
, 
°rög
, 
Àngth
);

206  
c›y
;

207 
	}
}

209 
	$CJSON_PUBLIC
(Ë
	$cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
)

211 i‡(
hooks
 =
NULL
)

214 
globÆ_hooks
.
Æloˇã
 = 
mÆloc
;

215 
globÆ_hooks
.
dóŒoˇã
 = 
‰ì
;

216 
globÆ_hooks
.
ªÆloˇã
 = 
ªÆloc
;

220 
globÆ_hooks
.
Æloˇã
 = 
mÆloc
;

221 i‡(
hooks
->
mÆloc_‚
 !
NULL
)

223 
globÆ_hooks
.
Æloˇã
 = 
hooks
->
mÆloc_‚
;

226 
globÆ_hooks
.
dóŒoˇã
 = 
‰ì
;

227 i‡(
hooks
->
‰ì_‚
 !
NULL
)

229 
globÆ_hooks
.
dóŒoˇã
 = 
hooks
->
‰ì_‚
;

233 
globÆ_hooks
.
ªÆloˇã
 = 
NULL
;

234 i‡((
globÆ_hooks
.
Æloˇã
 =
mÆloc
Ë&& (globÆ_hooks.
dóŒoˇã
 =
‰ì
))

236 
globÆ_hooks
.
ªÆloˇã
 = 
ªÆloc
;

238 
	}
}

241 
cJSON
 *
	$cJSON_New_Iãm
(c⁄° 
öã∫Æ_hooks
 * c⁄° 
hooks
)

243 
cJSON
* 
node
 = (cJSON*)
hooks
->
	`Æloˇã
((cJSON));

244 i‡(
node
)

246 
	`mem£t
(
node
, '\0', (
cJSON
));

249  
node
;

250 
	}
}

253 
	$CJSON_PUBLIC
(Ë
	$cJSON_Dñëe
(
cJSON
 *
ôem
)

255 
cJSON
 *
√xt
 = 
NULL
;

256 
ôem
 !
NULL
)

258 
√xt
 = 
ôem
->next;

259 i‡(!(
ôem
->
ty≥
 & 
cJSON_IsRe„ªn˚
Ë&& (ôem->
chûd
 !
NULL
))

261 
	`cJSON_Dñëe
(
ôem
->
chûd
);

263 i‡(!(
ôem
->
ty≥
 & 
cJSON_IsRe„ªn˚
Ë&& (ôem->
vÆue°rög
 !
NULL
))

265 
globÆ_hooks
.
	`dóŒoˇã
(
ôem
->
vÆue°rög
);

267 i‡(!(
ôem
->
ty≥
 & 
cJSON_SåögIsC⁄°
Ë&& (ôem->
°rög
 !
NULL
))

269 
globÆ_hooks
.
	`dóŒoˇã
(
ôem
->
°rög
);

271 
globÆ_hooks
.
	`dóŒoˇã
(
ôem
);

272 
ôem
 = 
√xt
;

274 
	}
}

277 
	$gë_decimÆ_poöt
()

279 #ifde‡
ENABLE_LOCALES


280 
lc⁄v
 *lc⁄v = 
	`loˇÀc⁄v
();

281  (Ë
lc⁄v
->
decimÆ_poöt
[0];

285 
	}
}

289 c⁄° *
	mc⁄ã¡
;

290 
size_t
 
	mÀngth
;

291 
size_t
 
	moff£t
;

292 
size_t
 
	mdïth
;

293 
öã∫Æ_hooks
 
	mhooks
;

294 } 
	t∑r£_buf„r
;

297 
	#ˇn_ªad
(
buf„r
, 
size
Ë((buf„∏!
NULL
Ë&& (((buf„r)->
off£t
 + sizeË<(buf„r)->
Àngth
))

	)

299 
	#ˇn_ac˚ss_©_ödex
(
buf„r
, 
ödex
Ë((buf„∏!
NULL
Ë&& (((buf„r)->
off£t
 + indexË< (buf„r)->
Àngth
))

	)

300 
	#ˇ¬Ÿ_ac˚ss_©_ödex
(
buf„r
, 
ödex
Ë(!
	`ˇn_ac˚ss_©_ödex
(buf„r, index))

	)

302 
	#buf„r_©_off£t
(
buf„r
Ë((buf„r)->
c⁄ã¡
 + (buf„r)->
off£t
)

	)

305 
cJSON_boﬁ
 
	$∑r£_numbî
(
cJSON
 * c⁄° 
ôem
, 
∑r£_buf„r
 * c⁄° 
öput_buf„r
)

307 
numbî
 = 0;

308 *
a·î_íd
 = 
NULL
;

309 
numbî_c_°rög
[64];

310 
decimÆ_poöt
 = 
	`gë_decimÆ_poöt
();

311 
size_t
 
i
 = 0;

313 i‡((
öput_buf„r
 =
NULL
Ë|| (öput_buf„r->
c⁄ã¡
 == NULL))

315  
Ál£
;

321 
i
 = 0; (ò< ((
numbî_c_°rög
Ë- 1)Ë&& 
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, i); i++)

323 
	`buf„r_©_off£t
(
öput_buf„r
)[
i
])

339 
numbî_c_°rög
[
i
] = 
	`buf„r_©_off£t
(
öput_buf„r
)[i];

343 
numbî_c_°rög
[
i
] = 
decimÆ_poöt
;

347 
lo›_íd
;

350 
lo›_íd
:

351 
numbî_c_°rög
[
i
] = '\0';

353 
numbî
 = 
	`°πod
((c⁄° *)
numbî_c_°rög
, (**)&
a·î_íd
);

354 i‡(
numbî_c_°rög
 =
a·î_íd
)

356  
Ál£
;

359 
ôem
->
vÆuedoubÀ
 = 
numbî
;

362 i‡(
numbî
 >
INT_MAX
)

364 
ôem
->
vÆueöt
 = 
INT_MAX
;

366 i‡(
numbî
 <()
INT_MIN
)

368 
ôem
->
vÆueöt
 = 
INT_MIN
;

372 
ôem
->
vÆueöt
 = ()
numbî
;

375 
ôem
->
ty≥
 = 
cJSON_Numbî
;

377 
öput_buf„r
->
off£t
 +(
size_t
)(
a·î_íd
 - 
numbî_c_°rög
);

378  
åue
;

379 
	}
}

382 
	$CJSON_PUBLIC
(Ë
	$cJSON_SëNumbîHñ≥r
(
cJSON
 *
obje˘
, 
numbî
)

384 i‡(
numbî
 >
INT_MAX
)

386 
obje˘
->
vÆueöt
 = 
INT_MAX
;

388 i‡(
numbî
 <()
INT_MIN
)

390 
obje˘
->
vÆueöt
 = 
INT_MIN
;

394 
obje˘
->
vÆueöt
 = ()
numbî
;

397  
obje˘
->
vÆuedoubÀ
 = 
numbî
;

398 
	}
}

400 
	$CJSON_PUBLIC
(*Ë
	$cJSON_SëVÆue°rög
(
cJSON
 *
obje˘
, c⁄° *
vÆue°rög
)

402 *
c›y
 = 
NULL
;

404 i‡(!(
obje˘
->
ty≥
 & 
cJSON_Såög
Ë|| (obje˘->ty≥ & 
cJSON_IsRe„ªn˚
))

406  
NULL
;

408 i‡(
	`°æí
(
vÆue°rög
Ë<°æí(
obje˘
->valuestring))

410 
	`°r˝y
(
obje˘
->
vÆue°rög
, valuestring);

411  
obje˘
->
vÆue°rög
;

413 
c›y
 = (*Ë
	`cJSON_°rdup
((c⁄° *)
vÆue°rög
, &
globÆ_hooks
);

414 i‡(
c›y
 =
NULL
)

416  
NULL
;

418 i‡(
obje˘
->
vÆue°rög
 !
NULL
)

420 
	`cJSON_‰ì
(
obje˘
->
vÆue°rög
);

422 
obje˘
->
vÆue°rög
 = 
c›y
;

424  
c›y
;

425 
	}
}

429 *
	mbuf„r
;

430 
size_t
 
	mÀngth
;

431 
size_t
 
	moff£t
;

432 
size_t
 
	mdïth
;

433 
cJSON_boﬁ
 
	mnﬂŒoc
;

434 
cJSON_boﬁ
 
	mf‹m©
;

435 
öã∫Æ_hooks
 
	mhooks
;

436 } 
	t¥ötbuf„r
;

439 * 
	$ísuª
(
¥ötbuf„r
 * c⁄° 
p
, 
size_t
 
√eded
)

441 *
√wbuf„r
 = 
NULL
;

442 
size_t
 
√wsize
 = 0;

444 i‡((
p
 =
NULL
Ë|| (p->
buf„r
 == NULL))

446  
NULL
;

449 i‡((
p
->
Àngth
 > 0Ë&& (p->
off£t
 >=Ö->length))

452  
NULL
;

455 i‡(
√eded
 > 
INT_MAX
)

458  
NULL
;

461 
√eded
 +
p
->
off£t
 + 1;

462 i‡(
√eded
 <
p
->
Àngth
)

464  
p
->
buf„r
 +Ö->
off£t
;

467 i‡(
p
->
nﬂŒoc
) {

468  
NULL
;

472 i‡(
√eded
 > (
INT_MAX
 / 2))

475 i‡(
√eded
 <
INT_MAX
)

477 
√wsize
 = 
INT_MAX
;

481  
NULL
;

486 
√wsize
 = 
√eded
 * 2;

489 i‡(
p
->
hooks
.
ªÆloˇã
 !
NULL
)

492 
√wbuf„r
 = (*)
p
->
hooks
.
	`ªÆloˇã
’->
buf„r
, 
√wsize
);

493 i‡(
√wbuf„r
 =
NULL
)

495 
p
->
hooks
.
	`dóŒoˇã
’->
buf„r
);

496 
p
->
Àngth
 = 0;

497 
p
->
buf„r
 = 
NULL
;

499  
NULL
;

505 
√wbuf„r
 = (*)
p
->
hooks
.
	`Æloˇã
(
√wsize
);

506 i‡(!
√wbuf„r
)

508 
p
->
hooks
.
	`dóŒoˇã
’->
buf„r
);

509 
p
->
Àngth
 = 0;

510 
p
->
buf„r
 = 
NULL
;

512  
NULL
;

515 
	`mem˝y
(
√wbuf„r
, 
p
->
buf„r
,Ö->
off£t
 + 1);

516 
p
->
hooks
.
	`dóŒoˇã
’->
buf„r
);

518 
p
->
Àngth
 = 
√wsize
;

519 
p
->
buf„r
 = 
√wbuf„r
;

521  
√wbuf„r
 + 
p
->
off£t
;

522 
	}
}

525 
	$upd©e_off£t
(
¥ötbuf„r
 * c⁄° 
buf„r
)

527 c⁄° *
buf„r_poöãr
 = 
NULL
;

528 i‡((
buf„r
 =
NULL
) || (buffer->buffer == NULL))

532 
buf„r_poöãr
 = 
buf„r
->buf„∏+ buf„r->
off£t
;

534 
buf„r
->
off£t
 +
	`°æí
((c⁄° *)
buf„r_poöãr
);

535 
	}
}

538 
cJSON_boﬁ
 
	$com∑ª_doubÀ
(
a
, 
b
)

540 
maxVÆ
 = 
	`Ábs
(
a
Ë> fabs(
b
) ? fabs(a) : fabs(b);

541  (
	`Ábs
(
a
 - 
b
Ë<
maxVÆ
 * 
DBL_EPSILON
);

542 
	}
}

545 
cJSON_boﬁ
 
	$¥öt_numbî
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
¥ötbuf„r
 * c⁄° 
ouçut_buf„r
)

547 *
ouçut_poöãr
 = 
NULL
;

548 
d
 = 
ôem
->
vÆuedoubÀ
;

549 
Àngth
 = 0;

550 
size_t
 
i
 = 0;

551 
numbî_buf„r
[26] = {0};

552 
decimÆ_poöt
 = 
	`gë_decimÆ_poöt
();

553 
ã°
 = 0.0;

555 i‡(
ouçut_buf„r
 =
NULL
)

557  
Ál£
;

561 i‡(
	`i¢™
(
d
Ë|| 
	`isöf
(d))

563 
Àngth
 = 
	`•rötf
((*)
numbî_buf„r
, "null");

568 
Àngth
 = 
	`•rötf
((*)
numbî_buf„r
, "%1.15g", 
d
);

571 i‡((
	`ssˇnf
((*)
numbî_buf„r
, "%lg", &
ã°
Ë!1Ë|| !
	`com∑ª_doubÀ
((Èe°, 
d
))

574 
Àngth
 = 
	`•rötf
((*)
numbî_buf„r
, "%1.17g", 
d
);

579 i‡((
Àngth
 < 0Ë|| (Àngth > ()((
numbî_buf„r
) - 1)))

581  
Ál£
;

585 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, (
size_t
)
Àngth
 + (""));

586 i‡(
ouçut_poöãr
 =
NULL
)

588  
Ál£
;

593 
i
 = 0; i < ((
size_t
)
Àngth
); i++)

595 i‡(
numbî_buf„r
[
i
] =
decimÆ_poöt
)

597 
ouçut_poöãr
[
i
] = '.';

601 
ouçut_poöãr
[
i
] = 
numbî_buf„r
[i];

603 
ouçut_poöãr
[
i
] = '\0';

605 
ouçut_buf„r
->
off£t
 +(
size_t
)
Àngth
;

607  
åue
;

608 
	}
}

611 
	$∑r£_hex4
(c⁄° * c⁄° 
öput
)

613 
h
 = 0;

614 
size_t
 
i
 = 0;

616 
i
 = 0; i < 4; i++)

619 i‡((
öput
[
i
] >= '0') && (input[i] <= '9'))

621 
h
 +(Ë
öput
[
i
] - '0';

623 i‡((
öput
[
i
] >= 'A') && (input[i] <= 'F'))

625 
h
 +(Ë10 + 
öput
[
i
] - 'A';

627 i‡((
öput
[
i
] >= 'a') && (input[i] <= 'f'))

629 
h
 +(Ë10 + 
öput
[
i
] - 'a';

636 i‡(
i
 < 3)

639 
h
 = h << 4;

643  
h
;

644 
	}
}

648 
	$utf16_lôîÆ_to_utf8
(c⁄° * c⁄° 
öput_poöãr
, c⁄° * c⁄° 
öput_íd
, **
ouçut_poöãr
)

650 
codïoöt
 = 0;

651 
fú°_code
 = 0;

652 c⁄° *
fú°_£quí˚
 = 
öput_poöãr
;

653 
utf8_Àngth
 = 0;

654 
utf8_posôi⁄
 = 0;

655 
£quí˚_Àngth
 = 0;

656 
fú°_byã_m¨k
 = 0;

658 i‡((
öput_íd
 - 
fú°_£quí˚
) < 6)

661 
Áû
;

665 
fú°_code
 = 
	`∑r£_hex4
(
fú°_£quí˚
 + 2);

668 i‡(((
fú°_code
 >= 0xDC00) && (first_code <= 0xDFFF)))

670 
Áû
;

674 i‡((
fú°_code
 >= 0xD800) && (first_code <= 0xDBFF))

676 c⁄° *
£c⁄d_£quí˚
 = 
fú°_£quí˚
 + 6;

677 
£c⁄d_code
 = 0;

678 
£quí˚_Àngth
 = 12;

680 i‡((
öput_íd
 - 
£c⁄d_£quí˚
) < 6)

683 
Áû
;

686 i‡((
£c⁄d_£quí˚
[0] != '\\') || (second_sequence[1] != 'u'))

689 
Áû
;

693 
£c⁄d_code
 = 
	`∑r£_hex4
(
£c⁄d_£quí˚
 + 2);

695 i‡((
£c⁄d_code
 < 0xDC00) || (second_code > 0xDFFF))

698 
Áû
;

703 
codïoöt
 = 0x10000 + (((
fú°_code
 & 0x3FFË<< 10Ë| (
£c⁄d_code
 & 0x3FF));

707 
£quí˚_Àngth
 = 6;

708 
codïoöt
 = 
fú°_code
;

714 i‡(
codïoöt
 < 0x80)

717 
utf8_Àngth
 = 1;

719 i‡(
codïoöt
 < 0x800)

722 
utf8_Àngth
 = 2;

723 
fú°_byã_m¨k
 = 0xC0;

725 i‡(
codïoöt
 < 0x10000)

728 
utf8_Àngth
 = 3;

729 
fú°_byã_m¨k
 = 0xE0;

731 i‡(
codïoöt
 <= 0x10FFFF)

734 
utf8_Àngth
 = 4;

735 
fú°_byã_m¨k
 = 0xF0;

740 
Áû
;

744 
utf8_posôi⁄
 = ()(
utf8_Àngth
 - 1); utf8_position > 0; utf8_position--)

747 (*
ouçut_poöãr
)[
utf8_posôi⁄
] = ()((
codïoöt
 | 0x80) & 0xBF);

748 
codïoöt
 >>= 6;

751 i‡(
utf8_Àngth
 > 1)

753 (*
ouçut_poöãr
)[0] = ()((
codïoöt
 | 
fú°_byã_m¨k
) & 0xFF);

757 (*
ouçut_poöãr
)[0] = ()(
codïoöt
 & 0x7F);

760 *
ouçut_poöãr
 +
utf8_Àngth
;

762  
£quí˚_Àngth
;

764 
Áû
:

766 
	}
}

769 
cJSON_boﬁ
 
	$∑r£_°rög
(
cJSON
 * c⁄° 
ôem
, 
∑r£_buf„r
 * c⁄° 
öput_buf„r
)

771 c⁄° *
öput_poöãr
 = 
	`buf„r_©_off£t
(
öput_buf„r
) + 1;

772 c⁄° *
öput_íd
 = 
	`buf„r_©_off£t
(
öput_buf„r
) + 1;

773 *
ouçut_poöãr
 = 
NULL
;

774 *
ouçut
 = 
NULL
;

777 i‡(
	`buf„r_©_off£t
(
öput_buf„r
)[0] != '\"')

779 
Áû
;

784 
size_t
 
Æloˇti⁄_Àngth
 = 0;

785 
size_t
 
skù≥d_byãs
 = 0;

786 ((
size_t
)(
öput_íd
 - 
öput_buf„r
->
c⁄ã¡
Ë< i≈ut_buf„r->
Àngth
) && (*input_end != '\"'))

789 i‡(
öput_íd
[0] == '\\')

791 i‡((
size_t
)(
öput_íd
 + 1 - 
öput_buf„r
->
c⁄ã¡
Ë>öput_buf„r->
Àngth
)

794 
Áû
;

796 
skù≥d_byãs
++;

797 
öput_íd
++;

799 
öput_íd
++;

801 i‡(((
size_t
)(
öput_íd
 - 
öput_buf„r
->
c⁄ã¡
Ë>öput_buf„r->
Àngth
) || (*input_end != '\"'))

803 
Áû
;

807 
Æloˇti⁄_Àngth
 = (
size_t
Ë(
öput_íd
 - 
	`buf„r_©_off£t
(
öput_buf„r
)Ë- 
skù≥d_byãs
;

808 
ouçut
 = (*)
öput_buf„r
->
hooks
.
	`Æloˇã
(
Æloˇti⁄_Àngth
 + (""));

809 i‡(
ouçut
 =
NULL
)

811 
Áû
;

815 
ouçut_poöãr
 = 
ouçut
;

817 
öput_poöãr
 < 
öput_íd
)

819 i‡(*
öput_poöãr
 != '\\')

821 *
ouçut_poöãr
++ = *
öput_poöãr
++;

826 
£quí˚_Àngth
 = 2;

827 i‡((
öput_íd
 - 
öput_poöãr
) < 1)

829 
Áû
;

832 
öput_poöãr
[1])

835 *
ouçut_poöãr
++ = '\b';

838 *
ouçut_poöãr
++ = '\f';

841 *
ouçut_poöãr
++ = '\n';

844 *
ouçut_poöãr
++ = '\r';

847 *
ouçut_poöãr
++ = '\t';

852 *
ouçut_poöãr
++ = 
öput_poöãr
[1];

857 
£quí˚_Àngth
 = 
	`utf16_lôîÆ_to_utf8
(
öput_poöãr
, 
öput_íd
, &
ouçut_poöãr
);

858 i‡(
£quí˚_Àngth
 == 0)

861 
Áû
;

866 
Áû
;

868 
öput_poöãr
 +
£quí˚_Àngth
;

873 *
ouçut_poöãr
 = '\0';

875 
ôem
->
ty≥
 = 
cJSON_Såög
;

876 
ôem
->
vÆue°rög
 = (*)
ouçut
;

878 
öput_buf„r
->
off£t
 = (
size_t
Ë(
öput_íd
 - i≈ut_buf„r->
c⁄ã¡
);

879 
öput_buf„r
->
off£t
++;

881  
åue
;

883 
Áû
:

884 i‡(
ouçut
 !
NULL
)

886 
öput_buf„r
->
hooks
.
	`dóŒoˇã
(
ouçut
);

889 i‡(
öput_poöãr
 !
NULL
)

891 
öput_buf„r
->
off£t
 = (
size_t
)(
öput_poöãr
 - i≈ut_buf„r->
c⁄ã¡
);

894  
Ál£
;

895 
	}
}

898 
cJSON_boﬁ
 
	$¥öt_°rög_±r
(c⁄° * c⁄° 
öput
, 
¥ötbuf„r
 * c⁄° 
ouçut_buf„r
)

900 c⁄° *
öput_poöãr
 = 
NULL
;

901 *
ouçut
 = 
NULL
;

902 *
ouçut_poöãr
 = 
NULL
;

903 
size_t
 
ouçut_Àngth
 = 0;

905 
size_t
 
esˇ≥_ch¨a˘îs
 = 0;

907 i‡(
ouçut_buf„r
 =
NULL
)

909  
Ál£
;

913 i‡(
öput
 =
NULL
)

915 
ouçut
 = 
	`ísuª
(
ouçut_buf„r
, ("\"\""));

916 i‡(
ouçut
 =
NULL
)

918  
Ál£
;

920 
	`°r˝y
((*)
ouçut
, "\"\"");

922  
åue
;

926 
öput_poöãr
 = 
öput
; *input_pointer; input_pointer++)

928 *
öput_poöãr
)

938 
esˇ≥_ch¨a˘îs
++;

941 i‡(*
öput_poöãr
 < 32)

944 
esˇ≥_ch¨a˘îs
 += 5;

949 
ouçut_Àngth
 = (
size_t
)(
öput_poöãr
 - 
öput
Ë+ 
esˇ≥_ch¨a˘îs
;

951 
ouçut
 = 
	`ísuª
(
ouçut_buf„r
, 
ouçut_Àngth
 + ("\"\""));

952 i‡(
ouçut
 =
NULL
)

954  
Ál£
;

958 i‡(
esˇ≥_ch¨a˘îs
 == 0)

960 
ouçut
[0] = '\"';

961 
	`mem˝y
(
ouçut
 + 1, 
öput
, 
ouçut_Àngth
);

962 
ouçut
[
ouçut_Àngth
 + 1] = '\"';

963 
ouçut
[
ouçut_Àngth
 + 2] = '\0';

965  
åue
;

968 
ouçut
[0] = '\"';

969 
ouçut_poöãr
 = 
ouçut
 + 1;

971 
öput_poöãr
 = 
öput
; *öput_poöã∏!'\0'; ()öput_poöãr++, 
ouçut_poöãr
++)

973 i‡((*
öput_poöãr
 > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))

976 *
ouçut_poöãr
 = *
öput_poöãr
;

981 *
ouçut_poöãr
++ = '\\';

982 *
öput_poöãr
)

985 *
ouçut_poöãr
 = '\\';

988 *
ouçut_poöãr
 = '\"';

991 *
ouçut_poöãr
 = 'b';

994 *
ouçut_poöãr
 = 'f';

997 *
ouçut_poöãr
 = 'n';

1000 *
ouçut_poöãr
 = 'r';

1003 *
ouçut_poöãr
 = 't';

1007 
	`•rötf
((*)
ouçut_poöãr
, "u%04x", *
öput_poöãr
);

1008 
ouçut_poöãr
 += 4;

1013 
ouçut
[
ouçut_Àngth
 + 1] = '\"';

1014 
ouçut
[
ouçut_Àngth
 + 2] = '\0';

1016  
åue
;

1017 
	}
}

1020 
cJSON_boﬁ
 
	$¥öt_°rög
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
¥ötbuf„r
 * c⁄° 
p
)

1022  
	`¥öt_°rög_±r
((*)
ôem
->
vÆue°rög
, 
p
);

1023 
	}
}

1026 
cJSON_boﬁ
 
∑r£_vÆue
(
cJSON
 * c⁄° 
ôem
, 
∑r£_buf„r
 * c⁄° 
öput_buf„r
);

1027 
cJSON_boﬁ
 
¥öt_vÆue
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
¥ötbuf„r
 * c⁄° 
ouçut_buf„r
);

1028 
cJSON_boﬁ
 
∑r£_¨øy
(
cJSON
 * c⁄° 
ôem
, 
∑r£_buf„r
 * c⁄° 
öput_buf„r
);

1029 
cJSON_boﬁ
 
¥öt_¨øy
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
¥ötbuf„r
 * c⁄° 
ouçut_buf„r
);

1030 
cJSON_boﬁ
 
∑r£_obje˘
(
cJSON
 * c⁄° 
ôem
, 
∑r£_buf„r
 * c⁄° 
öput_buf„r
);

1031 
cJSON_boﬁ
 
¥öt_obje˘
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
¥ötbuf„r
 * c⁄° 
ouçut_buf„r
);

1034 
∑r£_buf„r
 *
	$buf„r_skù_whôe•a˚
(
∑r£_buf„r
 * c⁄° 
buf„r
)

1036 i‡((
buf„r
 =
NULL
Ë|| (buf„r->
c⁄ã¡
 == NULL))

1038  
NULL
;

1041 i‡(
	`ˇ¬Ÿ_ac˚ss_©_ödex
(
buf„r
, 0))

1043  
buf„r
;

1046 
	`ˇn_ac˚ss_©_ödex
(
buf„r
, 0Ë&& (
	`buf„r_©_off£t
(buffer)[0] <= 32))

1048 
buf„r
->
off£t
++;

1051 i‡(
buf„r
->
off£t
 =buf„r->
Àngth
)

1053 
buf„r
->
off£t
--;

1056  
buf„r
;

1057 
	}
}

1060 
∑r£_buf„r
 *
	$skù_utf8_bom
(
∑r£_buf„r
 * c⁄° 
buf„r
)

1062 i‡((
buf„r
 =
NULL
Ë|| (buf„r->
c⁄ã¡
 =NULLË|| (buf„r->
off£t
 != 0))

1064  
NULL
;

1067 i‡(
	`ˇn_ac˚ss_©_ödex
(
buf„r
, 4Ë&& (
	`°∫cmp
((c⁄° *)
	`buf„r_©_off£t
(buffer), "\xEF\xBB\xBF", 3) == 0))

1069 
buf„r
->
off£t
 += 3;

1072  
buf„r
;

1073 
	}
}

1075 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_P¨£WôhO±s
(c⁄° *
vÆue
, c⁄° **
ªtu∫_∑r£_íd
, 
cJSON_boﬁ
 
ªquúe_nuŒ_ãrmö©ed
)

1077 
size_t
 
buf„r_Àngth
;

1079 i‡(
NULL
 =
vÆue
)

1081  
NULL
;

1085 
buf„r_Àngth
 = 
	`°æí
(
vÆue
) + ("");

1087  
	`cJSON_P¨£WôhLígthO±s
(
vÆue
, 
buf„r_Àngth
, 
ªtu∫_∑r£_íd
, 
ªquúe_nuŒ_ãrmö©ed
);

1088 
	}
}

1091 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_P¨£WôhLígthO±s
(c⁄° *
vÆue
, 
size_t
 
buf„r_Àngth
, c⁄° **
ªtu∫_∑r£_íd
, 
cJSON_boﬁ
 
ªquúe_nuŒ_ãrmö©ed
)

1093 
∑r£_buf„r
 
buf„r
 = { 0, 0, 0, 0, { 0, 0, 0 } };

1094 
cJSON
 *
ôem
 = 
NULL
;

1097 
globÆ_îr‹
.
js⁄
 = 
NULL
;

1098 
globÆ_îr‹
.
posôi⁄
 = 0;

1100 i‡(
vÆue
 =
NULL
 || 0 =
buf„r_Àngth
)

1102 
Áû
;

1105 
buf„r
.
c⁄ã¡
 = (c⁄° *)
vÆue
;

1106 
buf„r
.
Àngth
 = 
buf„r_Àngth
;

1107 
buf„r
.
off£t
 = 0;

1108 
buf„r
.
hooks
 = 
globÆ_hooks
;

1110 
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

1111 i‡(
ôem
 =
NULL
)

1113 
Áû
;

1116 i‡(!
	`∑r£_vÆue
(
ôem
, 
	`buf„r_skù_whôe•a˚
(
	`skù_utf8_bom
(&
buf„r
))))

1119 
Áû
;

1123 i‡(
ªquúe_nuŒ_ãrmö©ed
)

1125 
	`buf„r_skù_whôe•a˚
(&
buf„r
);

1126 i‡((
buf„r
.
off£t
 >buf„r.
Àngth
Ë|| 
	`buf„r_©_off£t
(&buffer)[0] != '\0')

1128 
Áû
;

1131 i‡(
ªtu∫_∑r£_íd
)

1133 *
ªtu∫_∑r£_íd
 = (c⁄° *)
	`buf„r_©_off£t
(&
buf„r
);

1136  
ôem
;

1138 
Áû
:

1139 i‡(
ôem
 !
NULL
)

1141 
	`cJSON_Dñëe
(
ôem
);

1144 i‡(
vÆue
 !
NULL
)

1146 
îr‹
 
loˇl_îr‹
;

1147 
loˇl_îr‹
.
js⁄
 = (c⁄° *)
vÆue
;

1148 
loˇl_îr‹
.
posôi⁄
 = 0;

1150 i‡(
buf„r
.
off£t
 < buf„r.
Àngth
)

1152 
loˇl_îr‹
.
posôi⁄
 = 
buf„r
.
off£t
;

1154 i‡(
buf„r
.
Àngth
 > 0)

1156 
loˇl_îr‹
.
posôi⁄
 = 
buf„r
.
Àngth
 - 1;

1159 i‡(
ªtu∫_∑r£_íd
 !
NULL
)

1161 *
ªtu∫_∑r£_íd
 = (c⁄° *)
loˇl_îr‹
.
js⁄
 +Üoˇl_îr‹.
posôi⁄
;

1164 
globÆ_îr‹
 = 
loˇl_îr‹
;

1167  
NULL
;

1168 
	}
}

1171 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_P¨£
(c⁄° *
vÆue
)

1173  
	`cJSON_P¨£WôhO±s
(
vÆue
, 0, 0);

1174 
	}
}

1176 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_P¨£WôhLígth
(c⁄° *
vÆue
, 
size_t
 
buf„r_Àngth
)

1178  
	`cJSON_P¨£WôhLígthO±s
(
vÆue
, 
buf„r_Àngth
, 0, 0);

1179 
	}
}

1181 
	#cjs⁄_mö
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

1183 *
	$¥öt
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
cJSON_boﬁ
 
f‹m©
, c⁄° 
öã∫Æ_hooks
 * c⁄° 
hooks
)

1185 c⁄° 
size_t
 
deÁu…_buf„r_size
 = 256;

1186 
¥ötbuf„r
 
buf„r
[1];

1187 *
¥öãd
 = 
NULL
;

1189 
	`mem£t
(
buf„r
, 0, (buffer));

1192 
buf„r
->buf„∏(*Ë
hooks
->
	`Æloˇã
(
deÁu…_buf„r_size
);

1193 
buf„r
->
Àngth
 = 
deÁu…_buf„r_size
;

1194 
buf„r
->
f‹m©
 = format;

1195 
buf„r
->
hooks
 = *hooks;

1196 i‡(
buf„r
->buf„∏=
NULL
)

1198 
Áû
;

1202 i‡(!
	`¥öt_vÆue
(
ôem
, 
buf„r
))

1204 
Áû
;

1206 
	`upd©e_off£t
(
buf„r
);

1209 i‡(
hooks
->
ªÆloˇã
 !
NULL
)

1211 
¥öãd
 = (*Ë
hooks
->
	`ªÆloˇã
(
buf„r
->buf„r, buf„r->
off£t
 + 1);

1212 i‡(
¥öãd
 =
NULL
) {

1213 
Áû
;

1215 
buf„r
->buf„∏
NULL
;

1219 
¥öãd
 = (*Ë
hooks
->
	`Æloˇã
(
buf„r
->
off£t
 + 1);

1220 i‡(
¥öãd
 =
NULL
)

1222 
Áû
;

1224 
	`mem˝y
(
¥öãd
, 
buf„r
->buf„r, 
	`cjs⁄_mö
(buf„r->
Àngth
, buf„r->
off£t
 + 1));

1225 
¥öãd
[
buf„r
->
off£t
] = '\0';

1228 
hooks
->
	`dóŒoˇã
(
buf„r
->buffer);

1231  
¥öãd
;

1233 
Áû
:

1234 i‡(
buf„r
->buf„∏!
NULL
)

1236 
hooks
->
	`dóŒoˇã
(
buf„r
->buffer);

1239 i‡(
¥öãd
 !
NULL
)

1241 
hooks
->
	`dóŒoˇã
(
¥öãd
);

1244  
NULL
;

1245 
	}
}

1248 
	$CJSON_PUBLIC
(*Ë
	$cJSON_Pröt
(c⁄° 
cJSON
 *
ôem
)

1250  (*)
	`¥öt
(
ôem
, 
åue
, &
globÆ_hooks
);

1251 
	}
}

1253 
	$CJSON_PUBLIC
(*Ë
	$cJSON_PrötUnf‹m©ãd
(c⁄° 
cJSON
 *
ôem
)

1255  (*)
	`¥öt
(
ôem
, 
Ál£
, &
globÆ_hooks
);

1256 
	}
}

1258 
	$CJSON_PUBLIC
(*Ë
	$cJSON_PrötBuf„ªd
(c⁄° 
cJSON
 *
ôem
, 
¥ebuf„r
, 
cJSON_boﬁ
 
fmt
)

1260 
¥ötbuf„r
 
p
 = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };

1262 i‡(
¥ebuf„r
 < 0)

1264  
NULL
;

1267 
p
.
buf„r
 = (*)
globÆ_hooks
.
	`Æloˇã
((
size_t
)
¥ebuf„r
);

1268 i‡(!
p
.
buf„r
)

1270  
NULL
;

1273 
p
.
Àngth
 = (
size_t
)
¥ebuf„r
;

1274 
p
.
off£t
 = 0;

1275 
p
.
nﬂŒoc
 = 
Ál£
;

1276 
p
.
f‹m©
 = 
fmt
;

1277 
p
.
hooks
 = 
globÆ_hooks
;

1279 i‡(!
	`¥öt_vÆue
(
ôem
, &
p
))

1281 
globÆ_hooks
.
	`dóŒoˇã
(
p
.
buf„r
);

1282  
NULL
;

1285  (*)
p
.
buf„r
;

1286 
	}
}

1288 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_PrötPªÆloˇãd
(
cJSON
 *
ôem
, *
buf„r
, c⁄° 
Àngth
, c⁄° 
cJSON_boﬁ
 
f‹m©
)

1290 
¥ötbuf„r
 
p
 = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };

1292 i‡((
Àngth
 < 0Ë|| (
buf„r
 =
NULL
))

1294  
Ál£
;

1297 
p
.
buf„r
 = (*)buffer;

1298 
p
.
Àngth
 = (
size_t
)length;

1299 
p
.
off£t
 = 0;

1300 
p
.
nﬂŒoc
 = 
åue
;

1301 
p
.
f‹m©
 = format;

1302 
p
.
hooks
 = 
globÆ_hooks
;

1304  
	`¥öt_vÆue
(
ôem
, &
p
);

1305 
	}
}

1308 
cJSON_boﬁ
 
	$∑r£_vÆue
(
cJSON
 * c⁄° 
ôem
, 
∑r£_buf„r
 * c⁄° 
öput_buf„r
)

1310 i‡((
öput_buf„r
 =
NULL
Ë|| (öput_buf„r->
c⁄ã¡
 == NULL))

1312  
Ál£
;

1317 i‡(
	`ˇn_ªad
(
öput_buf„r
, 4Ë&& (
	`°∫cmp
((c⁄° *)
	`buf„r_©_off£t
(input_buffer), "null", 4) == 0))

1319 
ôem
->
ty≥
 = 
cJSON_NULL
;

1320 
öput_buf„r
->
off£t
 += 4;

1321  
åue
;

1324 i‡(
	`ˇn_ªad
(
öput_buf„r
, 5Ë&& (
	`°∫cmp
((c⁄° *)
	`buf„r_©_off£t
(input_buffer), "false", 5) == 0))

1326 
ôem
->
ty≥
 = 
cJSON_FÆ£
;

1327 
öput_buf„r
->
off£t
 += 5;

1328  
åue
;

1331 i‡(
	`ˇn_ªad
(
öput_buf„r
, 4Ë&& (
	`°∫cmp
((c⁄° *)
	`buf„r_©_off£t
(input_buffer), "true", 4) == 0))

1333 
ôem
->
ty≥
 = 
cJSON_True
;

1334 
ôem
->
vÆueöt
 = 1;

1335 
öput_buf„r
->
off£t
 += 4;

1336  
åue
;

1339 i‡(
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë&& (
	`buf„r_©_off£t
(input_buffer)[0] == '\"'))

1341  
	`∑r£_°rög
(
ôem
, 
öput_buf„r
);

1344 i‡(
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë&& ((
	`buf„r_©_off£t
(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))

1346  
	`∑r£_numbî
(
ôem
, 
öput_buf„r
);

1349 i‡(
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë&& (
	`buf„r_©_off£t
(input_buffer)[0] == '['))

1351  
	`∑r£_¨øy
(
ôem
, 
öput_buf„r
);

1354 i‡(
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë&& (
	`buf„r_©_off£t
(input_buffer)[0] == '{'))

1356  
	`∑r£_obje˘
(
ôem
, 
öput_buf„r
);

1359  
Ál£
;

1360 
	}
}

1363 
cJSON_boﬁ
 
	$¥öt_vÆue
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
¥ötbuf„r
 * c⁄° 
ouçut_buf„r
)

1365 *
ouçut
 = 
NULL
;

1367 i‡((
ôem
 =
NULL
Ë|| (
ouçut_buf„r
 == NULL))

1369  
Ál£
;

1372 (
ôem
->
ty≥
) & 0xFF)

1374 
cJSON_NULL
:

1375 
ouçut
 = 
	`ísuª
(
ouçut_buf„r
, 5);

1376 i‡(
ouçut
 =
NULL
)

1378  
Ál£
;

1380 
	`°r˝y
((*)
ouçut
, "null");

1381  
åue
;

1383 
cJSON_FÆ£
:

1384 
ouçut
 = 
	`ísuª
(
ouçut_buf„r
, 6);

1385 i‡(
ouçut
 =
NULL
)

1387  
Ál£
;

1389 
	`°r˝y
((*)
ouçut
, "false");

1390  
åue
;

1392 
cJSON_True
:

1393 
ouçut
 = 
	`ísuª
(
ouçut_buf„r
, 5);

1394 i‡(
ouçut
 =
NULL
)

1396  
Ál£
;

1398 
	`°r˝y
((*)
ouçut
, "true");

1399  
åue
;

1401 
cJSON_Numbî
:

1402  
	`¥öt_numbî
(
ôem
, 
ouçut_buf„r
);

1404 
cJSON_Raw
:

1406 
size_t
 
øw_Àngth
 = 0;

1407 i‡(
ôem
->
vÆue°rög
 =
NULL
)

1409  
Ál£
;

1412 
øw_Àngth
 = 
	`°æí
(
ôem
->
vÆue°rög
) + ("");

1413 
ouçut
 = 
	`ísuª
(
ouçut_buf„r
, 
øw_Àngth
);

1414 i‡(
ouçut
 =
NULL
)

1416  
Ál£
;

1418 
	`mem˝y
(
ouçut
, 
ôem
->
vÆue°rög
, 
øw_Àngth
);

1419  
åue
;

1422 
cJSON_Såög
:

1423  
	`¥öt_°rög
(
ôem
, 
ouçut_buf„r
);

1425 
cJSON_Aºay
:

1426  
	`¥öt_¨øy
(
ôem
, 
ouçut_buf„r
);

1428 
cJSON_Obje˘
:

1429  
	`¥öt_obje˘
(
ôem
, 
ouçut_buf„r
);

1432  
Ál£
;

1434 
	}
}

1437 
cJSON_boﬁ
 
	$∑r£_¨øy
(
cJSON
 * c⁄° 
ôem
, 
∑r£_buf„r
 * c⁄° 
öput_buf„r
)

1439 
cJSON
 *
hód
 = 
NULL
;

1440 
cJSON
 *
cuºít_ôem
 = 
NULL
;

1442 i‡(
öput_buf„r
->
dïth
 >
CJSON_NESTING_LIMIT
)

1444  
Ál£
;

1446 
öput_buf„r
->
dïth
++;

1448 i‡(
	`buf„r_©_off£t
(
öput_buf„r
)[0] != '[')

1451 
Áû
;

1454 
öput_buf„r
->
off£t
++;

1455 
	`buf„r_skù_whôe•a˚
(
öput_buf„r
);

1456 i‡(
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë&& (
	`buf„r_©_off£t
(input_buffer)[0] == ']'))

1459 
suc˚ss
;

1463 i‡(
	`ˇ¬Ÿ_ac˚ss_©_ödex
(
öput_buf„r
, 0))

1465 
öput_buf„r
->
off£t
--;

1466 
Áû
;

1470 
öput_buf„r
->
off£t
--;

1475 
cJSON
 *
√w_ôem
 = 
	`cJSON_New_Iãm
(&(
öput_buf„r
->
hooks
));

1476 i‡(
√w_ôem
 =
NULL
)

1478 
Áû
;

1482 i‡(
hód
 =
NULL
)

1485 
cuºít_ôem
 = 
hód
 = 
√w_ôem
;

1490 
cuºít_ôem
->
√xt
 = 
√w_ôem
;

1491 
√w_ôem
->
¥ev
 = 
cuºít_ôem
;

1492 
cuºít_ôem
 = 
√w_ôem
;

1496 
öput_buf„r
->
off£t
++;

1497 
	`buf„r_skù_whôe•a˚
(
öput_buf„r
);

1498 i‡(!
	`∑r£_vÆue
(
cuºít_ôem
, 
öput_buf„r
))

1500 
Áû
;

1502 
	`buf„r_skù_whôe•a˚
(
öput_buf„r
);

1504 
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë&& (
	`buf„r_©_off£t
(input_buffer)[0] == ','));

1506 i‡(
	`ˇ¬Ÿ_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë|| 
	`buf„r_©_off£t
(input_buffer)[0] != ']')

1508 
Áû
;

1511 
suc˚ss
:

1512 
öput_buf„r
->
dïth
--;

1514 i‡(
hód
 !
NULL
) {

1515 
hód
->
¥ev
 = 
cuºít_ôem
;

1518 
ôem
->
ty≥
 = 
cJSON_Aºay
;

1519 
ôem
->
chûd
 = 
hód
;

1521 
öput_buf„r
->
off£t
++;

1523  
åue
;

1525 
Áû
:

1526 i‡(
hód
 !
NULL
)

1528 
	`cJSON_Dñëe
(
hód
);

1531  
Ál£
;

1532 
	}
}

1535 
cJSON_boﬁ
 
	$¥öt_¨øy
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
¥ötbuf„r
 * c⁄° 
ouçut_buf„r
)

1537 *
ouçut_poöãr
 = 
NULL
;

1538 
size_t
 
Àngth
 = 0;

1539 
cJSON
 *
cuºít_ñemít
 = 
ôem
->
chûd
;

1541 i‡(
ouçut_buf„r
 =
NULL
)

1543  
Ál£
;

1548 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, 1);

1549 i‡(
ouçut_poöãr
 =
NULL
)

1551  
Ál£
;

1554 *
ouçut_poöãr
 = '[';

1555 
ouçut_buf„r
->
off£t
++;

1556 
ouçut_buf„r
->
dïth
++;

1558 
cuºít_ñemít
 !
NULL
)

1560 i‡(!
	`¥öt_vÆue
(
cuºít_ñemít
, 
ouçut_buf„r
))

1562  
Ál£
;

1564 
	`upd©e_off£t
(
ouçut_buf„r
);

1565 i‡(
cuºít_ñemít
->
√xt
)

1567 
Àngth
 = (
size_t
Ë(
ouçut_buf„r
->
f‹m©
 ? 2 : 1);

1568 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, 
Àngth
 + 1);

1569 i‡(
ouçut_poöãr
 =
NULL
)

1571  
Ál£
;

1573 *
ouçut_poöãr
++ = ',';

1574 if(
ouçut_buf„r
->
f‹m©
)

1576 *
ouçut_poöãr
++ = ' ';

1578 *
ouçut_poöãr
 = '\0';

1579 
ouçut_buf„r
->
off£t
 +
Àngth
;

1581 
cuºít_ñemít
 = cuºít_ñemít->
√xt
;

1584 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, 2);

1585 i‡(
ouçut_poöãr
 =
NULL
)

1587  
Ál£
;

1589 *
ouçut_poöãr
++ = ']';

1590 *
ouçut_poöãr
 = '\0';

1591 
ouçut_buf„r
->
dïth
--;

1593  
åue
;

1594 
	}
}

1597 
cJSON_boﬁ
 
	$∑r£_obje˘
(
cJSON
 * c⁄° 
ôem
, 
∑r£_buf„r
 * c⁄° 
öput_buf„r
)

1599 
cJSON
 *
hód
 = 
NULL
;

1600 
cJSON
 *
cuºít_ôem
 = 
NULL
;

1602 i‡(
öput_buf„r
->
dïth
 >
CJSON_NESTING_LIMIT
)

1604  
Ál£
;

1606 
öput_buf„r
->
dïth
++;

1608 i‡(
	`ˇ¬Ÿ_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë|| (
	`buf„r_©_off£t
(input_buffer)[0] != '{'))

1610 
Áû
;

1613 
öput_buf„r
->
off£t
++;

1614 
	`buf„r_skù_whôe•a˚
(
öput_buf„r
);

1615 i‡(
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë&& (
	`buf„r_©_off£t
(input_buffer)[0] == '}'))

1617 
suc˚ss
;

1621 i‡(
	`ˇ¬Ÿ_ac˚ss_©_ödex
(
öput_buf„r
, 0))

1623 
öput_buf„r
->
off£t
--;

1624 
Áû
;

1628 
öput_buf„r
->
off£t
--;

1633 
cJSON
 *
√w_ôem
 = 
	`cJSON_New_Iãm
(&(
öput_buf„r
->
hooks
));

1634 i‡(
√w_ôem
 =
NULL
)

1636 
Áû
;

1640 i‡(
hód
 =
NULL
)

1643 
cuºít_ôem
 = 
hód
 = 
√w_ôem
;

1648 
cuºít_ôem
->
√xt
 = 
√w_ôem
;

1649 
√w_ôem
->
¥ev
 = 
cuºít_ôem
;

1650 
cuºít_ôem
 = 
√w_ôem
;

1654 
öput_buf„r
->
off£t
++;

1655 
	`buf„r_skù_whôe•a˚
(
öput_buf„r
);

1656 i‡(!
	`∑r£_°rög
(
cuºít_ôem
, 
öput_buf„r
))

1658 
Áû
;

1660 
	`buf„r_skù_whôe•a˚
(
öput_buf„r
);

1663 
cuºít_ôem
->
°rög
 = cuºít_ôem->
vÆue°rög
;

1664 
cuºít_ôem
->
vÆue°rög
 = 
NULL
;

1666 i‡(
	`ˇ¬Ÿ_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë|| (
	`buf„r_©_off£t
(input_buffer)[0] != ':'))

1668 
Áû
;

1672 
öput_buf„r
->
off£t
++;

1673 
	`buf„r_skù_whôe•a˚
(
öput_buf„r
);

1674 i‡(!
	`∑r£_vÆue
(
cuºít_ôem
, 
öput_buf„r
))

1676 
Áû
;

1678 
	`buf„r_skù_whôe•a˚
(
öput_buf„r
);

1680 
	`ˇn_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë&& (
	`buf„r_©_off£t
(input_buffer)[0] == ','));

1682 i‡(
	`ˇ¬Ÿ_ac˚ss_©_ödex
(
öput_buf„r
, 0Ë|| (
	`buf„r_©_off£t
(input_buffer)[0] != '}'))

1684 
Áû
;

1687 
suc˚ss
:

1688 
öput_buf„r
->
dïth
--;

1690 i‡(
hód
 !
NULL
) {

1691 
hód
->
¥ev
 = 
cuºít_ôem
;

1694 
ôem
->
ty≥
 = 
cJSON_Obje˘
;

1695 
ôem
->
chûd
 = 
hód
;

1697 
öput_buf„r
->
off£t
++;

1698  
åue
;

1700 
Áû
:

1701 i‡(
hód
 !
NULL
)

1703 
	`cJSON_Dñëe
(
hód
);

1706  
Ál£
;

1707 
	}
}

1710 
cJSON_boﬁ
 
	$¥öt_obje˘
(c⁄° 
cJSON
 * c⁄° 
ôem
, 
¥ötbuf„r
 * c⁄° 
ouçut_buf„r
)

1712 *
ouçut_poöãr
 = 
NULL
;

1713 
size_t
 
Àngth
 = 0;

1714 
cJSON
 *
cuºít_ôem
 = 
ôem
->
chûd
;

1716 i‡(
ouçut_buf„r
 =
NULL
)

1718  
Ál£
;

1722 
Àngth
 = (
size_t
Ë(
ouçut_buf„r
->
f‹m©
 ? 2 : 1);

1723 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, 
Àngth
 + 1);

1724 i‡(
ouçut_poöãr
 =
NULL
)

1726  
Ál£
;

1729 *
ouçut_poöãr
++ = '{';

1730 
ouçut_buf„r
->
dïth
++;

1731 i‡(
ouçut_buf„r
->
f‹m©
)

1733 *
ouçut_poöãr
++ = '\n';

1735 
ouçut_buf„r
->
off£t
 +
Àngth
;

1737 
cuºít_ôem
)

1739 i‡(
ouçut_buf„r
->
f‹m©
)

1741 
size_t
 
i
;

1742 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, ouçut_buf„r->
dïth
);

1743 i‡(
ouçut_poöãr
 =
NULL
)

1745  
Ál£
;

1747 
i
 = 0; i < 
ouçut_buf„r
->
dïth
; i++)

1749 *
ouçut_poöãr
++ = '\t';

1751 
ouçut_buf„r
->
off£t
 +ouçut_buf„r->
dïth
;

1755 i‡(!
	`¥öt_°rög_±r
((*)
cuºít_ôem
->
°rög
, 
ouçut_buf„r
))

1757  
Ál£
;

1759 
	`upd©e_off£t
(
ouçut_buf„r
);

1761 
Àngth
 = (
size_t
Ë(
ouçut_buf„r
->
f‹m©
 ? 2 : 1);

1762 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, 
Àngth
);

1763 i‡(
ouçut_poöãr
 =
NULL
)

1765  
Ál£
;

1767 *
ouçut_poöãr
++ = ':';

1768 i‡(
ouçut_buf„r
->
f‹m©
)

1770 *
ouçut_poöãr
++ = '\t';

1772 
ouçut_buf„r
->
off£t
 +
Àngth
;

1775 i‡(!
	`¥öt_vÆue
(
cuºít_ôem
, 
ouçut_buf„r
))

1777  
Ál£
;

1779 
	`upd©e_off£t
(
ouçut_buf„r
);

1782 
Àngth
 = ((
size_t
)(
ouçut_buf„r
->
f‹m©
 ? 1 : 0Ë+ (size_t)(
cuºít_ôem
->
√xt
 ? 1 : 0));

1783 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, 
Àngth
 + 1);

1784 i‡(
ouçut_poöãr
 =
NULL
)

1786  
Ál£
;

1788 i‡(
cuºít_ôem
->
√xt
)

1790 *
ouçut_poöãr
++ = ',';

1793 i‡(
ouçut_buf„r
->
f‹m©
)

1795 *
ouçut_poöãr
++ = '\n';

1797 *
ouçut_poöãr
 = '\0';

1798 
ouçut_buf„r
->
off£t
 +
Àngth
;

1800 
cuºít_ôem
 = cuºít_ôem->
√xt
;

1803 
ouçut_poöãr
 = 
	`ísuª
(
ouçut_buf„r
, ouçut_buf„r->
f‹m©
 ? (ouçut_buf„r->
dïth
 + 1) : 2);

1804 i‡(
ouçut_poöãr
 =
NULL
)

1806  
Ál£
;

1808 i‡(
ouçut_buf„r
->
f‹m©
)

1810 
size_t
 
i
;

1811 
i
 = 0; i < (
ouçut_buf„r
->
dïth
 - 1); i++)

1813 *
ouçut_poöãr
++ = '\t';

1816 *
ouçut_poöãr
++ = '}';

1817 *
ouçut_poöãr
 = '\0';

1818 
ouçut_buf„r
->
dïth
--;

1820  
åue
;

1821 
	}
}

1824 
	$CJSON_PUBLIC
(Ë
	$cJSON_GëAºaySize
(c⁄° 
cJSON
 *
¨øy
)

1826 
cJSON
 *
chûd
 = 
NULL
;

1827 
size_t
 
size
 = 0;

1829 i‡(
¨øy
 =
NULL
)

1834 
chûd
 = 
¨øy
->child;

1836 
chûd
 !
NULL
)

1838 
size
++;

1839 
chûd
 = chûd->
√xt
;

1844  ()
size
;

1845 
	}
}

1847 
cJSON
* 
	$gë_¨øy_ôem
(c⁄° 
cJSON
 *
¨øy
, 
size_t
 
ödex
)

1849 
cJSON
 *
cuºít_chûd
 = 
NULL
;

1851 i‡(
¨øy
 =
NULL
)

1853  
NULL
;

1856 
cuºít_chûd
 = 
¨øy
->
chûd
;

1857 (
cuºít_chûd
 !
NULL
Ë&& (
ödex
 > 0))

1859 
ödex
--;

1860 
cuºít_chûd
 = cuºít_chûd->
√xt
;

1863  
cuºít_chûd
;

1864 
	}
}

1866 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_GëAºayIãm
(c⁄° 
cJSON
 *
¨øy
, 
ödex
)

1868 i‡(
ödex
 < 0)

1870  
NULL
;

1873  
	`gë_¨øy_ôem
(
¨øy
, (
size_t
)
ödex
);

1874 
	}
}

1876 
cJSON
 *
	$gë_obje˘_ôem
(c⁄° 
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

1878 
cJSON
 *
cuºít_ñemít
 = 
NULL
;

1880 i‡((
obje˘
 =
NULL
Ë|| (
«me
 == NULL))

1882  
NULL
;

1885 
cuºít_ñemít
 = 
obje˘
->
chûd
;

1886 i‡(
ˇ£_£nsôive
)

1888 (
cuºít_ñemít
 !
NULL
Ë&& (cuºít_ñemít->
°rög
 !NULLË&& (
	`°rcmp
(
«me
, current_element->string) != 0))

1890 
cuºít_ñemít
 = cuºít_ñemít->
√xt
;

1895 (
cuºít_ñemít
 !
NULL
Ë&& (
	`ˇ£_ö£nsôive_°rcmp
((c⁄° *)
«me
, (c⁄° *)(cuºít_ñemít->
°rög
)) != 0))

1897 
cuºít_ñemít
 = cuºít_ñemít->
√xt
;

1901 i‡((
cuºít_ñemít
 =
NULL
Ë|| (cuºít_ñemít->
°rög
 == NULL)) {

1902  
NULL
;

1905  
cuºít_ñemít
;

1906 
	}
}

1908 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_GëObje˘Iãm
(c⁄° 
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
°rög
)

1910  
	`gë_obje˘_ôem
(
obje˘
, 
°rög
, 
Ál£
);

1911 
	}
}

1913 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_GëObje˘IãmCa£Sísôive
(c⁄° 
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
°rög
)

1915  
	`gë_obje˘_ôem
(
obje˘
, 
°rög
, 
åue
);

1916 
	}
}

1918 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_HasObje˘Iãm
(c⁄° 
cJSON
 *
obje˘
, c⁄° *
°rög
)

1920  
	`cJSON_GëObje˘Iãm
(
obje˘
, 
°rög
) ? 1 : 0;

1921 
	}
}

1924 
	$suffix_obje˘
(
cJSON
 *
¥ev
, cJSON *
ôem
)

1926 
¥ev
->
√xt
 = 
ôem
;

1927 
ôem
->
¥ev
 =Örev;

1928 
	}
}

1931 
cJSON
 *
	$¸óã_ª„ªn˚
(c⁄° 
cJSON
 *
ôem
, c⁄° 
öã∫Æ_hooks
 * c⁄° 
hooks
)

1933 
cJSON
 *
ª„ªn˚
 = 
NULL
;

1934 i‡(
ôem
 =
NULL
)

1936  
NULL
;

1939 
ª„ªn˚
 = 
	`cJSON_New_Iãm
(
hooks
);

1940 i‡(
ª„ªn˚
 =
NULL
)

1942  
NULL
;

1945 
	`mem˝y
(
ª„ªn˚
, 
ôem
, (
cJSON
));

1946 
ª„ªn˚
->
°rög
 = 
NULL
;

1947 
ª„ªn˚
->
ty≥
 |
cJSON_IsRe„ªn˚
;

1948 
ª„ªn˚
->
√xt
 =Ñe„ªn˚->
¥ev
 = 
NULL
;

1949  
ª„ªn˚
;

1950 
	}
}

1952 
cJSON_boﬁ
 
	$add_ôem_to_¨øy
(
cJSON
 *
¨øy
, cJSON *
ôem
)

1954 
cJSON
 *
chûd
 = 
NULL
;

1956 i‡((
ôem
 =
NULL
Ë|| (
¨øy
 == NULL) || (array == item))

1958  
Ál£
;

1961 
chûd
 = 
¨øy
->child;

1965 i‡(
chûd
 =
NULL
)

1968 
¨øy
->
chûd
 = 
ôem
;

1969 
ôem
->
¥ev
 = item;

1970 
ôem
->
√xt
 = 
NULL
;

1975 i‡(
chûd
->
¥ev
)

1977 
	`suffix_obje˘
(
chûd
->
¥ev
, 
ôem
);

1978 
¨øy
->
chûd
->
¥ev
 = 
ôem
;

1982  
åue
;

1983 
	}
}

1986 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
)

1988  
	`add_ôem_to_¨øy
(
¨øy
, 
ôem
);

1989 
	}
}

1991 #i‡
deföed
(
__˛™g__
Ë|| (deföed(
__GNUC__
Ë&& ((__GNUC__ > 4Ë|| ((__GNUC__ =4Ë&& (
__GNUC_MINOR__
 > 5))))

1992 #¥agm®
GCC
 
dügno°ic
 
push


1994 #ifde‡
__GNUC__


1995 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wcast-qual"

1998 * 
	$ˇ°_away_c⁄°
(c⁄° * 
°rög
)

2000  (*)
°rög
;

2001 
	}
}

2002 #i‡
deföed
(
__˛™g__
Ë|| (deföed(
__GNUC__
Ë&& ((__GNUC__ > 4Ë|| ((__GNUC__ =4Ë&& (
__GNUC_MINOR__
 > 5))))

2003 #¥agm®
GCC
 
dügno°ic
 
p›


2007 
cJSON_boﬁ
 
	$add_ôem_to_obje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
°rög
, cJSON * c⁄° 
ôem
, c⁄° 
öã∫Æ_hooks
 * c⁄° 
hooks
, c⁄° 
cJSON_boﬁ
 
c⁄°™t_key
)

2009 *
√w_key
 = 
NULL
;

2010 
√w_ty≥
 = 
cJSON_InvÆid
;

2012 i‡((
obje˘
 =
NULL
Ë|| (
°rög
 =NULLË|| (
ôem
 == NULL) || (object == item))

2014  
Ál£
;

2017 i‡(
c⁄°™t_key
)

2019 
√w_key
 = (*)
	`ˇ°_away_c⁄°
(
°rög
);

2020 
√w_ty≥
 = 
ôem
->
ty≥
 | 
cJSON_SåögIsC⁄°
;

2024 
√w_key
 = (*)
	`cJSON_°rdup
((c⁄° *)
°rög
, 
hooks
);

2025 i‡(
√w_key
 =
NULL
)

2027  
Ál£
;

2030 
√w_ty≥
 = 
ôem
->
ty≥
 & ~
cJSON_SåögIsC⁄°
;

2033 i‡(!(
ôem
->
ty≥
 & 
cJSON_SåögIsC⁄°
Ë&& (ôem->
°rög
 !
NULL
))

2035 
hooks
->
	`dóŒoˇã
(
ôem
->
°rög
);

2038 
ôem
->
°rög
 = 
√w_key
;

2039 
ôem
->
ty≥
 = 
√w_ty≥
;

2041  
	`add_ôem_to_¨øy
(
obje˘
, 
ôem
);

2042 
	}
}

2044 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
)

2046  
	`add_ôem_to_obje˘
(
obje˘
, 
°rög
, 
ôem
, &
globÆ_hooks
, 
Ál£
);

2047 
	}
}

2050 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_AddIãmToObje˘CS
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
)

2052  
	`add_ôem_to_obje˘
(
obje˘
, 
°rög
, 
ôem
, &
globÆ_hooks
, 
åue
);

2053 
	}
}

2055 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
)

2057 i‡(
¨øy
 =
NULL
)

2059  
Ál£
;

2062  
	`add_ôem_to_¨øy
(
¨øy
, 
	`¸óã_ª„ªn˚
(
ôem
, &
globÆ_hooks
));

2063 
	}
}

2065 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
)

2067 i‡((
obje˘
 =
NULL
Ë|| (
°rög
 == NULL))

2069  
Ál£
;

2072  
	`add_ôem_to_obje˘
(
obje˘
, 
°rög
, 
	`¸óã_ª„ªn˚
(
ôem
, &
globÆ_hooks
), &globÆ_hooks, 
Ál£
);

2073 
	}
}

2075 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddNuŒToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
)

2077 
cJSON
 *
nuŒ
 = 
	`cJSON_Cª©eNuŒ
();

2078 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
nuŒ
, &
globÆ_hooks
, 
Ál£
))

2080  
nuŒ
;

2083 
	`cJSON_Dñëe
(
nuŒ
);

2084  
NULL
;

2085 
	}
}

2087 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddTrueToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
)

2089 
cJSON
 *
åue_ôem
 = 
	`cJSON_Cª©eTrue
();

2090 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
åue_ôem
, &
globÆ_hooks
, 
Ál£
))

2092  
åue_ôem
;

2095 
	`cJSON_Dñëe
(
åue_ôem
);

2096  
NULL
;

2097 
	}
}

2099 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddFÆ£ToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
)

2101 
cJSON
 *
Ál£_ôem
 = 
	`cJSON_Cª©eFÆ£
();

2102 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
Ál£_ôem
, &
globÆ_hooks
, 
Ál£
))

2104  
Ál£_ôem
;

2107 
	`cJSON_Dñëe
(
Ál£_ôem
);

2108  
NULL
;

2109 
	}
}

2111 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddBoﬁToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° 
cJSON_boﬁ
 
boﬁón
)

2113 
cJSON
 *
boﬁ_ôem
 = 
	`cJSON_Cª©eBoﬁ
(
boﬁón
);

2114 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
boﬁ_ôem
, &
globÆ_hooks
, 
Ál£
))

2116  
boﬁ_ôem
;

2119 
	`cJSON_Dñëe
(
boﬁ_ôem
);

2120  
NULL
;

2121 
	}
}

2123 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddNumbîToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° 
numbî
)

2125 
cJSON
 *
numbî_ôem
 = 
	`cJSON_Cª©eNumbî
(
numbî
);

2126 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
numbî_ôem
, &
globÆ_hooks
, 
Ál£
))

2128  
numbî_ôem
;

2131 
	`cJSON_Dñëe
(
numbî_ôem
);

2132  
NULL
;

2133 
	}
}

2135 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddSåögToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° * c⁄° 
°rög
)

2137 
cJSON
 *
°rög_ôem
 = 
	`cJSON_Cª©eSåög
(
°rög
);

2138 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
°rög_ôem
, &
globÆ_hooks
, 
Ál£
))

2140  
°rög_ôem
;

2143 
	`cJSON_Dñëe
(
°rög_ôem
);

2144  
NULL
;

2145 
	}
}

2147 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddRawToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° * c⁄° 
øw
)

2149 
cJSON
 *
øw_ôem
 = 
	`cJSON_Cª©eRaw
(
øw
);

2150 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
øw_ôem
, &
globÆ_hooks
, 
Ál£
))

2152  
øw_ôem
;

2155 
	`cJSON_Dñëe
(
øw_ôem
);

2156  
NULL
;

2157 
	}
}

2159 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddObje˘ToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
)

2161 
cJSON
 *
obje˘_ôem
 = 
	`cJSON_Cª©eObje˘
();

2162 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
obje˘_ôem
, &
globÆ_hooks
, 
Ál£
))

2164  
obje˘_ôem
;

2167 
	`cJSON_Dñëe
(
obje˘_ôem
);

2168  
NULL
;

2169 
	}
}

2171 
	$CJSON_PUBLIC
(
cJSON
*Ë
	$cJSON_AddAºayToObje˘
(
cJSON
 * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
)

2173 
cJSON
 *
¨øy
 = 
	`cJSON_Cª©eAºay
();

2174 i‡(
	`add_ôem_to_obje˘
(
obje˘
, 
«me
, 
¨øy
, &
globÆ_hooks
, 
Ál£
))

2176  
¨øy
;

2179 
	`cJSON_Dñëe
(
¨øy
);

2180  
NULL
;

2181 
	}
}

2183 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_DëachIãmVüPoöãr
(
cJSON
 *
∑ª¡
, cJSON * c⁄° 
ôem
)

2185 i‡((
∑ª¡
 =
NULL
Ë|| (
ôem
 == NULL))

2187  
NULL
;

2190 i‡(
ôem
 !
∑ª¡
->
chûd
)

2193 
ôem
->
¥ev
->
√xt
 = item->next;

2195 i‡(
ôem
->
√xt
 !
NULL
)

2198 
ôem
->
√xt
->
¥ev
 = item->prev;

2201 i‡(
ôem
 =
∑ª¡
->
chûd
)

2204 
∑ª¡
->
chûd
 = 
ôem
->
√xt
;

2206 i‡(
ôem
->
√xt
 =
NULL
)

2209 
∑ª¡
->
chûd
->
¥ev
 = 
ôem
->prev;

2213 
ôem
->
¥ev
 = 
NULL
;

2214 
ôem
->
√xt
 = 
NULL
;

2216  
ôem
;

2217 
	}
}

2219 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_DëachIãmFromAºay
(
cJSON
 *
¨øy
, 
which
)

2221 i‡(
which
 < 0)

2223  
NULL
;

2226  
	`cJSON_DëachIãmVüPoöãr
(
¨øy
, 
	`gë_¨øy_ôem
◊ºay, (
size_t
)
which
));

2227 
	}
}

2229 
	$CJSON_PUBLIC
(Ë
	$cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
, 
which
)

2231 
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromAºay
(
¨øy
, 
which
));

2232 
	}
}

2234 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_DëachIãmFromObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
)

2236 
cJSON
 *
to_dëach
 = 
	`cJSON_GëObje˘Iãm
(
obje˘
, 
°rög
);

2238  
	`cJSON_DëachIãmVüPoöãr
(
obje˘
, 
to_dëach
);

2239 
	}
}

2241 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_DëachIãmFromObje˘Ca£Sísôive
(
cJSON
 *
obje˘
, c⁄° *
°rög
)

2243 
cJSON
 *
to_dëach
 = 
	`cJSON_GëObje˘IãmCa£Sísôive
(
obje˘
, 
°rög
);

2245  
	`cJSON_DëachIãmVüPoöãr
(
obje˘
, 
to_dëach
);

2246 
	}
}

2248 
	$CJSON_PUBLIC
(Ë
	$cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
)

2250 
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromObje˘
(
obje˘
, 
°rög
));

2251 
	}
}

2253 
	$CJSON_PUBLIC
(Ë
	$cJSON_DñëeIãmFromObje˘Ca£Sísôive
(
cJSON
 *
obje˘
, c⁄° *
°rög
)

2255 
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromObje˘Ca£Sísôive
(
obje˘
, 
°rög
));

2256 
	}
}

2259 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_In£πIãmInAºay
(
cJSON
 *
¨øy
, 
which
, cJSON *
√wôem
)

2261 
cJSON
 *
a·î_ö£πed
 = 
NULL
;

2263 i‡(
which
 < 0)

2265  
Ál£
;

2268 
a·î_ö£πed
 = 
	`gë_¨øy_ôem
(
¨øy
, (
size_t
)
which
);

2269 i‡(
a·î_ö£πed
 =
NULL
)

2271  
	`add_ôem_to_¨øy
(
¨øy
, 
√wôem
);

2274 
√wôem
->
√xt
 = 
a·î_ö£πed
;

2275 
√wôem
->
¥ev
 = 
a·î_ö£πed
->prev;

2276 
a·î_ö£πed
->
¥ev
 = 
√wôem
;

2277 i‡(
a·î_ö£πed
 =
¨øy
->
chûd
)

2279 
¨øy
->
chûd
 = 
√wôem
;

2283 
√wôem
->
¥ev
->
√xt
 =Çewitem;

2285  
åue
;

2286 
	}
}

2288 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_Rïœ˚IãmVüPoöãr
(
cJSON
 * c⁄° 
∑ª¡
, cJSON * c⁄° 
ôem
, cJSON * 
ª∂a˚mít
)

2290 i‡((
∑ª¡
 =
NULL
Ë|| (
ª∂a˚mít
 =NULLË|| (
ôem
 == NULL))

2292  
Ál£
;

2295 i‡(
ª∂a˚mít
 =
ôem
)

2297  
åue
;

2300 
ª∂a˚mít
->
√xt
 = 
ôem
->next;

2301 
ª∂a˚mít
->
¥ev
 = 
ôem
->prev;

2303 i‡(
ª∂a˚mít
->
√xt
 !
NULL
)

2305 
ª∂a˚mít
->
√xt
->
¥ev
 =Ñeplacement;

2307 i‡(
∑ª¡
->
chûd
 =
ôem
)

2309 i‡(
∑ª¡
->
chûd
->
¥ev
 ==Öarent->child)

2311 
ª∂a˚mít
->
¥ev
 =Ñeplacement;

2313 
∑ª¡
->
chûd
 = 
ª∂a˚mít
;

2320 i‡(
ª∂a˚mít
->
¥ev
 !
NULL
)

2322 
ª∂a˚mít
->
¥ev
->
√xt
 =Ñeplacement;

2324 i‡(
ª∂a˚mít
->
√xt
 =
NULL
)

2326 
∑ª¡
->
chûd
->
¥ev
 = 
ª∂a˚mít
;

2330 
ôem
->
√xt
 = 
NULL
;

2331 
ôem
->
¥ev
 = 
NULL
;

2332 
	`cJSON_Dñëe
(
ôem
);

2334  
åue
;

2335 
	}
}

2337 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
, 
which
, cJSON *
√wôem
)

2339 i‡(
which
 < 0)

2341  
Ál£
;

2344  
	`cJSON_Rïœ˚IãmVüPoöãr
(
¨øy
, 
	`gë_¨øy_ôem
◊ºay, (
size_t
)
which
), 
√wôem
);

2345 
	}
}

2347 
cJSON_boﬁ
 
	$ª∂a˚_ôem_ö_obje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ª∂a˚mít
, 
cJSON_boﬁ
 
ˇ£_£nsôive
)

2349 i‡((
ª∂a˚mít
 =
NULL
Ë|| (
°rög
 == NULL))

2351  
Ál£
;

2355 i‡(!(
ª∂a˚mít
->
ty≥
 & 
cJSON_SåögIsC⁄°
Ë&& (ª∂a˚mít->
°rög
 !
NULL
))

2357 
	`cJSON_‰ì
(
ª∂a˚mít
->
°rög
);

2359 
ª∂a˚mít
->
°rög
 = (*)
	`cJSON_°rdup
((c⁄° *)°rög, &
globÆ_hooks
);

2360 
ª∂a˚mít
->
ty≥
 &~
cJSON_SåögIsC⁄°
;

2362  
	`cJSON_Rïœ˚IãmVüPoöãr
(
obje˘
, 
	`gë_obje˘_ôem
(obje˘, 
°rög
, 
ˇ£_£nsôive
), 
ª∂a˚mít
);

2363 
	}
}

2365 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
√wôem
)

2367  
	`ª∂a˚_ôem_ö_obje˘
(
obje˘
, 
°rög
, 
√wôem
, 
Ál£
);

2368 
	}
}

2370 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_Rïœ˚IãmInObje˘Ca£Sísôive
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
√wôem
)

2372  
	`ª∂a˚_ôem_ö_obje˘
(
obje˘
, 
°rög
, 
√wôem
, 
åue
);

2373 
	}
}

2376 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eNuŒ
()

2378 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2379 if(
ôem
)

2381 
ôem
->
ty≥
 = 
cJSON_NULL
;

2384  
ôem
;

2385 
	}
}

2387 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eTrue
()

2389 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2390 if(
ôem
)

2392 
ôem
->
ty≥
 = 
cJSON_True
;

2395  
ôem
;

2396 
	}
}

2398 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eFÆ£
()

2400 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2401 if(
ôem
)

2403 
ôem
->
ty≥
 = 
cJSON_FÆ£
;

2406  
ôem
;

2407 
	}
}

2409 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eBoﬁ
(
cJSON_boﬁ
 
boﬁón
)

2411 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2412 if(
ôem
)

2414 
ôem
->
ty≥
 = 
boﬁón
 ? 
cJSON_True
 : 
cJSON_FÆ£
;

2417  
ôem
;

2418 
	}
}

2420 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eNumbî
(
num
)

2422 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2423 if(
ôem
)

2425 
ôem
->
ty≥
 = 
cJSON_Numbî
;

2426 
ôem
->
vÆuedoubÀ
 = 
num
;

2429 i‡(
num
 >
INT_MAX
)

2431 
ôem
->
vÆueöt
 = 
INT_MAX
;

2433 i‡(
num
 <()
INT_MIN
)

2435 
ôem
->
vÆueöt
 = 
INT_MIN
;

2439 
ôem
->
vÆueöt
 = ()
num
;

2443  
ôem
;

2444 
	}
}

2446 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eSåög
(c⁄° *
°rög
)

2448 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2449 if(
ôem
)

2451 
ôem
->
ty≥
 = 
cJSON_Såög
;

2452 
ôem
->
vÆue°rög
 = (*)
	`cJSON_°rdup
((c⁄° *)
°rög
, &
globÆ_hooks
);

2453 if(!
ôem
->
vÆue°rög
)

2455 
	`cJSON_Dñëe
(
ôem
);

2456  
NULL
;

2460  
ôem
;

2461 
	}
}

2463 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eSåögRe„ªn˚
(c⁄° *
°rög
)

2465 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2466 i‡(
ôem
 !
NULL
)

2468 
ôem
->
ty≥
 = 
cJSON_Såög
 | 
cJSON_IsRe„ªn˚
;

2469 
ôem
->
vÆue°rög
 = (*)
	`ˇ°_away_c⁄°
(
°rög
);

2472  
ôem
;

2473 
	}
}

2475 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eObje˘Re„ªn˚
(c⁄° 
cJSON
 *
chûd
)

2477 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2478 i‡(
ôem
 !
NULL
) {

2479 
ôem
->
ty≥
 = 
cJSON_Obje˘
 | 
cJSON_IsRe„ªn˚
;

2480 
ôem
->
chûd
 = (
cJSON
*)
	`ˇ°_away_c⁄°
(child);

2483  
ôem
;

2484 
	}
}

2486 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eAºayRe„ªn˚
(c⁄° 
cJSON
 *
chûd
) {

2487 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2488 i‡(
ôem
 !
NULL
) {

2489 
ôem
->
ty≥
 = 
cJSON_Aºay
 | 
cJSON_IsRe„ªn˚
;

2490 
ôem
->
chûd
 = (
cJSON
*)
	`ˇ°_away_c⁄°
(child);

2493  
ôem
;

2494 
	}
}

2496 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eRaw
(c⁄° *
øw
)

2498 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2499 if(
ôem
)

2501 
ôem
->
ty≥
 = 
cJSON_Raw
;

2502 
ôem
->
vÆue°rög
 = (*)
	`cJSON_°rdup
((c⁄° *)
øw
, &
globÆ_hooks
);

2503 if(!
ôem
->
vÆue°rög
)

2505 
	`cJSON_Dñëe
(
ôem
);

2506  
NULL
;

2510  
ôem
;

2511 
	}
}

2513 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eAºay
()

2515 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2516 if(
ôem
)

2518 
ôem
->
ty≥
=
cJSON_Aºay
;

2521  
ôem
;

2522 
	}
}

2524 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eObje˘
()

2526 
cJSON
 *
ôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2527 i‡(
ôem
)

2529 
ôem
->
ty≥
 = 
cJSON_Obje˘
;

2532  
ôem
;

2533 
	}
}

2536 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
, 
cou¡
)

2538 
size_t
 
i
 = 0;

2539 
cJSON
 *
n
 = 
NULL
;

2540 
cJSON
 *
p
 = 
NULL
;

2541 
cJSON
 *
a
 = 
NULL
;

2543 i‡((
cou¡
 < 0Ë|| (
numbîs
 =
NULL
))

2545  
NULL
;

2548 
a
 = 
	`cJSON_Cª©eAºay
();

2550 
i
 = 0; 
a
 && (ò< (
size_t
)
cou¡
); i++)

2552 
n
 = 
	`cJSON_Cª©eNumbî
(
numbîs
[
i
]);

2553 i‡(!
n
)

2555 
	`cJSON_Dñëe
(
a
);

2556  
NULL
;

2558 if(!
i
)

2560 
a
->
chûd
 = 
n
;

2564 
	`suffix_obje˘
(
p
, 
n
);

2566 
p
 = 
n
;

2569 i‡(
a
 &&á->
chûd
) {

2570 
a
->
chûd
->
¥ev
 = 
n
;

2573  
a
;

2574 
	}
}

2576 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
, 
cou¡
)

2578 
size_t
 
i
 = 0;

2579 
cJSON
 *
n
 = 
NULL
;

2580 
cJSON
 *
p
 = 
NULL
;

2581 
cJSON
 *
a
 = 
NULL
;

2583 i‡((
cou¡
 < 0Ë|| (
numbîs
 =
NULL
))

2585  
NULL
;

2588 
a
 = 
	`cJSON_Cª©eAºay
();

2590 
i
 = 0; 
a
 && (ò< (
size_t
)
cou¡
); i++)

2592 
n
 = 
	`cJSON_Cª©eNumbî
(()
numbîs
[
i
]);

2593 if(!
n
)

2595 
	`cJSON_Dñëe
(
a
);

2596  
NULL
;

2598 if(!
i
)

2600 
a
->
chûd
 = 
n
;

2604 
	`suffix_obje˘
(
p
, 
n
);

2606 
p
 = 
n
;

2609 i‡(
a
 &&á->
chûd
) {

2610 
a
->
chûd
->
¥ev
 = 
n
;

2613  
a
;

2614 
	}
}

2616 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
, 
cou¡
)

2618 
size_t
 
i
 = 0;

2619 
cJSON
 *
n
 = 
NULL
;

2620 
cJSON
 *
p
 = 
NULL
;

2621 
cJSON
 *
a
 = 
NULL
;

2623 i‡((
cou¡
 < 0Ë|| (
numbîs
 =
NULL
))

2625  
NULL
;

2628 
a
 = 
	`cJSON_Cª©eAºay
();

2630 
i
 = 0; 
a
 && (ò< (
size_t
)
cou¡
); i++)

2632 
n
 = 
	`cJSON_Cª©eNumbî
(
numbîs
[
i
]);

2633 if(!
n
)

2635 
	`cJSON_Dñëe
(
a
);

2636  
NULL
;

2638 if(!
i
)

2640 
a
->
chûd
 = 
n
;

2644 
	`suffix_obje˘
(
p
, 
n
);

2646 
p
 = 
n
;

2649 i‡(
a
 &&á->
chûd
) {

2650 
a
->
chûd
->
¥ev
 = 
n
;

2653  
a
;

2654 
	}
}

2656 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Cª©eSåögAºay
(c⁄° *c⁄° *
°rögs
, 
cou¡
)

2658 
size_t
 
i
 = 0;

2659 
cJSON
 *
n
 = 
NULL
;

2660 
cJSON
 *
p
 = 
NULL
;

2661 
cJSON
 *
a
 = 
NULL
;

2663 i‡((
cou¡
 < 0Ë|| (
°rögs
 =
NULL
))

2665  
NULL
;

2668 
a
 = 
	`cJSON_Cª©eAºay
();

2670 
i
 = 0; 
a
 && (ò< (
size_t
)
cou¡
); i++)

2672 
n
 = 
	`cJSON_Cª©eSåög
(
°rögs
[
i
]);

2673 if(!
n
)

2675 
	`cJSON_Dñëe
(
a
);

2676  
NULL
;

2678 if(!
i
)

2680 
a
->
chûd
 = 
n
;

2684 
	`suffix_obje˘
(
p
,
n
);

2686 
p
 = 
n
;

2689 i‡(
a
 &&á->
chûd
) {

2690 
a
->
chûd
->
¥ev
 = 
n
;

2693  
a
;

2694 
	}
}

2697 
	$CJSON_PUBLIC
(
cJSON
 *Ë
	$cJSON_Du∂iˇã
(c⁄° 
cJSON
 *
ôem
, 
cJSON_boﬁ
 
ªcur£
)

2699 
cJSON
 *
√wôem
 = 
NULL
;

2700 
cJSON
 *
chûd
 = 
NULL
;

2701 
cJSON
 *
√xt
 = 
NULL
;

2702 
cJSON
 *
√wchûd
 = 
NULL
;

2705 i‡(!
ôem
)

2707 
Áû
;

2710 
√wôem
 = 
	`cJSON_New_Iãm
(&
globÆ_hooks
);

2711 i‡(!
√wôem
)

2713 
Áû
;

2716 
√wôem
->
ty≥
 = 
ôem
->ty≥ & (~
cJSON_IsRe„ªn˚
);

2717 
√wôem
->
vÆueöt
 = 
ôem
->valueint;

2718 
√wôem
->
vÆuedoubÀ
 = 
ôem
->valuedouble;

2719 i‡(
ôem
->
vÆue°rög
)

2721 
√wôem
->
vÆue°rög
 = (*)
	`cJSON_°rdup
((*)
ôem
->vÆue°rög, &
globÆ_hooks
);

2722 i‡(!
√wôem
->
vÆue°rög
)

2724 
Áû
;

2727 i‡(
ôem
->
°rög
)

2729 
√wôem
->
°rög
 = (
ôem
->
ty≥
&
cJSON_SåögIsC⁄°
Ë? iãm->°rög : (*)
	`cJSON_°rdup
((*)ôem->°rög, &
globÆ_hooks
);

2730 i‡(!
√wôem
->
°rög
)

2732 
Áû
;

2736 i‡(!
ªcur£
)

2738  
√wôem
;

2741 
chûd
 = 
ôem
->child;

2742 
chûd
 !
NULL
)

2744 
√wchûd
 = 
	`cJSON_Du∂iˇã
(
chûd
, 
åue
);

2745 i‡(!
√wchûd
)

2747 
Áû
;

2749 i‡(
√xt
 !
NULL
)

2752 
√xt
->√xà
√wchûd
;

2753 
√wchûd
->
¥ev
 = 
√xt
;

2754 
√xt
 = 
√wchûd
;

2759 
√wôem
->
chûd
 = 
√wchûd
;

2760 
√xt
 = 
√wchûd
;

2762 
chûd
 = chûd->
√xt
;

2764 i‡(
√wôem
 &&Çewôem->
chûd
)

2766 
√wôem
->
chûd
->
¥ev
 = 
√wchûd
;

2769  
√wôem
;

2771 
Áû
:

2772 i‡(
√wôem
 !
NULL
)

2774 
	`cJSON_Dñëe
(
√wôem
);

2777  
NULL
;

2778 
	}
}

2780 
	$skù_⁄ñöe_commít
(**
öput
)

2782 *
öput
 +
	`°©ic_°æí
("//");

2784 ; (*
öput
)[0] != '\0'; ++(*input))

2786 i‡((*
öput
)[0] == '\n') {

2787 *
öput
 +
	`°©ic_°æí
("\n");

2791 
	}
}

2793 
	$skù_mu…ûöe_commít
(**
öput
)

2795 *
öput
 +
	`°©ic_°æí
("/*");

2797 ; (*
öput
)[0] != '\0'; ++(*input))

2799 i‡(((*
öput
)[0] == '*') && ((*input)[1] == '/'))

2801 *
öput
 +
	`°©ic_°æí
("*/");

2805 
	}
}

2807 
	$möify_°rög
(**
öput
, **
ouçut
) {

2808 (*
ouçut
)[0] = (*
öput
)[0];

2809 *
öput
 +
	`°©ic_°æí
("\"");

2810 *
ouçut
 +
	`°©ic_°æí
("\"");

2813 ; (*
öput
)[0] !'\0'; ()++(*öput), ++(*
ouçut
)) {

2814 (*
ouçut
)[0] = (*
öput
)[0];

2816 i‡((*
öput
)[0] == '\"') {

2817 (*
ouçut
)[0] = '\"';

2818 *
öput
 +
	`°©ic_°æí
("\"");

2819 *
ouçut
 +
	`°©ic_°æí
("\"");

2821 } i‡(((*
öput
)[0] == '\\') && ((*input)[1] == '\"')) {

2822 (*
ouçut
)[1] = (*
öput
)[1];

2823 *
öput
 +
	`°©ic_°æí
("\"");

2824 *
ouçut
 +
	`°©ic_°æí
("\"");

2827 
	}
}

2829 
	$CJSON_PUBLIC
(Ë
	$cJSON_Möify
(*
js⁄
)

2831 *
öto
 = 
js⁄
;

2833 i‡(
js⁄
 =
NULL
)

2838 
js⁄
[0] != '\0')

2840 
js⁄
[0])

2846 
js⁄
++;

2850 i‡(
js⁄
[1] == '/')

2852 
	`skù_⁄ñöe_commít
(&
js⁄
);

2854 i‡(
js⁄
[1] == '*')

2856 
	`skù_mu…ûöe_commít
(&
js⁄
);

2858 
js⁄
++;

2863 
	`möify_°rög
(&
js⁄
, (**)&
öto
);

2867 
öto
[0] = 
js⁄
[0];

2868 
js⁄
++;

2869 
öto
++;

2874 *
öto
 = '\0';

2875 
	}
}

2877 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsInvÆid
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2879 i‡(
ôem
 =
NULL
)

2881  
Ál£
;

2884  (
ôem
->
ty≥
 & 0xFFË=
cJSON_InvÆid
;

2885 
	}
}

2887 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsFÆ£
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2889 i‡(
ôem
 =
NULL
)

2891  
Ál£
;

2894  (
ôem
->
ty≥
 & 0xFFË=
cJSON_FÆ£
;

2895 
	}
}

2897 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsTrue
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2899 i‡(
ôem
 =
NULL
)

2901  
Ál£
;

2904  (
ôem
->
ty≥
 & 0xffË=
cJSON_True
;

2905 
	}
}

2908 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsBoﬁ
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2910 i‡(
ôem
 =
NULL
)

2912  
Ál£
;

2915  (
ôem
->
ty≥
 & (
cJSON_True
 | 
cJSON_FÆ£
)) != 0;

2916 
	}
}

2917 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsNuŒ
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2919 i‡(
ôem
 =
NULL
)

2921  
Ál£
;

2924  (
ôem
->
ty≥
 & 0xFFË=
cJSON_NULL
;

2925 
	}
}

2927 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsNumbî
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2929 i‡(
ôem
 =
NULL
)

2931  
Ál£
;

2934  (
ôem
->
ty≥
 & 0xFFË=
cJSON_Numbî
;

2935 
	}
}

2937 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsSåög
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2939 i‡(
ôem
 =
NULL
)

2941  
Ál£
;

2944  (
ôem
->
ty≥
 & 0xFFË=
cJSON_Såög
;

2945 
	}
}

2947 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsAºay
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2949 i‡(
ôem
 =
NULL
)

2951  
Ál£
;

2954  (
ôem
->
ty≥
 & 0xFFË=
cJSON_Aºay
;

2955 
	}
}

2957 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsObje˘
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2959 i‡(
ôem
 =
NULL
)

2961  
Ál£
;

2964  (
ôem
->
ty≥
 & 0xFFË=
cJSON_Obje˘
;

2965 
	}
}

2967 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_IsRaw
(c⁄° 
cJSON
 * c⁄° 
ôem
)

2969 i‡(
ôem
 =
NULL
)

2971  
Ál£
;

2974  (
ôem
->
ty≥
 & 0xFFË=
cJSON_Raw
;

2975 
	}
}

2977 
	$CJSON_PUBLIC
(
cJSON_boﬁ
Ë
	$cJSON_Com∑ª
(c⁄° 
cJSON
 * c⁄° 
a
, c⁄° cJSON * c⁄° 
b
, c⁄° 
cJSON_boﬁ
 
ˇ£_£nsôive
)

2979 i‡((
a
 =
NULL
Ë|| (
b
 =NULLË|| (◊->
ty≥
 & 0xFF) != (b->type & 0xFF)))

2981  
Ál£
;

2985 
a
->
ty≥
 & 0xFF)

2987 
cJSON_FÆ£
:

2988 
cJSON_True
:

2989 
cJSON_NULL
:

2990 
cJSON_Numbî
:

2991 
cJSON_Såög
:

2992 
cJSON_Raw
:

2993 
cJSON_Aºay
:

2994 
cJSON_Obje˘
:

2998  
Ál£
;

3002 i‡(
a
 =
b
)

3004  
åue
;

3007 
a
->
ty≥
 & 0xFF)

3010 
cJSON_FÆ£
:

3011 
cJSON_True
:

3012 
cJSON_NULL
:

3013  
åue
;

3015 
cJSON_Numbî
:

3016 i‡(
	`com∑ª_doubÀ
(
a
->
vÆuedoubÀ
, 
b
->valuedouble))

3018  
åue
;

3020  
Ál£
;

3022 
cJSON_Såög
:

3023 
cJSON_Raw
:

3024 i‡((
a
->
vÆue°rög
 =
NULL
Ë|| (
b
->valuestring == NULL))

3026  
Ál£
;

3028 i‡(
	`°rcmp
(
a
->
vÆue°rög
, 
b
->valuestring) == 0)

3030  
åue
;

3033  
Ál£
;

3035 
cJSON_Aºay
:

3037 
cJSON
 *
a_ñemít
 = 
a
->
chûd
;

3038 
cJSON
 *
b_ñemít
 = 
b
->
chûd
;

3040 ; (
a_ñemít
 !
NULL
Ë&& (
b_ñemít
 != NULL);)

3042 i‡(!
	`cJSON_Com∑ª
(
a_ñemít
, 
b_ñemít
, 
ˇ£_£nsôive
))

3044  
Ál£
;

3047 
a_ñemít
 =á_ñemít->
√xt
;

3048 
b_ñemít
 = b_ñemít->
√xt
;

3052 i‡(
a_ñemít
 !
b_ñemít
) {

3053  
Ál£
;

3056  
åue
;

3059 
cJSON_Obje˘
:

3061 
cJSON
 *
a_ñemít
 = 
NULL
;

3062 
cJSON
 *
b_ñemít
 = 
NULL
;

3063 
	`cJSON_AºayF‹Each
(
a_ñemít
, 
a
)

3066 
b_ñemít
 = 
	`gë_obje˘_ôem
(
b
, 
a_ñemít
->
°rög
, 
ˇ£_£nsôive
);

3067 i‡(
b_ñemít
 =
NULL
)

3069  
Ál£
;

3072 i‡(!
	`cJSON_Com∑ª
(
a_ñemít
, 
b_ñemít
, 
ˇ£_£nsôive
))

3074  
Ál£
;

3080 
	`cJSON_AºayF‹Each
(
b_ñemít
, 
b
)

3082 
a_ñemít
 = 
	`gë_obje˘_ôem
(
a
, 
b_ñemít
->
°rög
, 
ˇ£_£nsôive
);

3083 i‡(
a_ñemít
 =
NULL
)

3085  
Ál£
;

3088 i‡(!
	`cJSON_Com∑ª
(
b_ñemít
, 
a_ñemít
, 
ˇ£_£nsôive
))

3090  
Ál£
;

3094  
åue
;

3098  
Ál£
;

3100 
	}
}

3102 
	$CJSON_PUBLIC
(*Ë
	$cJSON_mÆloc
(
size_t
 
size
)

3104  
globÆ_hooks
.
	`Æloˇã
(
size
);

3105 
	}
}

3107 
	$CJSON_PUBLIC
(Ë
	$cJSON_‰ì
(*
obje˘
)

3109 
globÆ_hooks
.
	`dóŒoˇã
(
obje˘
);

3110 
	}
}

	@src/cJSON.h

23 #i‚de‡
cJSON__h


24 
	#cJSON__h


	)

26 #ifde‡
__˝lu•lus


31 #i‡!
deföed
(
__WINDOWS__
Ë&& (deföed(
WIN32
Ë|| deföed(
WIN64
Ë|| deföed(
_MSC_VER
Ë|| deföed(
_WIN32
))

32 
	#__WINDOWS__


	)

35 #ifde‡
__WINDOWS__


55 
	#CJSON_CDECL
 
__cde˛


	)

56 
	#CJSON_STDCALL
 
__°dˇŒ


	)

59 #i‡!
deföed
(
CJSON_HIDE_SYMBOLS
Ë&& !deföed(
CJSON_IMPORT_SYMBOLS
Ë&& !deföed(
CJSON_EXPORT_SYMBOLS
)

60 
	#CJSON_EXPORT_SYMBOLS


	)

63 #i‡
deföed
(
CJSON_HIDE_SYMBOLS
)

64 
	#CJSON_PUBLIC
(
ty≥
Ëty≥ 
CJSON_STDCALL


	)

65 #ñi‡
deföed
(
CJSON_EXPORT_SYMBOLS
)

66 
	#CJSON_PUBLIC
(
ty≥
Ë
	`__de˛•ec
(
dŒexp‹t
Ëty≥ 
CJSON_STDCALL


	)

67 #ñi‡
deföed
(
CJSON_IMPORT_SYMBOLS
)

68 
	#CJSON_PUBLIC
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ëty≥ 
CJSON_STDCALL


	)

71 
	#CJSON_CDECL


	)

72 
	#CJSON_STDCALL


	)

74 #i‡(
deföed
(
__GNUC__
Ë|| deföed(
__SUNPRO_CC
Ë|| deföed (
__SUNPRO_C
)Ë&& deföed(
CJSON_API_VISIBILITY
)

75 
	#CJSON_PUBLIC
(
ty≥
Ë
	`__©åibuã__
((
	`visibûôy
("deÁu…"))Ë
	)
type

77 
	#CJSON_PUBLIC
(
ty≥
Ë
	)
type

82 
	#CJSON_VERSION_MAJOR
 1

	)

83 
	#CJSON_VERSION_MINOR
 7

	)

84 
	#CJSON_VERSION_PATCH
 15

	)

86 
	~<°ddef.h
>

89 
	#cJSON_InvÆid
 (0)

	)

90 
	#cJSON_FÆ£
 (1 << 0)

	)

91 
	#cJSON_True
 (1 << 1)

	)

92 
	#cJSON_NULL
 (1 << 2)

	)

93 
	#cJSON_Numbî
 (1 << 3)

	)

94 
	#cJSON_Såög
 (1 << 4)

	)

95 
	#cJSON_Aºay
 (1 << 5)

	)

96 
	#cJSON_Obje˘
 (1 << 6)

	)

97 
	#cJSON_Raw
 (1 << 7Ë

	)

99 
	#cJSON_IsRe„ªn˚
 256

	)

100 
	#cJSON_SåögIsC⁄°
 512

	)

103 
	scJSON


106 
cJSON
 *
√xt
;

107 
cJSON
 *
¥ev
;

109 
cJSON
 *
chûd
;

112 
ty≥
;

115 *
vÆue°rög
;

117 
vÆueöt
;

119 
vÆuedoubÀ
;

122 *
°rög
;

123 } 
	tcJSON
;

125 
	scJSON_Hooks


128 *(
CJSON_CDECL
 *
mÆloc_‚
)(
size_t
 
sz
);

129 (
CJSON_CDECL
 *
‰ì_‚
)(*
±r
);

130 } 
	tcJSON_Hooks
;

132 
	tcJSON_boﬁ
;

136 #i‚de‡
CJSON_NESTING_LIMIT


137 
	#CJSON_NESTING_LIMIT
 1000

	)

141 
CJSON_PUBLIC
(c⁄° *Ë
cJSON_Vîsi⁄
();

144 
CJSON_PUBLIC
(Ë
cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
);

148 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_P¨£
(c⁄° *
vÆue
);

149 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_P¨£WôhLígth
(c⁄° *
vÆue
, 
size_t
 
buf„r_Àngth
);

152 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_P¨£WôhO±s
(c⁄° *
vÆue
, c⁄° **
ªtu∫_∑r£_íd
, 
cJSON_boﬁ
 
ªquúe_nuŒ_ãrmö©ed
);

153 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_P¨£WôhLígthO±s
(c⁄° *
vÆue
, 
size_t
 
buf„r_Àngth
, c⁄° **
ªtu∫_∑r£_íd
, 
cJSON_boﬁ
 
ªquúe_nuŒ_ãrmö©ed
);

156 
CJSON_PUBLIC
(*Ë
cJSON_Pröt
(c⁄° 
cJSON
 *
ôem
);

158 
CJSON_PUBLIC
(*Ë
cJSON_PrötUnf‹m©ãd
(c⁄° 
cJSON
 *
ôem
);

160 
CJSON_PUBLIC
(*Ë
cJSON_PrötBuf„ªd
(c⁄° 
cJSON
 *
ôem
, 
¥ebuf„r
, 
cJSON_boﬁ
 
fmt
);

163 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_PrötPªÆloˇãd
(
cJSON
 *
ôem
, *
buf„r
, c⁄° 
Àngth
, c⁄° cJSON_boﬁ 
f‹m©
);

165 
CJSON_PUBLIC
(Ë
cJSON_Dñëe
(
cJSON
 *
ôem
);

168 
CJSON_PUBLIC
(Ë
cJSON_GëAºaySize
(c⁄° 
cJSON
 *
¨øy
);

170 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_GëAºayIãm
(c⁄° cJSON *
¨øy
, 
ödex
);

172 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_GëObje˘Iãm
(c⁄° cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
°rög
);

173 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_GëObje˘IãmCa£Sísôive
(c⁄° cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
°rög
);

174 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_HasObje˘Iãm
(c⁄° 
cJSON
 *
obje˘
, c⁄° *
°rög
);

176 
CJSON_PUBLIC
(c⁄° *Ë
cJSON_GëEº‹På
();

179 
CJSON_PUBLIC
(*Ë
cJSON_GëSåögVÆue
(c⁄° 
cJSON
 * c⁄° 
ôem
);

180 
CJSON_PUBLIC
(Ë
cJSON_GëNumbîVÆue
(c⁄° 
cJSON
 * c⁄° 
ôem
);

183 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsInvÆid
(c⁄° 
cJSON
 * c⁄° 
ôem
);

184 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsFÆ£
(c⁄° 
cJSON
 * c⁄° 
ôem
);

185 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsTrue
(c⁄° 
cJSON
 * c⁄° 
ôem
);

186 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsBoﬁ
(c⁄° 
cJSON
 * c⁄° 
ôem
);

187 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsNuŒ
(c⁄° 
cJSON
 * c⁄° 
ôem
);

188 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsNumbî
(c⁄° 
cJSON
 * c⁄° 
ôem
);

189 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsSåög
(c⁄° 
cJSON
 * c⁄° 
ôem
);

190 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsAºay
(c⁄° 
cJSON
 * c⁄° 
ôem
);

191 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsObje˘
(c⁄° 
cJSON
 * c⁄° 
ôem
);

192 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsRaw
(c⁄° 
cJSON
 * c⁄° 
ôem
);

195 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eNuŒ
();

196 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eTrue
();

197 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eFÆ£
();

198 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eBoﬁ
(
cJSON_boﬁ
 
boﬁón
);

199 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eNumbî
(
num
);

200 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eSåög
(c⁄° *
°rög
);

202 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eRaw
(c⁄° *
øw
);

203 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eAºay
();

204 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eObje˘
();

208 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eSåögRe„ªn˚
(c⁄° *
°rög
);

211 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eObje˘Re„ªn˚
(c⁄° cJSON *
chûd
);

212 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eAºayRe„ªn˚
(c⁄° cJSON *
chûd
);

216 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
, 
cou¡
);

217 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
, 
cou¡
);

218 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
, 
cou¡
);

219 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eSåögAºay
(c⁄° *c⁄° *
°rögs
, 
cou¡
);

222 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

223 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
);

227 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmToObje˘CS
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
);

229 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

230 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
);

233 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_DëachIãmVüPoöãr
(cJSON *
∑ª¡
, cJSON * c⁄° 
ôem
);

234 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_DëachIãmFromAºay
(cJSON *
¨øy
, 
which
);

235 
CJSON_PUBLIC
(Ë
cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
, 
which
);

236 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_DëachIãmFromObje˘
(cJSON *
obje˘
, c⁄° *
°rög
);

237 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_DëachIãmFromObje˘Ca£Sísôive
(cJSON *
obje˘
, c⁄° *
°rög
);

238 
CJSON_PUBLIC
(Ë
cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
);

239 
CJSON_PUBLIC
(Ë
cJSON_DñëeIãmFromObje˘Ca£Sísôive
(
cJSON
 *
obje˘
, c⁄° *
°rög
);

242 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_In£πIãmInAºay
(
cJSON
 *
¨øy
, 
which
, cJSON *
√wôem
);

243 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Rïœ˚IãmVüPoöãr
(
cJSON
 * c⁄° 
∑ª¡
, cJSON * c⁄° 
ôem
, cJSON * 
ª∂a˚mít
);

244 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
, 
which
, cJSON *
√wôem
);

245 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
);

246 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Rïœ˚IãmInObje˘Ca£Sísôive
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
);

249 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Du∂iˇã
(c⁄° cJSON *
ôem
, 
cJSON_boﬁ
 
ªcur£
);

255 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Com∑ª
(c⁄° 
cJSON
 * c⁄° 
a
, c⁄° cJSON * c⁄° 
b
, c⁄° cJSON_boﬁ 
ˇ£_£nsôive
);

260 
CJSON_PUBLIC
(Ë
cJSON_Möify
(*
js⁄
);

264 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddNuŒToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

265 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddTrueToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

266 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddFÆ£ToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

267 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddBoﬁToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° 
cJSON_boﬁ
 
boﬁón
);

268 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddNumbîToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° 
numbî
);

269 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddSåögToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° * c⁄° 
°rög
);

270 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddRawToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° * c⁄° 
øw
);

271 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddObje˘ToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

272 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddAºayToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

275 
	#cJSON_SëI¡VÆue
(
obje˘
, 
numbî
Ë((obje˘Ë? (obje˘)->
vÆueöt
 = (obje˘)->
vÆuedoubÀ
 = (numbîË: (numbî))

	)

277 
CJSON_PUBLIC
(Ë
cJSON_SëNumbîHñ≥r
(
cJSON
 *
obje˘
, 
numbî
);

278 
	#cJSON_SëNumbîVÆue
(
obje˘
, 
numbî
Ë((obje˘ !
NULL
Ë? 
	`cJSON_SëNumbîHñ≥r
(obje˘, (ÍumbîË: (numbî))

	)

280 
CJSON_PUBLIC
(*Ë
cJSON_SëVÆue°rög
(
cJSON
 *
obje˘
, c⁄° *
vÆue°rög
);

283 
	#cJSON_AºayF‹Each
(
ñemít
, 
¨øy
Ëñemíà◊ºay !
NULL
Ë? (¨øy)->
chûd
 : NULL;ÉÀmíà!NULL;ÉÀmíàñemít->
√xt
)

	)

286 
CJSON_PUBLIC
(*Ë
cJSON_mÆloc
(
size_t
 
size
);

287 
CJSON_PUBLIC
(Ë
cJSON_‰ì
(*
obje˘
);

289 #ifde‡
__˝lu•lus


	@src/database.c

14 
	~"d©aba£.h
"

16 
	#TABLE_NAME
 "Clõ¡TabÀ"

	)

17 
sqlôe3
 *
	gs_˛idb
 = 
NULL
;

19 
	$d©aba£_¸óã
(c⁄° *
db_fûe
)

21 *
zEºMsg
 = 0;

22 
rc
;

23 
sql
[512];

26 if–
SQLITE_OK
 !
	`sqlôe3_›í
(
db_fûe
,&
s_˛idb
) )

28 
	`log_îr‹
 ("O≥¿d©aba£ fûê'%s' faûuª\n",
db_fûe
);

33 
	`log_öfo
 ("O≥¿d©aba£ '%s' suc˚ssfuŒy!\n",
db_fûe
);

38 
	`¢¥ötf
(
sql
,512,"CREATE TABLE IF NOT EXISTS %s(¢ TEXT NOT NULL,timêTEXT NOT NULL,ãm∞REAL NOT NULL)",
TABLE_NAME
);

41 
rc
 = 
	`sqlôe3_exec
(
s_˛idb
,
sql
,0,0,&
zEºMsg
);

42 if(
rc
 !
SQLITE_OK
)

44 
	`log_îr‹
 ("SQLÉº‹:%s\n",
zEºMsg
);

45 
	`sqlôe3_‰ì
(
zEºMsg
);

46 
	`d©aba£_ãrm
();

47  
rc
=-2;

50 
	`log_öfo
 ("Table created successfully\n");

52 
	}
}

55 
	$d©aba£_ö£π
(
d©a_s
 *
Æl_d©a
)

57 *
zEºMsg
 = 0;

58 
rc
;

59 
sql
[512];

61 if–!
Æl_d©a
 )

63 
	`log_îr‹
("%s(ËInvaûd i≈uà¨gumíts\n",
__func__
);

67 if–!
s_˛idb
 )

69 
	`log_îr‹
 ("SQL databaseÇot opened!\n");

74 
	`¢¥ötf
(
sql
,512,"INSERT INTO %s(sn,time,temp) VALUES ('%s','%s',%.2f)",

75 
TABLE_NAME
,
Æl_d©a
->
devid
,Æl_d©a->
ßm∂e_time
,Æl_d©a->
ãmp
);

78 
rc
 = 
	`sqlôe3_exec
(
s_˛idb
, 
sql
, 0, 0, &
zEºMsg
);

79 if–
rc
 !
SQLITE_OK
 )

81 
	`log_îr‹
 ("SQLÉº‹:%s\n",
zEºMsg
);

82 
	`sqlôe3_‰ì
(
zEºMsg
);

83  
rc
=-2;

86 
	`log_öfo
 ("Records created successfully\n");

89 
	}
}

91 
	$d©aba£_dñëe
()

93 *
zEºMsg
=
NULL
;

94 
rc
;

95 
sql
[128];

96 c⁄° * 
d©a
 = "Callback function called";

100 
	`¢¥ötf
(
sql
,128,"DELETE from %s where ROWID IN(SELECT ROWID from %s LIMIT 1)",

101 
TABLE_NAME
,TABLE_NAME);

104 
rc
 = 
	`sqlôe3_exec
(
s_˛idb
,
sql
,0,0,&
zEºMsg
);

105 if–
rc
!
SQLITE_OK
 )

107 
	`log_îr‹
 ("SQL(dñëeËîr‹:%s\n",
zEºMsg
);

108 
	`sqlôe3_‰ì
(
zEºMsg
);

109  
rc
=-2;

112 
	`log_öfo
 ("DeleteáÑow data successfully\n");

114 
	}
}

117 
	$ˇŒback
(*
d©a
,
¨gc
,**
¨gv
,**
azCﬁName
)

119 
i
;

120 
	`log_îr‹
 ("%s:",(c⁄° *)
d©a
);

121 
i
=0;i<
¨gc
;i++)

122 
	`log_öfo
 ("%s=%s\t",
azCﬁName
[
i
],
¨gv
[i] ?árgv[i]:
NULL
);

124 
	`log_öfo
 ("\n");

126 
	}
}

129 
	$d©aba£_£À˘
()

131 *
zEºMsg
=0;

132 
rc
;

133 
sql
[128];

134 c⁄° * 
d©a
="Callback function called";

137 
	`¢¥ötf
(
sql
,128,"SELECT * from %s",
TABLE_NAME
);

139 
rc
 = 
	`sqlôe3_exec
(
s_˛idb
,
sql
,
ˇŒback
,(*)
d©a
,&
zEºMsg
);

140 if(
rc
 !
SQLITE_OK
)

142 
	`log_îr‹
 ("SQL(£À˘Ëîr‹:%s\n",
zEºMsg
);

143 
	`sqlôe3_‰ì
(
zEºMsg
);

144  
rc
=-2;

147 
	`log_öfo
 ("Selectáll datas successfully\n");

148  
rc
;

149 
	}
}

152 
	$dëîmöe_d©a_exi°
(*
π_buf
)

154 
£nd©a_buf„r2
[128];

155 
rc
 = -1;

156 *
zEºMsg
=0;

157 **
dbResu…
;

158 
nRow
=0,
nCﬁumn
=0;

160 
	`mem£t
(
£nd©a_buf„r2
,0,(sendata_buffer2));

161 
	`¢¥ötf
(
£nd©a_buf„r2
,128,"SELECT * from %s",
TABLE_NAME
);

163 
rc
=
	`sqlôe3_gë_èbÀ
(
s_˛idb
,
£nd©a_buf„r2
,&
dbResu…
,&
nRow
,&
nCﬁumn
,&
zEºMsg
);

164 if(
rc
!
SQLITE_OK
)

166 
	`log_îr‹
 ("Execuã sqlôe3_gë_èbÀ faûuª:%s\n",
zEºMsg
);

167 
	`sqlôe3_‰ì
(
zEºMsg
);

168 
	`d©aba£_ãrm
();

169 
	`exô
(0);

172 
	`mem£t
(
π_buf
,0,128);

173 if–0 !
nRow
)

175 
	`¢¥ötf
(
π_buf
,128,"%†%†%.2f",
dbResu…
[3],dbResu…[4],
	`©of
(dbResult[5]));

176 
	`log_öfo
 ("%s,%s,%s\n",
dbResu…
[3],dbResult[4],dbResult[5]);

177 
	`log_debug
 ("debug01:%s\n",
π_buf
);

180 
	`sqlôe3_‰ì_èbÀ
(
dbResu…
);

181  
nRow
;

182 
	}
}

185 
	$d©aba£_ãrm
()

187 
	`sqlôe3_˛o£
(
s_˛idb
);

189 
	}
}

	@src/database.h

14 #i‚de‡
_DATABASE_H_


15 
	#_DATABASE_H_


	)

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<sqlôe3.h
>

20 
	~<°rög.h
>

21 
	~"func.h
"

22 
	~"loggî.h
"

24 
	#CONFIG_DEBUG


	)

25 #ifde‡ 
CONFIG_DEBUG


26 
	#dbg_¥öt
(
f‹m©
,
¨gs
...Ë
	`¥ötf
(f‹m©,##¨gs)

	)

28 
	#dbg_¥öt
(
f‹m©
,
¨gs
...Ëdo{} 0)

	)

31 
	#MAX_SIZE
 20

	)

32 
d©aba£_¸óã
(c⁄° *
db_fûe
);

33 
d©aba£_ö£π
(
d©a_s
 *
Æl_d©a
);

34 
d©aba£_dñëe
();

35 
d©aba£_£À˘
();

36 
dëîmöe_d©a_exi°
(*
å_buf
);

37 
d©aba£_ãrm
();

38 
ˇŒback
(*
d©a
,
¨gc
,**
¨gv
,**
azCﬁName
);

	@src/ds18b20.c

14 
	~"ds18b20.h
"

16 
	$gë_ãm≥øtuª
(*
ãmp
)

18 
fd
=-1;

19 
buf
[128];

20 *
±r
=
NULL
;

21 
DIR
 *
dúp
=
NULL
;

22 
dúít
 *
dúíç
=
NULL
;

23 
w1_∑th
[64]="/sys/bus/w1/devices/";

24 
chù_¢
[32];

25 
found
=0;

26 
rv
=10;

28 
dúp
=
	`›ídú
(
w1_∑th
);

29 if(!
dúp
)

31 
	`log_îr‹
 ("O≥¿Êodî %†Áûuª:%S\n",
w1_∑th
,
	`°ªº‹
(
î∫o
));

32 
rv
=-1;

33 
˛ónup
;

36 
NULL
 !(
dúíç
=
	`ªaddú
(
dúp
)))

38 if(
	`°r°r
(
dúíç
->
d_«me
,"28-"))

40 
	`°∫˝y
(
chù_¢
,
dúíç
->
d_«me
,(chip_sn));

41 
found
=1;

44 
	`˛o£dú
(
dúp
);

45 
dúp
=
NULL
;

47 if(!
found
)

50 
	`log_îr‹
 ("Cannot find ds18b20 chipset\n");

51 
rv
=-2;

52 
˛ónup
;

54 
	`°∫ˇt
(
w1_∑th
,
chù_¢
,(w1_∑th)-
	`°æí
(w1_path));

55 
	`°∫ˇt
(
w1_∑th
,"/w1_¶ave",(w1_∑th)-
	`°æí
(w1_path));

57 
fd
=
	`›í
(
w1_∑th
,
O_RDONLY
);

58 if(
fd
<0)

60 
	`log_îr‹
 ("O≥¿fûêÁûuª:%s\n",
	`°ªº‹
(
î∫o
));

61 
rv
=-3;

62 
˛ónup
;

65 
	`mem£t
(
buf
,0,(buf));

67 if(
	`ªad
(
fd
,
buf
,(buf))<0)

70 
	`log_îr‹
 ("Ród fûêÁûuª:%s\n",
	`°ªº‹
(
î∫o
));

71 
rv
=-4;

72 
˛ónup
;

75 
±r
 = 
	`°r°r
(
buf
,"t=");

76 if(!
±r
)

79 
	`log_îr‹
 ("CanÇot find stringÅ=\n");

80 
rv
 =-5;

81 
˛ónup
;

83 
±r
 += 2;

84 *
ãmp
=
	`©of
(
±r
)/1000;

87 
˛ónup
:

88 if(
fd
)

89 
	`˛o£
(
fd
);

90 if(!
dúp
)

91 
	`˛o£dú
(
dúp
);

93  
rv
;

94 
	}
}

	@src/ds18b20.h

15 #i‚de‡ 
_DS18B20_H_


16 
	#_DS18B20_H_


	)

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<uni°d.h
>

21 
	~<f˙é.h
>

22 
	~<dúít.h
>

23 
	~<°rög.h
>

24 
	~<time.h
>

25 
	~<î∫o.h
>

27 
	~"loggî.h
"

29 
gë_ãm≥øtuª
(*
ãmp
);

	@src/func.c

16 
	~"func.h
"

18 
	$¥öt_ußge
(*
¥og«me
)

20 
	`¥ötf
("%s:ußge:\n",
¥og«me
);

21 
	`¥ötf
 ("%†i†LögYu¿°udiÿãm≥øtuª CSÖrogømÑu¬ög o¿Ra•bîryPi\n", 
¥og«me
);

22 
	`¥ötf
("-i(--ipaddr) :specify server IPáddress.\n");

23 
	`¥ötf
("-p(--port) :specify serverÖort.\n");

24 
	`¥ötf
 ("-t(--time) :temp uploadÅime.Default 60s\n");

25 
	`¥ötf
 ("-d(--debug) :running in debug mode\n");

26 
	`¥ötf
("-h(--help) :printÅhis help information.\n");

27 
	`¥ötf
 ("test:make successfully?\n");

30 
	}
}

32 
	$gë_devid
(*
id
, 
size
, 
¢
)

34 
rv
=0;

36 if–!
id
 || 
size
<
DEVICEID_LEN
 )

38 
	`log_îr‹
 ("Argumíàîr‹:%s\n",
	`°ªº‹
(
î∫o
));

39 
rv
=-1;

42 
	`mem£t
(
id
, 0, 
size
);

43 
	`¢¥ötf
(
id
, 
size
, "DEVID%03d", 
¢
);

44  
rv
;

45 
	}
}

47 
	$gë_time
(*
time_buf
, 
size
)

49 
time_t
 
timï
;

50 
tm
 *
p
;

52 if–!
time_buf
 || 
size
<
TIME_LEN
 )

54 
	`log_îr‹
 ("Argumíàîr‹:%s\n",
	`°ªº‹
(
î∫o
));

58 
	`time
(&
timï
);

59 
p
=
	`loˇ…ime
(&
timï
);

61 
	`mem£t
(
time_buf
,0,
size
);

63 
	`¢¥ötf
(
time_buf
, 128, "%d/%d/%d--%d:%d:%d", 1900+
p
->
tm_yór
, 1+p->
tm_m⁄
,

64 
p
->
tm_mday
,Ö->
tm_hour
,Ö->
tm_mö
,Ö->
tm_£c
);

66 
	`log_debug
 ("%s\n",
time_buf
);

69 
	}
}

	@src/func.h

14 #i‚de‡ 
_FUNC_H_


15 
	#_FUNC_H_


	)

17 
	~<°dio.h
>

18 
	~<°rög.h
>

19 
	~<î∫o.h
>

20 
	~<time.h
>

21 
	~<°dlib.h
>

22 
	~<uni°d.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<f˙é.h
>

25 
	~<dúít.h
>

26 
	~<î∫o.h
>

27 
	~"ds18b20.h
"

28 
	~"loggî.h
"

30 
	#MAX_SIZE
 20

	)

31 
	#DEVICEID_LEN
 16

	)

32 
	#TIME_LEN
 64

	)

35 
	#CONFIG_DEBUG


	)

36 #ifde‡ 
CONFIG_DEBUG


37 
	#dbg_¥öt
(
f‹m©
,
¨gs
...Ë
	`¥ötf
(f‹m©,##¨gs)

	)

39 
	#dbg_¥öt
(
f‹m©
,
¨gs
...Ëdo{} 0)

	)

42 (* 
	t∑ck_func_t
)(
	td©a_s
 *
	tÆl_d©a
, *
	tÆl_buf
, 
	tsize
);

44 
	`gë_devid
(*
id
, 
size
, 
¢
);

45 
	`gë_time
(*
time_buf
, 
size
);

46 
	`¥öt_ußge
(*
¥og«me
);

47 
	`gë_ãm≥øtuª
(*
ãmp
);

49 
ölöe
 
	$m¶ìp
(
ms
)

51 
time•ec
 
cSÀï
;

52 
ulTmp
;

54 
cSÀï
.
tv_£c
 = 
ms
 / 1000;

55 if–
cSÀï
.
tv_£c
 == 0 )

57 
ulTmp
 = 
ms
 * 10000;

58 
cSÀï
.
tv_n£c
 = 
ulTmp
 * 100;

62 
cSÀï
.
tv_n£c
 = 0;

65 
	`«no¶ìp
(&
cSÀï
, 0);

67 
	}
}

	@src/logger.c

14 
	~<°dio.h
>

15 
	~<î∫o.h
>

16 
	~<°dlib.h
>

17 
	~<°d¨g.h
>

18 
	~<°rög.h
>

19 
	~<time.h
>

20 
	~<uni°d.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/time.h
>

23 
	~<±hªad.h
>

25 
	~"loggî.h
"

27 (*
	tlog_LockFn
)(*
	tud©a
, 
	tlock
);

30 
fûe
[32];

31 
FILE
 *
Â
;

32 
size
;

33 
Àvñ
;

34 
log_LockFn
 
lock‚
;

35 *
ud©a
;

36 } 
L
;

38 c⁄° *
Àvñ_«mes
[] = {

44 
	}
};

46 c⁄° *
	gÀvñ_cﬁ‹s
[] = {

54 
ölöe
 
	$time_to_°r
(*
buf
)

56 
timevÆ
 
tv
;

57 
tm
 *tm;

58 
Àn
;

60 
	`gëtimeofday
(&
tv
, 
NULL
);

61 
tm
 = 
	`loˇ…ime
(&
tv
.
tv_£c
);

63 
Àn
 = 
	`•rötf
(
buf
, "%04d-%02d-%02d %02d:%02d:%02d.%06d ",

64 
tm
->
tm_yór
 + 1900,Åm->
tm_m⁄
 + 1,Åm->
tm_mday
,

65 
tm
->
tm_hour
,Åm->
tm_mö
,Åm->
tm_£c
, ()
tv
.
tv_u£c
);

67 
buf
[
Àn
] = '\0';

68 
	}
}

70 
	$muãx_lock
(*
ud©a
, 
lock
)

72 
îr
;

73 
±hªad_muãx_t
 *
l
 = (±hªad_muãx_à*Ë
ud©a
;

75 i‡(
lock
)

77 i‡–(
îr
 = 
	`±hªad_muãx_lock
(
l
)) != 0 )

78 
	`log_îr‹
("U«bÀÅÿlockÜogÜock: %s", 
	`°ªº‹
(
îr
));

82 i‡–(
îr
 = 
	`±hªad_muãx_u∆ock
(
l
) != 0) )

83 
	`log_îr‹
("U«bÀÅÿu∆ockÜogÜock: %s", 
	`°ªº‹
(
îr
));

85 
	}
}

87 
	$log_›í
(*
‚ame
, 
Àvñ
, 
size
, 
lock
)

89 
FILE
 *
Â
;

91 
L
.
Àvñ
 =Üevel;

92 
L
.
size
 = size*1024;

94 if–!
‚ame
 || !
	`°rcmp
(fname, "console") || !strcmp(fname, "stderr") )

96 
	`°r˝y
(
L
.
fûe
, "console");

97 
L
.
Â
 = 
°dîr
;

98 
L
.
size
 = 0;

102 i‡–!(
Â
 = 
	`f›í
(
‚ame
, "a+")) )

104 
	`Ârötf
(
°dîr
, "%s(ËÁûed: %s\n", 
__func__
, 
	`°ªº‹
(
î∫o
));

107 
L
.
Â
 = fp;

108 
	`°∫˝y
(
L
.
fûe
, 
‚ame
, (L.file));

112 if–
lock
 )

114 
±hªad_muãx_t
 
log_lock
;

116 
	`±hªad_muãx_öô
(&
log_lock
, 
NULL
);

117 
L
.
ud©a
 = (*)&
log_lock
;

118 
L
.
lock‚
 = 
muãx_lock
;

121 
	`Ârötf
(
L
.
Â
, "\n");

122 
	`log_öfo
("logger system(%s) start: file:\"%s\",Üevel:%s, maxsize:%luKiB\n\n",

123 
LOG_VERSION
, 
L
.
fûe
, 
Àvñ_«mes
[
Àvñ
], 
size
);

126 
	}
}

128 
	$log_˛o£
()

130 if–
L
.
Â
 && L.Â!=
°dîr
 )

131 
	`f˛o£
(
L
.
Â
);

133 i‡(
L
.
ud©a
 )

134 
	`±hªad_muãx_de°roy
–
L
.
ud©a
);

135 
	}
}

137 
	$log_rﬁlback
()

139 
cmd
[128]={0};

140 
fsize
;

143 if(
L
.
size
 <= 0 )

146 
fsize
 = 
	`·ñl
(
L
.
Â
);

147 if–
fsize
 < 
L
.
size
 )

151 
	`¢¥ötf
(
cmd
, (cmd), "˝ %†%s.bak", 
L
.
fûe
, L.file);

152 
	`sy°em
(
cmd
);

155 
	`f£ek
(
L
.
Â
, 0, 
SEEK_SET
);

156 
	`åunˇã
(
L
.
fûe
, 0);

158 
	`Ârötf
(
L
.
Â
, "\n");

159 
	`log_öfo
("logger system(%s)Ñollback: file:\"%s\",Üevel:%s, maxsize:%luKiB\n\n",

160 
LOG_VERSION
, 
L
.
fûe
, 
Àvñ_«mes
[L.
Àvñ
], L.
size
/1024);

163 
	}
}

165 
	$_log_wrôe
(
Àvñ
, c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...)

167 
va_li°
 
¨gs
;

168 
time_°rög
[100];

170 i‡–!
L
.
Â
 || 
Àvñ
>L.level )

174 i‡–
L
.
lock‚
 )

175 
L
.
	`lock‚
(L.
ud©a
, 1);

177 
	`log_rﬁlback
();

180 
	`time_to_°r
(
time_°rög
);

183 i‡–
L
.
Â
 =
°dîr
 )

185 
	`Ârötf
(
L
.
Â
, "%s %s %-5s\x1b[0m \x1b[90m%s:%03d:\x1b[0m ",

186 
time_°rög
, 
Àvñ_cﬁ‹s
[
Àvñ
], 
Àvñ_«mes
[Àvñ], 
fûe
, 
löe
);

190 
	`Ârötf
(
L
.
Â
, "%†%-5†%s:%03d: ", 
time_°rög
, 
Àvñ_«mes
[
Àvñ
], 
fûe
, 
löe
);

193 
	`va_°¨t
(
¨gs
, 
fmt
);

194 
	`vÂrötf
(
L
.
Â
, 
fmt
, 
¨gs
);

195 
	`va_íd
(
¨gs
);

197 
	`fÊush
(
L
.
Â
);

200 i‡–
L
.
lock‚
 )

201 
L
.
	`lock‚
(L.
ud©a
, 0);

202 
	}
}

204 
	#LINELEN
 81

	)

205 
	#CHARS_PER_LINE
 16

	)

206 *
	g¥öt_ch¨
 =

224 
	$log_dump
(
Àvñ
, c⁄° *
¥om±
, *
buf
, 
size_t
 
Àn
)

226 
rc
;

227 
idx
;

228 
¥n
[
LINELEN
];

229 
lô
[
CHARS_PER_LINE
 + 2];

230 
hc
[4];

231 
löe_d⁄e
 = 1;

233 i‡(!
L
.
Â
 || 
Àvñ
>L.level)

236 if–
¥om±
 )

237 
	`_log_wrôe
(
Àvñ
, 
__FILE__
, 
__LINE__
, "%s", 
¥om±
);

239 
rc
 = 
Àn
;

240 
idx
 = 0;

241 
lô
[
CHARS_PER_LINE
] = '\0';

243 
rc
 > 0)

245 i‡(
löe_d⁄e
)

246 
	`¢¥ötf
(
¥n
, 
LINELEN
, "%08X: ", 
idx
);

250 
c
 = 
buf
[
idx
];

251 
	`¢¥ötf
(
hc
, 4, "%02X ", 
c
);

252 
	`°∫ˇt
(
¥n
, 
hc
, 
LINELEN
);

254 
lô
[
idx
 % 
CHARS_PER_LINE
] = 
¥öt_ch¨
[
c
];

256 --
rc
 > 0 && (++
idx
 % 
CHARS_PER_LINE
 != 0));

258 
löe_d⁄e
 = (
idx
 % 
CHARS_PER_LINE
) == 0;

259 i‡(
löe_d⁄e
)

261 i‡(
L
.
Â
)

262 
	`Ârötf
(
L
.
Â
, "%† %s\n", 
¥n
, 
lô
);

266 i‡(!
löe_d⁄e
)

268 
ldx
 = 
idx
 % 
CHARS_PER_LINE
;

269 
lô
[
ldx
++] = 
¥öt_ch¨
[()
buf
[
idx
]];

270 
lô
[
ldx
] = '\0';

272 (++
idx
 % 
CHARS_PER_LINE
) != 0)

273 
	`°∫ˇt
(
¥n
, " ", ’∫)-
	`°æí
(prn));

275 i‡(
L
.
Â
)

276 
	`Ârötf
(
L
.
Â
, "%† %s\n", 
¥n
, 
lô
);

279 
	}
}

	@src/logger.h

14 #i‚de‡ 
_LOGGER_H_


15 
	#_LOGGER_H_


	)

17 
	~<°dio.h
>

18 
	~<°d¨g.h
>

20 
	#LOG_VERSION
 "v0.1"

	)

24 
	mLOG_LEVEL_ERROR
,

25 
	mLOG_LEVEL_WARN
,

26 
	mLOG_LEVEL_INFO
,

27 
	mLOG_LEVEL_DEBUG
,

28 
	mLOG_LEVEL_TRACE
,

29 
	mLOG_LEVEL_MAX


33 
	mLOG_LOCK_DISABLE
,

34 
	mLOG_LOCK_ENABLE
,

37 
	#ROLLBACK_NONE
 0

	)

47 
	#THREAD_LOCK_NONE
 0

	)

48 
	#THREAD_LOCK_EN
 1

	)

49 
log_›í
(*
‚ame
, 
Àvñ
, 
size
, 
lock
);

53 
log_˛o£
();

57 
_log_wrôe
(
Àvñ
, c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...);

61 
log_dump
(
Àvñ
, c⁄° *
¥om±
, *
buf
, 
size_t
 
Àn
);

64 
	#log_åa˚
(...Ë
	`_log_wrôe
(
LOG_LEVEL_TRACE
, 
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

65 
	#log_debug
(...Ë
	`_log_wrôe
(
LOG_LEVEL_DEBUG
, 
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

66 
	#log_öfo
(...Ë
	`_log_wrôe
(
LOG_LEVEL_INFO
, 
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

67 
	#log_w¨n
(...Ë
	`_log_wrôe
(
LOG_LEVEL_WARN
, 
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

68 
	#log_îr‹
(...Ë
	`_log_wrôe
(
LOG_LEVEL_ERROR
, 
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

	@src/main.h

14 #i‚de‡ 
_MAIN_H_


15 
	#_MAIN_H_


	)

17 
	~<°dio.h
>

18 
	~<time.h
>

19 
	~<°rög.h
>

20 
	~<dúít.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/°©.h
>

23 
	~<f˙é.h
>

24 
	~<î∫o.h
>

25 
	~<uni°d.h
>

26 
	~<°dlib.h
>

27 
	~"ds18b20.h
"

28 
	~"∑ck.h
"

29 
	~"d©aba£.h
"

30 
	~"loggî.h
"

31 
	~"func.h
"

32 
	~"cJSON.h
"

34 
	#KEEPALIVE
 60

	)

	@src/pack.c

14 
	~"∑ck.h
"

16 
	$∑ck_d©a
(
d©a_s
 *
Æl_d©a
, *
Æl_buf
, 
size
)

18 if–!
Æl_d©a
 || !
Æl_buf
 || 
size
<=0 )

21 
	`¥ötf
 ("Invalid inputárguments\n");

25 
	`mem£t
(
Æl_buf
, 0, 
size
);

27 
	`¢¥ötf
(
Æl_buf
, 
size
, "%†%†%.2f", 
Æl_d©a
->
devid
,

28 
Æl_d©a
->
ßm∂e_time
,áŒ_d©a->
ãmp
);

30  
	`°æí
(
Æl_buf
);

31 
	}
}

34 
	$∑ck_d©a_js⁄
(
d©a_s
 *
Æl_d©a
, *
Æl_buf
, 
size
)

36 if–!
Æl_d©a
 || !
Æl_buf
 || 
size
<=0 )

38 
	`¥ötf
 ("Invaild inputárguments\n");

42 
	`mem£t
(
Æl_buf
, 0, 
size
);

43 
	`¢¥ötf
(
Æl_buf
, 
size
, "{\"device_id\":\"%s\",\"time\":\"%s\",\"temp\":\"%.2f\"}",

44 
Æl_d©a
->
devid
,áŒ_d©a->
ßm∂e_time
,áŒ_d©a->
ãmp
);

46  
	`°æí
(
Æl_buf
);

47 
	}
}

	@src/pack.h

14 #i‚de‡ 
_CLI_FUNC_H_


15 
	#_CLI_FUNC_H_


	)

17 
	~<°dio.h
>

18 
	~<°rög.h
>

19 
	~<î∫o.h
>

20 
	~<time.h
>

21 
	~<°dlib.h
>

22 
	~<uni°d.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<f˙é.h
>

25 
	~<dúít.h
>

26 
	~<î∫o.h
>

27 
	~"ds18b20.h
"

28 
	~"loggî.h
"

30 
	#MAX_SIZE
 20

	)

31 
	#DEVICEID_LEN
 16

	)

32 
	#TIME_LEN
 64

	)

34 
	sd©a_∑ck
{

35 
	mdevid
[
DEVICEID_LEN
];

36 
	mßm∂e_time
[
TIME_LEN
];

37 
	mãmp
;

38 }
	td©a_s
;

40 
	#CONFIG_DEBUG


	)

41 #ifde‡ 
CONFIG_DEBUG


42 
	#dbg_¥öt
(
f‹m©
,
¨gs
...Ë
	`¥ötf
(f‹m©,##¨gs)

	)

44 
	#dbg_¥öt
(
f‹m©
,
¨gs
...Ëdo{} 0)

	)

47 (* 
	t∑ck_func_t
)(
	td©a_s
 *
	tÆl_d©a
, *
	tÆl_buf
, 
	tsize
);

48 
	`∑ck_d©a
(
d©a_s
 *
Æl_d©a
, *
Æl_buf
, 
size
);

49 
	`∑ck_d©a_js⁄
(
d©a_s
 *
Æl_d©a
, *
Æl_buf
, 
size
);

	@src/proc.c

15 
	~"¥oc.h
"

17 
	gg_sig°›
 = 0;

18 
	$¥oc_deÁu…_sigh™dÀr
(
sig
)

20 
sig
)

22 
SIGINT
:

23 
	`log_w¨n
("SIGINT - stopping\n");

24 
g_sig°›
 = 1;

27 
SIGTERM
:

28 
	`log_w¨n
("SIGTERM - stopping\n");

29 
g_sig°›
 = 1;

32 
SIGSEGV
:

33 
	`log_w¨n
("SIGSEGV - stopping\n");

35 if(
g_sig°›
)

36 
	`exô
(0);

38 
g_sig°›
 = 1;

42 
SIGPIPE
:

43 
	`log_w¨n
("SIGPIPE - warning\n");

49 
	}
}

51 
	$ö°Æl_deÁu…_sig«l
()

53 
siga˘i⁄
 
siga˘
,
sigign
;

55 
	`log_öfo
("Install default signal handler.\n");

58 
	`sigem±y£t
–&
sigign
.
ß_mask
);

59 
siga˘
.
ß_Êags
 = 0;

60 
sigign
.
ß_h™dÀr
 = 
SIG_IGN
;

62 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 0);

63 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 0);

65 
	`siga˘i⁄
(
SIGPIPE
, &
siga˘
, 0);

66 
	}
}

	@src/proc.h

14 #i‚de‡
__PROC_H_


15 
	#__PROC_H_


	)

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<libgí.h
>

24 
	~<±hªad.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<sig«l.h
>

28 
	~<time.h
>

29 
	~"loggî.h
"

31 
g_sig°›
;

33 
¥oc_deÁu…_sigh™dÀr
(
sig
);

34 
ö°Æl_deÁu…_sig«l
();

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/arpa/nameser.h

48 #i‚de‡
_ARPA_NAMESER_H_


49 
	#_ARPA_NAMESER_H_


	)

51 
	~<sys/∑øm.h
>

52 
	~<sys/ty≥s.h
>

53 
	~<°döt.h
>

58 
	#NS_PACKETSZ
 512

	)

59 
	#NS_MAXDNAME
 1025

	)

60 
	#NS_MAXMSG
 65535

	)

61 
	#NS_MAXCDNAME
 255

	)

62 
	#NS_MAXLABEL
 63

	)

63 
	#NS_HFIXEDSZ
 12

	)

64 
	#NS_QFIXEDSZ
 4

	)

65 
	#NS_RRFIXEDSZ
 10

	)

66 
	#NS_INT32SZ
 4

	)

67 
	#NS_INT16SZ
 2

	)

68 
	#NS_INT8SZ
 1

	)

69 
	#NS_INADDRSZ
 4

	)

70 
	#NS_IN6ADDRSZ
 16

	)

71 
	#NS_CMPRSFLGS
 0xc0

	)

72 
	#NS_DEFAULTPORT
 53

	)

77 
	e__ns_£˘
 {

78 
	mns_s_qd
 = 0,

79 
	mns_s_zn
 = 0,

80 
	mns_s_™
 = 1,

81 
	mns_s_¥
 = 1,

82 
	mns_s_ns
 = 2,

83 
	mns_s_ud
 = 2,

84 
	mns_s_¨
 = 3,

85 
	mns_s_max
 = 4

86 } 
	tns_£˘
;

93 
	s__ns_msg
 {

94 c⁄° *
	m_msg
, *
	m_eom
;

95 
uöt16_t
 
	m_id
, 
	m_Êags
, 
	m_cou¡s
[
ns_s_max
];

96 c⁄° *
	m_£˘i⁄s
[
ns_s_max
];

97 
ns_£˘
 
	m_£˘
;

98 
	m_ºnum
;

99 c⁄° *
	m_msg_±r
;

100 } 
	tns_msg
;

103 
	s_ns_Êagd©a
 { 
	mmask
, 
	mshi·
; };

104 c⁄° 
_ns_Êagd©a
 _ns_flagdata[];

108 
	#ns_msg_id
(
h™dÀ
Ë((h™dÀ).
_id
 + 0)

	)

109 
	#ns_msg_ba£
(
h™dÀ
Ë((h™dÀ).
_msg
 + 0)

	)

110 
	#ns_msg_íd
(
h™dÀ
Ë((h™dÀ).
_eom
 + 0)

	)

111 
	#ns_msg_size
(
h™dÀ
Ë((h™dÀ).
_eom
 - (h™dÀ).
_msg
)

	)

112 
	#ns_msg_cou¡
(
h™dÀ
, 
£˘i⁄
Ë((h™dÀ).
_cou¡s
[£˘i⁄] + 0)

	)

117 
	s__ns_º
 {

118 
	m«me
[
NS_MAXDNAME
];

119 
uöt16_t
 
	mty≥
;

120 
uöt16_t
 
	mº_˛ass
;

121 
uöt32_t
 
	mâl
;

122 
uöt16_t
 
	mrdÀngth
;

123 c⁄° * 
	mrd©a
;

124 } 
	tns_º
;

127 
	#ns_º_«me
(
º
Ë((‘r).
«me
[0] !'\0'Ë? (º).«mê: ".")

	)

128 
	#ns_º_ty≥
(
º
Ë((
ns_ty≥
)(‘r).
ty≥
 + 0))

	)

129 
	#ns_º_˛ass
(
º
Ë((
ns_˛ass
)(‘r).
º_˛ass
 + 0))

	)

130 
	#ns_º_âl
(
º
Ë(‘r).
âl
 + 0)

	)

131 
	#ns_º_rdÀn
(
º
Ë(‘r).
rdÀngth
 + 0)

	)

132 
	#ns_º_rd©a
(
º
Ë(‘r).
rd©a
 + 0)

	)

139 
	e__ns_Êag
 {

140 
	mns_f_qr
,

141 
	mns_f_›code
,

142 
	mns_f_Ø
,

143 
	mns_f_tc
,

144 
	mns_f_rd
,

145 
	mns_f_ø
,

146 
	mns_f_z
,

147 
	mns_f_ad
,

148 
	mns_f_cd
,

149 
	mns_f_rcode
,

150 
	mns_f_max


151 } 
	tns_Êag
;

156 
	e__ns_›code
 {

157 
	mns_o_quîy
 = 0,

158 
	mns_o_iquîy
 = 1,

159 
	mns_o_°©us
 = 2,

161 
	mns_o_nŸify
 = 4,

162 
	mns_o_upd©e
 = 5,

163 
	mns_o_max
 = 6

164 } 
	tns_›code
;

169 
	e__ns_rcode
 {

170 
	mns_r_n€º‹
 = 0,

171 
	mns_r_f‹mîr
 = 1,

172 
	mns_r_£rvÁû
 = 2,

173 
	mns_r_nxdomaö
 = 3,

174 
	mns_r_nŸim∂
 = 4,

175 
	mns_r_ªfu£d
 = 5,

177 
	mns_r_yxdomaö
 = 6,

178 
	mns_r_yxº£t
 = 7,

179 
	mns_r_nxº£t
 = 8,

180 
	mns_r_nŸauth
 = 9,

181 
	mns_r_nŸz⁄e
 = 10,

182 
	mns_r_max
 = 11,

184 
	mns_r_badvîs
 = 16,

186 
	mns_r_badsig
 = 16,

187 
	mns_r_badkey
 = 17,

188 
	mns_r_badtime
 = 18

189 } 
	tns_rcode
;

192 
	e__ns_upd©e_›î©i⁄
 {

193 
	mns_u›_dñëe
 = 0,

194 
	mns_u›_add
 = 1,

195 
	mns_u›_max
 = 2

196 } 
	tns_upd©e_›î©i⁄
;

201 
	sns_tsig_key
 {

202 
	m«me
[
NS_MAXDNAME
], 
	mÆg
[NS_MAXDNAME];

203 *
	md©a
;

204 
	mÀn
;

206 
ns_tsig_key
 
	tns_tsig_key
;

211 
	sns_t˝_tsig_°©e
 {

212 
	mcou¡î
;

213 
d°_key
 *
	mkey
;

214 *
	m˘x
;

215 
	msig
[
NS_PACKETSZ
];

216 
	msigÀn
;

218 
ns_t˝_tsig_°©e
 
	tns_t˝_tsig_°©e
;

220 
	#NS_TSIG_FUDGE
 300

	)

221 
	#NS_TSIG_TCP_COUNT
 100

	)

222 
	#NS_TSIG_ALG_HMAC_MD5
 "HMAC-MD5.SIG-ALG.REG.INT"

	)

224 
	#NS_TSIG_ERROR_NO_TSIG
 -10

	)

225 
	#NS_TSIG_ERROR_NO_SPACE
 -11

	)

226 
	#NS_TSIG_ERROR_FORMERR
 -12

	)

231 
	e__ns_ty≥


233 
	mns_t_övÆid
 = 0,

235 
	mns_t_a
 = 1,

236 
	mns_t_ns
 = 2,

237 
	mns_t_md
 = 3,

238 
	mns_t_mf
 = 4,

239 
	mns_t_˙ame
 = 5,

240 
	mns_t_sﬂ
 = 6,

241 
	mns_t_mb
 = 7,

242 
	mns_t_mg
 = 8,

243 
	mns_t_mr
 = 9,

244 
	mns_t_nuŒ
 = 10,

245 
	mns_t_wks
 = 11,

246 
	mns_t_±r
 = 12,

247 
	mns_t_höfo
 = 13,

248 
	mns_t_möfo
 = 14,

249 
	mns_t_mx
 = 15,

250 
	mns_t_txt
 = 16,

251 
	mns_t_Ω
 = 17,

252 
	mns_t_afsdb
 = 18,

253 
	mns_t_x25
 = 19,

254 
	mns_t_isdn
 = 20,

255 
	mns_t_π
 = 21,

256 
	mns_t_nßp
 = 22,

257 
	mns_t_nßp_±r
 = 23,

258 
	mns_t_sig
 = 24,

259 
	mns_t_key
 = 25,

260 
	mns_t_px
 = 26,

261 
	mns_t_gpos
 = 27,

262 
	mns_t_ØØ
 = 28,

263 
	mns_t_loc
 = 29,

264 
	mns_t_nxt
 = 30,

265 
	mns_t_eid
 = 31,

266 
	mns_t_nimloc
 = 32,

267 
	mns_t_§v
 = 33,

268 
	mns_t_©ma
 = 34,

269 
	mns_t_«±r
 = 35,

270 
	mns_t_kx
 = 36,

271 
	mns_t_˚π
 = 37,

272 
	mns_t_a6
 = 38,

273 
	mns_t_d«me
 = 39,

274 
	mns_t_sök
 = 40,

275 
	mns_t_›t
 = 41,

276 
	mns_t_≠l
 = 42,

277 
	mns_t_ds
 = 43,

278 
	mns_t_sshÂ
 = 44,

279 
	mns_t_ù£ckey
 = 45,

280 
	mns_t_ºsig
 = 46,

281 
	mns_t_n£c
 = 47,

282 
	mns_t_dnskey
 = 48,

283 
	mns_t_dhcid
 = 49,

284 
	mns_t_n£c3
 = 50,

285 
	mns_t_n£c3∑øm
 = 51,

286 
	mns_t_éß
 = 52,

287 
	mns_t_smimó
 = 53,

288 
	mns_t_hù
 = 55,

289 
	mns_t_nöfo
 = 56,

290 
	mns_t_rkey
 = 57,

291 
	mns_t_èlök
 = 58,

292 
	mns_t_cds
 = 59,

293 
	mns_t_cdnskey
 = 60,

294 
	mns_t_›ípgpkey
 = 61,

295 
	mns_t_csync
 = 62,

296 
	mns_t_•f
 = 99,

297 
	mns_t_uöfo
 = 100,

298 
	mns_t_uid
 = 101,

299 
	mns_t_gid
 = 102,

300 
	mns_t_un•ec
 = 103,

301 
	mns_t_nid
 = 104,

302 
	mns_t_l32
 = 105,

303 
	mns_t_l64
 = 106,

304 
	mns_t_Õ
 = 107,

305 
	mns_t_eui48
 = 108,

306 
	mns_t_eui64
 = 109,

307 
	mns_t_tkey
 = 249,

308 
	mns_t_tsig
 = 250,

309 
	mns_t_ix‰
 = 251,

310 
	mns_t_ax‰
 = 252,

311 
	mns_t_maûb
 = 253,

312 
	mns_t_maûa
 = 254,

313 
	mns_t_™y
 = 255,

314 
	mns_t_uri
 = 256,

315 
	mns_t_ˇa
 = 257,

316 
	mns_t_avc
 = 258,

317 
	mns_t_è
 = 32768,

318 
	mns_t_dlv
 = 32769,

320 
	mns_t_max
 = 65536

321 } 
	tns_ty≥
;

326 
	e__ns_˛ass
 {

327 
	mns_c_övÆid
 = 0,

328 
	mns_c_ö
 = 1,

329 
	mns_c_2
 = 2,

330 
	mns_c_chaos
 = 3,

331 
	mns_c_hs
 = 4,

333 
	mns_c_n⁄e
 = 254,

334 
	mns_c_™y
 = 255,

335 
	mns_c_max
 = 65536

336 } 
	tns_˛ass
;

339 
	e__ns_˚π_ty≥s
 {

340 
	m˚π_t_pkix
 = 1,

341 
	m˚π_t_•ki
 = 2,

342 
	m˚π_t_pgp
 = 3,

343 
	m˚π_t_uæ
 = 253,

344 
	m˚π_t_oid
 = 254

345 } 
	tns_˚π_ty≥s
;

350 
	#NS_OPT_DNSSEC_OK
 0x8000U

	)

351 
	#NS_OPT_NSID
 3

	)

356 
	#NS_GET16
(
s
, 
˝
) do { \

357 c⁄° *
t_˝
 = (c⁄° *)(
˝
); \

358 (
s
Ë((
uöt16_t
)
t_˝
[0] << 8) \

359 | ((
uöt16_t
)
t_˝
[1]) \

361 (
˝
Ë+
NS_INT16SZ
; \

362 } 0)

	)

364 
	#NS_GET32
(
l
, 
˝
) do { \

365 c⁄° *
t_˝
 = (c⁄° *)(
˝
); \

366 (
l
Ë((
uöt32_t
)
t_˝
[0] << 24) \

367 | ((
uöt32_t
)
t_˝
[1] << 16) \

368 | ((
uöt32_t
)
t_˝
[2] << 8) \

369 | ((
uöt32_t
)
t_˝
[3]) \

371 (
˝
Ë+
NS_INT32SZ
; \

372 } 0)

	)

374 
	#NS_PUT16
(
s
, 
˝
) do { \

375 
uöt16_t
 
t_s
 = (uöt16_t)(
s
); \

376 *
t_˝
 = (*)(
˝
); \

377 *
t_˝
++ = 
t_s
 >> 8; \

378 *
t_˝
 = 
t_s
; \

379 (
˝
Ë+
NS_INT16SZ
; \

380 } 0)

	)

382 
	#NS_PUT32
(
l
, 
˝
) do { \

383 
uöt32_t
 
t_l
 = (uöt32_t)(
l
); \

384 *
t_˝
 = (*)(
˝
); \

385 *
t_˝
++ = 
t_l
 >> 24; \

386 *
t_˝
++ = 
t_l
 >> 16; \

387 *
t_˝
++ = 
t_l
 >> 8; \

388 *
t_˝
 = 
t_l
; \

389 (
˝
Ë+
NS_INT32SZ
; \

390 } 0)

	)

392 
__BEGIN_DECLS


393 
	$ns_msg_gëÊag
 (
ns_msg
, Ë
__THROW
;

394 
	$ns_gë16
 (c⁄° *Ë
__THROW
;

395 
	$ns_gë32
 (c⁄° *Ë
__THROW
;

396 
	$ns_put16
 (, *Ë
__THROW
;

397 
	$ns_put32
 (, *Ë
__THROW
;

398 
	$ns_öô∑r£
 (c⁄° *, , 
ns_msg
 *Ë
__THROW
;

399 
	$ns_skùº
 (const *, const *,

400 
ns_£˘
, Ë
__THROW
;

401 
	$ns_∑r£º
 (
ns_msg
 *, 
ns_£˘
, , 
ns_º
 *Ë
__THROW
;

402 
	$ns_•röår
 (c⁄° 
ns_msg
 *, c⁄° 
ns_º
 *,

403 c⁄° *, c⁄° *, *, 
size_t
)

404 
__THROW
;

405 
	$ns_•röårf
 (c⁄° *, 
size_t
, const *,

406 
ns_˛ass
, 
ns_ty≥
, ,

407 c⁄° *, 
size_t
, const *,

408 c⁄° *, *, 
size_t
Ë
__THROW
;

409 
	$ns_f‹m©_âl
 (, *, 
size_t
Ë
__THROW
;

410 
	$ns_∑r£_âl
 (c⁄° *, *Ë
__THROW
;

411 
uöt32_t
 
	$ns_d©ëo£cs
 (c⁄° *, *Ë
__THROW
;

412 
	$ns_«me_¡ﬁ
 (c⁄° *, *, 
size_t
)

413 
__THROW
;

414 
	$ns_«me_¡›
 (c⁄° *, *, 
size_t
Ë
__THROW
;

415 
	$ns_«me_±⁄
 (c⁄° *, *, 
size_t
Ë
__THROW
;

416 
	$ns_«me_u≈ack
 (const *, const *,

417 c⁄° *, *, 
size_t
)

418 
__THROW
;

419 
	$ns_«me_∑ck
 (const *, *, ,

421 
__THROW
;

422 
	$ns_«me_uncom¥ess
 (const *,

425 *, 
size_t
Ë
__THROW
;

426 
	$ns_«me_com¥ess
 (c⁄° *, *, 
size_t
,

428 c⁄° **Ë
__THROW
;

429 
	$ns_«me_skù
 (const **, const *)

430 
__THROW
;

431 
	$ns_«me_rﬁlback
 (const *,

433 c⁄° **Ë
__THROW
;

434 
	$ns_ßmedomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

435 
	$ns_subdomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

436 
	$ns_makeˇn⁄
 (c⁄° *, *, 
size_t
Ë
__THROW
;

437 
	$ns_ßmíame
 (c⁄° *, c⁄° *Ë
__THROW
;

438 
__END_DECLS


440 
	~<¨∑/«me£r_com∑t.h
>

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


91 #i‡
deföed
 
__˝lu•lus


92 
	#as£π
(
ex¥
) \

93 (
°©ic_ˇ°
 <
boﬁ
> (
ex¥
) \

95 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ñi‡!
deföed
 
__GNUC__
 || deföed 
__STRICT_ANSI__


97 
	#as£π
(
ex¥
) \

98 ((
ex¥
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

107 
	#as£π
(
ex¥
) \

108 ((Ë ((
ex¥
Ë? 1 : 0), 
	`__exãnsi⁄__
 ({ \

109 i‡(
ex¥
) \

112 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
); \

113 
	}
}))

	)

116 #ifdef 
__USE_GNU


117 
	#as£π_≥º‹
(
î∫um
) \

118 (!(
î∫um
) \

119 ? 
	`__ASSERT_VOID_CAST
 (0) \

120 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

128 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

129 
	#__ASSERT_FUNCTION
 
__exãnsi⁄__
 
__PRETTY_FUNCTION__


	)

131 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

132 
	#__ASSERT_FUNCTION
 
__func__


	)

134 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

141 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


142 #unde‡
°©ic_as£π


143 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/cjson/cJSON.h

23 #i‚de‡
cJSON__h


24 
	#cJSON__h


	)

26 #ifde‡
__˝lu•lus


31 #i‡!
deföed
(
__WINDOWS__
Ë&& (deföed(
WIN32
Ë|| deföed(
WIN64
Ë|| deföed(
_MSC_VER
Ë|| deföed(
_WIN32
))

32 
	#__WINDOWS__


	)

35 #ifde‡
__WINDOWS__


55 
	#CJSON_CDECL
 
__cde˛


	)

56 
	#CJSON_STDCALL
 
__°dˇŒ


	)

59 #i‡!
deföed
(
CJSON_HIDE_SYMBOLS
Ë&& !deföed(
CJSON_IMPORT_SYMBOLS
Ë&& !deföed(
CJSON_EXPORT_SYMBOLS
)

60 
	#CJSON_EXPORT_SYMBOLS


	)

63 #i‡
deföed
(
CJSON_HIDE_SYMBOLS
)

64 
	#CJSON_PUBLIC
(
ty≥
Ëty≥ 
CJSON_STDCALL


	)

65 #ñi‡
deföed
(
CJSON_EXPORT_SYMBOLS
)

66 
	#CJSON_PUBLIC
(
ty≥
Ë
	`__de˛•ec
(
dŒexp‹t
Ëty≥ 
CJSON_STDCALL


	)

67 #ñi‡
deföed
(
CJSON_IMPORT_SYMBOLS
)

68 
	#CJSON_PUBLIC
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ëty≥ 
CJSON_STDCALL


	)

71 
	#CJSON_CDECL


	)

72 
	#CJSON_STDCALL


	)

74 #i‡(
deföed
(
__GNUC__
Ë|| deföed(
__SUNPRO_CC
Ë|| deföed (
__SUNPRO_C
)Ë&& deföed(
CJSON_API_VISIBILITY
)

75 
	#CJSON_PUBLIC
(
ty≥
Ë
	`__©åibuã__
((
	`visibûôy
("deÁu…"))Ë
	)
type

77 
	#CJSON_PUBLIC
(
ty≥
Ë
	)
type

82 
	#CJSON_VERSION_MAJOR
 1

	)

83 
	#CJSON_VERSION_MINOR
 7

	)

84 
	#CJSON_VERSION_PATCH
 14

	)

86 
	~<°ddef.h
>

89 
	#cJSON_InvÆid
 (0)

	)

90 
	#cJSON_FÆ£
 (1 << 0)

	)

91 
	#cJSON_True
 (1 << 1)

	)

92 
	#cJSON_NULL
 (1 << 2)

	)

93 
	#cJSON_Numbî
 (1 << 3)

	)

94 
	#cJSON_Såög
 (1 << 4)

	)

95 
	#cJSON_Aºay
 (1 << 5)

	)

96 
	#cJSON_Obje˘
 (1 << 6)

	)

97 
	#cJSON_Raw
 (1 << 7Ë

	)

99 
	#cJSON_IsRe„ªn˚
 256

	)

100 
	#cJSON_SåögIsC⁄°
 512

	)

103 
	scJSON


106 
cJSON
 *
√xt
;

107 
cJSON
 *
¥ev
;

109 
cJSON
 *
chûd
;

112 
ty≥
;

115 *
vÆue°rög
;

117 
vÆueöt
;

119 
vÆuedoubÀ
;

122 *
°rög
;

123 } 
	tcJSON
;

125 
	scJSON_Hooks


128 *(
CJSON_CDECL
 *
mÆloc_‚
)(
size_t
 
sz
);

129 (
CJSON_CDECL
 *
‰ì_‚
)(*
±r
);

130 } 
	tcJSON_Hooks
;

132 
	tcJSON_boﬁ
;

136 #i‚de‡
CJSON_NESTING_LIMIT


137 
	#CJSON_NESTING_LIMIT
 1000

	)

141 
CJSON_PUBLIC
(c⁄° *Ë
cJSON_Vîsi⁄
();

144 
CJSON_PUBLIC
(Ë
cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
);

148 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_P¨£
(c⁄° *
vÆue
);

149 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_P¨£WôhLígth
(c⁄° *
vÆue
, 
size_t
 
buf„r_Àngth
);

152 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_P¨£WôhO±s
(c⁄° *
vÆue
, c⁄° **
ªtu∫_∑r£_íd
, 
cJSON_boﬁ
 
ªquúe_nuŒ_ãrmö©ed
);

153 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_P¨£WôhLígthO±s
(c⁄° *
vÆue
, 
size_t
 
buf„r_Àngth
, c⁄° **
ªtu∫_∑r£_íd
, 
cJSON_boﬁ
 
ªquúe_nuŒ_ãrmö©ed
);

156 
CJSON_PUBLIC
(*Ë
cJSON_Pröt
(c⁄° 
cJSON
 *
ôem
);

158 
CJSON_PUBLIC
(*Ë
cJSON_PrötUnf‹m©ãd
(c⁄° 
cJSON
 *
ôem
);

160 
CJSON_PUBLIC
(*Ë
cJSON_PrötBuf„ªd
(c⁄° 
cJSON
 *
ôem
, 
¥ebuf„r
, 
cJSON_boﬁ
 
fmt
);

163 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_PrötPªÆloˇãd
(
cJSON
 *
ôem
, *
buf„r
, c⁄° 
Àngth
, c⁄° cJSON_boﬁ 
f‹m©
);

165 
CJSON_PUBLIC
(Ë
cJSON_Dñëe
(
cJSON
 *
ôem
);

168 
CJSON_PUBLIC
(Ë
cJSON_GëAºaySize
(c⁄° 
cJSON
 *
¨øy
);

170 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_GëAºayIãm
(c⁄° cJSON *
¨øy
, 
ödex
);

172 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_GëObje˘Iãm
(c⁄° cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
°rög
);

173 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_GëObje˘IãmCa£Sísôive
(c⁄° cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
°rög
);

174 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_HasObje˘Iãm
(c⁄° 
cJSON
 *
obje˘
, c⁄° *
°rög
);

176 
CJSON_PUBLIC
(c⁄° *Ë
cJSON_GëEº‹På
();

179 
CJSON_PUBLIC
(*Ë
cJSON_GëSåögVÆue
(c⁄° 
cJSON
 * c⁄° 
ôem
);

180 
CJSON_PUBLIC
(Ë
cJSON_GëNumbîVÆue
(c⁄° 
cJSON
 * c⁄° 
ôem
);

183 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsInvÆid
(c⁄° 
cJSON
 * c⁄° 
ôem
);

184 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsFÆ£
(c⁄° 
cJSON
 * c⁄° 
ôem
);

185 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsTrue
(c⁄° 
cJSON
 * c⁄° 
ôem
);

186 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsBoﬁ
(c⁄° 
cJSON
 * c⁄° 
ôem
);

187 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsNuŒ
(c⁄° 
cJSON
 * c⁄° 
ôem
);

188 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsNumbî
(c⁄° 
cJSON
 * c⁄° 
ôem
);

189 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsSåög
(c⁄° 
cJSON
 * c⁄° 
ôem
);

190 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsAºay
(c⁄° 
cJSON
 * c⁄° 
ôem
);

191 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsObje˘
(c⁄° 
cJSON
 * c⁄° 
ôem
);

192 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsRaw
(c⁄° 
cJSON
 * c⁄° 
ôem
);

195 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eNuŒ
();

196 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eTrue
();

197 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eFÆ£
();

198 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eBoﬁ
(
cJSON_boﬁ
 
boﬁón
);

199 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eNumbî
(
num
);

200 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eSåög
(c⁄° *
°rög
);

202 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eRaw
(c⁄° *
øw
);

203 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eAºay
();

204 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eObje˘
();

208 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eSåögRe„ªn˚
(c⁄° *
°rög
);

211 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eObje˘Re„ªn˚
(c⁄° cJSON *
chûd
);

212 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eAºayRe„ªn˚
(c⁄° cJSON *
chûd
);

216 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
, 
cou¡
);

217 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
, 
cou¡
);

218 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
, 
cou¡
);

219 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eSåögAºay
(c⁄° *c⁄° *
°rögs
, 
cou¡
);

222 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

223 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
);

227 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmToObje˘CS
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
);

229 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

230 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
);

233 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_DëachIãmVüPoöãr
(cJSON *
∑ª¡
, cJSON * c⁄° 
ôem
);

234 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_DëachIãmFromAºay
(cJSON *
¨øy
, 
which
);

235 
CJSON_PUBLIC
(Ë
cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
, 
which
);

236 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_DëachIãmFromObje˘
(cJSON *
obje˘
, c⁄° *
°rög
);

237 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_DëachIãmFromObje˘Ca£Sísôive
(cJSON *
obje˘
, c⁄° *
°rög
);

238 
CJSON_PUBLIC
(Ë
cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
);

239 
CJSON_PUBLIC
(Ë
cJSON_DñëeIãmFromObje˘Ca£Sísôive
(
cJSON
 *
obje˘
, c⁄° *
°rög
);

242 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_In£πIãmInAºay
(
cJSON
 *
¨øy
, 
which
, cJSON *
√wôem
);

243 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Rïœ˚IãmVüPoöãr
(
cJSON
 * c⁄° 
∑ª¡
, cJSON * c⁄° 
ôem
, cJSON * 
ª∂a˚mít
);

244 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
, 
which
, cJSON *
√wôem
);

245 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
);

246 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Rïœ˚IãmInObje˘Ca£Sísôive
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
);

249 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Du∂iˇã
(c⁄° cJSON *
ôem
, 
cJSON_boﬁ
 
ªcur£
);

255 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Com∑ª
(c⁄° 
cJSON
 * c⁄° 
a
, c⁄° cJSON * c⁄° 
b
, c⁄° cJSON_boﬁ 
ˇ£_£nsôive
);

260 
CJSON_PUBLIC
(Ë
cJSON_Möify
(*
js⁄
);

264 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddNuŒToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

265 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddTrueToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

266 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddFÆ£ToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

267 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddBoﬁToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° 
cJSON_boﬁ
 
boﬁón
);

268 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddNumbîToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° 
numbî
);

269 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddSåögToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° * c⁄° 
°rög
);

270 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddRawToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° * c⁄° 
øw
);

271 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddObje˘ToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

272 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddAºayToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

275 
	#cJSON_SëI¡VÆue
(
obje˘
, 
numbî
Ë((obje˘Ë? (obje˘)->
vÆueöt
 = (obje˘)->
vÆuedoubÀ
 = (numbîË: (numbî))

	)

277 
CJSON_PUBLIC
(Ë
cJSON_SëNumbîHñ≥r
(
cJSON
 *
obje˘
, 
numbî
);

278 
	#cJSON_SëNumbîVÆue
(
obje˘
, 
numbî
Ë((obje˘ !
NULL
Ë? 
	`cJSON_SëNumbîHñ≥r
(obje˘, (ÍumbîË: (numbî))

	)

280 
CJSON_PUBLIC
(*Ë
cJSON_SëVÆue°rög
(
cJSON
 *
obje˘
, c⁄° *
vÆue°rög
);

283 
	#cJSON_AºayF‹Each
(
ñemít
, 
¨øy
Ëñemíà◊ºay !
NULL
Ë? (¨øy)->
chûd
 : NULL;ÉÀmíà!NULL;ÉÀmíàñemít->
√xt
)

	)

286 
CJSON_PUBLIC
(*Ë
cJSON_mÆloc
(
size_t
 
size
);

287 
CJSON_PUBLIC
(Ë
cJSON_‰ì
(*
obje˘
);

289 #ifde‡
__˝lu•lus


	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<bôs/ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name \

90 : 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
)

194 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #ifde‡
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #ifde‡
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

254 #i‚de‡
__USE_FILE_OFFSET64


255 
	$sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

256 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

257 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

258 (*
__cmp
Ë(c⁄° 
dúít
 **,

259 c⁄° 
dúít
 **))

260 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
sˇndú
,

264 (c⁄° *
__ª°ri˘
 
__dú
,

265 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

266 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

267 (*
__cmp
Ë(c⁄° 
dúít
 **,

268 c⁄° 
dúít
 **)),

269 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

271 
	#sˇndú
 
sˇndú64


	)

275 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


278 
	$sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

279 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

280 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

281 (*
__cmp
Ë(c⁄° 
dúít64
 **,

282 c⁄° 
dúít64
 **))

283 
	`__n⁄nuŒ
 ((1, 2));

286 #ifde‡
__USE_GNU


292 #i‚de‡
__USE_FILE_OFFSET64


293 
	$sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

294 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

295 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

296 (*
__cmp
Ë(c⁄° 
dúít
 **,

297 c⁄° 
dúít
 **))

298 
	`__n⁄nuŒ
 ((2, 3));

300 #ifde‡
__REDIRECT


301 
	`__REDIRECT
 (
sˇndú©
,

302 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

303 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

304 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

305 (*
__cmp
Ë(c⁄° 
dúít
 **,

306 c⁄° 
dúít
 **)),

307 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

309 
	#sˇndú©
 
sˇndú©64


	)

315 
	$sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

316 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

317 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

318 (*
__cmp
Ë(c⁄° 
dúít64
 **,

319 c⁄° 
dúít64
 **))

320 
	`__n⁄nuŒ
 ((2, 3));

324 #i‚de‡
__USE_FILE_OFFSET64


325 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

326 c⁄° 
dúít
 **
__e2
)

327 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

329 #ifde‡
__REDIRECT


330 
	`__REDIRECT_NTH
 (
Æphas‹t
,

331 (c⁄° 
dúít
 **
__e1
,

332 c⁄° 
dúít
 **
__e2
),

333 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	#Æphas‹t
 
Æphas‹t64


	)

339 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


340 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

341 c⁄° 
dúít64
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

347 #ifde‡
__USE_MISC


352 #i‚de‡
__USE_FILE_OFFSET64


353 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

354 
size_t
 
__nbyãs
,

355 
__off_t
 *
__ª°ri˘
 
__ba£p
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

358 #ifde‡
__REDIRECT


359 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

360 (
__fd
, *
__ª°ri˘
 
__buf
,

361 
size_t
 
__nbyãs
,

362 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

363 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

365 
	#gëdúíåõs
 
gëdúíåõs64


	)

369 #ifde‡
__USE_LARGEFILE64


370 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

371 
size_t
 
__nbyãs
,

372 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

373 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

377 #ifde‡
__USE_GNU


379 #i‚de‡
__USE_FILE_OFFSET64


380 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

381 c⁄° 
dúít
 **
__e2
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

384 #ifde‡
__REDIRECT


385 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

386 (c⁄° 
dúít
 **
__e1
,

387 c⁄° 
dúít
 **
__e2
),

388 
vîsi⁄s‹t64
)

389 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

391 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

397 c⁄° 
dúít64
 **
__e2
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

402 
__END_DECLS


404 
	~<bôs/dúít_ext.h
>

	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 #i‡
	`__GNUC_PREREQ
 (3, 0)

188 
__exãnsi⁄__
 union

190 
Dl_£Ω©h
 
dls_£Ω©h
[0];

191 
Dl_£Ω©h
 
__dls_£Ω©h_∑d
[1];

194 
Dl_£Ω©h
 
dls_£Ω©h
[1];

196 } 
	tDl_£röfo
;

200 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

48 
	~<bôs/ty≥s/îr‹_t.h
>

52 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 #i‚de‡
__USE_FILE_OFFSET64


148 
f˙é
 (
__fd
, 
__cmd
, ...);

150 #ifde‡
__REDIRECT


151 
__REDIRECT
 (
f˙é
, (
__fd
, 
__cmd
, ...), 
f˙é64
);

153 
	#f˙é
 
f˙é64


	)

156 #ifde‡
__USE_LARGEFILE64


157 
f˙é64
 (
__fd
, 
__cmd
, ...);

167 #i‚de‡
__USE_FILE_OFFSET64


168 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

170 #ifde‡
__REDIRECT


171 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

172 
	`__n⁄nuŒ
 ((1));

174 
	#›í
 
›í64


	)

177 #ifde‡
__USE_LARGEFILE64


178 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

181 #ifde‡
__USE_ATFILE


191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

193 
	`__n⁄nuŒ
 ((2));

195 #ifde‡
__REDIRECT


196 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

197 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

199 
	#›í©
 
›í©64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

204 
	`__n⁄nuŒ
 ((2));

213 #i‚de‡
__USE_FILE_OFFSET64


214 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

216 #ifde‡
__REDIRECT


217 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

218 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

220 
	#¸ót
 
¸ót64


	)

223 #ifde‡
__USE_LARGEFILE64


224 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

227 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

228 && !
deföed
 
__USE_POSIX
))

237 
	#F_ULOCK
 0

	)

238 
	#F_LOCK
 1

	)

239 
	#F_TLOCK
 2

	)

240 
	#F_TEST
 3

	)

242 #i‚de‡
__USE_FILE_OFFSET64


243 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

245 #ifde‡
__REDIRECT


246 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

248 
	#lockf
 
lockf64


	)

251 #ifde‡
__USE_LARGEFILE64


252 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

256 #ifde‡
__USE_XOPEN2K


259 #i‚de‡
__USE_FILE_OFFSET64


260 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

261 
__advi£
Ë
__THROW
;

263 #ifde‡
__REDIRECT_NTH


264 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

265 
__off64_t
 
__Àn
, 
__advi£
),

266 
posix_Ádvi£64
);

268 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

271 #ifde‡
__USE_LARGEFILE64


272 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

273 
__advi£
Ë
__THROW
;

281 #i‚de‡
__USE_FILE_OFFSET64


282 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

284 #ifde‡
__REDIRECT


285 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

286 
__off64_t
 
__Àn
),

287 
posix_ÁŒoˇã64
);

289 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

292 #ifde‡
__USE_LARGEFILE64


293 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

299 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

300 && 
deföed
 
__va_¨g_∑ck_Àn


301 
	~<bôs/f˙é2.h
>

304 
__END_DECLS


	@/usr/include/grp.h

22 #i‚def 
_GRP_H


23 
	#_GRP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

36 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

42 
	sgroup


44 *
	mgr_«me
;

45 *
	mgr_∑sswd
;

46 
__gid_t
 
	mgr_gid
;

47 **
	mgr_mem
;

51 #ifde‡
__USE_MISC


52 
	~<bôs/ty≥s/FILE.h
>

56 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


61 
£tgª¡
 ();

67 
ídgª¡
 ();

73 
group
 *
gëgª¡
 ();

76 #ifdef 
__USE_MISC


83 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

86 #ifde‡
__USE_GNU


93 
putgª¡
 (c⁄° 
group
 *
__ª°ri˘
 
__p
,

94 
FILE
 *
__ª°ri˘
 
__f
);

101 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

107 
group
 *
gëg∫am
 (c⁄° *
__«me
);

109 #ifde‡
__USE_POSIX


111 #ifde‡
__USE_MISC


114 
	#NSS_BUFLEN_GROUP
 1024

	)

130 #ifde‡
__USE_GNU


131 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

132 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

133 
group
 **
__ª°ri˘
 
__ªsu…
);

140 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

141 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

142 
group
 **
__ª°ri˘
 
__ªsu…
);

148 
gëg∫am_r
 (c⁄° *
__ª°ri˘
 
__«me
,

149 
group
 *
__ª°ri˘
 
__ªsu…buf
,

150 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

151 
group
 **
__ª°ri˘
 
__ªsu…
);

153 #ifdef 
__USE_MISC


161 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

162 
group
 *
__ª°ri˘
 
__ªsu…buf
,

163 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

164 
group
 **
__ª°ri˘
 
__ªsu…
);

170 #ifdef 
__USE_MISC


172 
	#__√ed_size_t


	)

173 
	~<°ddef.h
>

176 
	$£tgroups
 (
size_t
 
__n
, c⁄° 
__gid_t
 *
__groups
Ë
__THROW
;

186 
	`gëgrou∂i°
 (c⁄° *
__u£r
, 
__gid_t
 
__group
,

187 
__gid_t
 *
__groups
, *
__ngroups
);

197 
	`öôgroups
 (c⁄° *
__u£r
, 
__gid_t
 
__group
);

201 
__END_DECLS


	@/usr/include/ifaddrs.h

19 #i‚de‡
_IFADDRS_H


20 
	#_IFADDRS_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/sockë.h
>

25 
__BEGIN_DECLS


29 
	siÁddrs


31 
iÁddrs
 *
	miÁ_√xt
;

33 *
	miÁ_«me
;

34 
	miÁ_Êags
;

36 
sockaddr
 *
	miÁ_addr
;

37 
sockaddr
 *
	miÁ_√tmask
;

44 
sockaddr
 *
	mifu_brﬂdaddr
;

45 
sockaddr
 *
	mifu_d°addr
;

46 } 
	miÁ_ifu
;

49 #i‚de‡
iÁ_brﬂdaddr


50 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

52 #i‚de‡
iÁ_d°addr


53 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

56 *
	miÁ_d©a
;

66 
	$gëiÁddrs
 (
iÁddrs
 **
__iÁp
Ë
__THROW
;

69 
	$‰ìiÁddrs
 (
iÁddrs
 *
__iÁ
Ë
__THROW
;

71 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libgen.h

18 #i‚de‡
_LIBGEN_H


19 
	#_LIBGEN_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

34 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

35 
	#ba£«me
 
__xpg_ba£«me


	)

37 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

181 #ifdef 
__USE_POSIX


183 
	~<bôs/posix1_lim.h
>

186 #ifdef 
__USE_POSIX2


187 
	~<bôs/posix2_lim.h
>

190 #ifdef 
__USE_XOPEN


191 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/in.h

19 #i‚de‡
_LINUX_IN_H


20 
	#_LINUX_IN_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/libc-com∑t.h
>

24 
	~<löux/sockë.h
>

26 #i‡
__UAPI_DEF_IN_IPPROTO


29 
	mIPPROTO_IP
 = 0,

30 
	#IPPROTO_IP
 
IPPROTO_IP


	)

31 
	mIPPROTO_ICMP
 = 1,

32 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

33 
	mIPPROTO_IGMP
 = 2,

34 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

35 
	mIPPROTO_IPIP
 = 4,

36 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

37 
	mIPPROTO_TCP
 = 6,

38 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

39 
	mIPPROTO_EGP
 = 8,

40 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

41 
	mIPPROTO_PUP
 = 12,

42 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

43 
	mIPPROTO_UDP
 = 17,

44 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

45 
	mIPPROTO_IDP
 = 22,

46 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

47 
	mIPPROTO_TP
 = 29,

48 
	#IPPROTO_TP
 
IPPROTO_TP


	)

49 
	mIPPROTO_DCCP
 = 33,

50 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

51 
	mIPPROTO_IPV6
 = 41,

52 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

53 
	mIPPROTO_RSVP
 = 46,

54 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

55 
	mIPPROTO_GRE
 = 47,

56 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

57 
	mIPPROTO_ESP
 = 50,

58 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

59 
	mIPPROTO_AH
 = 51,

60 
	#IPPROTO_AH
 
IPPROTO_AH


	)

61 
	mIPPROTO_MTP
 = 92,

62 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

63 
	mIPPROTO_BEETPH
 = 94,

64 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

65 
	mIPPROTO_ENCAP
 = 98,

66 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

67 
	mIPPROTO_PIM
 = 103,

68 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

69 
	mIPPROTO_COMP
 = 108,

70 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

71 
	mIPPROTO_SCTP
 = 132,

72 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

73 
	mIPPROTO_UDPLITE
 = 136,

74 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

75 
	mIPPROTO_MPLS
 = 137,

76 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

77 
	mIPPROTO_ETHERNET
 = 143,

78 
	#IPPROTO_ETHERNET
 
IPPROTO_ETHERNET


	)

79 
	mIPPROTO_RAW
 = 255,

80 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

81 
	mIPPROTO_MPTCP
 = 262,

82 
	#IPPROTO_MPTCP
 
IPPROTO_MPTCP


	)

83 
	mIPPROTO_MAX


87 #i‡
__UAPI_DEF_IN_ADDR


89 
	sö_addr
 {

90 
__be32
 
	ms_addr
;

94 
	#IP_TOS
 1

	)

95 
	#IP_TTL
 2

	)

96 
	#IP_HDRINCL
 3

	)

97 
	#IP_OPTIONS
 4

	)

98 
	#IP_ROUTER_ALERT
 5

	)

99 
	#IP_RECVOPTS
 6

	)

100 
	#IP_RETOPTS
 7

	)

101 
	#IP_PKTINFO
 8

	)

102 
	#IP_PKTOPTIONS
 9

	)

103 
	#IP_MTU_DISCOVER
 10

	)

104 
	#IP_RECVERR
 11

	)

105 
	#IP_RECVTTL
 12

	)

106 
	#IP_RECVTOS
 13

	)

107 
	#IP_MTU
 14

	)

108 
	#IP_FREEBIND
 15

	)

109 
	#IP_IPSEC_POLICY
 16

	)

110 
	#IP_XFRM_POLICY
 17

	)

111 
	#IP_PASSSEC
 18

	)

112 
	#IP_TRANSPARENT
 19

	)

115 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

118 
	#IP_ORIGDSTADDR
 20

	)

119 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

121 
	#IP_MINTTL
 21

	)

122 
	#IP_NODEFRAG
 22

	)

123 
	#IP_CHECKSUM
 23

	)

124 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

125 
	#IP_RECVFRAGSIZE
 25

	)

126 
	#IP_RECVERR_RFC4884
 26

	)

129 
	#IP_PMTUDISC_DONT
 0

	)

130 
	#IP_PMTUDISC_WANT
 1

	)

131 
	#IP_PMTUDISC_DO
 2

	)

132 
	#IP_PMTUDISC_PROBE
 3

	)

137 
	#IP_PMTUDISC_INTERFACE
 4

	)

141 
	#IP_PMTUDISC_OMIT
 5

	)

143 
	#IP_MULTICAST_IF
 32

	)

144 
	#IP_MULTICAST_TTL
 33

	)

145 
	#IP_MULTICAST_LOOP
 34

	)

146 
	#IP_ADD_MEMBERSHIP
 35

	)

147 
	#IP_DROP_MEMBERSHIP
 36

	)

148 
	#IP_UNBLOCK_SOURCE
 37

	)

149 
	#IP_BLOCK_SOURCE
 38

	)

150 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

151 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

152 
	#IP_MSFILTER
 41

	)

153 
	#MCAST_JOIN_GROUP
 42

	)

154 
	#MCAST_BLOCK_SOURCE
 43

	)

155 
	#MCAST_UNBLOCK_SOURCE
 44

	)

156 
	#MCAST_LEAVE_GROUP
 45

	)

157 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

158 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

159 
	#MCAST_MSFILTER
 48

	)

160 
	#IP_MULTICAST_ALL
 49

	)

161 
	#IP_UNICAST_IF
 50

	)

163 
	#MCAST_EXCLUDE
 0

	)

164 
	#MCAST_INCLUDE
 1

	)

167 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

168 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

172 #i‡
__UAPI_DEF_IP_MREQ


173 
	sù_mªq
 {

174 
ö_addr
 
	mimr_mu…üddr
;

175 
ö_addr
 
	mimr_öãrÁ˚
;

178 
	sù_mªqn
 {

179 
ö_addr
 
	mimr_mu…üddr
;

180 
ö_addr
 
	mimr_addªss
;

181 
	mimr_ifödex
;

184 
	sù_mªq_sour˚
 {

185 
__be32
 
	mimr_mu…üddr
;

186 
__be32
 
	mimr_öãrÁ˚
;

187 
__be32
 
	mimr_sour˚addr
;

190 
	sù_msfûãr
 {

193 
__be32
 
	mimsf_mu…üddr_aux
;

194 
__be32
 
	mimsf_öãrÁ˚_aux
;

195 
__u32
 
	mimsf_fmode_aux
;

196 
__u32
 
	mimsf_num§c_aux
;

197 
__be32
 
	mimsf_¶i°
[1];

200 
__be32
 
	mimsf_mu…üddr
;

201 
__be32
 
	mimsf_öãrÁ˚
;

202 
__u32
 
	mimsf_fmode
;

203 
__u32
 
	mimsf_num§c
;

204 
__be32
 
	mimsf_¶i°_Êex
[];

209 
	#IP_MSFILTER_SIZE
(
num§c
) \

210 ((
ù_msfûãr
Ë- (
__u32
) \

211 + (
num§c
Ë* (
__u32
))

	)

213 
	sgroup_ªq
 {

214 
__u32
 
	mgr_öãrÁ˚
;

215 
__kî√l_sockaddr_°‹age
 
	mgr_group
;

218 
	sgroup_sour˚_ªq
 {

219 
__u32
 
	mg§_öãrÁ˚
;

220 
__kî√l_sockaddr_°‹age
 
	mg§_group
;

221 
__kî√l_sockaddr_°‹age
 
	mg§_sour˚
;

224 
	sgroup_fûãr
 {

227 
__u32
 
	mgf_öãrÁ˚_aux
;

228 
__kî√l_sockaddr_°‹age
 
	mgf_group_aux
;

229 
__u32
 
	mgf_fmode_aux
;

230 
__u32
 
	mgf_num§c_aux
;

231 
__kî√l_sockaddr_°‹age
 
	mgf_¶i°
[1];

234 
__u32
 
	mgf_öãrÁ˚
;

235 
__kî√l_sockaddr_°‹age
 
	mgf_group
;

236 
__u32
 
	mgf_fmode
;

237 
__u32
 
	mgf_num§c
;

238 
__kî√l_sockaddr_°‹age
 
	mgf_¶i°_Êex
[];

243 
	#GROUP_FILTER_SIZE
(
num§c
) \

244 ((
group_fûãr
Ë- (
__kî√l_sockaddr_°‹age
) \

245 + (
num§c
Ë* (
__kî√l_sockaddr_°‹age
))

	)

248 #i‡
__UAPI_DEF_IN_PKTINFO


249 
	sö_pktöfo
 {

250 
	mùi_ifödex
;

251 
ö_addr
 
	mùi_•ec_d°
;

252 
ö_addr
 
	mùi_addr
;

257 #i‡ 
__UAPI_DEF_SOCKADDR_IN


258 
	#__SOCK_SIZE__
 16

	)

259 
	ssockaddr_ö
 {

260 
__kî√l_ß_Ámûy_t
 
	msö_Ámûy
;

261 
__be16
 
	msö_p‹t
;

262 
ö_addr
 
	msö_addr
;

265 
	m__∑d
[
__SOCK_SIZE__
 - () -

266 (Ë- (
ö_addr
)];

268 
	#sö_zîo
 
__∑d


	)

271 #i‡
__UAPI_DEF_IN_CLASS


277 
	#IN_CLASSA
(
a
Ë((((Ë◊)Ë& 0x80000000Ë=0)

	)

278 
	#IN_CLASSA_NET
 0xff000000

	)

279 
	#IN_CLASSA_NSHIFT
 24

	)

280 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

281 
	#IN_CLASSA_MAX
 128

	)

283 
	#IN_CLASSB
(
a
Ë((((Ë◊)Ë& 0xc0000000Ë=0x80000000)

	)

284 
	#IN_CLASSB_NET
 0xffff0000

	)

285 
	#IN_CLASSB_NSHIFT
 16

	)

286 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

287 
	#IN_CLASSB_MAX
 65536

	)

289 
	#IN_CLASSC
(
a
Ë((((Ë◊)Ë& 0xe0000000Ë=0xc0000000)

	)

290 
	#IN_CLASSC_NET
 0xffffff00

	)

291 
	#IN_CLASSC_NSHIFT
 8

	)

292 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

294 
	#IN_CLASSD
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xe0000000)

	)

295 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

296 
	#IN_MULTICAST_NET
 0xe0000000

	)

298 
	#IN_BADCLASS
(
a
Ë(((Ë◊ËË=()0xffffffff)

	)

299 
	#IN_EXPERIMENTAL
(
a
Ë
	`IN_BADCLASS
(◊))

	)

301 
	#IN_CLASSE
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xf0000000)

	)

302 
	#IN_CLASSE_NET
 0xffffffff

	)

303 
	#IN_CLASSE_NSHIFT
 0

	)

306 
	#INADDR_ANY
 ((Ë0x00000000)

	)

309 
	#INADDR_BROADCAST
 ((Ë0xffffffff)

	)

312 
	#INADDR_NONE
 ((Ë0xffffffff)

	)

315 
	#INADDR_DUMMY
 ((Ë0xc0000008)

	)

318 
	#IN_LOOPBACKNET
 127

	)

321 
	#INADDR_LOOPBACK
 0x7f000001

	)

322 
	#IN_LOOPBACK
(
a
Ë((((Ë◊)Ë& 0xff000000Ë=0x7f000000)

	)

325 
	#INADDR_UNSPEC_GROUP
 0xe0000000U

	)

326 
	#INADDR_ALLHOSTS_GROUP
 0xe0000001U

	)

327 
	#INADDR_ALLRTRS_GROUP
 0xe0000002U

	)

328 
	#INADDR_ALLSNOOPERS_GROUP
 0xe000006aU

	)

329 
	#INADDR_MAX_LOCAL_GROUP
 0xe00000ffU

	)

333 
	~<asm/byã‹dî.h
>

	@/usr/include/linux/in6.h

22 #i‚de‡
_LINUX_IN6_H


23 
	#_LINUX_IN6_H


	)

25 
	~<löux/ty≥s.h
>

26 
	~<löux/libc-com∑t.h
>

32 #i‡
__UAPI_DEF_IN6_ADDR


33 
	sö6_addr
 {

35 
__u8
 
	mu6_addr8
[16];

36 #i‡
__UAPI_DEF_IN6_ADDR_ALT


37 
__be16
 
	mu6_addr16
[8];

38 
__be32
 
	mu6_addr32
[4];

40 } 
	mö6_u
;

41 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

42 #i‡
__UAPI_DEF_IN6_ADDR_ALT


43 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

44 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

49 #i‡
__UAPI_DEF_SOCKADDR_IN6


50 
	ssockaddr_ö6
 {

51 
	msö6_Ámûy
;

52 
__be16
 
	msö6_p‹t
;

53 
__be32
 
	msö6_Êowöfo
;

54 
ö6_addr
 
	msö6_addr
;

55 
__u32
 
	msö6_sc›e_id
;

59 #i‡
__UAPI_DEF_IPV6_MREQ


60 
	sùv6_mªq
 {

62 
ö6_addr
 
	mùv6mr_mu…üddr
;

65 
	mùv6mr_ifödex
;

69 
	#ùv6mr_aˇddr
 
ùv6mr_mu…üddr


	)

71 
	sö6_Êowœbñ_ªq
 {

72 
ö6_addr
 
	mÊr_d°
;

73 
__be32
 
	mÊr_œbñ
;

74 
__u8
 
	mÊr_a˘i⁄
;

75 
__u8
 
	mÊr_sh¨e
;

76 
__u16
 
	mÊr_Êags
;

77 
__u16
 
	mÊr_expúes
;

78 
__u16
 
	mÊr_lögî
;

79 
__u32
 
	m__Êr_∑d
;

83 
	#IPV6_FL_A_GET
 0

	)

84 
	#IPV6_FL_A_PUT
 1

	)

85 
	#IPV6_FL_A_RENEW
 2

	)

87 
	#IPV6_FL_F_CREATE
 1

	)

88 
	#IPV6_FL_F_EXCL
 2

	)

89 
	#IPV6_FL_F_REFLECT
 4

	)

90 
	#IPV6_FL_F_REMOTE
 8

	)

92 
	#IPV6_FL_S_NONE
 0

	)

93 
	#IPV6_FL_S_EXCL
 1

	)

94 
	#IPV6_FL_S_PROCESS
 2

	)

95 
	#IPV6_FL_S_USER
 3

	)

96 
	#IPV6_FL_S_ANY
 255

	)

107 
	#IPV6_FLOWINFO_FLOWLABEL
 0x000fffff

	)

108 
	#IPV6_FLOWINFO_PRIORITY
 0x0ff00000

	)

111 
	#IPV6_PRIORITY_UNCHARACTERIZED
 0x0000

	)

112 
	#IPV6_PRIORITY_FILLER
 0x0100

	)

113 
	#IPV6_PRIORITY_UNATTENDED
 0x0200

	)

114 
	#IPV6_PRIORITY_RESERVED1
 0x0300

	)

115 
	#IPV6_PRIORITY_BULK
 0x0400

	)

116 
	#IPV6_PRIORITY_RESERVED2
 0x0500

	)

117 
	#IPV6_PRIORITY_INTERACTIVE
 0x0600

	)

118 
	#IPV6_PRIORITY_CONTROL
 0x0700

	)

119 
	#IPV6_PRIORITY_8
 0x0800

	)

120 
	#IPV6_PRIORITY_9
 0x0900

	)

121 
	#IPV6_PRIORITY_10
 0x0a00

	)

122 
	#IPV6_PRIORITY_11
 0x0b00

	)

123 
	#IPV6_PRIORITY_12
 0x0c00

	)

124 
	#IPV6_PRIORITY_13
 0x0d00

	)

125 
	#IPV6_PRIORITY_14
 0x0e00

	)

126 
	#IPV6_PRIORITY_15
 0x0f00

	)

131 #i‡
__UAPI_DEF_IPPROTO_V6


132 
	#IPPROTO_HOPOPTS
 0

	)

133 
	#IPPROTO_ROUTING
 43

	)

134 
	#IPPROTO_FRAGMENT
 44

	)

135 
	#IPPROTO_ICMPV6
 58

	)

136 
	#IPPROTO_NONE
 59

	)

137 
	#IPPROTO_DSTOPTS
 60

	)

138 
	#IPPROTO_MH
 135

	)

144 
	#IPV6_TLV_PAD1
 0

	)

145 
	#IPV6_TLV_PADN
 1

	)

146 
	#IPV6_TLV_ROUTERALERT
 5

	)

147 
	#IPV6_TLV_CALIPSO
 7

	)

148 
	#IPV6_TLV_IOAM
 49

	)

149 
	#IPV6_TLV_JUMBO
 194

	)

150 
	#IPV6_TLV_HAO
 201

	)

155 #i‡
__UAPI_DEF_IPV6_OPTIONS


156 
	#IPV6_ADDRFORM
 1

	)

157 
	#IPV6_2292PKTINFO
 2

	)

158 
	#IPV6_2292HOPOPTS
 3

	)

159 
	#IPV6_2292DSTOPTS
 4

	)

160 
	#IPV6_2292RTHDR
 5

	)

161 
	#IPV6_2292PKTOPTIONS
 6

	)

162 
	#IPV6_CHECKSUM
 7

	)

163 
	#IPV6_2292HOPLIMIT
 8

	)

164 
	#IPV6_NEXTHOP
 9

	)

165 
	#IPV6_AUTHHDR
 10

	)

166 
	#IPV6_FLOWINFO
 11

	)

168 
	#IPV6_UNICAST_HOPS
 16

	)

169 
	#IPV6_MULTICAST_IF
 17

	)

170 
	#IPV6_MULTICAST_HOPS
 18

	)

171 
	#IPV6_MULTICAST_LOOP
 19

	)

172 
	#IPV6_ADD_MEMBERSHIP
 20

	)

173 
	#IPV6_DROP_MEMBERSHIP
 21

	)

174 
	#IPV6_ROUTER_ALERT
 22

	)

175 
	#IPV6_MTU_DISCOVER
 23

	)

176 
	#IPV6_MTU
 24

	)

177 
	#IPV6_RECVERR
 25

	)

178 
	#IPV6_V6ONLY
 26

	)

179 
	#IPV6_JOIN_ANYCAST
 27

	)

180 
	#IPV6_LEAVE_ANYCAST
 28

	)

181 
	#IPV6_MULTICAST_ALL
 29

	)

182 
	#IPV6_ROUTER_ALERT_ISOLATE
 30

	)

183 
	#IPV6_RECVERR_RFC4884
 31

	)

186 
	#IPV6_PMTUDISC_DONT
 0

	)

187 
	#IPV6_PMTUDISC_WANT
 1

	)

188 
	#IPV6_PMTUDISC_DO
 2

	)

189 
	#IPV6_PMTUDISC_PROBE
 3

	)

193 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

197 
	#IPV6_PMTUDISC_OMIT
 5

	)

200 
	#IPV6_FLOWLABEL_MGR
 32

	)

201 
	#IPV6_FLOWINFO_SEND
 33

	)

203 
	#IPV6_IPSEC_POLICY
 34

	)

204 
	#IPV6_XFRM_POLICY
 35

	)

205 
	#IPV6_HDRINCL
 36

	)

227 
	#IPV6_RECVPKTINFO
 49

	)

228 
	#IPV6_PKTINFO
 50

	)

229 
	#IPV6_RECVHOPLIMIT
 51

	)

230 
	#IPV6_HOPLIMIT
 52

	)

231 
	#IPV6_RECVHOPOPTS
 53

	)

232 
	#IPV6_HOPOPTS
 54

	)

233 
	#IPV6_RTHDRDSTOPTS
 55

	)

234 
	#IPV6_RECVRTHDR
 56

	)

235 
	#IPV6_RTHDR
 57

	)

236 
	#IPV6_RECVDSTOPTS
 58

	)

237 
	#IPV6_DSTOPTS
 59

	)

238 
	#IPV6_RECVPATHMTU
 60

	)

239 
	#IPV6_PATHMTU
 61

	)

240 
	#IPV6_DONTFRAG
 62

	)

242 
	#IPV6_USE_MIN_MTU
 63

	)

258 
	#IPV6_RECVTCLASS
 66

	)

259 
	#IPV6_TCLASS
 67

	)

272 
	#IPV6_AUTOFLOWLABEL
 70

	)

274 
	#IPV6_ADDR_PREFERENCES
 72

	)

276 
	#IPV6_PREFER_SRC_TMP
 0x0001

	)

277 
	#IPV6_PREFER_SRC_PUBLIC
 0x0002

	)

278 
	#IPV6_PREFER_SRC_PUBTMP_DEFAULT
 0x0100

	)

279 
	#IPV6_PREFER_SRC_COA
 0x0004

	)

280 
	#IPV6_PREFER_SRC_HOME
 0x0400

	)

281 
	#IPV6_PREFER_SRC_CGA
 0x0008

	)

282 
	#IPV6_PREFER_SRC_NONCGA
 0x0800

	)

285 
	#IPV6_MINHOPCOUNT
 73

	)

287 
	#IPV6_ORIGDSTADDR
 74

	)

288 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

289 
	#IPV6_TRANSPARENT
 75

	)

290 
	#IPV6_UNICAST_IF
 76

	)

291 
	#IPV6_RECVFRAGSIZE
 77

	)

292 
	#IPV6_FREEBIND
 78

	)

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
	slc⁄v


55 *
	mdecimÆ_poöt
;

56 *
	mthoußnds_£p
;

62 *
	mgroupög
;

68 *
	möt_cuº_symbﬁ
;

69 *
	mcuºícy_symbﬁ
;

70 *
	mm⁄_decimÆ_poöt
;

71 *
	mm⁄_thoußnds_£p
;

72 *
	mm⁄_groupög
;

73 *
	mposôive_sign
;

74 *
	m√g©ive_sign
;

75 
	möt_‰ac_digôs
;

76 
	m‰ac_digôs
;

78 
	mp_cs_¥e˚des
;

80 
	mp_£p_by_•a˚
;

82 
	mn_cs_¥e˚des
;

84 
	mn_£p_by_•a˚
;

91 
	mp_sign_po¢
;

92 
	mn_sign_po¢
;

93 #ifde‡
__USE_ISOC99


95 
	möt_p_cs_¥e˚des
;

97 
	möt_p_£p_by_•a˚
;

99 
	möt_n_cs_¥e˚des
;

101 
	möt_n_£p_by_•a˚
;

108 
	möt_p_sign_po¢
;

109 
	möt_n_sign_po¢
;

111 
	m__öt_p_cs_¥e˚des
;

112 
	m__öt_p_£p_by_•a˚
;

113 
	m__öt_n_cs_¥e˚des
;

114 
	m__öt_n_£p_by_•a˚
;

115 
	m__öt_p_sign_po¢
;

116 
	m__öt_n_sign_po¢
;

122 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

125 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

128 #ifdef 
__USE_XOPEN2K8


135 
	~<bôs/ty≥s/loˇÀ_t.h
>

141 
loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

142 
loˇÀ_t
 
__ba£
Ë
__THROW
;

148 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

149 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

150 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

151 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

152 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

153 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

154 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

155 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

156 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

157 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

158 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

159 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

160 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

161 | 
LC_NUMERIC_MASK
 \

162 | 
LC_TIME_MASK
 \

163 | 
LC_COLLATE_MASK
 \

164 | 
LC_MONETARY_MASK
 \

165 | 
LC_MESSAGES_MASK
 \

166 | 
LC_PAPER_MASK
 \

167 | 
LC_NAME_MASK
 \

168 | 
LC_ADDRESS_MASK
 \

169 | 
LC_TELEPHONE_MASK
 \

170 | 
LC_MEASUREMENT_MASK
 \

171 | 
LC_IDENTIFICATION_MASK
 \

172 )

	)

176 
loˇÀ_t
 
	$du∂oˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

180 
	$‰ìloˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

187 
loˇÀ_t
 
	$u£loˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	#LC_GLOBAL_LOCALE
 ((
loˇÀ_t
Ë-1L)

	)

195 
__END_DECLS


	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


39 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

42 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

43 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

50 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

51 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

58 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

59 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2, 3));

62 
	$‰ì
 (*
__±r
Ë
__THROW
;

65 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

66 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

69 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


70 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

74 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

78 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

81 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

82 
__THROW
 
__©åibuã_mÆloc__
;

86 
	smÆlöfo


88 
¨ía
;

89 
‹dblks
;

90 
smblks
;

91 
hblks
;

92 
hblkhd
;

93 
usmblks
;

94 
fsmblks
;

95 
u‹dblks
;

96 
f‹dblks
;

97 
kìpco°
;

101 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

104 #i‚de‡
M_MXFAST


105 
	#M_MXFAST
 1

	)

107 #i‚de‡
M_NLBLKS


108 
	#M_NLBLKS
 2

	)

110 #i‚de‡
M_GRAIN


111 
	#M_GRAIN
 3

	)

113 #i‚de‡
M_KEEP


114 
	#M_KEEP
 4

	)

118 
	#M_TRIM_THRESHOLD
 -1

	)

119 
	#M_TOP_PAD
 -2

	)

120 
	#M_MMAP_THRESHOLD
 -3

	)

121 
	#M_MMAP_MAX
 -4

	)

122 
	#M_CHECK_ACTION
 -5

	)

123 
	#M_PERTURB
 -6

	)

124 
	#M_ARENA_TEST
 -7

	)

125 
	#M_ARENA_MAX
 -8

	)

128 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

132 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

136 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

139 
	$mÆloc_°©s
 (Ë
__THROW
;

142 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

145 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

147 
__MALLOC_DEPRECATED
;

148 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

150 
__MALLOC_DEPRECATED
;

151 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

152 
size_t
 
__size
,

154 
__MALLOC_DEPRECATED
;

155 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

156 
size_t
 
__size
,

158 
__MALLOC_DEPRECATED
;

159 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

162 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 #i‡
deföed
 
log
 && deföed 
__GNUC__


30 #w¨nög 
A
 
ma¸o
 
ˇŒed
 
log
 
was
 
Æªady
 
deföed
 
whí
 <
m©h
.
h
> wa†
ö˛uded
.

31 #w¨nög 
This
 
wûl
 
ˇu£
 
compû©i⁄
 
¥obÀms
.

34 
	g__BEGIN_DECLS


37 
	~<bôs/ty≥s.h
>

40 
	~<bôs/m©h-ve˘‹.h
>

43 
	~<bôs/Êﬂä.h
>

47 #i‡
__GNUC_PREREQ
 (3, 3)

48 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
 ())

	)

55 
	#HUGE_VAL
 1e10000

	)

57 #ifde‡
__USE_ISOC99


58 #i‡
__GNUC_PREREQ
 (3, 3)

59 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
 ())

	)

60 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
 ())

	)

62 
	#HUGE_VALF
 1e10000f

	)

63 
	#HUGE_VALL
 1e10000L

	)

66 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

67 
	#HUGE_VAL_F16
 (
	`__buûtö_huge_vÆf16
 ())

	)

69 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

70 
	#HUGE_VAL_F32
 (
	`__buûtö_huge_vÆf32
 ())

	)

72 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

73 
	#HUGE_VAL_F64
 (
	`__buûtö_huge_vÆf64
 ())

	)

75 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

76 
	#HUGE_VAL_F128
 (
	`__buûtö_huge_vÆf128
 ())

	)

78 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

79 
	#HUGE_VAL_F32X
 (
	`__buûtö_huge_vÆf32x
 ())

	)

81 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

82 
	#HUGE_VAL_F64X
 (
	`__buûtö_huge_vÆf64x
 ())

	)

84 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

85 
	#HUGE_VAL_F128X
 (
	`__buûtö_huge_vÆf128x
 ())

	)

88 #ifde‡
__USE_ISOC99


90 #i‡
__GNUC_PREREQ
 (3, 3)

91 
	#INFINITY
 (
	`__buûtö_öff
 ())

	)

93 
	#INFINITY
 
HUGE_VALF


	)

97 #i‡
__GNUC_PREREQ
 (3, 3)

98 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

103 
	#NAN
 (0.0‡/ 0.0f)

	)

107 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

109 #i‡
__GNUC_PREREQ
 (3, 3)

110 
	#SNANF
 (
	`__buûtö_«nsf
 (""))

	)

111 
	#SNAN
 (
	`__buûtö_«ns
 (""))

	)

112 
	#SNANL
 (
	`__buûtö_«n¶
 (""))

	)

115 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

116 
	#SNANF16
 (
	`__buûtö_«nsf16
 (""))

	)

118 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

119 
	#SNANF32
 (
	`__buûtö_«nsf32
 (""))

	)

121 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

122 
	#SNANF64
 (
	`__buûtö_«nsf64
 (""))

	)

124 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

125 
	#SNANF128
 (
	`__buûtö_«nsf128
 (""))

	)

127 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

128 
	#SNANF32X
 (
	`__buûtö_«nsf32x
 (""))

	)

130 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

131 
	#SNANF64X
 (
	`__buûtö_«nsf64x
 (""))

	)

133 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
	#SNANF128X
 (
	`__buûtö_«nsf128x
 (""))

	)

138 
	~<bôs/Êt-evÆ-mëhod.h
>

140 #ifde‡
__USE_ISOC99


148 #i‡
__GLIBC_FLT_EVAL_METHOD
 == 0 || __GLIBC_FLT_EVAL_METHOD == 16

149 
	tÊﬂt_t
;

150 
	tdoubÀ_t
;

151 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 1

152 
	tÊﬂt_t
;

153 
	tdoubÀ_t
;

154 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 2

155 
	tÊﬂt_t
;

156 
	tdoubÀ_t
;

157 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 32

158 
_Flﬂt32
 
	tÊﬂt_t
;

159 
	tdoubÀ_t
;

160 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 33

161 
_Flﬂt32x
 
	tÊﬂt_t
;

162 
_Flﬂt32x
 
	tdoubÀ_t
;

163 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 64

164 
_Flﬂt64
 
	tÊﬂt_t
;

165 
_Flﬂt64
 
	tdoubÀ_t
;

166 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 65

167 
_Flﬂt64x
 
	tÊﬂt_t
;

168 
_Flﬂt64x
 
	tdoubÀ_t
;

169 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 128

170 
_Flﬂt128
 
	tÊﬂt_t
;

171 
_Flﬂt128
 
	tdoubÀ_t
;

172 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 129

173 
_Flﬂt128x
 
	tÊﬂt_t
;

174 
_Flﬂt128x
 
	tdoubÀ_t
;

190 
	~<bôs/Â-logb.h
>

191 #ifde‡
__USE_ISOC99


192 #i‡
__FP_LOGB0_IS_MIN


193 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

195 
	#FP_ILOGB0
 (-2147483647)

	)

197 #i‡
__FP_LOGBNAN_IS_MIN


198 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

200 
	#FP_ILOGBNAN
 2147483647

	)

203 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

204 #i‡
__WORDSIZE
 == 32

205 
	#__FP_LONG_MAX
 0x7fffffffL

	)

207 
	#__FP_LONG_MAX
 0x7fffffffffffffffL

	)

209 #i‡
__FP_LOGB0_IS_MIN


210 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
 - 1)

	)

212 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
)

	)

214 #i‡
__FP_LOGBNAN_IS_MIN


215 
	#FP_LLOGBNAN
 (-
__FP_LONG_MAX
 - 1)

	)

217 
	#FP_LLOGBNAN
 
__FP_LONG_MAX


	)

233 
	~<bôs/Â-Á°.h
>

235 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

239 
	mFP_INT_UPWARD
 =

240 
	#FP_INT_UPWARD
 0

	)

241 
FP_INT_UPWARD
,

242 
	mFP_INT_DOWNWARD
 =

243 
	#FP_INT_DOWNWARD
 1

	)

244 
FP_INT_DOWNWARD
,

245 
	mFP_INT_TOWARDZERO
 =

246 
	#FP_INT_TOWARDZERO
 2

	)

247 
FP_INT_TOWARDZERO
,

248 
	mFP_INT_TONEARESTFROMZERO
 =

249 
	#FP_INT_TONEARESTFROMZERO
 3

	)

250 
FP_INT_TONEARESTFROMZERO
,

251 
	mFP_INT_TONEAREST
 =

252 
	#FP_INT_TONEAREST
 4

	)

253 
FP_INT_TONEAREST
,

262 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

264 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

265 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

266 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

268 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

269 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

270 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

272 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

273 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

274 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

275 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

276 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

277 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

278 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

279 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

280 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

281 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

282 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

283 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

285 
	#_MdoubÀ_
 

	)

286 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

287 
	#__MATH_DECLARING_DOUBLE
 1

	)

288 
	#__MATH_DECLARING_FLOATN
 0

	)

289 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

290 
	~<bôs/m©hˇŒs.h
>

291 #unde‡
_MdoubÀ_


292 #unde‡
__MATH_PRECNAME


293 #unde‡
__MATH_DECLARING_DOUBLE


294 #unde‡
__MATH_DECLARING_FLOATN


296 #ifde‡
__USE_ISOC99


302 
	#_MdoubÀ_
 

	)

303 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

304 
	#__MATH_DECLARING_DOUBLE
 0

	)

305 
	#__MATH_DECLARING_FLOATN
 0

	)

306 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

307 
	~<bôs/m©hˇŒs.h
>

308 #unde‡
_MdoubÀ_


309 #unde‡
__MATH_PRECNAME


310 #unde‡
__MATH_DECLARING_DOUBLE


311 #unde‡
__MATH_DECLARING_FLOATN


313 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

314 || 
deföed
 
__LDBL_COMPAT
 \

315 || 
deföed
 
_LIBC_TEST


316 #ifde‡
__LDBL_COMPAT


318 #ifde‡
__USE_ISOC99


319 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

320 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

321 #ifde‡
__REDIRECT_NTH


322 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

323 
__∆dbl_√xâow¨df
)

324 
	`__©åibuã__
 ((
__c⁄°__
));

325 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

326 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

327 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

328 (
__x
, 
__y
),

329 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

333 #unde‡
__MATHDECL_1


334 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

335 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

336 
¨gs
, 
Æüs
)

	)

337 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

338 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

344 
	#_MdoubÀ_
 

	)

345 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

346 
	#__MATH_DECLARING_DOUBLE
 0

	)

347 
	#__MATH_DECLARING_FLOATN
 0

	)

348 
	#__MATH_DECLARE_LDOUBLE
 1

	)

349 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

350 
	~<bôs/m©hˇŒs.h
>

351 #unde‡
_MdoubÀ_


352 #unde‡
__MATH_PRECNAME


353 #unde‡
__MATH_DECLARING_DOUBLE


354 #unde‡
__MATH_DECLARING_FLOATN


363 #i‡
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)

364 
	#_MdoubÀ_
 
_Flﬂt16


	)

365 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f16
##
	)
r

366 
	#__MATH_DECLARING_DOUBLE
 0

	)

367 
	#__MATH_DECLARING_FLOATN
 1

	)

368 #i‡
__HAVE_DISTINCT_FLOAT16


369 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

371 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

372 
	~<bôs/m©hˇŒs.h
>

374 #unde‡
_MdoubÀ_


375 #unde‡
__MATH_PRECNAME


376 #unde‡
__MATH_DECLARING_DOUBLE


377 #unde‡
__MATH_DECLARING_FLOATN


380 #i‡
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)

381 
	#_MdoubÀ_
 
_Flﬂt32


	)

382 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32
##
	)
r

383 
	#__MATH_DECLARING_DOUBLE
 0

	)

384 
	#__MATH_DECLARING_FLOATN
 1

	)

385 #i‡
__HAVE_DISTINCT_FLOAT32


386 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

388 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

389 
	~<bôs/m©hˇŒs.h
>

391 #unde‡
_MdoubÀ_


392 #unde‡
__MATH_PRECNAME


393 #unde‡
__MATH_DECLARING_DOUBLE


394 #unde‡
__MATH_DECLARING_FLOATN


397 #i‡
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)

398 
	#_MdoubÀ_
 
_Flﬂt64


	)

399 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64
##
	)
r

400 
	#__MATH_DECLARING_DOUBLE
 0

	)

401 
	#__MATH_DECLARING_FLOATN
 1

	)

402 #i‡
__HAVE_DISTINCT_FLOAT64


403 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

405 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

406 
	~<bôs/m©hˇŒs.h
>

408 #unde‡
_MdoubÀ_


409 #unde‡
__MATH_PRECNAME


410 #unde‡
__MATH_DECLARING_DOUBLE


411 #unde‡
__MATH_DECLARING_FLOATN


414 #i‡
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)

415 
	#_MdoubÀ_
 
_Flﬂt128


	)

416 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128
##
	)
r

417 
	#__MATH_DECLARING_DOUBLE
 0

	)

418 
	#__MATH_DECLARING_FLOATN
 1

	)

419 #i‡
__HAVE_DISTINCT_FLOAT128


420 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

422 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

423 
	~<bôs/m©hˇŒs.h
>

425 #unde‡
_MdoubÀ_


426 #unde‡
__MATH_PRECNAME


427 #unde‡
__MATH_DECLARING_DOUBLE


428 #unde‡
__MATH_DECLARING_FLOATN


431 #i‡
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)

432 
	#_MdoubÀ_
 
_Flﬂt32x


	)

433 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32x
##
	)
r

434 
	#__MATH_DECLARING_DOUBLE
 0

	)

435 
	#__MATH_DECLARING_FLOATN
 1

	)

436 #i‡
__HAVE_DISTINCT_FLOAT32X


437 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

439 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

440 
	~<bôs/m©hˇŒs.h
>

442 #unde‡
_MdoubÀ_


443 #unde‡
__MATH_PRECNAME


444 #unde‡
__MATH_DECLARING_DOUBLE


445 #unde‡
__MATH_DECLARING_FLOATN


448 #i‡
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)

449 
	#_MdoubÀ_
 
_Flﬂt64x


	)

450 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64x
##
	)
r

451 
	#__MATH_DECLARING_DOUBLE
 0

	)

452 
	#__MATH_DECLARING_FLOATN
 1

	)

453 #i‡
__HAVE_DISTINCT_FLOAT64X


454 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

456 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

457 
	~<bôs/m©hˇŒs.h
>

459 #unde‡
_MdoubÀ_


460 #unde‡
__MATH_PRECNAME


461 #unde‡
__MATH_DECLARING_DOUBLE


462 #unde‡
__MATH_DECLARING_FLOATN


465 #i‡
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)

466 
	#_MdoubÀ_
 
_Flﬂt128x


	)

467 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128x
##
	)
r

468 
	#__MATH_DECLARING_DOUBLE
 0

	)

469 
	#__MATH_DECLARING_FLOATN
 1

	)

470 #i‡
__HAVE_DISTINCT_FLOAT128X


471 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

473 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

474 
	~<bôs/m©hˇŒs.h
>

476 #unde‡
_MdoubÀ_


477 #unde‡
__MATH_PRECNAME


478 #unde‡
__MATH_DECLARING_DOUBLE


479 #unde‡
__MATH_DECLARING_FLOATN


482 #unde‡
__MATHDECL_1


483 #unde‡
__MATHDECL


484 #unde‡
__MATHCALL


487 
	#__MATHCALL_NARROW_ARGS_1
 (
_M¨g_
 
__x
)

	)

488 
	#__MATHCALL_NARROW_ARGS_2
 (
_M¨g_
 
__x
, _M¨g_ 
__y
)

	)

489 
	#__MATHCALL_NARROW_ARGS_3
 (
_M¨g_
 
__x
, _M¨g_ 
__y
, _M¨g_ 
__z
)

	)

490 
	#__MATHCALL_NARROW_NORMAL
(
func
, 
«rgs
) \

491 
_Mªt_
 
func
 
__MATHCALL_NARROW_ARGS_
 ## 
«rgs
 
__THROW


	)

492 
	#__MATHCALL_NARROW_REDIR
(
func
, 
ªdú
, 
«rgs
) \

493 
_Mªt_
 
	`__REDIRECT_NTH
 (
func
, 
__MATHCALL_NARROW_ARGS_
 ## 
«rgs
, \

494 
ªdú
)

	)

495 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

496 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

498 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

500 
	#_Mªt_
 

	)

501 
	#_M¨g_
 

	)

502 
	#__MATHCALL_NAME
(
«me
Ë
f
 ## 
	)
name

503 
	~<bôs/m©hˇŒs-«ºow.h
>

504 #unde‡
_Mªt_


505 #unde‡
_M¨g_


506 #unde‡
__MATHCALL_NAME


508 
	#_Mªt_
 

	)

509 
	#_M¨g_
 

	)

510 
	#__MATHCALL_NAME
(
«me
Ë
f
 ##Çamê## 
l


	)

511 #ifde‡
__LDBL_COMPAT


512 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
f
 ## 
	)
name

513 #unde‡
__MATHCALL_NARROW


514 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

515 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

517 
	~<bôs/m©hˇŒs-«ºow.h
>

518 #unde‡
_Mªt_


519 #unde‡
_M¨g_


520 #unde‡
__MATHCALL_NAME


521 #ifde‡
__LDBL_COMPAT


522 #unde‡
__MATHCALL_REDIR_NAME


523 #unde‡
__MATHCALL_NARROW


524 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

525 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

528 
	#_Mªt_
 

	)

529 
	#_M¨g_
 

	)

530 
	#__MATHCALL_NAME
(
«me
Ë
d
 ##Çamê## 
l


	)

531 #ifde‡
__LDBL_COMPAT


532 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
__∆dbl_d
 ##Çamê## 
l


	)

533 #unde‡
__MATHCALL_NARROW


534 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

535 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

537 
	~<bôs/m©hˇŒs-«ºow.h
>

538 #unde‡
_Mªt_


539 #unde‡
_M¨g_


540 #unde‡
__MATHCALL_NAME


541 #ifde‡
__LDBL_COMPAT


542 #unde‡
__MATHCALL_REDIR_NAME


543 #unde‡
__MATHCALL_NARROW


544 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

545 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

550 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

552 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT32


553 
	#_Mªt_
 
_Flﬂt16


	)

554 
	#_M¨g_
 
_Flﬂt32


	)

555 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f32


	)

556 
	~<bôs/m©hˇŒs-«ºow.h
>

557 #unde‡
_Mªt_


558 #unde‡
_M¨g_


559 #unde‡
__MATHCALL_NAME


562 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT32X


563 
	#_Mªt_
 
_Flﬂt16


	)

564 
	#_M¨g_
 
_Flﬂt32x


	)

565 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f32x


	)

566 
	~<bôs/m©hˇŒs-«ºow.h
>

567 #unde‡
_Mªt_


568 #unde‡
_M¨g_


569 #unde‡
__MATHCALL_NAME


572 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT64


573 
	#_Mªt_
 
_Flﬂt16


	)

574 
	#_M¨g_
 
_Flﬂt64


	)

575 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f64


	)

576 
	~<bôs/m©hˇŒs-«ºow.h
>

577 #unde‡
_Mªt_


578 #unde‡
_M¨g_


579 #unde‡
__MATHCALL_NAME


582 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT64X


583 
	#_Mªt_
 
_Flﬂt16


	)

584 
	#_M¨g_
 
_Flﬂt64x


	)

585 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f64x


	)

586 
	~<bôs/m©hˇŒs-«ºow.h
>

587 #unde‡
_Mªt_


588 #unde‡
_M¨g_


589 #unde‡
__MATHCALL_NAME


592 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT128


593 
	#_Mªt_
 
_Flﬂt16


	)

594 
	#_M¨g_
 
_Flﬂt128


	)

595 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f128


	)

596 
	~<bôs/m©hˇŒs-«ºow.h
>

597 #unde‡
_Mªt_


598 #unde‡
_M¨g_


599 #unde‡
__MATHCALL_NAME


602 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT128X


603 
	#_Mªt_
 
_Flﬂt16


	)

604 
	#_M¨g_
 
_Flﬂt128x


	)

605 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f128x


	)

606 
	~<bôs/m©hˇŒs-«ºow.h
>

607 #unde‡
_Mªt_


608 #unde‡
_M¨g_


609 #unde‡
__MATHCALL_NAME


612 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT32X


613 
	#_Mªt_
 
_Flﬂt32


	)

614 
	#_M¨g_
 
_Flﬂt32x


	)

615 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f32x


	)

616 
	~<bôs/m©hˇŒs-«ºow.h
>

617 #unde‡
_Mªt_


618 #unde‡
_M¨g_


619 #unde‡
__MATHCALL_NAME


622 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT64


623 
	#_Mªt_
 
_Flﬂt32


	)

624 
	#_M¨g_
 
_Flﬂt64


	)

625 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f64


	)

626 
	~<bôs/m©hˇŒs-«ºow.h
>

627 #unde‡
_Mªt_


628 #unde‡
_M¨g_


629 #unde‡
__MATHCALL_NAME


632 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT64X


633 
	#_Mªt_
 
_Flﬂt32


	)

634 
	#_M¨g_
 
_Flﬂt64x


	)

635 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f64x


	)

636 
	~<bôs/m©hˇŒs-«ºow.h
>

637 #unde‡
_Mªt_


638 #unde‡
_M¨g_


639 #unde‡
__MATHCALL_NAME


642 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT128


643 
	#_Mªt_
 
_Flﬂt32


	)

644 
	#_M¨g_
 
_Flﬂt128


	)

645 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f128


	)

646 
	~<bôs/m©hˇŒs-«ºow.h
>

647 #unde‡
_Mªt_


648 #unde‡
_M¨g_


649 #unde‡
__MATHCALL_NAME


652 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT128X


653 
	#_Mªt_
 
_Flﬂt32


	)

654 
	#_M¨g_
 
_Flﬂt128x


	)

655 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f128x


	)

656 
	~<bôs/m©hˇŒs-«ºow.h
>

657 #unde‡
_Mªt_


658 #unde‡
_M¨g_


659 #unde‡
__MATHCALL_NAME


662 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT64


663 
	#_Mªt_
 
_Flﬂt32x


	)

664 
	#_M¨g_
 
_Flﬂt64


	)

665 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f64


	)

666 
	~<bôs/m©hˇŒs-«ºow.h
>

667 #unde‡
_Mªt_


668 #unde‡
_M¨g_


669 #unde‡
__MATHCALL_NAME


672 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT64X


673 
	#_Mªt_
 
_Flﬂt32x


	)

674 
	#_M¨g_
 
_Flﬂt64x


	)

675 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f64x


	)

676 
	~<bôs/m©hˇŒs-«ºow.h
>

677 #unde‡
_Mªt_


678 #unde‡
_M¨g_


679 #unde‡
__MATHCALL_NAME


682 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT128


683 
	#_Mªt_
 
_Flﬂt32x


	)

684 
	#_M¨g_
 
_Flﬂt128


	)

685 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f128


	)

686 
	~<bôs/m©hˇŒs-«ºow.h
>

687 #unde‡
_Mªt_


688 #unde‡
_M¨g_


689 #unde‡
__MATHCALL_NAME


692 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT128X


693 
	#_Mªt_
 
_Flﬂt32x


	)

694 
	#_M¨g_
 
_Flﬂt128x


	)

695 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f128x


	)

696 
	~<bôs/m©hˇŒs-«ºow.h
>

697 #unde‡
_Mªt_


698 #unde‡
_M¨g_


699 #unde‡
__MATHCALL_NAME


702 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT64X


703 
	#_Mªt_
 
_Flﬂt64


	)

704 
	#_M¨g_
 
_Flﬂt64x


	)

705 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f64x


	)

706 
	~<bôs/m©hˇŒs-«ºow.h
>

707 #unde‡
_Mªt_


708 #unde‡
_M¨g_


709 #unde‡
__MATHCALL_NAME


712 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT128


713 
	#_Mªt_
 
_Flﬂt64


	)

714 
	#_M¨g_
 
_Flﬂt128


	)

715 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f128


	)

716 
	~<bôs/m©hˇŒs-«ºow.h
>

717 #unde‡
_Mªt_


718 #unde‡
_M¨g_


719 #unde‡
__MATHCALL_NAME


722 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT128X


723 
	#_Mªt_
 
_Flﬂt64


	)

724 
	#_M¨g_
 
_Flﬂt128x


	)

725 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f128x


	)

726 
	~<bôs/m©hˇŒs-«ºow.h
>

727 #unde‡
_Mªt_


728 #unde‡
_M¨g_


729 #unde‡
__MATHCALL_NAME


732 #i‡
__HAVE_FLOAT64X
 && 
__HAVE_FLOAT128


733 
	#_Mªt_
 
_Flﬂt64x


	)

734 
	#_M¨g_
 
_Flﬂt128


	)

735 
	#__MATHCALL_NAME
(
«me
Ë
f64x
 ##Çamê## 
f128


	)

736 
	~<bôs/m©hˇŒs-«ºow.h
>

737 #unde‡
_Mªt_


738 #unde‡
_M¨g_


739 #unde‡
__MATHCALL_NAME


742 #i‡
__HAVE_FLOAT64X
 && 
__HAVE_FLOAT128X


743 
	#_Mªt_
 
_Flﬂt64x


	)

744 
	#_M¨g_
 
_Flﬂt128x


	)

745 
	#__MATHCALL_NAME
(
«me
Ë
f64x
 ##Çamê## 
f128x


	)

746 
	~<bôs/m©hˇŒs-«ºow.h
>

747 #unde‡
_Mªt_


748 #unde‡
_M¨g_


749 #unde‡
__MATHCALL_NAME


752 #i‡
__HAVE_FLOAT128
 && 
__HAVE_FLOAT128X


753 
	#_Mªt_
 
_Flﬂt128


	)

754 
	#_M¨g_
 
_Flﬂt128x


	)

755 
	#__MATHCALL_NAME
(
«me
Ë
f128
 ##Çamê## 
f128x


	)

756 
	~<bôs/m©hˇŒs-«ºow.h
>

757 #unde‡
_Mªt_


758 #unde‡
_M¨g_


759 #unde‡
__MATHCALL_NAME


764 #unde‡
__MATHCALL_NARROW_ARGS_1


765 #unde‡
__MATHCALL_NARROW_ARGS_2


766 #unde‡
__MATHCALL_NARROW_ARGS_3


767 #unde‡
__MATHCALL_NARROW_NORMAL


768 #unde‡
__MATHCALL_NARROW_REDIR


769 #unde‡
__MATHCALL_NARROW


771 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


773 
signgam
;

776 #i‡(
__HAVE_DISTINCT_FLOAT16
 \

777 || 
__HAVE_DISTINCT_FLOAT32
 \

778 || 
__HAVE_DISTINCT_FLOAT64
 \

779 || 
__HAVE_DISTINCT_FLOAT32X
 \

780 || 
__HAVE_DISTINCT_FLOAT64X
 \

781 || 
__HAVE_DISTINCT_FLOAT128X
)

794 #ifde‡
__NO_LONG_DOUBLE_MATH


795 #i‡
__HAVE_DISTINCT_FLOAT128


798 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

799 ( (
TG_ARG
Ë= (Ë? 
FUNC
 ## 
f
 
ARGS
 : FUNC ARGS)

	)

800 #ñi‡
__HAVE_DISTINCT_FLOAT128


801 #i‡
__HAVE_GENERIC_SELECTION


802 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT32


803 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
Ë
_Flﬂt32
: FUNC ## 
f
 ARGS,

	)

805 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
)

	)

807 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT64X


808 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


809 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
l
 ARGS,

	)

811 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
f128
 ARGS,

	)

814 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
)

	)

816 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

817 
	`_Gíîic
 ((
TG_ARG
), \

818 : 
FUNC
 ## 
f
 
ARGS
, \

819 
	`__MATH_TG_F32
 (
FUNC
, 
ARGS
) \

820 : 
FUNC
 
ARGS
, \

821 : 
FUNC
 ## 
l
 
ARGS
, \

822 
	`__MATH_TG_F64X
 (
FUNC
, 
ARGS
) \

823 
_Flﬂt128
: 
FUNC
 ## 
f128
 
ARGS
)

	)

825 #i‡
__HAVE_FLOATN_NOT_TYPEDEF


828 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

829 
__buûtö_choo£_ex¥
 \

830 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

831 
FUNC
 ## 
f
 
ARGS
, \

832 
__buûtö_choo£_ex¥
 \

833 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

834 
FUNC
 
ARGS
, \

835 
__buûtö_choo£_ex¥
 \

836 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

837 
FUNC
 ## 
l
 
ARGS
, \

838 
FUNC
 ## 
f128
 
ARGS
)))

	)

841 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

842 ( (
TG_ARG
) ==  () \

843 ? 
FUNC
 ## 
f
 
ARGS
 \

844 :  (
TG_ARG
) ==  () \

845 ? 
FUNC
 
ARGS
 \

846 : 
FUNC
 ## 
l
 
ARGS
)

	)

850 #ifde‡
__USE_ISOC99


855 
FP_NAN
 =

856 
	#FP_NAN
 0

	)

857 
FP_NAN
,

858 
FP_INFINITE
 =

859 
	#FP_INFINITE
 1

	)

860 
FP_INFINITE
,

861 
FP_ZERO
 =

862 
	#FP_ZERO
 2

	)

863 
FP_ZERO
,

864 
FP_SUBNORMAL
 =

865 
	#FP_SUBNORMAL
 3

	)

866 
FP_SUBNORMAL
,

867 
FP_NORMAL
 =

868 
	#FP_NORMAL
 4

	)

869 
FP_NORMAL


877 #i‡((
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

878 || 
	`__glibc_˛™g_¥îeq
 (2,8)) \

879 && (!
deföed
 
__OPTIMIZE_SIZE__
 || deföed 
__˝lu•lus
)

886 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

887 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

889 
	#Â˛assify
(
x
Ë
	`__MATH_TG
 ((x), 
__Â˛assify
, (x))

	)

893 #i‡
	`__GNUC_PREREQ
 (6,0Ë|| 
	`__glibc_˛™g_¥îeq
 (3,3)

894 
	#signbô
(
x
Ë
	`__buûtö_signbô
 (x)

	)

895 #ñi‡
deföed
 
__˝lu•lus


903 
	#signbô
(
x
Ë
	`__buûtö_signbôl
 (x)

	)

904 #ñi‡
	`__GNUC_PREREQ
 (4,0)

905 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__buûtö_signbô
, (x))

	)

907 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__signbô
, (x))

	)

911 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

912 || 
	$__glibc_˛™g_¥îeq
 (2,8)

913 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

915 
	#isföôe
(
x
Ë
	`__MATH_TG
 ((x), 
__föôe
, (x))

	)

919 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

920 || 
	$__glibc_˛™g_¥îeq
 (2,8)

921 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

923 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

928 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

929 || 
	$__glibc_˛™g_¥îeq
 (2,8)

930 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

932 
	#i¢™
(
x
Ë
	`__MATH_TG
 ((x), 
__i¢™
, (x))

	)

936 #i‡
__HAVE_DISTINCT_FLOAT128
 && !
	`__GNUC_PREREQ
 (7,0) \

937 && !
deföed
 
__SUPPORT_SNAN__
 && !deföed 
__˝lu•lus


943 
	#isöf
(
x
) \

944 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
x
), 
_Flﬂt128
) \

945 ? 
	`__isöff128
 (
x
Ë: 
	`__buûtö_isöf_sign
 (x))

	)

946 #ñi‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

947 || 
	$__glibc_˛™g_¥îeq
 (3,7)

948 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

950 
	#isöf
(
x
Ë
	`__MATH_TG
 ((x), 
__isöf
, (x))

	)

954 
	#MATH_ERRNO
 1

	)

955 
	#MATH_ERREXCEPT
 2

	)

962 #ifde‡
__FAST_MATH__


963 
	#m©h_îrh™dlög
 0

	)

964 #ñi‡
deföed
 
__NO_MATH_ERRNO__


965 
	#m©h_îrh™dlög
 (
MATH_ERREXCEPT
)

	)

967 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

972 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

973 
	~<bôs/isˇn⁄iˇl.h
>

976 #i‚de‡
__˝lu•lus


977 
	#issig«lög
(
x
Ë
	`__MATH_TG
 ((x), 
__issig«lög
, (x))

	)

986 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lögf
 (__val); }

987 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lög
 (__val); }

988 
ölöe
 

989 
	`issig«lög
 (
__vÆ
)

991 #ifde‡
__NO_LONG_DOUBLE_MATH


992  
	`__issig«lög
 (
__vÆ
);

994  
	`__issig«lögl
 (
__vÆ
);

997 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1000 
ölöe
 
	`issig«lög
 (
_Flﬂt128
 
__vÆ
Ë{  
	`__issig«lögf128
 (__val); }

1002 
	}
}

1006 
	#issubn‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_SUBNORMAL
)

	)

1009 #i‚de‡
__˝lu•lus


1010 #ifde‡
__SUPPORT_SNAN__


1011 
	#iszîo
(
x
Ë(
	`Â˛assify
 (xË=
FP_ZERO
)

	)

1013 
	#iszîo
(
x
Ë(((
	`__ty≥of
 (x)Ë(x)Ë=0)

	)

1017 #ifde‡
__SUPPORT_SNAN__


1018 
ölöe
 

1019 
iszîo
 (
__vÆ
)

1021  
__Â˛assifyf
 (
__vÆ
Ë=
FP_ZERO
;

1023 
ölöe
 

1024 
iszîo
 (
__vÆ
)

1026  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

1028 
ölöe
 

1029 
iszîo
 (
__vÆ
)

1031 #ifde‡
__NO_LONG_DOUBLE_MATH


1032  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

1034  
__Â˛assifyl
 (
__vÆ
Ë=
FP_ZERO
;

1037 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1040 
ölöe
 

1041 
iszîo
 (
_Flﬂt128
 
__vÆ
)

1043  
__Â˛assifyf128
 (
__vÆ
Ë=
FP_ZERO
;

1047 
ãm∂©e
 <
˛ass
 
__T
> 
ölöe
 
boﬁ


1048 
iszîo
 (
__T
 
__vÆ
)

1050  
__vÆ
 == 0;

1057 #ifde‡
__USE_XOPEN


1059 
	#MAXFLOAT
 3.40282347e+38F

	)

1064 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


1065 
	#M_E
 2.7182818284590452354

	)

1066 
	#M_LOG2E
 1.4426950408889634074

	)

1067 
	#M_LOG10E
 0.43429448190325182765

	)

1068 
	#M_LN2
 0.69314718055994530942

	)

1069 
	#M_LN10
 2.30258509299404568402

	)

1070 
	#M_PI
 3.14159265358979323846

	)

1071 
	#M_PI_2
 1.57079632679489661923

	)

1072 
	#M_PI_4
 0.78539816339744830962

	)

1073 
	#M_1_PI
 0.31830988618379067154

	)

1074 
	#M_2_PI
 0.63661977236758134308

	)

1075 
	#M_2_SQRTPI
 1.12837916709551257390

	)

1076 
	#M_SQRT2
 1.41421356237309504880

	)

1077 
	#M_SQRT1_2
 0.70710678118654752440

	)

1083 #ifde‡
__USE_GNU


1084 
	#M_El
 2.718281828459045235360287471352662498L

	)

1085 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

1086 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

1087 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

1088 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

1089 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

1090 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

1091 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

1092 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

1093 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

1094 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

1095 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

1096 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

1099 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


1100 
	#M_Ef16
 
	`__f16
 (2.718281828459045235360287471352662498Ë

	)

1101 
	#M_LOG2Ef16
 
	`__f16
 (1.442695040888963407359924681001892137Ë

	)

1102 
	#M_LOG10Ef16
 
	`__f16
 (0.434294481903251827651128918916605082Ë

	)

1103 
	#M_LN2f16
 
	`__f16
 (0.693147180559945309417232121458176568Ë

	)

1104 
	#M_LN10f16
 
	`__f16
 (2.302585092994045684017991454684364208Ë

	)

1105 
	#M_PIf16
 
	`__f16
 (3.141592653589793238462643383279502884Ë

	)

1106 
	#M_PI_2f16
 
	`__f16
 (1.570796326794896619231321691639751442Ë

	)

1107 
	#M_PI_4f16
 
	`__f16
 (0.785398163397448309615660845819875721Ë

	)

1108 
	#M_1_PIf16
 
	`__f16
 (0.318309886183790671537767526745028724Ë

	)

1109 
	#M_2_PIf16
 
	`__f16
 (0.636619772367581343075535053490057448Ë

	)

1110 
	#M_2_SQRTPIf16
 
	`__f16
 (1.128379167095512573896158903121545172Ë

	)

1111 
	#M_SQRT2f16
 
	`__f16
 (1.414213562373095048801688724209698079Ë

	)

1112 
	#M_SQRT1_2f16
 
	`__f16
 (0.707106781186547524400844362104849039Ë

	)

1115 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


1116 
	#M_Ef32
 
	`__f32
 (2.718281828459045235360287471352662498Ë

	)

1117 
	#M_LOG2Ef32
 
	`__f32
 (1.442695040888963407359924681001892137Ë

	)

1118 
	#M_LOG10Ef32
 
	`__f32
 (0.434294481903251827651128918916605082Ë

	)

1119 
	#M_LN2f32
 
	`__f32
 (0.693147180559945309417232121458176568Ë

	)

1120 
	#M_LN10f32
 
	`__f32
 (2.302585092994045684017991454684364208Ë

	)

1121 
	#M_PIf32
 
	`__f32
 (3.141592653589793238462643383279502884Ë

	)

1122 
	#M_PI_2f32
 
	`__f32
 (1.570796326794896619231321691639751442Ë

	)

1123 
	#M_PI_4f32
 
	`__f32
 (0.785398163397448309615660845819875721Ë

	)

1124 
	#M_1_PIf32
 
	`__f32
 (0.318309886183790671537767526745028724Ë

	)

1125 
	#M_2_PIf32
 
	`__f32
 (0.636619772367581343075535053490057448Ë

	)

1126 
	#M_2_SQRTPIf32
 
	`__f32
 (1.128379167095512573896158903121545172Ë

	)

1127 
	#M_SQRT2f32
 
	`__f32
 (1.414213562373095048801688724209698079Ë

	)

1128 
	#M_SQRT1_2f32
 
	`__f32
 (0.707106781186547524400844362104849039Ë

	)

1131 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


1132 
	#M_Ef64
 
	`__f64
 (2.718281828459045235360287471352662498Ë

	)

1133 
	#M_LOG2Ef64
 
	`__f64
 (1.442695040888963407359924681001892137Ë

	)

1134 
	#M_LOG10Ef64
 
	`__f64
 (0.434294481903251827651128918916605082Ë

	)

1135 
	#M_LN2f64
 
	`__f64
 (0.693147180559945309417232121458176568Ë

	)

1136 
	#M_LN10f64
 
	`__f64
 (2.302585092994045684017991454684364208Ë

	)

1137 
	#M_PIf64
 
	`__f64
 (3.141592653589793238462643383279502884Ë

	)

1138 
	#M_PI_2f64
 
	`__f64
 (1.570796326794896619231321691639751442Ë

	)

1139 
	#M_PI_4f64
 
	`__f64
 (0.785398163397448309615660845819875721Ë

	)

1140 
	#M_1_PIf64
 
	`__f64
 (0.318309886183790671537767526745028724Ë

	)

1141 
	#M_2_PIf64
 
	`__f64
 (0.636619772367581343075535053490057448Ë

	)

1142 
	#M_2_SQRTPIf64
 
	`__f64
 (1.128379167095512573896158903121545172Ë

	)

1143 
	#M_SQRT2f64
 
	`__f64
 (1.414213562373095048801688724209698079Ë

	)

1144 
	#M_SQRT1_2f64
 
	`__f64
 (0.707106781186547524400844362104849039Ë

	)

1147 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


1148 
	#M_Ef128
 
	`__f128
 (2.718281828459045235360287471352662498Ë

	)

1149 
	#M_LOG2Ef128
 
	`__f128
 (1.442695040888963407359924681001892137Ë

	)

1150 
	#M_LOG10Ef128
 
	`__f128
 (0.434294481903251827651128918916605082Ë

	)

1151 
	#M_LN2f128
 
	`__f128
 (0.693147180559945309417232121458176568Ë

	)

1152 
	#M_LN10f128
 
	`__f128
 (2.302585092994045684017991454684364208Ë

	)

1153 
	#M_PIf128
 
	`__f128
 (3.141592653589793238462643383279502884Ë

	)

1154 
	#M_PI_2f128
 
	`__f128
 (1.570796326794896619231321691639751442Ë

	)

1155 
	#M_PI_4f128
 
	`__f128
 (0.785398163397448309615660845819875721Ë

	)

1156 
	#M_1_PIf128
 
	`__f128
 (0.318309886183790671537767526745028724Ë

	)

1157 
	#M_2_PIf128
 
	`__f128
 (0.636619772367581343075535053490057448Ë

	)

1158 
	#M_2_SQRTPIf128
 
	`__f128
 (1.128379167095512573896158903121545172Ë

	)

1159 
	#M_SQRT2f128
 
	`__f128
 (1.414213562373095048801688724209698079Ë

	)

1160 
	#M_SQRT1_2f128
 
	`__f128
 (0.707106781186547524400844362104849039Ë

	)

1163 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


1164 
	#M_Ef32x
 
	`__f32x
 (2.718281828459045235360287471352662498Ë

	)

1165 
	#M_LOG2Ef32x
 
	`__f32x
 (1.442695040888963407359924681001892137Ë

	)

1166 
	#M_LOG10Ef32x
 
	`__f32x
 (0.434294481903251827651128918916605082Ë

	)

1167 
	#M_LN2f32x
 
	`__f32x
 (0.693147180559945309417232121458176568Ë

	)

1168 
	#M_LN10f32x
 
	`__f32x
 (2.302585092994045684017991454684364208Ë

	)

1169 
	#M_PIf32x
 
	`__f32x
 (3.141592653589793238462643383279502884Ë

	)

1170 
	#M_PI_2f32x
 
	`__f32x
 (1.570796326794896619231321691639751442Ë

	)

1171 
	#M_PI_4f32x
 
	`__f32x
 (0.785398163397448309615660845819875721Ë

	)

1172 
	#M_1_PIf32x
 
	`__f32x
 (0.318309886183790671537767526745028724Ë

	)

1173 
	#M_2_PIf32x
 
	`__f32x
 (0.636619772367581343075535053490057448Ë

	)

1174 
	#M_2_SQRTPIf32x
 
	`__f32x
 (1.128379167095512573896158903121545172Ë

	)

1175 
	#M_SQRT2f32x
 
	`__f32x
 (1.414213562373095048801688724209698079Ë

	)

1176 
	#M_SQRT1_2f32x
 
	`__f32x
 (0.707106781186547524400844362104849039Ë

	)

1179 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


1180 
	#M_Ef64x
 
	`__f64x
 (2.718281828459045235360287471352662498Ë

	)

1181 
	#M_LOG2Ef64x
 
	`__f64x
 (1.442695040888963407359924681001892137Ë

	)

1182 
	#M_LOG10Ef64x
 
	`__f64x
 (0.434294481903251827651128918916605082Ë

	)

1183 
	#M_LN2f64x
 
	`__f64x
 (0.693147180559945309417232121458176568Ë

	)

1184 
	#M_LN10f64x
 
	`__f64x
 (2.302585092994045684017991454684364208Ë

	)

1185 
	#M_PIf64x
 
	`__f64x
 (3.141592653589793238462643383279502884Ë

	)

1186 
	#M_PI_2f64x
 
	`__f64x
 (1.570796326794896619231321691639751442Ë

	)

1187 
	#M_PI_4f64x
 
	`__f64x
 (0.785398163397448309615660845819875721Ë

	)

1188 
	#M_1_PIf64x
 
	`__f64x
 (0.318309886183790671537767526745028724Ë

	)

1189 
	#M_2_PIf64x
 
	`__f64x
 (0.636619772367581343075535053490057448Ë

	)

1190 
	#M_2_SQRTPIf64x
 
	`__f64x
 (1.128379167095512573896158903121545172Ë

	)

1191 
	#M_SQRT2f64x
 
	`__f64x
 (1.414213562373095048801688724209698079Ë

	)

1192 
	#M_SQRT1_2f64x
 
	`__f64x
 (0.707106781186547524400844362104849039Ë

	)

1195 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


1202 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


1203 
	#__NO_MATH_INLINES
 1

	)

1206 #ifde‡
__USE_ISOC99


1207 #i‡
__GNUC_PREREQ
 (3, 1)

1214 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

1215 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

1216 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

1217 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

1218 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

1219 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
(x, y)

	)

1221 
	#isgª©î
(
x
, 
y
) \

1222 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1223 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; }))

	)

1224 
	#isgª©îequÆ
(
x
, 
y
) \

1225 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1226 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

1227 
	#i¶ess
(
x
, 
y
) \

1228 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1229 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

1230 
	#i¶es£quÆ
(
x
, 
y
) \

1231 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1232 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

1233 
	#i¶essgª©î
(
x
, 
y
) \

1234 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1235 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x !__y; }))

	)

1237 
	#isun‹dîed
(
x
, 
y
) \

1238 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__u
 = (x); __ty≥of__ (
y
Ë
__v
 = (y); \

1239 
__u
 !
__v
 && (__u !__u || __v !__v); }))

	)

1244 #ifde‡
__USE_EXTERN_INLINES


1245 
	~<bôs/m©hölöe.h
>

1249 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

1252 #i‡
__FLT_EVAL_METHOD__
 == 2 || __FLT_EVAL_METHOD__ > 64

1253 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0L)

	)

1254 #ñi‡
__FLT_EVAL_METHOD__
 == 1 || __FLT_EVAL_METHOD__ > 32

1255 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0)

	)

1256 #ñi‡
__FLT_EVAL_METHOD__
 == 0 || __FLT_EVAL_METHOD__ == 32

1257 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0f)

	)

1259 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (y))

	)

1264 #i‡!
deföed
 
__˝lu•lus
 || (__˝lu•lu†< 201103L && !deföed 
__GNUC__
)

1265 
	#i£qsig
(
x
, 
y
) \

1266 
	`__MATH_TG
 (
	`__MATH_EVAL_FMT2
 (
x
, 
y
), 
__i£qsig
, ((x), (y)))

	)

1279 
ãm∂©e
<
ty≥«me
> 
__i£qsig_ty≥
;

1281 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1283 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1285  
__i£qsigf
 (
__x
, 
__y
);

1289 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1291 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1293  
__i£qsig
 (
__x
, 
__y
);

1297 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1299 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1301 #i‚de‡
__NO_LONG_DOUBLE_MATH


1302  
__i£qsigl
 (
__x
, 
__y
);

1304  
__i£qsig
 (
__x
, 
__y
);

1309 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1312 
ãm∂©e
<> 
__i£qsig_ty≥
<
_Flﬂt128
>

1314 
__ˇŒ
 (
_Flﬂt128
 
__x
, _Flﬂt128 
__y
Ë
throw
 ()

1316  
__i£qsigf128
 (
__x
, 
__y
);

1321 
ãm∂©e
<
ty≥«me
 
_T1
,Åy≥«mê
_T2
>

1322 
ölöe
 

1323 
i£qsig
 (
_T1
 
__x
, 
_T2
 
__y
Ë
throw
 ()

1325 #i‡
__˝lu•lus
 >= 201103L

1326 
de˛ty≥
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1328 
__ty≥of
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1330  
__i£qsig_ty≥
<
_T3
>::
__ˇŒ
 (
__x
, 
__y
);

1338 
__END_DECLS


	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<bôs/°döt-uöä.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	~<bôs/ty≥s/sigevít_t.h
>

37 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

40 
	~<bôs/√tdb.h
>

43 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

44 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

45 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

46 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

47 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

48 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

51 
	g__BEGIN_DECLS


53 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


56 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

59 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

63 
	#HOST_NOT_FOUND
 1

	)

64 
	#TRY_AGAIN
 2

	)

66 
	#NO_RECOVERY
 3

	)

68 
	#NO_DATA
 4

	)

71 #ifde‡
__USE_MISC


72 
	#NETDB_INTERNAL
 -1

	)

73 
	#NETDB_SUCCESS
 0

	)

74 
	#NO_ADDRESS
 
NO_DATA


	)

77 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


79 
	#IPPORT_RESERVED
 1024

	)

82 #ifde‡
__USE_GNU


84 
	#SCOPE_DELIMITER
 '%'

	)

87 #ifde‡
__USE_MISC


90 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

93 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

98 
	sho°ít


100 *
h_«me
;

101 **
h_Æü£s
;

102 
h_addπy≥
;

103 
h_Àngth
;

104 **
h_addr_li°
;

105 #ifde‡
__USE_MISC


106 
	#h_addr
 
h_addr_li°
[0]

	)

115 
	`£tho°ít
 (
__°ay_›í
);

121 
	`ídho°ít
 ();

128 
ho°ít
 *
	`gëho°ít
 ();

135 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

136 
__ty≥
);

142 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

144 #ifde‡
__USE_MISC


153 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

165 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

167 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

168 *
__ª°ri˘
 
__h_î∫›
);

170 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

171 
__ty≥
,

172 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

173 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

174 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

175 *
__ª°ri˘
 
__h_î∫›
);

177 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

178 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

179 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

180 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

181 *
__ª°ri˘
 
__h_î∫›
);

183 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

184 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

185 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

186 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

187 *
__ª°ri˘
 
__h_î∫›
);

196 
	`£äëít
 (
__°ay_›í
);

202 
	`íd√ã¡
 ();

209 
√ã¡
 *
	`gë√ã¡
 ();

216 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

222 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

224 #ifdef 
__USE_MISC


235 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

236 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

237 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

238 *
__ª°ri˘
 
__h_î∫›
);

240 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

241 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

242 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

243 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

244 *
__ª°ri˘
 
__h_î∫›
);

246 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

247 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

248 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

249 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

250 *
__ª°ri˘
 
__h_î∫›
);

255 
	s£rvít


257 *
s_«me
;

258 **
s_Æü£s
;

259 
s_p‹t
;

260 *
s_¥Ÿo
;

268 
	`£t£rvít
 (
__°ay_›í
);

274 
	`íd£rvít
 ();

281 
£rvít
 *
	`gë£rvít
 ();

288 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

295 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

298 #ifdef 
__USE_MISC


306 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

307 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

308 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

310 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

311 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

312 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

313 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

314 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

316 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

317 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

318 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

319 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

324 
	s¥Ÿ€¡


326 *
p_«me
;

327 **
p_Æü£s
;

328 
p_¥Ÿo
;

336 
	`£çrŸ€¡
 (
__°ay_›í
);

342 
	`íd¥Ÿ€¡
 ();

349 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

355 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

361 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

364 #ifdef 
__USE_MISC


372 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

373 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

374 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

376 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

377 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

378 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

379 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

381 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

382 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

383 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

384 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

393 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

401 
	`íd√tgª¡
 ();

410 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

411 **
__ª°ri˘
 
__u£Ω
,

412 **
__ª°ri˘
 
__domaöp
);

421 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

422 c⁄° *
__u£r
, c⁄° *
__domaö
);

430 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

431 **
__ª°ri˘
 
__u£Ω
,

432 **
__ª°ri˘
 
__domaöp
,

433 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

437 #ifde‡
__USE_MISC


449 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

450 c⁄° *
__ª°ri˘
 
__locu£r
,

451 c⁄° *
__ª°ri˘
 
__ªmu£r
,

452 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

461 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

462 c⁄° *
__ª°ri˘
 
__locu£r
,

463 c⁄° *
__ª°ri˘
 
__ªmu£r
,

464 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

465 
ß_Ámûy_t
 
__af
);

477 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

478 c⁄° *
__ª°ri˘
 
__«me
,

479 c⁄° *
__ª°ri˘
 
__∑ss
,

480 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

489 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

490 c⁄° *
__ª°ri˘
 
__«me
,

491 c⁄° *
__ª°ri˘
 
__∑ss
,

492 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

493 
ß_Ámûy_t
 
__af
);

503 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

504 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

513 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

514 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

515 
ß_Ámûy_t
 
__af
);

526 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

527 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

537 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

538 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

539 
ß_Ámûy_t
 
__af
);

549 
	`ºesvp‹t
 (*
__Æp‹t
);

558 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

563 #ifde‡
__USE_XOPEN2K


565 
	saddröfo


567 
ai_Êags
;

568 
ai_Ámûy
;

569 
ai_sockty≥
;

570 
ai_¥Ÿocﬁ
;

571 
sockÀn_t
 
ai_addæí
;

572 
sockaddr
 *
ai_addr
;

573 *
ai_ˇn⁄«me
;

574 
addröfo
 *
ai_√xt
;

577 #ifde‡
__USE_GNU


579 
	sgaicb


581 c⁄° *
¨_«me
;

582 c⁄° *
¨_£rvi˚
;

583 c⁄° 
addröfo
 *
¨_ªque°
;

584 
addröfo
 *
¨_ªsu…
;

586 
__ªtu∫
;

587 
__glibc_ª£rved
[5];

591 
	#GAI_WAIT
 0

	)

592 
	#GAI_NOWAIT
 1

	)

596 
	#AI_PASSIVE
 0x0001

	)

597 
	#AI_CANONNAME
 0x0002

	)

598 
	#AI_NUMERICHOST
 0x0004

	)

599 
	#AI_V4MAPPED
 0x0008

	)

600 
	#AI_ALL
 0x0010

	)

601 
	#AI_ADDRCONFIG
 0x0020

	)

603 #ifde‡
__USE_GNU


604 
	#AI_IDN
 0x0040

	)

607 
	#AI_CANONIDN
 0x0080

	)

608 
	#AI_IDN_ALLOW_UNASSIGNED
 \

609 
	`__glibc_ma¸o_w¨nög
 ("AI_IDN_ALLOW_UNASSIGNED i†dïªˇãd"Ë0x0100

	)

610 
	#AI_IDN_USE_STD3_ASCII_RULES
 \

611 
	`__glibc_ma¸o_w¨nög
 ("AI_IDN_USE_STD3_ASCII_RULES i†dïªˇãd"Ë0x0200

	)

613 
	#AI_NUMERICSERV
 0x0400

	)

616 
	#EAI_BADFLAGS
 -1

	)

617 
	#EAI_NONAME
 -2

	)

618 
	#EAI_AGAIN
 -3

	)

619 
	#EAI_FAIL
 -4

	)

620 
	#EAI_FAMILY
 -6

	)

621 
	#EAI_SOCKTYPE
 -7

	)

622 
	#EAI_SERVICE
 -8

	)

623 
	#EAI_MEMORY
 -10

	)

624 
	#EAI_SYSTEM
 -11

	)

625 
	#EAI_OVERFLOW
 -12

	)

626 #ifde‡
__USE_GNU


627 
	#EAI_NODATA
 -5

	)

628 
	#EAI_ADDRFAMILY
 -9

	)

629 
	#EAI_INPROGRESS
 -100

	)

630 
	#EAI_CANCELED
 -101

	)

631 
	#EAI_NOTCANCELED
 -102

	)

632 
	#EAI_ALLDONE
 -103

	)

633 
	#EAI_INTR
 -104

	)

634 
	#EAI_IDN_ENCODE
 -105

	)

637 #ifde‡
__USE_MISC


638 
	#NI_MAXHOST
 1025

	)

639 
	#NI_MAXSERV
 32

	)

642 
	#NI_NUMERICHOST
 1

	)

643 
	#NI_NUMERICSERV
 2

	)

644 
	#NI_NOFQDN
 4

	)

645 
	#NI_NAMEREQD
 8

	)

646 
	#NI_DGRAM
 16

	)

647 #ifde‡
__USE_GNU


648 
	#NI_IDN
 32

	)

649 
	#NI_IDN_ALLOW_UNASSIGNED
 \

650 
	`__glibc_ma¸o_w¨nög
 ("NI_IDN_ALLOW_UNASSIGNED i†dïªˇãd"Ë64

	)

651 
	#NI_IDN_USE_STD3_ASCII_RULES
 \

652 
	`__glibc_ma¸o_w¨nög
 ("NI_IDN_USE_STD3_ASCII_RULES i†dïªˇãd"Ë128

	)

660 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

661 c⁄° *
__ª°ri˘
 
__£rvi˚
,

662 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

663 
addröfo
 **
__ª°ri˘
 
__∑i
);

666 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

669 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

675 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

676 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

677 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

678 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

681 #ifde‡
__USE_GNU


690 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

691 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

701 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

702 c⁄° 
time•ec
 *
__timeout
);

705 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

708 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

711 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<bôs/°döt-uöä.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‡!
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_ALLSNOOPERS_GROUP
 ((
ö_addr_t
Ë0xe000006aË

	)

208 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

210 #i‡!
__USE_KERNEL_IPV6_DEFS


212 
	sö6_addr


216 
uöt8_t
 
	m__u6_addr8
[16];

217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

219 } 
	m__ö6_u
;

220 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

221 #ifde‡
__USE_MISC


222 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

223 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

228 c⁄° 
ö6_addr
 
ö6addr_™y
;

229 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

230 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

231 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

233 
	#INET_ADDRSTRLEN
 16

	)

234 
	#INET6_ADDRSTRLEN
 46

	)

238 
	ssockaddr_ö


240 
__SOCKADDR_COMMON
 (
sö_
);

241 
ö_p‹t_t
 
	msö_p‹t
;

242 
ö_addr
 
	msö_addr
;

245 
	msö_zîo
[ (
sockaddr
)

246 - 
__SOCKADDR_COMMON_SIZE


247 -  (
ö_p‹t_t
)

248 -  (
ö_addr
)];

251 #i‡!
__USE_KERNEL_IPV6_DEFS


253 
	ssockaddr_ö6


255 
__SOCKADDR_COMMON
 (
sö6_
);

256 
ö_p‹t_t
 
	msö6_p‹t
;

257 
uöt32_t
 
	msö6_Êowöfo
;

258 
ö6_addr
 
	msö6_addr
;

259 
uöt32_t
 
	msö6_sc›e_id
;

263 #ifde‡
__USE_MISC


265 
	sù_mªq


268 
ö_addr
 
	mimr_mu…üddr
;

271 
ö_addr
 
	mimr_öãrÁ˚
;

274 
	sù_mªq_sour˚


277 
ö_addr
 
	mimr_mu…üddr
;

280 
ö_addr
 
	mimr_öãrÁ˚
;

283 
ö_addr
 
	mimr_sour˚addr
;

287 #i‡!
__USE_KERNEL_IPV6_DEFS


289 
	sùv6_mªq


292 
ö6_addr
 
	mùv6mr_mu…üddr
;

295 
	mùv6mr_öãrÁ˚
;

299 #ifde‡
__USE_MISC


301 
	sgroup_ªq


304 
uöt32_t
 
	mgr_öãrÁ˚
;

307 
sockaddr_°‹age
 
	mgr_group
;

310 
	sgroup_sour˚_ªq


313 
uöt32_t
 
	mg§_öãrÁ˚
;

316 
sockaddr_°‹age
 
	mg§_group
;

319 
sockaddr_°‹age
 
	mg§_sour˚
;

324 
	sù_msfûãr


327 
ö_addr
 
	mimsf_mu…üddr
;

330 
ö_addr
 
	mimsf_öãrÁ˚
;

333 
uöt32_t
 
	mimsf_fmode
;

336 
uöt32_t
 
	mimsf_num§c
;

338 
ö_addr
 
	mimsf_¶i°
[1];

341 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

342 -  (
ö_addr
) \

343 + (
num§c
Ë*  (
ö_addr
))

	)

345 
	sgroup_fûãr


348 
uöt32_t
 
	mgf_öãrÁ˚
;

351 
sockaddr_°‹age
 
	mgf_group
;

354 
uöt32_t
 
	mgf_fmode
;

357 
uöt32_t
 
	mgf_num§c
;

359 
sockaddr_°‹age
 
	mgf_¶i°
[1];

362 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

363 -  (
sockaddr_°‹age
) \

364 + ((
num§c
) \

365 *  (
sockaddr_°‹age
)))

	)

375 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

376 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

377 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

378 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

379 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

380 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

381 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

383 
	~<ídün.h
>

386 
	~<bôs/byãsw≠.h
>

387 
	~<bôs/uöä-idítôy.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

397 
	#¡ohs
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

398 
	#ht⁄l
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

399 
	#ht⁄s
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

415 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

416 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

417 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

423 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

424 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

425 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

441 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

442 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

448 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

449 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
__ö6_u
.
__u6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
__ö6_u
.
__u6_addr32
[0] =
__b
->__in6_u.__u6_addr32[0] \

457 && 
__a
->
__ö6_u
.
__u6_addr32
[1] =
__b
->__in6_u.__u6_addr32[1] \

458 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
__b
->__in6_u.__u6_addr32[2] \

459 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
__b
->__ö6_u.__u6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‡!
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

64 
	#TCP_NOTSENT_LOWAT
 25

	)

66 
	#TCP_CC_INFO
 26

	)

68 
	#TCP_SAVE_SYN
 27

	)

70 
	#TCP_SAVED_SYN
 28

	)

72 
	#TCP_REPAIR_WINDOW
 29

	)

73 
	#TCP_FASTOPEN_CONNECT
 30

	)

74 
	#TCP_ULP
 31

	)

75 
	#TCP_MD5SIG_EXT
 32

	)

76 
	#TCP_FASTOPEN_KEY
 33

	)

77 
	#TCP_FASTOPEN_NO_COOKIE
 34

	)

78 
	#TCP_ZEROCOPY_RECEIVE
 35

	)

79 
	#TCP_INQ
 36

	)

81 
	#TCP_CM_INQ
 
TCP_INQ


	)

82 
	#TCP_TX_DELAY
 37

	)

84 
	#TCP_REPAIR_ON
 1

	)

85 
	#TCP_REPAIR_OFF
 0

	)

86 
	#TCP_REPAIR_OFF_NO_WP
 -1

	)

88 #ifde‡
__USE_MISC


89 
	~<sys/ty≥s.h
>

90 
	~<sys/sockë.h
>

91 
	~<°döt.h
>

93 
uöt32_t
 
	tt˝_£q
;

98 
	st˝hdr


100 
__exãnsi⁄__
 union

104 
uöt16_t
 
	mth_•‹t
;

105 
uöt16_t
 
	mth_dp‹t
;

106 
t˝_£q
 
	mth_£q
;

107 
t˝_£q
 
	mth_ack
;

108 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


109 
uöt8_t
 
	mth_x2
:4;

110 
uöt8_t
 
	mth_off
:4;

112 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


113 
uöt8_t
 
	mth_off
:4;

114 
uöt8_t
 
	mth_x2
:4;

116 
uöt8_t
 
	mth_Êags
;

117 
	#TH_FIN
 0x01

	)

118 
	#TH_SYN
 0x02

	)

119 
	#TH_RST
 0x04

	)

120 
	#TH_PUSH
 0x08

	)

121 
	#TH_ACK
 0x10

	)

122 
	#TH_URG
 0x20

	)

123 
uöt16_t
 
	mth_wö
;

124 
uöt16_t
 
	mth_sum
;

125 
uöt16_t
 
	mth_uΩ
;

129 
uöt16_t
 
	msour˚
;

130 
uöt16_t
 
	mde°
;

131 
uöt32_t
 
	m£q
;

132 
uöt32_t
 
	mack_£q
;

133 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


134 
uöt16_t
 
	mªs1
:4;

135 
uöt16_t
 
	mdoff
:4;

136 
uöt16_t
 
	mfö
:1;

137 
uöt16_t
 
	msyn
:1;

138 
uöt16_t
 
	mr°
:1;

139 
uöt16_t
 
	mpsh
:1;

140 
uöt16_t
 
	mack
:1;

141 
uöt16_t
 
	murg
:1;

142 
uöt16_t
 
	mªs2
:2;

143 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


144 
uöt16_t
 
	mdoff
:4;

145 
uöt16_t
 
	mªs1
:4;

146 
uöt16_t
 
	mªs2
:2;

147 
uöt16_t
 
	murg
:1;

148 
uöt16_t
 
	mack
:1;

149 
uöt16_t
 
	mpsh
:1;

150 
uöt16_t
 
	mr°
:1;

151 
uöt16_t
 
	msyn
:1;

152 
uöt16_t
 
	mfö
:1;

156 
uöt16_t
 
	mwödow
;

157 
uöt16_t
 
	mcheck
;

158 
uöt16_t
 
	murg_±r
;

165 
	mTCP_ESTABLISHED
 = 1,

166 
	mTCP_SYN_SENT
,

167 
	mTCP_SYN_RECV
,

168 
	mTCP_FIN_WAIT1
,

169 
	mTCP_FIN_WAIT2
,

170 
	mTCP_TIME_WAIT
,

171 
	mTCP_CLOSE
,

172 
	mTCP_CLOSE_WAIT
,

173 
	mTCP_LAST_ACK
,

174 
	mTCP_LISTEN
,

175 
	mTCP_CLOSING


178 
	#TCPOPT_EOL
 0

	)

179 
	#TCPOPT_NOP
 1

	)

180 
	#TCPOPT_MAXSEG
 2

	)

181 
	#TCPOLEN_MAXSEG
 4

	)

182 
	#TCPOPT_WINDOW
 3

	)

183 
	#TCPOLEN_WINDOW
 3

	)

184 
	#TCPOPT_SACK_PERMITTED
 4

	)

185 
	#TCPOLEN_SACK_PERMITTED
 2

	)

186 
	#TCPOPT_SACK
 5

	)

187 
	#TCPOPT_TIMESTAMP
 8

	)

188 
	#TCPOLEN_TIMESTAMP
 10

	)

189 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

191 
	#TCPOPT_TSTAMP_HDR
 \

192 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

200 
	#TCP_MSS
 512

	)

202 
	#TCP_MAXWIN
 65535

	)

204 
	#TCP_MAX_WINSHIFT
 14

	)

206 
	#SOL_TCP
 6

	)

209 
	#TCPI_OPT_TIMESTAMPS
 1

	)

210 
	#TCPI_OPT_SACK
 2

	)

211 
	#TCPI_OPT_WSCALE
 4

	)

212 
	#TCPI_OPT_ECN
 8

	)

213 
	#TCPI_OPT_ECN_SEEN
 16

	)

214 
	#TCPI_OPT_SYN_DATA
 32

	)

217 
	et˝_ˇ_°©e


219 
	mTCP_CA_O≥n
 = 0,

220 
	mTCP_CA_Dis‹dî
 = 1,

221 
	mTCP_CA_CWR
 = 2,

222 
	mTCP_CA_Recovîy
 = 3,

223 
	mTCP_CA_Loss
 = 4

226 
	st˝_öfo


228 
uöt8_t
 
	mt˝i_°©e
;

229 
uöt8_t
 
	mt˝i_ˇ_°©e
;

230 
uöt8_t
 
	mt˝i_ªå™smôs
;

231 
uöt8_t
 
	mt˝i_¥obes
;

232 
uöt8_t
 
	mt˝i_backoff
;

233 
uöt8_t
 
	mt˝i_›ti⁄s
;

234 
uöt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

236 
uöt32_t
 
	mt˝i_πo
;

237 
uöt32_t
 
	mt˝i_©o
;

238 
uöt32_t
 
	mt˝i_¢d_mss
;

239 
uöt32_t
 
	mt˝i_rcv_mss
;

241 
uöt32_t
 
	mt˝i_u«cked
;

242 
uöt32_t
 
	mt˝i_ßcked
;

243 
uöt32_t
 
	mt˝i_lo°
;

244 
uöt32_t
 
	mt˝i_ªå™s
;

245 
uöt32_t
 
	mt˝i_Áckës
;

248 
uöt32_t
 
	mt˝i_œ°_d©a_£¡
;

249 
uöt32_t
 
	mt˝i_œ°_ack_£¡
;

250 
uöt32_t
 
	mt˝i_œ°_d©a_ªcv
;

251 
uöt32_t
 
	mt˝i_œ°_ack_ªcv
;

254 
uöt32_t
 
	mt˝i_pmtu
;

255 
uöt32_t
 
	mt˝i_rcv_s°hªsh
;

256 
uöt32_t
 
	mt˝i_πt
;

257 
uöt32_t
 
	mt˝i_πtv¨
;

258 
uöt32_t
 
	mt˝i_¢d_s°hªsh
;

259 
uöt32_t
 
	mt˝i_¢d_cwnd
;

260 
uöt32_t
 
	mt˝i_advmss
;

261 
uöt32_t
 
	mt˝i_ª‹dîög
;

263 
uöt32_t
 
	mt˝i_rcv_πt
;

264 
uöt32_t
 
	mt˝i_rcv_•a˚
;

266 
uöt32_t
 
	mt˝i_tŸÆ_ªå™s
;

271 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

274 
	#TCP_MD5SIG_FLAG_PREFIX
 1

	)

276 
	st˝_md5sig


278 
sockaddr_°‹age
 
	mt˝m_addr
;

279 
uöt8_t
 
	mt˝m_Êags
;

280 
uöt8_t
 
	mt˝m_¥efixÀn
;

281 
uöt16_t
 
	mt˝m_keyÀn
;

282 
uöt32_t
 
	m__t˝m_∑d
;

283 
uöt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

287 
	st˝_ª∑ú_›t


289 
uöt32_t
 
	m›t_code
;

290 
uöt32_t
 
	m›t_vÆ
;

296 
	mTCP_NO_QUEUE
,

297 
	mTCP_RECV_QUEUE
,

298 
	mTCP_SEND_QUEUE
,

299 
	mTCP_QUEUES_NR
,

303 
	#TCP_COOKIE_MIN
 8

	)

304 
	#TCP_COOKIE_MAX
 16

	)

305 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

308 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

309 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

313 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

314 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

316 
	#TCP_MSS_DEFAULT
 536U

	)

317 
	#TCP_MSS_DESIRED
 1220U

	)

319 
	st˝_cookõ_å™ß˘i⁄s


321 
uöt16_t
 
	mt˝˘_Êags
;

322 
uöt8_t
 
	m__t˝˘_∑d1
;

323 
uöt8_t
 
	mt˝˘_cookõ_desúed
;

324 
uöt16_t
 
	mt˝˘_s_d©a_desúed
;

325 
uöt16_t
 
	mt˝˘_u£d
;

326 
uöt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

330 
	st˝_ª∑ú_wödow


332 
uöt32_t
 
	m¢d_wl1
;

333 
uöt32_t
 
	m¢d_wnd
;

334 
uöt32_t
 
	mmax_wödow
;

335 
uöt32_t
 
	mrcv_wnd
;

336 
uöt32_t
 
	mrcv_wup
;

340 
	st˝_zîoc›y_ª˚ive


342 
uöt64_t
 
	maddªss
;

343 
uöt32_t
 
	mÀngth
;

344 
uöt32_t
 
	mªcv_skù_höt
;

	@/usr/include/openssl/bio.h

10 #i‚de‡
HEADER_BIO_H


11 
	#HEADER_BIO_H


	)

13 
	~<›ís¶/e_os2.h
>

15 #i‚de‡
OPENSSL_NO_STDIO


16 
	~<°dio.h
>

18 
	~<°d¨g.h
>

20 
	~<›ís¶/¸y±o.h
>

21 
	~<›ís¶/bi€º.h
>

23 #ifde‡ 
__˝lu•lus


28 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

29 
	#BIO_TYPE_FILTER
 0x0200

	)

30 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

33 
	#BIO_TYPE_NONE
 0

	)

34 
	#BIO_TYPE_MEM
 ( 1|
BIO_TYPE_SOURCE_SINK
)

	)

35 
	#BIO_TYPE_FILE
 ( 2|
BIO_TYPE_SOURCE_SINK
)

	)

37 
	#BIO_TYPE_FD
 ( 4|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

38 
	#BIO_TYPE_SOCKET
 ( 5|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

39 
	#BIO_TYPE_NULL
 ( 6|
BIO_TYPE_SOURCE_SINK
)

	)

40 
	#BIO_TYPE_SSL
 ( 7|
BIO_TYPE_FILTER
)

	)

41 
	#BIO_TYPE_MD
 ( 8|
BIO_TYPE_FILTER
)

	)

42 
	#BIO_TYPE_BUFFER
 ( 9|
BIO_TYPE_FILTER
)

	)

43 
	#BIO_TYPE_CIPHER
 (10|
BIO_TYPE_FILTER
)

	)

44 
	#BIO_TYPE_BASE64
 (11|
BIO_TYPE_FILTER
)

	)

45 
	#BIO_TYPE_CONNECT
 (12|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

46 
	#BIO_TYPE_ACCEPT
 (13|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

48 
	#BIO_TYPE_NBIO_TEST
 (16|
BIO_TYPE_FILTER
)

	)

49 
	#BIO_TYPE_NULL_FILTER
 (17|
BIO_TYPE_FILTER
)

	)

50 
	#BIO_TYPE_BIO
 (19|
BIO_TYPE_SOURCE_SINK
)

	)

51 
	#BIO_TYPE_LINEBUFFER
 (20|
BIO_TYPE_FILTER
)

	)

52 
	#BIO_TYPE_DGRAM
 (21|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

53 
	#BIO_TYPE_ASN1
 (22|
BIO_TYPE_FILTER
)

	)

54 
	#BIO_TYPE_COMP
 (23|
BIO_TYPE_FILTER
)

	)

55 #i‚de‡
OPENSSL_NO_SCTP


56 
	#BIO_TYPE_DGRAM_SCTP
 (24|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

59 
	#BIO_TYPE_START
 128

	)

65 
	#BIO_NOCLOSE
 0x00

	)

66 
	#BIO_CLOSE
 0x01

	)

71 
	#BIO_CTRL_RESET
 1

	)

72 
	#BIO_CTRL_EOF
 2

	)

73 
	#BIO_CTRL_INFO
 3

	)

74 
	#BIO_CTRL_SET
 4

	)

75 
	#BIO_CTRL_GET
 5

	)

76 
	#BIO_CTRL_PUSH
 6

	)

77 
	#BIO_CTRL_POP
 7

	)

78 
	#BIO_CTRL_GET_CLOSE
 8

	)

79 
	#BIO_CTRL_SET_CLOSE
 9

	)

80 
	#BIO_CTRL_PENDING
 10

	)

81 
	#BIO_CTRL_FLUSH
 11

	)

82 
	#BIO_CTRL_DUP
 12

	)

83 
	#BIO_CTRL_WPENDING
 13

	)

84 
	#BIO_CTRL_SET_CALLBACK
 14

	)

85 
	#BIO_CTRL_GET_CALLBACK
 15

	)

87 
	#BIO_CTRL_PEEK
 29

	)

88 
	#BIO_CTRL_SET_FILENAME
 30

	)

91 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

92 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

94 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

95 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

96 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

97 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

99 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

100 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

103 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

106 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

107 
	#BIO_CTRL_DGRAM_GET_FALLBACK_MTU
 47

	)

108 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

109 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

113 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

117 
	#BIO_CTRL_DGRAM_GET_PEER
 46

	)

118 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

120 
	#BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
 45

	)

122 
	#BIO_CTRL_DGRAM_SET_DONT_FRAG
 48

	)

124 
	#BIO_CTRL_DGRAM_GET_MTU_OVERHEAD
 49

	)

127 
	#BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE
 50

	)

128 #i‚de‡
OPENSSL_NO_SCTP


130 
	#BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY
 51

	)

131 
	#BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY
 52

	)

132 
	#BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD
 53

	)

133 
	#BIO_CTRL_DGRAM_SCTP_GET_SNDINFO
 60

	)

134 
	#BIO_CTRL_DGRAM_SCTP_SET_SNDINFO
 61

	)

135 
	#BIO_CTRL_DGRAM_SCTP_GET_RCVINFO
 62

	)

136 
	#BIO_CTRL_DGRAM_SCTP_SET_RCVINFO
 63

	)

137 
	#BIO_CTRL_DGRAM_SCTP_GET_PRINFO
 64

	)

138 
	#BIO_CTRL_DGRAM_SCTP_SET_PRINFO
 65

	)

139 
	#BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN
 70

	)

142 
	#BIO_CTRL_DGRAM_SET_PEEK_MODE
 71

	)

145 
	#BIO_FP_READ
 0x02

	)

146 
	#BIO_FP_WRITE
 0x04

	)

147 
	#BIO_FP_APPEND
 0x08

	)

148 
	#BIO_FP_TEXT
 0x10

	)

150 
	#BIO_FLAGS_READ
 0x01

	)

151 
	#BIO_FLAGS_WRITE
 0x02

	)

152 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

153 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

154 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

155 #i‚de‡
BIO_FLAGS_UPLINK


160 
	#BIO_FLAGS_UPLINK
 0

	)

163 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

170 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

171 
	#BIO_FLAGS_NONCLEAR_RST
 0x400

	)

172 
	#BIO_FLAGS_IN_EOF
 0x800

	)

174 
bio_addr_°
 
	tBIO_ADDR
;

175 
bio_addröfo_°
 
	tBIO_ADDRINFO
;

177 
BIO_gë_√w_ödex
();

178 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

179 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

180 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

182 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

183 
	#BIO_£t_ªåy_•ecül
(
b
) \

184 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

185 
	#BIO_£t_ªåy_ªad
(
b
) \

186 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

187 
	#BIO_£t_ªåy_wrôe
(
b
) \

188 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

191 
	#BIO_˛ór_ªåy_Êags
(
b
) \

192 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

193 
	#BIO_gë_ªåy_Êags
(
b
) \

194 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

197 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

198 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

199 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

200 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

201 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

213 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

215 
	#BIO_RR_CONNECT
 0x02

	)

217 
	#BIO_RR_ACCEPT
 0x03

	)

220 
	#BIO_CB_FREE
 0x01

	)

221 
	#BIO_CB_READ
 0x02

	)

222 
	#BIO_CB_WRITE
 0x03

	)

223 
	#BIO_CB_PUTS
 0x04

	)

224 
	#BIO_CB_GETS
 0x05

	)

225 
	#BIO_CB_CTRL
 0x06

	)

231 
	#BIO_CB_RETURN
 0x80

	)

232 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
)

	)

233 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

234 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

236 (*
BIO_ˇŒback_‚
)(
	tBIO
 *
	tb
, 
	t›î
, c⁄° *
	t¨gp
, 
	t¨gi
,

237 
	t¨gl
, 
	tªt
);

238 (*
BIO_ˇŒback_‚_ex
)(
	tBIO
 *
	tb
, 
	t›î
, c⁄° *
	t¨gp
,

239 
	tsize_t
 
	tÀn
, 
	t¨gi
,

240 
	t¨gl
, 
	tªt
, 
	tsize_t
 *
	t¥o˚s£d
);

241 
BIO_ˇŒback_‚
 
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
);

242 
BIO_£t_ˇŒback
(
BIO
 *
b
, 
BIO_ˇŒback_‚
 
ˇŒback
);

244 
BIO_ˇŒback_‚_ex
 
BIO_gë_ˇŒback_ex
(c⁄° 
BIO
 *
b
);

245 
BIO_£t_ˇŒback_ex
(
BIO
 *
b
, 
BIO_ˇŒback_‚_ex
 
ˇŒback
);

247 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

248 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

250 
bio_mëhod_°
 
	tBIO_METHOD
;

252 c⁄° *
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

253 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

255 
	tBIO_öfo_cb
(
	tBIO
 *, , );

256 
BIO_öfo_cb
 
	tbio_öfo_cb
;

258 
DEFINE_STACK_OF
(
BIO
)

261 
	ta¢1_ps_func
 (
	tBIO
 *
	tb
, **
	tpbuf
, *
	t∂í
,

262 *
	t∑rg
);

264 #i‚de‡
OPENSSL_NO_SCTP


266 
	sbio_dgøm_s˘p_¢döfo
 {

267 
uöt16_t
 
¢d_sid
;

268 
uöt16_t
 
¢d_Êags
;

269 
uöt32_t
 
¢d_µid
;

270 
uöt32_t
 
¢d_c⁄ãxt
;

273 
	sbio_dgøm_s˘p_rcvöfo
 {

274 
uöt16_t
 
rcv_sid
;

275 
uöt16_t
 
rcv_s¢
;

276 
uöt16_t
 
rcv_Êags
;

277 
uöt32_t
 
rcv_µid
;

278 
uöt32_t
 
rcv_t¢
;

279 
uöt32_t
 
rcv_cumt¢
;

280 
uöt32_t
 
rcv_c⁄ãxt
;

283 
	sbio_dgøm_s˘p_¥öfo
 {

284 
uöt16_t
 
¥_pﬁicy
;

285 
uöt32_t
 
¥_vÆue
;

293 
	#BIO_C_SET_CONNECT
 100

	)

294 
	#BIO_C_DO_STATE_MACHINE
 101

	)

295 
	#BIO_C_SET_NBIO
 102

	)

297 
	#BIO_C_SET_FD
 104

	)

298 
	#BIO_C_GET_FD
 105

	)

299 
	#BIO_C_SET_FILE_PTR
 106

	)

300 
	#BIO_C_GET_FILE_PTR
 107

	)

301 
	#BIO_C_SET_FILENAME
 108

	)

302 
	#BIO_C_SET_SSL
 109

	)

303 
	#BIO_C_GET_SSL
 110

	)

304 
	#BIO_C_SET_MD
 111

	)

305 
	#BIO_C_GET_MD
 112

	)

306 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

307 
	#BIO_C_SET_BUF_MEM
 114

	)

308 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

309 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

310 
	#BIO_C_SET_BUFF_SIZE
 117

	)

311 
	#BIO_C_SET_ACCEPT
 118

	)

312 
	#BIO_C_SSL_MODE
 119

	)

313 
	#BIO_C_GET_MD_CTX
 120

	)

315 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

316 
	#BIO_C_GET_CONNECT
 123

	)

317 
	#BIO_C_GET_ACCEPT
 124

	)

318 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

319 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

320 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

321 
	#BIO_C_FILE_SEEK
 128

	)

322 
	#BIO_C_GET_CIPHER_CTX
 129

	)

323 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

325 
	#BIO_C_SET_BIND_MODE
 131

	)

326 
	#BIO_C_GET_BIND_MODE
 132

	)

327 
	#BIO_C_FILE_TELL
 133

	)

328 
	#BIO_C_GET_SOCKS
 134

	)

329 
	#BIO_C_SET_SOCKS
 135

	)

331 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

332 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

333 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

334 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

335 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

336 
	#BIO_C_GET_READ_REQUEST
 141

	)

337 
	#BIO_C_SHUTDOWN_WR
 142

	)

338 
	#BIO_C_NREAD0
 143

	)

339 
	#BIO_C_NREAD
 144

	)

340 
	#BIO_C_NWRITE0
 145

	)

341 
	#BIO_C_NWRITE
 146

	)

342 
	#BIO_C_RESET_READ_REQUEST
 147

	)

343 
	#BIO_C_SET_MD_CTX
 148

	)

345 
	#BIO_C_SET_PREFIX
 149

	)

346 
	#BIO_C_GET_PREFIX
 150

	)

347 
	#BIO_C_SET_SUFFIX
 151

	)

348 
	#BIO_C_GET_SUFFIX
 152

	)

350 
	#BIO_C_SET_EX_ARG
 153

	)

351 
	#BIO_C_GET_EX_ARG
 154

	)

353 
	#BIO_C_SET_CONNECT_MODE
 155

	)

355 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

356 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

358 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

360 #i‚de‡
OPENSSL_NO_SOCK


363 
	#BIO_FAMILY_IPV4
 4

	)

364 
	#BIO_FAMILY_IPV6
 6

	)

365 
	#BIO_FAMILY_IPANY
 256

	)

368 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0, \

369 (*)(
«me
))

	)

370 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1, \

371 (*)(
p‹t
))

	)

372 
	#BIO_£t_c⁄n_addªss
(
b
,
addr
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2, \

373 (*)(
addr
))

	)

374 
	#BIO_£t_c⁄n_ù_Ámûy
(
b
,
f
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_CONNECT
,3,f)

	)

375 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0))

	)

376 
	#BIO_gë_c⁄n_p‹t
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1))

	)

377 
	#BIO_gë_c⁄n_addªss
(
b
Ë((c⁄° 
BIO_ADDR
 *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2))

	)

378 
	#BIO_gë_c⁄n_ù_Ámûy
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CONNECT
,3,
NULL
)

	)

379 
	#BIO_£t_c⁄n_mode
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT_MODE
,“),
NULL
)

	)

382 
	#BIO_£t_ac˚±_«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0, \

383 (*)(
«me
))

	)

384 
	#BIO_£t_ac˚±_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1, \

385 (*)(
p‹t
))

	)

386 
	#BIO_gë_ac˚±_«me
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0))

	)

387 
	#BIO_gë_ac˚±_p‹t
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,1))

	)

388 
	#BIO_gë_≥î_«me
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,2))

	)

389 
	#BIO_gë_≥î_p‹t
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,3))

	)

391 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,“)?(*)"a":
NULL
)

	)

392 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,3, \

393 (*)(
bio
))

	)

394 
	#BIO_£t_ac˚±_ù_Ámûy
(
b
,
f
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_ACCEPT
,4,f)

	)

395 
	#BIO_gë_ac˚±_ù_Ámûy
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_ACCEPT
,4,
NULL
)

	)

398 
	#BIO_BIND_NORMAL
 0

	)

399 
	#BIO_BIND_REUSEADDR
 
BIO_SOCK_REUSEADDR


	)

400 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 
BIO_SOCK_REUSEADDR


	)

401 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

402 
	#BIO_gë_böd_mode
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

405 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

406 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

409 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

412 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

413 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)(c))

	)

416 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)(Â))

	)

417 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)(Âp))

	)

420 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

421 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

427 #ifde‡
CONST_STRICT


432 
BIO_ªad_fûíame
(
BIO
 *
b
, c⁄° *
«me
);

434 
	#BIO_ªad_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

435 
BIO_CLOSE
|
BIO_FP_READ
,(*)(
«me
))

	)

437 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

438 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

439 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

440 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

441 
	#BIO_rw_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

442 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

450 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)(s¶))

	)

451 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)(s¶p))

	)

452 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

453 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

454 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
)

	)

455 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

456 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
)

	)

457 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

458 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
)

	)

463 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*)’p))

	)

464 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)(bm))

	)

465 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0, \

466 (*)(
µ
))

	)

467 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

468 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

471 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

472 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

473 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

474 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

475 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

478 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

480 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

481 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

482 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

483 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

484 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

485 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

487 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

488 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

489 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

490 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

491 
cbp
)

	)

492 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

495 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

496 
	#BIO_buf„r_≥ek
(
b
,
s
,
l
Ë
	`BIO_˘æ
(b,
BIO_CTRL_PEEK
,÷),(s))

	)

499 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

500 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

501 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

502 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

503 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

505 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

506 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

507 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

508 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

509 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

512 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

513 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)(
≥î
))

	)

514 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
,
≥î
) \

515 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 0, (*)(
≥î
))

	)

516 
	#BIO_dgøm_ªcv_timedout
(
b
) \

517 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

518 
	#BIO_dgøm_£nd_timedout
(
b
) \

519 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

520 
	#BIO_dgøm_gë_≥î
(
b
,
≥î
) \

521 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_PEER
, 0, (*)(
≥î
))

	)

522 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

523 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)(
≥î
))

	)

524 
	#BIO_dgøm_gë_mtu_ovîhód
(
b
) \

525 ()
	`BIO_˘æ
((
b
), 
BIO_CTRL_DGRAM_GET_MTU_OVERHEAD
, 0, 
NULL
)

	)

527 
	#BIO_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

528 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_BIO
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

529 
BIO_£t_ex_d©a
(
BIO
 *
bio
, 
idx
, *
d©a
);

530 *
BIO_gë_ex_d©a
(
BIO
 *
bio
, 
idx
);

531 
uöt64_t
 
BIO_numbî_ªad
(
BIO
 *
bio
);

532 
uöt64_t
 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

535 
BIO_a¢1_£t_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 *
¥efix
,

536 
a¢1_ps_func
 *
¥efix_‰ì
);

537 
BIO_a¢1_gë_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 **
µªfix
,

538 
a¢1_ps_func
 **
µªfix_‰ì
);

539 
BIO_a¢1_£t_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 *
suffix
,

540 
a¢1_ps_func
 *
suffix_‰ì
);

541 
BIO_a¢1_gë_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 **
psuffix
,

542 
a¢1_ps_func
 **
psuffix_‰ì
);

544 c⁄° 
BIO_METHOD
 *
BIO_s_fûe
();

545 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

546 #i‚de‡
OPENSSL_NO_STDIO


547 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

549 
BIO
 *
BIO_√w
(c⁄° 
BIO_METHOD
 *
ty≥
);

550 
BIO_‰ì
(
BIO
 *
a
);

551 
BIO_£t_d©a
(
BIO
 *
a
, *
±r
);

552 *
BIO_gë_d©a
(
BIO
 *
a
);

553 
BIO_£t_öô
(
BIO
 *
a
, 
öô
);

554 
BIO_gë_öô
(
BIO
 *
a
);

555 
BIO_£t_shutdown
(
BIO
 *
a
, 
shut
);

556 
BIO_gë_shutdown
(
BIO
 *
a
);

557 
BIO_v‰ì
(
BIO
 *
a
);

558 
BIO_up_ªf
(
BIO
 *
a
);

559 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
dÀn
);

560 
BIO_ªad_ex
(
BIO
 *
b
, *
d©a
, 
size_t
 
dÀn
, size_à*
ªadbyãs
);

561 
BIO_gës
(
BIO
 *
bp
, *
buf
, 
size
);

562 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
dÀn
);

563 
BIO_wrôe_ex
(
BIO
 *
b
, c⁄° *
d©a
, 
size_t
 
dÀn
, size_à*
wrôãn
);

564 
BIO_puts
(
BIO
 *
bp
, c⁄° *
buf
);

565 
BIO_ödít
(
BIO
 *
b
, 
ödít
, 
max
);

566 
BIO_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
, *
∑rg
);

567 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
, 
BIO_öfo_cb
 *
Â
);

568 *
BIO_±r_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
);

569 
BIO_öt_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
, 
ürg
);

570 
BIO
 *
BIO_push
(BIO *
b
, BIO *
≠≥nd
);

571 
BIO
 *
BIO_p›
(BIO *
b
);

572 
BIO_‰ì_Æl
(
BIO
 *
a
);

573 
BIO
 *
BIO_föd_ty≥
(BIO *
b
, 
bio_ty≥
);

574 
BIO
 *
BIO_√xt
(BIO *
b
);

575 
BIO_£t_√xt
(
BIO
 *
b
, BIO *
√xt
);

576 
BIO
 *
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

577 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

578 
BIO_£t_ªåy_ªas⁄
(
BIO
 *
bio
, 
ªas⁄
);

579 
BIO
 *
BIO_dup_chaö
(BIO *
ö
);

581 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

582 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

583 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

584 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

586 
BIO_debug_ˇŒback
(
BIO
 *
bio
, 
cmd
, c⁄° *
¨gp
, 
¨gi
,

587 
¨gl
, 
ªt
);

589 c⁄° 
BIO_METHOD
 *
BIO_s_mem
();

590 c⁄° 
BIO_METHOD
 *
BIO_s_£cmem
();

591 
BIO
 *
BIO_√w_mem_buf
(c⁄° *
buf
, 
Àn
);

592 #i‚de‡
OPENSSL_NO_SOCK


593 c⁄° 
BIO_METHOD
 *
BIO_s_sockë
();

594 c⁄° 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

595 c⁄° 
BIO_METHOD
 *
BIO_s_ac˚±
();

597 c⁄° 
BIO_METHOD
 *
BIO_s_fd
();

598 c⁄° 
BIO_METHOD
 *
BIO_s_log
();

599 c⁄° 
BIO_METHOD
 *
BIO_s_bio
();

600 c⁄° 
BIO_METHOD
 *
BIO_s_nuŒ
();

601 c⁄° 
BIO_METHOD
 *
BIO_f_nuŒ
();

602 c⁄° 
BIO_METHOD
 *
BIO_f_buf„r
();

603 c⁄° 
BIO_METHOD
 *
BIO_f_löebuf„r
();

604 c⁄° 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

605 #i‚de‡
OPENSSL_NO_DGRAM


606 c⁄° 
BIO_METHOD
 *
BIO_s_d©agøm
();

607 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

608 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

609 #i‚de‡
OPENSSL_NO_SCTP


610 c⁄° 
BIO_METHOD
 *
BIO_s_d©agøm_s˘p
();

611 
BIO
 *
BIO_√w_dgøm_s˘p
(
fd
, 
˛o£_Êag
);

612 
BIO_dgøm_is_s˘p
(
BIO
 *
bio
);

613 
BIO_dgøm_s˘p_nŸifiˇti⁄_cb
(
BIO
 *
b
,

614 (*
h™dÀ_nŸifiˇti⁄s
Ë(
BIO
 *
bio
,

615 *
c⁄ãxt
,

616 *
buf
),

617 *
c⁄ãxt
);

618 
BIO_dgøm_s˘p_waô_f‹_dry
(
BIO
 *
b
);

619 
BIO_dgøm_s˘p_msg_waôög
(
BIO
 *
b
);

623 #i‚de‡
OPENSSL_NO_SOCK


624 
BIO_sock_should_ªåy
(
i
);

625 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

628 
BIO_fd_should_ªåy
(
i
);

629 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

630 
BIO_dump_cb
((*
cb
Ë(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

631 *
u
, c⁄° *
s
, 
Àn
);

632 
BIO_dump_ödít_cb
((*
cb
Ë(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

633 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

634 
BIO_dump
(
BIO
 *
b
, c⁄° *
byãs
, 
Àn
);

635 
BIO_dump_ödít
(
BIO
 *
b
, c⁄° *
byãs
, 
Àn
, 
ödít
);

636 #i‚de‡
OPENSSL_NO_STDIO


637 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

638 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

640 
BIO_hex_°rög
(
BIO
 *
out
, 
ödít
, 
width
, *
d©a
,

641 
d©Æí
);

643 #i‚de‡
OPENSSL_NO_SOCK


644 
BIO_ADDR
 *
BIO_ADDR_√w
();

645 
BIO_ADDR_øwmake
(
BIO_ADDR
 *
≠
, 
Ámûy
,

646 c⁄° *
whîe
, 
size_t
 
whîñí
, 
p‹t
);

647 
BIO_ADDR_‰ì
(
BIO_ADDR
 *);

648 
BIO_ADDR_˛ór
(
BIO_ADDR
 *
≠
);

649 
BIO_ADDR_Ámûy
(c⁄° 
BIO_ADDR
 *
≠
);

650 
BIO_ADDR_øwaddªss
(c⁄° 
BIO_ADDR
 *
≠
, *
p
, 
size_t
 *
l
);

651 
BIO_ADDR_øwp‹t
(c⁄° 
BIO_ADDR
 *
≠
);

652 *
BIO_ADDR_ho°«me_°rög
(c⁄° 
BIO_ADDR
 *
≠
, 
numîic
);

653 *
BIO_ADDR_£rvi˚_°rög
(c⁄° 
BIO_ADDR
 *
≠
, 
numîic
);

654 *
BIO_ADDR_∑th_°rög
(c⁄° 
BIO_ADDR
 *
≠
);

656 c⁄° 
BIO_ADDRINFO
 *
BIO_ADDRINFO_√xt
(c⁄° BIO_ADDRINFO *
bai
);

657 
BIO_ADDRINFO_Ámûy
(c⁄° 
BIO_ADDRINFO
 *
bai
);

658 
BIO_ADDRINFO_sockty≥
(c⁄° 
BIO_ADDRINFO
 *
bai
);

659 
BIO_ADDRINFO_¥Ÿocﬁ
(c⁄° 
BIO_ADDRINFO
 *
bai
);

660 c⁄° 
BIO_ADDR
 *
BIO_ADDRINFO_addªss
(c⁄° 
BIO_ADDRINFO
 *
bai
);

661 
BIO_ADDRINFO_‰ì
(
BIO_ADDRINFO
 *
bai
);

663 
	eBIO_ho°£rv_¥i‹ôõs
 {

664 
BIO_PARSE_PRIO_HOST
, 
BIO_PARSE_PRIO_SERV


666 
BIO_∑r£_ho°£rv
(c⁄° *
ho°£rv
, **
ho°
, **
£rvi˚
,

667 
BIO_ho°£rv_¥i‹ôõs
 
ho°£rv_¥io
);

668 
	eBIO_lookup_ty≥
 {

669 
BIO_LOOKUP_CLIENT
, 
BIO_LOOKUP_SERVER


671 
BIO_lookup
(c⁄° *
ho°
, c⁄° *
£rvi˚
,

672 
BIO_lookup_ty≥
 
lookup_ty≥
,

673 
Ámûy
, 
sockty≥
, 
BIO_ADDRINFO
 **
ªs
);

674 
BIO_lookup_ex
(c⁄° *
ho°
, c⁄° *
£rvi˚
,

675 
lookup_ty≥
, 
Ámûy
, 
sockty≥
, 
¥Ÿocﬁ
,

676 
BIO_ADDRINFO
 **
ªs
);

677 
BIO_sock_îr‹
(
sock
);

678 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

679 
BIO_sockë_nbio
(
fd
, 
mode
);

680 
BIO_sock_öô
();

681 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

682 
	#BIO_sock_˛ónup
(Ë0Ë

	)

684 
BIO_£t_t˝_ndñay
(
sock
, 
tu∫_⁄
);

686 
DEPRECATEDIN_1_1_0
(
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
))

687 
DEPRECATEDIN_1_1_0
(
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
))

688 
DEPRECATEDIN_1_1_0
(
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
))

689 
DEPRECATEDIN_1_1_0
(
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
, 
mode
))

690 
DEPRECATEDIN_1_1_0
(
BIO_ac˚±
(
sock
, **
ù_p‹t
))

692 
	uBIO_sock_öfo_u
 {

693 
BIO_ADDR
 *
addr
;

695 
	eBIO_sock_öfo_ty≥
 {

696 
BIO_SOCK_INFO_ADDRESS


698 
BIO_sock_öfo
(
sock
,

699 
BIO_sock_öfo_ty≥
 
ty≥
, 
BIO_sock_öfo_u
 *
öfo
);

701 
	#BIO_SOCK_REUSEADDR
 0x01

	)

702 
	#BIO_SOCK_V6_ONLY
 0x02

	)

703 
	#BIO_SOCK_KEEPALIVE
 0x04

	)

704 
	#BIO_SOCK_NONBLOCK
 0x08

	)

705 
	#BIO_SOCK_NODELAY
 0x10

	)

707 
BIO_sockë
(
domaö
, 
sockty≥
, 
¥Ÿocﬁ
, 
›ti⁄s
);

708 
BIO_c⁄√˘
(
sock
, c⁄° 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

709 
BIO_böd
(
sock
, c⁄° 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

710 
BIO_li°í
(
sock
, c⁄° 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

711 
BIO_ac˚±_ex
(
ac˚±_sock
, 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

712 
BIO_˛o£sockë
(
sock
);

714 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

715 
BIO
 *
BIO_√w_c⁄√˘
(c⁄° *
ho°_p‹t
);

716 
BIO
 *
BIO_√w_ac˚±
(c⁄° *
ho°_p‹t
);

719 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

721 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

722 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

729 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

735 
	#os¶_bio__©å__
(
x
)

	)

736 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__STDC_VERSION__
) \

737 && !
deföed
(
__APPLE__
)

742 #i‡
__STDC_VERSION__
 >= 199901L

743 #unde‡
os¶_bio__©å__


744 
	#os¶_bio__©å__
 
__©åibuã__


	)

745 #i‡
__GNUC__
*10 + 
__GNUC_MINOR__
 >= 44

746 
	#os¶_bio__¥ötf__
 
__gnu_¥ötf__


	)

748 
	#os¶_bio__¥ötf__
 
__¥ötf__


	)

752 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

753 
os¶_bio__©å__
((
__f‹m©__
(
os¶_bio__¥ötf__
, 2, 3)));

754 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

755 
os¶_bio__©å__
((
__f‹m©__
(
os¶_bio__¥ötf__
, 2, 0)));

756 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

757 
os¶_bio__©å__
((
__f‹m©__
(
os¶_bio__¥ötf__
, 3, 4)));

758 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

759 
os¶_bio__©å__
((
__f‹m©__
(
os¶_bio__¥ötf__
, 3, 0)));

760 #unde‡
os¶_bio__©å__


761 #unde‡
os¶_bio__¥ötf__


764 
BIO_METHOD
 *
BIO_mëh_√w
(
ty≥
, c⁄° *
«me
);

765 
BIO_mëh_‰ì
(
BIO_METHOD
 *
biom
);

766 (*
BIO_mëh_gë_wrôe
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, const *, );

767 (*
BIO_mëh_gë_wrôe_ex
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, c⁄° *, 
size_t
,

768 
size_t
 *);

769 
BIO_mëh_£t_wrôe
(
BIO_METHOD
 *
biom
,

770 (*
wrôe
Ë(
BIO
 *, const *, ));

771 
BIO_mëh_£t_wrôe_ex
(
BIO_METHOD
 *
biom
,

772 (*
bwrôe
Ë(
BIO
 *, c⁄° *, 
size_t
, size_t *));

773 (*
BIO_mëh_gë_ªad
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, *, );

774 (*
BIO_mëh_gë_ªad_ex
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, *, 
size_t
, size_t *);

775 
BIO_mëh_£t_ªad
(
BIO_METHOD
 *
biom
,

776 (*
ªad
Ë(
BIO
 *, *, ));

777 
BIO_mëh_£t_ªad_ex
(
BIO_METHOD
 *
biom
,

778 (*
bªad
Ë(
BIO
 *, *, 
size_t
, size_t *));

779 (*
BIO_mëh_gë_puts
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, const *);

780 
BIO_mëh_£t_puts
(
BIO_METHOD
 *
biom
,

781 (*
puts
Ë(
BIO
 *, const *));

782 (*
BIO_mëh_gë_gës
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, *, );

783 
BIO_mëh_£t_gës
(
BIO_METHOD
 *
biom
,

784 (*
gës
Ë(
BIO
 *, *, ));

785 (*
BIO_mëh_gë_˘æ
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, , , *);

786 
BIO_mëh_£t_˘æ
(
BIO_METHOD
 *
biom
,

787 (*
˘æ
Ë(
BIO
 *, , , *));

788 (*
BIO_mëh_gë_¸óã
(c⁄° 
BIO_METHOD
 *
bi⁄
)Ë(
BIO
 *);

789 
BIO_mëh_£t_¸óã
(
BIO_METHOD
 *
biom
, (*
¸óã
Ë(
BIO
 *));

790 (*
BIO_mëh_gë_de°roy
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *);

791 
BIO_mëh_£t_de°roy
(
BIO_METHOD
 *
biom
, (*
de°roy
Ë(
BIO
 *));

792 (*
BIO_mëh_gë_ˇŒback_˘æ
(c⁄° 
BIO_METHOD
 *
biom
))

793 (
BIO
 *, , 
BIO_öfo_cb
 *);

794 
BIO_mëh_£t_ˇŒback_˘æ
(
BIO_METHOD
 *
biom
,

795 (*
ˇŒback_˘æ
Ë(
BIO
 *, ,

796 
BIO_öfo_cb
 *));

798 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bn.h

11 #i‚de‡
HEADER_BN_H


12 
	#HEADER_BN_H


	)

14 
	~<›ís¶/e_os2.h
>

15 #i‚de‡
OPENSSL_NO_STDIO


16 
	~<°dio.h
>

18 
	~<›ís¶/›ís¶c⁄f.h
>

19 
	~<›ís¶/os¶_typ.h
>

20 
	~<›ís¶/¸y±o.h
>

21 
	~<›ís¶/b√º.h
>

23 #ifde‡ 
__˝lu•lus


30 #ifde‡
SIXTY_FOUR_BIT_LONG


31 
	#BN_ULONG
 

	)

32 
	#BN_BYTES
 8

	)

38 #ifde‡
SIXTY_FOUR_BIT


39 
	#BN_ULONG
 

	)

40 
	#BN_BYTES
 8

	)

43 #ifde‡
THIRTY_TWO_BIT


44 
	#BN_ULONG
 

	)

45 
	#BN_BYTES
 4

	)

48 
	#BN_BITS2
 (
BN_BYTES
 * 8)

	)

49 
	#BN_BITS
 (
BN_BITS2
 * 2)

	)

50 
	#BN_TBIT
 ((
BN_ULONG
)1 << (
BN_BITS2
 - 1))

	)

52 
	#BN_FLG_MALLOCED
 0x01

	)

53 
	#BN_FLG_STATIC_DATA
 0x02

	)

61 
	#BN_FLG_CONSTTIME
 0x04

	)

62 
	#BN_FLG_SECURE
 0x08

	)

64 #i‡
OPENSSL_API_COMPAT
 < 0x00908000L

66 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

67 
	#BN_FLG_FREE
 0x8000

	)

70 
BN_£t_Êags
(
BIGNUM
 *
b
, 
n
);

71 
BN_gë_Êags
(c⁄° 
BIGNUM
 *
b
, 
n
);

74 
	#BN_RAND_TOP_ANY
 -1

	)

75 
	#BN_RAND_TOP_ONE
 0

	)

76 
	#BN_RAND_TOP_TWO
 1

	)

79 
	#BN_RAND_BOTTOM_ANY
 0

	)

80 
	#BN_RAND_BOTTOM_ODD
 1

	)

88 
BN_wôh_Êags
(
BIGNUM
 *
de°
, c⁄° BIGNUM *
b
, 
Êags
);

91 
BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

93 
BN_GENCB
 *
BN_GENCB_√w
();

94 
BN_GENCB_‰ì
(
BN_GENCB
 *
cb
);

97 
BN_GENCB_£t_ﬁd
(
BN_GENCB
 *
gícb
, (*
ˇŒback
) (, , *),

98 *
cb_¨g
);

101 
BN_GENCB_£t
(
BN_GENCB
 *
gícb
, (*
ˇŒback
) (, , BN_GENCB *),

102 *
cb_¨g
);

104 *
BN_GENCB_gë_¨g
(
BN_GENCB
 *
cb
);

106 
	#BN_¥ime_checks
 0

	)

172 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 3747 ? 3 : \

173 (
b
) >= 1345 ? 4 : \

174 (
b
) >= 476 ? 5 : \

175 (
b
) >= 400 ? 6 : \

176 (
b
) >= 347 ? 7 : \

177 (
b
) >= 308 ? 8 : \

178 (
b
) >= 55 ? 27 : \

179  34)

	)

181 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

183 
BN_abs_is_w‹d
(c⁄° 
BIGNUM
 *
a
, c⁄° 
BN_ULONG
 
w
);

184 
BN_is_zîo
(c⁄° 
BIGNUM
 *
a
);

185 
BN_is_⁄e
(c⁄° 
BIGNUM
 *
a
);

186 
BN_is_w‹d
(c⁄° 
BIGNUM
 *
a
, c⁄° 
BN_ULONG
 
w
);

187 
BN_is_odd
(c⁄° 
BIGNUM
 *
a
);

189 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

191 
BN_zîo_ex
(
BIGNUM
 *
a
);

193 #i‡
OPENSSL_API_COMPAT
 >= 0x00908000L

194 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

196 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

199 c⁄° 
BIGNUM
 *
BN_vÆue_⁄e
();

200 *
BN_›ti⁄s
();

201 
BN_CTX
 *
BN_CTX_√w
();

202 
BN_CTX
 *
BN_CTX_£cuª_√w
();

203 
BN_CTX_‰ì
(
BN_CTX
 *
c
);

204 
BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

205 
BIGNUM
 *
BN_CTX_gë
(
BN_CTX
 *
˘x
);

206 
BN_CTX_íd
(
BN_CTX
 *
˘x
);

207 
BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

208 
BN_¥iv_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

209 
BN_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

210 
BN_¥iv_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

211 
BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

212 
BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

213 
BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

214 
BN_num_bôs_w‹d
(
BN_ULONG
 
l
);

215 
BN_£curôy_bôs
(
L
, 
N
);

216 
BIGNUM
 *
BN_√w
();

217 
BIGNUM
 *
BN_£cuª_√w
();

218 
BN_˛ór_‰ì
(
BIGNUM
 *
a
);

219 
BIGNUM
 *
BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

220 
BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

221 
BIGNUM
 *
BN_bö2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

222 
BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

223 
BN_bn2bö∑d
(c⁄° 
BIGNUM
 *
a
, *
to
, 
tﬁí
);

224 
BIGNUM
 *
BN_Àbö2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

225 
BN_bn2Àbö∑d
(c⁄° 
BIGNUM
 *
a
, *
to
, 
tﬁí
);

226 
BIGNUM
 *
BN_mpi2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

227 
BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

228 
BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

229 
BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

230 
BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

231 
BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

232 
BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

233 
BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_CTX
 *
˘x
);

238 
BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

243 
BN_is_√g©ive
(c⁄° 
BIGNUM
 *
b
);

245 
BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

246 
BN_CTX
 *
˘x
);

247 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

248 
BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

249 
BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

250 
BN_CTX
 *
˘x
);

251 
BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

252 c⁄° 
BIGNUM
 *
m
);

253 
BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

254 
BN_CTX
 *
˘x
);

255 
BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

256 c⁄° 
BIGNUM
 *
m
);

257 
BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

258 
BN_CTX
 *
˘x
);

259 
BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

260 
BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

261 
BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

262 
BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
,

263 
BN_CTX
 *
˘x
);

264 
BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

266 
BN_ULONG
 
BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

267 
BN_ULONG
 
BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

268 
BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

269 
BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

270 
BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

271 
BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

272 
BN_ULONG
 
BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

274 
BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

275 
BN_‰ì
(
BIGNUM
 *
a
);

276 
BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

277 
BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

278 
BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

279 
BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

281 
BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

282 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

283 
BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

284 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

285 
BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

286 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

287 
BN_MONT_CTX
 *
ö_m⁄t
);

288 
BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

289 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

290 
BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

291 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
, c⁄° BIGNUM *
m
,

292 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

293 
BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

294 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

296 
BN_mask_bôs
(
BIGNUM
 *
a
, 
n
);

297 #i‚de‡
OPENSSL_NO_STDIO


298 
BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

300 
BN_¥öt
(
BIO
 *
bio
, c⁄° 
BIGNUM
 *
a
);

301 
BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

302 
BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

303 
BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

304 
BN_˛ór
(
BIGNUM
 *
a
);

305 
BIGNUM
 *
BN_dup
(c⁄° BIGNUM *
a
);

306 
BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

307 
BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

308 
BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

309 *
BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

310 *
BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

311 
BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

312 
BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

313 
BN_asc2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

314 
BN_gcd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

315 
BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

318 
BIGNUM
 *
BN_mod_övî£
(BIGNUM *
ªt
,

319 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *
˘x
);

320 
BIGNUM
 *
BN_mod_sqπ
(BIGNUM *
ªt
,

321 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *
˘x
);

323 
BN_c⁄°time_sw≠
(
BN_ULONG
 
sw≠
, 
BIGNUM
 *
a
, BIGNUM *
b
, 
nw‹ds
);

326 
DEPRECATEDIN_0_9_8
(
BIGNUM
 *
BN_gíî©e_¥ime
(BIGNUM *
ªt
, 
bôs
, 
ß„
,

327 c⁄° 
BIGNUM
 *
add
,

328 c⁄° 
BIGNUM
 *
ªm
,

329 (*
ˇŒback
) (, ,

331 *
cb_¨g
))

332 
DEPRECATEDIN_0_9_8
(

333 
BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
, 
nchecks
,

334 (*
ˇŒback
) (, , *),

335 
BN_CTX
 *
˘x
, *
cb_¨g
))

336 
DEPRECATEDIN_0_9_8
(

337 
BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
, 
nchecks
,

338 (*
ˇŒback
) (, , *),

339 
BN_CTX
 *
˘x
, *
cb_¨g
,

340 
do_åül_divisi⁄
))

343 
BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
, 
bôs
, 
ß„
, c⁄° BIGNUM *
add
,

344 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

345 
BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
, 
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

346 
BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
, 
nchecks
, 
BN_CTX
 *
˘x
,

347 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

349 
BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

351 
BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

352 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
,

353 c⁄° 
BIGNUM
 *
Xp2
, c⁄° BIGNUM *
e
, 
BN_CTX
 *
˘x
,

354 
BN_GENCB
 *
cb
);

355 
BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
, BIGNUM *
Xp1
,

356 
BIGNUM
 *
Xp2
, c⁄° BIGNUM *
Xp
, c⁄° BIGNUM *
e
,

357 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

359 
BN_MONT_CTX
 *
BN_MONT_CTX_√w
();

360 
BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

361 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

362 
BN_to_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_MONT_CTX
 *
m⁄t
,

363 
BN_CTX
 *
˘x
);

364 
BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_MONT_CTX
 *
m⁄t
,

365 
BN_CTX
 *
˘x
);

366 
BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

367 
BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
, c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

368 
BN_MONT_CTX
 *
BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
, BN_MONT_CTX *
‰om
);

369 
BN_MONT_CTX
 *
BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
CRYPTO_RWLOCK
 *
lock
,

370 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

373 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

374 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

376 
BN_BLINDING
 *
BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

377 
BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

378 
BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

379 
BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

380 
BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

381 
BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

382 
BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
,

383 
BN_CTX
 *);

385 
BN_BLINDING_is_cuºít_thªad
(
BN_BLINDING
 *
b
);

386 
BN_BLINDING_£t_cuºít_thªad
(
BN_BLINDING
 *
b
);

387 
BN_BLINDING_lock
(
BN_BLINDING
 *
b
);

388 
BN_BLINDING_u∆ock
(
BN_BLINDING
 *
b
);

390 
BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

391 
BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

392 
BN_BLINDING
 *
BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

393 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

394 (*
bn_mod_exp
Ë(
BIGNUM
 *
r
,

395 c⁄° 
BIGNUM
 *
a
,

396 c⁄° 
BIGNUM
 *
p
,

397 c⁄° 
BIGNUM
 *
m
,

398 
BN_CTX
 *
˘x
,

399 
BN_MONT_CTX
 *
m_˘x
),

400 
BN_MONT_CTX
 *
m_˘x
);

402 
DEPRECATEDIN_0_9_8
(
BN_£t_∑øms
(
mul
, 
high
, 
low
, 
m⁄t
))

403 
DEPRECATEDIN_0_9_8
(
BN_gë_∑øms
(
which
))

406 
BN_RECP_CTX
 *
BN_RECP_CTX_√w
();

407 
BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

408 
BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
, c⁄° 
BIGNUM
 *
rdiv
, 
BN_CTX
 *
˘x
);

409 
BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

410 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

411 
BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

412 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

413 
BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

414 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

416 #i‚de‡
OPENSSL_NO_EC2M


428 
BN_GF2m_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

429 
	#BN_GF2m_sub
(
r
, 
a
, 
b
Ë
	`BN_GF2m_add
‘,á, b)

	)

433 
BN_GF2m_mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
);

435 
BN_GF2m_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

436 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

438 
BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

440 
BN_GF2m_mod_öv
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

442 
BN_GF2m_mod_div
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

443 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

445 
BN_GF2m_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

446 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

448 
BN_GF2m_mod_sqπ
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

449 
BN_CTX
 *
˘x
);

451 
BN_GF2m_mod_sﬁve_quad
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

452 
BN_CTX
 *
˘x
);

453 
	#BN_GF2m_cmp
(
a
, 
b
Ë
	`BN_ucmp
(◊), (b))

	)

461 
BN_GF2m_mod_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[]);

463 
BN_GF2m_mod_mul_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

464 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

466 
BN_GF2m_mod_sqr_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[],

467 
BN_CTX
 *
˘x
);

469 
BN_GF2m_mod_öv_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° 
p
[],

470 
BN_CTX
 *
˘x
);

472 
BN_GF2m_mod_div_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

473 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

475 
BN_GF2m_mod_exp_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

476 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

478 
BN_GF2m_mod_sqπ_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

479 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

481 
BN_GF2m_mod_sﬁve_quad_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

482 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

483 
BN_GF2m_pﬁy2¨r
(c⁄° 
BIGNUM
 *
a
, 
p
[], 
max
);

484 
BN_GF2m_¨r2pﬁy
(c⁄° 
p
[], 
BIGNUM
 *
a
);

491 
BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

492 
BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

493 
BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

494 
BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

495 
BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

497 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_192
();

498 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_224
();

499 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_256
();

500 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_384
();

501 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_521
();

503 (*
BN_ni°_mod_func
(c⁄° 
BIGNUM
 *
p
)Ë(BIGNUM *
r
, c⁄° BIGNUM *
a
,

504 c⁄° 
BIGNUM
 *
fõld
, 
BN_CTX
 *
˘x
);

506 
BN_gíî©e_dß_n⁄˚
(
BIGNUM
 *
out
, c⁄° BIGNUM *
ønge
,

507 c⁄° 
BIGNUM
 *
¥iv
, c⁄° *
mesßge
,

508 
size_t
 
mesßge_Àn
, 
BN_CTX
 *
˘x
);

511 
BIGNUM
 *
BN_gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

512 
BIGNUM
 *
BN_gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

515 
BIGNUM
 *
BN_gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

516 
BIGNUM
 *
BN_gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

517 
BIGNUM
 *
BN_gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

518 
BIGNUM
 *
BN_gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

519 
BIGNUM
 *
BN_gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

520 
BIGNUM
 *
BN_gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

522 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

523 
	#gë_rfc2409_¥ime_768
 
BN_gë_rfc2409_¥ime_768


	)

524 
	#gë_rfc2409_¥ime_1024
 
BN_gë_rfc2409_¥ime_1024


	)

525 
	#gë_rfc3526_¥ime_1536
 
BN_gë_rfc3526_¥ime_1536


	)

526 
	#gë_rfc3526_¥ime_2048
 
BN_gë_rfc3526_¥ime_2048


	)

527 
	#gë_rfc3526_¥ime_3072
 
BN_gë_rfc3526_¥ime_3072


	)

528 
	#gë_rfc3526_¥ime_4096
 
BN_gë_rfc3526_¥ime_4096


	)

529 
	#gë_rfc3526_¥ime_6144
 
BN_gë_rfc3526_¥ime_6144


	)

530 
	#gë_rfc3526_¥ime_8192
 
BN_gë_rfc3526_¥ime_8192


	)

533 
BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

536 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/buffer.h

10 #i‚de‡
HEADER_BUFFER_H


11 
	#HEADER_BUFFER_H


	)

13 
	~<›ís¶/os¶_typ.h
>

14 #i‚de‡
HEADER_CRYPTO_H


15 
	~<›ís¶/¸y±o.h
>

17 
	~<›ís¶/buf„ªº.h
>

20 #ifde‡ 
__˝lu•lus


24 
	~<°ddef.h
>

25 
	~<sys/ty≥s.h
>

31 
	#BUF_°rdup
(
s
Ë
	`OPENSSL_°rdup
(s)

	)

32 
	#BUF_°∫dup
(
s
, 
size
Ë
	`OPENSSL_°∫dup
(s, size)

	)

33 
	#BUF_memdup
(
d©a
, 
size
Ë
	`OPENSSL_memdup
(d©a, size)

	)

34 
	#BUF_°æ˝y
(
d°
, 
§c
, 
size
Ë
	`OPENSSL_°æ˝y
(d°, src, size)

	)

35 
	#BUF_°æˇt
(
d°
, 
§c
, 
size
Ë
	`OPENSSL_°æˇt
(d°, src, size)

	)

36 
	#BUF_°∫Àn
(
°r
, 
maxÀn
Ë
	`OPENSSL_°∫Àn
(°r, maxÀn)

	)

38 
	sbuf_mem_°
 {

39 
size_t
 
Àngth
;

40 *
d©a
;

41 
size_t
 
max
;

42 
Êags
;

45 
	#BUF_MEM_FLAG_SECURE
 0x01

	)

47 
BUF_MEM
 *
BUF_MEM_√w
();

48 
BUF_MEM
 *
BUF_MEM_√w_ex
(
Êags
);

49 
BUF_MEM_‰ì
(
BUF_MEM
 *
a
);

50 
size_t
 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, size_à
Àn
);

51 
size_t
 
BUF_MEM_grow_˛ón
(
BUF_MEM
 *
°r
, size_à
Àn
);

52 
BUF_ªvî£
(*
out
, c⁄° *
ö
, 
size_t
 
siz
);

55 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/conf.h

10 #i‚de‡ 
HEADER_CONF_H


11 
	#HEADER_CONF_H


	)

13 
	~<›ís¶/bio.h
>

14 
	~<›ís¶/lhash.h
>

15 
	~<›ís¶/ß„°ack.h
>

16 
	~<›ís¶/e_os2.h
>

17 
	~<›ís¶/os¶_typ.h
>

18 
	~<›ís¶/c⁄„º.h
>

20 #ifde‡ 
__˝lu•lus


25 *
£˘i⁄
;

26 *
«me
;

27 *
vÆue
;

28 } 
	tCONF_VALUE
;

30 
DEFINE_STACK_OF
(
CONF_VALUE
)

31 
DEFINE_LHASH_OF
(
CONF_VALUE
);

33 
c⁄f_°
;

34 
c⁄f_mëhod_°
;

35 
c⁄f_mëhod_°
 
	tCONF_METHOD
;

37 
	sc⁄f_mëhod_°
 {

38 c⁄° *
«me
;

39 
CONF
 *(*
¸óã
Ë(
CONF_METHOD
 *
mëh
);

40 (*
öô
Ë(
CONF
 *
c⁄f
);

41 (*
de°roy
Ë(
CONF
 *
c⁄f
);

42 (*
de°roy_d©a
Ë(
CONF
 *
c⁄f
);

43 (*
lﬂd_bio
Ë(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

44 (*
dump
Ë(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
bp
);

45 (*
is_numbî
Ë(c⁄° 
CONF
 *
c⁄f
, 
c
);

46 (*
to_öt
Ë(c⁄° 
CONF
 *
c⁄f
, 
c
);

47 (*
lﬂd
Ë(
CONF
 *
c⁄f
, c⁄° *
«me
, *
ñöe
);

52 
c⁄f_imoduÀ_°
 
	tCONF_IMODULE
;

53 
c⁄f_moduÀ_°
 
	tCONF_MODULE
;

55 
DEFINE_STACK_OF
(
CONF_MODULE
)

56 
DEFINE_STACK_OF
(
CONF_IMODULE
)

59 
	tc⁄f_öô_func
 (
	tCONF_IMODULE
 *
	tmd
, c⁄° 
	tCONF
 *
	t˙f
);

60 
	tc⁄f_föish_func
 (
	tCONF_IMODULE
 *
	tmd
);

62 
	#CONF_MFLAGS_IGNORE_ERRORS
 0x1

	)

63 
	#CONF_MFLAGS_IGNORE_RETURN_CODES
 0x2

	)

64 
	#CONF_MFLAGS_SILENT
 0x4

	)

65 
	#CONF_MFLAGS_NO_DSO
 0x8

	)

66 
	#CONF_MFLAGS_IGNORE_MISSING_FILE
 0x10

	)

67 
	#CONF_MFLAGS_DEFAULT_SECTION
 0x20

	)

69 
CONF_£t_deÁu…_mëhod
(
CONF_METHOD
 *
mëh
);

70 
CONF_£t_nc⁄f
(
CONF
 *
c⁄f
, 
LHASH_OF
(
CONF_VALUE
Ë*
hash
);

71 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd
(LHASH_OF(CONF_VALUEË*
c⁄f
, c⁄° *
fûe
,

72 *
ñöe
);

73 #i‚de‡
OPENSSL_NO_STDIO


74 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_Â
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
FILE
 *
Â
,

75 *
ñöe
);

77 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_bio
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
BIO
 *
bp
,

78 *
ñöe
);

79 
STACK_OF
(
CONF_VALUE
Ë*
CONF_gë_£˘i⁄
(
LHASH_OF
(CONF_VALUEË*
c⁄f
,

80 c⁄° *
£˘i⁄
);

81 *
CONF_gë_°rög
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, c⁄° *
group
,

82 c⁄° *
«me
);

83 
CONF_gë_numbî
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, c⁄° *
group
,

84 c⁄° *
«me
);

85 
CONF_‰ì
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
);

86 #i‚de‡
OPENSSL_NO_STDIO


87 
CONF_dump_Â
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
FILE
 *
out
);

89 
CONF_dump_bio
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
BIO
 *
out
);

91 
DEPRECATEDIN_1_1_0
(
OPENSSL_c⁄fig
(c⁄° *
c⁄fig_«me
))

93 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

94 
	#OPENSSL_no_c⁄fig
() \

95 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_NO_LOAD_CONFIG
, 
NULL
)

	)

103 
	sc⁄f_°
 {

104 
CONF_METHOD
 *
mëh
;

105 *
mëh_d©a
;

106 
LHASH_OF
(
CONF_VALUE
Ë*
d©a
;

109 
CONF
 *
NCONF_√w
(
CONF_METHOD
 *
mëh
);

110 
CONF_METHOD
 *
NCONF_deÁu…
();

111 
CONF_METHOD
 *
NCONF_WIN32
();

112 
NCONF_‰ì
(
CONF
 *
c⁄f
);

113 
NCONF_‰ì_d©a
(
CONF
 *
c⁄f
);

115 
NCONF_lﬂd
(
CONF
 *
c⁄f
, c⁄° *
fûe
, *
ñöe
);

116 #i‚de‡
OPENSSL_NO_STDIO


117 
NCONF_lﬂd_Â
(
CONF
 *
c⁄f
, 
FILE
 *
Â
, *
ñöe
);

119 
NCONF_lﬂd_bio
(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

120 
STACK_OF
(
CONF_VALUE
Ë*
NCONF_gë_£˘i⁄
(c⁄° 
CONF
 *
c⁄f
,

121 c⁄° *
£˘i⁄
);

122 *
NCONF_gë_°rög
(c⁄° 
CONF
 *
c⁄f
, c⁄° *
group
, c⁄° *
«me
);

123 
NCONF_gë_numbî_e
(c⁄° 
CONF
 *
c⁄f
, c⁄° *
group
, c⁄° *
«me
,

124 *
ªsu…
);

125 #i‚de‡
OPENSSL_NO_STDIO


126 
NCONF_dump_Â
(c⁄° 
CONF
 *
c⁄f
, 
FILE
 *
out
);

128 
NCONF_dump_bio
(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
out
);

130 
	#NCONF_gë_numbî
(
c
,
g
,
n
,
r
Ë
	`NCONF_gë_numbî_e
(c,g,n,r)

	)

134 
CONF_moduÀs_lﬂd
(c⁄° 
CONF
 *
˙f
, c⁄° *
≠≤ame
,

135 
Êags
);

136 
CONF_moduÀs_lﬂd_fûe
(c⁄° *
fûíame
, c⁄° *
≠≤ame
,

137 
Êags
);

138 
CONF_moduÀs_u∆ﬂd
(
Æl
);

139 
CONF_moduÀs_föish
();

140 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

141 
	#CONF_moduÀs_‰ì
(Ë0Ë

	)

143 
CONF_moduÀ_add
(c⁄° *
«me
, 
c⁄f_öô_func
 *
ifunc
,

144 
c⁄f_föish_func
 *
ffunc
);

146 c⁄° *
CONF_imoduÀ_gë_«me
(c⁄° 
CONF_IMODULE
 *
md
);

147 c⁄° *
CONF_imoduÀ_gë_vÆue
(c⁄° 
CONF_IMODULE
 *
md
);

148 *
CONF_imoduÀ_gë_u§_d©a
(c⁄° 
CONF_IMODULE
 *
md
);

149 
CONF_imoduÀ_£t_u§_d©a
(
CONF_IMODULE
 *
md
, *
u§_d©a
);

150 
CONF_MODULE
 *
CONF_imoduÀ_gë_moduÀ
(c⁄° 
CONF_IMODULE
 *
md
);

151 
CONF_imoduÀ_gë_Êags
(c⁄° 
CONF_IMODULE
 *
md
);

152 
CONF_imoduÀ_£t_Êags
(
CONF_IMODULE
 *
md
, 
Êags
);

153 *
CONF_moduÀ_gë_u§_d©a
(
CONF_MODULE
 *
pmod
);

154 
CONF_moduÀ_£t_u§_d©a
(
CONF_MODULE
 *
pmod
, *
u§_d©a
);

156 *
CONF_gë1_deÁu…_c⁄fig_fûe
();

158 
CONF_∑r£_li°
(c⁄° *
li°
, 
£p
, 
no•c
,

159 (*
li°_cb
Ë(c⁄° *
ñem
, 
Àn
, *
u§
),

160 *
¨g
);

162 
OPENSSL_lﬂd_buûtö_moduÀs
();

165 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/engine.h

11 #i‚de‡
HEADER_ENGINE_H


12 
	#HEADER_ENGINE_H


	)

14 
	~<›ís¶/›ís¶c⁄f.h
>

16 #i‚de‡
OPENSSL_NO_ENGINE


17 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

18 
	~<›ís¶/bn.h
>

19 
	~<›ís¶/rß.h
>

20 
	~<›ís¶/dß.h
>

21 
	~<›ís¶/dh.h
>

22 
	~<›ís¶/ec.h
>

23 
	~<›ís¶/ønd.h
>

24 
	~<›ís¶/ui.h
>

25 
	~<›ís¶/îr.h
>

27 
	~<›ís¶/os¶_typ.h
>

28 
	~<›ís¶/symhacks.h
>

29 
	~<›ís¶/x509.h
>

30 
	~<›ís¶/ígöìº.h
>

31 #ifde‡ 
__˝lu•lus


39 
	#ENGINE_METHOD_RSA
 ()0x0001

	)

40 
	#ENGINE_METHOD_DSA
 ()0x0002

	)

41 
	#ENGINE_METHOD_DH
 ()0x0004

	)

42 
	#ENGINE_METHOD_RAND
 ()0x0008

	)

43 
	#ENGINE_METHOD_CIPHERS
 ()0x0040

	)

44 
	#ENGINE_METHOD_DIGESTS
 ()0x0080

	)

45 
	#ENGINE_METHOD_PKEY_METHS
 ()0x0200

	)

46 
	#ENGINE_METHOD_PKEY_ASN1_METHS
 ()0x0400

	)

47 
	#ENGINE_METHOD_EC
 ()0x0800

	)

49 
	#ENGINE_METHOD_ALL
 ()0xFFFF

	)

50 
	#ENGINE_METHOD_NONE
 ()0x0000

	)

58 
	#ENGINE_TABLE_FLAG_NOINIT
 ()0x0001

	)

70 
	#ENGINE_FLAGS_MANUAL_CMD_CTRL
 ()0x0002

	)

82 
	#ENGINE_FLAGS_BY_ID_COPY
 ()0x0004

	)

90 
	#ENGINE_FLAGS_NO_REGISTER_ALL
 ()0x0008

	)

105 
	#ENGINE_CMD_FLAG_NUMERIC
 ()0x0001

	)

110 
	#ENGINE_CMD_FLAG_STRING
 ()0x0002

	)

115 
	#ENGINE_CMD_FLAG_NO_INPUT
 ()0x0004

	)

121 
	#ENGINE_CMD_FLAG_INTERNAL
 ()0x0008

	)

140 
	#ENGINE_CTRL_SET_LOGSTREAM
 1

	)

141 
	#ENGINE_CTRL_SET_PASSWORD_CALLBACK
 2

	)

142 
	#ENGINE_CTRL_HUP
 3

	)

145 
	#ENGINE_CTRL_SET_USER_INTERFACE
 4

	)

146 
	#ENGINE_CTRL_SET_CALLBACK_DATA
 5

	)

150 
	#ENGINE_CTRL_LOAD_CONFIGURATION
 6

	)

154 
	#ENGINE_CTRL_LOAD_SECTION
 7

	)

178 
	#ENGINE_CTRL_HAS_CTRL_FUNCTION
 10

	)

183 
	#ENGINE_CTRL_GET_FIRST_CMD_TYPE
 11

	)

188 
	#ENGINE_CTRL_GET_NEXT_CMD_TYPE
 12

	)

193 
	#ENGINE_CTRL_GET_CMD_FROM_NAME
 13

	)

202 
	#ENGINE_CTRL_GET_NAME_LEN_FROM_CMD
 14

	)

203 
	#ENGINE_CTRL_GET_NAME_FROM_CMD
 15

	)

205 
	#ENGINE_CTRL_GET_DESC_LEN_FROM_CMD
 16

	)

206 
	#ENGINE_CTRL_GET_DESC_FROM_CMD
 17

	)

212 
	#ENGINE_CTRL_GET_CMD_FLAGS
 18

	)

218 
	#ENGINE_CMD_BASE
 200

	)

229 
	#ENGINE_CTRL_CHIL_SET_FORKCHECK
 100

	)

235 
	#ENGINE_CTRL_CHIL_NO_LOCKING
 101

	)

251 
	sENGINE_CMD_DEFN_°
 {

252 
cmd_num
;

253 c⁄° *
cmd_«me
;

254 c⁄° *
cmd_desc
;

255 
cmd_Êags
;

256 } 
	tENGINE_CMD_DEFN
;

259 (*
ENGINE_GEN_FUNC_PTR
) ();

261 (*
ENGINE_GEN_INT_FUNC_PTR
Ë(
	tENGINE
 *);

263 (*
ENGINE_CTRL_FUNC_PTR
Ë(
	tENGINE
 *, , , *,

264 (*
	tf
) ());

266 
EVP_PKEY
 *(*
	tENGINE_LOAD_KEY_PTR
)(
	tENGINE
 *, const *,

267 
	tUI_METHOD
 *
	tui_mëhod
,

268 *
	tˇŒback_d©a
);

269 (*
ENGINE_SSL_CLIENT_CERT_PTR
Ë(
	tENGINE
 *, 
	tSSL
 *
	ts¶
,

270 
	tSTACK_OF
(
	tX509_NAME
Ë*
	tˇ_dn
,

271 
	tX509
 **
	tp˚π
, 
	tEVP_PKEY
 **
	tpkey
,

272 
	tSTACK_OF
(
	tX509
Ë**
	tpŸhî
,

273 
	tUI_METHOD
 *
	tui_mëhod
,

274 *
	tˇŒback_d©a
);

290 (*
ENGINE_CIPHERS_PTR
Ë(
	tENGINE
 *, c⁄° 
	tEVP_CIPHER
 **,

292 (*
ENGINE_DIGESTS_PTR
Ë(
	tENGINE
 *, c⁄° 
	tEVP_MD
 **, const **,

294 (*
ENGINE_PKEY_METHS_PTR
Ë(
	tENGINE
 *, 
	tEVP_PKEY_METHOD
 **,

296 (*
ENGINE_PKEY_ASN1_METHS_PTR
Ë(
	tENGINE
 *, 
	tEVP_PKEY_ASN1_METHOD
 **,

311 
ENGINE
 *
ENGINE_gë_fú°
();

312 
ENGINE
 *
ENGINE_gë_œ°
();

314 
ENGINE
 *
ENGINE_gë_√xt
(ENGINE *
e
);

315 
ENGINE
 *
ENGINE_gë_¥ev
(ENGINE *
e
);

317 
ENGINE_add
(
ENGINE
 *
e
);

319 
ENGINE_ªmove
(
ENGINE
 *
e
);

321 
ENGINE
 *
ENGINE_by_id
(c⁄° *
id
);

323 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

324 
	#ENGINE_lﬂd_›ís¶
() \

325 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ENGINE_OPENSSL
, 
NULL
)

	)

326 
	#ENGINE_lﬂd_dy«mic
() \

327 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ENGINE_DYNAMIC
, 
NULL
)

	)

328 #i‚de‡
OPENSSL_NO_STATIC_ENGINE


329 
	#ENGINE_lﬂd_∑dlock
() \

330 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ENGINE_PADLOCK
, 
NULL
)

	)

331 
	#ENGINE_lﬂd_ˇpi
() \

332 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ENGINE_CAPI
, 
NULL
)

	)

333 
	#ENGINE_lﬂd_aÁlg
() \

334 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ENGINE_AFALG
, 
NULL
)

	)

336 
	#ENGINE_lﬂd_¸y±odev
() \

337 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ENGINE_CRYPTODEV
, 
NULL
)

	)

338 
	#ENGINE_lﬂd_rdønd
() \

339 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ENGINE_RDRAND
, 
NULL
)

	)

341 
ENGINE_lﬂd_buûtö_ígöes
();

347 
ENGINE_gë_èbÀ_Êags
();

348 
ENGINE_£t_èbÀ_Êags
(
Êags
);

358 
ENGINE_ªgi°î_RSA
(
ENGINE
 *
e
);

359 
ENGINE_uƒegi°î_RSA
(
ENGINE
 *
e
);

360 
ENGINE_ªgi°î_Æl_RSA
();

362 
ENGINE_ªgi°î_DSA
(
ENGINE
 *
e
);

363 
ENGINE_uƒegi°î_DSA
(
ENGINE
 *
e
);

364 
ENGINE_ªgi°î_Æl_DSA
();

366 
ENGINE_ªgi°î_EC
(
ENGINE
 *
e
);

367 
ENGINE_uƒegi°î_EC
(
ENGINE
 *
e
);

368 
ENGINE_ªgi°î_Æl_EC
();

370 
ENGINE_ªgi°î_DH
(
ENGINE
 *
e
);

371 
ENGINE_uƒegi°î_DH
(
ENGINE
 *
e
);

372 
ENGINE_ªgi°î_Æl_DH
();

374 
ENGINE_ªgi°î_RAND
(
ENGINE
 *
e
);

375 
ENGINE_uƒegi°î_RAND
(
ENGINE
 *
e
);

376 
ENGINE_ªgi°î_Æl_RAND
();

378 
ENGINE_ªgi°î_cùhîs
(
ENGINE
 *
e
);

379 
ENGINE_uƒegi°î_cùhîs
(
ENGINE
 *
e
);

380 
ENGINE_ªgi°î_Æl_cùhîs
();

382 
ENGINE_ªgi°î_dige°s
(
ENGINE
 *
e
);

383 
ENGINE_uƒegi°î_dige°s
(
ENGINE
 *
e
);

384 
ENGINE_ªgi°î_Æl_dige°s
();

386 
ENGINE_ªgi°î_pkey_mëhs
(
ENGINE
 *
e
);

387 
ENGINE_uƒegi°î_pkey_mëhs
(
ENGINE
 *
e
);

388 
ENGINE_ªgi°î_Æl_pkey_mëhs
();

390 
ENGINE_ªgi°î_pkey_a¢1_mëhs
(
ENGINE
 *
e
);

391 
ENGINE_uƒegi°î_pkey_a¢1_mëhs
(
ENGINE
 *
e
);

392 
ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs
();

400 
ENGINE_ªgi°î_com∂ëe
(
ENGINE
 *
e
);

401 
ENGINE_ªgi°î_Æl_com∂ëe
();

413 
ENGINE_˘æ
(
ENGINE
 *
e
, 
cmd
, 
i
, *
p
, (*
f
) ());

421 
ENGINE_cmd_is_execuèbÀ
(
ENGINE
 *
e
, 
cmd
);

429 
ENGINE_˘æ_cmd
(
ENGINE
 *
e
, c⁄° *
cmd_«me
,

430 
i
, *
p
, (*
f
Ë(), 
cmd_›ti⁄Æ
);

454 
ENGINE_˘æ_cmd_°rög
(
ENGINE
 *
e
, c⁄° *
cmd_«me
, c⁄° *
¨g
,

455 
cmd_›ti⁄Æ
);

465 
ENGINE
 *
ENGINE_√w
();

466 
ENGINE_‰ì
(
ENGINE
 *
e
);

467 
ENGINE_up_ªf
(
ENGINE
 *
e
);

468 
ENGINE_£t_id
(
ENGINE
 *
e
, c⁄° *
id
);

469 
ENGINE_£t_«me
(
ENGINE
 *
e
, c⁄° *
«me
);

470 
ENGINE_£t_RSA
(
ENGINE
 *
e
, c⁄° 
RSA_METHOD
 *
rß_mëh
);

471 
ENGINE_£t_DSA
(
ENGINE
 *
e
, c⁄° 
DSA_METHOD
 *
dß_mëh
);

472 
ENGINE_£t_EC
(
ENGINE
 *
e
, c⁄° 
EC_KEY_METHOD
 *
ecdß_mëh
);

473 
ENGINE_£t_DH
(
ENGINE
 *
e
, c⁄° 
DH_METHOD
 *
dh_mëh
);

474 
ENGINE_£t_RAND
(
ENGINE
 *
e
, c⁄° 
RAND_METHOD
 *
ønd_mëh
);

475 
ENGINE_£t_de°roy_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
de°roy_f
);

476 
ENGINE_£t_öô_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
öô_f
);

477 
ENGINE_£t_föish_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
föish_f
);

478 
ENGINE_£t_˘æ_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_CTRL_FUNC_PTR
 
˘æ_f
);

479 
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
(
ENGINE
 *
e
,

480 
ENGINE_LOAD_KEY_PTR
 
lﬂd¥iv_f
);

481 
ENGINE_£t_lﬂd_pubkey_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_LOAD_KEY_PTR
 
lﬂdpub_f
);

482 
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
(
ENGINE
 *
e
,

483 
ENGINE_SSL_CLIENT_CERT_PTR


484 
lﬂds¶_f
);

485 
ENGINE_£t_cùhîs
(
ENGINE
 *
e
, 
ENGINE_CIPHERS_PTR
 
f
);

486 
ENGINE_£t_dige°s
(
ENGINE
 *
e
, 
ENGINE_DIGESTS_PTR
 
f
);

487 
ENGINE_£t_pkey_mëhs
(
ENGINE
 *
e
, 
ENGINE_PKEY_METHS_PTR
 
f
);

488 
ENGINE_£t_pkey_a¢1_mëhs
(
ENGINE
 *
e
, 
ENGINE_PKEY_ASN1_METHS_PTR
 
f
);

489 
ENGINE_£t_Êags
(
ENGINE
 *
e
, 
Êags
);

490 
ENGINE_£t_cmd_de‚s
(
ENGINE
 *
e
, c⁄° 
ENGINE_CMD_DEFN
 *
de‚s
);

492 
	#ENGINE_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

493 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_ENGINE
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

494 
ENGINE_£t_ex_d©a
(
ENGINE
 *
e
, 
idx
, *
¨g
);

495 *
ENGINE_gë_ex_d©a
(c⁄° 
ENGINE
 *
e
, 
idx
);

497 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

502 
	#ENGINE_˛ónup
(Ë0Ë

	)

511 c⁄° *
ENGINE_gë_id
(c⁄° 
ENGINE
 *
e
);

512 c⁄° *
ENGINE_gë_«me
(c⁄° 
ENGINE
 *
e
);

513 c⁄° 
RSA_METHOD
 *
ENGINE_gë_RSA
(c⁄° 
ENGINE
 *
e
);

514 c⁄° 
DSA_METHOD
 *
ENGINE_gë_DSA
(c⁄° 
ENGINE
 *
e
);

515 c⁄° 
EC_KEY_METHOD
 *
ENGINE_gë_EC
(c⁄° 
ENGINE
 *
e
);

516 c⁄° 
DH_METHOD
 *
ENGINE_gë_DH
(c⁄° 
ENGINE
 *
e
);

517 c⁄° 
RAND_METHOD
 *
ENGINE_gë_RAND
(c⁄° 
ENGINE
 *
e
);

518 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_de°roy_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

519 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_öô_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

520 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_föish_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

521 
ENGINE_CTRL_FUNC_PTR
 
ENGINE_gë_˘æ_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

522 
ENGINE_LOAD_KEY_PTR
 
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

523 
ENGINE_LOAD_KEY_PTR
 
ENGINE_gë_lﬂd_pubkey_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

524 
ENGINE_SSL_CLIENT_CERT_PTR
 
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
(c⁄° 
ENGINE


525 *
e
);

526 
ENGINE_CIPHERS_PTR
 
ENGINE_gë_cùhîs
(c⁄° 
ENGINE
 *
e
);

527 
ENGINE_DIGESTS_PTR
 
ENGINE_gë_dige°s
(c⁄° 
ENGINE
 *
e
);

528 
ENGINE_PKEY_METHS_PTR
 
ENGINE_gë_pkey_mëhs
(c⁄° 
ENGINE
 *
e
);

529 
ENGINE_PKEY_ASN1_METHS_PTR
 
ENGINE_gë_pkey_a¢1_mëhs
(c⁄° 
ENGINE
 *
e
);

530 c⁄° 
EVP_CIPHER
 *
ENGINE_gë_cùhî
(
ENGINE
 *
e
, 
nid
);

531 c⁄° 
EVP_MD
 *
ENGINE_gë_dige°
(
ENGINE
 *
e
, 
nid
);

532 c⁄° 
EVP_PKEY_METHOD
 *
ENGINE_gë_pkey_mëh
(
ENGINE
 *
e
, 
nid
);

533 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
ENGINE_gë_pkey_a¢1_mëh
(
ENGINE
 *
e
, 
nid
);

534 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
ENGINE_gë_pkey_a¢1_mëh_°r
(
ENGINE
 *
e
,

535 c⁄° *
°r
,

536 
Àn
);

537 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
ENGINE_pkey_a¢1_föd_°r
(
ENGINE
 **
≥
,

538 c⁄° *
°r
,

539 
Àn
);

540 c⁄° 
ENGINE_CMD_DEFN
 *
ENGINE_gë_cmd_de‚s
(c⁄° 
ENGINE
 *
e
);

541 
ENGINE_gë_Êags
(c⁄° 
ENGINE
 *
e
);

561 
ENGINE_öô
(
ENGINE
 *
e
);

567 
ENGINE_föish
(
ENGINE
 *
e
);

574 
EVP_PKEY
 *
ENGINE_lﬂd_¥iv©e_key
(
ENGINE
 *
e
, c⁄° *
key_id
,

575 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

576 
EVP_PKEY
 *
ENGINE_lﬂd_public_key
(
ENGINE
 *
e
, c⁄° *
key_id
,

577 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

578 
ENGINE_lﬂd_s¶_˛õ¡_˚π
(
ENGINE
 *
e
, 
SSL
 *
s
,

579 
STACK_OF
(
X509_NAME
Ë*
ˇ_dn
, 
X509
 **
p˚π
,

580 
EVP_PKEY
 **
µkey
, 
STACK_OF
(
X509
Ë**
pŸhî
,

581 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

589 
ENGINE
 *
ENGINE_gë_deÁu…_RSA
();

591 
ENGINE
 *
ENGINE_gë_deÁu…_DSA
();

592 
ENGINE
 *
ENGINE_gë_deÁu…_EC
();

593 
ENGINE
 *
ENGINE_gë_deÁu…_DH
();

594 
ENGINE
 *
ENGINE_gë_deÁu…_RAND
();

599 
ENGINE
 *
ENGINE_gë_cùhî_ígöe
(
nid
);

600 
ENGINE
 *
ENGINE_gë_dige°_ígöe
(
nid
);

601 
ENGINE
 *
ENGINE_gë_pkey_mëh_ígöe
(
nid
);

602 
ENGINE
 *
ENGINE_gë_pkey_a¢1_mëh_ígöe
(
nid
);

610 
ENGINE_£t_deÁu…_RSA
(
ENGINE
 *
e
);

611 
ENGINE_£t_deÁu…_°rög
(
ENGINE
 *
e
, c⁄° *
def_li°
);

613 
ENGINE_£t_deÁu…_DSA
(
ENGINE
 *
e
);

614 
ENGINE_£t_deÁu…_EC
(
ENGINE
 *
e
);

615 
ENGINE_£t_deÁu…_DH
(
ENGINE
 *
e
);

616 
ENGINE_£t_deÁu…_RAND
(
ENGINE
 *
e
);

617 
ENGINE_£t_deÁu…_cùhîs
(
ENGINE
 *
e
);

618 
ENGINE_£t_deÁu…_dige°s
(
ENGINE
 *
e
);

619 
ENGINE_£t_deÁu…_pkey_mëhs
(
ENGINE
 *
e
);

620 
ENGINE_£t_deÁu…_pkey_a¢1_mëhs
(
ENGINE
 *
e
);

629 
ENGINE_£t_deÁu…
(
ENGINE
 *
e
, 
Êags
);

631 
ENGINE_add_c⁄f_moduÀ
();

641 
	#OSSL_DYNAMIC_VERSION
 ()0x00030000

	)

646 
	#OSSL_DYNAMIC_OLDEST
 ()0x00030000

	)

659 *(*
	tdyn_MEM_mÆloc_‚
Ë(
	tsize_t
, const *, );

660 *(*
	tdyn_MEM_ªÆloc_‚
Ë(*, 
	tsize_t
, const *, );

661 (*
dyn_MEM_‰ì_‚
) (*, const *, );

662 
	s°_dy«mic_MEM_‚s
 {

663 
dyn_MEM_mÆloc_‚
 
mÆloc_‚
;

664 
dyn_MEM_ªÆloc_‚
 
ªÆloc_‚
;

665 
dyn_MEM_‰ì_‚
 
‰ì_‚
;

666 } 
	tdy«mic_MEM_‚s
;

672 
	s°_dy«mic_‚s
 {

673 *
°©ic_°©e
;

674 
dy«mic_MEM_‚s
 
mem_‚s
;

675 } 
	tdy«mic_‚s
;

689 (*
	tdy«mic_v_check_‚
Ë(
	tos¶_vîsi⁄
);

690 
	#IMPLEMENT_DYNAMIC_CHECK_FN
() \

691 
OPENSSL_EXPORT
 
	`v_check
(
v
); \

692 
OPENSSL_EXPORT
 
	`v_check
(
v
) { \

693 i‡(
v
 >
OSSL_DYNAMIC_OLDEST
Ë 
OSSL_DYNAMIC_VERSION
; \

694  0; }

	)

714 (*
dy«mic_böd_ígöe
Ë(
	tENGINE
 *
	te
, c⁄° *
	tid
,

715 c⁄° 
	tdy«mic_‚s
 *
	t‚s
);

716 
	#IMPLEMENT_DYNAMIC_BIND_FN
(
‚
) \

717 
OPENSSL_EXPORT
 \

718 
	`böd_ígöe
(
ENGINE
 *
e
, c⁄° *
id
, c⁄° 
dy«mic_‚s
 *
‚s
); \

719 
OPENSSL_EXPORT
 \

720 
	`böd_ígöe
(
ENGINE
 *
e
, c⁄° *
id
, c⁄° 
dy«mic_‚s
 *
‚s
) { \

721 i‡(
	`ENGINE_gë_°©ic_°©e
(Ë=
‚s
->
°©ic_°©e
Ë
skù_cbs
; \

722 
	`CRYPTO_£t_mem_fun˘i⁄s
(
‚s
->
mem_‚s
.
mÆloc_‚
, \

723 
‚s
->
mem_‚s
.
ªÆloc_‚
, \

724 
‚s
->
mem_‚s
.
‰ì_‚
); \

725 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_NO_ATEXIT
, 
NULL
); \

726 
skù_cbs
: \

727 i‡(!
	`‚
(
e
, 
id
))  0; \

728  1; }

	)

741 *
ENGINE_gë_°©ic_°©e
();

743 #i‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__FªeBSD__
Ë|| deföed(
__Døg⁄Fly__
)

744 
DEPRECATEDIN_1_1_0
(
ENGINE_£tup_bsd_¸y±odev
())

748 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/err.h

10 #i‚de‡
HEADER_ERR_H


11 
	#HEADER_ERR_H


	)

13 
	~<›ís¶/e_os2.h
>

15 #i‚de‡
OPENSSL_NO_STDIO


16 
	~<°dio.h
>

17 
	~<°dlib.h
>

20 
	~<›ís¶/os¶_typ.h
>

21 
	~<›ís¶/bio.h
>

22 
	~<›ís¶/lhash.h
>

24 #ifde‡ 
__˝lu•lus


28 #i‚de‡
OPENSSL_NO_ERR


29 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,d,e)

	)

31 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,
NULL
,0)

	)

34 
	~<î∫o.h
>

36 
	#ERR_TXT_MALLOCED
 0x01

	)

37 
	#ERR_TXT_STRING
 0x02

	)

39 
	#ERR_FLAG_MARK
 0x01

	)

40 
	#ERR_FLAG_CLEAR
 0x02

	)

42 
	#ERR_NUM_ERRORS
 16

	)

43 
	sîr_°©e_°
 {

44 
îr_Êags
[
ERR_NUM_ERRORS
];

45 
îr_buf„r
[
ERR_NUM_ERRORS
];

46 *
îr_d©a
[
ERR_NUM_ERRORS
];

47 
îr_d©a_Êags
[
ERR_NUM_ERRORS
];

48 c⁄° *
îr_fûe
[
ERR_NUM_ERRORS
];

49 
îr_löe
[
ERR_NUM_ERRORS
];

50 
t›
, 
bŸtom
;

51 } 
	tERR_STATE
;

54 
	#ERR_LIB_NONE
 1

	)

55 
	#ERR_LIB_SYS
 2

	)

56 
	#ERR_LIB_BN
 3

	)

57 
	#ERR_LIB_RSA
 4

	)

58 
	#ERR_LIB_DH
 5

	)

59 
	#ERR_LIB_EVP
 6

	)

60 
	#ERR_LIB_BUF
 7

	)

61 
	#ERR_LIB_OBJ
 8

	)

62 
	#ERR_LIB_PEM
 9

	)

63 
	#ERR_LIB_DSA
 10

	)

64 
	#ERR_LIB_X509
 11

	)

66 
	#ERR_LIB_ASN1
 13

	)

67 
	#ERR_LIB_CONF
 14

	)

68 
	#ERR_LIB_CRYPTO
 15

	)

69 
	#ERR_LIB_EC
 16

	)

70 
	#ERR_LIB_SSL
 20

	)

76 
	#ERR_LIB_BIO
 32

	)

77 
	#ERR_LIB_PKCS7
 33

	)

78 
	#ERR_LIB_X509V3
 34

	)

79 
	#ERR_LIB_PKCS12
 35

	)

80 
	#ERR_LIB_RAND
 36

	)

81 
	#ERR_LIB_DSO
 37

	)

82 
	#ERR_LIB_ENGINE
 38

	)

83 
	#ERR_LIB_OCSP
 39

	)

84 
	#ERR_LIB_UI
 40

	)

85 
	#ERR_LIB_COMP
 41

	)

86 
	#ERR_LIB_ECDSA
 42

	)

87 
	#ERR_LIB_ECDH
 43

	)

88 
	#ERR_LIB_OSSL_STORE
 44

	)

89 
	#ERR_LIB_FIPS
 45

	)

90 
	#ERR_LIB_CMS
 46

	)

91 
	#ERR_LIB_TS
 47

	)

92 
	#ERR_LIB_HMAC
 48

	)

94 
	#ERR_LIB_CT
 50

	)

95 
	#ERR_LIB_ASYNC
 51

	)

96 
	#ERR_LIB_KDF
 52

	)

97 
	#ERR_LIB_SM2
 53

	)

99 
	#ERR_LIB_USER
 128

	)

101 
	#SYSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SYS
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

102 
	#BNîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BN
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

103 
	#RSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RSA
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

104 
	#DHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DH
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

105 
	#EVPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EVP
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

106 
	#BUFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BUF
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

107 
	#OBJîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OBJ
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

108 
	#PEMîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PEM
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

109 
	#DSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSA
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

110 
	#X509îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

111 
	#ASN1îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASN1
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

112 
	#CONFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CONF
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

113 
	#CRYPTOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CRYPTO
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

114 
	#ECîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EC
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

115 
	#SSLîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SSL
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

116 
	#BIOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BIO
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

117 
	#PKCS7îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS7
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

118 
	#X509V3îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509V3
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

119 
	#PKCS12îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS12
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

120 
	#RANDîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RAND
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

121 
	#DSOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSO
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

122 
	#ENGINEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ENGINE
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

123 
	#OCSPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OCSP
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

124 
	#UIîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_UI
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

125 
	#COMPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_COMP
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

126 
	#ECDSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDSA
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

127 
	#ECDHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDH
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

128 
	#OSSL_STOREîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OSSL_STORE
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

129 
	#FIPSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_FIPS
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

130 
	#CMSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CMS
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

131 
	#TSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_TS
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

132 
	#HMACîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_HMAC
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

133 
	#CTîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CT
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

134 
	#ASYNCîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASYNC
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

135 
	#KDFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_KDF
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

136 
	#SM2îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SM2
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

138 
	#ERR_PACK
(
l
,
f
,
r
) ( \

139 ((()(
l
) & 0x0FF) << 24L) | \

140 ((()(
f
) & 0xFFF) << 12L) | \

141 ((()(
r
Ë& 0xFFFËË)

	)

142 
	#ERR_GET_LIB
(
l
Ë()((÷Ë>> 24LË& 0x0FFL)

	)

143 
	#ERR_GET_FUNC
(
l
Ë()((÷Ë>> 12LË& 0xFFFL)

	)

144 
	#ERR_GET_REASON
(
l
Ë()–÷Ë& 0xFFFL)

	)

145 
	#ERR_FATAL_ERROR
(
l
Ë()–÷Ë& 
ERR_R_FATAL
)

	)

148 
	#SYS_F_FOPEN
 1

	)

149 
	#SYS_F_CONNECT
 2

	)

150 
	#SYS_F_GETSERVBYNAME
 3

	)

151 
	#SYS_F_SOCKET
 4

	)

152 
	#SYS_F_IOCTLSOCKET
 5

	)

153 
	#SYS_F_BIND
 6

	)

154 
	#SYS_F_LISTEN
 7

	)

155 
	#SYS_F_ACCEPT
 8

	)

156 
	#SYS_F_WSASTARTUP
 9

	)

157 
	#SYS_F_OPENDIR
 10

	)

158 
	#SYS_F_FREAD
 11

	)

159 
	#SYS_F_GETADDRINFO
 12

	)

160 
	#SYS_F_GETNAMEINFO
 13

	)

161 
	#SYS_F_SETSOCKOPT
 14

	)

162 
	#SYS_F_GETSOCKOPT
 15

	)

163 
	#SYS_F_GETSOCKNAME
 16

	)

164 
	#SYS_F_GETHOSTBYNAME
 17

	)

165 
	#SYS_F_FFLUSH
 18

	)

166 
	#SYS_F_OPEN
 19

	)

167 
	#SYS_F_CLOSE
 20

	)

168 
	#SYS_F_IOCTL
 21

	)

169 
	#SYS_F_STAT
 22

	)

170 
	#SYS_F_FCNTL
 23

	)

171 
	#SYS_F_FSTAT
 24

	)

174 
	#ERR_R_SYS_LIB
 
ERR_LIB_SYS


	)

175 
	#ERR_R_BN_LIB
 
ERR_LIB_BN


	)

176 
	#ERR_R_RSA_LIB
 
ERR_LIB_RSA


	)

177 
	#ERR_R_DH_LIB
 
ERR_LIB_DH


	)

178 
	#ERR_R_EVP_LIB
 
ERR_LIB_EVP


	)

179 
	#ERR_R_BUF_LIB
 
ERR_LIB_BUF


	)

180 
	#ERR_R_OBJ_LIB
 
ERR_LIB_OBJ


	)

181 
	#ERR_R_PEM_LIB
 
ERR_LIB_PEM


	)

182 
	#ERR_R_DSA_LIB
 
ERR_LIB_DSA


	)

183 
	#ERR_R_X509_LIB
 
ERR_LIB_X509


	)

184 
	#ERR_R_ASN1_LIB
 
ERR_LIB_ASN1


	)

185 
	#ERR_R_EC_LIB
 
ERR_LIB_EC


	)

186 
	#ERR_R_BIO_LIB
 
ERR_LIB_BIO


	)

187 
	#ERR_R_PKCS7_LIB
 
ERR_LIB_PKCS7


	)

188 
	#ERR_R_X509V3_LIB
 
ERR_LIB_X509V3


	)

189 
	#ERR_R_ENGINE_LIB
 
ERR_LIB_ENGINE


	)

190 
	#ERR_R_UI_LIB
 
ERR_LIB_UI


	)

191 
	#ERR_R_ECDSA_LIB
 
ERR_LIB_ECDSA


	)

192 
	#ERR_R_OSSL_STORE_LIB
 
ERR_LIB_OSSL_STORE


	)

194 
	#ERR_R_NESTED_ASN1_ERROR
 58

	)

195 
	#ERR_R_MISSING_ASN1_EOS
 63

	)

198 
	#ERR_R_FATAL
 64

	)

199 
	#ERR_R_MALLOC_FAILURE
 (1|
ERR_R_FATAL
)

	)

200 
	#ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED
 (2|
ERR_R_FATAL
)

	)

201 
	#ERR_R_PASSED_NULL_PARAMETER
 (3|
ERR_R_FATAL
)

	)

202 
	#ERR_R_INTERNAL_ERROR
 (4|
ERR_R_FATAL
)

	)

203 
	#ERR_R_DISABLED
 (5|
ERR_R_FATAL
)

	)

204 
	#ERR_R_INIT_FAIL
 (6|
ERR_R_FATAL
)

	)

205 
	#ERR_R_PASSED_INVALID_ARGUMENT
 (7)

	)

206 
	#ERR_R_OPERATION_FAIL
 (8|
ERR_R_FATAL
)

	)

213 
	sERR_°rög_d©a_°
 {

214 
îr‹
;

215 c⁄° *
°rög
;

216 } 
	tERR_STRING_DATA
;

218 
DEFINE_LHASH_OF
(
ERR_STRING_DATA
);

220 
ERR_put_îr‹
(
lib
, 
func
, 
ªas⁄
, c⁄° *
fûe
, 
löe
);

221 
ERR_£t_îr‹_d©a
(*
d©a
, 
Êags
);

223 
ERR_gë_îr‹
();

224 
ERR_gë_îr‹_löe
(c⁄° **
fûe
, *
löe
);

225 
ERR_gë_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

226 c⁄° **
d©a
, *
Êags
);

227 
ERR_≥ek_îr‹
();

228 
ERR_≥ek_îr‹_löe
(c⁄° **
fûe
, *
löe
);

229 
ERR_≥ek_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

230 c⁄° **
d©a
, *
Êags
);

231 
ERR_≥ek_œ°_îr‹
();

232 
ERR_≥ek_œ°_îr‹_löe
(c⁄° **
fûe
, *
löe
);

233 
ERR_≥ek_œ°_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

234 c⁄° **
d©a
, *
Êags
);

235 
ERR_˛ór_îr‹
();

236 *
ERR_îr‹_°rög
(
e
, *
buf
);

237 
ERR_îr‹_°rög_n
(
e
, *
buf
, 
size_t
 
Àn
);

238 c⁄° *
ERR_lib_îr‹_°rög
(
e
);

239 c⁄° *
ERR_func_îr‹_°rög
(
e
);

240 c⁄° *
ERR_ªas⁄_îr‹_°rög
(
e
);

241 
ERR_¥öt_îr‹s_cb
((*
cb
Ë(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

242 *
u
);

243 #i‚de‡
OPENSSL_NO_STDIO


244 
ERR_¥öt_îr‹s_Â
(
FILE
 *
Â
);

246 
ERR_¥öt_îr‹s
(
BIO
 *
bp
);

247 
ERR_add_îr‹_d©a
(
num
, ...);

248 
ERR_add_îr‹_vd©a
(
num
, 
va_li°
 
¨gs
);

249 
ERR_lﬂd_°rögs
(
lib
, 
ERR_STRING_DATA
 *
°r
);

250 
ERR_lﬂd_°rögs_c⁄°
(c⁄° 
ERR_STRING_DATA
 *
°r
);

251 
ERR_u∆ﬂd_°rögs
(
lib
, 
ERR_STRING_DATA
 *
°r
);

252 
ERR_lﬂd_ERR_°rögs
();

254 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

255 
	#ERR_lﬂd_¸y±o_°rögs
() \

256 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_LOAD_CRYPTO_STRINGS
, 
NULL
)

	)

257 
	#ERR_‰ì_°rögs
(Ë0Ë

	)

260 
DEPRECATEDIN_1_1_0
(
ERR_ªmove_thªad_°©e
(*))

261 
DEPRECATEDIN_1_0_0
(
ERR_ªmove_°©e
(
pid
))

262 
ERR_STATE
 *
ERR_gë_°©e
();

264 
ERR_gë_√xt_îr‹_libøry
();

266 
ERR_£t_m¨k
();

267 
ERR_p›_to_m¨k
();

268 
ERR_˛ór_œ°_m¨k
();

270 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/evp.h

10 #i‚de‡
HEADER_ENVELOPE_H


11 
	#HEADER_ENVELOPE_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

14 
	~<›ís¶/os¶_typ.h
>

15 
	~<›ís¶/symhacks.h
>

16 
	~<›ís¶/bio.h
>

17 
	~<›ís¶/ev≥º.h
>

19 
	#EVP_MAX_MD_SIZE
 64

	)

20 
	#EVP_MAX_KEY_LENGTH
 64

	)

21 
	#EVP_MAX_IV_LENGTH
 16

	)

22 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

24 
	#PKCS5_SALT_LEN
 8

	)

26 
	#PKCS5_DEFAULT_ITER
 2048

	)

28 
	~<›ís¶/obje˘s.h
>

30 
	#EVP_PK_RSA
 0x0001

	)

31 
	#EVP_PK_DSA
 0x0002

	)

32 
	#EVP_PK_DH
 0x0004

	)

33 
	#EVP_PK_EC
 0x0008

	)

34 
	#EVP_PKT_SIGN
 0x0010

	)

35 
	#EVP_PKT_ENC
 0x0020

	)

36 
	#EVP_PKT_EXCH
 0x0040

	)

37 
	#EVP_PKS_RSA
 0x0100

	)

38 
	#EVP_PKS_DSA
 0x0200

	)

39 
	#EVP_PKS_EC
 0x0400

	)

41 
	#EVP_PKEY_NONE
 
NID_undef


	)

42 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

43 
	#EVP_PKEY_RSA2
 
NID_rß


	)

44 
	#EVP_PKEY_RSA_PSS
 
NID_rßsßPss


	)

45 
	#EVP_PKEY_DSA
 
NID_dß


	)

46 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

47 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

48 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

49 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

50 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

51 
	#EVP_PKEY_DHX
 
NID_dhpubli˙umbî


	)

52 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

53 
	#EVP_PKEY_SM2
 
NID_sm2


	)

54 
	#EVP_PKEY_HMAC
 
NID_hmac


	)

55 
	#EVP_PKEY_CMAC
 
NID_cmac


	)

56 
	#EVP_PKEY_SCRYPT
 
NID_id_s¸y±


	)

57 
	#EVP_PKEY_TLS1_PRF
 
NID_és1_¥f


	)

58 
	#EVP_PKEY_HKDF
 
NID_hkdf


	)

59 
	#EVP_PKEY_POLY1305
 
NID_pﬁy1305


	)

60 
	#EVP_PKEY_SIPHASH
 
NID_sùhash


	)

61 
	#EVP_PKEY_X25519
 
NID_X25519


	)

62 
	#EVP_PKEY_ED25519
 
NID_ED25519


	)

63 
	#EVP_PKEY_X448
 
NID_X448


	)

64 
	#EVP_PKEY_ED448
 
NID_ED448


	)

66 #ifde‡ 
__˝lu•lus


70 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

71 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

72 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

73 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

75 #i‚de‡
EVP_MD


76 
EVP_MD
 *
EVP_MD_mëh_√w
(
md_ty≥
, 
pkey_ty≥
);

77 
EVP_MD
 *
EVP_MD_mëh_dup
(c⁄° EVP_MD *
md
);

78 
EVP_MD_mëh_‰ì
(
EVP_MD
 *
md
);

80 
EVP_MD_mëh_£t_öput_blocksize
(
EVP_MD
 *
md
, 
blocksize
);

81 
EVP_MD_mëh_£t_ªsu…_size
(
EVP_MD
 *
md
, 
ªsu…size
);

82 
EVP_MD_mëh_£t_≠p_d©asize
(
EVP_MD
 *
md
, 
d©asize
);

83 
EVP_MD_mëh_£t_Êags
(
EVP_MD
 *
md
, 
Êags
);

84 
EVP_MD_mëh_£t_öô
(
EVP_MD
 *
md
, (*
öô
)(
EVP_MD_CTX
 *
˘x
));

85 
EVP_MD_mëh_£t_upd©e
(
EVP_MD
 *
md
, (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,

86 c⁄° *
d©a
,

87 
size_t
 
cou¡
));

88 
EVP_MD_mëh_£t_föÆ
(
EVP_MD
 *
md
, (*
föÆ
)(
EVP_MD_CTX
 *
˘x
,

89 *
md
));

90 
EVP_MD_mëh_£t_c›y
(
EVP_MD
 *
md
, (*
c›y
)(
EVP_MD_CTX
 *
to
,

91 c⁄° 
EVP_MD_CTX
 *
‰om
));

92 
EVP_MD_mëh_£t_˛ónup
(
EVP_MD
 *
md
, (*
˛ónup
)(
EVP_MD_CTX
 *
˘x
));

93 
EVP_MD_mëh_£t_˘æ
(
EVP_MD
 *
md
, (*
˘æ
)(
EVP_MD_CTX
 *
˘x
, 
cmd
,

94 
p1
, *
p2
));

96 
EVP_MD_mëh_gë_öput_blocksize
(c⁄° 
EVP_MD
 *
md
);

97 
EVP_MD_mëh_gë_ªsu…_size
(c⁄° 
EVP_MD
 *
md
);

98 
EVP_MD_mëh_gë_≠p_d©asize
(c⁄° 
EVP_MD
 *
md
);

99 
EVP_MD_mëh_gë_Êags
(c⁄° 
EVP_MD
 *
md
);

100 (*
EVP_MD_mëh_gë_öô
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
);

101 (*
EVP_MD_mëh_gë_upd©e
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
,

102 c⁄° *
d©a
,

103 
size_t
 
cou¡
);

104 (*
EVP_MD_mëh_gë_föÆ
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
,

105 *
md
);

106 (*
EVP_MD_mëh_gë_c›y
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
to
,

107 c⁄° 
EVP_MD_CTX
 *
‰om
);

108 (*
EVP_MD_mëh_gë_˛ónup
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
);

109 (*
EVP_MD_mëh_gë_˘æ
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
, 
cmd
,

110 
p1
, *
p2
);

113 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

116 
	#EVP_MD_FLAG_XOF
 0x0002

	)

120 
	#EVP_MD_FLAG_DIGALGID_MASK
 0x0018

	)

124 
	#EVP_MD_FLAG_DIGALGID_NULL
 0x0000

	)

128 
	#EVP_MD_FLAG_DIGALGID_ABSENT
 0x0008

	)

132 
	#EVP_MD_FLAG_DIGALGID_CUSTOM
 0x0018

	)

135 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

139 
	#EVP_MD_CTRL_DIGALGID
 0x1

	)

140 
	#EVP_MD_CTRL_MICALG
 0x2

	)

141 
	#EVP_MD_CTRL_XOF_LEN
 0x3

	)

145 
	#EVP_MD_CTRL_ALG_CTRL
 0x1000

	)

151 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

153 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

155 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

162 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

170 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

171 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

172 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

173 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

175 
	#EVP_MD_CTX_FLAG_NO_INIT
 0x0100

	)

182 
	#EVP_MD_CTX_FLAG_FINALISE
 0x0200

	)

185 
EVP_CIPHER
 *
EVP_CIPHER_mëh_√w
(
cùhî_ty≥
, 
block_size
, 
key_Àn
);

186 
EVP_CIPHER
 *
EVP_CIPHER_mëh_dup
(c⁄° EVP_CIPHER *
cùhî
);

187 
EVP_CIPHER_mëh_‰ì
(
EVP_CIPHER
 *
cùhî
);

189 
EVP_CIPHER_mëh_£t_iv_Àngth
(
EVP_CIPHER
 *
cùhî
, 
iv_Àn
);

190 
EVP_CIPHER_mëh_£t_Êags
(
EVP_CIPHER
 *
cùhî
, 
Êags
);

191 
EVP_CIPHER_mëh_£t_im∂_˘x_size
(
EVP_CIPHER
 *
cùhî
, 
˘x_size
);

192 
EVP_CIPHER_mëh_£t_öô
(
EVP_CIPHER
 *
cùhî
,

193 (*
öô
Ë(
EVP_CIPHER_CTX
 *
˘x
,

194 c⁄° *
key
,

195 c⁄° *
iv
,

196 
íc
));

197 
EVP_CIPHER_mëh_£t_do_cùhî
(
EVP_CIPHER
 *
cùhî
,

198 (*
do_cùhî
Ë(
EVP_CIPHER_CTX
 *
˘x
,

199 *
out
,

200 c⁄° *
ö
,

201 
size_t
 
öl
));

202 
EVP_CIPHER_mëh_£t_˛ónup
(
EVP_CIPHER
 *
cùhî
,

203 (*
˛ónup
Ë(
EVP_CIPHER_CTX
 *));

204 
EVP_CIPHER_mëh_£t_£t_a¢1_∑øms
(
EVP_CIPHER
 *
cùhî
,

205 (*
£t_a¢1_∑ømëîs
Ë(
EVP_CIPHER_CTX
 *,

206 
ASN1_TYPE
 *));

207 
EVP_CIPHER_mëh_£t_gë_a¢1_∑øms
(
EVP_CIPHER
 *
cùhî
,

208 (*
gë_a¢1_∑ømëîs
Ë(
EVP_CIPHER_CTX
 *,

209 
ASN1_TYPE
 *));

210 
EVP_CIPHER_mëh_£t_˘æ
(
EVP_CIPHER
 *
cùhî
,

211 (*
˘æ
Ë(
EVP_CIPHER_CTX
 *, 
ty≥
,

212 
¨g
, *
±r
));

214 (*
EVP_CIPHER_mëh_gë_öô
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *
˘x
,

215 c⁄° *
key
,

216 c⁄° *
iv
,

217 
íc
);

218 (*
EVP_CIPHER_mëh_gë_do_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *
˘x
,

219 *
out
,

220 c⁄° *
ö
,

221 
size_t
 
öl
);

222 (*
EVP_CIPHER_mëh_gë_˛ónup
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *);

223 (*
EVP_CIPHER_mëh_gë_£t_a¢1_∑øms
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *,

224 
ASN1_TYPE
 *);

225 (*
EVP_CIPHER_mëh_gë_gë_a¢1_∑øms
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *,

226 
ASN1_TYPE
 *);

227 (*
EVP_CIPHER_mëh_gë_˘æ
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *,

228 
ty≥
, 
¨g
,

229 *
±r
);

235 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

236 
	#EVP_CIPH_ECB_MODE
 0x1

	)

237 
	#EVP_CIPH_CBC_MODE
 0x2

	)

238 
	#EVP_CIPH_CFB_MODE
 0x3

	)

239 
	#EVP_CIPH_OFB_MODE
 0x4

	)

240 
	#EVP_CIPH_CTR_MODE
 0x5

	)

241 
	#EVP_CIPH_GCM_MODE
 0x6

	)

242 
	#EVP_CIPH_CCM_MODE
 0x7

	)

243 
	#EVP_CIPH_XTS_MODE
 0x10001

	)

244 
	#EVP_CIPH_WRAP_MODE
 0x10002

	)

245 
	#EVP_CIPH_OCB_MODE
 0x10003

	)

246 
	#EVP_CIPH_MODE
 0xF0007

	)

248 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

250 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

252 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

254 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

256 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

258 
	#EVP_CIPH_NO_PADDING
 0x100

	)

260 
	#EVP_CIPH_RAND_KEY
 0x200

	)

262 
	#EVP_CIPH_CUSTOM_COPY
 0x400

	)

264 
	#EVP_CIPH_CUSTOM_IV_LENGTH
 0x800

	)

266 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0x1000

	)

268 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

270 
	#EVP_CIPH_FLAG_FIPS
 0x4000

	)

272 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0x8000

	)

276 
	#EVP_CIPH_FLAG_CUSTOM_CIPHER
 0x100000

	)

277 
	#EVP_CIPH_FLAG_AEAD_CIPHER
 0x200000

	)

278 
	#EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK
 0x400000

	)

280 
	#EVP_CIPH_FLAG_PIPELINE
 0X800000

	)

287 
	#EVP_CIPHER_CTX_FLAG_WRAP_ALLOW
 0x1

	)

291 
	#EVP_CTRL_INIT
 0x0

	)

292 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

293 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

294 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

295 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

296 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

297 
	#EVP_CTRL_RAND_KEY
 0x6

	)

298 
	#EVP_CTRL_PBE_PRF_NID
 0x7

	)

299 
	#EVP_CTRL_COPY
 0x8

	)

300 
	#EVP_CTRL_AEAD_SET_IVLEN
 0x9

	)

301 
	#EVP_CTRL_AEAD_GET_TAG
 0x10

	)

302 
	#EVP_CTRL_AEAD_SET_TAG
 0x11

	)

303 
	#EVP_CTRL_AEAD_SET_IV_FIXED
 0x12

	)

304 
	#EVP_CTRL_GCM_SET_IVLEN
 
EVP_CTRL_AEAD_SET_IVLEN


	)

305 
	#EVP_CTRL_GCM_GET_TAG
 
EVP_CTRL_AEAD_GET_TAG


	)

306 
	#EVP_CTRL_GCM_SET_TAG
 
EVP_CTRL_AEAD_SET_TAG


	)

307 
	#EVP_CTRL_GCM_SET_IV_FIXED
 
EVP_CTRL_AEAD_SET_IV_FIXED


	)

308 
	#EVP_CTRL_GCM_IV_GEN
 0x13

	)

309 
	#EVP_CTRL_CCM_SET_IVLEN
 
EVP_CTRL_AEAD_SET_IVLEN


	)

310 
	#EVP_CTRL_CCM_GET_TAG
 
EVP_CTRL_AEAD_GET_TAG


	)

311 
	#EVP_CTRL_CCM_SET_TAG
 
EVP_CTRL_AEAD_SET_TAG


	)

312 
	#EVP_CTRL_CCM_SET_IV_FIXED
 
EVP_CTRL_AEAD_SET_IV_FIXED


	)

313 
	#EVP_CTRL_CCM_SET_L
 0x14

	)

314 
	#EVP_CTRL_CCM_SET_MSGLEN
 0x15

	)

320 
	#EVP_CTRL_AEAD_TLS1_AAD
 0x16

	)

322 
	#EVP_CTRL_AEAD_SET_MAC_KEY
 0x17

	)

324 
	#EVP_CTRL_GCM_SET_IV_INV
 0x18

	)

326 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_AAD
 0x19

	)

327 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT
 0x1a

	)

328 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT
 0x1b

	)

329 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE
 0x1c

	)

331 
	#EVP_CTRL_SSL3_MASTER_SECRET
 0x1d

	)

334 
	#EVP_CTRL_SET_SBOX
 0x1e

	)

339 
	#EVP_CTRL_SBOX_USED
 0x1f

	)

343 
	#EVP_CTRL_KEY_MESH
 0x20

	)

345 
	#EVP_CTRL_BLOCK_PADDING_MODE
 0x21

	)

348 
	#EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS
 0x22

	)

350 
	#EVP_CTRL_SET_PIPELINE_INPUT_BUFS
 0x23

	)

352 
	#EVP_CTRL_SET_PIPELINE_INPUT_LENS
 0x24

	)

354 
	#EVP_CTRL_GET_IVLEN
 0x25

	)

357 
	#EVP_PADDING_PKCS7
 1

	)

358 
	#EVP_PADDING_ISO7816_4
 2

	)

359 
	#EVP_PADDING_ANSI923
 3

	)

360 
	#EVP_PADDING_ISO10126
 4

	)

361 
	#EVP_PADDING_ZERO
 5

	)

364 
	#EVP_AEAD_TLS1_AAD_LEN
 13

	)

367 *
out
;

368 c⁄° *
öp
;

369 
size_t
 
Àn
;

370 
öãæóve
;

371 } 
	tEVP_CTRL_TLS1_1_MULTIBLOCK_PARAM
;

375 
	#EVP_GCM_TLS_FIXED_IV_LEN
 4

	)

377 
	#EVP_GCM_TLS_EXPLICIT_IV_LEN
 8

	)

379 
	#EVP_GCM_TLS_TAG_LEN
 16

	)

383 
	#EVP_CCM_TLS_FIXED_IV_LEN
 4

	)

385 
	#EVP_CCM_TLS_EXPLICIT_IV_LEN
 8

	)

387 
	#EVP_CCM_TLS_IV_LEN
 12

	)

389 
	#EVP_CCM_TLS_TAG_LEN
 16

	)

391 
	#EVP_CCM8_TLS_TAG_LEN
 8

	)

394 
	#EVP_CHACHAPOLY_TLS_TAG_LEN
 16

	)

396 
	sevp_cùhî_öfo_°
 {

397 c⁄° 
EVP_CIPHER
 *
cùhî
;

398 
iv
[
EVP_MAX_IV_LENGTH
];

399 } 
	tEVP_CIPHER_INFO
;

403 (
EVP_PBE_KEYGEN
Ë(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
,

404 
	t∑s¶í
, 
	tASN1_TYPE
 *
	t∑øm
,

405 c⁄° 
	tEVP_CIPHER
 *
	tcùhî
, c⁄° 
	tEVP_MD
 *
	tmd
,

406 
	tí_de
);

408 #i‚de‡
OPENSSL_NO_RSA


409 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

410 (*)(
rß
))

	)

413 #i‚de‡
OPENSSL_NO_DSA


414 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

415 (*)(
dß
))

	)

418 #i‚de‡
OPENSSL_NO_DH


419 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

420 (*)(
dh
))

	)

423 #i‚de‡
OPENSSL_NO_EC


424 
	#EVP_PKEY_assign_EC_KEY
(
pkey
,
eckey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_EC
,\

425 (*)(
eckey
))

	)

427 #i‚de‡
OPENSSL_NO_SIPHASH


428 
	#EVP_PKEY_assign_SIPHASH
(
pkey
,
shkey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_SIPHASH
,\

429 (*)(
shkey
))

	)

432 #i‚de‡
OPENSSL_NO_POLY1305


433 
	#EVP_PKEY_assign_POLY1305
(
pkey
,
pﬁykey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_POLY1305
,\

434 (*)(
pﬁykey
))

	)

438 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

439 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

440 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

441 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

443 
EVP_MD_ty≥
(c⁄° 
EVP_MD
 *
md
);

444 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

445 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

446 
EVP_MD_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

447 
EVP_MD_size
(c⁄° 
EVP_MD
 *
md
);

448 
EVP_MD_block_size
(c⁄° 
EVP_MD
 *
md
);

449 
EVP_MD_Êags
(c⁄° 
EVP_MD
 *
md
);

451 c⁄° 
EVP_MD
 *
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

452 (*
EVP_MD_CTX_upd©e_‚
(
EVP_MD_CTX
 *
˘x
))(EVP_MD_CTX *ctx,

453 c⁄° *
d©a
, 
size_t
 
cou¡
);

454 
EVP_MD_CTX_£t_upd©e_‚
(
EVP_MD_CTX
 *
˘x
,

455 (*
upd©e
Ë(
EVP_MD_CTX
 *
˘x
,

456 c⁄° *
d©a
, 
size_t
 
cou¡
));

457 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

458 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

459 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

460 
EVP_PKEY_CTX
 *
EVP_MD_CTX_pkey_˘x
(c⁄° 
EVP_MD_CTX
 *
˘x
);

461 
EVP_MD_CTX_£t_pkey_˘x
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 *
p˘x
);

462 *
EVP_MD_CTX_md_d©a
(c⁄° 
EVP_MD_CTX
 *
˘x
);

464 
EVP_CIPHER_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

465 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

466 
EVP_CIPHER_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

467 
EVP_CIPHER_im∂_˘x_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

468 
EVP_CIPHER_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

469 
EVP_CIPHER_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

470 
EVP_CIPHER_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

471 
	#EVP_CIPHER_mode
(
e
Ë(
	`EVP_CIPHER_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

473 c⁄° 
EVP_CIPHER
 *
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

474 
EVP_CIPHER_CTX_í¸y±ög
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

475 
EVP_CIPHER_CTX_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

476 
EVP_CIPHER_CTX_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

477 
EVP_CIPHER_CTX_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

478 
EVP_CIPHER_CTX_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

479 c⁄° *
EVP_CIPHER_CTX_iv
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

480 c⁄° *
EVP_CIPHER_CTX_‹igöÆ_iv
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

481 *
EVP_CIPHER_CTX_iv_noc⁄°
(
EVP_CIPHER_CTX
 *
˘x
);

482 *
EVP_CIPHER_CTX_buf_noc⁄°
(
EVP_CIPHER_CTX
 *
˘x
);

483 
EVP_CIPHER_CTX_num
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

484 
EVP_CIPHER_CTX_£t_num
(
EVP_CIPHER_CTX
 *
˘x
, 
num
);

485 
EVP_CIPHER_CTX_c›y
(
EVP_CIPHER_CTX
 *
out
, c⁄° EVP_CIPHER_CTX *
ö
);

486 *
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

487 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

488 *
EVP_CIPHER_CTX_gë_cùhî_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

489 *
EVP_CIPHER_CTX_£t_cùhî_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
cùhî_d©a
);

490 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

491 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

492 
	#EVP_CIPHER_CTX_Êags
(
c
Ë
	`EVP_CIPHER_Êags
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

494 
	#EVP_CIPHER_CTX_mode
(
c
Ë
	`EVP_CIPHER_mode
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

496 
	#EVP_ENCODE_LENGTH
(
l
Ë(((÷)+2)/3*4)+(÷)/48+1)*2+80)

	)

497 
	#EVP_DECODE_LENGTH
(
l
Ë((÷)+3)/4*3+80)

	)

499 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

500 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

501 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

502 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

503 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

504 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

505 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

506 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

507 
	#EVP_Dige°SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

508 
	#EVP_Dige°VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

510 #ifde‡
CONST_STRICT


511 
BIO_£t_md
(
BIO
 *, c⁄° 
EVP_MD
 *
md
);

513 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)(md))

	)

515 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(*)(mdp))

	)

516 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0, \

517 (*)(
md˝
))

	)

518 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0, \

519 (*)(
md˝
))

	)

520 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

521 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0, \

522 (*)(
c_µ
))

	)

524  
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

525 *
out
,

526 c⁄° *
ö
, 
öl
);

528 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

529 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

530 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

531 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

532 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

533 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

534 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

535 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

537 
EVP_MD_CTX_˘æ
(
EVP_MD_CTX
 *
˘x
, 
cmd
, 
p1
, *
p2
);

538 
EVP_MD_CTX
 *
EVP_MD_CTX_√w
();

539 
EVP_MD_CTX_ª£t
(
EVP_MD_CTX
 *
˘x
);

540 
EVP_MD_CTX_‰ì
(
EVP_MD_CTX
 *
˘x
);

541 
	#EVP_MD_CTX_¸óã
(Ë
	`EVP_MD_CTX_√w
()

	)

542 
	#EVP_MD_CTX_öô
(
˘x
Ë
	`EVP_MD_CTX_ª£t
((˘x))

	)

543 
	#EVP_MD_CTX_de°roy
(
˘x
Ë
	`EVP_MD_CTX_‰ì
((˘x))

	)

544 
__owur
 
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
, c⁄° EVP_MD_CTX *
ö
);

545 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

546 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

547 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
, 
Êags
);

548 
__owur
 
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
,

549 
ENGINE
 *
im∂
);

550 
__owur
 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
, c⁄° *
d
,

551 
size_t
 
˙t
);

552 
__owur
 
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
, *
md
,

553 *
s
);

554 
__owur
 
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

555 *
md
, *
size
,

556 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

558 
__owur
 
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
, c⁄° EVP_MD_CTX *
ö
);

559 
__owur
 
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

560 
__owur
 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
, *
md
,

561 *
s
);

562 
__owur
 
EVP_Dige°FöÆXOF
(
EVP_MD_CTX
 *
˘x
, *
md
,

563 
size_t
 
Àn
);

565 
EVP_ªad_pw_°rög
(*
buf
, 
Àngth
, c⁄° *
¥om±
, 
vîify
);

566 
EVP_ªad_pw_°rög_mö
(*
buf
, 
möÀn
, 
maxÀn
,

567 c⁄° *
¥om±
, 
vîify
);

568 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

569 *
EVP_gë_pw_¥om±
();

571 
__owur
 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
, c⁄° 
EVP_MD
 *
md
,

572 c⁄° *
ß…
,

573 c⁄° *
d©a
, 
d©Æ
, 
cou¡
,

574 *
key
, *
iv
);

576 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

577 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

578 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

580 
__owur
 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

581 c⁄° *
key
, c⁄° *
iv
);

582  
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,

583 c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

584 c⁄° *
key
,

585 c⁄° *
iv
);

586  
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

587 *
oué
, c⁄° *
ö
, 
öl
);

588  
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

589 *
oué
);

590  
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

591 *
oué
);

593 
__owur
 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

594 c⁄° *
key
, c⁄° *
iv
);

595  
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,

596 c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

597 c⁄° *
key
,

598 c⁄° *
iv
);

599  
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

600 *
oué
, c⁄° *
ö
, 
öl
);

601 
__owur
 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

602 *
oué
);

603  
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

604 *
oué
);

606 
__owur
 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

607 c⁄° *
key
, c⁄° *
iv
,

608 
íc
);

609  
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
,

610 c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

611 c⁄° *
key
,

612 c⁄° *
iv
, 
íc
);

613 
__owur
 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

614 *
oué
, c⁄° *
ö
, 
öl
);

615 
__owur
 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

616 *
oué
);

617 
__owur
 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

618 *
oué
);

620 
__owur
 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
md
, *
s
,

621 
EVP_PKEY
 *
pkey
);

623 
__owur
 
EVP_Dige°Sign
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

624 
size_t
 *
sigÀn
, c⁄° *
tbs
,

625 
size_t
 
tb¶í
);

627 
__owur
 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sigbuf
,

628 
sigÀn
, 
EVP_PKEY
 *
pkey
);

630 
__owur
 
EVP_Dige°Vîify
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sigªt
,

631 
size_t
 
sigÀn
, c⁄° *
tbs
,

632 
size_t
 
tb¶í
);

634  
EVP_Dige°SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

635 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
,

636 
EVP_PKEY
 *
pkey
);

637 
__owur
 
EVP_Dige°SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

638 
size_t
 *
sigÀn
);

640 
__owur
 
EVP_Dige°VîifyInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

641 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
,

642 
EVP_PKEY
 *
pkey
);

643 
__owur
 
EVP_Dige°VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sig
,

644 
size_t
 
sigÀn
);

646 #i‚de‡
OPENSSL_NO_RSA


647 
__owur
 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

648 c⁄° *
ek
, 
ekl
,

649 c⁄° *
iv
, 
EVP_PKEY
 *
¥iv
);

650 
__owur
 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

652 
__owur
 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

653 **
ek
, *
ekl
, *
iv
,

654 
EVP_PKEY
 **
pubk
, 
≈ubk
);

655 
__owur
 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

658 
EVP_ENCODE_CTX
 *
EVP_ENCODE_CTX_√w
();

659 
EVP_ENCODE_CTX_‰ì
(
EVP_ENCODE_CTX
 *
˘x
);

660 
EVP_ENCODE_CTX_c›y
(
EVP_ENCODE_CTX
 *
d˘x
, EVP_ENCODE_CTX *
s˘x
);

661 
EVP_ENCODE_CTX_num
(
EVP_ENCODE_CTX
 *
˘x
);

662 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

663 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
,

664 c⁄° *
ö
, 
öl
);

665 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
);

666 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

668 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

669 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
,

670 c⁄° *
ö
, 
öl
);

671 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

672 *
out
, *
oué
);

673 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

675 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

676 
	#EVP_CIPHER_CTX_öô
(
c
Ë
	`EVP_CIPHER_CTX_ª£t
(c)

	)

677 
	#EVP_CIPHER_CTX_˛ónup
(
c
Ë
	`EVP_CIPHER_CTX_ª£t
(c)

	)

679 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

680 
EVP_CIPHER_CTX_ª£t
(
EVP_CIPHER_CTX
 *
c
);

681 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
c
);

682 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

683 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

684 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

685 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

687 c⁄° 
BIO_METHOD
 *
BIO_f_md
();

688 c⁄° 
BIO_METHOD
 *
BIO_f_ba£64
();

689 c⁄° 
BIO_METHOD
 *
BIO_f_cùhî
();

690 c⁄° 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

691 
__owur
 
BIO_£t_cùhî
(
BIO
 *
b
, c⁄° 
EVP_CIPHER
 *
c
, c⁄° *
k
,

692 c⁄° *
i
, 
íc
);

694 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

695 #i‚de‡
OPENSSL_NO_MD2


696 c⁄° 
EVP_MD
 *
EVP_md2
();

698 #i‚de‡
OPENSSL_NO_MD4


699 c⁄° 
EVP_MD
 *
EVP_md4
();

701 #i‚de‡
OPENSSL_NO_MD5


702 c⁄° 
EVP_MD
 *
EVP_md5
();

703 c⁄° 
EVP_MD
 *
EVP_md5_sha1
();

705 #i‚de‡
OPENSSL_NO_BLAKE2


706 c⁄° 
EVP_MD
 *
EVP_bœke2b512
();

707 c⁄° 
EVP_MD
 *
EVP_bœke2s256
();

709 c⁄° 
EVP_MD
 *
EVP_sha1
();

710 c⁄° 
EVP_MD
 *
EVP_sha224
();

711 c⁄° 
EVP_MD
 *
EVP_sha256
();

712 c⁄° 
EVP_MD
 *
EVP_sha384
();

713 c⁄° 
EVP_MD
 *
EVP_sha512
();

714 c⁄° 
EVP_MD
 *
EVP_sha512_224
();

715 c⁄° 
EVP_MD
 *
EVP_sha512_256
();

716 c⁄° 
EVP_MD
 *
EVP_sha3_224
();

717 c⁄° 
EVP_MD
 *
EVP_sha3_256
();

718 c⁄° 
EVP_MD
 *
EVP_sha3_384
();

719 c⁄° 
EVP_MD
 *
EVP_sha3_512
();

720 c⁄° 
EVP_MD
 *
EVP_shake128
();

721 c⁄° 
EVP_MD
 *
EVP_shake256
();

722 #i‚de‡
OPENSSL_NO_MDC2


723 c⁄° 
EVP_MD
 *
EVP_mdc2
();

725 #i‚de‡
OPENSSL_NO_RMD160


726 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

728 #i‚de‡
OPENSSL_NO_WHIRLPOOL


729 c⁄° 
EVP_MD
 *
EVP_whúÕoﬁ
();

731 #i‚de‡
OPENSSL_NO_SM3


732 c⁄° 
EVP_MD
 *
EVP_sm3
();

734 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

735 #i‚de‡
OPENSSL_NO_DES


736 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

737 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

738 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

739 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

740 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

741 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

742 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

743 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

744 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

745 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

746 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

747 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

748 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

749 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

750 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

751 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

752 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

753 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

754 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

755 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

756 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

757 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

758 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_wøp
();

765 #i‚de‡
OPENSSL_NO_RC4


766 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

767 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

768 #i‚de‡
OPENSSL_NO_MD5


769 c⁄° 
EVP_CIPHER
 *
EVP_rc4_hmac_md5
();

772 #i‚de‡
OPENSSL_NO_IDEA


773 c⁄° 
EVP_CIPHER
 *
EVP_idó_ecb
();

774 c⁄° 
EVP_CIPHER
 *
EVP_idó_cfb64
();

775 
	#EVP_idó_cfb
 
EVP_idó_cfb64


	)

776 c⁄° 
EVP_CIPHER
 *
EVP_idó_ofb
();

777 c⁄° 
EVP_CIPHER
 *
EVP_idó_cbc
();

779 #i‚de‡
OPENSSL_NO_RC2


780 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

781 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

782 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

783 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

784 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

785 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

786 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

788 #i‚de‡
OPENSSL_NO_BF


789 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

790 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

791 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

792 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

793 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

795 #i‚de‡
OPENSSL_NO_CAST


796 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

797 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

798 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

799 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

800 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

802 #i‚de‡
OPENSSL_NO_RC5


803 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cbc
();

804 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ecb
();

805 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cfb64
();

806 
	#EVP_rc5_32_12_16_cfb
 
EVP_rc5_32_12_16_cfb64


	)

807 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ofb
();

809 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

810 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

811 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

812 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

813 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

814 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

815 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

816 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

817 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ccm
();

818 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_gcm
();

819 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_xts
();

820 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_wøp
();

821 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_wøp_∑d
();

822 #i‚de‡
OPENSSL_NO_OCB


823 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ocb
();

825 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

826 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

827 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

828 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

829 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

830 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

831 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

832 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

833 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ccm
();

834 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_gcm
();

835 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_wøp
();

836 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_wøp_∑d
();

837 #i‚de‡
OPENSSL_NO_OCB


838 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ocb
();

840 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

841 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

842 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

843 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

844 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

845 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

846 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

847 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

848 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ccm
();

849 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_gcm
();

850 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_xts
();

851 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_wøp
();

852 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_wøp_∑d
();

853 #i‚de‡
OPENSSL_NO_OCB


854 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ocb
();

856 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha1
();

857 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha1
();

858 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha256
();

859 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha256
();

860 #i‚de‡
OPENSSL_NO_ARIA


861 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_ecb
();

862 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_cbc
();

863 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_cfb1
();

864 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_cfb8
();

865 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_cfb128
();

866 
	#EVP_¨ü_128_cfb
 
EVP_¨ü_128_cfb128


	)

867 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_˘r
();

868 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_ofb
();

869 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_gcm
();

870 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_ccm
();

871 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_ecb
();

872 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_cbc
();

873 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_cfb1
();

874 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_cfb8
();

875 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_cfb128
();

876 
	#EVP_¨ü_192_cfb
 
EVP_¨ü_192_cfb128


	)

877 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_˘r
();

878 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_ofb
();

879 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_gcm
();

880 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_ccm
();

881 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_ecb
();

882 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_cbc
();

883 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_cfb1
();

884 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_cfb8
();

885 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_cfb128
();

886 
	#EVP_¨ü_256_cfb
 
EVP_¨ü_256_cfb128


	)

887 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_˘r
();

888 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_ofb
();

889 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_gcm
();

890 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_ccm
();

892 #i‚de‡
OPENSSL_NO_CAMELLIA


893 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

894 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

895 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

896 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

897 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

898 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

899 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

900 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_˘r
();

901 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

902 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

903 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

904 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

905 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

906 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

907 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

908 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_˘r
();

909 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

910 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

911 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

912 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

913 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

914 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

915 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

916 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_˘r
();

918 #i‚de‡
OPENSSL_NO_CHACHA


919 c⁄° 
EVP_CIPHER
 *
EVP_chacha20
();

920 #i‚de‡
OPENSSL_NO_POLY1305


921 c⁄° 
EVP_CIPHER
 *
EVP_chacha20_pﬁy1305
();

925 #i‚de‡
OPENSSL_NO_SEED


926 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

927 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

928 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

929 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

930 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

933 #i‚de‡
OPENSSL_NO_SM4


934 c⁄° 
EVP_CIPHER
 *
EVP_sm4_ecb
();

935 c⁄° 
EVP_CIPHER
 *
EVP_sm4_cbc
();

936 c⁄° 
EVP_CIPHER
 *
EVP_sm4_cfb128
();

937 
	#EVP_sm4_cfb
 
EVP_sm4_cfb128


	)

938 c⁄° 
EVP_CIPHER
 *
EVP_sm4_ofb
();

939 c⁄° 
EVP_CIPHER
 *
EVP_sm4_˘r
();

942 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

943 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
() \

944 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
 \

945 | 
OPENSSL_INIT_ADD_ALL_DIGESTS
 \

946 | 
OPENSSL_INIT_LOAD_CONFIG
, 
NULL
)

	)

947 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
() \

948 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
 \

949 | 
OPENSSL_INIT_ADD_ALL_DIGESTS
, 
NULL
)

	)

951 #ifde‡
OPENSSL_LOAD_CONF


952 
	#O≥nSSL_add_Æl_Æg‹ôhms
(Ë
	`OPENSSL_add_Æl_Æg‹ôhms_c⁄f
()

	)

954 
	#O≥nSSL_add_Æl_Æg‹ôhms
(Ë
	`OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
()

	)

957 
	#O≥nSSL_add_Æl_cùhîs
() \

958 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
, 
NULL
)

	)

959 
	#O≥nSSL_add_Æl_dige°s
() \

960 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_DIGESTS
, 
NULL
)

	)

962 
	#EVP_˛ónup
(Ë0Ë

	)

965 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

966 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

968 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

969 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

971 
EVP_CIPHER_do_Æl
((*
‚
Ë(c⁄° 
EVP_CIPHER
 *
cùh
,

972 c⁄° *
‰om
, c⁄° *
to
, *
x
),

973 *
¨g
);

974 
EVP_CIPHER_do_Æl_s‹ãd
((*
‚
)

975 (c⁄° 
EVP_CIPHER
 *
cùh
, c⁄° *
‰om
,

976 c⁄° *
to
, *
x
), *
¨g
);

978 
EVP_MD_do_Æl
((*
‚
Ë(c⁄° 
EVP_MD
 *
cùh
,

979 c⁄° *
‰om
, c⁄° *
to
, *
x
),

980 *
¨g
);

981 
EVP_MD_do_Æl_s‹ãd
((*
‚
)

982 (c⁄° 
EVP_MD
 *
cùh
, c⁄° *
‰om
,

983 c⁄° *
to
, *
x
), *
¨g
);

985 
EVP_PKEY_de¸y±_ﬁd
(*
dec_key
,

986 c⁄° *
íc_key
, 
íc_key_Àn
,

987 
EVP_PKEY
 *
¥iv©e_key
);

988 
EVP_PKEY_í¸y±_ﬁd
(*
íc_key
,

989 c⁄° *
key
, 
key_Àn
,

990 
EVP_PKEY
 *
pub_key
);

991 
EVP_PKEY_ty≥
(
ty≥
);

992 
EVP_PKEY_id
(c⁄° 
EVP_PKEY
 *
pkey
);

993 
EVP_PKEY_ba£_id
(c⁄° 
EVP_PKEY
 *
pkey
);

994 
EVP_PKEY_bôs
(c⁄° 
EVP_PKEY
 *
pkey
);

995 
EVP_PKEY_£curôy_bôs
(c⁄° 
EVP_PKEY
 *
pkey
);

996 
EVP_PKEY_size
(c⁄° 
EVP_PKEY
 *
pkey
);

997 
EVP_PKEY_£t_ty≥
(
EVP_PKEY
 *
pkey
, 
ty≥
);

998 
EVP_PKEY_£t_ty≥_°r
(
EVP_PKEY
 *
pkey
, c⁄° *
°r
, 
Àn
);

999 
EVP_PKEY_£t_Æüs_ty≥
(
EVP_PKEY
 *
pkey
, 
ty≥
);

1000 #i‚de‡
OPENSSL_NO_ENGINE


1001 
EVP_PKEY_£t1_ígöe
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1002 
ENGINE
 *
EVP_PKEY_gë0_ígöe
(c⁄° 
EVP_PKEY
 *
pkey
);

1004 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
, 
ty≥
, *
key
);

1005 *
EVP_PKEY_gë0
(c⁄° 
EVP_PKEY
 *
pkey
);

1006 c⁄° *
EVP_PKEY_gë0_hmac
(c⁄° 
EVP_PKEY
 *
pkey
, 
size_t
 *
Àn
);

1007 #i‚de‡
OPENSSL_NO_POLY1305


1008 c⁄° *
EVP_PKEY_gë0_pﬁy1305
(c⁄° 
EVP_PKEY
 *
pkey
, 
size_t
 *
Àn
);

1010 #i‚de‡
OPENSSL_NO_SIPHASH


1011 c⁄° *
EVP_PKEY_gë0_sùhash
(c⁄° 
EVP_PKEY
 *
pkey
, 
size_t
 *
Àn
);

1014 #i‚de‡
OPENSSL_NO_RSA


1015 
rß_°
;

1016 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
, 
rß_°
 *
key
);

1017 
rß_°
 *
EVP_PKEY_gë0_RSA
(
EVP_PKEY
 *
pkey
);

1018 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

1020 #i‚de‡
OPENSSL_NO_DSA


1021 
dß_°
;

1022 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
, 
dß_°
 *
key
);

1023 
dß_°
 *
EVP_PKEY_gë0_DSA
(
EVP_PKEY
 *
pkey
);

1024 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

1026 #i‚de‡
OPENSSL_NO_DH


1027 
dh_°
;

1028 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
, 
dh_°
 *
key
);

1029 
dh_°
 *
EVP_PKEY_gë0_DH
(
EVP_PKEY
 *
pkey
);

1030 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

1032 #i‚de‡
OPENSSL_NO_EC


1033 
ec_key_°
;

1034 
EVP_PKEY_£t1_EC_KEY
(
EVP_PKEY
 *
pkey
, 
ec_key_°
 *
key
);

1035 
ec_key_°
 *
EVP_PKEY_gë0_EC_KEY
(
EVP_PKEY
 *
pkey
);

1036 
ec_key_°
 *
EVP_PKEY_gë1_EC_KEY
(
EVP_PKEY
 *
pkey
);

1039 
EVP_PKEY
 *
EVP_PKEY_√w
();

1040 
EVP_PKEY_up_ªf
(
EVP_PKEY
 *
pkey
);

1041 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

1043 
EVP_PKEY
 *
d2i_PublicKey
(
ty≥
, EVP_PKEY **
a
, c⁄° **
µ
,

1044 
Àngth
);

1045 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

1047 
EVP_PKEY
 *
d2i_Priv©eKey
(
ty≥
, EVP_PKEY **
a
, c⁄° **
µ
,

1048 
Àngth
);

1049 
EVP_PKEY
 *
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

1050 
Àngth
);

1051 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

1053 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

1054 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

1055 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
, 
mode
);

1056 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

1058 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

1060 
EVP_PKEY_¥öt_public
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1061 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1062 
EVP_PKEY_¥öt_¥iv©e
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1063 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1064 
EVP_PKEY_¥öt_∑øms
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1065 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1067 
EVP_PKEY_gë_deÁu…_dige°_nid
(
EVP_PKEY
 *
pkey
, *
≤id
);

1069 
EVP_PKEY_£t1_és_ícodedpoöt
(
EVP_PKEY
 *
pkey
,

1070 c⁄° *
±
, 
size_t
 
±Àn
);

1071 
size_t
 
EVP_PKEY_gë1_és_ícodedpoöt
(
EVP_PKEY
 *
pkey
, **
µt
);

1073 
EVP_CIPHER_ty≥
(c⁄° 
EVP_CIPHER
 *
˘x
);

1076 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1077 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1080 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1081 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1084 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

1085 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

1086 c⁄° 
EVP_MD
 *
md
, 
í_de
);

1087 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

1088 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

1089 
keyÀn
, *
out
);

1090 
PKCS5_PBKDF2_HMAC
(c⁄° *
∑ss
, 
∑s¶í
,

1091 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

1092 c⁄° 
EVP_MD
 *
dige°
, 
keyÀn
, *
out
);

1093 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

1094 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

1095 c⁄° 
EVP_MD
 *
md
, 
í_de
);

1097 #i‚de‡
OPENSSL_NO_SCRYPT


1098 
EVP_PBE_s¸y±
(c⁄° *
∑ss
, 
size_t
 
∑s¶í
,

1099 c⁄° *
ß…
, 
size_t
 
ß…Àn
,

1100 
uöt64_t
 
N
, uöt64_à
r
, uöt64_à
p
, uöt64_à
maxmem
,

1101 *
key
, 
size_t
 
keyÀn
);

1103 
PKCS5_v2_s¸y±_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
,

1104 
∑s¶í
, 
ASN1_TYPE
 *
∑øm
,

1105 c⁄° 
EVP_CIPHER
 *
c
, c⁄° 
EVP_MD
 *
md
, 
í_de
);

1108 
PKCS5_PBE_add
();

1110 
EVP_PBE_CùhîInô
(
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

1111 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

1116 
	#EVP_PBE_TYPE_OUTER
 0x0

	)

1118 
	#EVP_PBE_TYPE_PRF
 0x1

	)

1120 
	#EVP_PBE_TYPE_KDF
 0x2

	)

1122 
EVP_PBE_Æg_add_ty≥
(
pbe_ty≥
, 
pbe_nid
, 
cùhî_nid
,

1123 
md_nid
, 
EVP_PBE_KEYGEN
 *
keygí
);

1124 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

1125 
EVP_PBE_KEYGEN
 *
keygí
);

1126 
EVP_PBE_föd
(
ty≥
, 
pbe_nid
, *
p˙id
, *
pmnid
,

1127 
EVP_PBE_KEYGEN
 **
pkeygí
);

1128 
EVP_PBE_˛ónup
();

1129 
EVP_PBE_gë
(*
±y≥
, *
µbe_nid
, 
size_t
 
num
);

1131 
	#ASN1_PKEY_ALIAS
 0x1

	)

1132 
	#ASN1_PKEY_DYNAMIC
 0x2

	)

1133 
	#ASN1_PKEY_SIGPARAM_NULL
 0x4

	)

1135 
	#ASN1_PKEY_CTRL_PKCS7_SIGN
 0x1

	)

1136 
	#ASN1_PKEY_CTRL_PKCS7_ENCRYPT
 0x2

	)

1137 
	#ASN1_PKEY_CTRL_DEFAULT_MD_NID
 0x3

	)

1138 
	#ASN1_PKEY_CTRL_CMS_SIGN
 0x5

	)

1139 
	#ASN1_PKEY_CTRL_CMS_ENVELOPE
 0x7

	)

1140 
	#ASN1_PKEY_CTRL_CMS_RI_TYPE
 0x8

	)

1142 
	#ASN1_PKEY_CTRL_SET1_TLS_ENCPT
 0x9

	)

1143 
	#ASN1_PKEY_CTRL_GET1_TLS_ENCPT
 0xa

	)

1145 
EVP_PKEY_a¢1_gë_cou¡
();

1146 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_gë0
(
idx
);

1147 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd
(
ENGINE
 **
≥
, 
ty≥
);

1148 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd_°r
(
ENGINE
 **
≥
,

1149 c⁄° *
°r
, 
Àn
);

1150 
EVP_PKEY_a¢1_add0
(c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1151 
EVP_PKEY_a¢1_add_Æüs
(
to
, 
‰om
);

1152 
EVP_PKEY_a¢1_gë0_öfo
(*
µkey_id
, *
pkey_ba£_id
,

1153 *
µkey_Êags
, c⁄° **
pöfo
,

1154 c⁄° **
µem_°r
,

1155 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1157 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_gë0_a¢1
(c⁄° 
EVP_PKEY
 *
pkey
);

1158 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_√w
(
id
, 
Êags
,

1159 c⁄° *
≥m_°r
,

1160 c⁄° *
öfo
);

1161 
EVP_PKEY_a¢1_c›y
(
EVP_PKEY_ASN1_METHOD
 *
d°
,

1162 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
§c
);

1163 
EVP_PKEY_a¢1_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1164 
EVP_PKEY_a¢1_£t_public
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1165 (*
pub_decode
Ë(
EVP_PKEY
 *
pk
,

1166 
X509_PUBKEY
 *
pub
),

1167 (*
pub_ícode
Ë(
X509_PUBKEY
 *
pub
,

1168 c⁄° 
EVP_PKEY
 *
pk
),

1169 (*
pub_cmp
Ë(c⁄° 
EVP_PKEY
 *
a
,

1170 c⁄° 
EVP_PKEY
 *
b
),

1171 (*
pub_¥öt
Ë(
BIO
 *
out
,

1172 c⁄° 
EVP_PKEY
 *
pkey
,

1173 
ödít
, 
ASN1_PCTX
 *
p˘x
),

1174 (*
pkey_size
Ë(c⁄° 
EVP_PKEY
 *
pk
),

1175 (*
pkey_bôs
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1176 
EVP_PKEY_a¢1_£t_¥iv©e
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1177 (*
¥iv_decode
Ë(
EVP_PKEY
 *
pk
,

1178 c⁄° 
PKCS8_PRIV_KEY_INFO


1179 *
p8öf
),

1180 (*
¥iv_ícode
Ë(
PKCS8_PRIV_KEY_INFO
 *
p8
,

1181 c⁄° 
EVP_PKEY
 *
pk
),

1182 (*
¥iv_¥öt
Ë(
BIO
 *
out
,

1183 c⁄° 
EVP_PKEY
 *
pkey
,

1184 
ödít
,

1185 
ASN1_PCTX
 *
p˘x
));

1186 
EVP_PKEY_a¢1_£t_∑øm
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1187 (*
∑øm_decode
Ë(
EVP_PKEY
 *
pkey
,

1188 c⁄° **
pdî
,

1189 
dîÀn
),

1190 (*
∑øm_ícode
Ë(c⁄° 
EVP_PKEY
 *
pkey
,

1191 **
pdî
),

1192 (*
∑øm_missög
Ë(c⁄° 
EVP_PKEY
 *
pk
),

1193 (*
∑øm_c›y
Ë(
EVP_PKEY
 *
to
,

1194 c⁄° 
EVP_PKEY
 *
‰om
),

1195 (*
∑øm_cmp
Ë(c⁄° 
EVP_PKEY
 *
a
,

1196 c⁄° 
EVP_PKEY
 *
b
),

1197 (*
∑øm_¥öt
Ë(
BIO
 *
out
,

1198 c⁄° 
EVP_PKEY
 *
pkey
,

1199 
ödít
,

1200 
ASN1_PCTX
 *
p˘x
));

1202 
EVP_PKEY_a¢1_£t_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1203 (*
pkey_‰ì
Ë(
EVP_PKEY
 *
pkey
));

1204 
EVP_PKEY_a¢1_£t_˘æ
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1205 (*
pkey_˘æ
Ë(
EVP_PKEY
 *
pkey
, 
›
,

1206 
¨g1
, *
¨g2
));

1207 
EVP_PKEY_a¢1_£t_ôem
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1208 (*
ôem_vîify
Ë(
EVP_MD_CTX
 *
˘x
,

1209 c⁄° 
ASN1_ITEM
 *
ô
,

1210 *
a¢
,

1211 
X509_ALGOR
 *
a
,

1212 
ASN1_BIT_STRING
 *
sig
,

1213 
EVP_PKEY
 *
pkey
),

1214 (*
ôem_sign
Ë(
EVP_MD_CTX
 *
˘x
,

1215 c⁄° 
ASN1_ITEM
 *
ô
,

1216 *
a¢
,

1217 
X509_ALGOR
 *
Æg1
,

1218 
X509_ALGOR
 *
Æg2
,

1219 
ASN1_BIT_STRING
 *
sig
));

1221 
EVP_PKEY_a¢1_£t_sigöf
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1222 (*
sigöf_£t
Ë(
X509_SIG_INFO
 *
sigöf
,

1223 c⁄° 
X509_ALGOR
 *
Æg
,

1224 c⁄° 
ASN1_STRING
 *
sig
));

1226 
EVP_PKEY_a¢1_£t_check
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1227 (*
pkey_check
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1229 
EVP_PKEY_a¢1_£t_public_check
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1230 (*
pkey_pub_check
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1232 
EVP_PKEY_a¢1_£t_∑øm_check
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1233 (*
pkey_∑øm_check
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1235 
EVP_PKEY_a¢1_£t_£t_¥iv_key
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1236 (*
£t_¥iv_key
Ë(
EVP_PKEY
 *
pk
,

1238 *
¥iv
,

1239 
size_t
 
Àn
));

1240 
EVP_PKEY_a¢1_£t_£t_pub_key
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1241 (*
£t_pub_key
Ë(
EVP_PKEY
 *
pk
,

1242 c⁄° *
pub
,

1243 
size_t
 
Àn
));

1244 
EVP_PKEY_a¢1_£t_gë_¥iv_key
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1245 (*
gë_¥iv_key
Ë(c⁄° 
EVP_PKEY
 *
pk
,

1246 *
¥iv
,

1247 
size_t
 *
Àn
));

1248 
EVP_PKEY_a¢1_£t_gë_pub_key
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1249 (*
gë_pub_key
Ë(c⁄° 
EVP_PKEY
 *
pk
,

1250 *
pub
,

1251 
size_t
 *
Àn
));

1253 
EVP_PKEY_a¢1_£t_£curôy_bôs
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1254 (*
pkey_£curôy_bôs
Ë(c⁄° 
EVP_PKEY


1255 *
pk
));

1257 
	#EVP_PKEY_OP_UNDEFINED
 0

	)

1258 
	#EVP_PKEY_OP_PARAMGEN
 (1<<1)

	)

1259 
	#EVP_PKEY_OP_KEYGEN
 (1<<2)

	)

1260 
	#EVP_PKEY_OP_SIGN
 (1<<3)

	)

1261 
	#EVP_PKEY_OP_VERIFY
 (1<<4)

	)

1262 
	#EVP_PKEY_OP_VERIFYRECOVER
 (1<<5)

	)

1263 
	#EVP_PKEY_OP_SIGNCTX
 (1<<6)

	)

1264 
	#EVP_PKEY_OP_VERIFYCTX
 (1<<7)

	)

1265 
	#EVP_PKEY_OP_ENCRYPT
 (1<<8)

	)

1266 
	#EVP_PKEY_OP_DECRYPT
 (1<<9)

	)

1267 
	#EVP_PKEY_OP_DERIVE
 (1<<10)

	)

1269 
	#EVP_PKEY_OP_TYPE_SIG
 \

1270 (
EVP_PKEY_OP_SIGN
 | 
EVP_PKEY_OP_VERIFY
 | 
EVP_PKEY_OP_VERIFYRECOVER
 \

1271 | 
EVP_PKEY_OP_SIGNCTX
 | 
EVP_PKEY_OP_VERIFYCTX
)

	)

1273 
	#EVP_PKEY_OP_TYPE_CRYPT
 \

1274 (
EVP_PKEY_OP_ENCRYPT
 | 
EVP_PKEY_OP_DECRYPT
)

	)

1276 
	#EVP_PKEY_OP_TYPE_NOGEN
 \

1277 (
EVP_PKEY_OP_TYPE_SIG
 | 
EVP_PKEY_OP_TYPE_CRYPT
 | 
EVP_PKEY_OP_DERIVE
)

	)

1279 
	#EVP_PKEY_OP_TYPE_GEN
 \

1280 (
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
)

	)

1282 
	#EVP_PKEY_CTX_£t_sig«tuª_md
(
˘x
, 
md
) \

1283 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1284 
EVP_PKEY_CTRL_MD
, 0, (*)(
md
))

	)

1286 
	#EVP_PKEY_CTX_gë_sig«tuª_md
(
˘x
, 
pmd
) \

1287 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1288 
EVP_PKEY_CTRL_GET_MD
, 0, (*)(
pmd
))

	)

1290 
	#EVP_PKEY_CTX_£t_mac_key
(
˘x
, 
key
, 
Àn
) \

1291 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_KEYGEN
, \

1292 
EVP_PKEY_CTRL_SET_MAC_KEY
, 
Àn
, (*)(
key
))

	)

1294 
	#EVP_PKEY_CTRL_MD
 1

	)

1295 
	#EVP_PKEY_CTRL_PEER_KEY
 2

	)

1297 
	#EVP_PKEY_CTRL_PKCS7_ENCRYPT
 3

	)

1298 
	#EVP_PKEY_CTRL_PKCS7_DECRYPT
 4

	)

1300 
	#EVP_PKEY_CTRL_PKCS7_SIGN
 5

	)

1302 
	#EVP_PKEY_CTRL_SET_MAC_KEY
 6

	)

1304 
	#EVP_PKEY_CTRL_DIGESTINIT
 7

	)

1307 
	#EVP_PKEY_CTRL_SET_IV
 8

	)

1309 
	#EVP_PKEY_CTRL_CMS_ENCRYPT
 9

	)

1310 
	#EVP_PKEY_CTRL_CMS_DECRYPT
 10

	)

1311 
	#EVP_PKEY_CTRL_CMS_SIGN
 11

	)

1313 
	#EVP_PKEY_CTRL_CIPHER
 12

	)

1315 
	#EVP_PKEY_CTRL_GET_MD
 13

	)

1317 
	#EVP_PKEY_CTRL_SET_DIGEST_SIZE
 14

	)

1319 
	#EVP_PKEY_ALG_CTRL
 0x1000

	)

1321 
	#EVP_PKEY_FLAG_AUTOARGLEN
 2

	)

1325 
	#EVP_PKEY_FLAG_SIGCTX_CUSTOM
 4

	)

1327 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_föd
(
ty≥
);

1328 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_√w
(
id
, 
Êags
);

1329 
EVP_PKEY_mëh_gë0_öfo
(*
µkey_id
, *
pÊags
,

1330 c⁄° 
EVP_PKEY_METHOD
 *
mëh
);

1331 
EVP_PKEY_mëh_c›y
(
EVP_PKEY_METHOD
 *
d°
, c⁄° EVP_PKEY_METHOD *
§c
);

1332 
EVP_PKEY_mëh_‰ì
(
EVP_PKEY_METHOD
 *
pmëh
);

1333 
EVP_PKEY_mëh_add0
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1334 
EVP_PKEY_mëh_ªmove
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1335 
size_t
 
EVP_PKEY_mëh_gë_cou¡
();

1336 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_gë0
(
size_t
 
idx
);

1338 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1339 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_id
(
id
, 
ENGINE
 *
e
);

1340 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_dup
(EVP_PKEY_CTX *
˘x
);

1341 
EVP_PKEY_CTX_‰ì
(
EVP_PKEY_CTX
 *
˘x
);

1343 
EVP_PKEY_CTX_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1344 
cmd
, 
p1
, *
p2
);

1345 
EVP_PKEY_CTX_˘æ_°r
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
,

1346 c⁄° *
vÆue
);

1347 
EVP_PKEY_CTX_˘æ_uöt64
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1348 
cmd
, 
uöt64_t
 
vÆue
);

1350 
EVP_PKEY_CTX_°r2˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
cmd
, c⁄° *
°r
);

1351 
EVP_PKEY_CTX_hex2˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
cmd
, c⁄° *
hex
);

1353 
EVP_PKEY_CTX_md
(
EVP_PKEY_CTX
 *
˘x
, 
›ty≥
, 
cmd
, c⁄° *
md
);

1355 
EVP_PKEY_CTX_gë_›î©i⁄
(
EVP_PKEY_CTX
 *
˘x
);

1356 
EVP_PKEY_CTX_£t0_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, *
d©
, 
d©Àn
);

1358 
EVP_PKEY
 *
EVP_PKEY_√w_mac_key
(
ty≥
, 
ENGINE
 *
e
,

1359 c⁄° *
key
, 
keyÀn
);

1360 
EVP_PKEY
 *
EVP_PKEY_√w_øw_¥iv©e_key
(
ty≥
, 
ENGINE
 *
e
,

1361 c⁄° *
¥iv
,

1362 
size_t
 
Àn
);

1363 
EVP_PKEY
 *
EVP_PKEY_√w_øw_public_key
(
ty≥
, 
ENGINE
 *
e
,

1364 c⁄° *
pub
,

1365 
size_t
 
Àn
);

1366 
EVP_PKEY_gë_øw_¥iv©e_key
(c⁄° 
EVP_PKEY
 *
pkey
, *
¥iv
,

1367 
size_t
 *
Àn
);

1368 
EVP_PKEY_gë_øw_public_key
(c⁄° 
EVP_PKEY
 *
pkey
, *
pub
,

1369 
size_t
 *
Àn
);

1371 
EVP_PKEY
 *
EVP_PKEY_√w_CMAC_key
(
ENGINE
 *
e
, c⁄° *
¥iv
,

1372 
size_t
 
Àn
, c⁄° 
EVP_CIPHER
 *
cùhî
);

1374 
EVP_PKEY_CTX_£t_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1375 *
EVP_PKEY_CTX_gë_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1376 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_pkey
(
EVP_PKEY_CTX
 *
˘x
);

1378 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_≥îkey
(
EVP_PKEY_CTX
 *
˘x
);

1380 
EVP_PKEY_CTX_£t_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1381 *
EVP_PKEY_CTX_gë_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1383 
EVP_PKEY_sign_öô
(
EVP_PKEY_CTX
 *
˘x
);

1384 
EVP_PKEY_sign
(
EVP_PKEY_CTX
 *
˘x
,

1385 *
sig
, 
size_t
 *
sigÀn
,

1386 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1387 
EVP_PKEY_vîify_öô
(
EVP_PKEY_CTX
 *
˘x
);

1388 
EVP_PKEY_vîify
(
EVP_PKEY_CTX
 *
˘x
,

1389 c⁄° *
sig
, 
size_t
 
sigÀn
,

1390 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1391 
EVP_PKEY_vîify_ªcovî_öô
(
EVP_PKEY_CTX
 *
˘x
);

1392 
EVP_PKEY_vîify_ªcovî
(
EVP_PKEY_CTX
 *
˘x
,

1393 *
rout
, 
size_t
 *
rouéí
,

1394 c⁄° *
sig
, 
size_t
 
sigÀn
);

1395 
EVP_PKEY_í¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1396 
EVP_PKEY_í¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1397 *
out
, 
size_t
 *
ouéí
,

1398 c⁄° *
ö
, 
size_t
 
öÀn
);

1399 
EVP_PKEY_de¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1400 
EVP_PKEY_de¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1401 *
out
, 
size_t
 *
ouéí
,

1402 c⁄° *
ö
, 
size_t
 
öÀn
);

1404 
EVP_PKEY_dîive_öô
(
EVP_PKEY_CTX
 *
˘x
);

1405 
EVP_PKEY_dîive_£t_≥î
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
≥î
);

1406 
EVP_PKEY_dîive
(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
);

1408 
	tEVP_PKEY_gí_cb
(
	tEVP_PKEY_CTX
 *
	t˘x
);

1410 
EVP_PKEY_∑ømgí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1411 
EVP_PKEY_∑ømgí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1412 
EVP_PKEY_keygí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1413 
EVP_PKEY_keygí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1414 
EVP_PKEY_check
(
EVP_PKEY_CTX
 *
˘x
);

1415 
EVP_PKEY_public_check
(
EVP_PKEY_CTX
 *
˘x
);

1416 
EVP_PKEY_∑øm_check
(
EVP_PKEY_CTX
 *
˘x
);

1418 
EVP_PKEY_CTX_£t_cb
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY_gí_cb
 *
cb
);

1419 
EVP_PKEY_gí_cb
 *
EVP_PKEY_CTX_gë_cb
(
EVP_PKEY_CTX
 *
˘x
);

1421 
EVP_PKEY_CTX_gë_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, 
idx
);

1423 
EVP_PKEY_mëh_£t_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1424 (*
öô
Ë(
EVP_PKEY_CTX
 *
˘x
));

1426 
EVP_PKEY_mëh_£t_c›y
(
EVP_PKEY_METHOD
 *
pmëh
,

1427 (*
c›y
Ë(
EVP_PKEY_CTX
 *
d°
,

1428 
EVP_PKEY_CTX
 *
§c
));

1430 
EVP_PKEY_mëh_£t_˛ónup
(
EVP_PKEY_METHOD
 *
pmëh
,

1431 (*
˛ónup
Ë(
EVP_PKEY_CTX
 *
˘x
));

1433 
EVP_PKEY_mëh_£t_∑ømgí
(
EVP_PKEY_METHOD
 *
pmëh
,

1434 (*
∑ømgí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1435 (*
∑ømgí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1436 
EVP_PKEY
 *
pkey
));

1438 
EVP_PKEY_mëh_£t_keygí
(
EVP_PKEY_METHOD
 *
pmëh
,

1439 (*
keygí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1440 (*
keygí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1441 
EVP_PKEY
 *
pkey
));

1443 
EVP_PKEY_mëh_£t_sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1444 (*
sign_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1445 (*
sign
Ë(
EVP_PKEY_CTX
 *
˘x
,

1446 *
sig
, 
size_t
 *
sigÀn
,

1447 c⁄° *
tbs
,

1448 
size_t
 
tb¶í
));

1450 
EVP_PKEY_mëh_£t_vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1451 (*
vîify_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1452 (*
vîify
Ë(
EVP_PKEY_CTX
 *
˘x
,

1453 c⁄° *
sig
,

1454 
size_t
 
sigÀn
,

1455 c⁄° *
tbs
,

1456 
size_t
 
tb¶í
));

1458 
EVP_PKEY_mëh_£t_vîify_ªcovî
(
EVP_PKEY_METHOD
 *
pmëh
,

1459 (*
vîify_ªcovî_öô
Ë(
EVP_PKEY_CTX


1460 *
˘x
),

1461 (*
vîify_ªcovî
Ë(
EVP_PKEY_CTX


1462 *
˘x
,

1464 *
sig
,

1465 
size_t
 *
sigÀn
,

1467 *
tbs
,

1468 
size_t
 
tb¶í
));

1470 
EVP_PKEY_mëh_£t_sign˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1471 (*
sign˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1472 
EVP_MD_CTX
 *
m˘x
),

1473 (*
sign˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1474 *
sig
,

1475 
size_t
 *
sigÀn
,

1476 
EVP_MD_CTX
 *
m˘x
));

1478 
EVP_PKEY_mëh_£t_vîify˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1479 (*
vîify˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1480 
EVP_MD_CTX
 *
m˘x
),

1481 (*
vîify˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1482 c⁄° *
sig
,

1483 
sigÀn
,

1484 
EVP_MD_CTX
 *
m˘x
));

1486 
EVP_PKEY_mëh_£t_í¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1487 (*
í¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1488 (*
í¸y±‚
Ë(
EVP_PKEY_CTX
 *
˘x
,

1489 *
out
,

1490 
size_t
 *
ouéí
,

1491 c⁄° *
ö
,

1492 
size_t
 
öÀn
));

1494 
EVP_PKEY_mëh_£t_de¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1495 (*
de¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1496 (*
de¸y±
Ë(
EVP_PKEY_CTX
 *
˘x
,

1497 *
out
,

1498 
size_t
 *
ouéí
,

1499 c⁄° *
ö
,

1500 
size_t
 
öÀn
));

1502 
EVP_PKEY_mëh_£t_dîive
(
EVP_PKEY_METHOD
 *
pmëh
,

1503 (*
dîive_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1504 (*
dîive
Ë(
EVP_PKEY_CTX
 *
˘x
,

1505 *
key
,

1506 
size_t
 *
keyÀn
));

1508 
EVP_PKEY_mëh_£t_˘æ
(
EVP_PKEY_METHOD
 *
pmëh
,

1509 (*
˘æ
Ë(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
,

1510 *
p2
),

1511 (*
˘æ_°r
Ë(
EVP_PKEY_CTX
 *
˘x
,

1512 c⁄° *
ty≥
,

1513 c⁄° *
vÆue
));

1515 
EVP_PKEY_mëh_£t_dige°sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1516 (*
dige°sign
Ë(
EVP_MD_CTX
 *
˘x
,

1517 *
sig
,

1518 
size_t
 *
sigÀn
,

1519 c⁄° *
tbs
,

1520 
size_t
 
tb¶í
));

1522 
EVP_PKEY_mëh_£t_dige°vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1523 (*
dige°vîify
Ë(
EVP_MD_CTX
 *
˘x
,

1524 c⁄° *
sig
,

1525 
size_t
 
sigÀn
,

1526 c⁄° *
tbs
,

1527 
size_t
 
tb¶í
));

1529 
EVP_PKEY_mëh_£t_check
(
EVP_PKEY_METHOD
 *
pmëh
,

1530 (*
check
Ë(
EVP_PKEY
 *
pkey
));

1532 
EVP_PKEY_mëh_£t_public_check
(
EVP_PKEY_METHOD
 *
pmëh
,

1533 (*
check
Ë(
EVP_PKEY
 *
pkey
));

1535 
EVP_PKEY_mëh_£t_∑øm_check
(
EVP_PKEY_METHOD
 *
pmëh
,

1536 (*
check
Ë(
EVP_PKEY
 *
pkey
));

1538 
EVP_PKEY_mëh_£t_dige°_cu°om
(
EVP_PKEY_METHOD
 *
pmëh
,

1539 (*
dige°_cu°om
Ë(
EVP_PKEY_CTX
 *
˘x
,

1540 
EVP_MD_CTX
 *
m˘x
));

1542 
EVP_PKEY_mëh_gë_öô
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1543 (**
pöô
Ë(
EVP_PKEY_CTX
 *
˘x
));

1545 
EVP_PKEY_mëh_gë_c›y
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1546 (**
pc›y
Ë(
EVP_PKEY_CTX
 *
d°
,

1547 
EVP_PKEY_CTX
 *
§c
));

1549 
EVP_PKEY_mëh_gë_˛ónup
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1550 (**
p˛ónup
Ë(
EVP_PKEY_CTX
 *
˘x
));

1552 
EVP_PKEY_mëh_gë_∑ømgí
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1553 (**
µ¨amgí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1554 (**
µ¨amgí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1555 
EVP_PKEY
 *
pkey
));

1557 
EVP_PKEY_mëh_gë_keygí
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1558 (**
pkeygí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1559 (**
pkeygí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1560 
EVP_PKEY
 *
pkey
));

1562 
EVP_PKEY_mëh_gë_sign
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1563 (**
psign_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1564 (**
psign
Ë(
EVP_PKEY_CTX
 *
˘x
,

1565 *
sig
, 
size_t
 *
sigÀn
,

1566 c⁄° *
tbs
,

1567 
size_t
 
tb¶í
));

1569 
EVP_PKEY_mëh_gë_vîify
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1570 (**
pvîify_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1571 (**
pvîify
Ë(
EVP_PKEY_CTX
 *
˘x
,

1572 c⁄° *
sig
,

1573 
size_t
 
sigÀn
,

1574 c⁄° *
tbs
,

1575 
size_t
 
tb¶í
));

1577 
EVP_PKEY_mëh_gë_vîify_ªcovî
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1578 (**
pvîify_ªcovî_öô
Ë(
EVP_PKEY_CTX


1579 *
˘x
),

1580 (**
pvîify_ªcovî
Ë(
EVP_PKEY_CTX


1581 *
˘x
,

1583 *
sig
,

1584 
size_t
 *
sigÀn
,

1586 *
tbs
,

1587 
size_t
 
tb¶í
));

1589 
EVP_PKEY_mëh_gë_sign˘x
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1590 (**
psign˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1591 
EVP_MD_CTX
 *
m˘x
),

1592 (**
psign˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1593 *
sig
,

1594 
size_t
 *
sigÀn
,

1595 
EVP_MD_CTX
 *
m˘x
));

1597 
EVP_PKEY_mëh_gë_vîify˘x
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1598 (**
pvîify˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1599 
EVP_MD_CTX
 *
m˘x
),

1600 (**
pvîify˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1601 c⁄° *
sig
,

1602 
sigÀn
,

1603 
EVP_MD_CTX
 *
m˘x
));

1605 
EVP_PKEY_mëh_gë_í¸y±
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1606 (**
≥n¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1607 (**
≥n¸y±‚
Ë(
EVP_PKEY_CTX
 *
˘x
,

1608 *
out
,

1609 
size_t
 *
ouéí
,

1610 c⁄° *
ö
,

1611 
size_t
 
öÀn
));

1613 
EVP_PKEY_mëh_gë_de¸y±
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1614 (**
pde¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1615 (**
pde¸y±
Ë(
EVP_PKEY_CTX
 *
˘x
,

1616 *
out
,

1617 
size_t
 *
ouéí
,

1618 c⁄° *
ö
,

1619 
size_t
 
öÀn
));

1621 
EVP_PKEY_mëh_gë_dîive
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1622 (**
pdîive_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1623 (**
pdîive
Ë(
EVP_PKEY_CTX
 *
˘x
,

1624 *
key
,

1625 
size_t
 *
keyÀn
));

1627 
EVP_PKEY_mëh_gë_˘æ
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1628 (**
p˘æ
Ë(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
,

1629 *
p2
),

1630 (**
p˘æ_°r
Ë(
EVP_PKEY_CTX
 *
˘x
,

1631 c⁄° *
ty≥
,

1632 c⁄° *
vÆue
));

1634 
EVP_PKEY_mëh_gë_dige°sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1635 (**
dige°sign
Ë(
EVP_MD_CTX
 *
˘x
,

1636 *
sig
,

1637 
size_t
 *
sigÀn
,

1638 c⁄° *
tbs
,

1639 
size_t
 
tb¶í
));

1641 
EVP_PKEY_mëh_gë_dige°vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1642 (**
dige°vîify
Ë(
EVP_MD_CTX
 *
˘x
,

1643 c⁄° *
sig
,

1644 
size_t
 
sigÀn
,

1645 c⁄° *
tbs
,

1646 
size_t
 
tb¶í
));

1648 
EVP_PKEY_mëh_gë_check
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1649 (**
pcheck
Ë(
EVP_PKEY
 *
pkey
));

1651 
EVP_PKEY_mëh_gë_public_check
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1652 (**
pcheck
Ë(
EVP_PKEY
 *
pkey
));

1654 
EVP_PKEY_mëh_gë_∑øm_check
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1655 (**
pcheck
Ë(
EVP_PKEY
 *
pkey
));

1657 
EVP_PKEY_mëh_gë_dige°_cu°om
(
EVP_PKEY_METHOD
 *
pmëh
,

1658 (**
pdige°_cu°om
Ë(
EVP_PKEY_CTX
 *
˘x
,

1659 
EVP_MD_CTX
 *
m˘x
));

1660 
EVP_add_Æg_moduÀ
();

1663 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ocsp.h

10 #i‚de‡
HEADER_OCSP_H


11 
	#HEADER_OCSP_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

31 
	#OCSP_REVOKED_STATUS_NOSTATUS
 -1

	)

32 
	#OCSP_REVOKED_STATUS_UNSPECIFIED
 0

	)

33 
	#OCSP_REVOKED_STATUS_KEYCOMPROMISE
 1

	)

34 
	#OCSP_REVOKED_STATUS_CACOMPROMISE
 2

	)

35 
	#OCSP_REVOKED_STATUS_AFFILIATIONCHANGED
 3

	)

36 
	#OCSP_REVOKED_STATUS_SUPERSEDED
 4

	)

37 
	#OCSP_REVOKED_STATUS_CESSATIONOFOPERATION
 5

	)

38 
	#OCSP_REVOKED_STATUS_CERTIFICATEHOLD
 6

	)

39 
	#OCSP_REVOKED_STATUS_REMOVEFROMCRL
 8

	)

42 #i‚de‡
OPENSSL_NO_OCSP


44 
	~<›ís¶/os¶_typ.h
>

45 
	~<›ís¶/x509.h
>

46 
	~<›ís¶/x509v3.h
>

47 
	~<›ís¶/ß„°ack.h
>

48 
	~<›ís¶/oc•îr.h
>

50 #ifde‡ 
__˝lu•lus


56 
	#OCSP_DEFAULT_NONCE_LENGTH
 16

	)

58 
	#OCSP_NOCERTS
 0x1

	)

59 
	#OCSP_NOINTERN
 0x2

	)

60 
	#OCSP_NOSIGS
 0x4

	)

61 
	#OCSP_NOCHAIN
 0x8

	)

62 
	#OCSP_NOVERIFY
 0x10

	)

63 
	#OCSP_NOEXPLICIT
 0x20

	)

64 
	#OCSP_NOCASIGN
 0x40

	)

65 
	#OCSP_NODELEGATED
 0x80

	)

66 
	#OCSP_NOCHECKS
 0x100

	)

67 
	#OCSP_TRUSTOTHER
 0x200

	)

68 
	#OCSP_RESPID_KEY
 0x400

	)

69 
	#OCSP_NOTIME
 0x800

	)

71 
oc•_˚π_id_°
 
	tOCSP_CERTID
;

73 
DEFINE_STACK_OF
(
OCSP_CERTID
)

75 
oc•_⁄e_ªque°_°
 
	tOCSP_ONEREQ
;

77 
DEFINE_STACK_OF
(
OCSP_ONEREQ
)

79 
oc•_ªq_öfo_°
 
	tOCSP_REQINFO
;

80 
oc•_sig«tuª_°
 
	tOCSP_SIGNATURE
;

81 
oc•_ªque°_°
 
	tOCSP_REQUEST
;

83 
	#OCSP_RESPONSE_STATUS_SUCCESSFUL
 0

	)

84 
	#OCSP_RESPONSE_STATUS_MALFORMEDREQUEST
 1

	)

85 
	#OCSP_RESPONSE_STATUS_INTERNALERROR
 2

	)

86 
	#OCSP_RESPONSE_STATUS_TRYLATER
 3

	)

87 
	#OCSP_RESPONSE_STATUS_SIGREQUIRED
 5

	)

88 
	#OCSP_RESPONSE_STATUS_UNAUTHORIZED
 6

	)

90 
oc•_ª•_byãs_°
 
	tOCSP_RESPBYTES
;

92 
	#V_OCSP_RESPID_NAME
 0

	)

93 
	#V_OCSP_RESPID_KEY
 1

	)

95 
DEFINE_STACK_OF
(
OCSP_RESPID
)

97 
oc•_ªvoked_öfo_°
 
	tOCSP_REVOKEDINFO
;

99 
	#V_OCSP_CERTSTATUS_GOOD
 0

	)

100 
	#V_OCSP_CERTSTATUS_REVOKED
 1

	)

101 
	#V_OCSP_CERTSTATUS_UNKNOWN
 2

	)

103 
oc•_˚π_°©us_°
 
	tOCSP_CERTSTATUS
;

104 
oc•_sögÀ_ª•⁄£_°
 
	tOCSP_SINGLERESP
;

106 
DEFINE_STACK_OF
(
OCSP_SINGLERESP
)

108 
oc•_ª•⁄£_d©a_°
 
	tOCSP_RESPDATA
;

110 
oc•_basic_ª•⁄£_°
 
	tOCSP_BASICRESP
;

112 
oc•_¸l_id_°
 
	tOCSP_CRLID
;

113 
oc•_£rvi˚_loˇt‹_°
 
	tOCSP_SERVICELOC
;

115 
	#PEM_STRING_OCSP_REQUEST
 "OCSP REQUEST"

	)

116 
	#PEM_STRING_OCSP_RESPONSE
 "OCSP RESPONSE"

	)

118 
	#d2i_OCSP_REQUEST_bio
(
bp
,
p
Ë
	`ASN1_d2i_bio_of
(
OCSP_REQUEST
,
OCSP_REQUEST_√w
,
d2i_OCSP_REQUEST
,bp,p)

	)

120 
	#d2i_OCSP_RESPONSE_bio
(
bp
,
p
Ë
	`ASN1_d2i_bio_of
(
OCSP_RESPONSE
,
OCSP_RESPONSE_√w
,
d2i_OCSP_RESPONSE
,bp,p)

	)

122 
	#PEM_ªad_bio_OCSP_REQUEST
(
bp
,
x
,
cb
Ë(
OCSP_REQUEST
 *)
	`PEM_ASN1_ªad_bio
( \

123 (*(*)())
d2i_OCSP_REQUEST
,
PEM_STRING_OCSP_REQUEST
, \

124 
bp
,(**)(
x
),
cb
,
NULL
)

	)

126 
	#PEM_ªad_bio_OCSP_RESPONSE
(
bp
,
x
,
cb
Ë(
OCSP_RESPONSE
 *)
	`PEM_ASN1_ªad_bio
(\

127 (*(*)())
d2i_OCSP_RESPONSE
,
PEM_STRING_OCSP_RESPONSE
, \

128 
bp
,(**)(
x
),
cb
,
NULL
)

	)

130 
	#PEM_wrôe_bio_OCSP_REQUEST
(
bp
,
o
) \

131 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_OCSP_REQUEST
,
PEM_STRING_OCSP_REQUEST
,\

132 
bp
,(*)(
o
), 
NULL
,NULL,0,NULL,NULL)

	)

134 
	#PEM_wrôe_bio_OCSP_RESPONSE
(
bp
,
o
) \

135 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_OCSP_RESPONSE
,
PEM_STRING_OCSP_RESPONSE
,\

136 
bp
,(*)(
o
), 
NULL
,NULL,0,NULL,NULL)

	)

138 
	#i2d_OCSP_RESPONSE_bio
(
bp
,
o
Ë
	`ASN1_i2d_bio_of
(
OCSP_RESPONSE
,
i2d_OCSP_RESPONSE
,bp,o)

	)

140 
	#i2d_OCSP_REQUEST_bio
(
bp
,
o
Ë
	`ASN1_i2d_bio_of
(
OCSP_REQUEST
,
i2d_OCSP_REQUEST
,bp,o)

	)

142 
	#ASN1_BIT_STRING_dige°
(
d©a
,
ty≥
,
md
,
Àn
) \

143 
	`ASN1_ôem_dige°
(
	`ASN1_ITEM_Ωå
(
ASN1_BIT_STRING
),
ty≥
,
d©a
,
md
,
Àn
)

	)

145 
	#OCSP_CERTSTATUS_dup
(
cs
)\

146 (
OCSP_CERTSTATUS
*)
	`ASN1_dup
(((*)())
i2d_OCSP_CERTSTATUS
,\

147 (*(*)())
d2i_OCSP_CERTSTATUS
,(*)(
cs
))

	)

149 
OCSP_CERTID
 *
OCSP_CERTID_dup
(OCSP_CERTID *
id
);

151 
OCSP_RESPONSE
 *
OCSP_£ndªq_bio
(
BIO
 *
b
, c⁄° *
∑th
, 
OCSP_REQUEST
 *
ªq
);

152 
OCSP_REQ_CTX
 *
OCSP_£ndªq_√w
(
BIO
 *
io
, c⁄° *
∑th
, 
OCSP_REQUEST
 *
ªq
,

153 
maxlöe
);

154 
OCSP_REQ_CTX_nbio
(
OCSP_REQ_CTX
 *
r˘x
);

155 
OCSP_£ndªq_nbio
(
OCSP_RESPONSE
 **
¥e•
, 
OCSP_REQ_CTX
 *
r˘x
);

156 
OCSP_REQ_CTX
 *
OCSP_REQ_CTX_√w
(
BIO
 *
io
, 
maxlöe
);

157 
OCSP_REQ_CTX_‰ì
(
OCSP_REQ_CTX
 *
r˘x
);

158 
OCSP_£t_max_ª•⁄£_Àngth
(
OCSP_REQ_CTX
 *
r˘x
, 
Àn
);

159 
OCSP_REQ_CTX_i2d
(
OCSP_REQ_CTX
 *
r˘x
, c⁄° 
ASN1_ITEM
 *
ô
,

160 
ASN1_VALUE
 *
vÆ
);

161 
OCSP_REQ_CTX_nbio_d2i
(
OCSP_REQ_CTX
 *
r˘x
, 
ASN1_VALUE
 **
pvÆ
,

162 c⁄° 
ASN1_ITEM
 *
ô
);

163 
BIO
 *
OCSP_REQ_CTX_gë0_mem_bio
(
OCSP_REQ_CTX
 *
r˘x
);

164 
OCSP_REQ_CTX_hâp
(
OCSP_REQ_CTX
 *
r˘x
, c⁄° *
›
, c⁄° *
∑th
);

165 
OCSP_REQ_CTX_£t1_ªq
(
OCSP_REQ_CTX
 *
r˘x
, 
OCSP_REQUEST
 *
ªq
);

166 
OCSP_REQ_CTX_add1_hódî
(
OCSP_REQ_CTX
 *
r˘x
,

167 c⁄° *
«me
, c⁄° *
vÆue
);

169 
OCSP_CERTID
 *
OCSP_˚π_to_id
(c⁄° 
EVP_MD
 *
dg°
, c⁄° 
X509
 *
subje˘
,

170 c⁄° 
X509
 *
issuî
);

172 
OCSP_CERTID
 *
OCSP_˚π_id_√w
(c⁄° 
EVP_MD
 *
dg°
,

173 c⁄° 
X509_NAME
 *
issuîName
,

174 c⁄° 
ASN1_BIT_STRING
 *
issuîKey
,

175 c⁄° 
ASN1_INTEGER
 *
£rülNumbî
);

177 
OCSP_ONEREQ
 *
OCSP_ªque°_add0_id
(
OCSP_REQUEST
 *
ªq
, 
OCSP_CERTID
 *
cid
);

179 
OCSP_ªque°_add1_n⁄˚
(
OCSP_REQUEST
 *
ªq
, *
vÆ
, 
Àn
);

180 
OCSP_basic_add1_n⁄˚
(
OCSP_BASICRESP
 *
ª•
, *
vÆ
, 
Àn
);

181 
OCSP_check_n⁄˚
(
OCSP_REQUEST
 *
ªq
, 
OCSP_BASICRESP
 *
bs
);

182 
OCSP_c›y_n⁄˚
(
OCSP_BASICRESP
 *
ª•
, 
OCSP_REQUEST
 *
ªq
);

184 
OCSP_ªque°_£t1_«me
(
OCSP_REQUEST
 *
ªq
, 
X509_NAME
 *
nm
);

185 
OCSP_ªque°_add1_˚π
(
OCSP_REQUEST
 *
ªq
, 
X509
 *
˚π
);

187 
OCSP_ªque°_sign
(
OCSP_REQUEST
 *
ªq
,

188 
X509
 *
sig√r
,

189 
EVP_PKEY
 *
key
,

190 c⁄° 
EVP_MD
 *
dg°
,

191 
STACK_OF
(
X509
Ë*
˚πs
, 
Êags
);

193 
OCSP_ª•⁄£_°©us
(
OCSP_RESPONSE
 *
ª•
);

194 
OCSP_BASICRESP
 *
OCSP_ª•⁄£_gë1_basic
(
OCSP_RESPONSE
 *
ª•
);

196 c⁄° 
ASN1_OCTET_STRING
 *
OCSP_ª•_gë0_sig«tuª
(c⁄° 
OCSP_BASICRESP
 *
bs
);

197 c⁄° 
X509_ALGOR
 *
OCSP_ª•_gë0_tbs_sigÆg
(c⁄° 
OCSP_BASICRESP
 *
bs
);

198 c⁄° 
OCSP_RESPDATA
 *
OCSP_ª•_gë0_ª•d©a
(c⁄° 
OCSP_BASICRESP
 *
bs
);

199 
OCSP_ª•_gë0_sig√r
(
OCSP_BASICRESP
 *
bs
, 
X509
 **
sig√r
,

200 
STACK_OF
(
X509
Ë*
exåa_˚πs
);

202 
OCSP_ª•_cou¡
(
OCSP_BASICRESP
 *
bs
);

203 
OCSP_SINGLERESP
 *
OCSP_ª•_gë0
(
OCSP_BASICRESP
 *
bs
, 
idx
);

204 c⁄° 
ASN1_GENERALIZEDTIME
 *
OCSP_ª•_gë0_¥odu˚d_©
(c⁄° 
OCSP_BASICRESP
* 
bs
);

205 c⁄° 
STACK_OF
(
X509
Ë*
OCSP_ª•_gë0_˚πs
(c⁄° 
OCSP_BASICRESP
 *
bs
);

206 
OCSP_ª•_gë0_id
(c⁄° 
OCSP_BASICRESP
 *
bs
,

207 c⁄° 
ASN1_OCTET_STRING
 **
pid
,

208 c⁄° 
X509_NAME
 **
≤ame
);

209 
OCSP_ª•_gë1_id
(c⁄° 
OCSP_BASICRESP
 *
bs
,

210 
ASN1_OCTET_STRING
 **
pid
,

211 
X509_NAME
 **
≤ame
);

213 
OCSP_ª•_föd
(
OCSP_BASICRESP
 *
bs
, 
OCSP_CERTID
 *
id
, 
œ°
);

214 
OCSP_sögÀ_gë0_°©us
(
OCSP_SINGLERESP
 *
sögÀ
, *
ªas⁄
,

215 
ASN1_GENERALIZEDTIME
 **
ªvtime
,

216 
ASN1_GENERALIZEDTIME
 **
thisupd
,

217 
ASN1_GENERALIZEDTIME
 **
√xtupd
);

218 
OCSP_ª•_föd_°©us
(
OCSP_BASICRESP
 *
bs
, 
OCSP_CERTID
 *
id
, *
°©us
,

219 *
ªas⁄
,

220 
ASN1_GENERALIZEDTIME
 **
ªvtime
,

221 
ASN1_GENERALIZEDTIME
 **
thisupd
,

222 
ASN1_GENERALIZEDTIME
 **
√xtupd
);

223 
OCSP_check_vÆidôy
(
ASN1_GENERALIZEDTIME
 *
thisupd
,

224 
ASN1_GENERALIZEDTIME
 *
√xtupd
, 
£c
, 
max£c
);

226 
OCSP_ªque°_vîify
(
OCSP_REQUEST
 *
ªq
, 
STACK_OF
(
X509
Ë*
˚πs
,

227 
X509_STORE
 *
°‹e
, 
Êags
);

229 
OCSP_∑r£_uæ
(c⁄° *
uæ
, **
pho°
, **
µ‹t
, **
µ©h
,

230 *
ps¶
);

232 
OCSP_id_issuî_cmp
(c⁄° 
OCSP_CERTID
 *
a
, c⁄° OCSP_CERTID *
b
);

233 
OCSP_id_cmp
(c⁄° 
OCSP_CERTID
 *
a
, c⁄° OCSP_CERTID *
b
);

235 
OCSP_ªque°_⁄îeq_cou¡
(
OCSP_REQUEST
 *
ªq
);

236 
OCSP_ONEREQ
 *
OCSP_ªque°_⁄îeq_gë0
(
OCSP_REQUEST
 *
ªq
, 
i
);

237 
OCSP_CERTID
 *
OCSP_⁄îeq_gë0_id
(
OCSP_ONEREQ
 *
⁄e
);

238 
OCSP_id_gë0_öfo
(
ASN1_OCTET_STRING
 **
piNameHash
, 
ASN1_OBJECT
 **
pmd
,

239 
ASN1_OCTET_STRING
 **
pikeyHash
,

240 
ASN1_INTEGER
 **
p£rül
, 
OCSP_CERTID
 *
cid
);

241 
OCSP_ªque°_is_sig√d
(
OCSP_REQUEST
 *
ªq
);

242 
OCSP_RESPONSE
 *
OCSP_ª•⁄£_¸óã
(
°©us
, 
OCSP_BASICRESP
 *
bs
);

243 
OCSP_SINGLERESP
 *
OCSP_basic_add1_°©us
(
OCSP_BASICRESP
 *
r•
,

244 
OCSP_CERTID
 *
cid
,

245 
°©us
, 
ªas⁄
,

246 
ASN1_TIME
 *
ªvtime
,

247 
ASN1_TIME
 *
thisupd
,

248 
ASN1_TIME
 *
√xtupd
);

249 
OCSP_basic_add1_˚π
(
OCSP_BASICRESP
 *
ª•
, 
X509
 *
˚π
);

250 
OCSP_basic_sign
(
OCSP_BASICRESP
 *
br•
,

251 
X509
 *
sig√r
, 
EVP_PKEY
 *
key
, c⁄° 
EVP_MD
 *
dg°
,

252 
STACK_OF
(
X509
Ë*
˚πs
, 
Êags
);

253 
OCSP_basic_sign_˘x
(
OCSP_BASICRESP
 *
br•
,

254 
X509
 *
sig√r
, 
EVP_MD_CTX
 *
˘x
,

255 
STACK_OF
(
X509
Ë*
˚πs
, 
Êags
);

256 
OCSP_RESPID_£t_by_«me
(
OCSP_RESPID
 *
ª•id
, 
X509
 *
˚π
);

257 
OCSP_RESPID_£t_by_key
(
OCSP_RESPID
 *
ª•id
, 
X509
 *
˚π
);

258 
OCSP_RESPID_m©ch
(
OCSP_RESPID
 *
ª•id
, 
X509
 *
˚π
);

260 
X509_EXTENSION
 *
OCSP_¸lID_√w
(c⁄° *
uæ
, *
n
, *
tim
);

262 
X509_EXTENSION
 *
OCSP_ac˚±_ª•⁄£s_√w
(**
oids
);

264 
X509_EXTENSION
 *
OCSP_¨chive_cutoff_√w
(*
tim
);

266 
X509_EXTENSION
 *
OCSP_uæ_sv˛oc_√w
(
X509_NAME
 *
issuî
, c⁄° **
uæs
);

268 
OCSP_REQUEST_gë_ext_cou¡
(
OCSP_REQUEST
 *
x
);

269 
OCSP_REQUEST_gë_ext_by_NID
(
OCSP_REQUEST
 *
x
, 
nid
, 
œ°pos
);

270 
OCSP_REQUEST_gë_ext_by_OBJ
(
OCSP_REQUEST
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

271 
œ°pos
);

272 
OCSP_REQUEST_gë_ext_by_¸ôiˇl
(
OCSP_REQUEST
 *
x
, 
¸ô
, 
œ°pos
);

273 
X509_EXTENSION
 *
OCSP_REQUEST_gë_ext
(
OCSP_REQUEST
 *
x
, 
loc
);

274 
X509_EXTENSION
 *
OCSP_REQUEST_dñëe_ext
(
OCSP_REQUEST
 *
x
, 
loc
);

275 *
OCSP_REQUEST_gë1_ext_d2i
(
OCSP_REQUEST
 *
x
, 
nid
, *
¸ô
,

276 *
idx
);

277 
OCSP_REQUEST_add1_ext_i2d
(
OCSP_REQUEST
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

278 
Êags
);

279 
OCSP_REQUEST_add_ext
(
OCSP_REQUEST
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

281 
OCSP_ONEREQ_gë_ext_cou¡
(
OCSP_ONEREQ
 *
x
);

282 
OCSP_ONEREQ_gë_ext_by_NID
(
OCSP_ONEREQ
 *
x
, 
nid
, 
œ°pos
);

283 
OCSP_ONEREQ_gë_ext_by_OBJ
(
OCSP_ONEREQ
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

284 
OCSP_ONEREQ_gë_ext_by_¸ôiˇl
(
OCSP_ONEREQ
 *
x
, 
¸ô
, 
œ°pos
);

285 
X509_EXTENSION
 *
OCSP_ONEREQ_gë_ext
(
OCSP_ONEREQ
 *
x
, 
loc
);

286 
X509_EXTENSION
 *
OCSP_ONEREQ_dñëe_ext
(
OCSP_ONEREQ
 *
x
, 
loc
);

287 *
OCSP_ONEREQ_gë1_ext_d2i
(
OCSP_ONEREQ
 *
x
, 
nid
, *
¸ô
, *
idx
);

288 
OCSP_ONEREQ_add1_ext_i2d
(
OCSP_ONEREQ
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

289 
Êags
);

290 
OCSP_ONEREQ_add_ext
(
OCSP_ONEREQ
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

292 
OCSP_BASICRESP_gë_ext_cou¡
(
OCSP_BASICRESP
 *
x
);

293 
OCSP_BASICRESP_gë_ext_by_NID
(
OCSP_BASICRESP
 *
x
, 
nid
, 
œ°pos
);

294 
OCSP_BASICRESP_gë_ext_by_OBJ
(
OCSP_BASICRESP
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

295 
œ°pos
);

296 
OCSP_BASICRESP_gë_ext_by_¸ôiˇl
(
OCSP_BASICRESP
 *
x
, 
¸ô
,

297 
œ°pos
);

298 
X509_EXTENSION
 *
OCSP_BASICRESP_gë_ext
(
OCSP_BASICRESP
 *
x
, 
loc
);

299 
X509_EXTENSION
 *
OCSP_BASICRESP_dñëe_ext
(
OCSP_BASICRESP
 *
x
, 
loc
);

300 *
OCSP_BASICRESP_gë1_ext_d2i
(
OCSP_BASICRESP
 *
x
, 
nid
, *
¸ô
,

301 *
idx
);

302 
OCSP_BASICRESP_add1_ext_i2d
(
OCSP_BASICRESP
 *
x
, 
nid
, *
vÆue
,

303 
¸ô
, 
Êags
);

304 
OCSP_BASICRESP_add_ext
(
OCSP_BASICRESP
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

306 
OCSP_SINGLERESP_gë_ext_cou¡
(
OCSP_SINGLERESP
 *
x
);

307 
OCSP_SINGLERESP_gë_ext_by_NID
(
OCSP_SINGLERESP
 *
x
, 
nid
, 
œ°pos
);

308 
OCSP_SINGLERESP_gë_ext_by_OBJ
(
OCSP_SINGLERESP
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

309 
œ°pos
);

310 
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
(
OCSP_SINGLERESP
 *
x
, 
¸ô
,

311 
œ°pos
);

312 
X509_EXTENSION
 *
OCSP_SINGLERESP_gë_ext
(
OCSP_SINGLERESP
 *
x
, 
loc
);

313 
X509_EXTENSION
 *
OCSP_SINGLERESP_dñëe_ext
(
OCSP_SINGLERESP
 *
x
, 
loc
);

314 *
OCSP_SINGLERESP_gë1_ext_d2i
(
OCSP_SINGLERESP
 *
x
, 
nid
, *
¸ô
,

315 *
idx
);

316 
OCSP_SINGLERESP_add1_ext_i2d
(
OCSP_SINGLERESP
 *
x
, 
nid
, *
vÆue
,

317 
¸ô
, 
Êags
);

318 
OCSP_SINGLERESP_add_ext
(
OCSP_SINGLERESP
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

319 c⁄° 
OCSP_CERTID
 *
OCSP_SINGLERESP_gë0_id
(c⁄° 
OCSP_SINGLERESP
 *
x
);

321 
DECLARE_ASN1_FUNCTIONS
(
OCSP_SINGLERESP
)

322 
DECLARE_ASN1_FUNCTIONS
(
OCSP_CERTSTATUS
)

323 
DECLARE_ASN1_FUNCTIONS
(
OCSP_REVOKEDINFO
)

324 
DECLARE_ASN1_FUNCTIONS
(
OCSP_BASICRESP
)

325 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPDATA
)

326 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPID
)

327 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPONSE
)

328 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPBYTES
)

329 
DECLARE_ASN1_FUNCTIONS
(
OCSP_ONEREQ
)

330 
DECLARE_ASN1_FUNCTIONS
(
OCSP_CERTID
)

331 
DECLARE_ASN1_FUNCTIONS
(
OCSP_REQUEST
)

332 
DECLARE_ASN1_FUNCTIONS
(
OCSP_SIGNATURE
)

333 
DECLARE_ASN1_FUNCTIONS
(
OCSP_REQINFO
)

334 
DECLARE_ASN1_FUNCTIONS
(
OCSP_CRLID
)

335 
DECLARE_ASN1_FUNCTIONS
(
OCSP_SERVICELOC
)

337 c⁄° *
OCSP_ª•⁄£_°©us_°r
(
s
);

338 c⁄° *
OCSP_˚π_°©us_°r
(
s
);

339 c⁄° *
OCSP_¸l_ªas⁄_°r
(
s
);

341 
OCSP_REQUEST_¥öt
(
BIO
 *
bp
, 
OCSP_REQUEST
 *
a
, 
Êags
);

342 
OCSP_RESPONSE_¥öt
(
BIO
 *
bp
, 
OCSP_RESPONSE
 *
o
, 
Êags
);

344 
OCSP_basic_vîify
(
OCSP_BASICRESP
 *
bs
, 
STACK_OF
(
X509
Ë*
˚πs
,

345 
X509_STORE
 *
°
, 
Êags
);

348 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/opensslv.h

10 #i‚de‡
HEADER_OPENSSLV_H


11 
	#HEADER_OPENSSLV_H


	)

13 #ifde‡ 
__˝lu•lus


42 
	#OPENSSL_VERSION_NUMBER
 0x101010efL

	)

43 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.1.1¿ 15 M¨ 2022"

	)

94 
	#SHLIB_VERSION_HISTORY
 ""

	)

95 
	#SHLIB_VERSION_NUMBER
 "1.1"

	)

98 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rand.h

10 #i‚de‡
HEADER_RAND_H


11 
	#HEADER_RAND_H


	)

13 
	~<°dlib.h
>

14 
	~<›ís¶/os¶_typ.h
>

15 
	~<›ís¶/e_os2.h
>

16 
	~<›ís¶/øndîr.h
>

18 #ifde‡ 
__˝lu•lus


22 
	sønd_mëh_°
 {

23 (*
£ed
Ë(c⁄° *
buf
, 
num
);

24 (*
byãs
Ë(*
buf
, 
num
);

25 (*
˛ónup
) ();

26 (*
add
Ë(c⁄° *
buf
, 
num
, 
øndom√ss
);

27 (*
p£ud‹™d
Ë(*
buf
, 
num
);

28 (*
°©us
) ();

31 
RAND_£t_ønd_mëhod
(c⁄° 
RAND_METHOD
 *
mëh
);

32 c⁄° 
RAND_METHOD
 *
RAND_gë_ønd_mëhod
();

33 #i‚de‡
OPENSSL_NO_ENGINE


34 
RAND_£t_ønd_ígöe
(
ENGINE
 *
ígöe
);

37 
RAND_METHOD
 *
RAND_O≥nSSL
();

39 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

40 
	#RAND_˛ónup
(Ë0Ë

	)

42 
RAND_byãs
(*
buf
, 
num
);

43 
RAND_¥iv_byãs
(*
buf
, 
num
);

44 
DEPRECATEDIN_1_1_0
(
RAND_p£udo_byãs
(*
buf
, 
num
))

46 
RAND_£ed
(c⁄° *
buf
, 
num
);

47 
RAND_kìp_øndom_devi˚s_›í
(
kìp
);

49 #i‡
deföed
(
__ANDROID__
Ë&& deföed(
__NDK_FPABI__
)

50 
__NDK_FPABI__


52 
RAND_add
(c⁄° *
buf
, 
num
, 
øndom√ss
);

53 
RAND_lﬂd_fûe
(c⁄° *
fûe
, 
max_byãs
);

54 
RAND_wrôe_fûe
(c⁄° *
fûe
);

55 c⁄° *
RAND_fûe_«me
(*
fûe
, 
size_t
 
num
);

56 
RAND_°©us
();

58 #i‚de‡
OPENSSL_NO_EGD


59 
RAND_quîy_egd_byãs
(c⁄° *
∑th
, *
buf
, 
byãs
);

60 
RAND_egd
(c⁄° *
∑th
);

61 
RAND_egd_byãs
(c⁄° *
∑th
, 
byãs
);

64 
RAND_pﬁl
();

66 #i‡
deföed
(
_WIN32
Ë&& (deföed(
BASETYPES
Ë|| deföed(
_WINDEF_H
))

68 
DEPRECATEDIN_1_1_0
(
RAND_s¸ìn
())

69 
DEPRECATEDIN_1_1_0
(
RAND_evít
(
UINT
, 
WPARAM
, 
LPARAM
))

73 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/safestack.h

10 #i‚de‡
HEADER_SAFESTACK_H


11 
	#HEADER_SAFESTACK_H


	)

13 
	~<›ís¶/°ack.h
>

14 
	~<›ís¶/e_os2.h
>

16 #ifde‡
__˝lu•lus


20 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
type

22 
	#SKM_DEFINE_STACK_OF
(
t1
, 
t2
, 
t3
) \

23 
	`STACK_OF
(
t1
); \

24 (*
	tsk_
##
	tt1
##
	t_compfunc
)(c⁄° 
	tt3
 * c⁄° *
	ta
, c⁄°Å3 *c⁄° *
	tb
); \

25 (*
	tsk_
##
	tt1
##
	t_‰ìfunc
)(
	tt3
 *
	ta
); \

26 
t3
 * (*
	tsk_
##
	tt1
##
	t_c›yfunc
)(c⁄° 
	tt3
 *
	ta
); \

27 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_num
(c⁄° 
	`STACK_OF
—1Ë*
sk
) \

29  
	`OPENSSL_sk_num
((c⁄° 
OPENSSL_STACK
 *)
sk
); \

31 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_vÆue
(c⁄° 
	`STACK_OF
—1Ë*
sk
, 
idx
) \

33  (
t2
 *)
	`OPENSSL_sk_vÆue
((c⁄° 
OPENSSL_STACK
 *)
sk
, 
idx
); \

35 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_√w
(sk_##t1##
_compfunc
 
com∑ª
) \

37  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_√w
((
OPENSSL_sk_compfunc
)
com∑ª
); \

39 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_√w_nuŒ
() \

41  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_√w_nuŒ
(); \

43 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_√w_ª£rve
(sk_##t1##
_compfunc
 
com∑ª
, 
n
) \

45  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_√w_ª£rve
((
OPENSSL_sk_compfunc
)
com∑ª
, 
n
); \

47 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_ª£rve
(
	`STACK_OF
—1Ë*
sk
, 
n
) \

49  
	`OPENSSL_sk_ª£rve
((
OPENSSL_STACK
 *)
sk
, 
n
); \

51 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_‰ì
(
	`STACK_OF
—1Ë*
sk
) \

53 
	`OPENSSL_sk_‰ì
((
OPENSSL_STACK
 *)
sk
); \

55 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_zîo
(
	`STACK_OF
—1Ë*
sk
) \

57 
	`OPENSSL_sk_zîo
((
OPENSSL_STACK
 *)
sk
); \

59 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_dñëe
(
	`STACK_OF
—1Ë*
sk
, 
i
) \

61  (
t2
 *)
	`OPENSSL_sk_dñëe
((
OPENSSL_STACK
 *)
sk
, 
i
); \

63 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_dñëe_±r
(
	`STACK_OF
—1Ë*
sk
,Å2 *
±r
) \

65  (
t2
 *)
	`OPENSSL_sk_dñëe_±r
((
OPENSSL_STACK
 *)
sk
, \

66 (c⁄° *)
±r
); \

68 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_push
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

70  
	`OPENSSL_sk_push
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

72 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_unshi·
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

74  
	`OPENSSL_sk_unshi·
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

76 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_p›
(
	`STACK_OF
—1Ë*
sk
) \

78  (
t2
 *)
	`OPENSSL_sk_p›
((
OPENSSL_STACK
 *)
sk
); \

80 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_shi·
(
	`STACK_OF
—1Ë*
sk
) \

82  (
t2
 *)
	`OPENSSL_sk_shi·
((
OPENSSL_STACK
 *)
sk
); \

84 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_p›_‰ì
(
	`STACK_OF
—1Ë*
sk
, sk_##t1##
_‰ìfunc
 
‰ìfunc
) \

86 
	`OPENSSL_sk_p›_‰ì
((
OPENSSL_STACK
 *)
sk
, (
OPENSSL_sk_‰ìfunc
)
‰ìfunc
); \

88 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_ö£π
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
, 
idx
) \

90  
	`OPENSSL_sk_ö£π
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
, 
idx
); \

92 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_£t
(
	`STACK_OF
—1Ë*
sk
, 
idx
,Å2 *
±r
) \

94  (
t2
 *)
	`OPENSSL_sk_£t
((
OPENSSL_STACK
 *)
sk
, 
idx
, (c⁄° *)
±r
); \

96 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_föd
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

98  
	`OPENSSL_sk_föd
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

100 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_föd_ex
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

102  
	`OPENSSL_sk_föd_ex
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

104 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_s‹t
(
	`STACK_OF
—1Ë*
sk
) \

106 
	`OPENSSL_sk_s‹t
((
OPENSSL_STACK
 *)
sk
); \

108 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_is_s‹ãd
(c⁄° 
	`STACK_OF
—1Ë*
sk
) \

110  
	`OPENSSL_sk_is_s‹ãd
((c⁄° 
OPENSSL_STACK
 *)
sk
); \

112 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë* 
sk_
##t1##
	`_dup
(c⁄° STACK_OF—1Ë*
sk
) \

114  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_dup
((c⁄° 
OPENSSL_STACK
 *)
sk
); \

116 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_dìp_c›y
(c⁄° STACK_OF—1Ë*
sk
, \

117 
sk_
##
t1
##
_c›yfunc
 
c›yfunc
, \

118 
sk_
##
t1
##
_‰ìfunc
 
‰ìfunc
) \

120  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_dìp_c›y
((c⁄° 
OPENSSL_STACK
 *)
sk
, \

121 (
OPENSSL_sk_c›yfunc
)
c›yfunc
, \

122 (
OPENSSL_sk_‰ìfunc
)
‰ìfunc
); \

124 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
_compfunc
 sk_##t1##
	`_£t_cmp_func
(
	`STACK_OF
—1Ë*
sk
, sk_##t1##_compfun¯
com∑ª
) \

126  (
sk_
##
t1
##
_compfunc
)
	`OPENSSL_sk_£t_cmp_func
((
OPENSSL_STACK
 *)
sk
, (
OPENSSL_sk_compfunc
)
com∑ª
); \

127 }

	)

129 
	#DEFINE_SPECIAL_STACK_OF
(
t1
, 
t2
Ë
	`SKM_DEFINE_STACK_OF
—1,Å2,Å2)

	)

130 
	#DEFINE_STACK_OF
(
t
Ë
	`SKM_DEFINE_STACK_OF
—,Å,Å)

	)

131 
	#DEFINE_SPECIAL_STACK_OF_CONST
(
t1
, 
t2
) \

132 
	`SKM_DEFINE_STACK_OF
(
t1
, c⁄° 
t2
,Å2)

	)

133 
	#DEFINE_STACK_OF_CONST
(
t
Ë
	`SKM_DEFINE_STACK_OF
—, c⁄°Å,Å)

	)

149 *
	tOPENSSL_STRING
;

150 c⁄° *
	tOPENSSL_CSTRING
;

159 
DEFINE_SPECIAL_STACK_OF
(
OPENSSL_STRING
, )

160 
DEFINE_SPECIAL_STACK_OF_CONST
(
OPENSSL_CSTRING
, )

166 *
	tOPENSSL_BLOCK
;

167 
DEFINE_SPECIAL_STACK_OF
(
OPENSSL_BLOCK
, )

177 #ifde‡
__SUNPRO_C


178 #¥agm®
wók
 
OPENSSL_sk_num


179 #¥agm®
wók
 
OPENSSL_sk_vÆue


180 #¥agm®
wók
 
OPENSSL_sk_√w


181 #¥agm®
wók
 
OPENSSL_sk_√w_nuŒ


182 #¥agm®
wók
 
OPENSSL_sk_√w_ª£rve


183 #¥agm®
wók
 
OPENSSL_sk_ª£rve


184 #¥agm®
wók
 
OPENSSL_sk_‰ì


185 #¥agm®
wók
 
OPENSSL_sk_zîo


186 #¥agm®
wók
 
OPENSSL_sk_dñëe


187 #¥agm®
wók
 
OPENSSL_sk_dñëe_±r


188 #¥agm®
wók
 
OPENSSL_sk_push


189 #¥agm®
wók
 
OPENSSL_sk_unshi·


190 #¥agm®
wók
 
OPENSSL_sk_p›


191 #¥agm®
wók
 
OPENSSL_sk_shi·


192 #¥agm®
wók
 
OPENSSL_sk_p›_‰ì


193 #¥agm®
wók
 
OPENSSL_sk_ö£π


194 #¥agm®
wók
 
OPENSSL_sk_£t


195 #¥agm®
wók
 
OPENSSL_sk_föd


196 #¥agm®
wók
 
OPENSSL_sk_föd_ex


197 #¥agm®
wók
 
OPENSSL_sk_s‹t


198 #¥agm®
wók
 
OPENSSL_sk_is_s‹ãd


199 #¥agm®
wók
 
OPENSSL_sk_dup


200 #¥agm®
wók
 
OPENSSL_sk_dìp_c›y


201 #¥agm®
wók
 
OPENSSL_sk_£t_cmp_func


204 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl.h

12 #i‚de‡
HEADER_SSL_H


13 
	#HEADER_SSL_H


	)

15 
	~<›ís¶/e_os2.h
>

16 
	~<›ís¶/›ís¶c⁄f.h
>

17 
	~<›ís¶/comp.h
>

18 
	~<›ís¶/bio.h
>

19 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

20 
	~<›ís¶/x509.h
>

21 
	~<›ís¶/¸y±o.h
>

22 
	~<›ís¶/buf„r.h
>

24 
	~<›ís¶/lhash.h
>

25 
	~<›ís¶/≥m.h
>

26 
	~<›ís¶/hmac.h
>

27 
	~<›ís¶/async.h
>

29 
	~<›ís¶/ß„°ack.h
>

30 
	~<›ís¶/symhacks.h
>

31 
	~<›ís¶/˘.h
>

32 
	~<›ís¶/s¶îr.h
>

34 #ifde‡ 
__˝lu•lus


43 
	#SSL_SESSION_ASN1_VERSION
 0x0001

	)

45 
	#SSL_MAX_SSL_SESSION_ID_LENGTH
 32

	)

46 
	#SSL_MAX_SID_CTX_LENGTH
 32

	)

48 
	#SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES
 (512/8)

	)

49 
	#SSL_MAX_KEY_ARG_LENGTH
 8

	)

50 
	#SSL_MAX_MASTER_KEY_LENGTH
 48

	)

53 
	#SSL_MAX_PIPELINES
 32

	)

59 
	#SSL_TXT_LOW
 "LOW"

	)

60 
	#SSL_TXT_MEDIUM
 "MEDIUM"

	)

61 
	#SSL_TXT_HIGH
 "HIGH"

	)

62 
	#SSL_TXT_FIPS
 "FIPS"

	)

64 
	#SSL_TXT_aNULL
 "aNULL"

	)

65 
	#SSL_TXT_eNULL
 "eNULL"

	)

66 
	#SSL_TXT_NULL
 "NULL"

	)

68 
	#SSL_TXT_kRSA
 "kRSA"

	)

69 
	#SSL_TXT_kDHr
 "kDHr"

	)

70 
	#SSL_TXT_kDHd
 "kDHd"

	)

71 
	#SSL_TXT_kDH
 "kDH"

	)

72 
	#SSL_TXT_kEDH
 "kEDH"

	)

73 
	#SSL_TXT_kDHE
 "kDHE"

	)

74 
	#SSL_TXT_kECDHr
 "kECDHr"

	)

75 
	#SSL_TXT_kECDHe
 "kECDHe"

	)

76 
	#SSL_TXT_kECDH
 "kECDH"

	)

77 
	#SSL_TXT_kEECDH
 "kEECDH"

	)

78 
	#SSL_TXT_kECDHE
 "kECDHE"

	)

79 
	#SSL_TXT_kPSK
 "kPSK"

	)

80 
	#SSL_TXT_kRSAPSK
 "kRSAPSK"

	)

81 
	#SSL_TXT_kECDHEPSK
 "kECDHEPSK"

	)

82 
	#SSL_TXT_kDHEPSK
 "kDHEPSK"

	)

83 
	#SSL_TXT_kGOST
 "kGOST"

	)

84 
	#SSL_TXT_kSRP
 "kSRP"

	)

86 
	#SSL_TXT_aRSA
 "aRSA"

	)

87 
	#SSL_TXT_aDSS
 "aDSS"

	)

88 
	#SSL_TXT_aDH
 "aDH"

	)

89 
	#SSL_TXT_aECDH
 "aECDH"

	)

90 
	#SSL_TXT_aECDSA
 "aECDSA"

	)

91 
	#SSL_TXT_aPSK
 "aPSK"

	)

92 
	#SSL_TXT_aGOST94
 "aGOST94"

	)

93 
	#SSL_TXT_aGOST01
 "aGOST01"

	)

94 
	#SSL_TXT_aGOST12
 "aGOST12"

	)

95 
	#SSL_TXT_aGOST
 "aGOST"

	)

96 
	#SSL_TXT_aSRP
 "aSRP"

	)

98 
	#SSL_TXT_DSS
 "DSS"

	)

99 
	#SSL_TXT_DH
 "DH"

	)

100 
	#SSL_TXT_DHE
 "DHE"

	)

101 
	#SSL_TXT_EDH
 "EDH"

	)

102 
	#SSL_TXT_ADH
 "ADH"

	)

103 
	#SSL_TXT_RSA
 "RSA"

	)

104 
	#SSL_TXT_ECDH
 "ECDH"

	)

105 
	#SSL_TXT_EECDH
 "EECDH"

	)

106 
	#SSL_TXT_ECDHE
 "ECDHE"

	)

107 
	#SSL_TXT_AECDH
 "AECDH"

	)

108 
	#SSL_TXT_ECDSA
 "ECDSA"

	)

109 
	#SSL_TXT_PSK
 "PSK"

	)

110 
	#SSL_TXT_SRP
 "SRP"

	)

112 
	#SSL_TXT_DES
 "DES"

	)

113 
	#SSL_TXT_3DES
 "3DES"

	)

114 
	#SSL_TXT_RC4
 "RC4"

	)

115 
	#SSL_TXT_RC2
 "RC2"

	)

116 
	#SSL_TXT_IDEA
 "IDEA"

	)

117 
	#SSL_TXT_SEED
 "SEED"

	)

118 
	#SSL_TXT_AES128
 "AES128"

	)

119 
	#SSL_TXT_AES256
 "AES256"

	)

120 
	#SSL_TXT_AES
 "AES"

	)

121 
	#SSL_TXT_AES_GCM
 "AESGCM"

	)

122 
	#SSL_TXT_AES_CCM
 "AESCCM"

	)

123 
	#SSL_TXT_AES_CCM_8
 "AESCCM8"

	)

124 
	#SSL_TXT_CAMELLIA128
 "CAMELLIA128"

	)

125 
	#SSL_TXT_CAMELLIA256
 "CAMELLIA256"

	)

126 
	#SSL_TXT_CAMELLIA
 "CAMELLIA"

	)

127 
	#SSL_TXT_CHACHA20
 "CHACHA20"

	)

128 
	#SSL_TXT_GOST
 "GOST89"

	)

129 
	#SSL_TXT_ARIA
 "ARIA"

	)

130 
	#SSL_TXT_ARIA_GCM
 "ARIAGCM"

	)

131 
	#SSL_TXT_ARIA128
 "ARIA128"

	)

132 
	#SSL_TXT_ARIA256
 "ARIA256"

	)

134 
	#SSL_TXT_MD5
 "MD5"

	)

135 
	#SSL_TXT_SHA1
 "SHA1"

	)

136 
	#SSL_TXT_SHA
 "SHA"

	)

137 
	#SSL_TXT_GOST94
 "GOST94"

	)

138 
	#SSL_TXT_GOST89MAC
 "GOST89MAC"

	)

139 
	#SSL_TXT_GOST12
 "GOST12"

	)

140 
	#SSL_TXT_GOST89MAC12
 "GOST89MAC12"

	)

141 
	#SSL_TXT_SHA256
 "SHA256"

	)

142 
	#SSL_TXT_SHA384
 "SHA384"

	)

144 
	#SSL_TXT_SSLV3
 "SSLv3"

	)

145 
	#SSL_TXT_TLSV1
 "TLSv1"

	)

146 
	#SSL_TXT_TLSV1_1
 "TLSv1.1"

	)

147 
	#SSL_TXT_TLSV1_2
 "TLSv1.2"

	)

149 
	#SSL_TXT_ALL
 "ALL"

	)

165 
	#SSL_TXT_CMPALL
 "COMPLEMENTOFALL"

	)

166 
	#SSL_TXT_CMPDEF
 "COMPLEMENTOFDEFAULT"

	)

173 
	#SSL_DEFAULT_CIPHER_LIST
 "ALL:!COMPLEMENTOFDEFAULT:!eNULL"

	)

175 #i‡!
deföed
(
OPENSSL_NO_CHACHA
Ë&& !deföed(
OPENSSL_NO_POLY1305
)

176 
	#TLS_DEFAULT_CIPHERSUITES
 "TLS_AES_256_GCM_SHA384:" \

178 "TLS_AES_128_GCM_SHA256"

	)

180 
	#TLS_DEFAULT_CIPHERSUITES
 "TLS_AES_256_GCM_SHA384:" \

181 "TLS_AES_128_GCM_SHA256"

	)

191 
	#SSL_SENT_SHUTDOWN
 1

	)

192 
	#SSL_RECEIVED_SHUTDOWN
 2

	)

194 #ifde‡
__˝lu•lus


198 #ifde‡ 
__˝lu•lus


202 
	#SSL_FILETYPE_ASN1
 
X509_FILETYPE_ASN1


	)

203 
	#SSL_FILETYPE_PEM
 
X509_FILETYPE_PEM


	)

209 
s¶_°
 *
	ts¶_¸ock_°
;

210 
és_£ssi⁄_tickë_ext_°
 
	tTLS_SESSION_TICKET_EXT
;

211 
s¶_mëhod_°
 
	tSSL_METHOD
;

212 
s¶_cùhî_°
 
	tSSL_CIPHER
;

213 
s¶_£ssi⁄_°
 
	tSSL_SESSION
;

214 
és_sigÆgs_°
 
	tTLS_SIGALGS
;

215 
s¶_c⁄f_˘x_°
 
	tSSL_CONF_CTX
;

216 
s¶_comp_°
 
	tSSL_COMP
;

218 
STACK_OF
(
SSL_CIPHER
);

219 
STACK_OF
(
SSL_COMP
);

222 
	s§ç_¥Ÿe˘i⁄_¥ofûe_°
 {

223 c⁄° *
«me
;

224 
id
;

225 } 
	tSRTP_PROTECTION_PROFILE
;

227 
DEFINE_STACK_OF
(
SRTP_PROTECTION_PROFILE
)

229 (*
és_£ssi⁄_tickë_ext_cb_‚
)(
	tSSL
 *
	ts
, c⁄° *
	td©a
,

230 
	tÀn
, *
	t¨g
);

231 (*
és_£ssi⁄_£¸ë_cb_‚
)(
	tSSL
 *
	ts
, *
	t£¸ë
, *
	t£¸ë_Àn
,

232 
	tSTACK_OF
(
	tSSL_CIPHER
Ë*
	t≥î_cùhîs
,

233 c⁄° 
	tSSL_CIPHER
 **
	tcùhî
, *
	t¨g
);

237 
	#SSL_EXT_TLS_ONLY
 0x0001

	)

239 
	#SSL_EXT_DTLS_ONLY
 0x0002

	)

241 
	#SSL_EXT_TLS_IMPLEMENTATION_ONLY
 0x0004

	)

243 
	#SSL_EXT_SSL3_ALLOWED
 0x0008

	)

245 
	#SSL_EXT_TLS1_2_AND_BELOW_ONLY
 0x0010

	)

247 
	#SSL_EXT_TLS1_3_ONLY
 0x0020

	)

249 
	#SSL_EXT_IGNORE_ON_RESUMPTION
 0x0040

	)

250 
	#SSL_EXT_CLIENT_HELLO
 0x0080

	)

252 
	#SSL_EXT_TLS1_2_SERVER_HELLO
 0x0100

	)

253 
	#SSL_EXT_TLS1_3_SERVER_HELLO
 0x0200

	)

254 
	#SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS
 0x0400

	)

255 
	#SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST
 0x0800

	)

256 
	#SSL_EXT_TLS1_3_CERTIFICATE
 0x1000

	)

257 
	#SSL_EXT_TLS1_3_NEW_SESSION_TICKET
 0x2000

	)

258 
	#SSL_EXT_TLS1_3_CERTIFICATE_REQUEST
 0x4000

	)

262 (*
cu°om_ext_add_cb
)(
	tSSL
 *
	ts
, 
	text_ty≥
,

263 c⁄° **
	tout
, 
	tsize_t
 *
	touéí
,

264 *
	tÆ
, *
	tadd_¨g
);

266 (*
cu°om_ext_‰ì_cb
)(
	tSSL
 *
	ts
, 
	text_ty≥
,

267 c⁄° *
	tout
, *
	tadd_¨g
);

269 (*
cu°om_ext_∑r£_cb
)(
	tSSL
 *
	ts
, 
	text_ty≥
,

270 c⁄° *
	tö
, 
	tsize_t
 
	töÀn
,

271 *
	tÆ
, *
	t∑r£_¨g
);

274 (*
SSL_cu°om_ext_add_cb_ex
)(
	tSSL
 *
	ts
, 
	text_ty≥
,

275 
	tc⁄ãxt
,

276 c⁄° **
	tout
,

277 
	tsize_t
 *
	touéí
, 
	tX509
 *
	tx
,

278 
	tsize_t
 
	tchaöidx
,

279 *
	tÆ
, *
	tadd_¨g
);

281 (*
SSL_cu°om_ext_‰ì_cb_ex
)(
	tSSL
 *
	ts
, 
	text_ty≥
,

282 
	tc⁄ãxt
,

283 c⁄° *
	tout
,

284 *
	tadd_¨g
);

286 (*
SSL_cu°om_ext_∑r£_cb_ex
)(
	tSSL
 *
	ts
, 
	text_ty≥
,

287 
	tc⁄ãxt
,

288 c⁄° *
	tö
,

289 
	tsize_t
 
	töÀn
, 
	tX509
 *
	tx
,

290 
	tsize_t
 
	tchaöidx
,

291 *
	tÆ
, *
	t∑r£_¨g
);

294 (*
SSL_vîify_cb
)(
	t¥evîify_ok
, 
	tX509_STORE_CTX
 *
	tx509_˘x
);

304 
	#SSL_OP_LEGACY_SERVER_CONNECT
 0x00000004U

	)

307 
	#SSL_OP_TLSEXT_PADDING
 0x00000010U

	)

309 
	#SSL_OP_SAFARI_ECDHE_ECDSA_BUG
 0x00000040U

	)

317 
	#SSL_OP_ALLOW_NO_DHE_KEX
 0x00000400U

	)

326 
	#SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 0x00000800U

	)

329 
	#SSL_OP_NO_QUERY_MTU
 0x00001000U

	)

331 
	#SSL_OP_COOKIE_EXCHANGE
 0x00002000U

	)

333 
	#SSL_OP_NO_TICKET
 0x00004000U

	)

334 #i‚de‡
OPENSSL_NO_DTLS1_METHOD


337 
	#SSL_OP_CISCO_ANYCONNECT
 0x00008000U

	)

341 
	#SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 0x00010000U

	)

343 
	#SSL_OP_NO_COMPRESSION
 0x00020000U

	)

345 
	#SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
 0x00040000U

	)

347 
	#SSL_OP_NO_ENCRYPT_THEN_MAC
 0x00080000U

	)

353 
	#SSL_OP_ENABLE_MIDDLEBOX_COMPAT
 0x00100000U

	)

357 
	#SSL_OP_PRIORITIZE_CHACHA
 0x00200000U

	)

362 
	#SSL_OP_CIPHER_SERVER_PREFERENCE
 0x00400000U

	)

369 
	#SSL_OP_TLS_ROLLBACK_BUG
 0x00800000U

	)

375 
	#SSL_OP_NO_ANTI_REPLAY
 0x01000000U

	)

377 
	#SSL_OP_NO_SSLv3
 0x02000000U

	)

378 
	#SSL_OP_NO_TLSv1
 0x04000000U

	)

379 
	#SSL_OP_NO_TLSv1_2
 0x08000000U

	)

380 
	#SSL_OP_NO_TLSv1_1
 0x10000000U

	)

381 
	#SSL_OP_NO_TLSv1_3
 0x20000000U

	)

383 
	#SSL_OP_NO_DTLSv1
 0x04000000U

	)

384 
	#SSL_OP_NO_DTLSv1_2
 0x08000000U

	)

386 
	#SSL_OP_NO_SSL_MASK
 (
SSL_OP_NO_SSLv3
|\

387 
SSL_OP_NO_TLSv1
|
SSL_OP_NO_TLSv1_1
|
SSL_OP_NO_TLSv1_2
|
SSL_OP_NO_TLSv1_3
)

	)

388 
	#SSL_OP_NO_DTLS_MASK
 (
SSL_OP_NO_DTLSv1
|
SSL_OP_NO_DTLSv1_2
)

	)

391 
	#SSL_OP_NO_RENEGOTIATION
 0x40000000U

	)

398 
	#SSL_OP_CRYPTOPRO_TLSEXT_BUG
 0x80000000U

	)

405 
	#SSL_OP_ALL
 (
SSL_OP_CRYPTOPRO_TLSEXT_BUG
|\

406 
SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
|\

407 
SSL_OP_LEGACY_SERVER_CONNECT
|\

408 
SSL_OP_TLSEXT_PADDING
|\

409 
SSL_OP_SAFARI_ECDHE_ECDSA_BUG
)

	)

415 
	#SSL_OP_MICROSOFT_SESS_ID_BUG
 0x0

	)

418 
	#SSL_OP_NETSCAPE_CHALLENGE_BUG
 0x0

	)

421 
	#SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 0x0

	)

424 
	#SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
 0x0

	)

426 
	#SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
 0x0

	)

428 
	#SSL_OP_MSIE_SSLV2_RSA_PADDING
 0x0

	)

431 
	#SSL_OP_SSLEAY_080_CLIENT_DH_BUG
 0x0

	)

433 
	#SSL_OP_TLS_D5_BUG
 0x0

	)

435 
	#SSL_OP_TLS_BLOCK_PADDING_BUG
 0x0

	)

437 
	#SSL_OP_SINGLE_ECDH_USE
 0x0

	)

439 
	#SSL_OP_SINGLE_DH_USE
 0x0

	)

441 
	#SSL_OP_EPHEMERAL_RSA
 0x0

	)

443 
	#SSL_OP_NO_SSLv2
 0x0

	)

445 
	#SSL_OP_PKCS1_CHECK_1
 0x0

	)

447 
	#SSL_OP_PKCS1_CHECK_2
 0x0

	)

449 
	#SSL_OP_NETSCAPE_CA_DN_BUG
 0x0

	)

451 
	#SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 0x0

	)

457 
	#SSL_MODE_ENABLE_PARTIAL_WRITE
 0x00000001U

	)

464 
	#SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
 0x00000002U

	)

468 
	#SSL_MODE_AUTO_RETRY
 0x00000004U

	)

470 
	#SSL_MODE_NO_AUTO_CHAIN
 0x00000008U

	)

475 
	#SSL_MODE_RELEASE_BUFFERS
 0x00000010U

	)

481 
	#SSL_MODE_SEND_CLIENTHELLO_TIME
 0x00000020U

	)

482 
	#SSL_MODE_SEND_SERVERHELLO_TIME
 0x00000040U

	)

491 
	#SSL_MODE_SEND_FALLBACK_SCSV
 0x00000080U

	)

495 
	#SSL_MODE_ASYNC
 0x00000100U

	)

508 
	#SSL_MODE_DTLS_SCTP_LABEL_LENGTH_BUG
 0x00000400U

	)

515 
	#SSL_CERT_FLAG_TLS_STRICT
 0x00000001U

	)

518 
	#SSL_CERT_FLAG_SUITEB_128_LOS_ONLY
 0x10000

	)

520 
	#SSL_CERT_FLAG_SUITEB_192_LOS
 0x20000

	)

522 
	#SSL_CERT_FLAG_SUITEB_128_LOS
 0x30000

	)

525 
	#SSL_CERT_FLAG_BROKEN_PROTOCOL
 0x10000000

	)

529 
	#SSL_BUILD_CHAIN_FLAG_UNTRUSTED
 0x1

	)

531 
	#SSL_BUILD_CHAIN_FLAG_NO_ROOT
 0x2

	)

533 
	#SSL_BUILD_CHAIN_FLAG_CHECK
 0x4

	)

535 
	#SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR
 0x8

	)

537 
	#SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR
 0x10

	)

541 
	#CERT_PKEY_VALID
 0x1

	)

543 
	#CERT_PKEY_SIGN
 0x2

	)

545 
	#CERT_PKEY_EE_SIGNATURE
 0x10

	)

547 
	#CERT_PKEY_CA_SIGNATURE
 0x20

	)

549 
	#CERT_PKEY_EE_PARAM
 0x40

	)

551 
	#CERT_PKEY_CA_PARAM
 0x80

	)

553 
	#CERT_PKEY_EXPLICIT_SIGN
 0x100

	)

555 
	#CERT_PKEY_ISSUER_NAME
 0x200

	)

557 
	#CERT_PKEY_CERT_TYPE
 0x400

	)

559 
	#CERT_PKEY_SUITEB
 0x800

	)

561 
	#SSL_CONF_FLAG_CMDLINE
 0x1

	)

562 
	#SSL_CONF_FLAG_FILE
 0x2

	)

563 
	#SSL_CONF_FLAG_CLIENT
 0x4

	)

564 
	#SSL_CONF_FLAG_SERVER
 0x8

	)

565 
	#SSL_CONF_FLAG_SHOW_ERRORS
 0x10

	)

566 
	#SSL_CONF_FLAG_CERTIFICATE
 0x20

	)

567 
	#SSL_CONF_FLAG_REQUIRE_PRIVATE
 0x40

	)

569 
	#SSL_CONF_TYPE_UNKNOWN
 0x0

	)

570 
	#SSL_CONF_TYPE_STRING
 0x1

	)

571 
	#SSL_CONF_TYPE_FILE
 0x2

	)

572 
	#SSL_CONF_TYPE_DIR
 0x3

	)

573 
	#SSL_CONF_TYPE_NONE
 0x4

	)

576 
	#SSL_COOKIE_LENGTH
 4096

	)

583 
SSL_CTX_gë_›ti⁄s
(c⁄° 
SSL_CTX
 *
˘x
);

584 
SSL_gë_›ti⁄s
(c⁄° 
SSL
 *
s
);

585 
SSL_CTX_˛ór_›ti⁄s
(
SSL_CTX
 *
˘x
, 
›
);

586 
SSL_˛ór_›ti⁄s
(
SSL
 *
s
, 
›
);

587 
SSL_CTX_£t_›ti⁄s
(
SSL_CTX
 *
˘x
, 
›
);

588 
SSL_£t_›ti⁄s
(
SSL
 *
s
, 
›
);

590 
	#SSL_CTX_£t_mode
(
˘x
,
›
) \

591 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

592 
	#SSL_CTX_˛ór_mode
(
˘x
,
›
) \

593 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

594 
	#SSL_CTX_gë_mode
(
˘x
) \

595 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,0,
NULL
)

	)

596 
	#SSL_˛ór_mode
(
s¶
,
›
) \

597 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

598 
	#SSL_£t_mode
(
s¶
,
›
) \

599 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

600 
	#SSL_gë_mode
(
s¶
) \

601 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,0,
NULL
)

	)

602 
	#SSL_£t_mtu
(
s¶
, 
mtu
) \

603 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_MTU
,(
mtu
),
NULL
)

	)

604 
	#DTLS_£t_lök_mtu
(
s¶
, 
mtu
) \

605 
	`SSL_˘æ
((
s¶
),
DTLS_CTRL_SET_LINK_MTU
,(
mtu
),
NULL
)

	)

606 
	#DTLS_gë_lök_mö_mtu
(
s¶
) \

607 
	`SSL_˘æ
((
s¶
),
DTLS_CTRL_GET_LINK_MIN_MTU
,0,
NULL
)

	)

609 
	#SSL_gë_£cuª_ª√gŸüti⁄_suµ‹t
(
s¶
) \

610 
	`SSL_˘æ
((
s¶
), 
SSL_CTRL_GET_RI_SUPPORT
, 0, 
NULL
)

	)

612 #i‚de‡
OPENSSL_NO_HEARTBEATS


613 
	#SSL_hóπbót
(
s¶
) \

614 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT
,0,
NULL
)

	)

617 
	#SSL_CTX_£t_˚π_Êags
(
˘x
,
›
) \

618 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CERT_FLAGS
,(
›
),
NULL
)

	)

619 
	#SSL_£t_˚π_Êags
(
s
,
›
) \

620 
	`SSL_˘æ
((
s
),
SSL_CTRL_CERT_FLAGS
,(
›
),
NULL
)

	)

621 
	#SSL_CTX_˛ór_˚π_Êags
(
˘x
,
›
) \

622 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_CERT_FLAGS
,(
›
),
NULL
)

	)

623 
	#SSL_˛ór_˚π_Êags
(
s
,
›
) \

624 
	`SSL_˘æ
((
s
),
SSL_CTRL_CLEAR_CERT_FLAGS
,(
›
),
NULL
)

	)

626 
SSL_CTX_£t_msg_ˇŒback
(
SSL_CTX
 *
˘x
,

627 (*
cb
Ë(
wrôe_p
, 
vîsi⁄
,

628 
c⁄ã¡_ty≥
, c⁄° *
buf
,

629 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

630 
SSL_£t_msg_ˇŒback
(
SSL
 *
s¶
,

631 (*
cb
Ë(
wrôe_p
, 
vîsi⁄
,

632 
c⁄ã¡_ty≥
, c⁄° *
buf
,

633 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

634 
	#SSL_CTX_£t_msg_ˇŒback_¨g
(
˘x
, 
¨g
Ë
	`SSL_CTX_˘æ
((˘x), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

635 
	#SSL_£t_msg_ˇŒback_¨g
(
s¶
, 
¨g
Ë
	`SSL_˘æ
((s¶), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

637 
	#SSL_gë_extms_suµ‹t
(
s
) \

638 
	`SSL_˘æ
((
s
),
SSL_CTRL_GET_EXTMS_SUPPORT
,0,
NULL
)

	)

640 #i‚de‡
OPENSSL_NO_SRP


643 
__owur
 
SSL_SRP_CTX_öô
(
SSL
 *
s
);

644 
__owur
 
SSL_CTX_SRP_CTX_öô
(
SSL_CTX
 *
˘x
);

645 
SSL_SRP_CTX_‰ì
(
SSL
 *
˘x
);

646 
SSL_CTX_SRP_CTX_‰ì
(
SSL_CTX
 *
˘x
);

647 
__owur
 
SSL_§p_£rvî_∑øm_wôh_u£∫ame
(
SSL
 *
s
, *
ad
);

648 
__owur
 
SRP_CÆc_A_∑øm
(
SSL
 *
s
);

653 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*100

	)

655 
	#SSL_SESSION_CACHE_MAX_SIZE_DEFAULT
 (1024*20)

	)

669 (*
GEN_SESSION_CB
Ë(
	tSSL
 *
	ts¶
, *
	tid
,

670 *
	tid_Àn
);

672 
	#SSL_SESS_CACHE_OFF
 0x0000

	)

673 
	#SSL_SESS_CACHE_CLIENT
 0x0001

	)

674 
	#SSL_SESS_CACHE_SERVER
 0x0002

	)

675 
	#SSL_SESS_CACHE_BOTH
 (
SSL_SESS_CACHE_CLIENT
|
SSL_SESS_CACHE_SERVER
)

	)

676 
	#SSL_SESS_CACHE_NO_AUTO_CLEAR
 0x0080

	)

678 
	#SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
 0x0100

	)

679 
	#SSL_SESS_CACHE_NO_INTERNAL_STORE
 0x0200

	)

680 
	#SSL_SESS_CACHE_NO_INTERNAL
 \

681 (
SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
|
SSL_SESS_CACHE_NO_INTERNAL_STORE
)

	)

683 
LHASH_OF
(
SSL_SESSION
Ë*
SSL_CTX_£ssi⁄s
(
SSL_CTX
 *
˘x
);

684 
	#SSL_CTX_£ss_numbî
(
˘x
) \

685 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_NUMBER
,0,
NULL
)

	)

686 
	#SSL_CTX_£ss_c⁄√˘
(
˘x
) \

687 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT
,0,
NULL
)

	)

688 
	#SSL_CTX_£ss_c⁄√˘_good
(
˘x
) \

689 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_GOOD
,0,
NULL
)

	)

690 
	#SSL_CTX_£ss_c⁄√˘_ª√gŸüã
(
˘x
) \

691 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_RENEGOTIATE
,0,
NULL
)

	)

692 
	#SSL_CTX_£ss_ac˚±
(
˘x
) \

693 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT
,0,
NULL
)

	)

694 
	#SSL_CTX_£ss_ac˚±_ª√gŸüã
(
˘x
) \

695 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
,0,
NULL
)

	)

696 
	#SSL_CTX_£ss_ac˚±_good
(
˘x
) \

697 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_GOOD
,0,
NULL
)

	)

698 
	#SSL_CTX_£ss_hôs
(
˘x
) \

699 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_HIT
,0,
NULL
)

	)

700 
	#SSL_CTX_£ss_cb_hôs
(
˘x
) \

701 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CB_HIT
,0,
NULL
)

	)

702 
	#SSL_CTX_£ss_mis£s
(
˘x
) \

703 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_MISSES
,0,
NULL
)

	)

704 
	#SSL_CTX_£ss_timeouts
(
˘x
) \

705 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_TIMEOUTS
,0,
NULL
)

	)

706 
	#SSL_CTX_£ss_ˇche_fuŒ
(
˘x
) \

707 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CACHE_FULL
,0,
NULL
)

	)

709 
SSL_CTX_£ss_£t_√w_cb
(
SSL_CTX
 *
˘x
,

710 (*
√w_£ssi⁄_cb
Ë(
s¶_°
 *
s¶
,

711 
SSL_SESSION
 *
£ss
));

712 (*
SSL_CTX_£ss_gë_√w_cb
(
SSL_CTX
 *
˘x
)Ë(
s¶_°
 *
s¶
,

713 
SSL_SESSION
 *
£ss
);

714 
SSL_CTX_£ss_£t_ªmove_cb
(
SSL_CTX
 *
˘x
,

715 (*
ªmove_£ssi⁄_cb
Ë(
s¶_˘x_°


716 *
˘x
,

717 
SSL_SESSION
 *
£ss
));

718 (*
SSL_CTX_£ss_gë_ªmove_cb
(
SSL_CTX
 *
˘x
)Ë(
s¶_˘x_°
 *ctx,

719 
SSL_SESSION
 *
£ss
);

720 
SSL_CTX_£ss_£t_gë_cb
(
SSL_CTX
 *
˘x
,

721 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
Ë(
s¶_°


722 *
s¶
,

724 *
d©a
, 
Àn
,

725 *
c›y
));

726 
SSL_SESSION
 *(*
SSL_CTX_£ss_gë_gë_cb
(
SSL_CTX
 *
˘x
)Ë(
s¶_°
 *
s¶
,

727 c⁄° *
d©a
,

728 
Àn
, *
c›y
);

729 
SSL_CTX_£t_öfo_ˇŒback
(
SSL_CTX
 *
˘x
,

730 (*
cb
Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
, 
vÆ
));

731 (*
SSL_CTX_gë_öfo_ˇŒback
(
SSL_CTX
 *
˘x
)Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
,

732 
vÆ
);

733 
SSL_CTX_£t_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
,

734 (*
˛õ¡_˚π_cb
Ë(
SSL
 *
s¶
, 
X509
 **
x509
,

735 
EVP_PKEY
 **
pkey
));

736 (*
SSL_CTX_gë_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
)Ë(
SSL
 *
s¶
, 
X509
 **
x509
,

737 
EVP_PKEY
 **
pkey
);

738 #i‚de‡
OPENSSL_NO_ENGINE


739 
__owur
 
SSL_CTX_£t_˛õ¡_˚π_ígöe
(
SSL_CTX
 *
˘x
, 
ENGINE
 *
e
);

741 
SSL_CTX_£t_cookõ_gíî©e_cb
(
SSL_CTX
 *
˘x
,

742 (*
≠p_gí_cookõ_cb
Ë(
SSL
 *
s¶
,

744 *
cookõ
,

746 *
cookõ_Àn
));

747 
SSL_CTX_£t_cookõ_vîify_cb
(
SSL_CTX
 *
˘x
,

748 (*
≠p_vîify_cookõ_cb
Ë(
SSL
 *
s¶
,

750 *
cookõ
,

752 
cookõ_Àn
));

754 
SSL_CTX_£t_°©ñess_cookõ_gíî©e_cb
(

755 
SSL_CTX
 *
˘x
,

756 (*
gí_°©ñess_cookõ_cb
Ë(
SSL
 *
s¶
,

757 *
cookõ
,

758 
size_t
 *
cookõ_Àn
));

759 
SSL_CTX_£t_°©ñess_cookõ_vîify_cb
(

760 
SSL_CTX
 *
˘x
,

761 (*
vîify_°©ñess_cookõ_cb
Ë(
SSL
 *
s¶
,

762 c⁄° *
cookõ
,

763 
size_t
 
cookõ_Àn
));

764 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


766 (*
SSL_CTX_≈n_advîti£d_cb_func
)(
	tSSL
 *
	ts¶
,

767 c⁄° **
	tout
,

768 *
	touéí
,

769 *
	t¨g
);

770 
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
(
SSL_CTX
 *
s
,

771 
SSL_CTX_≈n_advîti£d_cb_func
 
cb
,

772 *
¨g
);

773 
	#SSL_CTX_£t_≈n_advîti£d_cb
 
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb


	)

775 (*
SSL_CTX_≈n_£À˘_cb_func
)(
	tSSL
 *
	ts
,

776 **
	tout
,

777 *
	touéí
,

778 c⁄° *
	tö
,

779 
	töÀn
,

780 *
	t¨g
);

781 
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
(
SSL_CTX
 *
s
,

782 
SSL_CTX_≈n_£À˘_cb_func
 
cb
,

783 *
¨g
);

784 
	#SSL_CTX_£t_≈n_£À˘_cb
 
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb


	)

786 
SSL_gë0_√xt_¥Ÿo_√gŸüãd
(c⁄° 
SSL
 *
s
, c⁄° **
d©a
,

787 *
Àn
);

788 
	#SSL_gë0_≈n_√gŸüãd
 
SSL_gë0_√xt_¥Ÿo_√gŸüãd


	)

791 
__owur
 
SSL_£À˘_√xt_¥Ÿo
(**
out
, *
ouéí
,

792 c⁄° *
ö
, 
öÀn
,

793 c⁄° *
˛õ¡
,

794 
˛õ¡_Àn
);

796 
	#OPENSSL_NPN_UNSUPPORTED
 0

	)

797 
	#OPENSSL_NPN_NEGOTIATED
 1

	)

798 
	#OPENSSL_NPN_NO_OVERLAP
 2

	)

800 
__owur
 
SSL_CTX_£t_Æ≤_¥Ÿos
(
SSL_CTX
 *
˘x
, c⁄° *
¥Ÿos
,

801 
¥Ÿos_Àn
);

802 
__owur
 
SSL_£t_Æ≤_¥Ÿos
(
SSL
 *
s¶
, c⁄° *
¥Ÿos
,

803 
¥Ÿos_Àn
);

804 (*
SSL_CTX_Æ≤_£À˘_cb_func
)(
	tSSL
 *
	ts¶
,

805 c⁄° **
	tout
,

806 *
	touéí
,

807 c⁄° *
	tö
,

808 
	töÀn
,

809 *
	t¨g
);

810 
SSL_CTX_£t_Æ≤_£À˘_cb
(
SSL_CTX
 *
˘x
,

811 
SSL_CTX_Æ≤_£À˘_cb_func
 
cb
,

812 *
¨g
);

813 
SSL_gë0_Æ≤_£À˘ed
(c⁄° 
SSL
 *
s¶
, c⁄° **
d©a
,

814 *
Àn
);

816 #i‚de‡
OPENSSL_NO_PSK


821 
	#PSK_MAX_IDENTITY_LEN
 128

	)

822 
	#PSK_MAX_PSK_LEN
 256

	)

823 (*
	tSSL_psk_˛õ¡_cb_func
)(
	tSSL
 *
	ts¶
,

824 c⁄° *
	thöt
,

825 *
	tidítôy
,

826 
	tmax_idítôy_Àn
,

827 *
	tpsk
,

828 
	tmax_psk_Àn
);

829 
SSL_CTX_£t_psk_˛õ¡_ˇŒback
(
SSL_CTX
 *
˘x
, 
SSL_psk_˛õ¡_cb_func
 
cb
);

830 
SSL_£t_psk_˛õ¡_ˇŒback
(
SSL
 *
s¶
, 
SSL_psk_˛õ¡_cb_func
 
cb
);

832 (*
	tSSL_psk_£rvî_cb_func
)(
	tSSL
 *
	ts¶
,

833 c⁄° *
	tidítôy
,

834 *
	tpsk
,

835 
	tmax_psk_Àn
);

836 
SSL_CTX_£t_psk_£rvî_ˇŒback
(
SSL_CTX
 *
˘x
, 
SSL_psk_£rvî_cb_func
 
cb
);

837 
SSL_£t_psk_£rvî_ˇŒback
(
SSL
 *
s¶
, 
SSL_psk_£rvî_cb_func
 
cb
);

839 
__owur
 
SSL_CTX_u£_psk_idítôy_höt
(
SSL_CTX
 *
˘x
, c⁄° *
idítôy_höt
);

840 
__owur
 
SSL_u£_psk_idítôy_höt
(
SSL
 *
s
, c⁄° *
idítôy_höt
);

841 c⁄° *
SSL_gë_psk_idítôy_höt
(c⁄° 
SSL
 *
s
);

842 c⁄° *
SSL_gë_psk_idítôy
(c⁄° 
SSL
 *
s
);

845 (*
SSL_psk_föd_£ssi⁄_cb_func
)(
	tSSL
 *
	ts¶
,

846 c⁄° *
	tidítôy
,

847 
	tsize_t
 
	tidítôy_Àn
,

848 
	tSSL_SESSION
 **
	t£ss
);

849 (*
SSL_psk_u£_£ssi⁄_cb_func
)(
	tSSL
 *
	ts¶
, c⁄° 
	tEVP_MD
 *
	tmd
,

850 c⁄° **
	tid
,

851 
	tsize_t
 *
	tidÀn
,

852 
	tSSL_SESSION
 **
	t£ss
);

854 
SSL_£t_psk_föd_£ssi⁄_ˇŒback
(
SSL
 *
s
, 
SSL_psk_föd_£ssi⁄_cb_func
 
cb
);

855 
SSL_CTX_£t_psk_föd_£ssi⁄_ˇŒback
(
SSL_CTX
 *
˘x
,

856 
SSL_psk_föd_£ssi⁄_cb_func
 
cb
);

857 
SSL_£t_psk_u£_£ssi⁄_ˇŒback
(
SSL
 *
s
, 
SSL_psk_u£_£ssi⁄_cb_func
 
cb
);

858 
SSL_CTX_£t_psk_u£_£ssi⁄_ˇŒback
(
SSL_CTX
 *
˘x
,

859 
SSL_psk_u£_£ssi⁄_cb_func
 
cb
);

863 
__owur
 
SSL_CTX_has_˛õ¡_cu°om_ext
(c⁄° 
SSL_CTX
 *
˘x
,

864 
ext_ty≥
);

866 
__owur
 
SSL_CTX_add_˛õ¡_cu°om_ext
(
SSL_CTX
 *
˘x
,

867 
ext_ty≥
,

868 
cu°om_ext_add_cb
 
add_cb
,

869 
cu°om_ext_‰ì_cb
 
‰ì_cb
,

870 *
add_¨g
,

871 
cu°om_ext_∑r£_cb
 
∑r£_cb
,

872 *
∑r£_¨g
);

874 
__owur
 
SSL_CTX_add_£rvî_cu°om_ext
(
SSL_CTX
 *
˘x
,

875 
ext_ty≥
,

876 
cu°om_ext_add_cb
 
add_cb
,

877 
cu°om_ext_‰ì_cb
 
‰ì_cb
,

878 *
add_¨g
,

879 
cu°om_ext_∑r£_cb
 
∑r£_cb
,

880 *
∑r£_¨g
);

882 
__owur
 
SSL_CTX_add_cu°om_ext
(
SSL_CTX
 *
˘x
, 
ext_ty≥
,

883 
c⁄ãxt
,

884 
SSL_cu°om_ext_add_cb_ex
 
add_cb
,

885 
SSL_cu°om_ext_‰ì_cb_ex
 
‰ì_cb
,

886 *
add_¨g
,

887 
SSL_cu°om_ext_∑r£_cb_ex
 
∑r£_cb
,

888 *
∑r£_¨g
);

890 
__owur
 
SSL_exãnsi⁄_suµ‹ãd
(
ext_ty≥
);

892 
	#SSL_NOTHING
 1

	)

893 
	#SSL_WRITING
 2

	)

894 
	#SSL_READING
 3

	)

895 
	#SSL_X509_LOOKUP
 4

	)

896 
	#SSL_ASYNC_PAUSED
 5

	)

897 
	#SSL_ASYNC_NO_JOBS
 6

	)

898 
	#SSL_CLIENT_HELLO_CB
 7

	)

901 
	#SSL_w™t_nŸhög
(
s
Ë(
	`SSL_w™t
(sË=
SSL_NOTHING
)

	)

902 
	#SSL_w™t_ªad
(
s
Ë(
	`SSL_w™t
(sË=
SSL_READING
)

	)

903 
	#SSL_w™t_wrôe
(
s
Ë(
	`SSL_w™t
(sË=
SSL_WRITING
)

	)

904 
	#SSL_w™t_x509_lookup
(
s
Ë(
	`SSL_w™t
(sË=
SSL_X509_LOOKUP
)

	)

905 
	#SSL_w™t_async
(
s
Ë(
	`SSL_w™t
(sË=
SSL_ASYNC_PAUSED
)

	)

906 
	#SSL_w™t_async_job
(
s
Ë(
	`SSL_w™t
(sË=
SSL_ASYNC_NO_JOBS
)

	)

907 
	#SSL_w™t_˛õ¡_hñlo_cb
(
s
Ë(
	`SSL_w™t
(sË=
SSL_CLIENT_HELLO_CB
)

	)

909 
	#SSL_MAC_FLAG_READ_MAC_STREAM
 1

	)

910 
	#SSL_MAC_FLAG_WRITE_MAC_STREAM
 2

	)

916 (*
SSL_CTX_keylog_cb_func
)(c⁄° 
	tSSL
 *
	ts¶
, c⁄° *
	tlöe
);

923 
SSL_CTX_£t_keylog_ˇŒback
(
SSL_CTX
 *
˘x
, 
SSL_CTX_keylog_cb_func
 
cb
);

929 
SSL_CTX_keylog_cb_func
 
SSL_CTX_gë_keylog_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
);

931 
SSL_CTX_£t_max_óæy_d©a
(
SSL_CTX
 *
˘x
, 
uöt32_t
 
max_óæy_d©a
);

932 
uöt32_t
 
SSL_CTX_gë_max_óæy_d©a
(c⁄° 
SSL_CTX
 *
˘x
);

933 
SSL_£t_max_óæy_d©a
(
SSL
 *
s
, 
uöt32_t
 
max_óæy_d©a
);

934 
uöt32_t
 
SSL_gë_max_óæy_d©a
(c⁄° 
SSL
 *
s
);

935 
SSL_CTX_£t_ªcv_max_óæy_d©a
(
SSL_CTX
 *
˘x
, 
uöt32_t
 
ªcv_max_óæy_d©a
);

936 
uöt32_t
 
SSL_CTX_gë_ªcv_max_óæy_d©a
(c⁄° 
SSL_CTX
 *
˘x
);

937 
SSL_£t_ªcv_max_óæy_d©a
(
SSL
 *
s
, 
uöt32_t
 
ªcv_max_óæy_d©a
);

938 
uöt32_t
 
SSL_gë_ªcv_max_óæy_d©a
(c⁄° 
SSL
 *
s
);

940 #ifde‡
__˝lu•lus


944 
	~<›ís¶/s¶2.h
>

945 
	~<›ís¶/s¶3.h
>

946 
	~<›ís¶/és1.h
>

947 
	~<›ís¶/dés1.h
>

948 
	~<›ís¶/§ç.h
>

950 #ifde‡ 
__˝lu•lus


958 
DEFINE_STACK_OF_CONST
(
SSL_CIPHER
)

959 
DEFINE_STACK_OF
(
SSL_COMP
)

962 
	#SSL_£t_≠p_d©a
(
s
,
¨g
Ë(
	`SSL_£t_ex_d©a
(s,0,(*)◊rg)))

	)

963 
	#SSL_gë_≠p_d©a
(
s
Ë(
	`SSL_gë_ex_d©a
(s,0))

	)

964 
	#SSL_SESSION_£t_≠p_d©a
(
s
,
a
Ë(
	`SSL_SESSION_£t_ex_d©a
(s,0, \

965 (*)(
a
)))

	)

966 
	#SSL_SESSION_gë_≠p_d©a
(
s
Ë(
	`SSL_SESSION_gë_ex_d©a
(s,0))

	)

967 
	#SSL_CTX_gë_≠p_d©a
(
˘x
Ë(
	`SSL_CTX_gë_ex_d©a
(˘x,0))

	)

968 
	#SSL_CTX_£t_≠p_d©a
(
˘x
,
¨g
Ë(
	`SSL_CTX_£t_ex_d©a
(ctx,0, \

969 (*)(
¨g
)))

	)

970 
DEPRECATEDIN_1_1_0
(
SSL_£t_debug
(
SSL
 *
s
, 
debug
))

974 
	#SSL_KEY_UPDATE_NONE
 -1

	)

976 
	#SSL_KEY_UPDATE_NOT_REQUESTED
 0

	)

977 
	#SSL_KEY_UPDATE_REQUESTED
 1

	)

992 
TLS_ST_BEFORE
,

993 
TLS_ST_OK
,

994 
DTLS_ST_CR_HELLO_VERIFY_REQUEST
,

995 
TLS_ST_CR_SRVR_HELLO
,

996 
TLS_ST_CR_CERT
,

997 
TLS_ST_CR_CERT_STATUS
,

998 
TLS_ST_CR_KEY_EXCH
,

999 
TLS_ST_CR_CERT_REQ
,

1000 
TLS_ST_CR_SRVR_DONE
,

1001 
TLS_ST_CR_SESSION_TICKET
,

1002 
TLS_ST_CR_CHANGE
,

1003 
TLS_ST_CR_FINISHED
,

1004 
TLS_ST_CW_CLNT_HELLO
,

1005 
TLS_ST_CW_CERT
,

1006 
TLS_ST_CW_KEY_EXCH
,

1007 
TLS_ST_CW_CERT_VRFY
,

1008 
TLS_ST_CW_CHANGE
,

1009 
TLS_ST_CW_NEXT_PROTO
,

1010 
TLS_ST_CW_FINISHED
,

1011 
TLS_ST_SW_HELLO_REQ
,

1012 
TLS_ST_SR_CLNT_HELLO
,

1013 
DTLS_ST_SW_HELLO_VERIFY_REQUEST
,

1014 
TLS_ST_SW_SRVR_HELLO
,

1015 
TLS_ST_SW_CERT
,

1016 
TLS_ST_SW_KEY_EXCH
,

1017 
TLS_ST_SW_CERT_REQ
,

1018 
TLS_ST_SW_SRVR_DONE
,

1019 
TLS_ST_SR_CERT
,

1020 
TLS_ST_SR_KEY_EXCH
,

1021 
TLS_ST_SR_CERT_VRFY
,

1022 
TLS_ST_SR_NEXT_PROTO
,

1023 
TLS_ST_SR_CHANGE
,

1024 
TLS_ST_SR_FINISHED
,

1025 
TLS_ST_SW_SESSION_TICKET
,

1026 
TLS_ST_SW_CERT_STATUS
,

1027 
TLS_ST_SW_CHANGE
,

1028 
TLS_ST_SW_FINISHED
,

1029 
TLS_ST_SW_ENCRYPTED_EXTENSIONS
,

1030 
TLS_ST_CR_ENCRYPTED_EXTENSIONS
,

1031 
TLS_ST_CR_CERT_VRFY
,

1032 
TLS_ST_SW_CERT_VRFY
,

1033 
TLS_ST_CR_HELLO_REQ
,

1034 
TLS_ST_SW_KEY_UPDATE
,

1035 
TLS_ST_CW_KEY_UPDATE
,

1036 
TLS_ST_SR_KEY_UPDATE
,

1037 
TLS_ST_CR_KEY_UPDATE
,

1038 
TLS_ST_EARLY_DATA
,

1039 
TLS_ST_PENDING_EARLY_DATA_END
,

1040 
TLS_ST_CW_END_OF_EARLY_DATA
,

1041 
TLS_ST_SR_END_OF_EARLY_DATA


1042 } 
	tOSSL_HANDSHAKE_STATE
;

1052 
	#SSL_ST_CONNECT
 0x1000

	)

1053 
	#SSL_ST_ACCEPT
 0x2000

	)

1055 
	#SSL_ST_MASK
 0x0FFF

	)

1057 
	#SSL_CB_LOOP
 0x01

	)

1058 
	#SSL_CB_EXIT
 0x02

	)

1059 
	#SSL_CB_READ
 0x04

	)

1060 
	#SSL_CB_WRITE
 0x08

	)

1061 
	#SSL_CB_ALERT
 0x4000

	)

1062 
	#SSL_CB_READ_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_READ
)

	)

1063 
	#SSL_CB_WRITE_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_WRITE
)

	)

1064 
	#SSL_CB_ACCEPT_LOOP
 (
SSL_ST_ACCEPT
|
SSL_CB_LOOP
)

	)

1065 
	#SSL_CB_ACCEPT_EXIT
 (
SSL_ST_ACCEPT
|
SSL_CB_EXIT
)

	)

1066 
	#SSL_CB_CONNECT_LOOP
 (
SSL_ST_CONNECT
|
SSL_CB_LOOP
)

	)

1067 
	#SSL_CB_CONNECT_EXIT
 (
SSL_ST_CONNECT
|
SSL_CB_EXIT
)

	)

1068 
	#SSL_CB_HANDSHAKE_START
 0x10

	)

1069 
	#SSL_CB_HANDSHAKE_DONE
 0x20

	)

1072 
	#SSL_ö_c⁄√˘_öô
(
a
Ë(
	`SSL_ö_öô
◊Ë&& !
	`SSL_is_£rvî
◊))

	)

1073 
	#SSL_ö_ac˚±_öô
(
a
Ë(
	`SSL_ö_öô
◊Ë&& 
	`SSL_is_£rvî
◊))

	)

1074 
SSL_ö_öô
(c⁄° 
SSL
 *
s
);

1075 
SSL_ö_bef‹e
(c⁄° 
SSL
 *
s
);

1076 
SSL_is_öô_föished
(c⁄° 
SSL
 *
s
);

1082 
	#SSL_ST_READ_HEADER
 0xF0

	)

1083 
	#SSL_ST_READ_BODY
 0xF1

	)

1084 
	#SSL_ST_READ_DONE
 0xF2

	)

1092 
size_t
 
SSL_gë_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1093 
size_t
 
SSL_gë_≥î_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1099 
	#SSL_VERIFY_NONE
 0x00

	)

1100 
	#SSL_VERIFY_PEER
 0x01

	)

1101 
	#SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 0x02

	)

1102 
	#SSL_VERIFY_CLIENT_ONCE
 0x04

	)

1103 
	#SSL_VERIFY_POST_HANDSHAKE
 0x08

	)

1105 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

1106 
	#O≥nSSL_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1107 
	#SSLóy_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1111 
	#SSL_gë_cùhî
(
s
) \

1112 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1113 
	#SSL_gë_cùhî_bôs
(
s
,
≈
) \

1114 
	`SSL_CIPHER_gë_bôs
(
	`SSL_gë_cuºít_cùhî
(
s
),
≈
)

	)

1115 
	#SSL_gë_cùhî_vîsi⁄
(
s
) \

1116 
	`SSL_CIPHER_gë_vîsi⁄
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1117 
	#SSL_gë_cùhî_«me
(
s
) \

1118 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1119 
	#SSL_gë_time
(
a
Ë
	`SSL_SESSION_gë_time
◊)

	)

1120 
	#SSL_£t_time
(
a
,
b
Ë
	`SSL_SESSION_£t_time
(◊),(b))

	)

1121 
	#SSL_gë_timeout
(
a
Ë
	`SSL_SESSION_gë_timeout
◊)

	)

1122 
	#SSL_£t_timeout
(
a
,
b
Ë
	`SSL_SESSION_£t_timeout
(◊),(b))

	)

1124 
	#d2i_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_d2i_bio_of
(
SSL_SESSION
,
SSL_SESSION_√w
,
d2i_SSL_SESSION
,bp,s_id)

	)

1125 
	#i2d_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_i2d_bio_of
(
SSL_SESSION
,
i2d_SSL_SESSION
,bp,s_id)

	)

1127 
DECLARE_PEM_rw
(
SSL_SESSION
, SSL_SESSION)

1128 
	#SSL_AD_REASON_OFFSET
 1000

	)

1131 
	#SSL_AD_CLOSE_NOTIFY
 
SSL3_AD_CLOSE_NOTIFY


	)

1133 
	#SSL_AD_UNEXPECTED_MESSAGE
 
SSL3_AD_UNEXPECTED_MESSAGE


	)

1135 
	#SSL_AD_BAD_RECORD_MAC
 
SSL3_AD_BAD_RECORD_MAC


	)

1136 
	#SSL_AD_DECRYPTION_FAILED
 
TLS1_AD_DECRYPTION_FAILED


	)

1137 
	#SSL_AD_RECORD_OVERFLOW
 
TLS1_AD_RECORD_OVERFLOW


	)

1139 
	#SSL_AD_DECOMPRESSION_FAILURE
 
SSL3_AD_DECOMPRESSION_FAILURE


	)

1141 
	#SSL_AD_HANDSHAKE_FAILURE
 
SSL3_AD_HANDSHAKE_FAILURE


	)

1143 
	#SSL_AD_NO_CERTIFICATE
 
SSL3_AD_NO_CERTIFICATE


	)

1144 
	#SSL_AD_BAD_CERTIFICATE
 
SSL3_AD_BAD_CERTIFICATE


	)

1145 
	#SSL_AD_UNSUPPORTED_CERTIFICATE
 
SSL3_AD_UNSUPPORTED_CERTIFICATE


	)

1146 
	#SSL_AD_CERTIFICATE_REVOKED
 
SSL3_AD_CERTIFICATE_REVOKED


	)

1147 
	#SSL_AD_CERTIFICATE_EXPIRED
 
SSL3_AD_CERTIFICATE_EXPIRED


	)

1148 
	#SSL_AD_CERTIFICATE_UNKNOWN
 
SSL3_AD_CERTIFICATE_UNKNOWN


	)

1150 
	#SSL_AD_ILLEGAL_PARAMETER
 
SSL3_AD_ILLEGAL_PARAMETER


	)

1152 
	#SSL_AD_UNKNOWN_CA
 
TLS1_AD_UNKNOWN_CA


	)

1154 
	#SSL_AD_ACCESS_DENIED
 
TLS1_AD_ACCESS_DENIED


	)

1156 
	#SSL_AD_DECODE_ERROR
 
TLS1_AD_DECODE_ERROR


	)

1157 
	#SSL_AD_DECRYPT_ERROR
 
TLS1_AD_DECRYPT_ERROR


	)

1159 
	#SSL_AD_EXPORT_RESTRICTION
 
TLS1_AD_EXPORT_RESTRICTION


	)

1161 
	#SSL_AD_PROTOCOL_VERSION
 
TLS1_AD_PROTOCOL_VERSION


	)

1163 
	#SSL_AD_INSUFFICIENT_SECURITY
 
TLS1_AD_INSUFFICIENT_SECURITY


	)

1165 
	#SSL_AD_INTERNAL_ERROR
 
TLS1_AD_INTERNAL_ERROR


	)

1166 
	#SSL_AD_USER_CANCELLED
 
TLS1_AD_USER_CANCELLED


	)

1167 
	#SSL_AD_NO_RENEGOTIATION
 
TLS1_AD_NO_RENEGOTIATION


	)

1168 
	#SSL_AD_MISSING_EXTENSION
 
TLS13_AD_MISSING_EXTENSION


	)

1169 
	#SSL_AD_CERTIFICATE_REQUIRED
 
TLS13_AD_CERTIFICATE_REQUIRED


	)

1170 
	#SSL_AD_UNSUPPORTED_EXTENSION
 
TLS1_AD_UNSUPPORTED_EXTENSION


	)

1171 
	#SSL_AD_CERTIFICATE_UNOBTAINABLE
 
TLS1_AD_CERTIFICATE_UNOBTAINABLE


	)

1172 
	#SSL_AD_UNRECOGNIZED_NAME
 
TLS1_AD_UNRECOGNIZED_NAME


	)

1173 
	#SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 
TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE


	)

1174 
	#SSL_AD_BAD_CERTIFICATE_HASH_VALUE
 
TLS1_AD_BAD_CERTIFICATE_HASH_VALUE


	)

1176 
	#SSL_AD_UNKNOWN_PSK_IDENTITY
 
TLS1_AD_UNKNOWN_PSK_IDENTITY


	)

1178 
	#SSL_AD_INAPPROPRIATE_FALLBACK
 
TLS1_AD_INAPPROPRIATE_FALLBACK


	)

1179 
	#SSL_AD_NO_APPLICATION_PROTOCOL
 
TLS1_AD_NO_APPLICATION_PROTOCOL


	)

1180 
	#SSL_ERROR_NONE
 0

	)

1181 
	#SSL_ERROR_SSL
 1

	)

1182 
	#SSL_ERROR_WANT_READ
 2

	)

1183 
	#SSL_ERROR_WANT_WRITE
 3

	)

1184 
	#SSL_ERROR_WANT_X509_LOOKUP
 4

	)

1185 
	#SSL_ERROR_SYSCALL
 5

	)

1187 
	#SSL_ERROR_ZERO_RETURN
 6

	)

1188 
	#SSL_ERROR_WANT_CONNECT
 7

	)

1189 
	#SSL_ERROR_WANT_ACCEPT
 8

	)

1190 
	#SSL_ERROR_WANT_ASYNC
 9

	)

1191 
	#SSL_ERROR_WANT_ASYNC_JOB
 10

	)

1192 
	#SSL_ERROR_WANT_CLIENT_HELLO_CB
 11

	)

1193 
	#SSL_CTRL_SET_TMP_DH
 3

	)

1194 
	#SSL_CTRL_SET_TMP_ECDH
 4

	)

1195 
	#SSL_CTRL_SET_TMP_DH_CB
 6

	)

1196 
	#SSL_CTRL_GET_CLIENT_CERT_REQUEST
 9

	)

1197 
	#SSL_CTRL_GET_NUM_RENEGOTIATIONS
 10

	)

1198 
	#SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
 11

	)

1199 
	#SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
 12

	)

1200 
	#SSL_CTRL_GET_FLAGS
 13

	)

1201 
	#SSL_CTRL_EXTRA_CHAIN_CERT
 14

	)

1202 
	#SSL_CTRL_SET_MSG_CALLBACK
 15

	)

1203 
	#SSL_CTRL_SET_MSG_CALLBACK_ARG
 16

	)

1205 
	#SSL_CTRL_SET_MTU
 17

	)

1207 
	#SSL_CTRL_SESS_NUMBER
 20

	)

1208 
	#SSL_CTRL_SESS_CONNECT
 21

	)

1209 
	#SSL_CTRL_SESS_CONNECT_GOOD
 22

	)

1210 
	#SSL_CTRL_SESS_CONNECT_RENEGOTIATE
 23

	)

1211 
	#SSL_CTRL_SESS_ACCEPT
 24

	)

1212 
	#SSL_CTRL_SESS_ACCEPT_GOOD
 25

	)

1213 
	#SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
 26

	)

1214 
	#SSL_CTRL_SESS_HIT
 27

	)

1215 
	#SSL_CTRL_SESS_CB_HIT
 28

	)

1216 
	#SSL_CTRL_SESS_MISSES
 29

	)

1217 
	#SSL_CTRL_SESS_TIMEOUTS
 30

	)

1218 
	#SSL_CTRL_SESS_CACHE_FULL
 31

	)

1219 
	#SSL_CTRL_MODE
 33

	)

1220 
	#SSL_CTRL_GET_READ_AHEAD
 40

	)

1221 
	#SSL_CTRL_SET_READ_AHEAD
 41

	)

1222 
	#SSL_CTRL_SET_SESS_CACHE_SIZE
 42

	)

1223 
	#SSL_CTRL_GET_SESS_CACHE_SIZE
 43

	)

1224 
	#SSL_CTRL_SET_SESS_CACHE_MODE
 44

	)

1225 
	#SSL_CTRL_GET_SESS_CACHE_MODE
 45

	)

1226 
	#SSL_CTRL_GET_MAX_CERT_LIST
 50

	)

1227 
	#SSL_CTRL_SET_MAX_CERT_LIST
 51

	)

1228 
	#SSL_CTRL_SET_MAX_SEND_FRAGMENT
 52

	)

1230 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
 53

	)

1231 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
 54

	)

1232 
	#SSL_CTRL_SET_TLSEXT_HOSTNAME
 55

	)

1233 
	#SSL_CTRL_SET_TLSEXT_DEBUG_CB
 56

	)

1234 
	#SSL_CTRL_SET_TLSEXT_DEBUG_ARG
 57

	)

1235 
	#SSL_CTRL_GET_TLSEXT_TICKET_KEYS
 58

	)

1236 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEYS
 59

	)

1240 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
 63

	)

1241 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
 64

	)

1242 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
 65

	)

1243 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
 66

	)

1244 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
 67

	)

1245 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
 68

	)

1246 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
 69

	)

1247 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
 70

	)

1248 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
 71

	)

1249 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
 72

	)

1250 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB
 75

	)

1251 
	#SSL_CTRL_SET_SRP_VERIFY_PARAM_CB
 76

	)

1252 
	#SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB
 77

	)

1253 
	#SSL_CTRL_SET_SRP_ARG
 78

	)

1254 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME
 79

	)

1255 
	#SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH
 80

	)

1256 
	#SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD
 81

	)

1257 #i‚de‡
OPENSSL_NO_HEARTBEATS


1258 
	#SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT
 85

	)

1259 
	#SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING
 86

	)

1260 
	#SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS
 87

	)

1262 
	#DTLS_CTRL_GET_TIMEOUT
 73

	)

1263 
	#DTLS_CTRL_HANDLE_TIMEOUT
 74

	)

1264 
	#SSL_CTRL_GET_RI_SUPPORT
 76

	)

1265 
	#SSL_CTRL_CLEAR_MODE
 78

	)

1266 
	#SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB
 79

	)

1267 
	#SSL_CTRL_GET_EXTRA_CHAIN_CERTS
 82

	)

1268 
	#SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
 83

	)

1269 
	#SSL_CTRL_CHAIN
 88

	)

1270 
	#SSL_CTRL_CHAIN_CERT
 89

	)

1271 
	#SSL_CTRL_GET_GROUPS
 90

	)

1272 
	#SSL_CTRL_SET_GROUPS
 91

	)

1273 
	#SSL_CTRL_SET_GROUPS_LIST
 92

	)

1274 
	#SSL_CTRL_GET_SHARED_GROUP
 93

	)

1275 
	#SSL_CTRL_SET_SIGALGS
 97

	)

1276 
	#SSL_CTRL_SET_SIGALGS_LIST
 98

	)

1277 
	#SSL_CTRL_CERT_FLAGS
 99

	)

1278 
	#SSL_CTRL_CLEAR_CERT_FLAGS
 100

	)

1279 
	#SSL_CTRL_SET_CLIENT_SIGALGS
 101

	)

1280 
	#SSL_CTRL_SET_CLIENT_SIGALGS_LIST
 102

	)

1281 
	#SSL_CTRL_GET_CLIENT_CERT_TYPES
 103

	)

1282 
	#SSL_CTRL_SET_CLIENT_CERT_TYPES
 104

	)

1283 
	#SSL_CTRL_BUILD_CERT_CHAIN
 105

	)

1284 
	#SSL_CTRL_SET_VERIFY_CERT_STORE
 106

	)

1285 
	#SSL_CTRL_SET_CHAIN_CERT_STORE
 107

	)

1286 
	#SSL_CTRL_GET_PEER_SIGNATURE_NID
 108

	)

1287 
	#SSL_CTRL_GET_PEER_TMP_KEY
 109

	)

1288 
	#SSL_CTRL_GET_RAW_CIPHERLIST
 110

	)

1289 
	#SSL_CTRL_GET_EC_POINT_FORMATS
 111

	)

1290 
	#SSL_CTRL_GET_CHAIN_CERTS
 115

	)

1291 
	#SSL_CTRL_SELECT_CURRENT_CERT
 116

	)

1292 
	#SSL_CTRL_SET_CURRENT_CERT
 117

	)

1293 
	#SSL_CTRL_SET_DH_AUTO
 118

	)

1294 
	#DTLS_CTRL_SET_LINK_MTU
 120

	)

1295 
	#DTLS_CTRL_GET_LINK_MIN_MTU
 121

	)

1296 
	#SSL_CTRL_GET_EXTMS_SUPPORT
 122

	)

1297 
	#SSL_CTRL_SET_MIN_PROTO_VERSION
 123

	)

1298 
	#SSL_CTRL_SET_MAX_PROTO_VERSION
 124

	)

1299 
	#SSL_CTRL_SET_SPLIT_SEND_FRAGMENT
 125

	)

1300 
	#SSL_CTRL_SET_MAX_PIPELINES
 126

	)

1301 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE
 127

	)

1302 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB
 128

	)

1303 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG
 129

	)

1304 
	#SSL_CTRL_GET_MIN_PROTO_VERSION
 130

	)

1305 
	#SSL_CTRL_GET_MAX_PROTO_VERSION
 131

	)

1306 
	#SSL_CTRL_GET_SIGNATURE_NID
 132

	)

1307 
	#SSL_CTRL_GET_TMP_KEY
 133

	)

1308 
	#SSL_CERT_SET_FIRST
 1

	)

1309 
	#SSL_CERT_SET_NEXT
 2

	)

1310 
	#SSL_CERT_SET_SERVER
 3

	)

1311 
	#DTLSv1_gë_timeout
(
s¶
, 
¨g
) \

1312 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_GET_TIMEOUT
,0, (*)(
¨g
))

	)

1313 
	#DTLSv1_h™dÀ_timeout
(
s¶
) \

1314 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_HANDLE_TIMEOUT
,0, 
NULL
)

	)

1315 
	#SSL_num_ª√gŸüti⁄s
(
s¶
) \

1316 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1317 
	#SSL_˛ór_num_ª√gŸüti⁄s
(
s¶
) \

1318 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1319 
	#SSL_tŸÆ_ª√gŸüti⁄s
(
s¶
) \

1320 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
,0,
NULL
)

	)

1321 
	#SSL_CTX_£t_tmp_dh
(
˘x
,
dh
) \

1322 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_DH
,0,(*)(
dh
))

	)

1323 
	#SSL_CTX_£t_tmp_ecdh
(
˘x
,
ecdh
) \

1324 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)(
ecdh
))

	)

1325 
	#SSL_CTX_£t_dh_auto
(
˘x
, 
⁄off
) \

1326 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_DH_AUTO
,
⁄off
,
NULL
)

	)

1327 
	#SSL_£t_dh_auto
(
s
, 
⁄off
) \

1328 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_DH_AUTO
,
⁄off
,
NULL
)

	)

1329 
	#SSL_£t_tmp_dh
(
s¶
,
dh
) \

1330 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_DH
,0,(*)(
dh
))

	)

1331 
	#SSL_£t_tmp_ecdh
(
s¶
,
ecdh
) \

1332 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)(
ecdh
))

	)

1333 
	#SSL_CTX_add_exåa_chaö_˚π
(
˘x
,
x509
) \

1334 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_EXTRA_CHAIN_CERT
,0,(*)(
x509
))

	)

1335 
	#SSL_CTX_gë_exåa_chaö_˚πs
(
˘x
,
px509
) \

1336 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_EXTRA_CHAIN_CERTS
,0,
px509
)

	)

1337 
	#SSL_CTX_gë_exåa_chaö_˚πs_⁄ly
(
˘x
,
px509
) \

1338 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_EXTRA_CHAIN_CERTS
,1,
px509
)

	)

1339 
	#SSL_CTX_˛ór_exåa_chaö_˚πs
(
˘x
) \

1340 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
,0,
NULL
)

	)

1341 
	#SSL_CTX_£t0_chaö
(
˘x
,
sk
) \

1342 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN
,0,(*)(
sk
))

	)

1343 
	#SSL_CTX_£t1_chaö
(
˘x
,
sk
) \

1344 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN
,1,(*)(
sk
))

	)

1345 
	#SSL_CTX_add0_chaö_˚π
(
˘x
,
x509
) \

1346 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN_CERT
,0,(*)(
x509
))

	)

1347 
	#SSL_CTX_add1_chaö_˚π
(
˘x
,
x509
) \

1348 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN_CERT
,1,(*)(
x509
))

	)

1349 
	#SSL_CTX_gë0_chaö_˚πs
(
˘x
,
px509
) \

1350 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_CHAIN_CERTS
,0,
px509
)

	)

1351 
	#SSL_CTX_˛ór_chaö_˚πs
(
˘x
) \

1352 
	`SSL_CTX_£t0_chaö
(
˘x
,
NULL
)

	)

1353 
	#SSL_CTX_buûd_˚π_chaö
(
˘x
, 
Êags
) \

1354 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_BUILD_CERT_CHAIN
, 
Êags
, 
NULL
)

	)

1355 
	#SSL_CTX_£À˘_cuºít_˚π
(
˘x
,
x509
) \

1356 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SELECT_CURRENT_CERT
,0,(*)(
x509
))

	)

1357 
	#SSL_CTX_£t_cuºít_˚π
(
˘x
, 
›
) \

1358 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CURRENT_CERT
, 
›
, 
NULL
)

	)

1359 
	#SSL_CTX_£t0_vîify_˚π_°‹e
(
˘x
,
°
) \

1360 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,0,(*)(
°
))

	)

1361 
	#SSL_CTX_£t1_vîify_˚π_°‹e
(
˘x
,
°
) \

1362 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,1,(*)(
°
))

	)

1363 
	#SSL_CTX_£t0_chaö_˚π_°‹e
(
˘x
,
°
) \

1364 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,0,(*)(
°
))

	)

1365 
	#SSL_CTX_£t1_chaö_˚π_°‹e
(
˘x
,
°
) \

1366 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,1,(*)(
°
))

	)

1367 
	#SSL_£t0_chaö
(
s
,
sk
) \

1368 
	`SSL_˘æ
(
s
,
SSL_CTRL_CHAIN
,0,(*)(
sk
))

	)

1369 
	#SSL_£t1_chaö
(
s
,
sk
) \

1370 
	`SSL_˘æ
(
s
,
SSL_CTRL_CHAIN
,1,(*)(
sk
))

	)

1371 
	#SSL_add0_chaö_˚π
(
s
,
x509
) \

1372 
	`SSL_˘æ
(
s
,
SSL_CTRL_CHAIN_CERT
,0,(*)(
x509
))

	)

1373 
	#SSL_add1_chaö_˚π
(
s
,
x509
) \

1374 
	`SSL_˘æ
(
s
,
SSL_CTRL_CHAIN_CERT
,1,(*)(
x509
))

	)

1375 
	#SSL_gë0_chaö_˚πs
(
s
,
px509
) \

1376 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_CHAIN_CERTS
,0,
px509
)

	)

1377 
	#SSL_˛ór_chaö_˚πs
(
s
) \

1378 
	`SSL_£t0_chaö
(
s
,
NULL
)

	)

1379 
	#SSL_buûd_˚π_chaö
(
s
, 
Êags
) \

1380 
	`SSL_˘æ
(
s
,
SSL_CTRL_BUILD_CERT_CHAIN
, 
Êags
, 
NULL
)

	)

1381 
	#SSL_£À˘_cuºít_˚π
(
s
,
x509
) \

1382 
	`SSL_˘æ
(
s
,
SSL_CTRL_SELECT_CURRENT_CERT
,0,(*)(
x509
))

	)

1383 
	#SSL_£t_cuºít_˚π
(
s
,
›
) \

1384 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CURRENT_CERT
, 
›
, 
NULL
)

	)

1385 
	#SSL_£t0_vîify_˚π_°‹e
(
s
,
°
) \

1386 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,0,(*)(
°
))

	)

1387 
	#SSL_£t1_vîify_˚π_°‹e
(
s
,
°
) \

1388 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,1,(*)(
°
))

	)

1389 
	#SSL_£t0_chaö_˚π_°‹e
(
s
,
°
) \

1390 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,0,(*)(
°
))

	)

1391 
	#SSL_£t1_chaö_˚π_°‹e
(
s
,
°
) \

1392 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,1,(*)(
°
))

	)

1393 
	#SSL_gë1_groups
(
s
, 
gli°
) \

1394 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_GROUPS
,0,(*)(
gli°
))

	)

1395 
	#SSL_CTX_£t1_groups
(
˘x
, 
gli°
, 
gli°Àn
) \

1396 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_GROUPS
,
gli°Àn
,(*)(
gli°
))

	)

1397 
	#SSL_CTX_£t1_groups_li°
(
˘x
, 
s
) \

1398 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_GROUPS_LIST
,0,(*)(
s
))

	)

1399 
	#SSL_£t1_groups
(
s
, 
gli°
, 
gli°Àn
) \

1400 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_GROUPS
,
gli°Àn
,(*)(
gli°
))

	)

1401 
	#SSL_£t1_groups_li°
(
s
, 
°r
) \

1402 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_GROUPS_LIST
,0,(*)(
°r
))

	)

1403 
	#SSL_gë_sh¨ed_group
(
s
, 
n
) \

1404 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_SHARED_GROUP
,
n
,
NULL
)

	)

1405 
	#SSL_CTX_£t1_sigÆgs
(
˘x
, 
¶i°
, 
¶i°Àn
) \

1406 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SIGALGS
,
¶i°Àn
,(*)(
¶i°
))

	)

1407 
	#SSL_CTX_£t1_sigÆgs_li°
(
˘x
, 
s
) \

1408 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SIGALGS_LIST
,0,(*)(
s
))

	)

1409 
	#SSL_£t1_sigÆgs
(
s
, 
¶i°
, 
¶i°Àn
) \

1410 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_SIGALGS
,
¶i°Àn
,(*)(
¶i°
))

	)

1411 
	#SSL_£t1_sigÆgs_li°
(
s
, 
°r
) \

1412 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_SIGALGS_LIST
,0,(*)(
°r
))

	)

1413 
	#SSL_CTX_£t1_˛õ¡_sigÆgs
(
˘x
, 
¶i°
, 
¶i°Àn
) \

1414 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_SIGALGS
,
¶i°Àn
,(*)(
¶i°
))

	)

1415 
	#SSL_CTX_£t1_˛õ¡_sigÆgs_li°
(
˘x
, 
s
) \

1416 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_SIGALGS_LIST
,0,(*)(
s
))

	)

1417 
	#SSL_£t1_˛õ¡_sigÆgs
(
s
, 
¶i°
, 
¶i°Àn
) \

1418 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CLIENT_SIGALGS
,
¶i°Àn
,(*)(
¶i°
))

	)

1419 
	#SSL_£t1_˛õ¡_sigÆgs_li°
(
s
, 
°r
) \

1420 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CLIENT_SIGALGS_LIST
,0,(*)(
°r
))

	)

1421 
	#SSL_gë0_˚πifiˇã_ty≥s
(
s
, 
˛i°
) \

1422 
	`SSL_˘æ
(
s
, 
SSL_CTRL_GET_CLIENT_CERT_TYPES
, 0, (*)(
˛i°
))

	)

1423 
	#SSL_CTX_£t1_˛õ¡_˚πifiˇã_ty≥s
(
˘x
, 
˛i°
, 
˛i°Àn
) \

1424 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_CERT_TYPES
,
˛i°Àn
, \

1425 (*)(
˛i°
))

	)

1426 
	#SSL_£t1_˛õ¡_˚πifiˇã_ty≥s
(
s
, 
˛i°
, 
˛i°Àn
) \

1427 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CLIENT_CERT_TYPES
,
˛i°Àn
,(*)(
˛i°
))

	)

1428 
	#SSL_gë_sig«tuª_nid
(
s
, 
≤
) \

1429 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_SIGNATURE_NID
,0,
≤
)

	)

1430 
	#SSL_gë_≥î_sig«tuª_nid
(
s
, 
≤
) \

1431 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_PEER_SIGNATURE_NID
,0,
≤
)

	)

1432 
	#SSL_gë_≥î_tmp_key
(
s
, 
pk
) \

1433 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_PEER_TMP_KEY
,0,
pk
)

	)

1434 
	#SSL_gë_tmp_key
(
s
, 
pk
) \

1435 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_TMP_KEY
,0,
pk
)

	)

1436 
	#SSL_gë0_øw_cùhîli°
(
s
, 
∂°
) \

1437 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_RAW_CIPHERLIST
,0,
∂°
)

	)

1438 
	#SSL_gë0_ec_poöt_f‹m©s
(
s
, 
∂°
) \

1439 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_EC_POINT_FORMATS
,0,
∂°
)

	)

1440 
	#SSL_CTX_£t_mö_¥Ÿo_vîsi⁄
(
˘x
, 
vîsi⁄
) \

1441 
	`SSL_CTX_˘æ
(
˘x
, 
SSL_CTRL_SET_MIN_PROTO_VERSION
, 
vîsi⁄
, 
NULL
)

	)

1442 
	#SSL_CTX_£t_max_¥Ÿo_vîsi⁄
(
˘x
, 
vîsi⁄
) \

1443 
	`SSL_CTX_˘æ
(
˘x
, 
SSL_CTRL_SET_MAX_PROTO_VERSION
, 
vîsi⁄
, 
NULL
)

	)

1444 
	#SSL_CTX_gë_mö_¥Ÿo_vîsi⁄
(
˘x
) \

1445 
	`SSL_CTX_˘æ
(
˘x
, 
SSL_CTRL_GET_MIN_PROTO_VERSION
, 0, 
NULL
)

	)

1446 
	#SSL_CTX_gë_max_¥Ÿo_vîsi⁄
(
˘x
) \

1447 
	`SSL_CTX_˘æ
(
˘x
, 
SSL_CTRL_GET_MAX_PROTO_VERSION
, 0, 
NULL
)

	)

1448 
	#SSL_£t_mö_¥Ÿo_vîsi⁄
(
s
, 
vîsi⁄
) \

1449 
	`SSL_˘æ
(
s
, 
SSL_CTRL_SET_MIN_PROTO_VERSION
, 
vîsi⁄
, 
NULL
)

	)

1450 
	#SSL_£t_max_¥Ÿo_vîsi⁄
(
s
, 
vîsi⁄
) \

1451 
	`SSL_˘æ
(
s
, 
SSL_CTRL_SET_MAX_PROTO_VERSION
, 
vîsi⁄
, 
NULL
)

	)

1452 
	#SSL_gë_mö_¥Ÿo_vîsi⁄
(
s
) \

1453 
	`SSL_˘æ
(
s
, 
SSL_CTRL_GET_MIN_PROTO_VERSION
, 0, 
NULL
)

	)

1454 
	#SSL_gë_max_¥Ÿo_vîsi⁄
(
s
) \

1455 
	`SSL_˘æ
(
s
, 
SSL_CTRL_GET_MAX_PROTO_VERSION
, 0, 
NULL
)

	)

1458 
	#SSL_CTRL_GET_SERVER_TMP_KEY
 \

1459 
SSL_CTRL_GET_PEER_TMP_KEY


	)

1460 
	#SSL_gë_£rvî_tmp_key
(
s
, 
pk
) \

1461 
	`SSL_gë_≥î_tmp_key
(
s
, 
pk
)

	)

1467 
	#SSL_CTRL_GET_CURVES
 
SSL_CTRL_GET_GROUPS


	)

1468 
	#SSL_CTRL_SET_CURVES
 
SSL_CTRL_SET_GROUPS


	)

1469 
	#SSL_CTRL_SET_CURVES_LIST
 
SSL_CTRL_SET_GROUPS_LIST


	)

1470 
	#SSL_CTRL_GET_SHARED_CURVE
 
SSL_CTRL_GET_SHARED_GROUP


	)

1472 
	#SSL_gë1_curves
 
SSL_gë1_groups


	)

1473 
	#SSL_CTX_£t1_curves
 
SSL_CTX_£t1_groups


	)

1474 
	#SSL_CTX_£t1_curves_li°
 
SSL_CTX_£t1_groups_li°


	)

1475 
	#SSL_£t1_curves
 
SSL_£t1_groups


	)

1476 
	#SSL_£t1_curves_li°
 
SSL_£t1_groups_li°


	)

1477 
	#SSL_gë_sh¨ed_curve
 
SSL_gë_sh¨ed_group


	)

1480 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

1482 
	#SSL_CTX_√ed_tmp_RSA
(
˘x
Ë0

	)

1483 
	#SSL_CTX_£t_tmp_rß
(
˘x
,
rß
Ë1

	)

1484 
	#SSL_√ed_tmp_RSA
(
s¶
Ë0

	)

1485 
	#SSL_£t_tmp_rß
(
s¶
,
rß
Ë1

	)

1486 
	#SSL_CTX_£t_ecdh_auto
(
dummy
, 
⁄off
Ë((⁄offË!0)

	)

1487 
	#SSL_£t_ecdh_auto
(
dummy
, 
⁄off
Ë((⁄offË!0)

	)

1492 
	#SSL_CTX_£t_tmp_rß_ˇŒback
(
˘x
, 
cb
Ë0Ë(cb)(
NULL
, 0, 0)

	)

1493 
	#SSL_£t_tmp_rß_ˇŒback
(
s¶
, 
cb
Ë0Ë(cb)(
NULL
, 0, 0)

	)

1495 
__owur
 c⁄° 
BIO_METHOD
 *
BIO_f_s¶
();

1496 
__owur
 
BIO
 *
BIO_√w_s¶
(
SSL_CTX
 *
˘x
, 
˛õ¡
);

1497 
__owur
 
BIO
 *
BIO_√w_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1498 
__owur
 
BIO
 *
BIO_√w_buf„r_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1499 
__owur
 
BIO_s¶_c›y_£ssi⁄_id
(
BIO
 *
to
, BIO *
‰om
);

1500 
BIO_s¶_shutdown
(
BIO
 *
s¶_bio
);

1502 
__owur
 
SSL_CTX_£t_cùhî_li°
(
SSL_CTX
 *, c⁄° *
°r
);

1503 
__owur
 
SSL_CTX
 *
SSL_CTX_√w
(c⁄° 
SSL_METHOD
 *
mëh
);

1504 
SSL_CTX_up_ªf
(
SSL_CTX
 *
˘x
);

1505 
SSL_CTX_‰ì
(
SSL_CTX
 *);

1506 
__owur
 
SSL_CTX_£t_timeout
(
SSL_CTX
 *
˘x
, 
t
);

1507 
__owur
 
SSL_CTX_gë_timeout
(c⁄° 
SSL_CTX
 *
˘x
);

1508 
__owur
 
X509_STORE
 *
SSL_CTX_gë_˚π_°‹e
(c⁄° 
SSL_CTX
 *);

1509 
SSL_CTX_£t_˚π_°‹e
(
SSL_CTX
 *, 
X509_STORE
 *);

1510 
SSL_CTX_£t1_˚π_°‹e
(
SSL_CTX
 *, 
X509_STORE
 *);

1511 
__owur
 
SSL_w™t
(c⁄° 
SSL
 *
s
);

1512 
__owur
 
SSL_˛ór
(
SSL
 *
s
);

1514 
SSL_CTX_Êush_£ssi⁄s
(
SSL_CTX
 *
˘x
, 
tm
);

1516 
__owur
 c⁄° 
SSL_CIPHER
 *
SSL_gë_cuºít_cùhî
(c⁄° 
SSL
 *
s
);

1517 
__owur
 c⁄° 
SSL_CIPHER
 *
SSL_gë_≥ndög_cùhî
(c⁄° 
SSL
 *
s
);

1518 
__owur
 
SSL_CIPHER_gë_bôs
(c⁄° 
SSL_CIPHER
 *
c
, *
Æg_bôs
);

1519 
__owur
 c⁄° *
SSL_CIPHER_gë_vîsi⁄
(c⁄° 
SSL_CIPHER
 *
c
);

1520 
__owur
 c⁄° *
SSL_CIPHER_gë_«me
(c⁄° 
SSL_CIPHER
 *
c
);

1521 
__owur
 c⁄° *
SSL_CIPHER_°™d¨d_«me
(c⁄° 
SSL_CIPHER
 *
c
);

1522 
__owur
 c⁄° *
OPENSSL_cùhî_«me
(c⁄° *
rfc_«me
);

1523 
__owur
 
uöt32_t
 
SSL_CIPHER_gë_id
(c⁄° 
SSL_CIPHER
 *
c
);

1524 
__owur
 
uöt16_t
 
SSL_CIPHER_gë_¥Ÿocﬁ_id
(c⁄° 
SSL_CIPHER
 *
c
);

1525 
__owur
 
SSL_CIPHER_gë_kx_nid
(c⁄° 
SSL_CIPHER
 *
c
);

1526 
__owur
 
SSL_CIPHER_gë_auth_nid
(c⁄° 
SSL_CIPHER
 *
c
);

1527 
__owur
 c⁄° 
EVP_MD
 *
SSL_CIPHER_gë_h™dshake_dige°
(c⁄° 
SSL_CIPHER
 *
c
);

1528 
__owur
 
SSL_CIPHER_is_´ad
(c⁄° 
SSL_CIPHER
 *
c
);

1530 
__owur
 
SSL_gë_fd
(c⁄° 
SSL
 *
s
);

1531 
__owur
 
SSL_gë_rfd
(c⁄° 
SSL
 *
s
);

1532 
__owur
 
SSL_gë_wfd
(c⁄° 
SSL
 *
s
);

1533 
__owur
 c⁄° *
SSL_gë_cùhî_li°
(c⁄° 
SSL
 *
s
, 
n
);

1534 
__owur
 *
SSL_gë_sh¨ed_cùhîs
(c⁄° 
SSL
 *
s
, *
buf
, 
size
);

1535 
__owur
 
SSL_gë_ªad_ahód
(c⁄° 
SSL
 *
s
);

1536 
__owur
 
SSL_≥ndög
(c⁄° 
SSL
 *
s
);

1537 
__owur
 
SSL_has_≥ndög
(c⁄° 
SSL
 *
s
);

1538 #i‚de‡
OPENSSL_NO_SOCK


1539 
__owur
 
SSL_£t_fd
(
SSL
 *
s
, 
fd
);

1540 
__owur
 
SSL_£t_rfd
(
SSL
 *
s
, 
fd
);

1541 
__owur
 
SSL_£t_wfd
(
SSL
 *
s
, 
fd
);

1543 
SSL_£t0_rbio
(
SSL
 *
s
, 
BIO
 *
rbio
);

1544 
SSL_£t0_wbio
(
SSL
 *
s
, 
BIO
 *
wbio
);

1545 
SSL_£t_bio
(
SSL
 *
s
, 
BIO
 *
rbio
, BIO *
wbio
);

1546 
__owur
 
BIO
 *
SSL_gë_rbio
(c⁄° 
SSL
 *
s
);

1547 
__owur
 
BIO
 *
SSL_gë_wbio
(c⁄° 
SSL
 *
s
);

1548 
__owur
 
SSL_£t_cùhî_li°
(
SSL
 *
s
, c⁄° *
°r
);

1549 
__owur
 
SSL_CTX_£t_cùhîsuôes
(
SSL_CTX
 *
˘x
, c⁄° *
°r
);

1550 
__owur
 
SSL_£t_cùhîsuôes
(
SSL
 *
s
, c⁄° *
°r
);

1551 
SSL_£t_ªad_ahód
(
SSL
 *
s
, 
yes
);

1552 
__owur
 
SSL_gë_vîify_mode
(c⁄° 
SSL
 *
s
);

1553 
__owur
 
SSL_gë_vîify_dïth
(c⁄° 
SSL
 *
s
);

1554 
__owur
 
SSL_vîify_cb
 
SSL_gë_vîify_ˇŒback
(c⁄° 
SSL
 *
s
);

1555 
SSL_£t_vîify
(
SSL
 *
s
, 
mode
, 
SSL_vîify_cb
 
ˇŒback
);

1556 
SSL_£t_vîify_dïth
(
SSL
 *
s
, 
dïth
);

1557 
SSL_£t_˚π_cb
(
SSL
 *
s
, (*
cb
Ë(SSL *
s¶
, *
¨g
), *arg);

1558 #i‚de‡
OPENSSL_NO_RSA


1559 
__owur
 
SSL_u£_RSAPriv©eKey
(
SSL
 *
s¶
, 
RSA
 *
rß
);

1560 
__owur
 
SSL_u£_RSAPriv©eKey_ASN1
(
SSL
 *
s¶
, c⁄° *
d
,

1561 
Àn
);

1563 
__owur
 
SSL_u£_Priv©eKey
(
SSL
 *
s¶
, 
EVP_PKEY
 *
pkey
);

1564 
__owur
 
SSL_u£_Priv©eKey_ASN1
(
pk
, 
SSL
 *
s¶
, c⁄° *
d
,

1565 
Àn
);

1566 
__owur
 
SSL_u£_˚πifiˇã
(
SSL
 *
s¶
, 
X509
 *
x
);

1567 
__owur
 
SSL_u£_˚πifiˇã_ASN1
(
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1568 
__owur
 
SSL_u£_˚π_™d_key
(
SSL
 *
s¶
, 
X509
 *
x509
, 
EVP_PKEY
 *
¥iv©ekey
,

1569 
STACK_OF
(
X509
Ë*
chaö
, 
ovîride
);

1573 
	#SSL_SERVERINFOV1
 1

	)

1574 
	#SSL_SERVERINFOV2
 2

	)

1577 
__owur
 
SSL_CTX_u£_£rvîöfo
(
SSL_CTX
 *
˘x
, c⁄° *
£rvîöfo
,

1578 
size_t
 
£rvîöfo_Àngth
);

1579 
__owur
 
SSL_CTX_u£_£rvîöfo_ex
(
SSL_CTX
 *
˘x
, 
vîsi⁄
,

1580 c⁄° *
£rvîöfo
,

1581 
size_t
 
£rvîöfo_Àngth
);

1582 
__owur
 
SSL_CTX_u£_£rvîöfo_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

1584 #i‚de‡
OPENSSL_NO_RSA


1585 
__owur
 
SSL_u£_RSAPriv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1588 
__owur
 
SSL_u£_Priv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1589 
__owur
 
SSL_u£_˚πifiˇã_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1591 #i‚de‡
OPENSSL_NO_RSA


1592 
__owur
 
SSL_CTX_u£_RSAPriv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
,

1593 
ty≥
);

1595 
__owur
 
SSL_CTX_u£_Priv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
,

1596 
ty≥
);

1597 
__owur
 
SSL_CTX_u£_˚πifiˇã_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
,

1598 
ty≥
);

1600 
__owur
 
SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

1601 
__owur
 
SSL_u£_˚πifiˇã_chaö_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
);

1602 
__owur
 
STACK_OF
(
X509_NAME
Ë*
SSL_lﬂd_˛õ¡_CA_fûe
(c⁄° *
fûe
);

1603 
__owur
 
SSL_add_fûe_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1604 c⁄° *
fûe
);

1605 
SSL_add_dú_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1606 c⁄° *
dú
);

1608 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

1609 
	#SSL_lﬂd_îr‹_°rögs
() \

1610 
	`OPENSSL_öô_s¶
(
OPENSSL_INIT_LOAD_SSL_STRINGS
 \

1611 | 
OPENSSL_INIT_LOAD_CRYPTO_STRINGS
, 
NULL
)

	)

1614 
__owur
 c⁄° *
SSL_°©e_°rög
(c⁄° 
SSL
 *
s
);

1615 
__owur
 c⁄° *
SSL_r°©e_°rög
(c⁄° 
SSL
 *
s
);

1616 
__owur
 c⁄° *
SSL_°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1617 
__owur
 c⁄° *
SSL_r°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1618 
__owur
 
SSL_SESSION_gë_time
(c⁄° 
SSL_SESSION
 *
s
);

1619 
__owur
 
SSL_SESSION_£t_time
(
SSL_SESSION
 *
s
, 
t
);

1620 
__owur
 
SSL_SESSION_gë_timeout
(c⁄° 
SSL_SESSION
 *
s
);

1621 
__owur
 
SSL_SESSION_£t_timeout
(
SSL_SESSION
 *
s
, 
t
);

1622 
__owur
 
SSL_SESSION_gë_¥Ÿocﬁ_vîsi⁄
(c⁄° 
SSL_SESSION
 *
s
);

1623 
__owur
 
SSL_SESSION_£t_¥Ÿocﬁ_vîsi⁄
(
SSL_SESSION
 *
s
, 
vîsi⁄
);

1625 
__owur
 c⁄° *
SSL_SESSION_gë0_ho°«me
(c⁄° 
SSL_SESSION
 *
s
);

1626 
__owur
 
SSL_SESSION_£t1_ho°«me
(
SSL_SESSION
 *
s
, c⁄° *
ho°«me
);

1627 
SSL_SESSION_gë0_Æ≤_£À˘ed
(c⁄° 
SSL_SESSION
 *
s
,

1628 c⁄° **
Æ≤
,

1629 
size_t
 *
Àn
);

1630 
__owur
 
SSL_SESSION_£t1_Æ≤_£À˘ed
(
SSL_SESSION
 *
s
,

1631 c⁄° *
Æ≤
,

1632 
size_t
 
Àn
);

1633 
__owur
 c⁄° 
SSL_CIPHER
 *
SSL_SESSION_gë0_cùhî
(c⁄° 
SSL_SESSION
 *
s
);

1634 
__owur
 
SSL_SESSION_£t_cùhî
(
SSL_SESSION
 *
s
, c⁄° 
SSL_CIPHER
 *
cùhî
);

1635 
__owur
 
SSL_SESSION_has_tickë
(c⁄° 
SSL_SESSION
 *
s
);

1636 
__owur
 
SSL_SESSION_gë_tickë_li„time_höt
(c⁄° 
SSL_SESSION
 *
s
);

1637 
SSL_SESSION_gë0_tickë
(c⁄° 
SSL_SESSION
 *
s
, c⁄° **
tick
,

1638 
size_t
 *
Àn
);

1639 
__owur
 
uöt32_t
 
SSL_SESSION_gë_max_óæy_d©a
(c⁄° 
SSL_SESSION
 *
s
);

1640 
__owur
 
SSL_SESSION_£t_max_óæy_d©a
(
SSL_SESSION
 *
s
,

1641 
uöt32_t
 
max_óæy_d©a
);

1642 
__owur
 
SSL_c›y_£ssi⁄_id
(
SSL
 *
to
, c⁄° SSL *
‰om
);

1643 
__owur
 
X509
 *
SSL_SESSION_gë0_≥î
(
SSL_SESSION
 *
s
);

1644 
__owur
 
SSL_SESSION_£t1_id_c⁄ãxt
(
SSL_SESSION
 *
s
,

1645 c⁄° *
sid_˘x
,

1646 
sid_˘x_Àn
);

1647 
__owur
 
SSL_SESSION_£t1_id
(
SSL_SESSION
 *
s
, c⁄° *
sid
,

1648 
sid_Àn
);

1649 
__owur
 
SSL_SESSION_is_ªsumabÀ
(c⁄° 
SSL_SESSION
 *
s
);

1651 
__owur
 
SSL_SESSION
 *
SSL_SESSION_√w
();

1652 
__owur
 
SSL_SESSION
 *
SSL_SESSION_dup
(SSL_SESSION *
§c
);

1653 c⁄° *
SSL_SESSION_gë_id
(c⁄° 
SSL_SESSION
 *
s
,

1654 *
Àn
);

1655 c⁄° *
SSL_SESSION_gë0_id_c⁄ãxt
(c⁄° 
SSL_SESSION
 *
s
,

1656 *
Àn
);

1657 
__owur
 
SSL_SESSION_gë_com¥ess_id
(c⁄° 
SSL_SESSION
 *
s
);

1658 #i‚de‡
OPENSSL_NO_STDIO


1659 
SSL_SESSION_¥öt_Â
(
FILE
 *
Â
, c⁄° 
SSL_SESSION
 *
£s
);

1661 
SSL_SESSION_¥öt
(
BIO
 *
Â
, c⁄° 
SSL_SESSION
 *
£s
);

1662 
SSL_SESSION_¥öt_keylog
(
BIO
 *
bp
, c⁄° 
SSL_SESSION
 *
x
);

1663 
SSL_SESSION_up_ªf
(
SSL_SESSION
 *
£s
);

1664 
SSL_SESSION_‰ì
(
SSL_SESSION
 *
£s
);

1665 
__owur
 
i2d_SSL_SESSION
(
SSL_SESSION
 *
ö
, **
µ
);

1666 
__owur
 
SSL_£t_£ssi⁄
(
SSL
 *
to
, 
SSL_SESSION
 *
£ssi⁄
);

1667 
SSL_CTX_add_£ssi⁄
(
SSL_CTX
 *
˘x
, 
SSL_SESSION
 *
£ssi⁄
);

1668 
SSL_CTX_ªmove_£ssi⁄
(
SSL_CTX
 *
˘x
, 
SSL_SESSION
 *
£ssi⁄
);

1669 
__owur
 
SSL_CTX_£t_gíî©e_£ssi⁄_id
(
SSL_CTX
 *
˘x
, 
GEN_SESSION_CB
 
cb
);

1670 
__owur
 
SSL_£t_gíî©e_£ssi⁄_id
(
SSL
 *
s
, 
GEN_SESSION_CB
 
cb
);

1671 
__owur
 
SSL_has_m©chög_£ssi⁄_id
(c⁄° 
SSL
 *
s
,

1672 c⁄° *
id
,

1673 
id_Àn
);

1674 
SSL_SESSION
 *
d2i_SSL_SESSION
(SSL_SESSION **
a
, c⁄° **
µ
,

1675 
Àngth
);

1677 #ifde‡
HEADER_X509_H


1678 
__owur
 
X509
 *
SSL_gë_≥î_˚πifiˇã
(c⁄° 
SSL
 *
s
);

1681 
__owur
 
STACK_OF
(
X509
Ë*
SSL_gë_≥î_˚π_chaö
(c⁄° 
SSL
 *
s
);

1683 
__owur
 
SSL_CTX_gë_vîify_mode
(c⁄° 
SSL_CTX
 *
˘x
);

1684 
__owur
 
SSL_CTX_gë_vîify_dïth
(c⁄° 
SSL_CTX
 *
˘x
);

1685 
__owur
 
SSL_vîify_cb
 
SSL_CTX_gë_vîify_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
);

1686 
SSL_CTX_£t_vîify
(
SSL_CTX
 *
˘x
, 
mode
, 
SSL_vîify_cb
 
ˇŒback
);

1687 
SSL_CTX_£t_vîify_dïth
(
SSL_CTX
 *
˘x
, 
dïth
);

1688 
SSL_CTX_£t_˚π_vîify_ˇŒback
(
SSL_CTX
 *
˘x
,

1689 (*
cb
Ë(
X509_STORE_CTX
 *, *),

1690 *
¨g
);

1691 
SSL_CTX_£t_˚π_cb
(
SSL_CTX
 *
c
, (*
cb
Ë(
SSL
 *
s¶
, *
¨g
),

1692 *
¨g
);

1693 #i‚de‡
OPENSSL_NO_RSA


1694 
__owur
 
SSL_CTX_u£_RSAPriv©eKey
(
SSL_CTX
 *
˘x
, 
RSA
 *
rß
);

1695 
__owur
 
SSL_CTX_u£_RSAPriv©eKey_ASN1
(
SSL_CTX
 *
˘x
, c⁄° *
d
,

1696 
Àn
);

1698 
__owur
 
SSL_CTX_u£_Priv©eKey
(
SSL_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
);

1699 
__owur
 
SSL_CTX_u£_Priv©eKey_ASN1
(
pk
, 
SSL_CTX
 *
˘x
,

1700 c⁄° *
d
, 
Àn
);

1701 
__owur
 
SSL_CTX_u£_˚πifiˇã
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

1702 
__owur
 
SSL_CTX_u£_˚πifiˇã_ASN1
(
SSL_CTX
 *
˘x
, 
Àn
,

1703 c⁄° *
d
);

1704 
__owur
 
SSL_CTX_u£_˚π_™d_key
(
SSL_CTX
 *
˘x
, 
X509
 *
x509
, 
EVP_PKEY
 *
¥iv©ekey
,

1705 
STACK_OF
(
X509
Ë*
chaö
, 
ovîride
);

1707 
SSL_CTX_£t_deÁu…_∑sswd_cb
(
SSL_CTX
 *
˘x
, 
≥m_∑ssw‹d_cb
 *
cb
);

1708 
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
SSL_CTX
 *
˘x
, *
u
);

1709 
≥m_∑ssw‹d_cb
 *
SSL_CTX_gë_deÁu…_∑sswd_cb
(
SSL_CTX
 *
˘x
);

1710 *
SSL_CTX_gë_deÁu…_∑sswd_cb_u£rd©a
(
SSL_CTX
 *
˘x
);

1711 
SSL_£t_deÁu…_∑sswd_cb
(
SSL
 *
s
, 
≥m_∑ssw‹d_cb
 *
cb
);

1712 
SSL_£t_deÁu…_∑sswd_cb_u£rd©a
(
SSL
 *
s
, *
u
);

1713 
≥m_∑ssw‹d_cb
 *
SSL_gë_deÁu…_∑sswd_cb
(
SSL
 *
s
);

1714 *
SSL_gë_deÁu…_∑sswd_cb_u£rd©a
(
SSL
 *
s
);

1716 
__owur
 
SSL_CTX_check_¥iv©e_key
(c⁄° 
SSL_CTX
 *
˘x
);

1717 
__owur
 
SSL_check_¥iv©e_key
(c⁄° 
SSL
 *
˘x
);

1719 
__owur
 
SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
SSL_CTX
 *
˘x
,

1720 c⁄° *
sid_˘x
,

1721 
sid_˘x_Àn
);

1723 
SSL
 *
SSL_√w
(
SSL_CTX
 *
˘x
);

1724 
SSL_up_ªf
(
SSL
 *
s
);

1725 
SSL_is_dés
(c⁄° 
SSL
 *
s
);

1726 
__owur
 
SSL_£t_£ssi⁄_id_c⁄ãxt
(
SSL
 *
s¶
, c⁄° *
sid_˘x
,

1727 
sid_˘x_Àn
);

1729 
__owur
 
SSL_CTX_£t_puΩo£
(
SSL_CTX
 *
˘x
, 
puΩo£
);

1730 
__owur
 
SSL_£t_puΩo£
(
SSL
 *
s¶
, 
puΩo£
);

1731 
__owur
 
SSL_CTX_£t_åu°
(
SSL_CTX
 *
˘x
, 
åu°
);

1732 
__owur
 
SSL_£t_åu°
(
SSL
 *
s¶
, 
åu°
);

1734 
__owur
 
SSL_£t1_ho°
(
SSL
 *
s
, c⁄° *
ho°«me
);

1735 
__owur
 
SSL_add1_ho°
(
SSL
 *
s
, c⁄° *
ho°«me
);

1736 
__owur
 c⁄° *
SSL_gë0_≥î«me
(
SSL
 *
s
);

1737 
SSL_£t_ho°Êags
(
SSL
 *
s
, 
Êags
);

1739 
__owur
 
SSL_CTX_d™e_íabÀ
(
SSL_CTX
 *
˘x
);

1740 
__owur
 
SSL_CTX_d™e_mty≥_£t
(
SSL_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
md
,

1741 
uöt8_t
 
mty≥
, uöt8_à
‹d
);

1742 
__owur
 
SSL_d™e_íabÀ
(
SSL
 *
s
, c⁄° *
ba£domaö
);

1743 
__owur
 
SSL_d™e_éß_add
(
SSL
 *
s
, 
uöt8_t
 
ußge
, uöt8_à
£À˘‹
,

1744 
uöt8_t
 
mty≥
, c⁄° *
d©a
, 
size_t
 
dÀn
);

1745 
__owur
 
SSL_gë0_d™e_auth‹ôy
(
SSL
 *
s
, 
X509
 **
m˚π
, 
EVP_PKEY
 **
m•ki
);

1746 
__owur
 
SSL_gë0_d™e_éß
(
SSL
 *
s
, 
uöt8_t
 *
ußge
, uöt8_à*
£À˘‹
,

1747 
uöt8_t
 *
mty≥
, c⁄° **
d©a
,

1748 
size_t
 *
dÀn
);

1753 
SSL_DANE
 *
SSL_gë0_d™e
(
SSL
 *
s¶
);

1757 
SSL_CTX_d™e_£t_Êags
(
SSL_CTX
 *
˘x
, 
Êags
);

1758 
SSL_CTX_d™e_˛ór_Êags
(
SSL_CTX
 *
˘x
, 
Êags
);

1759 
SSL_d™e_£t_Êags
(
SSL
 *
s¶
, 
Êags
);

1760 
SSL_d™e_˛ór_Êags
(
SSL
 *
s¶
, 
Êags
);

1762 
__owur
 
SSL_CTX_£t1_∑øm
(
SSL_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
vpm
);

1763 
__owur
 
SSL_£t1_∑øm
(
SSL
 *
s¶
, 
X509_VERIFY_PARAM
 *
vpm
);

1765 
__owur
 
X509_VERIFY_PARAM
 *
SSL_CTX_gë0_∑øm
(
SSL_CTX
 *
˘x
);

1766 
__owur
 
X509_VERIFY_PARAM
 *
SSL_gë0_∑øm
(
SSL
 *
s¶
);

1768 #i‚de‡
OPENSSL_NO_SRP


1769 
SSL_CTX_£t_§p_u£∫ame
(
SSL_CTX
 *
˘x
, *
«me
);

1770 
SSL_CTX_£t_§p_∑ssw‹d
(
SSL_CTX
 *
˘x
, *
∑ssw‹d
);

1771 
SSL_CTX_£t_§p_°ªngth
(
SSL_CTX
 *
˘x
, 
°ªngth
);

1772 
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
(
SSL_CTX
 *
˘x
,

1773 *(*
cb
Ë(
SSL
 *, *));

1774 
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
(
SSL_CTX
 *
˘x
,

1775 (*
cb
Ë(
SSL
 *, *));

1776 
SSL_CTX_£t_§p_u£∫ame_ˇŒback
(
SSL_CTX
 *
˘x
,

1777 (*
cb
Ë(
SSL
 *, *, *));

1778 
SSL_CTX_£t_§p_cb_¨g
(
SSL_CTX
 *
˘x
, *
¨g
);

1780 
SSL_£t_§p_£rvî_∑øm
(
SSL
 *
s
, c⁄° 
BIGNUM
 *
N
, c⁄° BIGNUM *
g
,

1781 
BIGNUM
 *
ß
, BIGNUM *
v
, *
öfo
);

1782 
SSL_£t_§p_£rvî_∑øm_pw
(
SSL
 *
s
, c⁄° *
u£r
, c⁄° *
∑ss
,

1783 c⁄° *
gΩ
);

1785 
__owur
 
BIGNUM
 *
SSL_gë_§p_g
(
SSL
 *
s
);

1786 
__owur
 
BIGNUM
 *
SSL_gë_§p_N
(
SSL
 *
s
);

1788 
__owur
 *
SSL_gë_§p_u£∫ame
(
SSL
 *
s
);

1789 
__owur
 *
SSL_gë_§p_u£röfo
(
SSL
 *
s
);

1796 
	#SSL_CLIENT_HELLO_SUCCESS
 1

	)

1797 
	#SSL_CLIENT_HELLO_ERROR
 0

	)

1798 
	#SSL_CLIENT_HELLO_RETRY
 (-1)

	)

1800 (*
SSL_˛õ¡_hñlo_cb_‚
Ë(
	tSSL
 *
	ts
, *
	tÆ
, *
	t¨g
);

1801 
SSL_CTX_£t_˛õ¡_hñlo_cb
(
SSL_CTX
 *
c
, 
SSL_˛õ¡_hñlo_cb_‚
 
cb
,

1802 *
¨g
);

1803 
SSL_˛õ¡_hñlo_isv2
(
SSL
 *
s
);

1804 
SSL_˛õ¡_hñlo_gë0_Àgacy_vîsi⁄
(
SSL
 *
s
);

1805 
size_t
 
SSL_˛õ¡_hñlo_gë0_øndom
(
SSL
 *
s
, c⁄° **
out
);

1806 
size_t
 
SSL_˛õ¡_hñlo_gë0_£ssi⁄_id
(
SSL
 *
s
, c⁄° **
out
);

1807 
size_t
 
SSL_˛õ¡_hñlo_gë0_cùhîs
(
SSL
 *
s
, c⁄° **
out
);

1808 
size_t
 
SSL_˛õ¡_hñlo_gë0_com¥essi⁄_mëhods
(
SSL
 *
s
,

1809 c⁄° **
out
);

1810 
SSL_˛õ¡_hñlo_gë1_exãnsi⁄s_¥e£¡
(
SSL
 *
s
, **
out
, 
size_t
 *
ouéí
);

1811 
SSL_˛õ¡_hñlo_gë0_ext
(
SSL
 *
s
, 
ty≥
,

1812 c⁄° **
out
, 
size_t
 *
ouéí
);

1814 
SSL_˚πs_˛ór
(
SSL
 *
s
);

1815 
SSL_‰ì
(
SSL
 *
s¶
);

1816 #ifde‡
OSSL_ASYNC_FD


1820 
__owur
 
SSL_waôög_f‹_async
(
SSL
 *
s
);

1821 
__owur
 
SSL_gë_Æl_async_fds
(
SSL
 *
s
, 
OSSL_ASYNC_FD
 *
fds
, 
size_t
 *
numfds
);

1822 
__owur
 
SSL_gë_ch™ged_async_fds
(
SSL
 *
s
, 
OSSL_ASYNC_FD
 *
addfd
,

1823 
size_t
 *
numaddfds
, 
OSSL_ASYNC_FD
 *
dñfd
,

1824 
size_t
 *
numdñfds
);

1826 
__owur
 
SSL_ac˚±
(
SSL
 *
s¶
);

1827 
__owur
 
SSL_°©ñess
(
SSL
 *
s
);

1828 
__owur
 
SSL_c⁄√˘
(
SSL
 *
s¶
);

1829 
__owur
 
SSL_ªad
(
SSL
 *
s¶
, *
buf
, 
num
);

1830 
__owur
 
SSL_ªad_ex
(
SSL
 *
s¶
, *
buf
, 
size_t
 
num
, size_à*
ªadbyãs
);

1832 
	#SSL_READ_EARLY_DATA_ERROR
 0

	)

1833 
	#SSL_READ_EARLY_DATA_SUCCESS
 1

	)

1834 
	#SSL_READ_EARLY_DATA_FINISH
 2

	)

1836 
__owur
 
SSL_ªad_óæy_d©a
(
SSL
 *
s
, *
buf
, 
size_t
 
num
,

1837 
size_t
 *
ªadbyãs
);

1838 
__owur
 
SSL_≥ek
(
SSL
 *
s¶
, *
buf
, 
num
);

1839 
__owur
 
SSL_≥ek_ex
(
SSL
 *
s¶
, *
buf
, 
size_t
 
num
, size_à*
ªadbyãs
);

1840 
__owur
 
SSL_wrôe
(
SSL
 *
s¶
, c⁄° *
buf
, 
num
);

1841 
__owur
 
SSL_wrôe_ex
(
SSL
 *
s
, c⁄° *
buf
, 
size_t
 
num
, size_à*
wrôãn
);

1842 
__owur
 
SSL_wrôe_óæy_d©a
(
SSL
 *
s
, c⁄° *
buf
, 
size_t
 
num
,

1843 
size_t
 *
wrôãn
);

1844 
SSL_˘æ
(
SSL
 *
s¶
, 
cmd
, 
œrg
, *
∑rg
);

1845 
SSL_ˇŒback_˘æ
(
SSL
 *, , (*)());

1846 
SSL_CTX_˘æ
(
SSL_CTX
 *
˘x
, 
cmd
, 
œrg
, *
∑rg
);

1847 
SSL_CTX_ˇŒback_˘æ
(
SSL_CTX
 *, , (*)());

1849 
	#SSL_EARLY_DATA_NOT_SENT
 0

	)

1850 
	#SSL_EARLY_DATA_REJECTED
 1

	)

1851 
	#SSL_EARLY_DATA_ACCEPTED
 2

	)

1853 
__owur
 
SSL_gë_óæy_d©a_°©us
(c⁄° 
SSL
 *
s
);

1855 
__owur
 
SSL_gë_îr‹
(c⁄° 
SSL
 *
s
, 
ªt_code
);

1856 
__owur
 c⁄° *
SSL_gë_vîsi⁄
(c⁄° 
SSL
 *
s
);

1859 
__owur
 
SSL_CTX_£t_s¶_vîsi⁄
(
SSL_CTX
 *
˘x
, c⁄° 
SSL_METHOD
 *
mëh
);

1861 #i‚de‡
OPENSSL_NO_SSL3_METHOD


1862 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
SSLv3_mëhod
())

1863 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
SSLv3_£rvî_mëhod
())

1864 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
SSLv3_˛õ¡_mëhod
())

1867 
	#SSLv23_mëhod
 
TLS_mëhod


	)

1868 
	#SSLv23_£rvî_mëhod
 
TLS_£rvî_mëhod


	)

1869 
	#SSLv23_˛õ¡_mëhod
 
TLS_˛õ¡_mëhod


	)

1872 
__owur
 c⁄° 
SSL_METHOD
 *
TLS_mëhod
();

1873 
__owur
 c⁄° 
SSL_METHOD
 *
TLS_£rvî_mëhod
();

1874 
__owur
 c⁄° 
SSL_METHOD
 *
TLS_˛õ¡_mëhod
();

1876 #i‚de‡
OPENSSL_NO_TLS1_METHOD


1877 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_mëhod
())

1878 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_£rvî_mëhod
())

1879 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_˛õ¡_mëhod
())

1882 #i‚de‡
OPENSSL_NO_TLS1_1_METHOD


1883 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_1_mëhod
())

1884 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_1_£rvî_mëhod
())

1885 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_1_˛õ¡_mëhod
())

1888 #i‚de‡
OPENSSL_NO_TLS1_2_METHOD


1889 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_2_mëhod
())

1890 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_2_£rvî_mëhod
())

1891 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_2_˛õ¡_mëhod
())

1894 #i‚de‡
OPENSSL_NO_DTLS1_METHOD


1895 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_mëhod
())

1896 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_£rvî_mëhod
())

1897 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_˛õ¡_mëhod
())

1900 #i‚de‡
OPENSSL_NO_DTLS1_2_METHOD


1902 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_2_mëhod
())

1903 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_2_£rvî_mëhod
())

1904 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_2_˛õ¡_mëhod
())

1907 
__owur
 c⁄° 
SSL_METHOD
 *
DTLS_mëhod
();

1908 
__owur
 c⁄° 
SSL_METHOD
 *
DTLS_£rvî_mëhod
();

1909 
__owur
 c⁄° 
SSL_METHOD
 *
DTLS_˛õ¡_mëhod
();

1911 
__owur
 
size_t
 
DTLS_gë_d©a_mtu
(c⁄° 
SSL
 *
s
);

1913 
__owur
 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë_cùhîs
(c⁄° 
SSL
 *
s
);

1914 
__owur
 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_CTX_gë_cùhîs
(c⁄° 
SSL_CTX
 *
˘x
);

1915 
__owur
 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë_˛õ¡_cùhîs
(c⁄° 
SSL
 *
s
);

1916 
__owur
 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë1_suµ‹ãd_cùhîs
(
SSL
 *
s
);

1918 
__owur
 
SSL_do_h™dshake
(
SSL
 *
s
);

1919 
SSL_key_upd©e
(
SSL
 *
s
, 
upd©ëy≥
);

1920 
SSL_gë_key_upd©e_ty≥
(c⁄° 
SSL
 *
s
);

1921 
SSL_ª√gŸüã
(
SSL
 *
s
);

1922 
SSL_ª√gŸüã_abbªvüãd
(
SSL
 *
s
);

1923 
__owur
 
SSL_ª√gŸüã_≥ndög
(c⁄° 
SSL
 *
s
);

1924 
SSL_shutdown
(
SSL
 *
s
);

1925 
__owur
 
SSL_vîify_˛õ¡_po°_h™dshake
(
SSL
 *
s
);

1926 
SSL_CTX_£t_po°_h™dshake_auth
(
SSL_CTX
 *
˘x
, 
vÆ
);

1927 
SSL_£t_po°_h™dshake_auth
(
SSL
 *
s
, 
vÆ
);

1929 
__owur
 c⁄° 
SSL_METHOD
 *
SSL_CTX_gë_s¶_mëhod
(c⁄° 
SSL_CTX
 *
˘x
);

1930 
__owur
 c⁄° 
SSL_METHOD
 *
SSL_gë_s¶_mëhod
(c⁄° 
SSL
 *
s
);

1931 
__owur
 
SSL_£t_s¶_mëhod
(
SSL
 *
s
, c⁄° 
SSL_METHOD
 *
mëhod
);

1932 
__owur
 c⁄° *
SSL_Æît_ty≥_°rög_l⁄g
(
vÆue
);

1933 
__owur
 c⁄° *
SSL_Æît_ty≥_°rög
(
vÆue
);

1934 
__owur
 c⁄° *
SSL_Æît_desc_°rög_l⁄g
(
vÆue
);

1935 
__owur
 c⁄° *
SSL_Æît_desc_°rög
(
vÆue
);

1937 
SSL_£t0_CA_li°
(
SSL
 *
s
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1938 
SSL_CTX_£t0_CA_li°
(
SSL_CTX
 *
˘x
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1939 
__owur
 c⁄° 
STACK_OF
(
X509_NAME
Ë*
SSL_gë0_CA_li°
(c⁄° 
SSL
 *
s
);

1940 
__owur
 c⁄° 
STACK_OF
(
X509_NAME
Ë*
SSL_CTX_gë0_CA_li°
(c⁄° 
SSL_CTX
 *
˘x
);

1941 
__owur
 
SSL_add1_to_CA_li°
(
SSL
 *
s¶
, c⁄° 
X509
 *
x
);

1942 
__owur
 
SSL_CTX_add1_to_CA_li°
(
SSL_CTX
 *
˘x
, c⁄° 
X509
 *
x
);

1943 
__owur
 c⁄° 
STACK_OF
(
X509_NAME
Ë*
SSL_gë0_≥î_CA_li°
(c⁄° 
SSL
 *
s
);

1945 
SSL_£t_˛õ¡_CA_li°
(
SSL
 *
s
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1946 
SSL_CTX_£t_˛õ¡_CA_li°
(
SSL_CTX
 *
˘x
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1947 
__owur
 
STACK_OF
(
X509_NAME
Ë*
SSL_gë_˛õ¡_CA_li°
(c⁄° 
SSL
 *
s
);

1948 
__owur
 
STACK_OF
(
X509_NAME
Ë*
SSL_CTX_gë_˛õ¡_CA_li°
(c⁄° 
SSL_CTX
 *
s
);

1949 
__owur
 
SSL_add_˛õ¡_CA
(
SSL
 *
s¶
, 
X509
 *
x
);

1950 
__owur
 
SSL_CTX_add_˛õ¡_CA
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

1952 
SSL_£t_c⁄√˘_°©e
(
SSL
 *
s
);

1953 
SSL_£t_ac˚±_°©e
(
SSL
 *
s
);

1955 
__owur
 
SSL_gë_deÁu…_timeout
(c⁄° 
SSL
 *
s
);

1957 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

1958 
	#SSL_libøry_öô
(Ë
	`OPENSSL_öô_s¶
(0, 
NULL
)

	)

1961 
__owur
 *
SSL_CIPHER_des¸ùti⁄
(c⁄° 
SSL_CIPHER
 *, *
buf
, 
size
);

1962 
__owur
 
STACK_OF
(
X509_NAME
Ë*
SSL_dup_CA_li°
(c⁄° STACK_OF(X509_NAMEË*
sk
);

1964 
__owur
 
SSL
 *
SSL_dup
(SSL *
s¶
);

1966 
__owur
 
X509
 *
SSL_gë_˚πifiˇã
(c⁄° 
SSL
 *
s¶
);

1970 
evp_pkey_°
 *
SSL_gë_¥iv©ekey
(c⁄° 
SSL
 *
s¶
);

1972 
__owur
 
X509
 *
SSL_CTX_gë0_˚πifiˇã
(c⁄° 
SSL_CTX
 *
˘x
);

1973 
__owur
 
EVP_PKEY
 *
SSL_CTX_gë0_¥iv©ekey
(c⁄° 
SSL_CTX
 *
˘x
);

1975 
SSL_CTX_£t_quõt_shutdown
(
SSL_CTX
 *
˘x
, 
mode
);

1976 
__owur
 
SSL_CTX_gë_quõt_shutdown
(c⁄° 
SSL_CTX
 *
˘x
);

1977 
SSL_£t_quõt_shutdown
(
SSL
 *
s¶
, 
mode
);

1978 
__owur
 
SSL_gë_quõt_shutdown
(c⁄° 
SSL
 *
s¶
);

1979 
SSL_£t_shutdown
(
SSL
 *
s¶
, 
mode
);

1980 
__owur
 
SSL_gë_shutdown
(c⁄° 
SSL
 *
s¶
);

1981 
__owur
 
SSL_vîsi⁄
(c⁄° 
SSL
 *
s¶
);

1982 
__owur
 
SSL_˛õ¡_vîsi⁄
(c⁄° 
SSL
 *
s
);

1983 
__owur
 
SSL_CTX_£t_deÁu…_vîify_∑ths
(
SSL_CTX
 *
˘x
);

1984 
__owur
 
SSL_CTX_£t_deÁu…_vîify_dú
(
SSL_CTX
 *
˘x
);

1985 
__owur
 
SSL_CTX_£t_deÁu…_vîify_fûe
(
SSL_CTX
 *
˘x
);

1986 
__owur
 
SSL_CTX_lﬂd_vîify_loˇti⁄s
(
SSL_CTX
 *
˘x
, c⁄° *
CAfûe
,

1987 c⁄° *
CA∑th
);

1988 
	#SSL_gë0_£ssi⁄
 
SSL_gë_£ssi⁄


	)

1989 
__owur
 
SSL_SESSION
 *
SSL_gë_£ssi⁄
(c⁄° 
SSL
 *
s¶
);

1990 
__owur
 
SSL_SESSION
 *
SSL_gë1_£ssi⁄
(
SSL
 *
s¶
);

1991 
__owur
 
SSL_CTX
 *
SSL_gë_SSL_CTX
(c⁄° 
SSL
 *
s¶
);

1992 
SSL_CTX
 *
SSL_£t_SSL_CTX
(
SSL
 *
s¶
, SSL_CTX *
˘x
);

1993 
SSL_£t_öfo_ˇŒback
(
SSL
 *
s¶
,

1994 (*
cb
Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
, 
vÆ
));

1995 (*
SSL_gë_öfo_ˇŒback
(c⁄° 
SSL
 *
s¶
)Ë(c⁄° SSL *s¶, 
ty≥
,

1996 
vÆ
);

1997 
__owur
 
OSSL_HANDSHAKE_STATE
 
SSL_gë_°©e
(c⁄° 
SSL
 *
s¶
);

1999 
SSL_£t_vîify_ªsu…
(
SSL
 *
s¶
, 
v
);

2000 
__owur
 
SSL_gë_vîify_ªsu…
(c⁄° 
SSL
 *
s¶
);

2001 
__owur
 
STACK_OF
(
X509
Ë*
SSL_gë0_vîifõd_chaö
(c⁄° 
SSL
 *
s
);

2003 
__owur
 
size_t
 
SSL_gë_˛õ¡_øndom
(c⁄° 
SSL
 *
s¶
, *
out
,

2004 
size_t
 
ouéí
);

2005 
__owur
 
size_t
 
SSL_gë_£rvî_øndom
(c⁄° 
SSL
 *
s¶
, *
out
,

2006 
size_t
 
ouéí
);

2007 
__owur
 
size_t
 
SSL_SESSION_gë_ma°î_key
(c⁄° 
SSL_SESSION
 *
£ss
,

2008 *
out
, 
size_t
 
ouéí
);

2009 
__owur
 
SSL_SESSION_£t1_ma°î_key
(
SSL_SESSION
 *
£ss
,

2010 c⁄° *
ö
, 
size_t
 
Àn
);

2011 
uöt8_t
 
SSL_SESSION_gë_max_‰agmít_Àngth
(c⁄° 
SSL_SESSION
 *
£ss
);

2013 
	#SSL_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

2014 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_SSL
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

2015 
__owur
 
SSL_£t_ex_d©a
(
SSL
 *
s¶
, 
idx
, *
d©a
);

2016 *
SSL_gë_ex_d©a
(c⁄° 
SSL
 *
s¶
, 
idx
);

2017 
	#SSL_SESSION_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

2018 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_SSL_SESSION
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

2019 
__owur
 
SSL_SESSION_£t_ex_d©a
(
SSL_SESSION
 *
ss
, 
idx
, *
d©a
);

2020 *
SSL_SESSION_gë_ex_d©a
(c⁄° 
SSL_SESSION
 *
ss
, 
idx
);

2021 
	#SSL_CTX_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

2022 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_SSL_CTX
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

2023 
__owur
 
SSL_CTX_£t_ex_d©a
(
SSL_CTX
 *
s¶
, 
idx
, *
d©a
);

2024 *
SSL_CTX_gë_ex_d©a
(c⁄° 
SSL_CTX
 *
s¶
, 
idx
);

2026 
__owur
 
SSL_gë_ex_d©a_X509_STORE_CTX_idx
();

2028 
	#SSL_CTX_£ss_£t_ˇche_size
(
˘x
,
t
) \

2029 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_SIZE
,
t
,
NULL
)

	)

2030 
	#SSL_CTX_£ss_gë_ˇche_size
(
˘x
) \

2031 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_SIZE
,0,
NULL
)

	)

2032 
	#SSL_CTX_£t_£ssi⁄_ˇche_mode
(
˘x
,
m
) \

2033 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_MODE
,
m
,
NULL
)

	)

2034 
	#SSL_CTX_gë_£ssi⁄_ˇche_mode
(
˘x
) \

2035 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_MODE
,0,
NULL
)

	)

2037 
	#SSL_CTX_gë_deÁu…_ªad_ahód
(
˘x
Ë
	`SSL_CTX_gë_ªad_ahód
(˘x)

	)

2038 
	#SSL_CTX_£t_deÁu…_ªad_ahód
(
˘x
,
m
Ë
	`SSL_CTX_£t_ªad_ahód
(˘x,m)

	)

2039 
	#SSL_CTX_gë_ªad_ahód
(
˘x
) \

2040 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_READ_AHEAD
,0,
NULL
)

	)

2041 
	#SSL_CTX_£t_ªad_ahód
(
˘x
,
m
) \

2042 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_READ_AHEAD
,
m
,
NULL
)

	)

2043 
	#SSL_CTX_gë_max_˚π_li°
(
˘x
) \

2044 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

2045 
	#SSL_CTX_£t_max_˚π_li°
(
˘x
,
m
) \

2046 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

2047 
	#SSL_gë_max_˚π_li°
(
s¶
) \

2048 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

2049 
	#SSL_£t_max_˚π_li°
(
s¶
,
m
) \

2050 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

2052 
	#SSL_CTX_£t_max_£nd_‰agmít
(
˘x
,
m
) \

2053 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

2054 
	#SSL_£t_max_£nd_‰agmít
(
s¶
,
m
) \

2055 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

2056 
	#SSL_CTX_£t_•lô_£nd_‰agmít
(
˘x
,
m
) \

2057 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SPLIT_SEND_FRAGMENT
,
m
,
NULL
)

	)

2058 
	#SSL_£t_•lô_£nd_‰agmít
(
s¶
,
m
) \

2059 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_SPLIT_SEND_FRAGMENT
,
m
,
NULL
)

	)

2060 
	#SSL_CTX_£t_max_pùñöes
(
˘x
,
m
) \

2061 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_PIPELINES
,
m
,
NULL
)

	)

2062 
	#SSL_£t_max_pùñöes
(
s¶
,
m
) \

2063 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_PIPELINES
,
m
,
NULL
)

	)

2065 
SSL_CTX_£t_deÁu…_ªad_buf„r_Àn
(
SSL_CTX
 *
˘x
, 
size_t
 
Àn
);

2066 
SSL_£t_deÁu…_ªad_buf„r_Àn
(
SSL
 *
s
, 
size_t
 
Àn
);

2068 #i‚de‡
OPENSSL_NO_DH


2070 
SSL_CTX_£t_tmp_dh_ˇŒback
(
SSL_CTX
 *
˘x
,

2071 
DH
 *(*
dh
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

2072 
keyÀngth
));

2073 
SSL_£t_tmp_dh_ˇŒback
(
SSL
 *
s¶
,

2074 
DH
 *(*
dh
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

2075 
keyÀngth
));

2078 
__owur
 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_com¥essi⁄
(c⁄° 
SSL
 *
s
);

2079 
__owur
 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_ex∑nsi⁄
(c⁄° 
SSL
 *
s
);

2080 
__owur
 c⁄° *
SSL_COMP_gë_«me
(c⁄° 
COMP_METHOD
 *
comp
);

2081 
__owur
 c⁄° *
SSL_COMP_gë0_«me
(c⁄° 
SSL_COMP
 *
comp
);

2082 
__owur
 
SSL_COMP_gë_id
(c⁄° 
SSL_COMP
 *
comp
);

2083 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_gë_com¥essi⁄_mëhods
();

2084 
__owur
 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_£t0_com¥essi⁄_mëhods
(STACK_OF(SSL_COMP)

2085 *
mëhs
);

2086 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

2087 
	#SSL_COMP_‰ì_com¥essi⁄_mëhods
(Ë0Ë

	)

2089 
__owur
 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
, 
COMP_METHOD
 *
cm
);

2091 c⁄° 
SSL_CIPHER
 *
SSL_CIPHER_föd
(
SSL
 *
s¶
, c⁄° *
±r
);

2092 
SSL_CIPHER_gë_cùhî_nid
(c⁄° 
SSL_CIPHER
 *
c
);

2093 
SSL_CIPHER_gë_dige°_nid
(c⁄° 
SSL_CIPHER
 *
c
);

2094 
SSL_byãs_to_cùhî_li°
(
SSL
 *
s
, c⁄° *
byãs
, 
size_t
 
Àn
,

2095 
isv2f‹m©
, 
STACK_OF
(
SSL_CIPHER
Ë**
sk
,

2096 
STACK_OF
(
SSL_CIPHER
Ë**
scsvs
);

2099 
__owur
 
SSL_£t_£ssi⁄_tickë_ext
(
SSL
 *
s
, *
ext_d©a
, 
ext_Àn
);

2101 
__owur
 
SSL_£t_£ssi⁄_tickë_ext_cb
(
SSL
 *
s
,

2102 
és_£ssi⁄_tickë_ext_cb_‚
 
cb
,

2103 *
¨g
);

2106 
__owur
 
SSL_£t_£ssi⁄_£¸ë_cb
(
SSL
 *
s
,

2107 
és_£ssi⁄_£¸ë_cb_‚
 
£ssi⁄_£¸ë_cb
,

2108 *
¨g
);

2110 
SSL_CTX_£t_nŸ_ªsumabÀ_£ssi⁄_ˇŒback
(
SSL_CTX
 *
˘x
,

2111 (*
cb
Ë(
SSL
 *
s¶
,

2113 
is_f‹w¨d_£cuª
));

2115 
SSL_£t_nŸ_ªsumabÀ_£ssi⁄_ˇŒback
(
SSL
 *
s¶
,

2116 (*
cb
Ë(
SSL
 *
s¶
,

2117 
is_f‹w¨d_£cuª
));

2119 
SSL_CTX_£t_ªc‹d_∑ddög_ˇŒback
(
SSL_CTX
 *
˘x
,

2120 
size_t
 (*
cb
Ë(
SSL
 *
s¶
, 
ty≥
,

2121 
size_t
 
Àn
, *
¨g
));

2122 
SSL_CTX_£t_ªc‹d_∑ddög_ˇŒback_¨g
(
SSL_CTX
 *
˘x
, *
¨g
);

2123 *
SSL_CTX_gë_ªc‹d_∑ddög_ˇŒback_¨g
(c⁄° 
SSL_CTX
 *
˘x
);

2124 
SSL_CTX_£t_block_∑ddög
(
SSL_CTX
 *
˘x
, 
size_t
 
block_size
);

2126 
SSL_£t_ªc‹d_∑ddög_ˇŒback
(
SSL
 *
s¶
,

2127 
size_t
 (*
cb
Ë(
SSL
 *
s¶
, 
ty≥
,

2128 
size_t
 
Àn
, *
¨g
));

2129 
SSL_£t_ªc‹d_∑ddög_ˇŒback_¨g
(
SSL
 *
s¶
, *
¨g
);

2130 *
SSL_gë_ªc‹d_∑ddög_ˇŒback_¨g
(c⁄° 
SSL
 *
s¶
);

2131 
SSL_£t_block_∑ddög
(
SSL
 *
s¶
, 
size_t
 
block_size
);

2133 
SSL_£t_num_tickës
(
SSL
 *
s
, 
size_t
 
num_tickës
);

2134 
size_t
 
SSL_gë_num_tickës
(c⁄° 
SSL
 *
s
);

2135 
SSL_CTX_£t_num_tickës
(
SSL_CTX
 *
˘x
, 
size_t
 
num_tickës
);

2136 
size_t
 
SSL_CTX_gë_num_tickës
(c⁄° 
SSL_CTX
 *
˘x
);

2138 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

2139 
	#SSL_ˇche_hô
(
s
Ë
	`SSL_£ssi⁄_ªu£d
(s)

	)

2142 
__owur
 
SSL_£ssi⁄_ªu£d
(c⁄° 
SSL
 *
s
);

2143 
__owur
 
SSL_is_£rvî
(c⁄° 
SSL
 *
s
);

2145 
__owur
 __owu∏
SSL_CONF_CTX
 *
SSL_CONF_CTX_√w
();

2146 
SSL_CONF_CTX_föish
(
SSL_CONF_CTX
 *
c˘x
);

2147 
SSL_CONF_CTX_‰ì
(
SSL_CONF_CTX
 *
c˘x
);

2148 
SSL_CONF_CTX_£t_Êags
(
SSL_CONF_CTX
 *
c˘x
, 
Êags
);

2149 
__owur
 
SSL_CONF_CTX_˛ór_Êags
(
SSL_CONF_CTX
 *
c˘x
,

2150 
Êags
);

2151 
__owur
 
SSL_CONF_CTX_£t1_¥efix
(
SSL_CONF_CTX
 *
c˘x
, c⁄° *
¥e
);

2153 
SSL_CONF_CTX_£t_s¶
(
SSL_CONF_CTX
 *
c˘x
, 
SSL
 *
s¶
);

2154 
SSL_CONF_CTX_£t_s¶_˘x
(
SSL_CONF_CTX
 *
c˘x
, 
SSL_CTX
 *
˘x
);

2156 
__owur
 
SSL_CONF_cmd
(
SSL_CONF_CTX
 *
c˘x
, c⁄° *
cmd
, c⁄° *
vÆue
);

2157 
__owur
 
SSL_CONF_cmd_¨gv
(
SSL_CONF_CTX
 *
c˘x
, *
∑rgc
, ***
∑rgv
);

2158 
__owur
 
SSL_CONF_cmd_vÆue_ty≥
(
SSL_CONF_CTX
 *
c˘x
, c⁄° *
cmd
);

2160 
SSL_add_s¶_moduÀ
();

2161 
SSL_c⁄fig
(
SSL
 *
s
, c⁄° *
«me
);

2162 
SSL_CTX_c⁄fig
(
SSL_CTX
 *
˘x
, c⁄° *
«me
);

2164 #i‚de‡
OPENSSL_NO_SSL_TRACE


2165 
SSL_åa˚
(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
,

2166 c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

2169 #i‚de‡
OPENSSL_NO_SOCK


2170 
DTLSv1_li°í
(
SSL
 *
s
, 
BIO_ADDR
 *
˛õ¡
);

2173 #i‚de‡
OPENSSL_NO_CT


2181 (*
s¶_˘_vÆid©i⁄_cb
)(c⁄° 
	tCT_POLICY_EVAL_CTX
 *
	t˘x
,

2182 c⁄° 
	tSTACK_OF
(
	tSCT
Ë*
	ts˘s
, *
	t¨g
);

2196 
SSL_£t_˘_vÆid©i⁄_ˇŒback
(
SSL
 *
s
, 
s¶_˘_vÆid©i⁄_cb
 
ˇŒback
,

2197 *
¨g
);

2198 
SSL_CTX_£t_˘_vÆid©i⁄_ˇŒback
(
SSL_CTX
 *
˘x
,

2199 
s¶_˘_vÆid©i⁄_cb
 
ˇŒback
,

2200 *
¨g
);

2201 
	#SSL_dißbÀ_˘
(
s
) \

2202 ((Ë
	`SSL_£t_vÆid©i⁄_ˇŒback
((
s
), 
NULL
, NULL))

	)

2203 
	#SSL_CTX_dißbÀ_˘
(
˘x
) \

2204 ((Ë
	`SSL_CTX_£t_vÆid©i⁄_ˇŒback
((
˘x
), 
NULL
, NULL))

	)

2212 
SSL_CT_VALIDATION_PERMISSIVE
 = 0,

2213 
SSL_CT_VALIDATION_STRICT


2224 
SSL_íabÀ_˘
(
SSL
 *
s
, 
vÆid©i⁄_mode
);

2225 
SSL_CTX_íabÀ_˘
(
SSL_CTX
 *
˘x
, 
vÆid©i⁄_mode
);

2230 
SSL_˘_is_íabÀd
(c⁄° 
SSL
 *
s
);

2231 
SSL_CTX_˘_is_íabÀd
(c⁄° 
SSL_CTX
 *
˘x
);

2234 c⁄° 
STACK_OF
(
SCT
Ë*
SSL_gë0_≥î_s˘s
(
SSL
 *
s
);

2243 
SSL_CTX_£t_deÁu…_˘log_li°_fûe
(
SSL_CTX
 *
˘x
);

2252 
SSL_CTX_£t_˘log_li°_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
∑th
);

2258 
SSL_CTX_£t0_˘log_°‹e
(
SSL_CTX
 *
˘x
, 
CTLOG_STORE
 *
logs
);

2267 c⁄° 
CTLOG_STORE
 *
SSL_CTX_gë0_˘log_°‹e
(c⁄° 
SSL_CTX
 *
˘x
);

2273 
	#SSL_SECOP_OTHER_TYPE
 0xffff0000

	)

2274 
	#SSL_SECOP_OTHER_NONE
 0

	)

2275 
	#SSL_SECOP_OTHER_CIPHER
 (1 << 16)

	)

2276 
	#SSL_SECOP_OTHER_CURVE
 (2 << 16)

	)

2277 
	#SSL_SECOP_OTHER_DH
 (3 << 16)

	)

2278 
	#SSL_SECOP_OTHER_PKEY
 (4 << 16)

	)

2279 
	#SSL_SECOP_OTHER_SIGALG
 (5 << 16)

	)

2280 
	#SSL_SECOP_OTHER_CERT
 (6 << 16)

	)

2283 
	#SSL_SECOP_PEER
 0x1000

	)

2289 
	#SSL_SECOP_CIPHER_SUPPORTED
 (1 | 
SSL_SECOP_OTHER_CIPHER
)

	)

2291 
	#SSL_SECOP_CIPHER_SHARED
 (2 | 
SSL_SECOP_OTHER_CIPHER
)

	)

2293 
	#SSL_SECOP_CIPHER_CHECK
 (3 | 
SSL_SECOP_OTHER_CIPHER
)

	)

2295 
	#SSL_SECOP_CURVE_SUPPORTED
 (4 | 
SSL_SECOP_OTHER_CURVE
)

	)

2297 
	#SSL_SECOP_CURVE_SHARED
 (5 | 
SSL_SECOP_OTHER_CURVE
)

	)

2299 
	#SSL_SECOP_CURVE_CHECK
 (6 | 
SSL_SECOP_OTHER_CURVE
)

	)

2301 
	#SSL_SECOP_TMP_DH
 (7 | 
SSL_SECOP_OTHER_PKEY
)

	)

2303 
	#SSL_SECOP_VERSION
 (9 | 
SSL_SECOP_OTHER_NONE
)

	)

2305 
	#SSL_SECOP_TICKET
 (10 | 
SSL_SECOP_OTHER_NONE
)

	)

2307 
	#SSL_SECOP_SIGALG_SUPPORTED
 (11 | 
SSL_SECOP_OTHER_SIGALG
)

	)

2309 
	#SSL_SECOP_SIGALG_SHARED
 (12 | 
SSL_SECOP_OTHER_SIGALG
)

	)

2311 
	#SSL_SECOP_SIGALG_CHECK
 (13 | 
SSL_SECOP_OTHER_SIGALG
)

	)

2313 
	#SSL_SECOP_SIGALG_MASK
 (14 | 
SSL_SECOP_OTHER_SIGALG
)

	)

2315 
	#SSL_SECOP_COMPRESSION
 (15 | 
SSL_SECOP_OTHER_NONE
)

	)

2317 
	#SSL_SECOP_EE_KEY
 (16 | 
SSL_SECOP_OTHER_CERT
)

	)

2319 
	#SSL_SECOP_CA_KEY
 (17 | 
SSL_SECOP_OTHER_CERT
)

	)

2321 
	#SSL_SECOP_CA_MD
 (18 | 
SSL_SECOP_OTHER_CERT
)

	)

2323 
	#SSL_SECOP_PEER_EE_KEY
 (
SSL_SECOP_EE_KEY
 | 
SSL_SECOP_PEER
)

	)

2325 
	#SSL_SECOP_PEER_CA_KEY
 (
SSL_SECOP_CA_KEY
 | 
SSL_SECOP_PEER
)

	)

2327 
	#SSL_SECOP_PEER_CA_MD
 (
SSL_SECOP_CA_MD
 | 
SSL_SECOP_PEER
)

	)

2329 
SSL_£t_£curôy_Àvñ
(
SSL
 *
s
, 
Àvñ
);

2330 
__owur
 
SSL_gë_£curôy_Àvñ
(c⁄° 
SSL
 *
s
);

2331 
SSL_£t_£curôy_ˇŒback
(
SSL
 *
s
,

2332 (*
cb
Ë(c⁄° 
SSL
 *
s
, c⁄° 
SSL_CTX
 *
˘x
,

2333 
›
, 
bôs
, 
nid
,

2334 *
Ÿhî
, *
ex
));

2335 (*
SSL_gë_£curôy_ˇŒback
(c⁄° 
SSL
 *
s
)) (const SSL *s,

2336 c⁄° 
SSL_CTX
 *
˘x
, 
›
,

2337 
bôs
, 
nid
, *
Ÿhî
,

2338 *
ex
);

2339 
SSL_£t0_£curôy_ex_d©a
(
SSL
 *
s
, *
ex
);

2340 
__owur
 *
SSL_gë0_£curôy_ex_d©a
(c⁄° 
SSL
 *
s
);

2342 
SSL_CTX_£t_£curôy_Àvñ
(
SSL_CTX
 *
˘x
, 
Àvñ
);

2343 
__owur
 
SSL_CTX_gë_£curôy_Àvñ
(c⁄° 
SSL_CTX
 *
˘x
);

2344 
SSL_CTX_£t_£curôy_ˇŒback
(
SSL_CTX
 *
˘x
,

2345 (*
cb
Ë(c⁄° 
SSL
 *
s
, c⁄° 
SSL_CTX
 *
˘x
,

2346 
›
, 
bôs
, 
nid
,

2347 *
Ÿhî
, *
ex
));

2348 (*
SSL_CTX_gë_£curôy_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
)Ë(c⁄° 
SSL
 *
s
,

2349 c⁄° 
SSL_CTX
 *
˘x
,

2350 
›
, 
bôs
,

2351 
nid
,

2352 *
Ÿhî
,

2353 *
ex
);

2354 
SSL_CTX_£t0_£curôy_ex_d©a
(
SSL_CTX
 *
˘x
, *
ex
);

2355 
__owur
 *
SSL_CTX_gë0_£curôy_ex_d©a
(c⁄° 
SSL_CTX
 *
˘x
);

2358 
	#OPENSSL_INIT_NO_LOAD_SSL_STRINGS
 0x00100000L

	)

2359 
	#OPENSSL_INIT_LOAD_SSL_STRINGS
 0x00200000L

	)

2361 
	#OPENSSL_INIT_SSL_DEFAULT
 \

2362 (
OPENSSL_INIT_LOAD_SSL_STRINGS
 | 
OPENSSL_INIT_LOAD_CRYPTO_STRINGS
)

	)

2364 
OPENSSL_öô_s¶
(
uöt64_t
 
›ts
, c⁄° 
OPENSSL_INIT_SETTINGS
 *
£âögs
);

2366 #i‚de‡
OPENSSL_NO_UNIT_TEST


2367 
__owur
 c⁄° 
›ís¶_s¶_ã°_fun˘i⁄s
 *
SSL_ã°_fun˘i⁄s
();

2370 
__owur
 
SSL_‰ì_buf„rs
(
SSL
 *
s¶
);

2371 
__owur
 
SSL_Æloc_buf„rs
(
SSL
 *
s¶
);

2375 
	tSSL_TICKET_STATUS
;

2379 
	#SSL_TICKET_FATAL_ERR_MALLOC
 0

	)

2381 
	#SSL_TICKET_FATAL_ERR_OTHER
 1

	)

2383 
	#SSL_TICKET_NONE
 2

	)

2385 
	#SSL_TICKET_EMPTY
 3

	)

2387 
	#SSL_TICKET_NO_DECRYPT
 4

	)

2389 
	#SSL_TICKET_SUCCESS
 5

	)

2391 
	#SSL_TICKET_SUCCESS_RENEW
 6

	)

2394 
	tSSL_TICKET_RETURN
;

2397 
	#SSL_TICKET_RETURN_ABORT
 0

	)

2399 
	#SSL_TICKET_RETURN_IGNORE
 1

	)

2401 
	#SSL_TICKET_RETURN_IGNORE_RENEW
 2

	)

2403 
	#SSL_TICKET_RETURN_USE
 3

	)

2405 
	#SSL_TICKET_RETURN_USE_RENEW
 4

	)

2407 (*
SSL_CTX_gíî©e_£ssi⁄_tickë_‚
)(
	tSSL
 *
	ts
, *
	t¨g
);

2408 
SSL_TICKET_RETURN
 (*
	tSSL_CTX_de¸y±_£ssi⁄_tickë_‚
)(
	tSSL
 *
	ts
, 
	tSSL_SESSION
 *
	tss
,

2409 c⁄° *
	tkey«me
,

2410 
	tsize_t
 
	tkey«me_Àngth
,

2411 
	tSSL_TICKET_STATUS
 
	t°©us
,

2412 *
	t¨g
);

2413 
SSL_CTX_£t_£ssi⁄_tickë_cb
(
SSL_CTX
 *
˘x
,

2414 
SSL_CTX_gíî©e_£ssi⁄_tickë_‚
 
gí_cb
,

2415 
SSL_CTX_de¸y±_£ssi⁄_tickë_‚
 
dec_cb
,

2416 *
¨g
);

2417 
SSL_SESSION_£t1_tickë_≠pd©a
(
SSL_SESSION
 *
ss
, c⁄° *
d©a
, 
size_t
 
Àn
);

2418 
SSL_SESSION_gë0_tickë_≠pd©a
(
SSL_SESSION
 *
ss
, **
d©a
, 
size_t
 *
Àn
);

2420 c⁄° 
SSL_vîsi⁄_°r
[];

2422 (*
	tDTLS_timî_cb
)(
	tSSL
 *
	ts
, 
	ttimî_us
);

2424 
DTLS_£t_timî_cb
(
SSL
 *
s
, 
DTLS_timî_cb
 
cb
);

2427 (*
	gSSL_Ælow_óæy_d©a_cb_‚
)(
	tSSL
 *
	ts
, *
	t¨g
);

2428 
SSL_CTX_£t_Ælow_óæy_d©a_cb
(
SSL_CTX
 *
˘x
,

2429 
SSL_Ælow_óæy_d©a_cb_‚
 
cb
,

2430 *
¨g
);

2431 
SSL_£t_Ælow_óæy_d©a_cb
(
SSL
 *
s
,

2432 
SSL_Ælow_óæy_d©a_cb_‚
 
cb
,

2433 *
¨g
);

2435 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/tls1.h

12 #i‚de‡
HEADER_TLS1_H


13 
	#HEADER_TLS1_H


	)

15 
	~<›ís¶/buf„r.h
>

16 
	~<›ís¶/x509.h
>

18 #ifde‡ 
__˝lu•lus


23 #i‚de‡
OPENSSL_TLS_SECURITY_LEVEL


24 
	#OPENSSL_TLS_SECURITY_LEVEL
 1

	)

27 
	#TLS1_VERSION
 0x0301

	)

28 
	#TLS1_1_VERSION
 0x0302

	)

29 
	#TLS1_2_VERSION
 0x0303

	)

30 
	#TLS1_3_VERSION
 0x0304

	)

31 
	#TLS_MAX_VERSION
 
TLS1_3_VERSION


	)

34 
	#TLS_ANY_VERSION
 0x10000

	)

36 
	#TLS1_VERSION_MAJOR
 0x03

	)

37 
	#TLS1_VERSION_MINOR
 0x01

	)

39 
	#TLS1_1_VERSION_MAJOR
 0x03

	)

40 
	#TLS1_1_VERSION_MINOR
 0x02

	)

42 
	#TLS1_2_VERSION_MAJOR
 0x03

	)

43 
	#TLS1_2_VERSION_MINOR
 0x03

	)

45 
	#TLS1_gë_vîsi⁄
(
s
) \

46 ((
	`SSL_vîsi⁄
(
s
Ë>> 8Ë=
TLS1_VERSION_MAJOR
 ? SSL_vîsi⁄(sË: 0)

	)

48 
	#TLS1_gë_˛õ¡_vîsi⁄
(
s
) \

49 ((
	`SSL_˛õ¡_vîsi⁄
(
s
Ë>> 8Ë=
TLS1_VERSION_MAJOR
 ? SSL_˛õ¡_vîsi⁄(sË: 0)

	)

51 
	#TLS1_AD_DECRYPTION_FAILED
 21

	)

52 
	#TLS1_AD_RECORD_OVERFLOW
 22

	)

53 
	#TLS1_AD_UNKNOWN_CA
 48

	)

54 
	#TLS1_AD_ACCESS_DENIED
 49

	)

55 
	#TLS1_AD_DECODE_ERROR
 50

	)

56 
	#TLS1_AD_DECRYPT_ERROR
 51

	)

57 
	#TLS1_AD_EXPORT_RESTRICTION
 60

	)

58 
	#TLS1_AD_PROTOCOL_VERSION
 70

	)

59 
	#TLS1_AD_INSUFFICIENT_SECURITY
 71

	)

60 
	#TLS1_AD_INTERNAL_ERROR
 80

	)

61 
	#TLS1_AD_INAPPROPRIATE_FALLBACK
 86

	)

62 
	#TLS1_AD_USER_CANCELLED
 90

	)

63 
	#TLS1_AD_NO_RENEGOTIATION
 100

	)

65 
	#TLS13_AD_MISSING_EXTENSION
 109

	)

66 
	#TLS13_AD_CERTIFICATE_REQUIRED
 116

	)

68 
	#TLS1_AD_UNSUPPORTED_EXTENSION
 110

	)

69 
	#TLS1_AD_CERTIFICATE_UNOBTAINABLE
 111

	)

70 
	#TLS1_AD_UNRECOGNIZED_NAME
 112

	)

71 
	#TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 113

	)

72 
	#TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
 114

	)

73 
	#TLS1_AD_UNKNOWN_PSK_IDENTITY
 115

	)

74 
	#TLS1_AD_NO_APPLICATION_PROTOCOL
 120

	)

77 
	#TLSEXT_TYPE_£rvî_«me
 0

	)

78 
	#TLSEXT_TYPE_max_‰agmít_Àngth
 1

	)

79 
	#TLSEXT_TYPE_˛õ¡_˚πifiˇã_uæ
 2

	)

80 
	#TLSEXT_TYPE_åu°ed_ˇ_keys
 3

	)

81 
	#TLSEXT_TYPE_åunˇãd_hmac
 4

	)

82 
	#TLSEXT_TYPE_°©us_ªque°
 5

	)

84 
	#TLSEXT_TYPE_u£r_m≠pög
 6

	)

86 
	#TLSEXT_TYPE_˛õ¡_authz
 7

	)

87 
	#TLSEXT_TYPE_£rvî_authz
 8

	)

89 
	#TLSEXT_TYPE_˚π_ty≥
 9

	)

96 
	#TLSEXT_TYPE_suµ‹ãd_groups
 10

	)

97 
	#TLSEXT_TYPE_ñlùtic_curves
 
TLSEXT_TYPE_suµ‹ãd_groups


	)

98 
	#TLSEXT_TYPE_ec_poöt_f‹m©s
 11

	)

102 
	#TLSEXT_TYPE_§p
 12

	)

105 
	#TLSEXT_TYPE_sig«tuª_Æg‹ôhms
 13

	)

108 
	#TLSEXT_TYPE_u£_§ç
 14

	)

111 
	#TLSEXT_TYPE_hóπbót
 15

	)

114 
	#TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄
 16

	)

120 
	#TLSEXT_TYPE_sig√d_˚πifiˇã_time°amp
 18

	)

126 
	#TLSEXT_TYPE_∑ddög
 21

	)

129 
	#TLSEXT_TYPE_í¸y±_thí_mac
 22

	)

132 
	#TLSEXT_TYPE_exãnded_ma°î_£¸ë
 23

	)

135 
	#TLSEXT_TYPE_£ssi⁄_tickë
 35

	)

138 
	#TLSEXT_TYPE_psk
 41

	)

139 
	#TLSEXT_TYPE_óæy_d©a
 42

	)

140 
	#TLSEXT_TYPE_suµ‹ãd_vîsi⁄s
 43

	)

141 
	#TLSEXT_TYPE_cookõ
 44

	)

142 
	#TLSEXT_TYPE_psk_kex_modes
 45

	)

143 
	#TLSEXT_TYPE_˚πifiˇã_auth‹ôõs
 47

	)

144 
	#TLSEXT_TYPE_po°_h™dshake_auth
 49

	)

145 
	#TLSEXT_TYPE_sig«tuª_Æg‹ôhms_˚π
 50

	)

146 
	#TLSEXT_TYPE_key_sh¨e
 51

	)

149 
	#TLSEXT_TYPE_ª√gŸüã
 0xff01

	)

151 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


153 
	#TLSEXT_TYPE_√xt_¥Ÿo_√g
 13172

	)

157 
	#TLSEXT_NAMETYPE_ho°_«me
 0

	)

159 
	#TLSEXT_STATUSTYPE_oc•
 1

	)

162 
	#TLSEXT_ECPOINTFORMAT_fú°
 0

	)

163 
	#TLSEXT_ECPOINTFORMAT_uncom¥es£d
 0

	)

164 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_¥ime
 1

	)

165 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_ch¨2
 2

	)

166 
	#TLSEXT_ECPOINTFORMAT_œ°
 2

	)

169 
	#TLSEXT_sig«tuª_™⁄ymous
 0

	)

170 
	#TLSEXT_sig«tuª_rß
 1

	)

171 
	#TLSEXT_sig«tuª_dß
 2

	)

172 
	#TLSEXT_sig«tuª_ecdß
 3

	)

173 
	#TLSEXT_sig«tuª_go°r34102001
 237

	)

174 
	#TLSEXT_sig«tuª_go°r34102012_256
 238

	)

175 
	#TLSEXT_sig«tuª_go°r34102012_512
 239

	)

178 
	#TLSEXT_sig«tuª_num
 7

	)

180 
	#TLSEXT_hash_n⁄e
 0

	)

181 
	#TLSEXT_hash_md5
 1

	)

182 
	#TLSEXT_hash_sha1
 2

	)

183 
	#TLSEXT_hash_sha224
 3

	)

184 
	#TLSEXT_hash_sha256
 4

	)

185 
	#TLSEXT_hash_sha384
 5

	)

186 
	#TLSEXT_hash_sha512
 6

	)

187 
	#TLSEXT_hash_go°r3411
 237

	)

188 
	#TLSEXT_hash_go°r34112012_256
 238

	)

189 
	#TLSEXT_hash_go°r34112012_512
 239

	)

193 
	#TLSEXT_hash_num
 10

	)

196 
	#TLSEXT_nid_unknown
 0x1000000

	)

200 
	#TLSEXT_curve_P_256
 23

	)

201 
	#TLSEXT_curve_P_384
 24

	)

204 
	#TLSEXT_max_‰agmít_Àngth_DISABLED
 0

	)

206 
	#TLSEXT_max_‰agmít_Àngth_512
 1

	)

207 
	#TLSEXT_max_‰agmít_Àngth_1024
 2

	)

208 
	#TLSEXT_max_‰agmít_Àngth_2048
 3

	)

209 
	#TLSEXT_max_‰agmít_Àngth_4096
 4

	)

211 
SSL_CTX_£t_é£xt_max_‰agmít_Àngth
(
SSL_CTX
 *
˘x
, 
uöt8_t
 
mode
);

212 
SSL_£t_é£xt_max_‰agmít_Àngth
(
SSL
 *
s¶
, 
uöt8_t
 
mode
);

214 
	#TLSEXT_MAXLEN_ho°_«me
 255

	)

216 
__owur
 c⁄° *
SSL_gë_£rvî«me
(c⁄° 
SSL
 *
s
, c⁄° 
ty≥
);

217 
__owur
 
SSL_gë_£rvî«me_ty≥
(c⁄° 
SSL
 *
s
);

225 
__owur
 
SSL_exp‹t_keyög_m©îül
(
SSL
 *
s
, *
out
, 
size_t
 
ﬁí
,

226 c⁄° *
œbñ
, 
size_t
 
Œí
,

227 c⁄° *
c⁄ãxt
,

228 
size_t
 
c⁄ãxéí
, 
u£_c⁄ãxt
);

237 
__owur
 
SSL_exp‹t_keyög_m©îül_óæy
(
SSL
 *
s
, *
out
,

238 
size_t
 
ﬁí
, c⁄° *
œbñ
,

239 
size_t
 
Œí
,

240 c⁄° *
c⁄ãxt
,

241 
size_t
 
c⁄ãxéí
);

243 
SSL_gë_≥î_sig«tuª_ty≥_nid
(c⁄° 
SSL
 *
s
, *
≤id
);

244 
SSL_gë_sig«tuª_ty≥_nid
(c⁄° 
SSL
 *
s
, *
≤id
);

246 
SSL_gë_sigÆgs
(
SSL
 *
s
, 
idx
,

247 *
psign
, *
phash
, *
psig«ndhash
,

248 *
rsig
, *
rhash
);

250 
SSL_gë_sh¨ed_sigÆgs
(
SSL
 *
s
, 
idx
,

251 *
psign
, *
phash
, *
psig«ndhash
,

252 *
rsig
, *
rhash
);

254 
__owur
 
SSL_check_chaö
(
SSL
 *
s
, 
X509
 *
x
, 
EVP_PKEY
 *
pk
, 
STACK_OF
(X509Ë*
chaö
);

256 
	#SSL_£t_é£xt_ho°_«me
(
s
,
«me
) \

257 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_HOSTNAME
,
TLSEXT_NAMETYPE_ho°_«me
,\

258 (*)
«me
)

	)

260 
	#SSL_£t_é£xt_debug_ˇŒback
(
s¶
, 
cb
) \

261 
	`SSL_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_CB
,\

262 ((*)())
cb
)

	)

264 
	#SSL_£t_é£xt_debug_¨g
(
s¶
, 
¨g
) \

265 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_ARG
,0,
¨g
)

	)

267 
	#SSL_gë_é£xt_°©us_ty≥
(
s¶
) \

268 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE
,0,
NULL
)

	)

270 
	#SSL_£t_é£xt_°©us_ty≥
(
s¶
, 
ty≥
) \

271 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
,
ty≥
,
NULL
)

	)

273 
	#SSL_gë_é£xt_°©us_exts
(
s¶
, 
¨g
) \

274 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
,0,
¨g
)

	)

276 
	#SSL_£t_é£xt_°©us_exts
(
s¶
, 
¨g
) \

277 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
,0,
¨g
)

	)

279 
	#SSL_gë_é£xt_°©us_ids
(
s¶
, 
¨g
) \

280 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
,0,
¨g
)

	)

282 
	#SSL_£t_é£xt_°©us_ids
(
s¶
, 
¨g
) \

283 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
,0,
¨g
)

	)

285 
	#SSL_gë_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
) \

286 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
,0,
¨g
)

	)

288 
	#SSL_£t_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
, 
¨gÀn
) \

289 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
,
¨gÀn
,
¨g
)

	)

291 
	#SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
˘x
, 
cb
) \

292 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
,\

293 ((*)())
cb
)

	)

295 
	#SSL_TLSEXT_ERR_OK
 0

	)

296 
	#SSL_TLSEXT_ERR_ALERT_WARNING
 1

	)

297 
	#SSL_TLSEXT_ERR_ALERT_FATAL
 2

	)

298 
	#SSL_TLSEXT_ERR_NOACK
 3

	)

300 
	#SSL_CTX_£t_é£xt_£rvî«me_¨g
(
˘x
, 
¨g
) \

301 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
,0,
¨g
)

	)

303 
	#SSL_CTX_gë_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

304 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_TLSEXT_TICKET_KEYS
,
keyÀn
,
keys
)

	)

305 
	#SSL_CTX_£t_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

306 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_TICKET_KEYS
,
keyÀn
,
keys
)

	)

308 
	#SSL_CTX_gë_é£xt_°©us_cb
(
s¶
, 
cb
) \

309 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB
,0,(*)
cb
)

	)

310 
	#SSL_CTX_£t_é£xt_°©us_cb
(
s¶
, 
cb
) \

311 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
,\

312 ((*)())
cb
)

	)

314 
	#SSL_CTX_gë_é£xt_°©us_¨g
(
s¶
, 
¨g
) \

315 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG
,0,
¨g
)

	)

316 
	#SSL_CTX_£t_é£xt_°©us_¨g
(
s¶
, 
¨g
) \

317 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
,0,
¨g
)

	)

319 
	#SSL_CTX_£t_é£xt_°©us_ty≥
(
s¶
, 
ty≥
) \

320 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
,
ty≥
,
NULL
)

	)

322 
	#SSL_CTX_gë_é£xt_°©us_ty≥
(
s¶
) \

323 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE
,0,
NULL
)

	)

325 
	#SSL_CTX_£t_é£xt_tickë_key_cb
(
s¶
, 
cb
) \

326 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
,\

327 ((*)())
cb
)

	)

329 #i‚de‡
OPENSSL_NO_HEARTBEATS


330 
	#SSL_DTLSEXT_HB_ENABLED
 0x01

	)

331 
	#SSL_DTLSEXT_HB_DONT_SEND_REQUESTS
 0x02

	)

332 
	#SSL_DTLSEXT_HB_DONT_RECV_REQUESTS
 0x04

	)

333 
	#SSL_gë_dé£xt_hóπbót_≥ndög
(
s¶
) \

334 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING
,0,
NULL
)

	)

335 
	#SSL_£t_dé£xt_hóπbót_no_ªque°s
(
s¶
, 
¨g
) \

336 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS
,
¨g
,
NULL
)

	)

338 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

339 
	#SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
 \

340 
SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT


	)

341 
	#SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
 \

342 
SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING


	)

343 
	#SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
 \

344 
SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS


	)

345 
	#SSL_TLSEXT_HB_ENABLED
 \

346 
SSL_DTLSEXT_HB_ENABLED


	)

347 
	#SSL_TLSEXT_HB_DONT_SEND_REQUESTS
 \

348 
SSL_DTLSEXT_HB_DONT_SEND_REQUESTS


	)

349 
	#SSL_TLSEXT_HB_DONT_RECV_REQUESTS
 \

350 
SSL_DTLSEXT_HB_DONT_RECV_REQUESTS


	)

351 
	#SSL_gë_é£xt_hóπbót_≥ndög
(
s¶
) \

352 
	`SSL_gë_dé£xt_hóπbót_≥ndög
(
s¶
)

	)

353 
	#SSL_£t_é£xt_hóπbót_no_ªque°s
(
s¶
, 
¨g
) \

354 
	`SSL_£t_dé£xt_hóπbót_no_ªque°s
(
s¶
,
¨g
)

	)

359 
	#TLS1_CK_PSK_WITH_RC4_128_SHA
 0x0300008A

	)

360 
	#TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300008B

	)

361 
	#TLS1_CK_PSK_WITH_AES_128_CBC_SHA
 0x0300008C

	)

362 
	#TLS1_CK_PSK_WITH_AES_256_CBC_SHA
 0x0300008D

	)

363 
	#TLS1_CK_DHE_PSK_WITH_RC4_128_SHA
 0x0300008E

	)

364 
	#TLS1_CK_DHE_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300008F

	)

365 
	#TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA
 0x03000090

	)

366 
	#TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA
 0x03000091

	)

367 
	#TLS1_CK_RSA_PSK_WITH_RC4_128_SHA
 0x03000092

	)

368 
	#TLS1_CK_RSA_PSK_WITH_3DES_EDE_CBC_SHA
 0x03000093

	)

369 
	#TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA
 0x03000094

	)

370 
	#TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA
 0x03000095

	)

373 
	#TLS1_CK_PSK_WITH_AES_128_GCM_SHA256
 0x030000A8

	)

374 
	#TLS1_CK_PSK_WITH_AES_256_GCM_SHA384
 0x030000A9

	)

375 
	#TLS1_CK_DHE_PSK_WITH_AES_128_GCM_SHA256
 0x030000AA

	)

376 
	#TLS1_CK_DHE_PSK_WITH_AES_256_GCM_SHA384
 0x030000AB

	)

377 
	#TLS1_CK_RSA_PSK_WITH_AES_128_GCM_SHA256
 0x030000AC

	)

378 
	#TLS1_CK_RSA_PSK_WITH_AES_256_GCM_SHA384
 0x030000AD

	)

379 
	#TLS1_CK_PSK_WITH_AES_128_CBC_SHA256
 0x030000AE

	)

380 
	#TLS1_CK_PSK_WITH_AES_256_CBC_SHA384
 0x030000AF

	)

381 
	#TLS1_CK_PSK_WITH_NULL_SHA256
 0x030000B0

	)

382 
	#TLS1_CK_PSK_WITH_NULL_SHA384
 0x030000B1

	)

383 
	#TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA256
 0x030000B2

	)

384 
	#TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA384
 0x030000B3

	)

385 
	#TLS1_CK_DHE_PSK_WITH_NULL_SHA256
 0x030000B4

	)

386 
	#TLS1_CK_DHE_PSK_WITH_NULL_SHA384
 0x030000B5

	)

387 
	#TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA256
 0x030000B6

	)

388 
	#TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA384
 0x030000B7

	)

389 
	#TLS1_CK_RSA_PSK_WITH_NULL_SHA256
 0x030000B8

	)

390 
	#TLS1_CK_RSA_PSK_WITH_NULL_SHA384
 0x030000B9

	)

393 
	#TLS1_CK_PSK_WITH_NULL_SHA
 0x0300002C

	)

394 
	#TLS1_CK_DHE_PSK_WITH_NULL_SHA
 0x0300002D

	)

395 
	#TLS1_CK_RSA_PSK_WITH_NULL_SHA
 0x0300002E

	)

398 
	#TLS1_CK_RSA_WITH_AES_128_SHA
 0x0300002F

	)

399 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA
 0x03000030

	)

400 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA
 0x03000031

	)

401 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA
 0x03000032

	)

402 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA
 0x03000033

	)

403 
	#TLS1_CK_ADH_WITH_AES_128_SHA
 0x03000034

	)

404 
	#TLS1_CK_RSA_WITH_AES_256_SHA
 0x03000035

	)

405 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA
 0x03000036

	)

406 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA
 0x03000037

	)

407 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA
 0x03000038

	)

408 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA
 0x03000039

	)

409 
	#TLS1_CK_ADH_WITH_AES_256_SHA
 0x0300003A

	)

412 
	#TLS1_CK_RSA_WITH_NULL_SHA256
 0x0300003B

	)

413 
	#TLS1_CK_RSA_WITH_AES_128_SHA256
 0x0300003C

	)

414 
	#TLS1_CK_RSA_WITH_AES_256_SHA256
 0x0300003D

	)

415 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA256
 0x0300003E

	)

416 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA256
 0x0300003F

	)

417 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA256
 0x03000040

	)

420 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000041

	)

421 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000042

	)

422 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000043

	)

423 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000044

	)

424 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000045

	)

425 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA
 0x03000046

	)

428 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA256
 0x03000067

	)

429 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA256
 0x03000068

	)

430 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA256
 0x03000069

	)

431 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA256
 0x0300006A

	)

432 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA256
 0x0300006B

	)

433 
	#TLS1_CK_ADH_WITH_AES_128_SHA256
 0x0300006C

	)

434 
	#TLS1_CK_ADH_WITH_AES_256_SHA256
 0x0300006D

	)

437 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000084

	)

438 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000085

	)

439 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000086

	)

440 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000087

	)

441 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000088

	)

442 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA
 0x03000089

	)

445 
	#TLS1_CK_RSA_WITH_SEED_SHA
 0x03000096

	)

446 
	#TLS1_CK_DH_DSS_WITH_SEED_SHA
 0x03000097

	)

447 
	#TLS1_CK_DH_RSA_WITH_SEED_SHA
 0x03000098

	)

448 
	#TLS1_CK_DHE_DSS_WITH_SEED_SHA
 0x03000099

	)

449 
	#TLS1_CK_DHE_RSA_WITH_SEED_SHA
 0x0300009A

	)

450 
	#TLS1_CK_ADH_WITH_SEED_SHA
 0x0300009B

	)

453 
	#TLS1_CK_RSA_WITH_AES_128_GCM_SHA256
 0x0300009C

	)

454 
	#TLS1_CK_RSA_WITH_AES_256_GCM_SHA384
 0x0300009D

	)

455 
	#TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300009E

	)

456 
	#TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300009F

	)

457 
	#TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256
 0x030000A0

	)

458 
	#TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384
 0x030000A1

	)

459 
	#TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256
 0x030000A2

	)

460 
	#TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384
 0x030000A3

	)

461 
	#TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256
 0x030000A4

	)

462 
	#TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384
 0x030000A5

	)

463 
	#TLS1_CK_ADH_WITH_AES_128_GCM_SHA256
 0x030000A6

	)

464 
	#TLS1_CK_ADH_WITH_AES_256_GCM_SHA384
 0x030000A7

	)

467 
	#TLS1_CK_RSA_WITH_AES_128_CCM
 0x0300C09C

	)

468 
	#TLS1_CK_RSA_WITH_AES_256_CCM
 0x0300C09D

	)

469 
	#TLS1_CK_DHE_RSA_WITH_AES_128_CCM
 0x0300C09E

	)

470 
	#TLS1_CK_DHE_RSA_WITH_AES_256_CCM
 0x0300C09F

	)

471 
	#TLS1_CK_RSA_WITH_AES_128_CCM_8
 0x0300C0A0

	)

472 
	#TLS1_CK_RSA_WITH_AES_256_CCM_8
 0x0300C0A1

	)

473 
	#TLS1_CK_DHE_RSA_WITH_AES_128_CCM_8
 0x0300C0A2

	)

474 
	#TLS1_CK_DHE_RSA_WITH_AES_256_CCM_8
 0x0300C0A3

	)

475 
	#TLS1_CK_PSK_WITH_AES_128_CCM
 0x0300C0A4

	)

476 
	#TLS1_CK_PSK_WITH_AES_256_CCM
 0x0300C0A5

	)

477 
	#TLS1_CK_DHE_PSK_WITH_AES_128_CCM
 0x0300C0A6

	)

478 
	#TLS1_CK_DHE_PSK_WITH_AES_256_CCM
 0x0300C0A7

	)

479 
	#TLS1_CK_PSK_WITH_AES_128_CCM_8
 0x0300C0A8

	)

480 
	#TLS1_CK_PSK_WITH_AES_256_CCM_8
 0x0300C0A9

	)

481 
	#TLS1_CK_DHE_PSK_WITH_AES_128_CCM_8
 0x0300C0AA

	)

482 
	#TLS1_CK_DHE_PSK_WITH_AES_256_CCM_8
 0x0300C0AB

	)

485 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM
 0x0300C0AC

	)

486 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM
 0x0300C0AD

	)

487 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM_8
 0x0300C0AE

	)

488 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM_8
 0x0300C0AF

	)

491 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BA

	)

492 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BB

	)

493 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BC

	)

494 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BD

	)

495 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BE

	)

496 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BF

	)

498 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C0

	)

499 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C1

	)

500 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C2

	)

501 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C3

	)

502 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C4

	)

503 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C5

	)

506 
	#TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA
 0x0300C001

	)

507 
	#TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA
 0x0300C002

	)

508 
	#TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C003

	)

509 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C004

	)

510 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C005

	)

512 
	#TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA
 0x0300C006

	)

513 
	#TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA
 0x0300C007

	)

514 
	#TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C008

	)

515 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C009

	)

516 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C00A

	)

518 
	#TLS1_CK_ECDH_RSA_WITH_NULL_SHA
 0x0300C00B

	)

519 
	#TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA
 0x0300C00C

	)

520 
	#TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA
 0x0300C00D

	)

521 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA
 0x0300C00E

	)

522 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA
 0x0300C00F

	)

524 
	#TLS1_CK_ECDHE_RSA_WITH_NULL_SHA
 0x0300C010

	)

525 
	#TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA
 0x0300C011

	)

526 
	#TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 0x0300C012

	)

527 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA
 0x0300C013

	)

528 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA
 0x0300C014

	)

530 
	#TLS1_CK_ECDH_™⁄_WITH_NULL_SHA
 0x0300C015

	)

531 
	#TLS1_CK_ECDH_™⁄_WITH_RC4_128_SHA
 0x0300C016

	)

532 
	#TLS1_CK_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 0x0300C017

	)

533 
	#TLS1_CK_ECDH_™⁄_WITH_AES_128_CBC_SHA
 0x0300C018

	)

534 
	#TLS1_CK_ECDH_™⁄_WITH_AES_256_CBC_SHA
 0x0300C019

	)

537 
	#TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 0x0300C01A

	)

538 
	#TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 0x0300C01B

	)

539 
	#TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 0x0300C01C

	)

540 
	#TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA
 0x0300C01D

	)

541 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 0x0300C01E

	)

542 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 0x0300C01F

	)

543 
	#TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA
 0x0300C020

	)

544 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 0x0300C021

	)

545 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 0x0300C022

	)

548 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256
 0x0300C023

	)

549 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384
 0x0300C024

	)

550 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256
 0x0300C025

	)

551 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384
 0x0300C026

	)

552 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256
 0x0300C027

	)

553 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384
 0x0300C028

	)

554 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256
 0x0300C029

	)

555 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384
 0x0300C02A

	)

558 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02B

	)

559 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02C

	)

560 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02D

	)

561 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02E

	)

562 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300C02F

	)

563 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300C030

	)

564 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256
 0x0300C031

	)

565 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384
 0x0300C032

	)

568 
	#TLS1_CK_ECDHE_PSK_WITH_RC4_128_SHA
 0x0300C033

	)

569 
	#TLS1_CK_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300C034

	)

570 
	#TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA
 0x0300C035

	)

571 
	#TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA
 0x0300C036

	)

573 
	#TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA256
 0x0300C037

	)

574 
	#TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA384
 0x0300C038

	)

577 
	#TLS1_CK_ECDHE_PSK_WITH_NULL_SHA
 0x0300C039

	)

578 
	#TLS1_CK_ECDHE_PSK_WITH_NULL_SHA256
 0x0300C03A

	)

579 
	#TLS1_CK_ECDHE_PSK_WITH_NULL_SHA384
 0x0300C03B

	)

582 
	#TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C072

	)

583 
	#TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C073

	)

584 
	#TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C074

	)

585 
	#TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C075

	)

586 
	#TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C076

	)

587 
	#TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C077

	)

588 
	#TLS1_CK_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C078

	)

589 
	#TLS1_CK_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C079

	)

591 
	#TLS1_CK_PSK_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C094

	)

592 
	#TLS1_CK_PSK_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C095

	)

593 
	#TLS1_CK_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C096

	)

594 
	#TLS1_CK_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C097

	)

595 
	#TLS1_CK_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C098

	)

596 
	#TLS1_CK_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C099

	)

597 
	#TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C09A

	)

598 
	#TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C09B

	)

601 
	#TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305
 0x0300CCA8

	)

602 
	#TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
 0x0300CCA9

	)

603 
	#TLS1_CK_DHE_RSA_WITH_CHACHA20_POLY1305
 0x0300CCAA

	)

604 
	#TLS1_CK_PSK_WITH_CHACHA20_POLY1305
 0x0300CCAB

	)

605 
	#TLS1_CK_ECDHE_PSK_WITH_CHACHA20_POLY1305
 0x0300CCAC

	)

606 
	#TLS1_CK_DHE_PSK_WITH_CHACHA20_POLY1305
 0x0300CCAD

	)

607 
	#TLS1_CK_RSA_PSK_WITH_CHACHA20_POLY1305
 0x0300CCAE

	)

610 
	#TLS1_3_CK_AES_128_GCM_SHA256
 0x03001301

	)

611 
	#TLS1_3_CK_AES_256_GCM_SHA384
 0x03001302

	)

612 
	#TLS1_3_CK_CHACHA20_POLY1305_SHA256
 0x03001303

	)

613 
	#TLS1_3_CK_AES_128_CCM_SHA256
 0x03001304

	)

614 
	#TLS1_3_CK_AES_128_CCM_8_SHA256
 0x03001305

	)

617 
	#TLS1_CK_RSA_WITH_ARIA_128_GCM_SHA256
 0x0300C050

	)

618 
	#TLS1_CK_RSA_WITH_ARIA_256_GCM_SHA384
 0x0300C051

	)

619 
	#TLS1_CK_DHE_RSA_WITH_ARIA_128_GCM_SHA256
 0x0300C052

	)

620 
	#TLS1_CK_DHE_RSA_WITH_ARIA_256_GCM_SHA384
 0x0300C053

	)

621 
	#TLS1_CK_DH_RSA_WITH_ARIA_128_GCM_SHA256
 0x0300C054

	)

622 
	#TLS1_CK_DH_RSA_WITH_ARIA_256_GCM_SHA384
 0x0300C055

	)

623 
	#TLS1_CK_DHE_DSS_WITH_ARIA_128_GCM_SHA256
 0x0300C056

	)

624 
	#TLS1_CK_DHE_DSS_WITH_ARIA_256_GCM_SHA384
 0x0300C057

	)

625 
	#TLS1_CK_DH_DSS_WITH_ARIA_128_GCM_SHA256
 0x0300C058

	)

626 
	#TLS1_CK_DH_DSS_WITH_ARIA_256_GCM_SHA384
 0x0300C059

	)

627 
	#TLS1_CK_DH_™⁄_WITH_ARIA_128_GCM_SHA256
 0x0300C05A

	)

628 
	#TLS1_CK_DH_™⁄_WITH_ARIA_256_GCM_SHA384
 0x0300C05B

	)

629 
	#TLS1_CK_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256
 0x0300C05C

	)

630 
	#TLS1_CK_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384
 0x0300C05D

	)

631 
	#TLS1_CK_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256
 0x0300C05E

	)

632 
	#TLS1_CK_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384
 0x0300C05F

	)

633 
	#TLS1_CK_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256
 0x0300C060

	)

634 
	#TLS1_CK_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384
 0x0300C061

	)

635 
	#TLS1_CK_ECDH_RSA_WITH_ARIA_128_GCM_SHA256
 0x0300C062

	)

636 
	#TLS1_CK_ECDH_RSA_WITH_ARIA_256_GCM_SHA384
 0x0300C063

	)

637 
	#TLS1_CK_PSK_WITH_ARIA_128_GCM_SHA256
 0x0300C06A

	)

638 
	#TLS1_CK_PSK_WITH_ARIA_256_GCM_SHA384
 0x0300C06B

	)

639 
	#TLS1_CK_DHE_PSK_WITH_ARIA_128_GCM_SHA256
 0x0300C06C

	)

640 
	#TLS1_CK_DHE_PSK_WITH_ARIA_256_GCM_SHA384
 0x0300C06D

	)

641 
	#TLS1_CK_RSA_PSK_WITH_ARIA_128_GCM_SHA256
 0x0300C06E

	)

642 
	#TLS1_CK_RSA_PSK_WITH_ARIA_256_GCM_SHA384
 0x0300C06F

	)

645 
	#TLS1_RFC_RSA_WITH_AES_128_SHA
 "TLS_RSA_WITH_AES_128_CBC_SHA"

	)

646 
	#TLS1_RFC_DHE_DSS_WITH_AES_128_SHA
 "TLS_DHE_DSS_WITH_AES_128_CBC_SHA"

	)

647 
	#TLS1_RFC_DHE_RSA_WITH_AES_128_SHA
 "TLS_DHE_RSA_WITH_AES_128_CBC_SHA"

	)

648 
	#TLS1_RFC_ADH_WITH_AES_128_SHA
 "TLS_DH_™⁄_WITH_AES_128_CBC_SHA"

	)

649 
	#TLS1_RFC_RSA_WITH_AES_256_SHA
 "TLS_RSA_WITH_AES_256_CBC_SHA"

	)

650 
	#TLS1_RFC_DHE_DSS_WITH_AES_256_SHA
 "TLS_DHE_DSS_WITH_AES_256_CBC_SHA"

	)

651 
	#TLS1_RFC_DHE_RSA_WITH_AES_256_SHA
 "TLS_DHE_RSA_WITH_AES_256_CBC_SHA"

	)

652 
	#TLS1_RFC_ADH_WITH_AES_256_SHA
 "TLS_DH_™⁄_WITH_AES_256_CBC_SHA"

	)

653 
	#TLS1_RFC_RSA_WITH_NULL_SHA256
 "TLS_RSA_WITH_NULL_SHA256"

	)

654 
	#TLS1_RFC_RSA_WITH_AES_128_SHA256
 "TLS_RSA_WITH_AES_128_CBC_SHA256"

	)

655 
	#TLS1_RFC_RSA_WITH_AES_256_SHA256
 "TLS_RSA_WITH_AES_256_CBC_SHA256"

	)

656 
	#TLS1_RFC_DHE_DSS_WITH_AES_128_SHA256
 "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256"

	)

657 
	#TLS1_RFC_DHE_RSA_WITH_AES_128_SHA256
 "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256"

	)

658 
	#TLS1_RFC_DHE_DSS_WITH_AES_256_SHA256
 "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256"

	)

659 
	#TLS1_RFC_DHE_RSA_WITH_AES_256_SHA256
 "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256"

	)

660 
	#TLS1_RFC_ADH_WITH_AES_128_SHA256
 "TLS_DH_™⁄_WITH_AES_128_CBC_SHA256"

	)

661 
	#TLS1_RFC_ADH_WITH_AES_256_SHA256
 "TLS_DH_™⁄_WITH_AES_256_CBC_SHA256"

	)

662 
	#TLS1_RFC_RSA_WITH_AES_128_GCM_SHA256
 "TLS_RSA_WITH_AES_128_GCM_SHA256"

	)

663 
	#TLS1_RFC_RSA_WITH_AES_256_GCM_SHA384
 "TLS_RSA_WITH_AES_256_GCM_SHA384"

	)

664 
	#TLS1_RFC_DHE_RSA_WITH_AES_128_GCM_SHA256
 "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"

	)

665 
	#TLS1_RFC_DHE_RSA_WITH_AES_256_GCM_SHA384
 "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384"

	)

666 
	#TLS1_RFC_DHE_DSS_WITH_AES_128_GCM_SHA256
 "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256"

	)

667 
	#TLS1_RFC_DHE_DSS_WITH_AES_256_GCM_SHA384
 "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384"

	)

668 
	#TLS1_RFC_ADH_WITH_AES_128_GCM_SHA256
 "TLS_DH_™⁄_WITH_AES_128_GCM_SHA256"

	)

669 
	#TLS1_RFC_ADH_WITH_AES_256_GCM_SHA384
 "TLS_DH_™⁄_WITH_AES_256_GCM_SHA384"

	)

670 
	#TLS1_RFC_RSA_WITH_AES_128_CCM
 "TLS_RSA_WITH_AES_128_CCM"

	)

671 
	#TLS1_RFC_RSA_WITH_AES_256_CCM
 "TLS_RSA_WITH_AES_256_CCM"

	)

672 
	#TLS1_RFC_DHE_RSA_WITH_AES_128_CCM
 "TLS_DHE_RSA_WITH_AES_128_CCM"

	)

673 
	#TLS1_RFC_DHE_RSA_WITH_AES_256_CCM
 "TLS_DHE_RSA_WITH_AES_256_CCM"

	)

674 
	#TLS1_RFC_RSA_WITH_AES_128_CCM_8
 "TLS_RSA_WITH_AES_128_CCM_8"

	)

675 
	#TLS1_RFC_RSA_WITH_AES_256_CCM_8
 "TLS_RSA_WITH_AES_256_CCM_8"

	)

676 
	#TLS1_RFC_DHE_RSA_WITH_AES_128_CCM_8
 "TLS_DHE_RSA_WITH_AES_128_CCM_8"

	)

677 
	#TLS1_RFC_DHE_RSA_WITH_AES_256_CCM_8
 "TLS_DHE_RSA_WITH_AES_256_CCM_8"

	)

678 
	#TLS1_RFC_PSK_WITH_AES_128_CCM
 "TLS_PSK_WITH_AES_128_CCM"

	)

679 
	#TLS1_RFC_PSK_WITH_AES_256_CCM
 "TLS_PSK_WITH_AES_256_CCM"

	)

680 
	#TLS1_RFC_DHE_PSK_WITH_AES_128_CCM
 "TLS_DHE_PSK_WITH_AES_128_CCM"

	)

681 
	#TLS1_RFC_DHE_PSK_WITH_AES_256_CCM
 "TLS_DHE_PSK_WITH_AES_256_CCM"

	)

682 
	#TLS1_RFC_PSK_WITH_AES_128_CCM_8
 "TLS_PSK_WITH_AES_128_CCM_8"

	)

683 
	#TLS1_RFC_PSK_WITH_AES_256_CCM_8
 "TLS_PSK_WITH_AES_256_CCM_8"

	)

684 
	#TLS1_RFC_DHE_PSK_WITH_AES_128_CCM_8
 "TLS_PSK_DHE_WITH_AES_128_CCM_8"

	)

685 
	#TLS1_RFC_DHE_PSK_WITH_AES_256_CCM_8
 "TLS_PSK_DHE_WITH_AES_256_CCM_8"

	)

686 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_CCM
 "TLS_ECDHE_ECDSA_WITH_AES_128_CCM"

	)

687 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_CCM
 "TLS_ECDHE_ECDSA_WITH_AES_256_CCM"

	)

688 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_CCM_8
 "TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8"

	)

689 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_CCM_8
 "TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8"

	)

690 
	#TLS1_3_RFC_AES_128_GCM_SHA256
 "TLS_AES_128_GCM_SHA256"

	)

691 
	#TLS1_3_RFC_AES_256_GCM_SHA384
 "TLS_AES_256_GCM_SHA384"

	)

692 
	#TLS1_3_RFC_CHACHA20_POLY1305_SHA256
 "TLS_CHACHA20_POLY1305_SHA256"

	)

693 
	#TLS1_3_RFC_AES_128_CCM_SHA256
 "TLS_AES_128_CCM_SHA256"

	)

694 
	#TLS1_3_RFC_AES_128_CCM_8_SHA256
 "TLS_AES_128_CCM_8_SHA256"

	)

695 
	#TLS1_RFC_ECDHE_ECDSA_WITH_NULL_SHA
 "TLS_ECDHE_ECDSA_WITH_NULL_SHA"

	)

696 
	#TLS1_RFC_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA"

	)

697 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"

	)

698 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"

	)

699 
	#TLS1_RFC_ECDHE_RSA_WITH_NULL_SHA
 "TLS_ECDHE_RSA_WITH_NULL_SHA"

	)

700 
	#TLS1_RFC_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA"

	)

701 
	#TLS1_RFC_ECDHE_RSA_WITH_AES_128_CBC_SHA
 "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"

	)

702 
	#TLS1_RFC_ECDHE_RSA_WITH_AES_256_CBC_SHA
 "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"

	)

703 
	#TLS1_RFC_ECDH_™⁄_WITH_NULL_SHA
 "TLS_ECDH_™⁄_WITH_NULL_SHA"

	)

704 
	#TLS1_RFC_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 "TLS_ECDH_™⁄_WITH_3DES_EDE_CBC_SHA"

	)

705 
	#TLS1_RFC_ECDH_™⁄_WITH_AES_128_CBC_SHA
 "TLS_ECDH_™⁄_WITH_AES_128_CBC_SHA"

	)

706 
	#TLS1_RFC_ECDH_™⁄_WITH_AES_256_CBC_SHA
 "TLS_ECDH_™⁄_WITH_AES_256_CBC_SHA"

	)

707 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_SHA256
 "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"

	)

708 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_SHA384
 "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"

	)

709 
	#TLS1_RFC_ECDHE_RSA_WITH_AES_128_SHA256
 "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"

	)

710 
	#TLS1_RFC_ECDHE_RSA_WITH_AES_256_SHA384
 "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"

	)

711 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"

	)

712 
	#TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"

	)

713 
	#TLS1_RFC_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"

	)

714 
	#TLS1_RFC_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"

	)

715 
	#TLS1_RFC_PSK_WITH_NULL_SHA
 "TLS_PSK_WITH_NULL_SHA"

	)

716 
	#TLS1_RFC_DHE_PSK_WITH_NULL_SHA
 "TLS_DHE_PSK_WITH_NULL_SHA"

	)

717 
	#TLS1_RFC_RSA_PSK_WITH_NULL_SHA
 "TLS_RSA_PSK_WITH_NULL_SHA"

	)

718 
	#TLS1_RFC_PSK_WITH_3DES_EDE_CBC_SHA
 "TLS_PSK_WITH_3DES_EDE_CBC_SHA"

	)

719 
	#TLS1_RFC_PSK_WITH_AES_128_CBC_SHA
 "TLS_PSK_WITH_AES_128_CBC_SHA"

	)

720 
	#TLS1_RFC_PSK_WITH_AES_256_CBC_SHA
 "TLS_PSK_WITH_AES_256_CBC_SHA"

	)

721 
	#TLS1_RFC_DHE_PSK_WITH_3DES_EDE_CBC_SHA
 "TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA"

	)

722 
	#TLS1_RFC_DHE_PSK_WITH_AES_128_CBC_SHA
 "TLS_DHE_PSK_WITH_AES_128_CBC_SHA"

	)

723 
	#TLS1_RFC_DHE_PSK_WITH_AES_256_CBC_SHA
 "TLS_DHE_PSK_WITH_AES_256_CBC_SHA"

	)

724 
	#TLS1_RFC_RSA_PSK_WITH_3DES_EDE_CBC_SHA
 "TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA"

	)

725 
	#TLS1_RFC_RSA_PSK_WITH_AES_128_CBC_SHA
 "TLS_RSA_PSK_WITH_AES_128_CBC_SHA"

	)

726 
	#TLS1_RFC_RSA_PSK_WITH_AES_256_CBC_SHA
 "TLS_RSA_PSK_WITH_AES_256_CBC_SHA"

	)

727 
	#TLS1_RFC_PSK_WITH_AES_128_GCM_SHA256
 "TLS_PSK_WITH_AES_128_GCM_SHA256"

	)

728 
	#TLS1_RFC_PSK_WITH_AES_256_GCM_SHA384
 "TLS_PSK_WITH_AES_256_GCM_SHA384"

	)

729 
	#TLS1_RFC_DHE_PSK_WITH_AES_128_GCM_SHA256
 "TLS_DHE_PSK_WITH_AES_128_GCM_SHA256"

	)

730 
	#TLS1_RFC_DHE_PSK_WITH_AES_256_GCM_SHA384
 "TLS_DHE_PSK_WITH_AES_256_GCM_SHA384"

	)

731 
	#TLS1_RFC_RSA_PSK_WITH_AES_128_GCM_SHA256
 "TLS_RSA_PSK_WITH_AES_128_GCM_SHA256"

	)

732 
	#TLS1_RFC_RSA_PSK_WITH_AES_256_GCM_SHA384
 "TLS_RSA_PSK_WITH_AES_256_GCM_SHA384"

	)

733 
	#TLS1_RFC_PSK_WITH_AES_128_CBC_SHA256
 "TLS_PSK_WITH_AES_128_CBC_SHA256"

	)

734 
	#TLS1_RFC_PSK_WITH_AES_256_CBC_SHA384
 "TLS_PSK_WITH_AES_256_CBC_SHA384"

	)

735 
	#TLS1_RFC_PSK_WITH_NULL_SHA256
 "TLS_PSK_WITH_NULL_SHA256"

	)

736 
	#TLS1_RFC_PSK_WITH_NULL_SHA384
 "TLS_PSK_WITH_NULL_SHA384"

	)

737 
	#TLS1_RFC_DHE_PSK_WITH_AES_128_CBC_SHA256
 "TLS_DHE_PSK_WITH_AES_128_CBC_SHA256"

	)

738 
	#TLS1_RFC_DHE_PSK_WITH_AES_256_CBC_SHA384
 "TLS_DHE_PSK_WITH_AES_256_CBC_SHA384"

	)

739 
	#TLS1_RFC_DHE_PSK_WITH_NULL_SHA256
 "TLS_DHE_PSK_WITH_NULL_SHA256"

	)

740 
	#TLS1_RFC_DHE_PSK_WITH_NULL_SHA384
 "TLS_DHE_PSK_WITH_NULL_SHA384"

	)

741 
	#TLS1_RFC_RSA_PSK_WITH_AES_128_CBC_SHA256
 "TLS_RSA_PSK_WITH_AES_128_CBC_SHA256"

	)

742 
	#TLS1_RFC_RSA_PSK_WITH_AES_256_CBC_SHA384
 "TLS_RSA_PSK_WITH_AES_256_CBC_SHA384"

	)

743 
	#TLS1_RFC_RSA_PSK_WITH_NULL_SHA256
 "TLS_RSA_PSK_WITH_NULL_SHA256"

	)

744 
	#TLS1_RFC_RSA_PSK_WITH_NULL_SHA384
 "TLS_RSA_PSK_WITH_NULL_SHA384"

	)

745 
	#TLS1_RFC_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA
 "TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA"

	)

746 
	#TLS1_RFC_ECDHE_PSK_WITH_AES_128_CBC_SHA
 "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA"

	)

747 
	#TLS1_RFC_ECDHE_PSK_WITH_AES_256_CBC_SHA
 "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA"

	)

748 
	#TLS1_RFC_ECDHE_PSK_WITH_AES_128_CBC_SHA256
 "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256"

	)

749 
	#TLS1_RFC_ECDHE_PSK_WITH_AES_256_CBC_SHA384
 "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384"

	)

750 
	#TLS1_RFC_ECDHE_PSK_WITH_NULL_SHA
 "TLS_ECDHE_PSK_WITH_NULL_SHA"

	)

751 
	#TLS1_RFC_ECDHE_PSK_WITH_NULL_SHA256
 "TLS_ECDHE_PSK_WITH_NULL_SHA256"

	)

752 
	#TLS1_RFC_ECDHE_PSK_WITH_NULL_SHA384
 "TLS_ECDHE_PSK_WITH_NULL_SHA384"

	)

753 
	#TLS1_RFC_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 "TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA"

	)

754 
	#TLS1_RFC_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 "TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA"

	)

755 
	#TLS1_RFC_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 "TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA"

	)

756 
	#TLS1_RFC_SRP_SHA_WITH_AES_128_CBC_SHA
 "TLS_SRP_SHA_WITH_AES_128_CBC_SHA"

	)

757 
	#TLS1_RFC_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 "TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA"

	)

758 
	#TLS1_RFC_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 "TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA"

	)

759 
	#TLS1_RFC_SRP_SHA_WITH_AES_256_CBC_SHA
 "TLS_SRP_SHA_WITH_AES_256_CBC_SHA"

	)

760 
	#TLS1_RFC_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 "TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA"

	)

761 
	#TLS1_RFC_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 "TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA"

	)

762 
	#TLS1_RFC_DHE_RSA_WITH_CHACHA20_POLY1305
 "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256"

	)

763 
	#TLS1_RFC_ECDHE_RSA_WITH_CHACHA20_POLY1305
 "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256"

	)

764 
	#TLS1_RFC_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
 "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"

	)

765 
	#TLS1_RFC_PSK_WITH_CHACHA20_POLY1305
 "TLS_PSK_WITH_CHACHA20_POLY1305_SHA256"

	)

766 
	#TLS1_RFC_ECDHE_PSK_WITH_CHACHA20_POLY1305
 "TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256"

	)

767 
	#TLS1_RFC_DHE_PSK_WITH_CHACHA20_POLY1305
 "TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256"

	)

768 
	#TLS1_RFC_RSA_PSK_WITH_CHACHA20_POLY1305
 "TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256"

	)

769 
	#TLS1_RFC_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256"

	)

770 
	#TLS1_RFC_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256"

	)

771 
	#TLS1_RFC_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256"

	)

772 
	#TLS1_RFC_ADH_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_DH_™⁄_WITH_CAMELLIA_128_CBC_SHA256"

	)

773 
	#TLS1_RFC_RSA_WITH_CAMELLIA_256_CBC_SHA256
 "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256"

	)

774 
	#TLS1_RFC_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256
 "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256"

	)

775 
	#TLS1_RFC_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
 "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256"

	)

776 
	#TLS1_RFC_ADH_WITH_CAMELLIA_256_CBC_SHA256
 "TLS_DH_™⁄_WITH_CAMELLIA_256_CBC_SHA256"

	)

777 
	#TLS1_RFC_RSA_WITH_CAMELLIA_256_CBC_SHA
 "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA"

	)

778 
	#TLS1_RFC_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA"

	)

779 
	#TLS1_RFC_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA"

	)

780 
	#TLS1_RFC_ADH_WITH_CAMELLIA_256_CBC_SHA
 "TLS_DH_™⁄_WITH_CAMELLIA_256_CBC_SHA"

	)

781 
	#TLS1_RFC_RSA_WITH_CAMELLIA_128_CBC_SHA
 "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA"

	)

782 
	#TLS1_RFC_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA"

	)

783 
	#TLS1_RFC_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA"

	)

784 
	#TLS1_RFC_ADH_WITH_CAMELLIA_128_CBC_SHA
 "TLS_DH_™⁄_WITH_CAMELLIA_128_CBC_SHA"

	)

785 
	#TLS1_RFC_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256"

	)

786 
	#TLS1_RFC_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384"

	)

787 
	#TLS1_RFC_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256"

	)

788 
	#TLS1_RFC_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384
 "TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384"

	)

789 
	#TLS1_RFC_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256"

	)

790 
	#TLS1_RFC_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384"

	)

791 
	#TLS1_RFC_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256"

	)

792 
	#TLS1_RFC_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384"

	)

793 
	#TLS1_RFC_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256"

	)

794 
	#TLS1_RFC_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384"

	)

795 
	#TLS1_RFC_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256"

	)

796 
	#TLS1_RFC_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384"

	)

797 
	#TLS1_RFC_RSA_WITH_SEED_SHA
 "TLS_RSA_WITH_SEED_CBC_SHA"

	)

798 
	#TLS1_RFC_DHE_DSS_WITH_SEED_SHA
 "TLS_DHE_DSS_WITH_SEED_CBC_SHA"

	)

799 
	#TLS1_RFC_DHE_RSA_WITH_SEED_SHA
 "TLS_DHE_RSA_WITH_SEED_CBC_SHA"

	)

800 
	#TLS1_RFC_ADH_WITH_SEED_SHA
 "TLS_DH_™⁄_WITH_SEED_CBC_SHA"

	)

801 
	#TLS1_RFC_ECDHE_PSK_WITH_RC4_128_SHA
 "TLS_ECDHE_PSK_WITH_RC4_128_SHA"

	)

802 
	#TLS1_RFC_ECDH_™⁄_WITH_RC4_128_SHA
 "TLS_ECDH_™⁄_WITH_RC4_128_SHA"

	)

803 
	#TLS1_RFC_ECDHE_ECDSA_WITH_RC4_128_SHA
 "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA"

	)

804 
	#TLS1_RFC_ECDHE_RSA_WITH_RC4_128_SHA
 "TLS_ECDHE_RSA_WITH_RC4_128_SHA"

	)

805 
	#TLS1_RFC_PSK_WITH_RC4_128_SHA
 "TLS_PSK_WITH_RC4_128_SHA"

	)

806 
	#TLS1_RFC_RSA_PSK_WITH_RC4_128_SHA
 "TLS_RSA_PSK_WITH_RC4_128_SHA"

	)

807 
	#TLS1_RFC_DHE_PSK_WITH_RC4_128_SHA
 "TLS_DHE_PSK_WITH_RC4_128_SHA"

	)

808 
	#TLS1_RFC_RSA_WITH_ARIA_128_GCM_SHA256
 "TLS_RSA_WITH_ARIA_128_GCM_SHA256"

	)

809 
	#TLS1_RFC_RSA_WITH_ARIA_256_GCM_SHA384
 "TLS_RSA_WITH_ARIA_256_GCM_SHA384"

	)

810 
	#TLS1_RFC_DHE_RSA_WITH_ARIA_128_GCM_SHA256
 "TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256"

	)

811 
	#TLS1_RFC_DHE_RSA_WITH_ARIA_256_GCM_SHA384
 "TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384"

	)

812 
	#TLS1_RFC_DH_RSA_WITH_ARIA_128_GCM_SHA256
 "TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256"

	)

813 
	#TLS1_RFC_DH_RSA_WITH_ARIA_256_GCM_SHA384
 "TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384"

	)

814 
	#TLS1_RFC_DHE_DSS_WITH_ARIA_128_GCM_SHA256
 "TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256"

	)

815 
	#TLS1_RFC_DHE_DSS_WITH_ARIA_256_GCM_SHA384
 "TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384"

	)

816 
	#TLS1_RFC_DH_DSS_WITH_ARIA_128_GCM_SHA256
 "TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256"

	)

817 
	#TLS1_RFC_DH_DSS_WITH_ARIA_256_GCM_SHA384
 "TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384"

	)

818 
	#TLS1_RFC_DH_™⁄_WITH_ARIA_128_GCM_SHA256
 "TLS_DH_™⁄_WITH_ARIA_128_GCM_SHA256"

	)

819 
	#TLS1_RFC_DH_™⁄_WITH_ARIA_256_GCM_SHA384
 "TLS_DH_™⁄_WITH_ARIA_256_GCM_SHA384"

	)

820 
	#TLS1_RFC_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256
 "TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256"

	)

821 
	#TLS1_RFC_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384
 "TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384"

	)

822 
	#TLS1_RFC_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256
 "TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256"

	)

823 
	#TLS1_RFC_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384
 "TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384"

	)

824 
	#TLS1_RFC_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256
 "TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256"

	)

825 
	#TLS1_RFC_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384
 "TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384"

	)

826 
	#TLS1_RFC_ECDH_RSA_WITH_ARIA_128_GCM_SHA256
 "TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256"

	)

827 
	#TLS1_RFC_ECDH_RSA_WITH_ARIA_256_GCM_SHA384
 "TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384"

	)

828 
	#TLS1_RFC_PSK_WITH_ARIA_128_GCM_SHA256
 "TLS_PSK_WITH_ARIA_128_GCM_SHA256"

	)

829 
	#TLS1_RFC_PSK_WITH_ARIA_256_GCM_SHA384
 "TLS_PSK_WITH_ARIA_256_GCM_SHA384"

	)

830 
	#TLS1_RFC_DHE_PSK_WITH_ARIA_128_GCM_SHA256
 "TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256"

	)

831 
	#TLS1_RFC_DHE_PSK_WITH_ARIA_256_GCM_SHA384
 "TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384"

	)

832 
	#TLS1_RFC_RSA_PSK_WITH_ARIA_128_GCM_SHA256
 "TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256"

	)

833 
	#TLS1_RFC_RSA_PSK_WITH_ARIA_256_GCM_SHA384
 "TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384"

	)

842 
	#TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA
 "DHE-DSS-RC4-SHA"

	)

844 
	#TLS1_TXT_PSK_WITH_NULL_SHA
 "PSK-NULL-SHA"

	)

845 
	#TLS1_TXT_DHE_PSK_WITH_NULL_SHA
 "DHE-PSK-NULL-SHA"

	)

846 
	#TLS1_TXT_RSA_PSK_WITH_NULL_SHA
 "RSA-PSK-NULL-SHA"

	)

849 
	#TLS1_TXT_RSA_WITH_AES_128_SHA
 "AES128-SHA"

	)

850 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA
 "DH-DSS-AES128-SHA"

	)

851 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA
 "DH-RSA-AES128-SHA"

	)

852 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA
 "DHE-DSS-AES128-SHA"

	)

853 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA
 "DHE-RSA-AES128-SHA"

	)

854 
	#TLS1_TXT_ADH_WITH_AES_128_SHA
 "ADH-AES128-SHA"

	)

856 
	#TLS1_TXT_RSA_WITH_AES_256_SHA
 "AES256-SHA"

	)

857 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA
 "DH-DSS-AES256-SHA"

	)

858 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA
 "DH-RSA-AES256-SHA"

	)

859 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA
 "DHE-DSS-AES256-SHA"

	)

860 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA
 "DHE-RSA-AES256-SHA"

	)

861 
	#TLS1_TXT_ADH_WITH_AES_256_SHA
 "ADH-AES256-SHA"

	)

864 
	#TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA
 "ECDH-ECDSA-NULL-SHA"

	)

865 
	#TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA
 "ECDH-ECDSA-RC4-SHA"

	)

866 
	#TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDH-ECDSA-DES-CBC3-SHA"

	)

867 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 "ECDH-ECDSA-AES128-SHA"

	)

868 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 "ECDH-ECDSA-AES256-SHA"

	)

870 
	#TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA
 "ECDHE-ECDSA-NULL-SHA"

	)

871 
	#TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA
 "ECDHE-ECDSA-RC4-SHA"

	)

872 
	#TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDHE-ECDSA-DES-CBC3-SHA"

	)

873 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 "ECDHE-ECDSA-AES128-SHA"

	)

874 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 "ECDHE-ECDSA-AES256-SHA"

	)

876 
	#TLS1_TXT_ECDH_RSA_WITH_NULL_SHA
 "ECDH-RSA-NULL-SHA"

	)

877 
	#TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA
 "ECDH-RSA-RC4-SHA"

	)

878 
	#TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA
 "ECDH-RSA-DES-CBC3-SHA"

	)

879 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA
 "ECDH-RSA-AES128-SHA"

	)

880 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA
 "ECDH-RSA-AES256-SHA"

	)

882 
	#TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA
 "ECDHE-RSA-NULL-SHA"

	)

883 
	#TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA
 "ECDHE-RSA-RC4-SHA"

	)

884 
	#TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 "ECDHE-RSA-DES-CBC3-SHA"

	)

885 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA
 "ECDHE-RSA-AES128-SHA"

	)

886 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA
 "ECDHE-RSA-AES256-SHA"

	)

888 
	#TLS1_TXT_ECDH_™⁄_WITH_NULL_SHA
 "AECDH-NULL-SHA"

	)

889 
	#TLS1_TXT_ECDH_™⁄_WITH_RC4_128_SHA
 "AECDH-RC4-SHA"

	)

890 
	#TLS1_TXT_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 "AECDH-DES-CBC3-SHA"

	)

891 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_128_CBC_SHA
 "AECDH-AES128-SHA"

	)

892 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_256_CBC_SHA
 "AECDH-AES256-SHA"

	)

895 
	#TLS1_TXT_PSK_WITH_RC4_128_SHA
 "PSK-RC4-SHA"

	)

896 
	#TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA
 "PSK-3DES-EDE-CBC-SHA"

	)

897 
	#TLS1_TXT_PSK_WITH_AES_128_CBC_SHA
 "PSK-AES128-CBC-SHA"

	)

898 
	#TLS1_TXT_PSK_WITH_AES_256_CBC_SHA
 "PSK-AES256-CBC-SHA"

	)

900 
	#TLS1_TXT_DHE_PSK_WITH_RC4_128_SHA
 "DHE-PSK-RC4-SHA"

	)

901 
	#TLS1_TXT_DHE_PSK_WITH_3DES_EDE_CBC_SHA
 "DHE-PSK-3DES-EDE-CBC-SHA"

	)

902 
	#TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA
 "DHE-PSK-AES128-CBC-SHA"

	)

903 
	#TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA
 "DHE-PSK-AES256-CBC-SHA"

	)

904 
	#TLS1_TXT_RSA_PSK_WITH_RC4_128_SHA
 "RSA-PSK-RC4-SHA"

	)

905 
	#TLS1_TXT_RSA_PSK_WITH_3DES_EDE_CBC_SHA
 "RSA-PSK-3DES-EDE-CBC-SHA"

	)

906 
	#TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA
 "RSA-PSK-AES128-CBC-SHA"

	)

907 
	#TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA
 "RSA-PSK-AES256-CBC-SHA"

	)

910 
	#TLS1_TXT_PSK_WITH_AES_128_GCM_SHA256
 "PSK-AES128-GCM-SHA256"

	)

911 
	#TLS1_TXT_PSK_WITH_AES_256_GCM_SHA384
 "PSK-AES256-GCM-SHA384"

	)

912 
	#TLS1_TXT_DHE_PSK_WITH_AES_128_GCM_SHA256
 "DHE-PSK-AES128-GCM-SHA256"

	)

913 
	#TLS1_TXT_DHE_PSK_WITH_AES_256_GCM_SHA384
 "DHE-PSK-AES256-GCM-SHA384"

	)

914 
	#TLS1_TXT_RSA_PSK_WITH_AES_128_GCM_SHA256
 "RSA-PSK-AES128-GCM-SHA256"

	)

915 
	#TLS1_TXT_RSA_PSK_WITH_AES_256_GCM_SHA384
 "RSA-PSK-AES256-GCM-SHA384"

	)

917 
	#TLS1_TXT_PSK_WITH_AES_128_CBC_SHA256
 "PSK-AES128-CBC-SHA256"

	)

918 
	#TLS1_TXT_PSK_WITH_AES_256_CBC_SHA384
 "PSK-AES256-CBC-SHA384"

	)

919 
	#TLS1_TXT_PSK_WITH_NULL_SHA256
 "PSK-NULL-SHA256"

	)

920 
	#TLS1_TXT_PSK_WITH_NULL_SHA384
 "PSK-NULL-SHA384"

	)

922 
	#TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA256
 "DHE-PSK-AES128-CBC-SHA256"

	)

923 
	#TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA384
 "DHE-PSK-AES256-CBC-SHA384"

	)

924 
	#TLS1_TXT_DHE_PSK_WITH_NULL_SHA256
 "DHE-PSK-NULL-SHA256"

	)

925 
	#TLS1_TXT_DHE_PSK_WITH_NULL_SHA384
 "DHE-PSK-NULL-SHA384"

	)

927 
	#TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA256
 "RSA-PSK-AES128-CBC-SHA256"

	)

928 
	#TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA384
 "RSA-PSK-AES256-CBC-SHA384"

	)

929 
	#TLS1_TXT_RSA_PSK_WITH_NULL_SHA256
 "RSA-PSK-NULL-SHA256"

	)

930 
	#TLS1_TXT_RSA_PSK_WITH_NULL_SHA384
 "RSA-PSK-NULL-SHA384"

	)

933 
	#TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 "SRP-3DES-EDE-CBC-SHA"

	)

934 
	#TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 "SRP-RSA-3DES-EDE-CBC-SHA"

	)

935 
	#TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 "SRP-DSS-3DES-EDE-CBC-SHA"

	)

936 
	#TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA
 "SRP-AES-128-CBC-SHA"

	)

937 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 "SRP-RSA-AES-128-CBC-SHA"

	)

938 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 "SRP-DSS-AES-128-CBC-SHA"

	)

939 
	#TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA
 "SRP-AES-256-CBC-SHA"

	)

940 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 "SRP-RSA-AES-256-CBC-SHA"

	)

941 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 "SRP-DSS-AES-256-CBC-SHA"

	)

944 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA
 "CAMELLIA128-SHA"

	)

945 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DH-DSS-CAMELLIA128-SHA"

	)

946 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DH-RSA-CAMELLIA128-SHA"

	)

947 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DHE-DSS-CAMELLIA128-SHA"

	)

948 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DHE-RSA-CAMELLIA128-SHA"

	)

949 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA
 "ADH-CAMELLIA128-SHA"

	)

951 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA
 "CAMELLIA256-SHA"

	)

952 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DH-DSS-CAMELLIA256-SHA"

	)

953 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DH-RSA-CAMELLIA256-SHA"

	)

954 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DHE-DSS-CAMELLIA256-SHA"

	)

955 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DHE-RSA-CAMELLIA256-SHA"

	)

956 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA
 "ADH-CAMELLIA256-SHA"

	)

959 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "CAMELLIA128-SHA256"

	)

960 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256
 "DH-DSS-CAMELLIA128-SHA256"

	)

961 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "DH-RSA-CAMELLIA128-SHA256"

	)

962 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256
 "DHE-DSS-CAMELLIA128-SHA256"

	)

963 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "DHE-RSA-CAMELLIA128-SHA256"

	)

964 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA256
 "ADH-CAMELLIA128-SHA256"

	)

966 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA256
 "CAMELLIA256-SHA256"

	)

967 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256
 "DH-DSS-CAMELLIA256-SHA256"

	)

968 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256
 "DH-RSA-CAMELLIA256-SHA256"

	)

969 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256
 "DHE-DSS-CAMELLIA256-SHA256"

	)

970 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
 "DHE-RSA-CAMELLIA256-SHA256"

	)

971 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA256
 "ADH-CAMELLIA256-SHA256"

	)

973 
	#TLS1_TXT_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "PSK-CAMELLIA128-SHA256"

	)

974 
	#TLS1_TXT_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "PSK-CAMELLIA256-SHA384"

	)

975 
	#TLS1_TXT_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "DHE-PSK-CAMELLIA128-SHA256"

	)

976 
	#TLS1_TXT_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "DHE-PSK-CAMELLIA256-SHA384"

	)

977 
	#TLS1_TXT_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "RSA-PSK-CAMELLIA128-SHA256"

	)

978 
	#TLS1_TXT_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "RSA-PSK-CAMELLIA256-SHA384"

	)

979 
	#TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "ECDHE-PSK-CAMELLIA128-SHA256"

	)

980 
	#TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "ECDHE-PSK-CAMELLIA256-SHA384"

	)

983 
	#TLS1_TXT_RSA_WITH_SEED_SHA
 "SEED-SHA"

	)

984 
	#TLS1_TXT_DH_DSS_WITH_SEED_SHA
 "DH-DSS-SEED-SHA"

	)

985 
	#TLS1_TXT_DH_RSA_WITH_SEED_SHA
 "DH-RSA-SEED-SHA"

	)

986 
	#TLS1_TXT_DHE_DSS_WITH_SEED_SHA
 "DHE-DSS-SEED-SHA"

	)

987 
	#TLS1_TXT_DHE_RSA_WITH_SEED_SHA
 "DHE-RSA-SEED-SHA"

	)

988 
	#TLS1_TXT_ADH_WITH_SEED_SHA
 "ADH-SEED-SHA"

	)

991 
	#TLS1_TXT_RSA_WITH_NULL_SHA256
 "NULL-SHA256"

	)

992 
	#TLS1_TXT_RSA_WITH_AES_128_SHA256
 "AES128-SHA256"

	)

993 
	#TLS1_TXT_RSA_WITH_AES_256_SHA256
 "AES256-SHA256"

	)

994 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA256
 "DH-DSS-AES128-SHA256"

	)

995 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA256
 "DH-RSA-AES128-SHA256"

	)

996 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256
 "DHE-DSS-AES128-SHA256"

	)

997 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256
 "DHE-RSA-AES128-SHA256"

	)

998 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA256
 "DH-DSS-AES256-SHA256"

	)

999 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA256
 "DH-RSA-AES256-SHA256"

	)

1000 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256
 "DHE-DSS-AES256-SHA256"

	)

1001 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256
 "DHE-RSA-AES256-SHA256"

	)

1002 
	#TLS1_TXT_ADH_WITH_AES_128_SHA256
 "ADH-AES128-SHA256"

	)

1003 
	#TLS1_TXT_ADH_WITH_AES_256_SHA256
 "ADH-AES256-SHA256"

	)

1006 
	#TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256
 "AES128-GCM-SHA256"

	)

1007 
	#TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384
 "AES256-GCM-SHA384"

	)

1008 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256
 "DHE-RSA-AES128-GCM-SHA256"

	)

1009 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384
 "DHE-RSA-AES256-GCM-SHA384"

	)

1010 
	#TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256
 "DH-RSA-AES128-GCM-SHA256"

	)

1011 
	#TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384
 "DH-RSA-AES256-GCM-SHA384"

	)

1012 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256
 "DHE-DSS-AES128-GCM-SHA256"

	)

1013 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384
 "DHE-DSS-AES256-GCM-SHA384"

	)

1014 
	#TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256
 "DH-DSS-AES128-GCM-SHA256"

	)

1015 
	#TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384
 "DH-DSS-AES256-GCM-SHA384"

	)

1016 
	#TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256
 "ADH-AES128-GCM-SHA256"

	)

1017 
	#TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384
 "ADH-AES256-GCM-SHA384"

	)

1020 
	#TLS1_TXT_RSA_WITH_AES_128_CCM
 "AES128-CCM"

	)

1021 
	#TLS1_TXT_RSA_WITH_AES_256_CCM
 "AES256-CCM"

	)

1022 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_CCM
 "DHE-RSA-AES128-CCM"

	)

1023 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_CCM
 "DHE-RSA-AES256-CCM"

	)

1025 
	#TLS1_TXT_RSA_WITH_AES_128_CCM_8
 "AES128-CCM8"

	)

1026 
	#TLS1_TXT_RSA_WITH_AES_256_CCM_8
 "AES256-CCM8"

	)

1027 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_CCM_8
 "DHE-RSA-AES128-CCM8"

	)

1028 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_CCM_8
 "DHE-RSA-AES256-CCM8"

	)

1030 
	#TLS1_TXT_PSK_WITH_AES_128_CCM
 "PSK-AES128-CCM"

	)

1031 
	#TLS1_TXT_PSK_WITH_AES_256_CCM
 "PSK-AES256-CCM"

	)

1032 
	#TLS1_TXT_DHE_PSK_WITH_AES_128_CCM
 "DHE-PSK-AES128-CCM"

	)

1033 
	#TLS1_TXT_DHE_PSK_WITH_AES_256_CCM
 "DHE-PSK-AES256-CCM"

	)

1035 
	#TLS1_TXT_PSK_WITH_AES_128_CCM_8
 "PSK-AES128-CCM8"

	)

1036 
	#TLS1_TXT_PSK_WITH_AES_256_CCM_8
 "PSK-AES256-CCM8"

	)

1037 
	#TLS1_TXT_DHE_PSK_WITH_AES_128_CCM_8
 "DHE-PSK-AES128-CCM8"

	)

1038 
	#TLS1_TXT_DHE_PSK_WITH_AES_256_CCM_8
 "DHE-PSK-AES256-CCM8"

	)

1041 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM
 "ECDHE-ECDSA-AES128-CCM"

	)

1042 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM
 "ECDHE-ECDSA-AES256-CCM"

	)

1043 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM_8
 "ECDHE-ECDSA-AES128-CCM8"

	)

1044 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM_8
 "ECDHE-ECDSA-AES256-CCM8"

	)

1047 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256
 "ECDHE-ECDSA-AES128-SHA256"

	)

1048 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384
 "ECDHE-ECDSA-AES256-SHA384"

	)

1049 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256
 "ECDH-ECDSA-AES128-SHA256"

	)

1050 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384
 "ECDH-ECDSA-AES256-SHA384"

	)

1051 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256
 "ECDHE-RSA-AES128-SHA256"

	)

1052 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384
 "ECDHE-RSA-AES256-SHA384"

	)

1053 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256
 "ECDH-RSA-AES128-SHA256"

	)

1054 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384
 "ECDH-RSA-AES256-SHA384"

	)

1057 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDHE-ECDSA-AES128-GCM-SHA256"

	)

1058 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDHE-ECDSA-AES256-GCM-SHA384"

	)

1059 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDH-ECDSA-AES128-GCM-SHA256"

	)

1060 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDH-ECDSA-AES256-GCM-SHA384"

	)

1061 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 "ECDHE-RSA-AES128-GCM-SHA256"

	)

1062 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 "ECDHE-RSA-AES256-GCM-SHA384"

	)

1063 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256
 "ECDH-RSA-AES128-GCM-SHA256"

	)

1064 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384
 "ECDH-RSA-AES256-GCM-SHA384"

	)

1067 
	#TLS1_TXT_PSK_WITH_AES_128_GCM_SHA256
 "PSK-AES128-GCM-SHA256"

	)

1068 
	#TLS1_TXT_PSK_WITH_AES_256_GCM_SHA384
 "PSK-AES256-GCM-SHA384"

	)

1071 
	#TLS1_TXT_ECDHE_PSK_WITH_RC4_128_SHA
 "ECDHE-PSK-RC4-SHA"

	)

1072 
	#TLS1_TXT_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA
 "ECDHE-PSK-3DES-EDE-CBC-SHA"

	)

1073 
	#TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA
 "ECDHE-PSK-AES128-CBC-SHA"

	)

1074 
	#TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA
 "ECDHE-PSK-AES256-CBC-SHA"

	)

1076 
	#TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA256
 "ECDHE-PSK-AES128-CBC-SHA256"

	)

1077 
	#TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA384
 "ECDHE-PSK-AES256-CBC-SHA384"

	)

1079 
	#TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA
 "ECDHE-PSK-NULL-SHA"

	)

1080 
	#TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA256
 "ECDHE-PSK-NULL-SHA256"

	)

1081 
	#TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA384
 "ECDHE-PSK-NULL-SHA384"

	)

1084 
	#TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 "ECDHE-ECDSA-CAMELLIA128-SHA256"

	)

1085 
	#TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 "ECDHE-ECDSA-CAMELLIA256-SHA384"

	)

1086 
	#TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 "ECDH-ECDSA-CAMELLIA128-SHA256"

	)

1087 
	#TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 "ECDH-ECDSA-CAMELLIA256-SHA384"

	)

1088 
	#TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "ECDHE-RSA-CAMELLIA128-SHA256"

	)

1089 
	#TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384
 "ECDHE-RSA-CAMELLIA256-SHA384"

	)

1090 
	#TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "ECDH-RSA-CAMELLIA128-SHA256"

	)

1091 
	#TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384
 "ECDH-RSA-CAMELLIA256-SHA384"

	)

1094 
	#TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305
 "ECDHE-RSA-CHACHA20-POLY1305"

	)

1095 
	#TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
 "ECDHE-ECDSA-CHACHA20-POLY1305"

	)

1096 
	#TLS1_TXT_DHE_RSA_WITH_CHACHA20_POLY1305
 "DHE-RSA-CHACHA20-POLY1305"

	)

1097 
	#TLS1_TXT_PSK_WITH_CHACHA20_POLY1305
 "PSK-CHACHA20-POLY1305"

	)

1098 
	#TLS1_TXT_ECDHE_PSK_WITH_CHACHA20_POLY1305
 "ECDHE-PSK-CHACHA20-POLY1305"

	)

1099 
	#TLS1_TXT_DHE_PSK_WITH_CHACHA20_POLY1305
 "DHE-PSK-CHACHA20-POLY1305"

	)

1100 
	#TLS1_TXT_RSA_PSK_WITH_CHACHA20_POLY1305
 "RSA-PSK-CHACHA20-POLY1305"

	)

1103 
	#TLS1_TXT_RSA_WITH_ARIA_128_GCM_SHA256
 "ARIA128-GCM-SHA256"

	)

1104 
	#TLS1_TXT_RSA_WITH_ARIA_256_GCM_SHA384
 "ARIA256-GCM-SHA384"

	)

1105 
	#TLS1_TXT_DHE_RSA_WITH_ARIA_128_GCM_SHA256
 "DHE-RSA-ARIA128-GCM-SHA256"

	)

1106 
	#TLS1_TXT_DHE_RSA_WITH_ARIA_256_GCM_SHA384
 "DHE-RSA-ARIA256-GCM-SHA384"

	)

1107 
	#TLS1_TXT_DH_RSA_WITH_ARIA_128_GCM_SHA256
 "DH-RSA-ARIA128-GCM-SHA256"

	)

1108 
	#TLS1_TXT_DH_RSA_WITH_ARIA_256_GCM_SHA384
 "DH-RSA-ARIA256-GCM-SHA384"

	)

1109 
	#TLS1_TXT_DHE_DSS_WITH_ARIA_128_GCM_SHA256
 "DHE-DSS-ARIA128-GCM-SHA256"

	)

1110 
	#TLS1_TXT_DHE_DSS_WITH_ARIA_256_GCM_SHA384
 "DHE-DSS-ARIA256-GCM-SHA384"

	)

1111 
	#TLS1_TXT_DH_DSS_WITH_ARIA_128_GCM_SHA256
 "DH-DSS-ARIA128-GCM-SHA256"

	)

1112 
	#TLS1_TXT_DH_DSS_WITH_ARIA_256_GCM_SHA384
 "DH-DSS-ARIA256-GCM-SHA384"

	)

1113 
	#TLS1_TXT_DH_™⁄_WITH_ARIA_128_GCM_SHA256
 "ADH-ARIA128-GCM-SHA256"

	)

1114 
	#TLS1_TXT_DH_™⁄_WITH_ARIA_256_GCM_SHA384
 "ADH-ARIA256-GCM-SHA384"

	)

1115 
	#TLS1_TXT_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256
 "ECDHE-ECDSA-ARIA128-GCM-SHA256"

	)

1116 
	#TLS1_TXT_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384
 "ECDHE-ECDSA-ARIA256-GCM-SHA384"

	)

1117 
	#TLS1_TXT_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256
 "ECDH-ECDSA-ARIA128-GCM-SHA256"

	)

1118 
	#TLS1_TXT_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384
 "ECDH-ECDSA-ARIA256-GCM-SHA384"

	)

1119 
	#TLS1_TXT_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256
 "ECDHE-ARIA128-GCM-SHA256"

	)

1120 
	#TLS1_TXT_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384
 "ECDHE-ARIA256-GCM-SHA384"

	)

1121 
	#TLS1_TXT_ECDH_RSA_WITH_ARIA_128_GCM_SHA256
 "ECDH-ARIA128-GCM-SHA256"

	)

1122 
	#TLS1_TXT_ECDH_RSA_WITH_ARIA_256_GCM_SHA384
 "ECDH-ARIA256-GCM-SHA384"

	)

1123 
	#TLS1_TXT_PSK_WITH_ARIA_128_GCM_SHA256
 "PSK-ARIA128-GCM-SHA256"

	)

1124 
	#TLS1_TXT_PSK_WITH_ARIA_256_GCM_SHA384
 "PSK-ARIA256-GCM-SHA384"

	)

1125 
	#TLS1_TXT_DHE_PSK_WITH_ARIA_128_GCM_SHA256
 "DHE-PSK-ARIA128-GCM-SHA256"

	)

1126 
	#TLS1_TXT_DHE_PSK_WITH_ARIA_256_GCM_SHA384
 "DHE-PSK-ARIA256-GCM-SHA384"

	)

1127 
	#TLS1_TXT_RSA_PSK_WITH_ARIA_128_GCM_SHA256
 "RSA-PSK-ARIA128-GCM-SHA256"

	)

1128 
	#TLS1_TXT_RSA_PSK_WITH_ARIA_256_GCM_SHA384
 "RSA-PSK-ARIA256-GCM-SHA384"

	)

1130 
	#TLS_CT_RSA_SIGN
 1

	)

1131 
	#TLS_CT_DSS_SIGN
 2

	)

1132 
	#TLS_CT_RSA_FIXED_DH
 3

	)

1133 
	#TLS_CT_DSS_FIXED_DH
 4

	)

1134 
	#TLS_CT_ECDSA_SIGN
 64

	)

1135 
	#TLS_CT_RSA_FIXED_ECDH
 65

	)

1136 
	#TLS_CT_ECDSA_FIXED_ECDH
 66

	)

1137 
	#TLS_CT_GOST01_SIGN
 22

	)

1138 
	#TLS_CT_GOST12_SIGN
 238

	)

1139 
	#TLS_CT_GOST12_512_SIGN
 239

	)

1145 
	#TLS_CT_NUMBER
 10

	)

1147 #i‡
deföed
(
SSL3_CT_NUMBER
)

1148 #i‡
TLS_CT_NUMBER
 !
SSL3_CT_NUMBER


1153 
	#TLS1_FINISH_MAC_LENGTH
 12

	)

1155 
	#TLS_MD_MAX_CONST_SIZE
 22

	)

1156 
	#TLS_MD_CLIENT_FINISH_CONST
 "˛õ¡ föished"

	)

1157 
	#TLS_MD_CLIENT_FINISH_CONST_SIZE
 15

	)

1158 
	#TLS_MD_SERVER_FINISH_CONST
 "£rvî föished"

	)

1159 
	#TLS_MD_SERVER_FINISH_CONST_SIZE
 15

	)

1160 
	#TLS_MD_KEY_EXPANSION_CONST
 "keyÉx∑nsi⁄"

	)

1161 
	#TLS_MD_KEY_EXPANSION_CONST_SIZE
 13

	)

1162 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "˛õ¡ wrôêkey"

	)

1163 
	#TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE
 16

	)

1164 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

1165 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

1166 
	#TLS_MD_IV_BLOCK_CONST
 "IV block"

	)

1167 
	#TLS_MD_IV_BLOCK_CONST_SIZE
 8

	)

1168 
	#TLS_MD_MASTER_SECRET_CONST
 "ma°î se¸ë"

	)

1169 
	#TLS_MD_MASTER_SECRET_CONST_SIZE
 13

	)

1170 
	#TLS_MD_EXTENDED_MASTER_SECRET_CONST
 "exãnded ma°î se¸ë"

	)

1171 
	#TLS_MD_EXTENDED_MASTER_SECRET_CONST_SIZE
 22

	)

1173 #ifde‡
CHARSET_EBCDIC


1174 #unde‡
TLS_MD_CLIENT_FINISH_CONST


1178 
	#TLS_MD_CLIENT_FINISH_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

1180 #unde‡
TLS_MD_SERVER_FINISH_CONST


1184 
	#TLS_MD_SERVER_FINISH_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

1186 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


1190 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

1192 #unde‡
TLS_MD_KEY_EXPANSION_CONST


1196 
	#TLS_MD_KEY_EXPANSION_CONST
 "\x6b\x65\x79\x20\x65\x78\x70\x61\x6e\x73\x69\x6f\x6e"

	)

1198 #unde‡
TLS_MD_CLIENT_WRITE_KEY_CONST


1202 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

1204 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


1208 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

1210 #unde‡
TLS_MD_IV_BLOCK_CONST


1214 
	#TLS_MD_IV_BLOCK_CONST
 "\x49\x56\x20\x62\x6c\x6f\x63\x6b"

	)

1216 #unde‡
TLS_MD_MASTER_SECRET_CONST


1220 
	#TLS_MD_MASTER_SECRET_CONST
 "\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

1221 #unde‡
TLS_MD_EXTENDED_MASTER_SECRET_CONST


1225 
	#TLS_MD_EXTENDED_MASTER_SECRET_CONST
 "\x65\x78\x74\x65\x6e\x64\x65\x64\x20\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

1229 
	sés_£ssi⁄_tickë_ext_°
 {

1230 
Àngth
;

1231 *
d©a
;

1234 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ui.h

10 #i‚de‡
HEADER_UI_H


11 
	#HEADER_UI_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

16 
	~<›ís¶/¸y±o.h
>

18 
	~<›ís¶/ß„°ack.h
>

19 
	~<›ís¶/≥m.h
>

20 
	~<›ís¶/os¶_typ.h
>

21 
	~<›ís¶/uõº.h
>

24 #i‡
OPENSSL_API_COMPAT
 < 0x10200000L

25 #ifde‡
OPENSSL_NO_UI_CONSOLE


26 
	#OPENSSL_NO_UI


	)

30 #ifde‡ 
__˝lu•lus


42 
UI
 *
UI_√w
();

43 
UI
 *
UI_√w_mëhod
(c⁄° 
UI_METHOD
 *
mëhod
);

44 
UI_‰ì
(
UI
 *
ui
);

89 
UI_add_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

90 *
ªsu…_buf
, 
mösize
, 
maxsize
);

91 
UI_dup_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

92 *
ªsu…_buf
, 
mösize
, 
maxsize
);

93 
UI_add_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

94 *
ªsu…_buf
, 
mösize
, 
maxsize
,

95 c⁄° *
ã°_buf
);

96 
UI_dup_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

97 *
ªsu…_buf
, 
mösize
, 
maxsize
,

98 c⁄° *
ã°_buf
);

99 
UI_add_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

100 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

101 
Êags
, *
ªsu…_buf
);

102 
UI_dup_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

103 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

104 
Êags
, *
ªsu…_buf
);

105 
UI_add_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

106 
UI_dup_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

107 
UI_add_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

108 
UI_dup_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

112 
	#UI_INPUT_FLAG_ECHO
 0x01

	)

120 
	#UI_INPUT_FLAG_DEFAULT_PWD
 0x02

	)

132 
	#UI_INPUT_FLAG_USER_BASE
 16

	)

152 *
UI_c⁄°ru˘_¥om±
(
UI
 *
ui_mëhod
,

153 c⁄° *
obje˘_desc
, c⁄° *
obje˘_«me
);

166 *
UI_add_u£r_d©a
(
UI
 *
ui
, *
u£r_d©a
);

172 
UI_dup_u£r_d©a
(
UI
 *
ui
, *
u£r_d©a
);

174 *
UI_gë0_u£r_d©a
(
UI
 *
ui
);

177 c⁄° *
UI_gë0_ªsu…
(
UI
 *
ui
, 
i
);

178 
UI_gë_ªsu…_Àngth
(
UI
 *
ui
, 
i
);

181 
UI_¥o˚ss
(
UI
 *
ui
);

188 
UI_˘æ
(
UI
 *
ui
, 
cmd
, 
i
, *
p
, (*
f
) ());

196 
	#UI_CTRL_PRINT_ERRORS
 1

	)

202 
	#UI_CTRL_IS_REDOABLE
 2

	)

205 
	#UI_£t_≠p_d©a
(
s
,
¨g
Ë
	`UI_£t_ex_d©a
(s,0,¨g)

	)

206 
	#UI_gë_≠p_d©a
(
s
Ë
	`UI_gë_ex_d©a
(s,0)

	)

208 
	#UI_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

209 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_UI
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

210 
UI_£t_ex_d©a
(
UI
 *
r
, 
idx
, *
¨g
);

211 *
UI_gë_ex_d©a
(
UI
 *
r
, 
idx
);

214 
UI_£t_deÁu…_mëhod
(c⁄° 
UI_METHOD
 *
mëh
);

215 c⁄° 
UI_METHOD
 *
UI_gë_deÁu…_mëhod
();

216 c⁄° 
UI_METHOD
 *
UI_gë_mëhod
(
UI
 *
ui
);

217 c⁄° 
UI_METHOD
 *
UI_£t_mëhod
(
UI
 *
ui
, c⁄° UI_METHOD *
mëh
);

219 #i‚de‡
OPENSSL_NO_UI_CONSOLE


222 
UI_METHOD
 *
UI_O≥nSSL
();

230 c⁄° 
UI_METHOD
 *
UI_nuŒ
();

279 
ui_°rög_°
 
	tUI_STRING
;

280 
DEFINE_STACK_OF
(
UI_STRING
)

286 
	eUI_°rög_ty≥s
 {

287 
UIT_NONE
 = 0,

288 
UIT_PROMPT
,

289 
UIT_VERIFY
,

290 
UIT_BOOLEAN
,

291 
UIT_INFO
,

292 
UIT_ERROR


296 
UI_METHOD
 *
UI_¸óã_mëhod
(c⁄° *
«me
);

297 
UI_de°roy_mëhod
(
UI_METHOD
 *
ui_mëhod
);

298 
UI_mëhod_£t_›íî
(
UI_METHOD
 *
mëhod
, (*
›íî
Ë(
UI
 *
ui
));

299 
UI_mëhod_£t_wrôî
(
UI_METHOD
 *
mëhod
,

300 (*
wrôî
Ë(
UI
 *
ui
, 
UI_STRING
 *
uis
));

301 
UI_mëhod_£t_Êushî
(
UI_METHOD
 *
mëhod
, (*
Êushî
Ë(
UI
 *
ui
));

302 
UI_mëhod_£t_ªadî
(
UI_METHOD
 *
mëhod
,

303 (*
ªadî
Ë(
UI
 *
ui
, 
UI_STRING
 *
uis
));

304 
UI_mëhod_£t_˛o£r
(
UI_METHOD
 *
mëhod
, (*
˛o£r
Ë(
UI
 *
ui
));

305 
UI_mëhod_£t_d©a_du∂iˇt‹
(
UI_METHOD
 *
mëhod
,

306 *(*
du∂iˇt‹
Ë(
UI
 *
ui
, *
ui_d©a
),

307 (*
de°ru˘‹
)(
UI
 *
ui
, *
ui_d©a
));

308 
UI_mëhod_£t_¥om±_c⁄°ru˘‹
(
UI_METHOD
 *
mëhod
,

309 *(*
¥om±_c⁄°ru˘‹
Ë(
UI
 *
ui
,

311 *
obje˘_desc
,

313 *
obje˘_«me
));

314 
UI_mëhod_£t_ex_d©a
(
UI_METHOD
 *
mëhod
, 
idx
, *
d©a
);

315 (*
UI_mëhod_gë_›íî
(c⁄° 
UI_METHOD
 *
mëhod
)Ë(
UI
 *);

316 (*
UI_mëhod_gë_wrôî
(c⁄° 
UI_METHOD
 *
mëhod
)Ë(
UI
 *, 
UI_STRING
 *);

317 (*
UI_mëhod_gë_Êushî
(c⁄° 
UI_METHOD
 *
mëhod
)Ë(
UI
 *);

318 (*
UI_mëhod_gë_ªadî
(c⁄° 
UI_METHOD
 *
mëhod
)Ë(
UI
 *, 
UI_STRING
 *);

319 (*
UI_mëhod_gë_˛o£r
(c⁄° 
UI_METHOD
 *
mëhod
)Ë(
UI
 *);

320 *(*
UI_mëhod_gë_¥om±_c⁄°ru˘‹
(c⁄° 
UI_METHOD
 *
mëhod
))

321 (
UI
 *, const *, const *);

322 *(*
UI_mëhod_gë_d©a_du∂iˇt‹
(c⁄° 
UI_METHOD
 *
mëhod
)Ë(
UI
 *, *);

323 (*
UI_mëhod_gë_d©a_de°ru˘‹
(c⁄° 
UI_METHOD
 *
mëhod
)Ë(
UI
 *, *);

324 c⁄° *
UI_mëhod_gë_ex_d©a
(c⁄° 
UI_METHOD
 *
mëhod
, 
idx
);

332 
UI_°rög_ty≥s
 
UI_gë_°rög_ty≥
(
UI_STRING
 *
uis
);

334 
UI_gë_öput_Êags
(
UI_STRING
 *
uis
);

336 c⁄° *
UI_gë0_ouçut_°rög
(
UI_STRING
 *
uis
);

341 c⁄° *
UI_gë0_a˘i⁄_°rög
(
UI_STRING
 *
uis
);

343 c⁄° *
UI_gë0_ªsu…_°rög
(
UI_STRING
 *
uis
);

344 
UI_gë_ªsu…_°rög_Àngth
(
UI_STRING
 *
uis
);

348 c⁄° *
UI_gë0_ã°_°rög
(
UI_STRING
 *
uis
);

350 
UI_gë_ªsu…_mösize
(
UI_STRING
 *
uis
);

352 
UI_gë_ªsu…_maxsize
(
UI_STRING
 *
uis
);

354 
UI_£t_ªsu…
(
UI
 *
ui
, 
UI_STRING
 *
uis
, c⁄° *
ªsu…
);

355 
UI_£t_ªsu…_ex
(
UI
 *
ui
, 
UI_STRING
 *
uis
, c⁄° *
ªsu…
, 
Àn
);

358 
UI_UTIL_ªad_pw_°rög
(*
buf
, 
Àngth
, c⁄° *
¥om±
,

359 
vîify
);

360 
UI_UTIL_ªad_pw
(*
buf
, *
buff
, 
size
, c⁄° *
¥om±
,

361 
vîify
);

362 
UI_METHOD
 *
UI_UTIL_wøp_ªad_≥m_ˇŒback
(
≥m_∑ssw‹d_cb
 *
cb
, 
rwÊag
);

365 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509v3.h

10 #i‚de‡
HEADER_X509V3_H


11 
	#HEADER_X509V3_H


	)

13 
	~<›ís¶/bio.h
>

14 
	~<›ís¶/x509.h
>

15 
	~<›ís¶/c⁄f.h
>

16 
	~<›ís¶/x509v3îr.h
>

18 #ifde‡
__˝lu•lus


23 
v3_ext_mëhod
;

24 
v3_ext_˘x
;

28 *(*
	tX509V3_EXT_NEW
)();

29 (*
X509V3_EXT_FREE
) (*);

30 *(*
	tX509V3_EXT_D2I
)(*, const **, );

31 (*
X509V3_EXT_I2D
) (*, **);

32 
STACK_OF
(
	tCONF_VALUE
) *

33 (*
	tX509V3_EXT_I2V
Ë(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

34 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	texéi°
);

35 *(*
	tX509V3_EXT_V2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

36 
	tv3_ext_˘x
 *
	t˘x
,

37 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	tvÆues
);

38 *(*
	tX509V3_EXT_I2S
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

39 *
	text
);

40 *(*
	tX509V3_EXT_S2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

41 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

42 (*
X509V3_EXT_I2R
Ë(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

43 
	tBIO
 *
	tout
, 
	tödít
);

44 *(*
	tX509V3_EXT_R2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

45 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

49 
	sv3_ext_mëhod
 {

50 
ext_nid
;

51 
ext_Êags
;

53 
ASN1_ITEM_EXP
 *
ô
;

55 
X509V3_EXT_NEW
 
ext_√w
;

56 
X509V3_EXT_FREE
 
ext_‰ì
;

57 
X509V3_EXT_D2I
 
d2i
;

58 
X509V3_EXT_I2D
 
i2d
;

60 
X509V3_EXT_I2S
 
i2s
;

61 
X509V3_EXT_S2I
 
s2i
;

63 
X509V3_EXT_I2V
 
i2v
;

64 
X509V3_EXT_V2I
 
v2i
;

66 
X509V3_EXT_I2R
 
i2r
;

67 
X509V3_EXT_R2I
 
r2i
;

68 *
u§_d©a
;

71 
	sX509V3_CONF_METHOD_°
 {

72 *(*
gë_°rög
Ë(*
db
, c⁄° *
£˘i⁄
, c⁄° *
vÆue
);

73 
STACK_OF
(
CONF_VALUE
Ë*(*
gë_£˘i⁄
Ë(*
db
, c⁄° *
£˘i⁄
);

74 (*
‰ì_°rög
Ë(*
db
, *
°rög
);

75 (*
‰ì_£˘i⁄
Ë(*
db
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

76 } 
	tX509V3_CONF_METHOD
;

79 
	sv3_ext_˘x
 {

80 
	#CTX_TEST
 0x1

	)

81 
	#X509V3_CTX_REPLACE
 0x2

	)

82 
Êags
;

83 
X509
 *
issuî_˚π
;

84 
X509
 *
subje˘_˚π
;

85 
X509_REQ
 *
subje˘_ªq
;

86 
X509_CRL
 *
¸l
;

87 
X509V3_CONF_METHOD
 *
db_mëh
;

88 *
db
;

92 
v3_ext_mëhod
 
	tX509V3_EXT_METHOD
;

94 
DEFINE_STACK_OF
(
X509V3_EXT_METHOD
)

97 
	#X509V3_EXT_DYNAMIC
 0x1

	)

98 
	#X509V3_EXT_CTX_DEP
 0x2

	)

99 
	#X509V3_EXT_MULTILINE
 0x4

	)

101 
BIT_STRING_BITNAME
 
	tENUMERATED_NAMES
;

103 
	sBASIC_CONSTRAINTS_°
 {

104 
ˇ
;

105 
ASN1_INTEGER
 *
∑thÀn
;

106 } 
	tBASIC_CONSTRAINTS
;

108 
	sPKEY_USAGE_PERIOD_°
 {

109 
ASN1_GENERALIZEDTIME
 *
nŸBef‹e
;

110 
ASN1_GENERALIZEDTIME
 *
nŸA·î
;

111 } 
	tPKEY_USAGE_PERIOD
;

113 
	sŸhîName_°
 {

114 
ASN1_OBJECT
 *
ty≥_id
;

115 
ASN1_TYPE
 *
vÆue
;

116 } 
	tOTHERNAME
;

118 
	sEDIP¨tyName_°
 {

119 
ASN1_STRING
 *
«meAssig√r
;

120 
ASN1_STRING
 *
∑πyName
;

121 } 
	tEDIPARTYNAME
;

123 
	sGENERAL_NAME_°
 {

124 
	#GEN_OTHERNAME
 0

	)

125 
	#GEN_EMAIL
 1

	)

126 
	#GEN_DNS
 2

	)

127 
	#GEN_X400
 3

	)

128 
	#GEN_DIRNAME
 4

	)

129 
	#GEN_EDIPARTY
 5

	)

130 
	#GEN_URI
 6

	)

131 
	#GEN_IPADD
 7

	)

132 
	#GEN_RID
 8

	)

133 
ty≥
;

135 *
±r
;

136 
OTHERNAME
 *
ŸhîName
;

137 
ASN1_IA5STRING
 *
rfc822Name
;

138 
ASN1_IA5STRING
 *
dNSName
;

139 
ASN1_TYPE
 *
x400Addªss
;

140 
X509_NAME
 *
dúe˘‹yName
;

141 
EDIPARTYNAME
 *
ediP¨tyName
;

142 
ASN1_IA5STRING
 *
unif‹mResour˚Idítifõr
;

143 
ASN1_OCTET_STRING
 *
iPAddªss
;

144 
ASN1_OBJECT
 *
ªgi°îedID
;

146 
ASN1_OCTET_STRING
 *
ù
;

147 
X509_NAME
 *
dún
;

148 
ASN1_IA5STRING
 *
ü5
;

150 
ASN1_OBJECT
 *
rid
;

151 
ASN1_TYPE
 *
Ÿhî
;

152 } 
d
;

153 } 
	tGENERAL_NAME
;

155 
	sACCESS_DESCRIPTION_°
 {

156 
ASN1_OBJECT
 *
mëhod
;

157 
GENERAL_NAME
 *
loˇti⁄
;

158 } 
	tACCESS_DESCRIPTION
;

160 
STACK_OF
(
	tACCESS_DESCRIPTION
Ë
	tAUTHORITY_INFO_ACCESS
;

162 
STACK_OF
(
	tASN1_OBJECT
Ë
	tEXTENDED_KEY_USAGE
;

164 
STACK_OF
(
	tASN1_INTEGER
Ë
	tTLS_FEATURE
;

166 
DEFINE_STACK_OF
(
GENERAL_NAME
)

167 
STACK_OF
(
	tGENERAL_NAME
Ë
	tGENERAL_NAMES
;

168 
DEFINE_STACK_OF
(
GENERAL_NAMES
)

170 
DEFINE_STACK_OF
(
ACCESS_DESCRIPTION
)

172 
	sDIST_POINT_NAME_°
 {

173 
ty≥
;

175 
GENERAL_NAMES
 *
fuŒ«me
;

176 
STACK_OF
(
X509_NAME_ENTRY
Ë*
ªœtivíame
;

177 } 
«me
;

179 
X509_NAME
 *
d≤ame
;

180 } 
	tDIST_POINT_NAME
;

182 
	#CRLDP_ALL_REASONS
 0x807f

	)

184 
	#CRL_REASON_NONE
 -1

	)

185 
	#CRL_REASON_UNSPECIFIED
 0

	)

186 
	#CRL_REASON_KEY_COMPROMISE
 1

	)

187 
	#CRL_REASON_CA_COMPROMISE
 2

	)

188 
	#CRL_REASON_AFFILIATION_CHANGED
 3

	)

189 
	#CRL_REASON_SUPERSEDED
 4

	)

190 
	#CRL_REASON_CESSATION_OF_OPERATION
 5

	)

191 
	#CRL_REASON_CERTIFICATE_HOLD
 6

	)

192 
	#CRL_REASON_REMOVE_FROM_CRL
 8

	)

193 
	#CRL_REASON_PRIVILEGE_WITHDRAWN
 9

	)

194 
	#CRL_REASON_AA_COMPROMISE
 10

	)

196 
	sDIST_POINT_°
 {

197 
DIST_POINT_NAME
 *
di°poöt
;

198 
ASN1_BIT_STRING
 *
ªas⁄s
;

199 
GENERAL_NAMES
 *
CRLissuî
;

200 
dp_ªas⁄s
;

203 
STACK_OF
(
	tDIST_POINT
Ë
	tCRL_DIST_POINTS
;

205 
DEFINE_STACK_OF
(
DIST_POINT
)

207 
	sAUTHORITY_KEYID_°
 {

208 
ASN1_OCTET_STRING
 *
keyid
;

209 
GENERAL_NAMES
 *
issuî
;

210 
ASN1_INTEGER
 *
£rül
;

215 
	sSXNET_ID_°
 {

216 
ASN1_INTEGER
 *
z⁄e
;

217 
ASN1_OCTET_STRING
 *
u£r
;

218 } 
	tSXNETID
;

220 
DEFINE_STACK_OF
(
SXNETID
)

222 
	sSXNET_°
 {

223 
ASN1_INTEGER
 *
vîsi⁄
;

224 
STACK_OF
(
SXNETID
Ë*
ids
;

225 } 
	tSXNET
;

227 
	sNOTICEREF_°
 {

228 
ASN1_STRING
 *
‹g™iz©i⁄
;

229 
STACK_OF
(
ASN1_INTEGER
Ë*
nŸi˚nos
;

230 } 
	tNOTICEREF
;

232 
	sUSERNOTICE_°
 {

233 
NOTICEREF
 *
nŸi˚ªf
;

234 
ASN1_STRING
 *
ex±ext
;

235 } 
	tUSERNOTICE
;

237 
	sPOLICYQUALINFO_°
 {

238 
ASN1_OBJECT
 *
pquÆid
;

240 
ASN1_IA5STRING
 *
˝suri
;

241 
USERNOTICE
 *
u£∫Ÿi˚
;

242 
ASN1_TYPE
 *
Ÿhî
;

243 } 
d
;

244 } 
	tPOLICYQUALINFO
;

246 
DEFINE_STACK_OF
(
POLICYQUALINFO
)

248 
	sPOLICYINFO_°
 {

249 
ASN1_OBJECT
 *
pﬁicyid
;

250 
STACK_OF
(
POLICYQUALINFO
Ë*
quÆifõrs
;

251 } 
	tPOLICYINFO
;

253 
STACK_OF
(
	tPOLICYINFO
Ë
	tCERTIFICATEPOLICIES
;

255 
DEFINE_STACK_OF
(
POLICYINFO
)

257 
	sPOLICY_MAPPING_°
 {

258 
ASN1_OBJECT
 *
issuîDomaöPﬁicy
;

259 
ASN1_OBJECT
 *
subje˘DomaöPﬁicy
;

260 } 
	tPOLICY_MAPPING
;

262 
DEFINE_STACK_OF
(
POLICY_MAPPING
)

264 
STACK_OF
(
	tPOLICY_MAPPING
Ë
	tPOLICY_MAPPINGS
;

266 
	sGENERAL_SUBTREE_°
 {

267 
GENERAL_NAME
 *
ba£
;

268 
ASN1_INTEGER
 *
möimum
;

269 
ASN1_INTEGER
 *
maximum
;

270 } 
	tGENERAL_SUBTREE
;

272 
DEFINE_STACK_OF
(
GENERAL_SUBTREE
)

274 
	sNAME_CONSTRAINTS_°
 {

275 
STACK_OF
(
GENERAL_SUBTREE
Ë*
≥rmôãdSubåìs
;

276 
STACK_OF
(
GENERAL_SUBTREE
Ë*
ex˛udedSubåìs
;

279 
	sPOLICY_CONSTRAINTS_°
 {

280 
ASN1_INTEGER
 *
ªquúeEx∂icôPﬁicy
;

281 
ASN1_INTEGER
 *
öhibôPﬁicyM≠pög
;

282 } 
	tPOLICY_CONSTRAINTS
;

285 
	sPROXY_POLICY_°
 {

286 
ASN1_OBJECT
 *
pﬁicyL™guage
;

287 
ASN1_OCTET_STRING
 *
pﬁicy
;

288 } 
	tPROXY_POLICY
;

290 
	sPROXY_CERT_INFO_EXTENSION_°
 {

291 
ASN1_INTEGER
 *
pcP©hLígthC⁄°øöt
;

292 
PROXY_POLICY
 *
¥oxyPﬁicy
;

293 } 
	tPROXY_CERT_INFO_EXTENSION
;

295 
DECLARE_ASN1_FUNCTIONS
(
PROXY_POLICY
)

296 
DECLARE_ASN1_FUNCTIONS
(
PROXY_CERT_INFO_EXTENSION
)

298 
	sISSUING_DIST_POINT_°
 {

299 
DIST_POINT_NAME
 *
di°poöt
;

300 
⁄lyu£r
;

301 
⁄lyCA
;

302 
ASN1_BIT_STRING
 *
⁄lysomîós⁄s
;

303 
ödúe˘CRL
;

304 
⁄ly©å
;

309 
	#IDP_PRESENT
 0x1

	)

311 
	#IDP_INVALID
 0x2

	)

313 
	#IDP_ONLYUSER
 0x4

	)

315 
	#IDP_ONLYCA
 0x8

	)

317 
	#IDP_ONLYATTR
 0x10

	)

319 
	#IDP_INDIRECT
 0x20

	)

321 
	#IDP_REASONS
 0x40

	)

323 
	#X509V3_c⁄f_îr
(
vÆ
Ë
	`ERR_add_îr‹_d©a
(6, \

324 "£˘i⁄:", (
vÆ
)->
£˘i⁄
, \

325 ",«me:", (
vÆ
)->
«me
, ",vÆue:", (vÆ)->
vÆue
)

	)

327 
	#X509V3_£t_˘x_ã°
(
˘x
) \

328 
	`X509V3_£t_˘x
(
˘x
, 
NULL
, NULL, NULL, NULL, 
CTX_TEST
)

	)

329 
	#X509V3_£t_˘x_nodb
(
˘x
Ë(˘x)->
db
 = 
NULL
;

	)

331 
	#EXT_BITSTRING
(
nid
, 
èbÀ
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_BIT_STRING
), \

334 (
X509V3_EXT_I2V
)
i2v_ASN1_BIT_STRING
, \

335 (
X509V3_EXT_V2I
)
v2i_ASN1_BIT_STRING
, \

336 
NULL
, NULL, \

337 
èbÀ
}

	)

339 
	#EXT_IA5STRING
(
nid
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_IA5STRING
), \

341 (
X509V3_EXT_I2S
)
i2s_ASN1_IA5STRING
, \

342 (
X509V3_EXT_S2I
)
s2i_ASN1_IA5STRING
, \

344 
NULL
}

	)

346 
	#EXT_END
 { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	)

350 
	#EXFLAG_BCONS
 0x1

	)

351 
	#EXFLAG_KUSAGE
 0x2

	)

352 
	#EXFLAG_XKUSAGE
 0x4

	)

353 
	#EXFLAG_NSCERT
 0x8

	)

355 
	#EXFLAG_CA
 0x10

	)

357 
	#EXFLAG_SI
 0x20

	)

358 
	#EXFLAG_V1
 0x40

	)

359 
	#EXFLAG_INVALID
 0x80

	)

361 
	#EXFLAG_SET
 0x100

	)

362 
	#EXFLAG_CRITICAL
 0x200

	)

363 
	#EXFLAG_PROXY
 0x400

	)

365 
	#EXFLAG_INVALID_POLICY
 0x800

	)

366 
	#EXFLAG_FRESHEST
 0x1000

	)

367 
	#EXFLAG_SS
 0x2000

	)

369 
	#EXFLAG_NO_FINGERPRINT
 0x100000

	)

371 
	#KU_DIGITAL_SIGNATURE
 0x0080

	)

372 
	#KU_NON_REPUDIATION
 0x0040

	)

373 
	#KU_KEY_ENCIPHERMENT
 0x0020

	)

374 
	#KU_DATA_ENCIPHERMENT
 0x0010

	)

375 
	#KU_KEY_AGREEMENT
 0x0008

	)

376 
	#KU_KEY_CERT_SIGN
 0x0004

	)

377 
	#KU_CRL_SIGN
 0x0002

	)

378 
	#KU_ENCIPHER_ONLY
 0x0001

	)

379 
	#KU_DECIPHER_ONLY
 0x8000

	)

381 
	#NS_SSL_CLIENT
 0x80

	)

382 
	#NS_SSL_SERVER
 0x40

	)

383 
	#NS_SMIME
 0x20

	)

384 
	#NS_OBJSIGN
 0x10

	)

385 
	#NS_SSL_CA
 0x04

	)

386 
	#NS_SMIME_CA
 0x02

	)

387 
	#NS_OBJSIGN_CA
 0x01

	)

388 
	#NS_ANY_CA
 (
NS_SSL_CA
|
NS_SMIME_CA
|
NS_OBJSIGN_CA
)

	)

390 
	#XKU_SSL_SERVER
 0x1

	)

391 
	#XKU_SSL_CLIENT
 0x2

	)

392 
	#XKU_SMIME
 0x4

	)

393 
	#XKU_CODE_SIGN
 0x8

	)

394 
	#XKU_SGC
 0x10

	)

395 
	#XKU_OCSP_SIGN
 0x20

	)

396 
	#XKU_TIMESTAMP
 0x40

	)

397 
	#XKU_DVCS
 0x80

	)

398 
	#XKU_ANYEKU
 0x100

	)

400 
	#X509_PURPOSE_DYNAMIC
 0x1

	)

401 
	#X509_PURPOSE_DYNAMIC_NAME
 0x2

	)

403 
	sx509_puΩo£_°
 {

404 
puΩo£
;

405 
åu°
;

406 
Êags
;

407 (*
check_puΩo£
Ë(c⁄° 
x509_puΩo£_°
 *, c⁄° 
X509
 *, );

408 *
«me
;

409 *
¢ame
;

410 *
u§_d©a
;

411 } 
	tX509_PURPOSE
;

413 
	#X509_PURPOSE_SSL_CLIENT
 1

	)

414 
	#X509_PURPOSE_SSL_SERVER
 2

	)

415 
	#X509_PURPOSE_NS_SSL_SERVER
 3

	)

416 
	#X509_PURPOSE_SMIME_SIGN
 4

	)

417 
	#X509_PURPOSE_SMIME_ENCRYPT
 5

	)

418 
	#X509_PURPOSE_CRL_SIGN
 6

	)

419 
	#X509_PURPOSE_ANY
 7

	)

420 
	#X509_PURPOSE_OCSP_HELPER
 8

	)

421 
	#X509_PURPOSE_TIMESTAMP_SIGN
 9

	)

423 
	#X509_PURPOSE_MIN
 1

	)

424 
	#X509_PURPOSE_MAX
 9

	)

428 
	#X509V3_EXT_UNKNOWN_MASK
 (0xfL << 16)

	)

430 
	#X509V3_EXT_DEFAULT
 0

	)

432 
	#X509V3_EXT_ERROR_UNKNOWN
 (1L << 16)

	)

434 
	#X509V3_EXT_PARSE_UNKNOWN
 (2L << 16)

	)

436 
	#X509V3_EXT_DUMP_UNKNOWN
 (3L << 16)

	)

440 
	#X509V3_ADD_OP_MASK
 0xfL

	)

441 
	#X509V3_ADD_DEFAULT
 0L

	)

442 
	#X509V3_ADD_APPEND
 1L

	)

443 
	#X509V3_ADD_REPLACE
 2L

	)

444 
	#X509V3_ADD_REPLACE_EXISTING
 3L

	)

445 
	#X509V3_ADD_KEEP_EXISTING
 4L

	)

446 
	#X509V3_ADD_DELETE
 5L

	)

447 
	#X509V3_ADD_SILENT
 0x10

	)

449 
DEFINE_STACK_OF
(
X509_PURPOSE
)

451 
DECLARE_ASN1_FUNCTIONS
(
BASIC_CONSTRAINTS
)

453 
DECLARE_ASN1_FUNCTIONS
(
SXNET
)

454 
DECLARE_ASN1_FUNCTIONS
(
SXNETID
)

456 
SXNET_add_id_asc
(
SXNET
 **
psx
, c⁄° *
z⁄e
, c⁄° *
u£r
, 
u£æí
);

457 
SXNET_add_id_ul⁄g
(
SXNET
 **
psx
, 
lz⁄e
, c⁄° *
u£r
,

458 
u£æí
);

459 
SXNET_add_id_INTEGER
(
SXNET
 **
psx
, 
ASN1_INTEGER
 *
iz⁄e
, c⁄° *
u£r
,

460 
u£æí
);

462 
ASN1_OCTET_STRING
 *
SXNET_gë_id_asc
(
SXNET
 *
sx
, c⁄° *
z⁄e
);

463 
ASN1_OCTET_STRING
 *
SXNET_gë_id_ul⁄g
(
SXNET
 *
sx
, 
lz⁄e
);

464 
ASN1_OCTET_STRING
 *
SXNET_gë_id_INTEGER
(
SXNET
 *
sx
, 
ASN1_INTEGER
 *
z⁄e
);

466 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_KEYID
)

468 
DECLARE_ASN1_FUNCTIONS
(
PKEY_USAGE_PERIOD
)

470 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAME
)

471 
GENERAL_NAME
 *
GENERAL_NAME_dup
(GENERAL_NAME *
a
);

472 
GENERAL_NAME_cmp
(
GENERAL_NAME
 *
a
, GENERAL_NAME *
b
);

474 
ASN1_BIT_STRING
 *
v2i_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

475 
X509V3_CTX
 *
˘x
,

476 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

477 
STACK_OF
(
CONF_VALUE
Ë*
i2v_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

478 
ASN1_BIT_STRING
 *
bôs
,

479 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

480 *
i2s_ASN1_IA5STRING
(
X509V3_EXT_METHOD
 *
mëhod
, 
ASN1_IA5STRING
 *
ü5
);

481 
ASN1_IA5STRING
 *
s2i_ASN1_IA5STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

482 
X509V3_CTX
 *
˘x
, c⁄° *
°r
);

484 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAME
(
X509V3_EXT_METHOD
 *
mëhod
,

485 
GENERAL_NAME
 *
gí
,

486 
STACK_OF
(
CONF_VALUE
Ë*
ªt
);

487 
GENERAL_NAME_¥öt
(
BIO
 *
out
, 
GENERAL_NAME
 *
gí
);

489 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAMES
)

491 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAMES
(
X509V3_EXT_METHOD
 *
mëhod
,

492 
GENERAL_NAMES
 *
gí
,

493 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

494 
GENERAL_NAMES
 *
v2i_GENERAL_NAMES
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

495 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

497 
DECLARE_ASN1_FUNCTIONS
(
OTHERNAME
)

498 
DECLARE_ASN1_FUNCTIONS
(
EDIPARTYNAME
)

499 
OTHERNAME_cmp
(
OTHERNAME
 *
a
, OTHERNAME *
b
);

500 
GENERAL_NAME_£t0_vÆue
(
GENERAL_NAME
 *
a
, 
ty≥
, *
vÆue
);

501 *
GENERAL_NAME_gë0_vÆue
(c⁄° 
GENERAL_NAME
 *
a
, *
±y≥
);

502 
GENERAL_NAME_£t0_Ÿhî«me
(
GENERAL_NAME
 *
gí
,

503 
ASN1_OBJECT
 *
oid
, 
ASN1_TYPE
 *
vÆue
);

504 
GENERAL_NAME_gë0_ŸhîName
(c⁄° 
GENERAL_NAME
 *
gí
,

505 
ASN1_OBJECT
 **
poid
, 
ASN1_TYPE
 **
pvÆue
);

507 *
i2s_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

508 c⁄° 
ASN1_OCTET_STRING
 *
ü5
);

509 
ASN1_OCTET_STRING
 *
s2i_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

510 
X509V3_CTX
 *
˘x
, c⁄° *
°r
);

512 
DECLARE_ASN1_FUNCTIONS
(
EXTENDED_KEY_USAGE
)

513 
i2a_ACCESS_DESCRIPTION
(
BIO
 *
bp
, c⁄° 
ACCESS_DESCRIPTION
 *
a
);

515 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
TLS_FEATURE
)

517 
DECLARE_ASN1_FUNCTIONS
(
CERTIFICATEPOLICIES
)

518 
DECLARE_ASN1_FUNCTIONS
(
POLICYINFO
)

519 
DECLARE_ASN1_FUNCTIONS
(
POLICYQUALINFO
)

520 
DECLARE_ASN1_FUNCTIONS
(
USERNOTICE
)

521 
DECLARE_ASN1_FUNCTIONS
(
NOTICEREF
)

523 
DECLARE_ASN1_FUNCTIONS
(
CRL_DIST_POINTS
)

524 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT
)

525 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT_NAME
)

526 
DECLARE_ASN1_FUNCTIONS
(
ISSUING_DIST_POINT
)

528 
DIST_POINT_£t_d≤ame
(
DIST_POINT_NAME
 *
d≤
, 
X509_NAME
 *
öame
);

530 
NAME_CONSTRAINTS_check
(
X509
 *
x
, 
NAME_CONSTRAINTS
 *
nc
);

531 
NAME_CONSTRAINTS_check_CN
(
X509
 *
x
, 
NAME_CONSTRAINTS
 *
nc
);

533 
DECLARE_ASN1_FUNCTIONS
(
ACCESS_DESCRIPTION
)

534 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_INFO_ACCESS
)

536 
DECLARE_ASN1_ITEM
(
POLICY_MAPPING
)

537 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_MAPPING
)

538 
DECLARE_ASN1_ITEM
(
POLICY_MAPPINGS
)

540 
DECLARE_ASN1_ITEM
(
GENERAL_SUBTREE
)

541 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
GENERAL_SUBTREE
)

543 
DECLARE_ASN1_ITEM
(
NAME_CONSTRAINTS
)

544 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
NAME_CONSTRAINTS
)

546 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_CONSTRAINTS
)

547 
DECLARE_ASN1_ITEM
(
POLICY_CONSTRAINTS
)

549 
GENERAL_NAME
 *
a2i_GENERAL_NAME
(GENERAL_NAME *
out
,

550 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

551 
X509V3_CTX
 *
˘x
, 
gí_ty≥
,

552 c⁄° *
vÆue
, 
is_nc
);

554 #ifde‡
HEADER_CONF_H


555 
GENERAL_NAME
 *
v2i_GENERAL_NAME
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

556 
X509V3_CTX
 *
˘x
, 
CONF_VALUE
 *
˙f
);

557 
GENERAL_NAME
 *
v2i_GENERAL_NAME_ex
(GENERAL_NAME *
out
,

558 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

559 
X509V3_CTX
 *
˘x
, 
CONF_VALUE
 *
˙f
,

560 
is_nc
);

561 
X509V3_c⁄f_‰ì
(
CONF_VALUE
 *
vÆ
);

563 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f_nid
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, 
ext_nid
,

564 c⁄° *
vÆue
);

565 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, c⁄° *
«me
,

566 c⁄° *
vÆue
);

567 
X509V3_EXT_add_nc⁄f_sk
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, c⁄° *
£˘i⁄
,

568 
STACK_OF
(
X509_EXTENSION
Ë**
sk
);

569 
X509V3_EXT_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, c⁄° *
£˘i⁄
,

570 
X509
 *
˚π
);

571 
X509V3_EXT_REQ_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, c⁄° *
£˘i⁄
,

572 
X509_REQ
 *
ªq
);

573 
X509V3_EXT_CRL_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, c⁄° *
£˘i⁄
,

574 
X509_CRL
 *
¸l
);

576 
X509_EXTENSION
 *
X509V3_EXT_c⁄f_nid
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
,

577 
X509V3_CTX
 *
˘x
, 
ext_nid
,

578 c⁄° *
vÆue
);

579 
X509_EXTENSION
 *
X509V3_EXT_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

580 c⁄° *
«me
, c⁄° *
vÆue
);

581 
X509V3_EXT_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

582 c⁄° *
£˘i⁄
, 
X509
 *
˚π
);

583 
X509V3_EXT_REQ_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

584 c⁄° *
£˘i⁄
, 
X509_REQ
 *
ªq
);

585 
X509V3_EXT_CRL_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

586 c⁄° *
£˘i⁄
, 
X509_CRL
 *
¸l
);

588 
X509V3_add_vÆue_boﬁ_nf
(c⁄° *
«me
, 
a¢1_boﬁ
,

589 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

590 
X509V3_gë_vÆue_boﬁ
(c⁄° 
CONF_VALUE
 *
vÆue
, *
a¢1_boﬁ
);

591 
X509V3_gë_vÆue_öt
(c⁄° 
CONF_VALUE
 *
vÆue
, 
ASN1_INTEGER
 **
aöt
);

592 
X509V3_£t_nc⁄f
(
X509V3_CTX
 *
˘x
, 
CONF
 *
c⁄f
);

593 
X509V3_£t_c⁄f_lhash
(
X509V3_CTX
 *
˘x
, 
LHASH_OF
(
CONF_VALUE
Ë*
lhash
);

596 *
X509V3_gë_°rög
(
X509V3_CTX
 *
˘x
, c⁄° *
«me
, c⁄° *
£˘i⁄
);

597 
STACK_OF
(
CONF_VALUE
Ë*
X509V3_gë_£˘i⁄
(
X509V3_CTX
 *
˘x
, c⁄° *
£˘i⁄
);

598 
X509V3_°rög_‰ì
(
X509V3_CTX
 *
˘x
, *
°r
);

599 
X509V3_£˘i⁄_‰ì
(
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

600 
X509V3_£t_˘x
(
X509V3_CTX
 *
˘x
, 
X509
 *
issuî
, X509 *
subje˘
,

601 
X509_REQ
 *
ªq
, 
X509_CRL
 *
¸l
, 
Êags
);

603 
X509V3_add_vÆue
(c⁄° *
«me
, c⁄° *
vÆue
,

604 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

605 
X509V3_add_vÆue_uch¨
(c⁄° *
«me
, c⁄° *
vÆue
,

606 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

607 
X509V3_add_vÆue_boﬁ
(c⁄° *
«me
, 
a¢1_boﬁ
,

608 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

609 
X509V3_add_vÆue_öt
(c⁄° *
«me
, c⁄° 
ASN1_INTEGER
 *
aöt
,

610 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

611 *
i2s_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, c⁄° 
ASN1_INTEGER
 *
aöt
);

612 
ASN1_INTEGER
 *
s2i_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, c⁄° *
vÆue
);

613 *
i2s_ASN1_ENUMERATED
(
X509V3_EXT_METHOD
 *
mëh
, c⁄° 
ASN1_ENUMERATED
 *
aöt
);

614 *
i2s_ASN1_ENUMERATED_TABLE
(
X509V3_EXT_METHOD
 *
mëh
,

615 c⁄° 
ASN1_ENUMERATED
 *
aöt
);

616 
X509V3_EXT_add
(
X509V3_EXT_METHOD
 *
ext
);

617 
X509V3_EXT_add_li°
(
X509V3_EXT_METHOD
 *
exéi°
);

618 
X509V3_EXT_add_Æüs
(
nid_to
, 
nid_‰om
);

619 
X509V3_EXT_˛ónup
();

621 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë
(
X509_EXTENSION
 *
ext
);

622 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë_nid
(
nid
);

623 
X509V3_add_°™d¨d_exãnsi⁄s
();

624 
STACK_OF
(
CONF_VALUE
Ë*
X509V3_∑r£_li°
(c⁄° *
löe
);

625 *
X509V3_EXT_d2i
(
X509_EXTENSION
 *
ext
);

626 *
X509V3_gë_d2i
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
, 
nid
, *
¸ô
,

627 *
idx
);

629 
X509_EXTENSION
 *
X509V3_EXT_i2d
(
ext_nid
, 
¸ô
, *
ext_°ruc
);

630 
X509V3_add1_i2d
(
STACK_OF
(
X509_EXTENSION
Ë**
x
, 
nid
, *
vÆue
,

631 
¸ô
, 
Êags
);

633 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

635 
	#hex_to_°rög
 
OPENSSL_buf2hex°r


	)

636 
	#°rög_to_hex
 
OPENSSL_hex°r2buf


	)

639 
X509V3_EXT_vÆ_¥n
(
BIO
 *
out
, 
STACK_OF
(
CONF_VALUE
Ë*
vÆ
, 
ödít
,

640 
ml
);

641 
X509V3_EXT_¥öt
(
BIO
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
,

642 
ödít
);

643 #i‚de‡
OPENSSL_NO_STDIO


644 
X509V3_EXT_¥öt_Â
(
FILE
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

646 
X509V3_exãnsi⁄s_¥öt
(
BIO
 *
out
, c⁄° *
tôÀ
,

647 c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

648 
Êag
, 
ödít
);

650 
X509_check_ˇ
(
X509
 *
x
);

651 
X509_check_puΩo£
(
X509
 *
x
, 
id
, 
ˇ
);

652 
X509_suµ‹ãd_exãnsi⁄
(
X509_EXTENSION
 *
ex
);

653 
X509_PURPOSE_£t
(*
p
, 
puΩo£
);

654 
X509_check_issued
(
X509
 *
issuî
, X509 *
subje˘
);

655 
X509_check_akid
(
X509
 *
issuî
, 
AUTHORITY_KEYID
 *
akid
);

656 
X509_£t_¥oxy_Êag
(
X509
 *
x
);

657 
X509_£t_¥oxy_∑thÀn
(
X509
 *
x
, 
l
);

658 
X509_gë_¥oxy_∑thÀn
(
X509
 *
x
);

660 
uöt32_t
 
X509_gë_exãnsi⁄_Êags
(
X509
 *
x
);

661 
uöt32_t
 
X509_gë_key_ußge
(
X509
 *
x
);

662 
uöt32_t
 
X509_gë_exãnded_key_ußge
(
X509
 *
x
);

663 c⁄° 
ASN1_OCTET_STRING
 *
X509_gë0_subje˘_key_id
(
X509
 *
x
);

664 c⁄° 
ASN1_OCTET_STRING
 *
X509_gë0_auth‹ôy_key_id
(
X509
 *
x
);

665 c⁄° 
GENERAL_NAMES
 *
X509_gë0_auth‹ôy_issuî
(
X509
 *
x
);

666 c⁄° 
ASN1_INTEGER
 *
X509_gë0_auth‹ôy_£rül
(
X509
 *
x
);

668 
X509_PURPOSE_gë_cou¡
();

669 
X509_PURPOSE
 *
X509_PURPOSE_gë0
(
idx
);

670 
X509_PURPOSE_gë_by_¢ame
(c⁄° *
¢ame
);

671 
X509_PURPOSE_gë_by_id
(
id
);

672 
X509_PURPOSE_add
(
id
, 
åu°
, 
Êags
,

673 (*
ck
Ë(c⁄° 
X509_PURPOSE
 *, c⁄° 
X509
 *, ),

674 c⁄° *
«me
, c⁄° *
¢ame
, *
¨g
);

675 *
X509_PURPOSE_gë0_«me
(c⁄° 
X509_PURPOSE
 *
xp
);

676 *
X509_PURPOSE_gë0_¢ame
(c⁄° 
X509_PURPOSE
 *
xp
);

677 
X509_PURPOSE_gë_åu°
(c⁄° 
X509_PURPOSE
 *
xp
);

678 
X509_PURPOSE_˛ónup
();

679 
X509_PURPOSE_gë_id
(c⁄° 
X509_PURPOSE
 *);

681 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_emaû
(
X509
 *
x
);

682 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_REQ_gë1_emaû
(
X509_REQ
 *
x
);

683 
X509_emaû_‰ì
(
STACK_OF
(
OPENSSL_STRING
Ë*
sk
);

684 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_oc•
(
X509
 *
x
);

690 
	#X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT
 0x1

	)

692 
	#X509_CHECK_FLAG_NO_WILDCARDS
 0x2

	)

694 
	#X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS
 0x4

	)

696 
	#X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS
 0x8

	)

698 
	#X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS
 0x10

	)

700 
	#X509_CHECK_FLAG_NEVER_CHECK_SUBJECT
 0x20

	)

706 
	#_X509_CHECK_FLAG_DOT_SUBDOMAINS
 0x8000

	)

708 
X509_check_ho°
(
X509
 *
x
, c⁄° *
chk
, 
size_t
 
chkÀn
,

709 
Êags
, **
≥î«me
);

710 
X509_check_emaû
(
X509
 *
x
, c⁄° *
chk
, 
size_t
 
chkÀn
,

711 
Êags
);

712 
X509_check_ù
(
X509
 *
x
, c⁄° *
chk
, 
size_t
 
chkÀn
,

713 
Êags
);

714 
X509_check_ù_asc
(
X509
 *
x
, c⁄° *
ùasc
, 
Êags
);

716 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS
(c⁄° *
ùasc
);

717 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS_NC
(c⁄° *
ùasc
);

718 
X509V3_NAME_‰om_£˘i⁄
(
X509_NAME
 *
nm
, 
STACK_OF
(
CONF_VALUE
Ë*
dn_sk
,

719 
chty≥
);

721 
X509_POLICY_NODE_¥öt
(
BIO
 *
out
, 
X509_POLICY_NODE
 *
node
, 
ödít
);

722 
DEFINE_STACK_OF
(
X509_POLICY_NODE
)

724 #i‚de‡
OPENSSL_NO_RFC3779


725 
	sASR™ge_°
 {

726 
ASN1_INTEGER
 *
mö
, *
max
;

727 } 
	tASR™ge
;

729 
	#ASIdOrR™ge_id
 0

	)

730 
	#ASIdOrR™ge_ønge
 1

	)

732 
	sASIdOrR™ge_°
 {

733 
ty≥
;

735 
ASN1_INTEGER
 *
id
;

736 
ASR™ge
 *
ønge
;

737 } 
u
;

738 } 
	tASIdOrR™ge
;

740 
STACK_OF
(
	tASIdOrR™ge
Ë
	tASIdOrR™ges
;

741 
DEFINE_STACK_OF
(
ASIdOrR™ge
)

743 
	#ASIdítifõrChoi˚_öhîô
 0

	)

744 
	#ASIdítifõrChoi˚_asIdsOrR™ges
 1

	)

746 
	sASIdítifõrChoi˚_°
 {

747 
ty≥
;

749 
ASN1_NULL
 *
öhîô
;

750 
ASIdOrR™ges
 *
asIdsOrR™ges
;

751 } 
u
;

752 } 
	tASIdítifõrChoi˚
;

754 
	sASIdítifõrs_°
 {

755 
ASIdítifõrChoi˚
 *
a¢um
, *
rdi
;

756 } 
	tASIdítifõrs
;

758 
DECLARE_ASN1_FUNCTIONS
(
ASR™ge
)

759 
DECLARE_ASN1_FUNCTIONS
(
ASIdOrR™ge
)

760 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrChoi˚
)

761 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrs
)

763 
	sIPAddªssR™ge_°
 {

764 
ASN1_BIT_STRING
 *
mö
, *
max
;

765 } 
	tIPAddªssR™ge
;

767 
	#IPAddªssOrR™ge_addªssPªfix
 0

	)

768 
	#IPAddªssOrR™ge_addªssR™ge
 1

	)

770 
	sIPAddªssOrR™ge_°
 {

771 
ty≥
;

773 
ASN1_BIT_STRING
 *
addªssPªfix
;

774 
IPAddªssR™ge
 *
addªssR™ge
;

775 } 
u
;

776 } 
	tIPAddªssOrR™ge
;

778 
STACK_OF
(
	tIPAddªssOrR™ge
Ë
	tIPAddªssOrR™ges
;

779 
DEFINE_STACK_OF
(
IPAddªssOrR™ge
)

781 
	#IPAddªssChoi˚_öhîô
 0

	)

782 
	#IPAddªssChoi˚_addªs£sOrR™ges
 1

	)

784 
	sIPAddªssChoi˚_°
 {

785 
ty≥
;

787 
ASN1_NULL
 *
öhîô
;

788 
IPAddªssOrR™ges
 *
addªs£sOrR™ges
;

789 } 
u
;

790 } 
	tIPAddªssChoi˚
;

792 
	sIPAddªssFamûy_°
 {

793 
ASN1_OCTET_STRING
 *
addªssFamûy
;

794 
IPAddªssChoi˚
 *
ùAddªssChoi˚
;

795 } 
	tIPAddªssFamûy
;

797 
STACK_OF
(
	tIPAddªssFamûy
Ë
	tIPAddrBlocks
;

798 
DEFINE_STACK_OF
(
IPAddªssFamûy
)

800 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssR™ge
)

801 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssOrR™ge
)

802 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssChoi˚
)

803 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssFamûy
)

808 
	#V3_ASID_ASNUM
 0

	)

809 
	#V3_ASID_RDI
 1

	)

817 
	#IANA_AFI_IPV4
 1

	)

818 
	#IANA_AFI_IPV6
 2

	)

825 
X509v3_asid_add_öhîô
(
ASIdítifõrs
 *
asid
, 
which
);

826 
X509v3_asid_add_id_‹_ønge
(
ASIdítifõrs
 *
asid
, 
which
,

827 
ASN1_INTEGER
 *
mö
, ASN1_INTEGER *
max
);

828 
X509v3_addr_add_öhîô
(
IPAddrBlocks
 *
addr
,

829 c⁄° 
afi
, c⁄° *
ßfi
);

830 
X509v3_addr_add_¥efix
(
IPAddrBlocks
 *
addr
,

831 c⁄° 
afi
, c⁄° *
ßfi
,

832 *
a
, c⁄° 
¥efixÀn
);

833 
X509v3_addr_add_ønge
(
IPAddrBlocks
 *
addr
,

834 c⁄° 
afi
, c⁄° *
ßfi
,

835 *
mö
, *
max
);

836 
X509v3_addr_gë_afi
(c⁄° 
IPAddªssFamûy
 *
f
);

837 
X509v3_addr_gë_ønge
(
IPAddªssOrR™ge
 *
a‹
, c⁄° 
afi
,

838 *
mö
, *
max
,

839 c⁄° 
Àngth
);

844 
X509v3_asid_is_ˇn⁄iˇl
(
ASIdítifõrs
 *
asid
);

845 
X509v3_addr_is_ˇn⁄iˇl
(
IPAddrBlocks
 *
addr
);

846 
X509v3_asid_ˇn⁄ize
(
ASIdítifõrs
 *
asid
);

847 
X509v3_addr_ˇn⁄ize
(
IPAddrBlocks
 *
addr
);

852 
X509v3_asid_öhîôs
(
ASIdítifõrs
 *
asid
);

853 
X509v3_addr_öhîôs
(
IPAddrBlocks
 *
addr
);

854 
X509v3_asid_sub£t
(
ASIdítifõrs
 *
a
, ASIdítifõr†*
b
);

855 
X509v3_addr_sub£t
(
IPAddrBlocks
 *
a
, IPAddrBlock†*
b
);

860 
X509v3_asid_vÆid©e_∑th
(
X509_STORE_CTX
 *);

861 
X509v3_addr_vÆid©e_∑th
(
X509_STORE_CTX
 *);

862 
X509v3_asid_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

863 
ASIdítifõrs
 *
ext
,

864 
Ælow_öhîô™˚
);

865 
X509v3_addr_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

866 
IPAddrBlocks
 *
ext
, 
Ælow_öhîô™˚
);

870 
DEFINE_STACK_OF
(
ASN1_STRING
)

875 
NamögAuth‹ôy_°
 
	tNAMING_AUTHORITY
;

876 
Pro„ssi⁄Info_°
 
	tPROFESSION_INFO
;

877 
Admissi⁄s_°
 
	tADMISSIONS
;

878 
Admissi⁄Sy¡ax_°
 
	tADMISSION_SYNTAX
;

879 
DECLARE_ASN1_FUNCTIONS
(
NAMING_AUTHORITY
)

880 
DECLARE_ASN1_FUNCTIONS
(
PROFESSION_INFO
)

881 
DECLARE_ASN1_FUNCTIONS
(
ADMISSIONS
)

882 
DECLARE_ASN1_FUNCTIONS
(
ADMISSION_SYNTAX
)

883 
DEFINE_STACK_OF
(
ADMISSIONS
)

884 
DEFINE_STACK_OF
(
PROFESSION_INFO
)

885 
STACK_OF
(
	tPROFESSION_INFO
Ë
	tPROFESSION_INFOS
;

887 c⁄° 
ASN1_OBJECT
 *
NAMING_AUTHORITY_gë0_auth‹ôyId
(

888 c⁄° 
NAMING_AUTHORITY
 *
n
);

889 c⁄° 
ASN1_IA5STRING
 *
NAMING_AUTHORITY_gë0_auth‹ôyURL
(

890 c⁄° 
NAMING_AUTHORITY
 *
n
);

891 c⁄° 
ASN1_STRING
 *
NAMING_AUTHORITY_gë0_auth‹ôyText
(

892 c⁄° 
NAMING_AUTHORITY
 *
n
);

893 
NAMING_AUTHORITY_£t0_auth‹ôyId
(
NAMING_AUTHORITY
 *
n
,

894 
ASN1_OBJECT
* 
«mögAuth‹ôyId
);

895 
NAMING_AUTHORITY_£t0_auth‹ôyURL
(
NAMING_AUTHORITY
 *
n
,

896 
ASN1_IA5STRING
* 
«mögAuth‹ôyUæ
);

897 
NAMING_AUTHORITY_£t0_auth‹ôyText
(
NAMING_AUTHORITY
 *
n
,

898 
ASN1_STRING
* 
«mögAuth‹ôyText
);

900 c⁄° 
GENERAL_NAME
 *
ADMISSION_SYNTAX_gë0_admissi⁄Auth‹ôy
(

901 c⁄° 
ADMISSION_SYNTAX
 *
as
);

902 
ADMISSION_SYNTAX_£t0_admissi⁄Auth‹ôy
(

903 
ADMISSION_SYNTAX
 *
as
, 
GENERAL_NAME
 *
Ø
);

904 c⁄° 
STACK_OF
(
ADMISSIONS
Ë*
ADMISSION_SYNTAX_gë0_c⁄ã¡sOfAdmissi⁄s
(

905 c⁄° 
ADMISSION_SYNTAX
 *
as
);

906 
ADMISSION_SYNTAX_£t0_c⁄ã¡sOfAdmissi⁄s
(

907 
ADMISSION_SYNTAX
 *
as
, 
STACK_OF
(
ADMISSIONS
Ë*
a
);

908 c⁄° 
GENERAL_NAME
 *
ADMISSIONS_gë0_admissi⁄Auth‹ôy
(c⁄° 
ADMISSIONS
 *
a
);

909 
ADMISSIONS_£t0_admissi⁄Auth‹ôy
(
ADMISSIONS
 *
a
, 
GENERAL_NAME
 *
Ø
);

910 c⁄° 
NAMING_AUTHORITY
 *
ADMISSIONS_gë0_«mögAuth‹ôy
(c⁄° 
ADMISSIONS
 *
a
);

911 
ADMISSIONS_£t0_«mögAuth‹ôy
(
ADMISSIONS
 *
a
, 
NAMING_AUTHORITY
 *
«
);

912 c⁄° 
PROFESSION_INFOS
 *
ADMISSIONS_gë0_¥o„ssi⁄Infos
(c⁄° 
ADMISSIONS
 *
a
);

913 
ADMISSIONS_£t0_¥o„ssi⁄Infos
(
ADMISSIONS
 *
a
, 
PROFESSION_INFOS
 *
pi
);

914 c⁄° 
ASN1_OCTET_STRING
 *
PROFESSION_INFO_gë0_addPro„ssi⁄Info
(

915 c⁄° 
PROFESSION_INFO
 *
pi
);

916 
PROFESSION_INFO_£t0_addPro„ssi⁄Info
(

917 
PROFESSION_INFO
 *
pi
, 
ASN1_OCTET_STRING
 *
aos
);

918 c⁄° 
NAMING_AUTHORITY
 *
PROFESSION_INFO_gë0_«mögAuth‹ôy
(

919 c⁄° 
PROFESSION_INFO
 *
pi
);

920 
PROFESSION_INFO_£t0_«mögAuth‹ôy
(

921 
PROFESSION_INFO
 *
pi
, 
NAMING_AUTHORITY
 *
«
);

922 c⁄° 
STACK_OF
(
ASN1_STRING
Ë*
PROFESSION_INFO_gë0_¥o„ssi⁄Iãms
(

923 c⁄° 
PROFESSION_INFO
 *
pi
);

924 
PROFESSION_INFO_£t0_¥o„ssi⁄Iãms
(

925 
PROFESSION_INFO
 *
pi
, 
STACK_OF
(
ASN1_STRING
Ë*
as
);

926 c⁄° 
STACK_OF
(
ASN1_OBJECT
Ë*
PROFESSION_INFO_gë0_¥o„ssi⁄OIDs
(

927 c⁄° 
PROFESSION_INFO
 *
pi
);

928 
PROFESSION_INFO_£t0_¥o„ssi⁄OIDs
(

929 
PROFESSION_INFO
 *
pi
, 
STACK_OF
(
ASN1_OBJECT
Ë*
po
);

930 c⁄° 
ASN1_PRINTABLESTRING
 *
PROFESSION_INFO_gë0_ªgi°øti⁄Numbî
(

931 c⁄° 
PROFESSION_INFO
 *
pi
);

932 
PROFESSION_INFO_£t0_ªgi°øti⁄Numbî
(

933 
PROFESSION_INFO
 *
pi
, 
ASN1_PRINTABLESTRING
 *
∫
);

935 #ifde‡ 
__˝lu•lus


	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sched.h
>

23 
	~<time.h
>

25 
	~<bôs/ídün.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

35 
	mPTHREAD_CREATE_JOINABLE
,

36 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

37 
	mPTHREAD_CREATE_DETACHED


38 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

45 
	mPTHREAD_MUTEX_TIMED_NP
,

46 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

47 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

48 
	mPTHREAD_MUTEX_ADAPTIVE_NP


49 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


51 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

52 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

53 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

54 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


56 #ifde‡
__USE_GNU


58 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


63 #ifde‡
__USE_XOPEN2K


67 
	mPTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_ROBUST
,

70 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


75 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


79 
	mPTHREAD_PRIO_NONE
,

80 
	mPTHREAD_PRIO_INHERIT
,

81 
	mPTHREAD_PRIO_PROTECT


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_TIMED_NP
Ë} }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_RECURSIVE_NP
Ë} }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ERRORCHECK_NP
Ë} }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ADAPTIVE_NP
Ë} }

	)

99 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


102 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

103 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

104 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

105 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


110 
	#PTHREAD_RWLOCK_INITIALIZER
 \

111 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_DEFAULT_NP
Ë} }

	)

112 #ifde‡
__USE_GNU


113 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

114 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
Ë} }

	)

122 
	mPTHREAD_INHERIT_SCHED
,

123 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

124 
	mPTHREAD_EXPLICIT_SCHED


125 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

132 
	mPTHREAD_SCOPE_SYSTEM
,

133 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

134 
	mPTHREAD_SCOPE_PROCESS


135 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

142 
	mPTHREAD_PROCESS_PRIVATE
,

143 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

144 
	mPTHREAD_PROCESS_SHARED


145 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

151 
	#PTHREAD_COND_INITIALIZER
 { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } }

	)

155 
	s_±hªad_˛ónup_buf„r


157 (*
	m__routöe
) (*);

158 *
	m__¨g
;

159 
	m__ˇn˚…y≥
;

160 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

166 
	mPTHREAD_CANCEL_ENABLE
,

167 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

168 
	mPTHREAD_CANCEL_DISABLE


169 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

173 
	mPTHREAD_CANCEL_DEFERRED
,

174 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

175 
	mPTHREAD_CANCEL_ASYNCHRONOUS


176 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

178 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

182 
	#PTHREAD_ONCE_INIT
 0

	)

185 #ifde‡
__USE_XOPEN2K


189 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

193 
__BEGIN_DECLS


198 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

199 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

200 *(*
__°¨t_routöe
) (*),

201 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

207 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

215 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

217 #ifde‡
__USE_GNU


220 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

228 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

229 c⁄° 
time•ec
 *
__ab°ime
);

238 
	`±hªad_˛ockjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

239 
˛ockid_t
 
__˛ockid
,

240 c⁄° 
time•ec
 *
__ab°ime
);

247 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

251 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

254 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

255 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

263 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

266 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

271 *
__dëach°©e
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

275 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

276 
__dëach°©e
)

277 
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

282 
size_t
 *
__gu¨dsize
)

283 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

287 
size_t
 
__gu¨dsize
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1));

292 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

293 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

297 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

298 c⁄° 
sched_∑øm
 *
__ª°ri˘


299 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

302 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


303 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

304 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

307 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

308 
__THROW
 
	`__n⁄nuŒ
 ((1));

311 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


312 
__©å
, *
__ª°ri˘
 
__öhîô
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

316 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

317 
__öhîô
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1));

322 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

323 *
__ª°ri˘
 
__sc›e
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

327 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1));

331 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


332 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

339 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

340 *
__°ackaddr
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

344 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


345 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

352 
size_t
 
__°acksize
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_XOPEN2K


357 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 **
__ª°ri˘
 
__°ackaddr
,

359 
size_t
 *
__ª°ri˘
 
__°acksize
)

360 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

365 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

366 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

369 #ifde‡
__USE_GNU


372 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

373 
size_t
 
__˝u£tsize
,

374 c⁄° 
˝u_£t_t
 *
__˝u£t
)

375 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

379 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

380 
size_t
 
__˝u£tsize
,

381 
˝u_£t_t
 *
__˝u£t
)

382 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

385 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1));

396 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

397 
__THROW
 
	`__n⁄nuŒ
 ((2));

405 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

406 c⁄° 
sched_∑øm
 *
__∑øm
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3));

410 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

411 *
__ª°ri˘
 
__pﬁicy
,

412 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

413 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

416 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

417 
__THROW
;

420 #ifde‡
__USE_GNU


422 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

423 
size_t
 
__buÊí
)

424 
__THROW
 
	`__n⁄nuŒ
 ((2));

427 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

432 #ifde‡
__USE_UNIX98


434 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

437 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

440 #ifde‡
__USE_GNU


445 
	$±hªad_yõld
 (Ë
__THROW
;

450 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

451 c⁄° 
˝u_£t_t
 *
__˝u£t
)

452 
__THROW
 
	`__n⁄nuŒ
 ((3));

455 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

456 
˝u_£t_t
 *
__˝u£t
)

457 
__THROW
 
	`__n⁄nuŒ
 ((3));

470 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

471 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

482 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

486 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

489 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

494 
	`±hªad_ã°ˇn˚l
 ();

503 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

504 
__mask_was_ßved
;

505 } 
__ˇn˚l_jmp_buf
[1];

506 *
__∑d
[4];

507 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

510 #i‚de‡
__˛ónup_f˘_©åibuã


511 
	#__˛ónup_f˘_©åibuã


	)

516 
	s__±hªad_˛ónup_‰ame


518 (*
__ˇn˚l_routöe
) (*);

519 *
__ˇn˚l_¨g
;

520 
__do_ô
;

521 
__ˇn˚l_ty≥
;

524 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


525 #ifde‡
__˝lu•lus


527 ˛as†
	c__±hªad_˛ónup_˛ass


529 (*
__ˇn˚l_routöe
) (*);

530 *
__ˇn˚l_¨g
;

531 
__do_ô
;

532 
__ˇn˚l_ty≥
;

534 
public
:

535 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

536 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

537 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

538 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

539 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

540 &
__ˇn˚l_ty≥
); 
	}
}

541 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

551 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

553 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

557 
	#±hªad_˛ónup_p›
(
execuã
) \

558 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

559 } 0)

	)

561 #ifde‡
__USE_GNU


565 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

567 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

568 
__˛‰ame
.
	`__de„r
 ()

	)

573 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

574 
__˛‰ame
.
	`__ª°‹e
 (); \

575 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

576 } 0)

	)

583 
__exã∫_ölöe
 

584 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

586 i‡(
__‰ame
->
__do_ô
)

587 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

588 
	}
}

597 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

599 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

600 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

601 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

602 .
__do_ô
 = 1 };

	)

606 
	#±hªad_˛ónup_p›
(
execuã
) \

607 
__˛‰ame
.
__do_ô
 = (
execuã
); \

608 } 0)

	)

610 #ifde‡
__USE_GNU


614 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

616 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

617 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

618 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

619 .
__do_ô
 = 1 }; \

620 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

621 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

626 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

627 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

628 
__˛‰ame
.
__do_ô
 = (
execuã
); \

629 } 0)

	)

640 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

642 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

643 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

644 *
__ˇn˚l_¨g
 = (
¨g
); \

645 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

646 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

647 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

649 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

650 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

654 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

655 dÿ{

	)

656 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

657 
__˛ónup_f˘_©åibuã
;

661 
	#±hªad_˛ónup_p›
(
execuã
) \

664 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

665 i‡(
execuã
) \

666 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

667 } 0)

	)

668 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

669 
__˛ónup_f˘_©åibuã
;

671 #ifde‡
__USE_GNU


675 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

697 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

700 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

701 i‡(
execuã
) \

702 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

703 
	}
} 0)

	)

704 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

705 
__˛ónup_f˘_©åibuã
;

709 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

710 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

711 #i‚de‡
SHARED


712 
	`__©åibuã__
 ((
__wók__
))

718 
__jmp_buf_èg
;

719 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

725 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

726 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

727 
__THROW
 
	`__n⁄nuŒ
 ((1));

730 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

731 
__THROW
 
	`__n⁄nuŒ
 ((1));

734 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

735 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

741 #ifde‡
__USE_XOPEN2K


743 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

744 c⁄° 
time•ec
 *
__ª°ri˘


745 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

748 #ifde‡
__USE_GNU


749 
	$±hªad_muãx_˛ocklock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

750 
˛ockid_t
 
__˛ockid
,

751 c⁄° 
time•ec
 *
__ª°ri˘


752 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

756 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

757 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

761 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

762 
__ª°ri˘
 
__muãx
,

763 *
__ª°ri˘
 
__¥io˚ûög
)

764 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

768 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

769 
__¥io˚ûög
,

770 *
__ª°ri˘
 
__ﬁd_˚ûög
)

771 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

774 #ifde‡
__USE_XOPEN2K8


776 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

777 
__THROW
 
	`__n⁄nuŒ
 ((1));

778 #ifde‡
__USE_GNU


779 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

780 
__THROW
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1));

793 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

797 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

798 
__ª°ri˘
 
__©å
,

799 *
__ª°ri˘
 
__psh¨ed
)

800 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

803 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

804 
__psh¨ed
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

807 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


809 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


810 
__©å
, *
__ª°ri˘
 
__köd
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

816 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

822 
__ª°ri˘
 
__©å
,

823 *
__ª°ri˘
 
__¥Ÿocﬁ
)

824 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

828 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

829 
__¥Ÿocﬁ
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1));

833 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

834 
__ª°ri˘
 
__©å
,

835 *
__ª°ri˘
 
__¥io˚ûög
)

836 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

839 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

840 
__¥io˚ûög
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1));

843 #ifde‡
__USE_XOPEN2K


845 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

846 *
__robu°√ss
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

848 #ifde‡
__USE_GNU


849 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

850 *
__robu°√ss
)

851 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

855 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

856 
__robu°√ss
)

857 
__THROW
 
	`__n⁄nuŒ
 ((1));

858 #ifde‡
__USE_GNU


859 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

860 
__robu°√ss
)

861 
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


871 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

872 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


873 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

876 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

877 
__THROW
 
	`__n⁄nuŒ
 ((1));

880 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

881 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

884 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

885 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

887 #ifde‡
__USE_XOPEN2K


889 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

890 c⁄° 
time•ec
 *
__ª°ri˘


891 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

894 #ifde‡
__USE_GNU


895 
	$±hªad_rwlock_˛ockrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

896 
˛ockid_t
 
__˛ockid
,

897 c⁄° 
time•ec
 *
__ª°ri˘


898 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

902 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

903 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

906 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

907 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

909 #ifde‡
__USE_XOPEN2K


911 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

912 c⁄° 
time•ec
 *
__ª°ri˘


913 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

916 #ifde‡
__USE_GNU


917 
	$±hªad_rwlock_˛ockwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 
˛ockid_t
 
__˛ockid
,

919 c⁄° 
time•ec
 *
__ª°ri˘


920 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

924 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

925 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

931 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1));

935 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1));

939 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

940 
__ª°ri˘
 
__©å
,

941 *
__ª°ri˘
 
__psh¨ed
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

945 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

946 
__psh¨ed
)

947 
__THROW
 
	`__n⁄nuŒ
 ((1));

950 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

951 
__ª°ri˘
 
__©å
,

952 *
__ª°ri˘
 
__¥ef
)

953 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

956 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

957 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

966 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1));

970 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

971 
__THROW
 
	`__n⁄nuŒ
 ((1));

974 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

975 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

978 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

979 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

986 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

987 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

988 
	`__n⁄nuŒ
 ((1, 2));

997 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

998 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

999 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1000 
	`__n⁄nuŒ
 ((1, 2, 3));

1002 #ifde‡
__USE_GNU


1010 
	$±hªad_c⁄d_˛ockwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1011 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1012 
__˛ockid_t
 
__˛ock_id
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 4));

1020 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1024 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1025 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1029 
__ª°ri˘
 
__©å
,

1030 *
__ª°ri˘
 
__psh¨ed
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1034 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1035 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1037 #ifde‡
__USE_XOPEN2K


1039 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1040 
__ª°ri˘
 
__©å
,

1041 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1042 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1045 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1046 
__˛ockid_t
 
__˛ock_id
)

1047 
__THROW
 
	`__n⁄nuŒ
 ((1));

1051 #ifde‡
__USE_XOPEN2K


1056 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1057 
__THROW
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROW
 
	`__n⁄nuŒ
 ((1));

1064 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1065 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1069 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1072 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1073 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1080 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1081 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1082 
__©å
, 
__cou¡
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1086 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1087 
__THROW
 
	`__n⁄nuŒ
 ((1));

1090 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1091 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1095 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1096 
__THROW
 
	`__n⁄nuŒ
 ((1));

1099 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1100 
__THROW
 
	`__n⁄nuŒ
 ((1));

1103 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1104 
__ª°ri˘
 
__©å
,

1105 *
__ª°ri˘
 
__psh¨ed
)

1106 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1109 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1110 
__psh¨ed
)

1111 
__THROW
 
	`__n⁄nuŒ
 ((1));

1123 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1124 (*
__de°r_fun˘i⁄
) (*))

1125 
__THROW
 
	`__n⁄nuŒ
 ((1));

1128 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1131 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1134 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1135 c⁄° *
__poöãr
Ë
__THROW
 ;

1138 #ifde‡
__USE_XOPEN2K


1140 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1141 
__˛ockid_t
 *
__˛ock_id
)

1142 
__THROW
 
	`__n⁄nuŒ
 ((2));

1157 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1158 (*
__∑ª¡
) (),

1159 (*
__chûd
Ë()Ë
__THROW
;

1162 #ifde‡
__USE_EXTERN_INLINES


1164 
__exã∫_ölöe
 

1165 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1167  
__thªad1
 =
__thªad2
;

1168 
	}
}

1171 
	g__END_DECLS


	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

54 
__uid_t
 
	mpw_uid
;

55 
__gid_t
 
	mpw_gid
;

56 *
	mpw_gecos
;

57 *
	mpw_dú
;

58 *
	mpw_shñl
;

62 #ifde‡
__USE_MISC


63 
	~<bôs/ty≥s/FILE.h
>

67 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_MISC


94 
∑sswd
 *
	$fgëpwít
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

102 
	`puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
	`gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
	$gëpw«m
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

118 #ifde‡
__USE_POSIX


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #ifde‡
__USE_MISC


139 
	$gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

142 
	`__n⁄nuŒ
 ((1, 2, 4));

145 
	$gëpwuid_r
 (
__uid_t
 
__uid
,

146 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

149 
	`__n⁄nuŒ
 ((2, 3, 5));

151 
	$gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

152 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

153 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

154 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

155 
	`__n⁄nuŒ
 ((1, 2, 3, 5));

158 #ifdef 
__USE_MISC


166 
	$fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

167 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

168 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

169 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

170 
	`__n⁄nuŒ
 ((1, 2, 3, 5));

175 #ifde‡
__USE_GNU


184 
	`gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

187 
__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/ty≥s/__sig£t_t.h
>

33 
	s__jmp_buf_èg


39 
__jmp_buf
 
	m__jmpbuf
;

40 
	m__mask_was_ßved
;

41 
__sig£t_t
 
	m__ßved_mask
;

45 
__jmp_buf_èg
 
	tjmp_buf
[1];

49 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

58 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

62 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

67 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

68 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

70 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


74 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

79 #ifdef 
__USE_POSIX


83 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

87 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

93 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

94 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

99 #i‡
__USE_FORTIFY_LEVEL
 > 0

100 
	~<bôs/£tjmp2.h
>

103 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


23 
	#_SIGNAL_H


	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 
	~<bôs/signum.h
>

32 
	~<bôs/ty≥s/sig_©omic_t.h
>

34 #i‡
deföed
 
__USE_POSIX


35 
	~<bôs/ty≥s/sig£t_t.h
>

38 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


39 #i‚de‡
__pid_t_deföed


40 
__pid_t
 
	tpid_t
;

41 
	#__pid_t_deföed


	)

43 #ifde‡
__USE_XOPEN


45 #i‚de‡
__uid_t_deföed


46 
__uid_t
 
	tuid_t
;

47 
	#__uid_t_deföed


	)

51 #ifde‡
__USE_POSIX199309


53 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

56 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


57 
	~<bôs/ty≥s/sigöfo_t.h
>

58 
	~<bôs/sigöfo-c⁄°s.h
>

61 #ifde‡
__USE_MISC


62 
	~<bôs/ty≥s/sigvÆ_t.h
>

65 #ifde‡
__USE_POSIX199309


66 
	~<bôs/ty≥s/sigevít_t.h
>

67 
	~<bôs/sigevít-c⁄°s.h
>

72 (*
	t__sigh™dÀr_t
) ();

77 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

78 
__THROW
;

79 #ifde‡
__USE_GNU


80 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

87 #ifde‡
__USE_MISC


88 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

89 
__THROW
;

92 #ifde‡
__REDIRECT_NTH


93 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

94 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

95 
__sysv_sig«l
);

97 
	#sig«l
 
__sysv_sig«l


	)

101 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


104 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

105 
__THROW
;

111 #ifde‡
__USE_POSIX


112 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

115 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


119 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

123 
	$øi£
 (
__sig
Ë
__THROW
;

125 #ifde‡
__USE_MISC


127 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

128 
__THROW
;

129 
	$gsig«l
 (
__sig
Ë
__THROW
;

132 #ifde‡
__USE_XOPEN2K8


134 
	`psig«l
 (
__sig
, c⁄° *
__s
);

137 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

149 #ifde‡
__USE_XOPEN_EXTENDED


150 #ifde‡
__GNUC__


151 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

160 #ifde‡
__USE_MISC


167 
	#sigmask
(
sig
Ë(()(1u << ((sigË- 1)))

	)

170 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

173 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

180 #ifde‡
__USE_MISC


181 
	#NSIG
 
_NSIG


	)

184 #ifde‡
__USE_GNU


185 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

189 #ifde‡
__USE_MISC


190 
__sigh™dÀr_t
 
	tsig_t
;

193 #ifde‡
__USE_POSIX


196 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

202 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

208 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

209 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #ifde‡
__USE_GNU


213 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

217 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

220 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

221 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

226 
	~<bôs/siga˘i⁄.h
>

229 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

230 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

237 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

240 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

241 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

244 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__USE_POSIX199506


252 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

253 
	`__n⁄nuŒ
 ((1, 2));

256 #ifde‡
__USE_POSIX199309


261 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

262 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

269 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

270 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

271 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

272 
	`__n⁄nuŒ
 ((1));

276 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

277 
__THROW
;

282 #ifde‡
__USE_MISC


286 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

287 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

291 
	~<bôs/sigc⁄ãxt.h
>

294 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

299 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


300 
	#__√ed_size_t


	)

301 
	~<°ddef.h
>

303 
	~<bôs/ty≥s/°ack_t.h
>

304 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


306 
	~<sys/uc⁄ãxt.h
>

310 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


314 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

316 
	~<bôs/sig°ack.h
>

317 
	~<bôs/ss_Êags.h
>

321 
	$sigÆt°ack
 (c⁄° 
°ack_t
 *
__ª°ri˘
 
__ss
,

322 
°ack_t
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

325 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

326 || 
deföed
 
__USE_MISC
)

327 
	~<bôs/ty≥s/°ru˘_sig°ack.h
>

330 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

331 || 
deföed
 
__USE_MISC
)

335 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

336 
__THROW
 
__©åibuã_dïªˇãd__
;

339 #ifde‡
__USE_XOPEN_EXTENDED


343 
	$sighﬁd
 (
__sig
Ë
__THROW
;

346 
	$sigªl£
 (
__sig
Ë
__THROW
;

349 
	$sigign‹e
 (
__sig
Ë
__THROW
;

352 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

355 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


358 
	~<bôs/±hªadty≥s.h
>

359 
	~<bôs/sigthªad.h
>

366 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

368 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

370 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

371 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

374 
	~<bôs/sig«l_ext.h
>

376 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

137 
FILE
 *
°dö
;

138 
FILE
 *
°dout
;

139 
FILE
 *
°dîr
;

141 
	#°dö
 
°dö


	)

142 
	#°dout
 
°dout


	)

143 
	#°dîr
 
°dîr


	)

146 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

148 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

150 #ifde‡
__USE_ATFILE


152 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

153 c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_GNU


158 
	#RENAME_NOREPLACE
 (1 << 0)

	)

159 
	#RENAME_EXCHANGE
 (1 << 1)

	)

160 
	#RENAME_WHITEOUT
 (1 << 2)

	)

164 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

165 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

175 #ifde‡
__REDIRECT


176 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

178 
	#tmpfûe
 
tmpfûe64


	)

182 #ifde‡
__USE_LARGEFILE64


183 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

187 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

213 
	`f˛o£
 (
FILE
 *
__°ªam
);

218 
	`fÊush
 (
FILE
 *
__°ªam
);

220 #ifde‡
__USE_MISC


227 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

230 #ifde‡
__USE_GNU


237 
	`f˛o£Æl
 ();

241 #i‚de‡
__USE_FILE_OFFSET64


246 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

252 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

253 c⁄° *
__ª°ri˘
 
__modes
,

254 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

256 #ifde‡
__REDIRECT


257 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

258 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

259 
__wur
;

260 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

261 c⁄° *
__ª°ri˘
 
__modes
,

262 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

263 
__wur
;

265 
	#f›í
 
f›í64


	)

266 
	#‰e›í
 
‰e›í64


	)

269 #ifde‡
__USE_LARGEFILE64


270 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

272 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
,

274 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

277 #ifdef 
__USE_POSIX


279 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

282 #ifdef 
__USE_GNU


285 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

286 c⁄° *
__ª°ri˘
 
__modes
,

287 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

290 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

292 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

293 
__THROW
 
__wur
;

298 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

308 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

309 
__modes
, 
size_t
 
__n
Ë
__THROW
;

311 #ifdef 
__USE_MISC


314 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

315 
size_t
 
__size
Ë
__THROW
;

318 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

327 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

332 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

334 
	$•rötf
 (*
__ª°ri˘
 
__s
,

335 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

341 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

342 
__gnuc_va_li°
 
__¨g
);

347 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

349 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

350 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

352 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


354 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

355 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

356 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

358 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

360 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

363 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

366 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

367 
__gnuc_va_li°
 
__¨g
)

368 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

369 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

370 c⁄° *
__ª°ri˘
 
__fmt
, ...)

371 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

372 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

373 c⁄° *
__ª°ri˘
 
__fmt
, ...)

374 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

377 #ifde‡
__USE_XOPEN2K8


379 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

380 
__gnuc_va_li°
 
__¨g
)

381 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

382 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

383 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

391 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

392 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

397 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

399 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

400 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

405 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT


406 #ifde‡
__REDIRECT


407 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

409 
__isoc99_fsˇnf
Ë
__wur
;

410 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

411 
__isoc99_sˇnf
Ë
__wur
;

412 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

413 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

414 
__isoc99_ssˇnf
);

416 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

417 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

418 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

419 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

420 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

421 
	#fsˇnf
 
__isoc99_fsˇnf


	)

422 
	#sˇnf
 
__isoc99_sˇnf


	)

423 
	#ssˇnf
 
__isoc99_ssˇnf


	)

427 #ifdef 
__USE_ISOC99


432 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

433 
__gnuc_va_li°
 
__¨g
)

434 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

440 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

441 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

444 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

446 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

449 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

450 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT


451 
	`__REDIRECT
 (
vfsˇnf
,

452 (
FILE
 *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

454 
__isoc99_vfsˇnf
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

456 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

457 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

458 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

459 
	`__REDIRECT_NTH
 (
vssˇnf
,

460 (c⁄° *
__ª°ri˘
 
__s
,

461 c⁄° *
__ª°ri˘
 
__f‹m©
,

462 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

463 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

464 #ñi‡!
deföed
 
__REDIRECT


465 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

466 c⁄° *
__ª°ri˘
 
__f‹m©
,

467 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

468 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

469 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

470 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

471 c⁄° *
__ª°ri˘
 
__f‹m©
,

472 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

473 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

474 
	#vsˇnf
 
__isoc99_vsˇnf


	)

475 
	#vssˇnf
 
__isoc99_vssˇnf


	)

485 
	`fgëc
 (
FILE
 *
__°ªam
);

486 
	`gëc
 (
FILE
 *
__°ªam
);

492 
	`gëch¨
 ();

494 #ifde‡
__USE_POSIX199506


499 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

500 
	`gëch¨_u∆ocked
 ();

503 #ifde‡
__USE_MISC


510 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

521 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

522 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

528 
	`putch¨
 (
__c
);

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
__gnuc_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 
	`__uÊow
 (
FILE
 *);

859 
	`__ovîÊow
 (
FILE
 *, );

863 #ifde‡
__USE_EXTERN_INLINES


864 
	~<bôs/°dio.h
>

866 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


867 
	~<bôs/°dio2.h
>

869 #ifde‡
__LDBL_COMPAT


870 
	~<bôs/°dio-ldbl.h
>

873 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


540 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

542 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

543 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

550 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

551 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

553 #ifde‡
__USE_MISC


559 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

560 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


561 
	`__©åibuã_Æloc_size__
 ((2, 3));

565 
	$‰ì
 (*
__±r
Ë
__THROW
;

567 #ifde‡
__USE_MISC


568 
	~<Æloˇ.h
>

571 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

572 || 
deföed
 
__USE_MISC


574 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


575 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

578 #ifde‡
__USE_XOPEN2K


580 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

584 #ifde‡
__USE_ISOC11


586 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

587 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

591 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

595 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

597 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


599 #ifde‡
__˝lu•lus


600 "C++" 
	$©_quick_exô
 ((*
__func
) ())

601 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

603 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

607 #ifdef 
__USE_MISC


610 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

611 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

619 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


623 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 #ifde‡
__USE_ISOC99


629 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

634 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__USE_GNU


639 *
	$£cuª_gëív
 (c⁄° *
__«me
)

640 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


647 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

650 #ifde‡
__USE_XOPEN2K


653 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

654 
__THROW
 
	`__n⁄nuŒ
 ((2));

657 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

660 #ifdef 
__USE_MISC


664 
	$˛óªnv
 (Ë
__THROW
;

668 #i‡
deföed
 
__USE_MISC
 \

669 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

675 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

678 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


687 #i‚de‡
__USE_FILE_OFFSET64


688 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

690 #ifde‡
__REDIRECT


691 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

692 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

694 
	#mk°emp
 
mk°emp64


	)

697 #ifde‡
__USE_LARGEFILE64


698 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 #ifde‡
__USE_MISC


709 #i‚de‡
__USE_FILE_OFFSET64


710 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

714 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

716 
	#mk°emps
 
mk°emps64


	)

719 #ifde‡
__USE_LARGEFILE64


720 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

721 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

725 #ifde‡
__USE_XOPEN2K8


731 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

734 #ifde‡
__USE_GNU


741 #i‚de‡
__USE_FILE_OFFSET64


742 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

744 #ifde‡
__REDIRECT


745 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

746 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

748 
	#mko°emp
 
mko°emp64


	)

751 #ifde‡
__USE_LARGEFILE64


752 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

761 #i‚de‡
__USE_FILE_OFFSET64


762 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

763 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

765 #ifde‡
__REDIRECT


766 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

767 
__Êags
), 
mko°emps64
)

768 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

770 
	#mko°emps
 
mko°emps64


	)

773 #ifde‡
__USE_LARGEFILE64


774 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

775 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

784 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

787 #ifdef 
__USE_GNU


790 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

794 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


800 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

801 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

806 #i‚de‡
__COMPAR_FN_T


807 
	#__COMPAR_FN_T


	)

808 (*
	t__com∑r_‚_t
) (const *, const *);

810 #ifdef 
__USE_GNU


811 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

814 #ifde‡
__USE_GNU


815 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

820 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

821 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

822 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

824 #ifde‡
__USE_EXTERN_INLINES


825 
	~<bôs/°dlib-b£¨ch.h
>

830 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

832 #ifde‡
__USE_GNU


833 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

834 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

835 
	`__n⁄nuŒ
 ((1, 4));

840 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

841 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

843 #ifde‡
__USE_ISOC99


844 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

845 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

852 
div_t
 
	$div
 (
__numî
, 
__díom
)

853 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

855 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

857 #ifde‡
__USE_ISOC99


858 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

859 
__díom
)

860 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

864 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

865 || 
deföed
 
__USE_MISC


872 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

873 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

878 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

879 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

884 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

885 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

888 #ifde‡
__USE_MISC


890 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

894 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

895 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

896 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

897 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

902 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

905 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

906 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

907 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

909 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

910 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

911 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

912 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

913 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

914 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

915 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

922 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

925 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

926 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

929 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

933 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

934 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

936 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

937 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

938 
__THROW
;

941 #ifde‡
__USE_MISC


946 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


957 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

958 *c⁄° *
__ª°ri˘
 
__tokís
,

959 **
__ª°ri˘
 
__vÆuï
)

960 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

966 #ifde‡
__USE_XOPEN2KXSI


968 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

971 #ifde‡
__USE_XOPEN_EXTENDED


976 
	$gø¡±
 (
__fd
Ë
__THROW
;

980 
	$u∆ock±
 (
__fd
Ë
__THROW
;

985 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

988 #ifde‡
__USE_GNU


992 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

993 
__THROW
 
	`__n⁄nuŒ
 ((2));

996 
	`gë±
 ();

999 #ifde‡
__USE_MISC


1003 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1));

1007 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1010 
	$ây¶Ÿ
 (Ë
__THROW
;

1013 
	~<bôs/°dlib-Êﬂt.h
>

1016 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1017 
	~<bôs/°dlib.h
>

1019 #ifde‡
__LDBL_COMPAT


1020 
	~<bôs/°dlib-ldbl.h
>

1023 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

68 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


71 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

72 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

74 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__OPTIMIZE__


77 
__exã∫_Æways_ölöe
 *

78 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


80  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

83 
__exã∫_Æways_ölöe
 const *

84 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


86  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

89 
	}
}

91 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

92 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 #ifde‡
__USE_GNU


98 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


99 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

100 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

104 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


110 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

111 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

112 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

122 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

125 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

126 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

134 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

138 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

148 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
 
	`__n⁄nuŒ
 ((2));

151 #ifde‡
__USE_XOPEN2K8


153 
	~<bôs/ty≥s/loˇÀ_t.h
>

156 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

160 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

161 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

164 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

165 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

167 *
	$°rdup
 (c⁄° *
__s
)

168 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

174 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

175 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


181 
	#°rdu∑
(
s
) \

182 (
__exãnsi⁄__
 \

184 c⁄° *
__ﬁd
 = (
s
); \

185 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

186 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

187 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

188 
	}
}))

	)

191 
	#°∫du∑
(
s
, 
n
) \

192 (
__exãnsi⁄__
 \

194 c⁄° *
__ﬁd
 = (
s
); \

195 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

196 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

197 
__√w
[
__Àn
] = '\0'; \

198 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

199 }))

	)

203 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


206 *
°rchr
 (*
__s
, 
__c
)

207 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

208 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

209 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

211 #ifde‡
__OPTIMIZE__


212 
__exã∫_Æways_ölöe
 *

213 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


215  
__buûtö_°rchr
 (
__s
, 
__c
);

218 
__exã∫_Æways_ölöe
 const *

219 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

226 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


233 *
	`°ºchr
 (*
__s
, 
__c
)

234 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

236 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

238 #ifde‡
__OPTIMIZE__


239 
__exã∫_Æways_ölöe
 *

240 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


242  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

245 
__exã∫_Æways_ölöe
 const *

246 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
	}
}

253 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

254 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

257 #ifde‡
__USE_GNU


260 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


261 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

262 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

267 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

277 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


283 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

284 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__OPTIMIZE__


289 
__exã∫_Æways_ölöe
 *

290 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


292  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

295 
__exã∫_Æways_ölöe
 const *

296 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


298  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

301 
	}
}

303 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


310 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

311 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

312 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

313 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__OPTIMIZE__


316 
__exã∫_Æways_ölöe
 *

317 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


319  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

322 
__exã∫_Æways_ölöe
 const *

323 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


325  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

328 
	}
}

330 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

337 
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

342 c⁄° *
__ª°ri˘
 
__dñim
,

343 **
__ª°ri˘
 
__ßve_±r
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

345 #ifde‡
__USE_POSIX


346 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

347 **
__ª°ri˘
 
__ßve_±r
)

348 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

351 #ifde‡
__USE_GNU


353 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


354 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

355 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

357 c⁄° *
__√edÀ
)

358 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

360 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

361 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 #ifde‡
__USE_GNU


369 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

370 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

371 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

375 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

376 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

379 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

380 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

385 
size_t
 
	$°æí
 (c⁄° *
__s
)

386 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

388 #ifdef 
__USE_XOPEN2K8


391 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

392 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

398 #ifde‡
__USE_XOPEN2K


406 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

411 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

412 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

414 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

415 
__THROW
 
	`__n⁄nuŒ
 ((2));

416 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

421 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

426 #ifde‡
__USE_XOPEN2K8


428 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

431 #ifde‡
__USE_MISC


432 
	~<°rögs.h
>

436 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

440 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

441 c⁄° *
__ª°ri˘
 
__dñim
)

442 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

445 #ifdef 
__USE_XOPEN2K8


447 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

450 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

452 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

453 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

458 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

459 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

460 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

461 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

462 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

465 #ifdef 
__USE_GNU


467 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

468 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

471 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

474 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

476 #i‚de‡
ba£«me


481 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


482 "C++" *
	$ba£«me
 (*
__fûíame
)

483 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

484 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

485 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

487 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

492 #i‡
	`__GNUC_PREREQ
 (3,4)

493 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


495 
	~<bôs/°rög_f‹tifõd.h
>

499 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_MISC


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_MISC


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_MISC


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_MISC


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

75 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

78 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

79 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

88 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
,

90 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 #ifde‡
__USE_XOPEN


95 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

96 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

97 
__THROW
;

100 #ifde‡
__USE_XOPEN2K8


104 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

105 c⁄° *
__ª°ri˘
 
__f‹m©
,

106 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

107 
loˇÀ_t
 
__loc
Ë
__THROW
;

110 #ifde‡
__USE_GNU


111 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

112 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

113 
loˇÀ_t
 
__loc
Ë
__THROW
;

119 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

123 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

125 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

128 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

129 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

133 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

134 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

139 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

142 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

144 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

149 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

150 *
__ª°ri˘
 
__buf
Ë
__THROW
;

153 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

154 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
__tz«me
[2];

160 
__daylight
;

161 
__timez⁄e
;

164 #ifdef 
__USE_POSIX


166 *
tz«me
[2];

170 
	$tz£t
 (Ë
__THROW
;

173 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


174 
daylight
;

175 
timez⁄e
;

181 
	#__i¶óp
(
yór
) \

182 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

185 #ifde‡
__USE_MISC


190 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

193 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

196 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

200 #ifde‡
__USE_POSIX199309


205 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

206 
time•ec
 *
__ªmaöög
);

210 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

213 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

216 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

217 
__THROW
;

219 #ifde‡
__USE_XOPEN2K


224 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

225 c⁄° 
time•ec
 *
__ªq
,

226 
time•ec
 *
__ªm
);

229 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

234 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

235 
sigevít
 *
__ª°ri˘
 
__evp
,

236 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

239 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

242 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

243 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

244 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

247 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

248 
__THROW
;

251 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

255 #ifde‡
__USE_ISOC11


257 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1));

262 #ifde‡
__USE_XOPEN_EXTENDED


274 
gëd©e_îr
;

283 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

286 #ifde‡
__USE_GNU


297 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

298 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

301 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_MISC


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_MISC


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #ifde‡
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #ifde‡
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_MISC


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #ifde‡
__USE_MISC


784 
	$ây¶Ÿ
 (Ë
__THROW
;

789 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

792 #ifde‡
__USE_ATFILE


795 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

796 c⁄° *
__to
, 
__Êags
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

800 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


802 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

803 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

808 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

809 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

813 #ifde‡
__USE_ATFILE


815 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

816 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

819 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

820 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

825 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

827 #ifde‡
__USE_ATFILE


829 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

830 
__THROW
 
	`__n⁄nuŒ
 ((2));

834 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

841 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

848 *
	`gëlogö
 ();

849 #ifde‡
__USE_POSIX199506


856 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

859 #ifdef 
__USE_MISC


861 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

865 #ifdef 
__USE_POSIX2


869 
	~<bôs/gë›t_posix.h
>

873 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


877 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

881 #i‡
deföed
 
__USE_MISC


884 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

895 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

897 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

904 
	$vh™gup
 (Ë
__THROW
;

907 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

916 
size_t
 
__off£t
, 
__sˇÀ
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1));

923 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

927 *
	$gëu£rshñl
 (Ë
__THROW
;

928 
	$ídu£rshñl
 (Ë
__THROW
;

929 
	$£tu£rshñl
 (Ë
__THROW
;

935 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

939 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

942 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

946 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

954 
	`fsync
 (
__fd
);

957 #ifde‡
__USE_GNU


960 
	$syncfs
 (
__fd
Ë
__THROW
;

964 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


967 
	`gëho°id
 ();

970 
	$sync
 (Ë
__THROW
;

973 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


976 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

981 
	$gëdèbÀsize
 (Ë
__THROW
;

987 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


990 #i‚de‡
__USE_FILE_OFFSET64


991 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

992 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

994 #ifde‡
__REDIRECT_NTH


995 
	`__REDIRECT_NTH
 (
åunˇã
,

996 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

997 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 
	#åunˇã
 
åunˇã64


	)

1002 #ifde‡
__USE_LARGEFILE64


1003 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1009 #i‡
deföed
 
__USE_POSIX199309
 \

1010 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1013 #i‚de‡
__USE_FILE_OFFSET64


1014 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1016 #ifde‡
__REDIRECT_NTH


1017 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1018 
·runˇã64
Ë
__wur
;

1020 
	#·runˇã
 
·runˇã64


	)

1023 #ifde‡
__USE_LARGEFILE64


1024 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1030 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1031 || 
deföed
 
__USE_MISC


1035 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1041 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1045 #ifde‡
__USE_MISC


1056 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1061 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1073 
	#F_ULOCK
 0

	)

1074 
	#F_LOCK
 1

	)

1075 
	#F_TLOCK
 2

	)

1076 
	#F_TEST
 3

	)

1078 #i‚de‡
__USE_FILE_OFFSET64


1079 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1081 #ifde‡
__REDIRECT


1082 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1083 
lockf64
Ë
__wur
;

1085 
	#lockf
 
lockf64


	)

1088 #ifde‡
__USE_LARGEFILE64


1089 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1094 #ifde‡
__USE_GNU


1099 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1100 (
__exãnsi⁄__
 \

1101 ({ 
__ªsu…
; \

1102 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1103 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1104 
__ªsu…
; 
	}
}))

	)

1107 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1108 
__outfd
, 
__off64_t
 *
__poutoff
,

1109 
size_t
 
__Àngth
, 
__Êags
);

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1118 #ifde‡
__USE_MISC


1124 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1125 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 #ifdef 
__USE_XOPEN


1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1141 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1143 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1146 *
	`cu£rid
 (*
__s
);

1152 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1153 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1154 (*
__∑ª¡
) (),

1155 (*
__chûd
Ë()Ë
__THROW
;

1158 #ifde‡
__USE_MISC


1161 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1165 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1166 
	~<bôs/uni°d.h
>

1170 
	~<bôs/uni°d_ext.h
>

1172 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/arpa/nameser_compat.h

29 #i‚de‡
_ARPA_NAMESER_COMPAT_


30 
	#_ARPA_NAMESER_COMPAT_


	)

32 
	~<ídün.h
>

42 
	mid
 :16;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


45 
	mqr
: 1;

46 
	m›code
: 4;

47 
	mØ
: 1;

48 
	mtc
: 1;

49 
	mrd
: 1;

51 
	mø
: 1;

52 
	munu£d
 :1;

53 
	mad
: 1;

54 
	mcd
: 1;

55 
	mrcode
 :4;

57 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN
 || __BYTE_ORDER =
__PDP_ENDIAN


59 
	mrd
 :1;

60 
	mtc
 :1;

61 
	mØ
 :1;

62 
	m›code
 :4;

63 
	mqr
 :1;

65 
	mrcode
 :4;

66 
	mcd
: 1;

67 
	mad
: 1;

68 
	munu£d
 :1;

69 
	mø
 :1;

72 
	mqdcou¡
 :16;

73 
	m™cou¡
 :16;

74 
	mnscou¡
 :16;

75 
	m¨cou¡
 :16;

76 } 
	tHEADER
;

78 
	#PACKETSZ
 
NS_PACKETSZ


	)

79 
	#MAXDNAME
 
NS_MAXDNAME


	)

80 
	#MAXCDNAME
 
NS_MAXCDNAME


	)

81 
	#MAXLABEL
 
NS_MAXLABEL


	)

82 
	#HFIXEDSZ
 
NS_HFIXEDSZ


	)

83 
	#QFIXEDSZ
 
NS_QFIXEDSZ


	)

84 
	#RRFIXEDSZ
 
NS_RRFIXEDSZ


	)

85 
	#INT32SZ
 
NS_INT32SZ


	)

86 
	#INT16SZ
 
NS_INT16SZ


	)

87 
	#INT8SZ
 
NS_INT8SZ


	)

88 
	#INADDRSZ
 
NS_INADDRSZ


	)

89 
	#IN6ADDRSZ
 
NS_IN6ADDRSZ


	)

90 
	#INDIR_MASK
 
NS_CMPRSFLGS


	)

91 
	#NAMESERVER_PORT
 
NS_DEFAULTPORT


	)

93 
	#S_ZONE
 
ns_s_zn


	)

94 
	#S_PREREQ
 
ns_s_¥


	)

95 
	#S_UPDATE
 
ns_s_ud


	)

96 
	#S_ADDT
 
ns_s_¨


	)

98 
	#QUERY
 
ns_o_quîy


	)

99 
	#IQUERY
 
ns_o_iquîy


	)

100 
	#STATUS
 
ns_o_°©us


	)

101 
	#NS_NOTIFY_OP
 
ns_o_nŸify


	)

102 
	#NS_UPDATE_OP
 
ns_o_upd©e


	)

104 
	#NOERROR
 
ns_r_n€º‹


	)

105 
	#FORMERR
 
ns_r_f‹mîr


	)

106 
	#SERVFAIL
 
ns_r_£rvÁû


	)

107 
	#NXDOMAIN
 
ns_r_nxdomaö


	)

108 
	#NOTIMP
 
ns_r_nŸim∂


	)

109 
	#REFUSED
 
ns_r_ªfu£d


	)

110 
	#YXDOMAIN
 
ns_r_yxdomaö


	)

111 
	#YXRRSET
 
ns_r_yxº£t


	)

112 
	#NXRRSET
 
ns_r_nxº£t


	)

113 
	#NOTAUTH
 
ns_r_nŸauth


	)

114 
	#NOTZONE
 
ns_r_nŸz⁄e


	)

120 
	#DELETE
 
ns_u›_dñëe


	)

121 
	#ADD
 
ns_u›_add


	)

123 
	#T_A
 
ns_t_a


	)

124 
	#T_NS
 
ns_t_ns


	)

125 
	#T_MD
 
ns_t_md


	)

126 
	#T_MF
 
ns_t_mf


	)

127 
	#T_CNAME
 
ns_t_˙ame


	)

128 
	#T_SOA
 
ns_t_sﬂ


	)

129 
	#T_MB
 
ns_t_mb


	)

130 
	#T_MG
 
ns_t_mg


	)

131 
	#T_MR
 
ns_t_mr


	)

132 
	#T_NULL
 
ns_t_nuŒ


	)

133 
	#T_WKS
 
ns_t_wks


	)

134 
	#T_PTR
 
ns_t_±r


	)

135 
	#T_HINFO
 
ns_t_höfo


	)

136 
	#T_MINFO
 
ns_t_möfo


	)

137 
	#T_MX
 
ns_t_mx


	)

138 
	#T_TXT
 
ns_t_txt


	)

139 
	#T_RP
 
ns_t_Ω


	)

140 
	#T_AFSDB
 
ns_t_afsdb


	)

141 
	#T_X25
 
ns_t_x25


	)

142 
	#T_ISDN
 
ns_t_isdn


	)

143 
	#T_RT
 
ns_t_π


	)

144 
	#T_NSAP
 
ns_t_nßp


	)

145 
	#T_NSAP_PTR
 
ns_t_nßp_±r


	)

146 
	#T_SIG
 
ns_t_sig


	)

147 
	#T_KEY
 
ns_t_key


	)

148 
	#T_PX
 
ns_t_px


	)

149 
	#T_GPOS
 
ns_t_gpos


	)

150 
	#T_AAAA
 
ns_t_ØØ


	)

151 
	#T_LOC
 
ns_t_loc


	)

152 
	#T_NXT
 
ns_t_nxt


	)

153 
	#T_EID
 
ns_t_eid


	)

154 
	#T_NIMLOC
 
ns_t_nimloc


	)

155 
	#T_SRV
 
ns_t_§v


	)

156 
	#T_ATMA
 
ns_t_©ma


	)

157 
	#T_NAPTR
 
ns_t_«±r


	)

158 
	#T_KX
 
ns_t_kx


	)

159 
	#T_CERT
 
ns_t_˚π


	)

160 
	#T_A6
 
ns_t_a6


	)

161 
	#T_DNAME
 
ns_t_d«me


	)

162 
	#T_SINK
 
ns_t_sök


	)

163 
	#T_OPT
 
ns_t_›t


	)

164 
	#T_APL
 
ns_t_≠l


	)

165 
	#T_DS
 
ns_t_ds


	)

166 
	#T_SSHFP
 
ns_t_sshÂ


	)

167 
	#T_IPSECKEY
 
ns_t_ù£ckey


	)

168 
	#T_RRSIG
 
ns_t_ºsig


	)

169 
	#T_NSEC
 
ns_t_n£c


	)

170 
	#T_DNSKEY
 
ns_t_dnskey


	)

171 
	#T_DHCID
 
ns_t_dhcid


	)

172 
	#T_NSEC3
 
ns_t_n£c3


	)

173 
	#T_NSEC3PARAM
 
ns_t_n£c3∑øm


	)

174 
	#T_TLSA
 
ns_t_éß


	)

175 
	#T_SMIMEA
 
ns_t_smimó


	)

176 
	#T_HIP
 
ns_t_hù


	)

177 
	#T_NINFO
 
ns_t_nöfo


	)

178 
	#T_RKEY
 
ns_t_rkey


	)

179 
	#T_TALINK
 
ns_t_èlök


	)

180 
	#T_CDS
 
ns_t_cds


	)

181 
	#T_CDNSKEY
 
ns_t_cdnskey


	)

182 
	#T_OPENPGPKEY
 
ns_t_›ípgpkey


	)

183 
	#T_CSYNC
 
ns_t_csync


	)

184 
	#T_SPF
 
ns_t_•f


	)

185 
	#T_UINFO
 
ns_t_uöfo


	)

186 
	#T_UID
 
ns_t_uid


	)

187 
	#T_GID
 
ns_t_gid


	)

188 
	#T_UNSPEC
 
ns_t_un•ec


	)

189 
	#T_NID
 
ns_t_nid


	)

190 
	#T_L32
 
ns_t_l32


	)

191 
	#T_L64
 
ns_t_l64


	)

192 
	#T_LP
 
ns_t_Õ


	)

193 
	#T_EUI48
 
ns_t_eui48


	)

194 
	#T_EUI64
 
ns_t_eui64


	)

195 
	#T_TKEY
 
ns_t_tkey


	)

196 
	#T_TSIG
 
ns_t_tsig


	)

197 
	#T_IXFR
 
ns_t_ix‰


	)

198 
	#T_AXFR
 
ns_t_ax‰


	)

199 
	#T_MAILB
 
ns_t_maûb


	)

200 
	#T_MAILA
 
ns_t_maûa


	)

201 
	#T_ANY
 
ns_t_™y


	)

202 
	#T_URI
 
ns_t_uri


	)

203 
	#T_CAA
 
ns_t_ˇa


	)

204 
	#T_AVC
 
ns_t_avc


	)

205 
	#T_TA
 
ns_t_è


	)

206 
	#T_DLV
 
ns_t_dlv


	)

208 
	#C_IN
 
ns_c_ö


	)

209 
	#C_CHAOS
 
ns_c_chaos


	)

210 
	#C_HS
 
ns_c_hs


	)

212 
	#C_NONE
 
ns_c_n⁄e


	)

213 
	#C_ANY
 
ns_c_™y


	)

215 
	#GETSHORT
 
NS_GET16


	)

216 
	#GETLONG
 
NS_GET32


	)

217 
	#PUTSHORT
 
NS_PUT16


	)

218 
	#PUTLONG
 
NS_PUT32


	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ídün.h
>

26 #ifde‡
__USE_MISC


27 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

28 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

29 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

30 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

33 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


35 
	~<bôs/byãsw≠.h
>

36 
	~<bôs/uöä-idítôy.h
>

38 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


39 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

40 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

41 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

42 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

44 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

45 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

46 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

47 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

49 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

50 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

51 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

52 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

55 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

56 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

57 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

58 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

60 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

61 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

62 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

63 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

65 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

66 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

67 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

68 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

120 #unde‡
__USE_ISOC11


121 #unde‡
__USE_ISOC99


122 #unde‡
__USE_ISOC95


123 #unde‡
__USE_ISOCXX11


124 #unde‡
__USE_POSIX


125 #unde‡
__USE_POSIX2


126 #unde‡
__USE_POSIX199309


127 #unde‡
__USE_POSIX199506


128 #unde‡
__USE_XOPEN


129 #unde‡
__USE_XOPEN_EXTENDED


130 #unde‡
__USE_UNIX98


131 #unde‡
__USE_XOPEN2K


132 #unde‡
__USE_XOPEN2KXSI


133 #unde‡
__USE_XOPEN2K8


134 #unde‡
__USE_XOPEN2K8XSI


135 #unde‡
__USE_LARGEFILE


136 #unde‡
__USE_LARGEFILE64


137 #unde‡
__USE_FILE_OFFSET64


138 #unde‡
__USE_MISC


139 #unde‡
__USE_ATFILE


140 #unde‡
__USE_GNU


141 #unde‡
__USE_FORTIFY_LEVEL


142 #unde‡
__KERNEL_STRICT_NAMES


143 #unde‡
__GLIBC_USE_ISOC2X


144 #unde‡
__GLIBC_USE_DEPRECATED_GETS


145 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


149 #i‚de‡
_LOOSE_KERNEL_NAMES


150 
	#__KERNEL_STRICT_NAMES


	)

160 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


161 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

162 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

164 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

171 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

173 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

175 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

179 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

185 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

186 && !
deföed
 
	g_DEFAULT_SOURCE


188 #unde‡
_DEFAULT_SOURCE


189 
	#_DEFAULT_SOURCE
 1

	)

193 #ifde‡
_GNU_SOURCE


194 #unde‡
_ISOC95_SOURCE


195 
	#_ISOC95_SOURCE
 1

	)

196 #unde‡
_ISOC99_SOURCE


197 
	#_ISOC99_SOURCE
 1

	)

198 #unde‡
_ISOC11_SOURCE


199 
	#_ISOC11_SOURCE
 1

	)

200 #unde‡
_ISOC2X_SOURCE


201 
	#_ISOC2X_SOURCE
 1

	)

202 #unde‡
_POSIX_SOURCE


203 
	#_POSIX_SOURCE
 1

	)

204 #unde‡
_POSIX_C_SOURCE


205 
	#_POSIX_C_SOURCE
 200809L

	)

206 #unde‡
_XOPEN_SOURCE


207 
	#_XOPEN_SOURCE
 700

	)

208 #unde‡
_XOPEN_SOURCE_EXTENDED


209 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

210 #unde‡
_LARGEFILE64_SOURCE


211 
	#_LARGEFILE64_SOURCE
 1

	)

212 #unde‡
_DEFAULT_SOURCE


213 
	#_DEFAULT_SOURCE
 1

	)

214 #unde‡
_ATFILE_SOURCE


215 
	#_ATFILE_SOURCE
 1

	)

220 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

221 || (!
deföed
 
	g__STRICT_ANSI__
 \

222 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

223 && !
deföed
 
	g_ISOC2X_SOURCE
 \

224 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

225 && !
deföed
 
	g_XOPEN_SOURCE
))

226 #unde‡
_DEFAULT_SOURCE


227 
	#_DEFAULT_SOURCE
 1

	)

231 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

232 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

233 
	#__GLIBC_USE_ISOC2X
 1

	)

235 
	#__GLIBC_USE_ISOC2X
 0

	)

239 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

240 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

241 
	#__USE_ISOC11
 1

	)

245 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

246 || 
deföed
 
_ISOC2X_SOURCE
 \

247 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

248 
	#__USE_ISOC99
 1

	)

252 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

253 || 
deföed
 
_ISOC2X_SOURCE
 \

254 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

255 
	#__USE_ISOC95
 1

	)

258 #ifde‡
__˝lu•lus


260 #i‡
__˝lu•lus
 >= 201703L

261 
	#__USE_ISOC11
 1

	)

265 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


266 
	#__USE_ISOCXX11
 1

	)

267 
	#__USE_ISOC99
 1

	)

274 #ifde‡
_DEFAULT_SOURCE


275 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


276 
	#__USE_POSIX_IMPLICITLY
 1

	)

278 #unde‡
_POSIX_SOURCE


279 
	#_POSIX_SOURCE
 1

	)

280 #unde‡
_POSIX_C_SOURCE


281 
	#_POSIX_C_SOURCE
 200809L

	)

284 #i‡((!
deföed
 
__STRICT_ANSI__
 \

285 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

286 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

287 
	#_POSIX_SOURCE
 1

	)

288 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

289 
	#_POSIX_C_SOURCE
 2

	)

290 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

291 
	#_POSIX_C_SOURCE
 199506L

	)

292 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

293 
	#_POSIX_C_SOURCE
 200112L

	)

295 
	#_POSIX_C_SOURCE
 200809L

	)

297 
	#__USE_POSIX_IMPLICITLY
 1

	)

306 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

307 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

308 
	#_POSIX_SOURCE
 1

	)

309 #unde‡
_POSIX_C_SOURCE


310 
	#_POSIX_C_SOURCE
 199506L

	)

313 #i‡(
deföed
 
_POSIX_SOURCE
 \

314 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

315 || 
deföed
 
_XOPEN_SOURCE
)

316 
	#__USE_POSIX
 1

	)

319 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


320 
	#__USE_POSIX2
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

324 
	#__USE_POSIX199309
 1

	)

327 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

328 
	#__USE_POSIX199506
 1

	)

331 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

332 
	#__USE_XOPEN2K
 1

	)

333 #unde‡
__USE_ISOC95


334 
	#__USE_ISOC95
 1

	)

335 #unde‡
__USE_ISOC99


336 
	#__USE_ISOC99
 1

	)

339 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

340 
	#__USE_XOPEN2K8
 1

	)

341 #unde‡
_ATFILE_SOURCE


342 
	#_ATFILE_SOURCE
 1

	)

345 #ifdef 
_XOPEN_SOURCE


346 
	#__USE_XOPEN
 1

	)

347 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

348 
	#__USE_XOPEN_EXTENDED
 1

	)

349 
	#__USE_UNIX98
 1

	)

350 #unde‡
_LARGEFILE_SOURCE


351 
	#_LARGEFILE_SOURCE
 1

	)

352 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

353 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

354 
	#__USE_XOPEN2K8
 1

	)

355 
	#__USE_XOPEN2K8XSI
 1

	)

357 
	#__USE_XOPEN2K
 1

	)

358 
	#__USE_XOPEN2KXSI
 1

	)

359 #unde‡
__USE_ISOC95


360 
	#__USE_ISOC95
 1

	)

361 #unde‡
__USE_ISOC99


362 
	#__USE_ISOC99
 1

	)

365 #ifde‡
_XOPEN_SOURCE_EXTENDED


366 
	#__USE_XOPEN_EXTENDED
 1

	)

371 #ifde‡
_LARGEFILE_SOURCE


372 
	#__USE_LARGEFILE
 1

	)

375 #ifde‡
_LARGEFILE64_SOURCE


376 
	#__USE_LARGEFILE64
 1

	)

379 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

380 
	#__USE_FILE_OFFSET64
 1

	)

383 #i‡
deföed
 
_DEFAULT_SOURCE


384 
	#__USE_MISC
 1

	)

387 #ifdef 
_ATFILE_SOURCE


388 
	#__USE_ATFILE
 1

	)

391 #ifdef 
_GNU_SOURCE


392 
	#__USE_GNU
 1

	)

395 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

396 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

397 #i‡
_FORTIFY_SOURCE
 > 1

398 
	#__USE_FORTIFY_LEVEL
 2

	)

400 
	#__USE_FORTIFY_LEVEL
 1

	)

403 
	#__USE_FORTIFY_LEVEL
 0

	)

410 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


411 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

413 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

428 #i‡(
deföed
 
__USE_GNU
 \

429 && (
deföed
 
	g__˝lu•lus
 \

430 ? (
	g__˝lu•lus
 < 201103L && !
deföed
 
	g__GXX_EXPERIMENTAL_CXX0X__
) \

431 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

432 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

434 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

439 
	~<°dc-¥edef.h
>

447 #unde‡
__GNU_LIBRARY__


448 
	#__GNU_LIBRARY__
 6

	)

452 
	#__GLIBC__
 2

	)

453 
	#__GLIBC_MINOR__
 31

	)

455 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

456 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

459 #i‚de‡
__ASSEMBLER__


460 #i‚de‡
_SYS_CDEFS_H


461 
	~<sys/cdefs.h
>

466 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


467 
	#__USE_LARGEFILE
 1

	)

468 
	#__USE_LARGEFILE64
 1

	)

474 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

475 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

476 && 
deföed
 
	g__exã∫_ölöe


477 
	#__USE_EXTERN_INLINES
 1

	)

485 
	~<gnu/°ubs.h
>

	@/usr/include/linux/libc-compat.h

49 #i‚de‡
_LIBC_COMPAT_H


50 
	#_LIBC_COMPAT_H


	)

53 #i‡
deföed
(
__GLIBC__
)

56 #i‡
deföed
(
_NET_IF_H
Ë&& deföed(
__USE_MISC
)

61 
	#__UAPI_DEF_IF_IFCONF
 0

	)

62 
	#__UAPI_DEF_IF_IFMAP
 0

	)

63 
	#__UAPI_DEF_IF_IFNAMSIZ
 0

	)

64 
	#__UAPI_DEF_IF_IFREQ
 0

	)

66 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 0

	)

68 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


69 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

78 
	#__UAPI_DEF_IF_IFCONF
 1

	)

79 
	#__UAPI_DEF_IF_IFMAP
 1

	)

80 
	#__UAPI_DEF_IF_IFNAMSIZ
 1

	)

81 
	#__UAPI_DEF_IF_IFREQ
 1

	)

83 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 1

	)

85 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

90 #i‡
deföed
(
_NETINET_IN_H
)

94 
	#__UAPI_DEF_IN_ADDR
 0

	)

95 
	#__UAPI_DEF_IN_IPPROTO
 0

	)

96 
	#__UAPI_DEF_IN_PKTINFO
 0

	)

97 
	#__UAPI_DEF_IP_MREQ
 0

	)

98 
	#__UAPI_DEF_SOCKADDR_IN
 0

	)

99 
	#__UAPI_DEF_IN_CLASS
 0

	)

101 
	#__UAPI_DEF_IN6_ADDR
 0

	)

106 #i‡
deföed
(
__USE_MISC
Ë|| deföed (
__USE_GNU
)

107 
	#__UAPI_DEF_IN6_ADDR_ALT
 0

	)

109 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

111 
	#__UAPI_DEF_SOCKADDR_IN6
 0

	)

112 
	#__UAPI_DEF_IPV6_MREQ
 0

	)

113 
	#__UAPI_DEF_IPPROTO_V6
 0

	)

114 
	#__UAPI_DEF_IPV6_OPTIONS
 0

	)

115 
	#__UAPI_DEF_IN6_PKTINFO
 0

	)

116 
	#__UAPI_DEF_IP6_MTUINFO
 0

	)

123 
	#__UAPI_DEF_IN_ADDR
 1

	)

124 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

125 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

126 
	#__UAPI_DEF_IP_MREQ
 1

	)

127 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

128 
	#__UAPI_DEF_IN_CLASS
 1

	)

130 
	#__UAPI_DEF_IN6_ADDR
 1

	)

133 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

134 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

135 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

136 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

137 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

138 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

139 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

144 #i‡
deföed
(
__NETIPX_IPX_H
)

146 
	#__UAPI_DEF_SOCKADDR_IPX
 0

	)

147 
	#__UAPI_DEF_IPX_ROUTE_DEFINITION
 0

	)

148 
	#__UAPI_DEF_IPX_INTERFACE_DEFINITION
 0

	)

149 
	#__UAPI_DEF_IPX_CONFIG_DATA
 0

	)

150 
	#__UAPI_DEF_IPX_ROUTE_DEF
 0

	)

154 
	#__UAPI_DEF_SOCKADDR_IPX
 1

	)

155 
	#__UAPI_DEF_IPX_ROUTE_DEFINITION
 1

	)

156 
	#__UAPI_DEF_IPX_INTERFACE_DEFINITION
 1

	)

157 
	#__UAPI_DEF_IPX_CONFIG_DATA
 1

	)

158 
	#__UAPI_DEF_IPX_ROUTE_DEF
 1

	)

163 #i‡
deföed
(
_SYS_XATTR_H
)

164 
	#__UAPI_DEF_XATTR
 0

	)

166 
	#__UAPI_DEF_XATTR
 1

	)

176 #i‚de‡
__UAPI_DEF_IF_IFCONF


177 
	#__UAPI_DEF_IF_IFCONF
 1

	)

179 #i‚de‡
__UAPI_DEF_IF_IFMAP


180 
	#__UAPI_DEF_IF_IFMAP
 1

	)

182 #i‚de‡
__UAPI_DEF_IF_IFNAMSIZ


183 
	#__UAPI_DEF_IF_IFNAMSIZ
 1

	)

185 #i‚de‡
__UAPI_DEF_IF_IFREQ


186 
	#__UAPI_DEF_IF_IFREQ
 1

	)

189 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


190 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 1

	)

193 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


194 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

198 #i‚de‡
__UAPI_DEF_IN_ADDR


199 
	#__UAPI_DEF_IN_ADDR
 1

	)

201 #i‚de‡
__UAPI_DEF_IN_IPPROTO


202 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

204 #i‚de‡
__UAPI_DEF_IN_PKTINFO


205 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

207 #i‚de‡
__UAPI_DEF_IP_MREQ


208 
	#__UAPI_DEF_IP_MREQ
 1

	)

210 #i‚de‡
__UAPI_DEF_SOCKADDR_IN


211 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

213 #i‚de‡
__UAPI_DEF_IN_CLASS


214 
	#__UAPI_DEF_IN_CLASS
 1

	)

218 #i‚de‡
__UAPI_DEF_IN6_ADDR


219 
	#__UAPI_DEF_IN6_ADDR
 1

	)

221 #i‚de‡
__UAPI_DEF_IN6_ADDR_ALT


222 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

224 #i‚de‡
__UAPI_DEF_SOCKADDR_IN6


225 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

227 #i‚de‡
__UAPI_DEF_IPV6_MREQ


228 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

230 #i‚de‡
__UAPI_DEF_IPPROTO_V6


231 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

233 #i‚de‡
__UAPI_DEF_IPV6_OPTIONS


234 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

236 #i‚de‡
__UAPI_DEF_IN6_PKTINFO


237 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

239 #i‚de‡
__UAPI_DEF_IP6_MTUINFO


240 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

244 #i‚de‡
__UAPI_DEF_SOCKADDR_IPX


245 
	#__UAPI_DEF_SOCKADDR_IPX
 1

	)

247 #i‚de‡
__UAPI_DEF_IPX_ROUTE_DEFINITION


248 
	#__UAPI_DEF_IPX_ROUTE_DEFINITION
 1

	)

250 #i‚de‡
__UAPI_DEF_IPX_INTERFACE_DEFINITION


251 
	#__UAPI_DEF_IPX_INTERFACE_DEFINITION
 1

	)

253 #i‚de‡
__UAPI_DEF_IPX_CONFIG_DATA


254 
	#__UAPI_DEF_IPX_CONFIG_DATA
 1

	)

256 #i‚de‡
__UAPI_DEF_IPX_ROUTE_DEF


257 
	#__UAPI_DEF_IPX_ROUTE_DEF
 1

	)

261 #i‚de‡
__UAPI_DEF_XATTR


262 
	#__UAPI_DEF_XATTR
 1

	)

	@/usr/include/linux/socket.h

2 #i‚de‡
_LINUX_SOCKET_H


3 
	#_LINUX_SOCKET_H


	)

8 
	#_K_SS_MAXSIZE
 128

	)

10 
	t__kî√l_ß_Ámûy_t
;

16 
	s__kî√l_sockaddr_°‹age
 {

19 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

21 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

25 *
	m__Æign
;

29 
	#SOCK_SNDBUF_LOCK
 1

	)

30 
	#SOCK_RCVBUF_LOCK
 2

	)

32 
	#SOCK_BUF_LOCK_MASK
 (
SOCK_SNDBUF_LOCK
 | 
SOCK_RCVBUF_LOCK
)

	)

	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

17 #ifde‡
__CHECKER__


18 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

20 
	#__bôwi£__


	)

22 
	#__bôwi£
 
__bôwi£__


	)

24 
__u16
 
	t__bôwi£
 
	t__À16
;

25 
__u16
 
	t__bôwi£
 
	t__be16
;

26 
__u32
 
	t__bôwi£
 
	t__À32
;

27 
__u32
 
	t__bôwi£
 
	t__be32
;

28 
__u64
 
	t__bôwi£
 
	t__À64
;

29 
__u64
 
	t__bôwi£
 
	t__be64
;

31 
__u16
 
	t__bôwi£
 
	t__sum16
;

32 
__u32
 
	t__bôwi£
 
	t__wsum
;

43 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

45 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	t__bôwi£
 
	t__pﬁl_t
;

	@/usr/include/openssl/async.h

10 
	~<°dlib.h
>

12 #i‚de‡
HEADER_ASYNC_H


13 
	#HEADER_ASYNC_H


	)

15 #i‡
deföed
(
_WIN32
)

16 #i‡
deföed
(
BASETYPES
Ë|| deföed(
_WINDEF_H
)

18 
	#OSSL_ASYNC_FD
 
HANDLE


	)

19 
	#OSSL_BAD_ASYNC_FD
 
INVALID_HANDLE_VALUE


	)

22 
	#OSSL_ASYNC_FD
 

	)

23 
	#OSSL_BAD_ASYNC_FD
 -1

	)

25 
	~<›ís¶/asyn˚º.h
>

28 #ifde‡ 
__˝lu•lus


32 
async_job_°
 
	tASYNC_JOB
;

33 
async_waô_˘x_°
 
	tASYNC_WAIT_CTX
;

35 
	#ASYNC_ERR
 0

	)

36 
	#ASYNC_NO_JOBS
 1

	)

37 
	#ASYNC_PAUSE
 2

	)

38 
	#ASYNC_FINISH
 3

	)

40 
ASYNC_öô_thªad
(
size_t
 
max_size
, size_à
öô_size
);

41 
ASYNC_˛ónup_thªad
();

43 #ifde‡
OSSL_ASYNC_FD


44 
ASYNC_WAIT_CTX
 *
ASYNC_WAIT_CTX_√w
();

45 
ASYNC_WAIT_CTX_‰ì
(
ASYNC_WAIT_CTX
 *
˘x
);

46 
ASYNC_WAIT_CTX_£t_waô_fd
(
ASYNC_WAIT_CTX
 *
˘x
, c⁄° *
key
,

47 
OSSL_ASYNC_FD
 
fd
,

48 *
cu°om_d©a
,

49 (*
˛ónup
)(
ASYNC_WAIT_CTX
 *, const *,

50 
OSSL_ASYNC_FD
, *));

51 
ASYNC_WAIT_CTX_gë_fd
(
ASYNC_WAIT_CTX
 *
˘x
, c⁄° *
key
,

52 
OSSL_ASYNC_FD
 *
fd
, **
cu°om_d©a
);

53 
ASYNC_WAIT_CTX_gë_Æl_fds
(
ASYNC_WAIT_CTX
 *
˘x
, 
OSSL_ASYNC_FD
 *
fd
,

54 
size_t
 *
numfds
);

55 
ASYNC_WAIT_CTX_gë_ch™ged_fds
(
ASYNC_WAIT_CTX
 *
˘x
, 
OSSL_ASYNC_FD
 *
addfd
,

56 
size_t
 *
numaddfds
, 
OSSL_ASYNC_FD
 *
dñfd
,

57 
size_t
 *
numdñfds
);

58 
ASYNC_WAIT_CTX_˛ór_fd
(
ASYNC_WAIT_CTX
 *
˘x
, c⁄° *
key
);

61 
ASYNC_is_ˇ∑bÀ
();

63 
ASYNC_°¨t_job
(
ASYNC_JOB
 **
job
, 
ASYNC_WAIT_CTX
 *
˘x
, *
ªt
,

64 (*
func
)(*), *
¨gs
, 
size_t
 
size
);

65 
ASYNC_∑u£_job
();

67 
ASYNC_JOB
 *
ASYNC_gë_cuºít_job
();

68 
ASYNC_WAIT_CTX
 *
ASYNC_gë_waô_˘x
(
ASYNC_JOB
 *
job
);

69 
ASYNC_block_∑u£
();

70 
ASYNC_unblock_∑u£
();

73 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bioerr.h

11 #i‚de‡
HEADER_BIOERR_H


12 
	#HEADER_BIOERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_BIO_°rögs
();

26 
	#BIO_F_ACPT_STATE
 100

	)

27 
	#BIO_F_ADDRINFO_WRAP
 148

	)

28 
	#BIO_F_ADDR_STRINGS
 134

	)

29 
	#BIO_F_BIO_ACCEPT
 101

	)

30 
	#BIO_F_BIO_ACCEPT_EX
 137

	)

31 
	#BIO_F_BIO_ACCEPT_NEW
 152

	)

32 
	#BIO_F_BIO_ADDR_NEW
 144

	)

33 
	#BIO_F_BIO_BIND
 147

	)

34 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

35 
	#BIO_F_BIO_CONNECT
 138

	)

36 
	#BIO_F_BIO_CONNECT_NEW
 153

	)

37 
	#BIO_F_BIO_CTRL
 103

	)

38 
	#BIO_F_BIO_GETS
 104

	)

39 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

40 
	#BIO_F_BIO_GET_NEW_INDEX
 102

	)

41 
	#BIO_F_BIO_GET_PORT
 107

	)

42 
	#BIO_F_BIO_LISTEN
 139

	)

43 
	#BIO_F_BIO_LOOKUP
 135

	)

44 
	#BIO_F_BIO_LOOKUP_EX
 143

	)

45 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

46 
	#BIO_F_BIO_METH_NEW
 146

	)

47 
	#BIO_F_BIO_NEW
 108

	)

48 
	#BIO_F_BIO_NEW_DGRAM_SCTP
 145

	)

49 
	#BIO_F_BIO_NEW_FILE
 109

	)

50 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

51 
	#BIO_F_BIO_NREAD
 123

	)

52 
	#BIO_F_BIO_NREAD0
 124

	)

53 
	#BIO_F_BIO_NWRITE
 125

	)

54 
	#BIO_F_BIO_NWRITE0
 122

	)

55 
	#BIO_F_BIO_PARSE_HOSTSERV
 136

	)

56 
	#BIO_F_BIO_PUTS
 110

	)

57 
	#BIO_F_BIO_READ
 111

	)

58 
	#BIO_F_BIO_READ_EX
 105

	)

59 
	#BIO_F_BIO_READ_INTERN
 120

	)

60 
	#BIO_F_BIO_SOCKET
 140

	)

61 
	#BIO_F_BIO_SOCKET_NBIO
 142

	)

62 
	#BIO_F_BIO_SOCK_INFO
 141

	)

63 
	#BIO_F_BIO_SOCK_INIT
 112

	)

64 
	#BIO_F_BIO_WRITE
 113

	)

65 
	#BIO_F_BIO_WRITE_EX
 119

	)

66 
	#BIO_F_BIO_WRITE_INTERN
 128

	)

67 
	#BIO_F_BUFFER_CTRL
 114

	)

68 
	#BIO_F_CONN_CTRL
 127

	)

69 
	#BIO_F_CONN_STATE
 115

	)

70 
	#BIO_F_DGRAM_SCTP_NEW
 149

	)

71 
	#BIO_F_DGRAM_SCTP_READ
 132

	)

72 
	#BIO_F_DGRAM_SCTP_WRITE
 133

	)

73 
	#BIO_F_DOAPR_OUTCH
 150

	)

74 
	#BIO_F_FILE_CTRL
 116

	)

75 
	#BIO_F_FILE_READ
 130

	)

76 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

77 
	#BIO_F_LINEBUFFER_NEW
 151

	)

78 
	#BIO_F_MEM_WRITE
 117

	)

79 
	#BIO_F_NBIOF_NEW
 154

	)

80 
	#BIO_F_SLG_WRITE
 155

	)

81 
	#BIO_F_SSL_NEW
 118

	)

86 
	#BIO_R_ACCEPT_ERROR
 100

	)

87 
	#BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET
 141

	)

88 
	#BIO_R_AMBIGUOUS_HOST_OR_SERVICE
 129

	)

89 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

90 
	#BIO_R_BROKEN_PIPE
 124

	)

91 
	#BIO_R_CONNECT_ERROR
 103

	)

92 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

93 
	#BIO_R_GETSOCKNAME_ERROR
 132

	)

94 
	#BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS
 133

	)

95 
	#BIO_R_GETTING_SOCKTYPE
 134

	)

96 
	#BIO_R_INVALID_ARGUMENT
 125

	)

97 
	#BIO_R_INVALID_SOCKET
 135

	)

98 
	#BIO_R_IN_USE
 123

	)

99 
	#BIO_R_LENGTH_TOO_LONG
 102

	)

100 
	#BIO_R_LISTEN_V6_ONLY
 136

	)

101 
	#BIO_R_LOOKUP_RETURNED_NOTHING
 142

	)

102 
	#BIO_R_MALFORMED_HOST_OR_SERVICE
 130

	)

103 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

104 
	#BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED
 143

	)

105 
	#BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED
 144

	)

106 
	#BIO_R_NO_PORT_DEFINED
 113

	)

107 
	#BIO_R_NO_SUCH_FILE
 128

	)

108 
	#BIO_R_NULL_PARAMETER
 115

	)

109 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

110 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

111 
	#BIO_R_UNABLE_TO_KEEPALIVE
 137

	)

112 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

113 
	#BIO_R_UNABLE_TO_NODELAY
 138

	)

114 
	#BIO_R_UNABLE_TO_REUSEADDR
 139

	)

115 
	#BIO_R_UNAVAILABLE_IP_FAMILY
 145

	)

116 
	#BIO_R_UNINITIALIZED
 120

	)

117 
	#BIO_R_UNKNOWN_INFO_TYPE
 140

	)

118 
	#BIO_R_UNSUPPORTED_IP_FAMILY
 146

	)

119 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

120 
	#BIO_R_UNSUPPORTED_PROTOCOL_FAMILY
 131

	)

121 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

122 
	#BIO_R_WSASTARTUP
 122

	)

	@/usr/include/openssl/bnerr.h

11 #i‚de‡
HEADER_BNERR_H


12 
	#HEADER_BNERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_BN_°rögs
();

26 
	#BN_F_BNRAND
 127

	)

27 
	#BN_F_BNRAND_RANGE
 138

	)

28 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

29 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

30 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

31 
	#BN_F_BN_BLINDING_NEW
 102

	)

32 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

33 
	#BN_F_BN_BN2DEC
 104

	)

34 
	#BN_F_BN_BN2HEX
 105

	)

35 
	#BN_F_BN_COMPUTE_WNAF
 142

	)

36 
	#BN_F_BN_CTX_GET
 116

	)

37 
	#BN_F_BN_CTX_NEW
 106

	)

38 
	#BN_F_BN_CTX_START
 129

	)

39 
	#BN_F_BN_DIV
 107

	)

40 
	#BN_F_BN_DIV_RECP
 130

	)

41 
	#BN_F_BN_EXP
 123

	)

42 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

43 
	#BN_F_BN_GENCB_NEW
 143

	)

44 
	#BN_F_BN_GENERATE_DSA_NONCE
 140

	)

45 
	#BN_F_BN_GENERATE_PRIME_EX
 141

	)

46 
	#BN_F_BN_GF2M_MOD
 131

	)

47 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

48 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

49 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

50 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

51 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

52 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

53 
	#BN_F_BN_LSHIFT
 145

	)

54 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

55 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

56 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

57 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

58 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

59 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

60 
	#BN_F_BN_MOD_INVERSE
 110

	)

61 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

62 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

63 
	#BN_F_BN_MOD_SQRT
 121

	)

64 
	#BN_F_BN_MONT_CTX_NEW
 149

	)

65 
	#BN_F_BN_MPI2BN
 112

	)

66 
	#BN_F_BN_NEW
 113

	)

67 
	#BN_F_BN_POOL_GET
 147

	)

68 
	#BN_F_BN_RAND
 114

	)

69 
	#BN_F_BN_RAND_RANGE
 122

	)

70 
	#BN_F_BN_RECP_CTX_NEW
 150

	)

71 
	#BN_F_BN_RSHIFT
 146

	)

72 
	#BN_F_BN_SET_WORDS
 144

	)

73 
	#BN_F_BN_STACK_PUSH
 148

	)

74 
	#BN_F_BN_USUB
 115

	)

79 
	#BN_R_ARG2_LT_ARG3
 100

	)

80 
	#BN_R_BAD_RECIPROCAL
 101

	)

81 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

82 
	#BN_R_BITS_TOO_SMALL
 118

	)

83 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

84 
	#BN_R_DIV_BY_ZERO
 103

	)

85 
	#BN_R_ENCODING_ERROR
 104

	)

86 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

87 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

88 
	#BN_R_INVALID_LENGTH
 106

	)

89 
	#BN_R_INVALID_RANGE
 115

	)

90 
	#BN_R_INVALID_SHIFT
 119

	)

91 
	#BN_R_NOT_A_SQUARE
 111

	)

92 
	#BN_R_NOT_INITIALIZED
 107

	)

93 
	#BN_R_NO_INVERSE
 108

	)

94 
	#BN_R_NO_SOLUTION
 116

	)

95 
	#BN_R_PRIVATE_KEY_TOO_LARGE
 117

	)

96 
	#BN_R_P_IS_NOT_PRIME
 112

	)

97 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

98 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

	@/usr/include/openssl/buffererr.h

11 #i‚de‡
HEADER_BUFERR_H


12 
	#HEADER_BUFERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_BUF_°rögs
();

26 
	#BUF_F_BUF_MEM_GROW
 100

	)

27 
	#BUF_F_BUF_MEM_GROW_CLEAN
 105

	)

28 
	#BUF_F_BUF_MEM_NEW
 101

	)

	@/usr/include/openssl/comp.h

10 #i‚de‡
HEADER_COMP_H


11 
	#HEADER_COMP_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_COMP


16 
	~<›ís¶/¸y±o.h
>

17 
	~<›ís¶/com≥º.h
>

18 #ifde‡ 
__˝lu•lus


24 
COMP_CTX
 *
COMP_CTX_√w
(
COMP_METHOD
 *
mëh
);

25 c⁄° 
COMP_METHOD
 *
COMP_CTX_gë_mëhod
(c⁄° 
COMP_CTX
 *
˘x
);

26 
COMP_CTX_gë_ty≥
(c⁄° 
COMP_CTX
* 
comp
);

27 
COMP_gë_ty≥
(c⁄° 
COMP_METHOD
 *
mëh
);

28 c⁄° *
COMP_gë_«me
(c⁄° 
COMP_METHOD
 *
mëh
);

29 
COMP_CTX_‰ì
(
COMP_CTX
 *
˘x
);

31 
COMP_com¥ess_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

32 *
ö
, 
ûí
);

33 
COMP_ex∑nd_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

34 *
ö
, 
ûí
);

36 
COMP_METHOD
 *
COMP_zlib
();

38 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

39 
	#COMP_zlib_˛ónup
(Ë0Ë

	)

42 #ifde‡
HEADER_BIO_H


43 #ifde‡
ZLIB


44 c⁄° 
BIO_METHOD
 *
BIO_f_zlib
();

49 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/conferr.h

11 #i‚de‡
HEADER_CONFERR_H


12 
	#HEADER_CONFERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_CONF_°rögs
();

26 
	#CONF_F_CONF_DUMP_FP
 104

	)

27 
	#CONF_F_CONF_LOAD
 100

	)

28 
	#CONF_F_CONF_LOAD_FP
 103

	)

29 
	#CONF_F_CONF_PARSE_LIST
 119

	)

30 
	#CONF_F_DEF_LOAD
 120

	)

31 
	#CONF_F_DEF_LOAD_BIO
 121

	)

32 
	#CONF_F_GET_NEXT_FILE
 107

	)

33 
	#CONF_F_MODULE_ADD
 122

	)

34 
	#CONF_F_MODULE_INIT
 115

	)

35 
	#CONF_F_MODULE_LOAD_DSO
 117

	)

36 
	#CONF_F_MODULE_RUN
 118

	)

37 
	#CONF_F_NCONF_DUMP_BIO
 105

	)

38 
	#CONF_F_NCONF_DUMP_FP
 106

	)

39 
	#CONF_F_NCONF_GET_NUMBER_E
 112

	)

40 
	#CONF_F_NCONF_GET_SECTION
 108

	)

41 
	#CONF_F_NCONF_GET_STRING
 109

	)

42 
	#CONF_F_NCONF_LOAD
 113

	)

43 
	#CONF_F_NCONF_LOAD_BIO
 110

	)

44 
	#CONF_F_NCONF_LOAD_FP
 114

	)

45 
	#CONF_F_NCONF_NEW
 111

	)

46 
	#CONF_F_PROCESS_INCLUDE
 116

	)

47 
	#CONF_F_SSL_MODULE_INIT
 123

	)

48 
	#CONF_F_STR_COPY
 101

	)

53 
	#CONF_R_ERROR_LOADING_DSO
 110

	)

54 
	#CONF_R_LIST_CANNOT_BE_NULL
 115

	)

55 
	#CONF_R_MISSING_CLOSE_SQUARE_BRACKET
 100

	)

56 
	#CONF_R_MISSING_EQUAL_SIGN
 101

	)

57 
	#CONF_R_MISSING_INIT_FUNCTION
 112

	)

58 
	#CONF_R_MODULE_INITIALIZATION_ERROR
 109

	)

59 
	#CONF_R_NO_CLOSE_BRACE
 102

	)

60 
	#CONF_R_NO_CONF
 105

	)

61 
	#CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE
 106

	)

62 
	#CONF_R_NO_SECTION
 107

	)

63 
	#CONF_R_NO_SUCH_FILE
 114

	)

64 
	#CONF_R_NO_VALUE
 108

	)

65 
	#CONF_R_NUMBER_TOO_LARGE
 121

	)

66 
	#CONF_R_RECURSIVE_DIRECTORY_INCLUDE
 111

	)

67 
	#CONF_R_SSL_COMMAND_SECTION_EMPTY
 117

	)

68 
	#CONF_R_SSL_COMMAND_SECTION_NOT_FOUND
 118

	)

69 
	#CONF_R_SSL_SECTION_EMPTY
 119

	)

70 
	#CONF_R_SSL_SECTION_NOT_FOUND
 120

	)

71 
	#CONF_R_UNABLE_TO_CREATE_NEW_SECTION
 103

	)

72 
	#CONF_R_UNKNOWN_MODULE_NAME
 113

	)

73 
	#CONF_R_VARIABLE_EXPANSION_TOO_LONG
 116

	)

74 
	#CONF_R_VARIABLE_HAS_NO_VALUE
 104

	)

	@/usr/include/openssl/crypto.h

11 #i‚de‡
HEADER_CRYPTO_H


12 
	#HEADER_CRYPTO_H


	)

14 
	~<°dlib.h
>

15 
	~<time.h
>

17 
	~<›ís¶/e_os2.h
>

19 #i‚de‡
OPENSSL_NO_STDIO


20 
	~<°dio.h
>

23 
	~<›ís¶/ß„°ack.h
>

24 
	~<›ís¶/›ís¶v.h
>

25 
	~<›ís¶/os¶_typ.h
>

26 
	~<›ís¶/›ís¶c⁄f.h
>

27 
	~<›ís¶/¸y±€º.h
>

29 #ifde‡
CHARSET_EBCDIC


30 
	~<›ís¶/ebcdic.h
>

37 
	~<›ís¶/symhacks.h
>

39 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

40 
	~<›ís¶/›ís¶v.h
>

43 #ifde‡ 
__˝lu•lus


47 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

48 
	#SSLóy
 
O≥nSSL_vîsi⁄_num


	)

49 
	#SSLóy_vîsi⁄
 
O≥nSSL_vîsi⁄


	)

50 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

51 
	#SSLEAY_VERSION
 
OPENSSL_VERSION


	)

52 
	#SSLEAY_CFLAGS
 
OPENSSL_CFLAGS


	)

53 
	#SSLEAY_BUILT_ON
 
OPENSSL_BUILT_ON


	)

54 
	#SSLEAY_PLATFORM
 
OPENSSL_PLATFORM


	)

55 
	#SSLEAY_DIR
 
OPENSSL_DIR


	)

62 
dummy
;

63 } 
	tCRYPTO_dy∆ock
;

67 
	tCRYPTO_RWLOCK
;

69 
CRYPTO_RWLOCK
 *
CRYPTO_THREAD_lock_√w
();

70 
CRYPTO_THREAD_ªad_lock
(
CRYPTO_RWLOCK
 *
lock
);

71 
CRYPTO_THREAD_wrôe_lock
(
CRYPTO_RWLOCK
 *
lock
);

72 
CRYPTO_THREAD_u∆ock
(
CRYPTO_RWLOCK
 *
lock
);

73 
CRYPTO_THREAD_lock_‰ì
(
CRYPTO_RWLOCK
 *
lock
);

75 
CRYPTO_©omic_add
(*
vÆ
, 
amou¡
, *
ªt
, 
CRYPTO_RWLOCK
 *
lock
);

81 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

82 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

83 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

84 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

86 
	s¸y±o_ex_d©a_°
 {

87 
STACK_OF
(Ë*
	gsk
;

89 
DEFINE_STACK_OF
()

94 
	#CRYPTO_EX_INDEX_SSL
 0

	)

95 
	#CRYPTO_EX_INDEX_SSL_CTX
 1

	)

96 
	#CRYPTO_EX_INDEX_SSL_SESSION
 2

	)

97 
	#CRYPTO_EX_INDEX_X509
 3

	)

98 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

99 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

100 
	#CRYPTO_EX_INDEX_DH
 6

	)

101 
	#CRYPTO_EX_INDEX_DSA
 7

	)

102 
	#CRYPTO_EX_INDEX_EC_KEY
 8

	)

103 
	#CRYPTO_EX_INDEX_RSA
 9

	)

104 
	#CRYPTO_EX_INDEX_ENGINE
 10

	)

105 
	#CRYPTO_EX_INDEX_UI
 11

	)

106 
	#CRYPTO_EX_INDEX_BIO
 12

	)

107 
	#CRYPTO_EX_INDEX_APP
 13

	)

108 
	#CRYPTO_EX_INDEX_UI_METHOD
 14

	)

109 
	#CRYPTO_EX_INDEX_DRBG
 15

	)

110 
	#CRYPTO_EX_INDEX__COUNT
 16

	)

113 
	#OPENSSL_mÆloc_öô
(Ë0Ë

	)

115 
CRYPTO_mem_˘æ
(
mode
);

117 
	#OPENSSL_mÆloc
(
num
) \

118 
	`CRYPTO_mÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

119 
	#OPENSSL_zÆloc
(
num
) \

120 
	`CRYPTO_zÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

121 
	#OPENSSL_ªÆloc
(
addr
, 
num
) \

122 
	`CRYPTO_ªÆloc
(
addr
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

123 
	#OPENSSL_˛ór_ªÆloc
(
addr
, 
ﬁd_num
, 
num
) \

124 
	`CRYPTO_˛ór_ªÆloc
(
addr
, 
ﬁd_num
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

125 
	#OPENSSL_˛ór_‰ì
(
addr
, 
num
) \

126 
	`CRYPTO_˛ór_‰ì
(
addr
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

127 
	#OPENSSL_‰ì
(
addr
) \

128 
	`CRYPTO_‰ì
(
addr
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

129 
	#OPENSSL_memdup
(
°r
, 
s
) \

130 
	`CRYPTO_memdup
((
°r
), 
s
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

131 
	#OPENSSL_°rdup
(
°r
) \

132 
	`CRYPTO_°rdup
(
°r
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

133 
	#OPENSSL_°∫dup
(
°r
, 
n
) \

134 
	`CRYPTO_°∫dup
(
°r
, 
n
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

135 
	#OPENSSL_£cuª_mÆloc
(
num
) \

136 
	`CRYPTO_£cuª_mÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

137 
	#OPENSSL_£cuª_zÆloc
(
num
) \

138 
	`CRYPTO_£cuª_zÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

139 
	#OPENSSL_£cuª_‰ì
(
addr
) \

140 
	`CRYPTO_£cuª_‰ì
(
addr
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

141 
	#OPENSSL_£cuª_˛ór_‰ì
(
addr
, 
num
) \

142 
	`CRYPTO_£cuª_˛ór_‰ì
(
addr
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

143 
	#OPENSSL_£cuª_a˘uÆ_size
(
±r
) \

144 
	`CRYPTO_£cuª_a˘uÆ_size
(
±r
)

	)

146 
size_t
 
OPENSSL_°æ˝y
(*
d°
, c⁄° *
§c
, size_à
siz
);

147 
size_t
 
OPENSSL_°æˇt
(*
d°
, c⁄° *
§c
, size_à
siz
);

148 
size_t
 
OPENSSL_°∫Àn
(c⁄° *
°r
, size_à
maxÀn
);

149 *
OPENSSL_buf2hex°r
(c⁄° *
buf„r
, 
Àn
);

150 *
OPENSSL_hex°r2buf
(c⁄° *
°r
, *
Àn
);

151 
OPENSSL_hexch¨2öt
(
c
);

153 
	#OPENSSL_MALLOC_MAX_NELEMS
(
ty≥
Ë(((1U<<(()*8-1))-1)/—y≥))

	)

155 
O≥nSSL_vîsi⁄_num
();

156 c⁄° *
O≥nSSL_vîsi⁄
(
ty≥
);

157 
	#OPENSSL_VERSION
 0

	)

158 
	#OPENSSL_CFLAGS
 1

	)

159 
	#OPENSSL_BUILT_ON
 2

	)

160 
	#OPENSSL_PLATFORM
 3

	)

161 
	#OPENSSL_DIR
 4

	)

162 
	#OPENSSL_ENGINES_DIR
 5

	)

164 
OPENSSL_is£tugid
();

166 
	tCRYPTO_EX_√w
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

167 
	tidx
, 
	t¨gl
, *
	t¨gp
);

168 
	tCRYPTO_EX_‰ì
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

169 
	tidx
, 
	t¨gl
, *
	t¨gp
);

170 
	tCRYPTO_EX_dup
 (
	tCRYPTO_EX_DATA
 *
	tto
, c⁄° CRYPTO_EX_DATA *
	t‰om
,

171 *
	t‰om_d
, 
	tidx
, 
	t¨gl
, *
	t¨gp
);

172 
__owur
 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

173 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

174 
CRYPTO_EX_‰ì
 *
‰ì_func
);

176 
CRYPTO_‰ì_ex_ödex
(
˛ass_ödex
, 
idx
);

182 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

183 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

184 c⁄° 
CRYPTO_EX_DATA
 *
‰om
);

186 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

192 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

193 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
, 
idx
);

195 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

200 
	#CRYPTO_˛ónup_Æl_ex_d©a
(Ë0Ë

	)

212 
	#CRYPTO_num_locks
(Ë(1)

	)

213 
	#CRYPTO_£t_lockög_ˇŒback
(
func
)

	)

214 
	#CRYPTO_gë_lockög_ˇŒback
(Ë(
NULL
)

	)

215 
	#CRYPTO_£t_add_lock_ˇŒback
(
func
)

	)

216 
	#CRYPTO_gë_add_lock_ˇŒback
(Ë(
NULL
)

	)

223 
	#CRYPTO_LOCK
 1

	)

224 
	#CRYPTO_UNLOCK
 2

	)

225 
	#CRYPTO_READ
 4

	)

226 
	#CRYPTO_WRITE
 8

	)

229 
	s¸y±o_thªadid_°
 {

230 
	gdummy
;

231 } 
	tCRYPTO_THREADID
;

233 
	#CRYPTO_THREADID_£t_numîic
(
id
, 
vÆ
)

	)

234 
	#CRYPTO_THREADID_£t_poöãr
(
id
, 
±r
)

	)

235 
	#CRYPTO_THREADID_£t_ˇŒback
(
thªadid_func
Ë(0)

	)

236 
	#CRYPTO_THREADID_gë_ˇŒback
(Ë(
NULL
)

	)

237 
	#CRYPTO_THREADID_cuºít
(
id
)

	)

238 
	#CRYPTO_THREADID_cmp
(
a
, 
b
Ë(-1)

	)

239 
	#CRYPTO_THREADID_˝y
(
de°
, 
§c
)

	)

240 
	#CRYPTO_THREADID_hash
(
id
Ë(0UL)

	)

242 #i‡
OPENSSL_API_COMPAT
 < 0x10000000L

243 
	#CRYPTO_£t_id_ˇŒback
(
func
)

	)

244 
	#CRYPTO_gë_id_ˇŒback
(Ë(
NULL
)

	)

245 
	#CRYPTO_thªad_id
(Ë(0UL)

	)

248 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
dyn_¸óã_fun˘i⁄
)

	)

249 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
(
dyn_lock_fun˘i⁄
)

	)

250 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
(
dyn_de°roy_fun˘i⁄
)

	)

251 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
(Ë(
NULL
)

	)

252 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
(Ë(
NULL
)

	)

253 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
(Ë(
NULL
)

	)

256 
CRYPTO_£t_mem_fun˘i⁄s
(

257 *(*
m
Ë(
size_t
, const *, ),

258 *(*
r
Ë(*, 
size_t
, const *, ),

259 (*
f
) (*, const *, ));

260 
CRYPTO_£t_mem_debug
(
Êag
);

261 
CRYPTO_gë_mem_fun˘i⁄s
(

262 *(**
m
Ë(
size_t
, const *, ),

263 *(**
r
Ë(*, 
size_t
, const *, ),

264 (**
f
) (*, const *, ));

266 *
CRYPTO_mÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

267 *
CRYPTO_zÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

268 *
CRYPTO_memdup
(c⁄° *
°r
, 
size_t
 
siz
, c⁄° *
fûe
, 
löe
);

269 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

270 *
CRYPTO_°∫dup
(c⁄° *
°r
, 
size_t
 
s
, c⁄° *
fûe
, 
löe
);

271 
CRYPTO_‰ì
(*
±r
, c⁄° *
fûe
, 
löe
);

272 
CRYPTO_˛ór_‰ì
(*
±r
, 
size_t
 
num
, c⁄° *
fûe
, 
löe
);

273 *
CRYPTO_ªÆloc
(*
addr
, 
size_t
 
num
, c⁄° *
fûe
, 
löe
);

274 *
CRYPTO_˛ór_ªÆloc
(*
addr
, 
size_t
 
ﬁd_num
, size_à
num
,

275 c⁄° *
fûe
, 
löe
);

277 
CRYPTO_£cuª_mÆloc_öô
(
size_t
 
sz
, 
mösize
);

278 
CRYPTO_£cuª_mÆloc_d⁄e
();

279 *
CRYPTO_£cuª_mÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

280 *
CRYPTO_£cuª_zÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

281 
CRYPTO_£cuª_‰ì
(*
±r
, c⁄° *
fûe
, 
löe
);

282 
CRYPTO_£cuª_˛ór_‰ì
(*
±r
, 
size_t
 
num
,

283 c⁄° *
fûe
, 
löe
);

284 
CRYPTO_£cuª_Æloˇãd
(c⁄° *
±r
);

285 
CRYPTO_£cuª_mÆloc_öôülized
();

286 
size_t
 
CRYPTO_£cuª_a˘uÆ_size
(*
±r
);

287 
size_t
 
CRYPTO_£cuª_u£d
();

289 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

291 #i‚de‡
OPENSSL_NO_CRYPTO_MDEBUG


292 
	#OPENSSL_mem_debug_push
(
öfo
) \

293 
	`CRYPTO_mem_debug_push
(
öfo
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

294 
	#OPENSSL_mem_debug_p›
() \

295 
	`CRYPTO_mem_debug_p›
()

	)

296 
CRYPTO_mem_debug_push
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

297 
CRYPTO_mem_debug_p›
();

298 
CRYPTO_gë_Æloc_cou¡s
(*
mcou¡
, *
rcou¡
, *
fcou¡
);

306 
CRYPTO_mem_debug_mÆloc
(*
addr
, 
size_t
 
num
, 
Êag
,

307 c⁄° *
fûe
, 
löe
);

308 
CRYPTO_mem_debug_ªÆloc
(*
addr1
, *
addr2
, 
size_t
 
num
, 
Êag
,

309 c⁄° *
fûe
, 
löe
);

310 
CRYPTO_mem_debug_‰ì
(*
addr
, 
Êag
,

311 c⁄° *
fûe
, 
löe
);

313 
CRYPTO_mem_Àaks_cb
((*
cb
Ë(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

314 *
u
);

315 #i‚de‡
OPENSSL_NO_STDIO


316 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

318 
CRYPTO_mem_Àaks
(
BIO
 *
bio
);

322 
os¶_n‹ëu∫
 
OPENSSL_dõ
(c⁄° *
as£πi⁄
, c⁄° *
fûe
, 
löe
);

323 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

324 
	#O≥nSSLDõ
(
f
,
l
,
a
Ë
	`OPENSSL_dõ
(◊),(f),÷))

	)

326 
	#OPENSSL_as£π
(
e
) \

327 ()((
e
Ë? 0 : (
	`OPENSSL_dõ
("as£πi⁄ faûed: " #e, 
OPENSSL_FILE
, 
OPENSSL_LINE
), 1))

	)

329 
OPENSSL_is£rvi˚
();

331 
FIPS_mode
();

332 
FIPS_mode_£t
(
r
);

334 
OPENSSL_öô
();

335 #ifde‡
OPENSSL_SYS_UNIX


336 
OPENSSL_f‹k_¥ï¨e
();

337 
OPENSSL_f‹k_∑ª¡
();

338 
OPENSSL_f‹k_chûd
();

341 
tm
 *
OPENSSL_gmtime
(c⁄° 
time_t
 *
timî
, tm *
ªsu…
);

342 
OPENSSL_gmtime_adj
(
tm
 *tm, 
off£t_day
, 
off£t_£c
);

343 
OPENSSL_gmtime_diff
(*
pday
, *
p£c
,

344 c⁄° 
tm
 *
‰om
, c⁄° tm *
to
);

353 
CRYPTO_memcmp
(c⁄° * 
ö_a
, c⁄° * 
ö_b
, 
size_t
 
Àn
);

356 
	#OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS
 0x00000001L

	)

357 
	#OPENSSL_INIT_LOAD_CRYPTO_STRINGS
 0x00000002L

	)

358 
	#OPENSSL_INIT_ADD_ALL_CIPHERS
 0x00000004L

	)

359 
	#OPENSSL_INIT_ADD_ALL_DIGESTS
 0x00000008L

	)

360 
	#OPENSSL_INIT_NO_ADD_ALL_CIPHERS
 0x00000010L

	)

361 
	#OPENSSL_INIT_NO_ADD_ALL_DIGESTS
 0x00000020L

	)

362 
	#OPENSSL_INIT_LOAD_CONFIG
 0x00000040L

	)

363 
	#OPENSSL_INIT_NO_LOAD_CONFIG
 0x00000080L

	)

364 
	#OPENSSL_INIT_ASYNC
 0x00000100L

	)

365 
	#OPENSSL_INIT_ENGINE_RDRAND
 0x00000200L

	)

366 
	#OPENSSL_INIT_ENGINE_DYNAMIC
 0x00000400L

	)

367 
	#OPENSSL_INIT_ENGINE_OPENSSL
 0x00000800L

	)

368 
	#OPENSSL_INIT_ENGINE_CRYPTODEV
 0x00001000L

	)

369 
	#OPENSSL_INIT_ENGINE_CAPI
 0x00002000L

	)

370 
	#OPENSSL_INIT_ENGINE_PADLOCK
 0x00004000L

	)

371 
	#OPENSSL_INIT_ENGINE_AFALG
 0x00008000L

	)

373 
	#OPENSSL_INIT_ATFORK
 0x00020000L

	)

375 
	#OPENSSL_INIT_NO_ATEXIT
 0x00080000L

	)

380 
	#OPENSSL_INIT_ENGINE_ALL_BUILTIN
 \

381 (
OPENSSL_INIT_ENGINE_RDRAND
 | 
OPENSSL_INIT_ENGINE_DYNAMIC
 \

382 | 
OPENSSL_INIT_ENGINE_CRYPTODEV
 | 
OPENSSL_INIT_ENGINE_CAPI
 | \

383 
OPENSSL_INIT_ENGINE_PADLOCK
)

	)

387 
OPENSSL_˛ónup
();

388 
OPENSSL_öô_¸y±o
(
uöt64_t
 
›ts
, c⁄° 
OPENSSL_INIT_SETTINGS
 *
£âögs
);

389 
OPENSSL_©exô
((*
h™dÀr
)());

390 
OPENSSL_thªad_°›
();

393 
OPENSSL_INIT_SETTINGS
 *
OPENSSL_INIT_√w
();

394 #i‚de‡
OPENSSL_NO_STDIO


395 
OPENSSL_INIT_£t_c⁄fig_fûíame
(
OPENSSL_INIT_SETTINGS
 *
£âögs
,

396 c⁄° *
c⁄fig_fûíame
);

397 
OPENSSL_INIT_£t_c⁄fig_fûe_Êags
(
OPENSSL_INIT_SETTINGS
 *
£âögs
,

398 
Êags
);

399 
OPENSSL_INIT_£t_c⁄fig_≠≤ame
(
OPENSSL_INIT_SETTINGS
 *
£âögs
,

400 c⁄° *
c⁄fig_≠≤ame
);

402 
OPENSSL_INIT_‰ì
(
OPENSSL_INIT_SETTINGS
 *
£âögs
);

404 #i‡
deföed
(
OPENSSL_THREADS
Ë&& !deföed(
CRYPTO_TDEBUG
)

405 #i‡
deföed
(
_WIN32
)

406 #i‡
deföed
(
BASETYPES
Ë|| deföed(
_WINDEF_H
)

408 
DWORD
 
	tCRYPTO_THREAD_LOCAL
;

409 
DWORD
 
	tCRYPTO_THREAD_ID
;

411 
LONG
 
	tCRYPTO_ONCE
;

412 
	#CRYPTO_ONCE_STATIC_INIT
 0

	)

415 
	~<±hªad.h
>

416 
±hªad_⁄˚_t
 
	tCRYPTO_ONCE
;

417 
±hªad_key_t
 
	tCRYPTO_THREAD_LOCAL
;

418 
±hªad_t
 
	tCRYPTO_THREAD_ID
;

420 
	#CRYPTO_ONCE_STATIC_INIT
 
PTHREAD_ONCE_INIT


	)

424 #i‡!
deföed
(
CRYPTO_ONCE_STATIC_INIT
)

425 
	tCRYPTO_ONCE
;

426 
	tCRYPTO_THREAD_LOCAL
;

427 
	tCRYPTO_THREAD_ID
;

428 
	#CRYPTO_ONCE_STATIC_INIT
 0

	)

431 
CRYPTO_THREAD_run_⁄˚
(
CRYPTO_ONCE
 *
⁄˚
, (*
öô
)());

433 
CRYPTO_THREAD_öô_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
, (*
˛ónup
)(*));

434 *
CRYPTO_THREAD_gë_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
);

435 
CRYPTO_THREAD_£t_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
, *
vÆ
);

436 
CRYPTO_THREAD_˛ónup_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
);

438 
CRYPTO_THREAD_ID
 
CRYPTO_THREAD_gë_cuºít_id
();

439 
CRYPTO_THREAD_com∑ª_id
(
CRYPTO_THREAD_ID
 
a
, CRYPTO_THREAD_ID 
b
);

442 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ct.h

10 #i‚de‡
HEADER_CT_H


11 
	#HEADER_CT_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_CT


16 
	~<›ís¶/os¶_typ.h
>

17 
	~<›ís¶/ß„°ack.h
>

18 
	~<›ís¶/x509.h
>

19 
	~<›ís¶/˘îr.h
>

20 #ifde‡ 
__˝lu•lus


26 
	#SCT_MIN_RSA_BITS
 2048

	)

29 
	#CT_V1_HASHLEN
 
SHA256_DIGEST_LENGTH


	)

32 
CT_LOG_ENTRY_TYPE_NOT_SET
 = -1,

33 
CT_LOG_ENTRY_TYPE_X509
 = 0,

34 
CT_LOG_ENTRY_TYPE_PRECERT
 = 1

35 } 
	t˘_log_íåy_ty≥_t
;

38 
SCT_VERSION_NOT_SET
 = -1,

39 
SCT_VERSION_V1
 = 0

40 } 
	ts˘_vîsi⁄_t
;

43 
SCT_SOURCE_UNKNOWN
,

44 
SCT_SOURCE_TLS_EXTENSION
,

45 
SCT_SOURCE_X509V3_EXTENSION
,

46 
SCT_SOURCE_OCSP_STAPLED_RESPONSE


47 } 
	ts˘_sour˚_t
;

50 
SCT_VALIDATION_STATUS_NOT_SET
,

51 
SCT_VALIDATION_STATUS_UNKNOWN_LOG
,

52 
SCT_VALIDATION_STATUS_VALID
,

53 
SCT_VALIDATION_STATUS_INVALID
,

54 
SCT_VALIDATION_STATUS_UNVERIFIED
,

55 
SCT_VALIDATION_STATUS_UNKNOWN_VERSION


56 } 
	ts˘_vÆid©i⁄_°©us_t
;

58 
DEFINE_STACK_OF
(
SCT
)

59 
DEFINE_STACK_OF
(
CTLOG
)

70 
CT_POLICY_EVAL_CTX
 *
CT_POLICY_EVAL_CTX_√w
();

73 
CT_POLICY_EVAL_CTX_‰ì
(
CT_POLICY_EVAL_CTX
 *
˘x
);

76 
X509
* 
CT_POLICY_EVAL_CTX_gë0_˚π
(c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

83 
CT_POLICY_EVAL_CTX_£t1_˚π
(
CT_POLICY_EVAL_CTX
 *
˘x
, 
X509
 *
˚π
);

86 
X509
* 
CT_POLICY_EVAL_CTX_gë0_issuî
(c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

93 
CT_POLICY_EVAL_CTX_£t1_issuî
(
CT_POLICY_EVAL_CTX
 *
˘x
, 
X509
 *
issuî
);

96 c⁄° 
CTLOG_STORE
 *
CT_POLICY_EVAL_CTX_gë0_log_°‹e
(c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

99 
CT_POLICY_EVAL_CTX_£t_sh¨ed_CTLOG_STORE
(
CT_POLICY_EVAL_CTX
 *
˘x
,

100 
CTLOG_STORE
 *
log_°‹e
);

107 
uöt64_t
 
CT_POLICY_EVAL_CTX_gë_time
(c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

115 
CT_POLICY_EVAL_CTX_£t_time
(
CT_POLICY_EVAL_CTX
 *
˘x
, 
uöt64_t
 
time_ö_ms
);

125 
SCT
 *
SCT_√w
();

131 
SCT
 *
SCT_√w_‰om_ba£64
(
vîsi⁄
,

132 c⁄° *
logid_ba£64
,

133 
˘_log_íåy_ty≥_t
 
íåy_ty≥
,

134 
uöt64_t
 
time°amp
,

135 c⁄° *
exãnsi⁄s_ba£64
,

136 c⁄° *
sig«tuª_ba£64
);

141 
SCT_‰ì
(
SCT
 *
s˘
);

147 
SCT_LIST_‰ì
(
STACK_OF
(
SCT
Ë*
a
);

152 
s˘_vîsi⁄_t
 
SCT_gë_vîsi⁄
(c⁄° 
SCT
 *
s˘
);

158 
__owur
 
SCT_£t_vîsi⁄
(
SCT
 *
s˘
, 
s˘_vîsi⁄_t
 
vîsi⁄
);

163 
˘_log_íåy_ty≥_t
 
SCT_gë_log_íåy_ty≥
(c⁄° 
SCT
 *
s˘
);

169 
__owur
 
SCT_£t_log_íåy_ty≥
(
SCT
 *
s˘
, 
˘_log_íåy_ty≥_t
 
íåy_ty≥
);

176 
size_t
 
SCT_gë0_log_id
(c⁄° 
SCT
 *
s˘
, **
log_id
);

183 
__owur
 
SCT_£t0_log_id
(
SCT
 *
s˘
, *
log_id
, 
size_t
 
log_id_Àn
);

190 
__owur
 
SCT_£t1_log_id
(
SCT
 *
s˘
, c⁄° *
log_id
,

191 
size_t
 
log_id_Àn
);

196 
uöt64_t
 
SCT_gë_time°amp
(c⁄° 
SCT
 *
s˘
);

201 
SCT_£t_time°amp
(
SCT
 *
s˘
, 
uöt64_t
 
time°amp
);

208 
SCT_gë_sig«tuª_nid
(c⁄° 
SCT
 *
s˘
);

216 
__owur
 
SCT_£t_sig«tuª_nid
(
SCT
 *
s˘
, 
nid
);

223 
size_t
 
SCT_gë0_exãnsi⁄s
(c⁄° 
SCT
 *
s˘
, **
ext
);

229 
SCT_£t0_exãnsi⁄s
(
SCT
 *
s˘
, *
ext
, 
size_t
 
ext_Àn
);

236 
__owur
 
SCT_£t1_exãnsi⁄s
(
SCT
 *
s˘
, c⁄° *
ext
,

237 
size_t
 
ext_Àn
);

244 
size_t
 
SCT_gë0_sig«tuª
(c⁄° 
SCT
 *
s˘
, **
sig
);

250 
SCT_£t0_sig«tuª
(
SCT
 *
s˘
, *
sig
, 
size_t
 
sig_Àn
);

256 
__owur
 
SCT_£t1_sig«tuª
(
SCT
 *
s˘
, c⁄° *
sig
,

257 
size_t
 
sig_Àn
);

262 
s˘_sour˚_t
 
SCT_gë_sour˚
(c⁄° 
SCT
 *
s˘
);

268 
__owur
 
SCT_£t_sour˚
(
SCT
 *
s˘
, 
s˘_sour˚_t
 
sour˚
);

273 c⁄° *
SCT_vÆid©i⁄_°©us_°rög
(c⁄° 
SCT
 *
s˘
);

281 
SCT_¥öt
(c⁄° 
SCT
 *
s˘
, 
BIO
 *
out
, 
ödít
, c⁄° 
CTLOG_STORE
 *
logs
);

290 
SCT_LIST_¥öt
(c⁄° 
STACK_OF
(
SCT
Ë*
s˘_li°
, 
BIO
 *
out
, 
ödít
,

291 c⁄° *
£∑øt‹
, c⁄° 
CTLOG_STORE
 *
logs
);

297 
s˘_vÆid©i⁄_°©us_t
 
SCT_gë_vÆid©i⁄_°©us
(c⁄° 
SCT
 *
s˘
);

306 
__owur
 
SCT_vÆid©e
(
SCT
 *
s˘
, c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

315 
__owur
 
SCT_LIST_vÆid©e
(c⁄° 
STACK_OF
(
SCT
Ë*
s˘s
,

316 
CT_POLICY_EVAL_CTX
 *
˘x
);

335 
__owur
 
i2o_SCT_LIST
(c⁄° 
STACK_OF
(
SCT
Ë*
a
, **
µ
);

347 
STACK_OF
(
SCT
Ë*
o2i_SCT_LIST
(STACK_OF(SCTË**
a
, c⁄° **
µ
,

348 
size_t
 
Àn
);

362 
__owur
 
i2d_SCT_LIST
(c⁄° 
STACK_OF
(
SCT
Ë*
a
, **
µ
);

374 
STACK_OF
(
SCT
Ë*
d2i_SCT_LIST
(STACK_OF(SCTË**
a
, c⁄° **
µ
,

375 
Àn
);

386 
__owur
 
i2o_SCT
(c⁄° 
SCT
 *
s˘
, **
out
);

399 
SCT
 *
o2i_SCT
(SCT **
ps˘
, c⁄° **
ö
, 
size_t
 
Àn
);

411 
CTLOG
 *
CTLOG_√w
(
EVP_PKEY
 *
public_key
, c⁄° *
«me
);

419 
CTLOG_√w_‰om_ba£64
(
CTLOG
 ** 
˘_log
,

420 c⁄° *
pkey_ba£64
, c⁄° *
«me
);

425 
CTLOG_‰ì
(
CTLOG
 *
log
);

428 c⁄° *
CTLOG_gë0_«me
(c⁄° 
CTLOG
 *
log
);

430 
CTLOG_gë0_log_id
(c⁄° 
CTLOG
 *
log
, c⁄° 
uöt8_t
 **
log_id
,

431 
size_t
 *
log_id_Àn
);

433 
EVP_PKEY
 *
CTLOG_gë0_public_key
(c⁄° 
CTLOG
 *
log
);

443 
CTLOG_STORE
 *
CTLOG_STORE_√w
();

448 
CTLOG_STORE_‰ì
(
CTLOG_STORE
 *
°‹e
);

454 c⁄° 
CTLOG
 *
CTLOG_STORE_gë0_log_by_id
(c⁄° 
CTLOG_STORE
 *
°‹e
,

455 c⁄° 
uöt8_t
 *
log_id
,

456 
size_t
 
log_id_Àn
);

462 
__owur
 
CTLOG_STORE_lﬂd_fûe
(
CTLOG_STORE
 *
°‹e
, c⁄° *
fûe
);

468 
__owur
 
CTLOG_STORE_lﬂd_deÁu…_fûe
(
CTLOG_STORE
 *
°‹e
);

470 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dh.h

10 #i‚de‡
HEADER_DH_H


11 
	#HEADER_DH_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_DH


16 
	~<›ís¶/e_os2.h
>

17 
	~<›ís¶/bio.h
>

18 
	~<›ís¶/a¢1.h
>

19 
	~<›ís¶/os¶_typ.h
>

20 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

21 
	~<›ís¶/bn.h
>

23 
	~<›ís¶/dhîr.h
>

25 #ifde‡ 
__˝lu•lus


29 #i‚de‡
OPENSSL_DH_MAX_MODULUS_BITS


30 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

33 
	#OPENSSL_DH_FIPS_MIN_MODULUS_BITS
 1024

	)

35 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

37 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

41 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x00

	)

51 
	#DH_FLAG_FIPS_METHOD
 0x0400

	)

59 
	#DH_FLAG_NON_FIPS_ALLOW
 0x0400

	)

65 
DECLARE_ASN1_ITEM
(
DH∑øms
)

67 
	#DH_GENERATOR_2
 2

	)

69 
	#DH_GENERATOR_5
 5

	)

72 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

73 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

74 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

75 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

76 
	#DH_CHECK_Q_NOT_PRIME
 0x10

	)

77 
	#DH_CHECK_INVALID_Q_VALUE
 0x20

	)

78 
	#DH_CHECK_INVALID_J_VALUE
 0x40

	)

81 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

82 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

83 
	#DH_CHECK_PUBKEY_INVALID
 0x04

	)

89 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

91 
	#d2i_DH∑øms_Â
(
Â
,
x
) \

92 (
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

93 (*(*)())
d2i_DH∑øms
, \

94 (
Â
), \

95 (**)(
x
))

	)

96 
	#i2d_DH∑øms_Â
(
Â
,
x
) \

97 
	`ASN1_i2d_Â
(
i2d_DH∑øms
,(
Â
), (*)(
x
))

	)

98 
	#d2i_DH∑øms_bio
(
bp
,
x
) \

99 
	`ASN1_d2i_bio_of
(
DH
, 
DH_√w
, 
d2i_DH∑øms
, 
bp
, 
x
)

	)

100 
	#i2d_DH∑øms_bio
(
bp
,
x
) \

101 
	`ASN1_i2d_bio_of_c⁄°
(
DH
,
i2d_DH∑øms
,
bp
,
x
)

	)

103 
	#d2i_DHx∑øms_Â
(
Â
,
x
) \

104 (
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

105 (*(*)())
d2i_DHx∑øms
, \

106 (
Â
), \

107 (**)(
x
))

	)

108 
	#i2d_DHx∑øms_Â
(
Â
,
x
) \

109 
	`ASN1_i2d_Â
(
i2d_DHx∑øms
,(
Â
), (*)(
x
))

	)

110 
	#d2i_DHx∑øms_bio
(
bp
,
x
) \

111 
	`ASN1_d2i_bio_of
(
DH
, 
DH_√w
, 
d2i_DHx∑øms
, 
bp
, 
x
)

	)

112 
	#i2d_DHx∑øms_bio
(
bp
,
x
) \

113 
	`ASN1_i2d_bio_of_c⁄°
(
DH
, 
i2d_DHx∑øms
, 
bp
, 
x
)

	)

115 
DH
 *
DH∑øms_dup
(DH *);

117 c⁄° 
DH_METHOD
 *
DH_O≥nSSL
();

119 
DH_£t_deÁu…_mëhod
(c⁄° 
DH_METHOD
 *
mëh
);

120 c⁄° 
DH_METHOD
 *
DH_gë_deÁu…_mëhod
();

121 
DH_£t_mëhod
(
DH
 *
dh
, c⁄° 
DH_METHOD
 *
mëh
);

122 
DH
 *
DH_√w_mëhod
(
ENGINE
 *
ígöe
);

124 
DH
 *
DH_√w
();

125 
DH_‰ì
(
DH
 *
dh
);

126 
DH_up_ªf
(
DH
 *
dh
);

127 
DH_bôs
(c⁄° 
DH
 *
dh
);

128 
DH_size
(c⁄° 
DH
 *
dh
);

129 
DH_£curôy_bôs
(c⁄° 
DH
 *
dh
);

130 
	#DH_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

131 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_DH
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

132 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
¨g
);

133 *
DH_gë_ex_d©a
(
DH
 *
d
, 
idx
);

136 
DEPRECATEDIN_0_9_8
(
DH
 *
DH_gíî©e_∑ømëîs
(
¥ime_Àn
, 
gíî©‹
,

137 (*
ˇŒback
) (, ,

139 *
cb_¨g
))

142 
DH_gíî©e_∑ømëîs_ex
(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
,

143 
BN_GENCB
 *
cb
);

145 
DH_check_∑øms_ex
(c⁄° 
DH
 *
dh
);

146 
DH_check_ex
(c⁄° 
DH
 *
dh
);

147 
DH_check_pub_key_ex
(c⁄° 
DH
 *
dh
, c⁄° 
BIGNUM
 *
pub_key
);

148 
DH_check_∑øms
(c⁄° 
DH
 *
dh
, *
ªt
);

149 
DH_check
(c⁄° 
DH
 *
dh
, *
codes
);

150 
DH_check_pub_key
(c⁄° 
DH
 *
dh
, c⁄° 
BIGNUM
 *
pub_key
, *
codes
);

151 
DH_gíî©e_key
(
DH
 *
dh
);

152 
DH_compuã_key
(*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

153 
DH_compuã_key_∑dded
(*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

154 
DH
 *
d2i_DH∑øms
(DH **
a
, c⁄° **
µ
, 
Àngth
);

155 
i2d_DH∑øms
(c⁄° 
DH
 *
a
, **
µ
);

156 
DH
 *
d2i_DHx∑øms
(DH **
a
, c⁄° **
µ
, 
Àngth
);

157 
i2d_DHx∑øms
(c⁄° 
DH
 *
a
, **
µ
);

158 #i‚de‡
OPENSSL_NO_STDIO


159 
DH∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DH
 *
x
);

161 
DH∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DH
 *
x
);

164 
DH
 *
DH_gë_1024_160
();

165 
DH
 *
DH_gë_2048_224
();

166 
DH
 *
DH_gë_2048_256
();

169 
DH
 *
DH_√w_by_nid
(
nid
);

170 
DH_gë_nid
(c⁄° 
DH
 *
dh
);

172 #i‚de‡
OPENSSL_NO_CMS


174 
DH_KDF_X9_42
(*
out
, 
size_t
 
ouéí
,

175 c⁄° *
Z
, 
size_t
 
ZÀn
,

176 
ASN1_OBJECT
 *
key_oid
,

177 c⁄° *
ukm
, 
size_t
 
ukmÀn
, c⁄° 
EVP_MD
 *
md
);

180 
DH_gë0_pqg
(c⁄° 
DH
 *
dh
,

181 c⁄° 
BIGNUM
 **
p
, c⁄° BIGNUM **
q
, c⁄° BIGNUM **
g
);

182 
DH_£t0_pqg
(
DH
 *
dh
, 
BIGNUM
 *
p
, BIGNUM *
q
, BIGNUM *
g
);

183 
DH_gë0_key
(c⁄° 
DH
 *
dh
,

184 c⁄° 
BIGNUM
 **
pub_key
, c⁄° BIGNUM **
¥iv_key
);

185 
DH_£t0_key
(
DH
 *
dh
, 
BIGNUM
 *
pub_key
, BIGNUM *
¥iv_key
);

186 c⁄° 
BIGNUM
 *
DH_gë0_p
(c⁄° 
DH
 *
dh
);

187 c⁄° 
BIGNUM
 *
DH_gë0_q
(c⁄° 
DH
 *
dh
);

188 c⁄° 
BIGNUM
 *
DH_gë0_g
(c⁄° 
DH
 *
dh
);

189 c⁄° 
BIGNUM
 *
DH_gë0_¥iv_key
(c⁄° 
DH
 *
dh
);

190 c⁄° 
BIGNUM
 *
DH_gë0_pub_key
(c⁄° 
DH
 *
dh
);

191 
DH_˛ór_Êags
(
DH
 *
dh
, 
Êags
);

192 
DH_ã°_Êags
(c⁄° 
DH
 *
dh
, 
Êags
);

193 
DH_£t_Êags
(
DH
 *
dh
, 
Êags
);

194 
ENGINE
 *
DH_gë0_ígöe
(
DH
 *
d
);

195 
DH_gë_Àngth
(c⁄° 
DH
 *
dh
);

196 
DH_£t_Àngth
(
DH
 *
dh
, 
Àngth
);

198 
DH_METHOD
 *
DH_mëh_√w
(c⁄° *
«me
, 
Êags
);

199 
DH_mëh_‰ì
(
DH_METHOD
 *
dhm
);

200 
DH_METHOD
 *
DH_mëh_dup
(c⁄° DH_METHOD *
dhm
);

201 c⁄° *
DH_mëh_gë0_«me
(c⁄° 
DH_METHOD
 *
dhm
);

202 
DH_mëh_£t1_«me
(
DH_METHOD
 *
dhm
, c⁄° *
«me
);

203 
DH_mëh_gë_Êags
(c⁄° 
DH_METHOD
 *
dhm
);

204 
DH_mëh_£t_Êags
(
DH_METHOD
 *
dhm
, 
Êags
);

205 *
DH_mëh_gë0_≠p_d©a
(c⁄° 
DH_METHOD
 *
dhm
);

206 
DH_mëh_£t0_≠p_d©a
(
DH_METHOD
 *
dhm
, *
≠p_d©a
);

207 (*
DH_mëh_gë_gíî©e_key
(c⁄° 
DH_METHOD
 *
dhm
)Ë(
DH
 *);

208 
DH_mëh_£t_gíî©e_key
(
DH_METHOD
 *
dhm
, (*
gíî©e_key
Ë(
DH
 *));

209 (*
DH_mëh_gë_compuã_key
(c⁄° 
DH_METHOD
 *
dhm
))

210 (*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

211 
DH_mëh_£t_compuã_key
(
DH_METHOD
 *
dhm
,

212 (*
compuã_key
Ë(*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
));

213 (*
DH_mëh_gë_bn_mod_exp
(c⁄° 
DH_METHOD
 *
dhm
))

214 (c⁄° 
DH
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *, const BIGNUM *,

215 
BN_CTX
 *, 
BN_MONT_CTX
 *);

216 
DH_mëh_£t_bn_mod_exp
(
DH_METHOD
 *
dhm
,

217 (*
bn_mod_exp
Ë(c⁄° 
DH
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *,

218 c⁄° 
BIGNUM
 *, 
BN_CTX
 *, 
BN_MONT_CTX
 *));

219 (*
DH_mëh_gë_öô
(c⁄° 
DH_METHOD
 *
dhm
))(
DH
 *);

220 
DH_mëh_£t_öô
(
DH_METHOD
 *
dhm
, (*
öô
)(
DH
 *));

221 (*
DH_mëh_gë_föish
(c⁄° 
DH_METHOD
 *
dhm
)Ë(
DH
 *);

222 
DH_mëh_£t_föish
(
DH_METHOD
 *
dhm
, (*
föish
Ë(
DH
 *));

223 (*
DH_mëh_gë_gíî©e_∑øms
(c⁄° 
DH_METHOD
 *
dhm
))

224 (
DH
 *, , , 
BN_GENCB
 *);

225 
DH_mëh_£t_gíî©e_∑øms
(
DH_METHOD
 *
dhm
,

226 (*
gíî©e_∑øms
Ë(
DH
 *, , , 
BN_GENCB
 *));

229 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_¥ime_Àn
(
˘x
, 
Àn
) \

230 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

231 
EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
, 
Àn
, 
NULL
)

	)

233 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_sub¥ime_Àn
(
˘x
, 
Àn
) \

234 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

235 
EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN
, 
Àn
, 
NULL
)

	)

237 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_ty≥
(
˘x
, 
typ
) \

238 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

239 
EVP_PKEY_CTRL_DH_PARAMGEN_TYPE
, 
typ
, 
NULL
)

	)

241 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_gíî©‹
(
˘x
, 
gí
) \

242 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

243 
EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
, 
gí
, 
NULL
)

	)

245 
	#EVP_PKEY_CTX_£t_dh_rfc5114
(
˘x
, 
gí
) \

246 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, 
EVP_PKEY_OP_PARAMGEN
, \

247 
EVP_PKEY_CTRL_DH_RFC5114
, 
gí
, 
NULL
)

	)

249 
	#EVP_PKEY_CTX_£t_dhx_rfc5114
(
˘x
, 
gí
) \

250 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, 
EVP_PKEY_OP_PARAMGEN
, \

251 
EVP_PKEY_CTRL_DH_RFC5114
, 
gí
, 
NULL
)

	)

253 
	#EVP_PKEY_CTX_£t_dh_nid
(
˘x
, 
nid
) \

254 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, \

255 
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
, \

256 
EVP_PKEY_CTRL_DH_NID
, 
nid
, 
NULL
)

	)

258 
	#EVP_PKEY_CTX_£t_dh_∑d
(
˘x
, 
∑d
) \

259 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_DERIVE
, \

260 
EVP_PKEY_CTRL_DH_PAD
, 
∑d
, 
NULL
)

	)

262 
	#EVP_PKEY_CTX_£t_dh_kdf_ty≥
(
˘x
, 
kdf
) \

263 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

264 
EVP_PKEY_OP_DERIVE
, \

265 
EVP_PKEY_CTRL_DH_KDF_TYPE
, 
kdf
, 
NULL
)

	)

267 
	#EVP_PKEY_CTX_gë_dh_kdf_ty≥
(
˘x
) \

268 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

269 
EVP_PKEY_OP_DERIVE
, \

270 
EVP_PKEY_CTRL_DH_KDF_TYPE
, -2, 
NULL
)

	)

272 
	#EVP_PKEY_CTX_£t0_dh_kdf_oid
(
˘x
, 
oid
) \

273 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

274 
EVP_PKEY_OP_DERIVE
, \

275 
EVP_PKEY_CTRL_DH_KDF_OID
, 0, (*)(
oid
))

	)

277 
	#EVP_PKEY_CTX_gë0_dh_kdf_oid
(
˘x
, 
poid
) \

278 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

279 
EVP_PKEY_OP_DERIVE
, \

280 
EVP_PKEY_CTRL_GET_DH_KDF_OID
, 0, (*)(
poid
))

	)

282 
	#EVP_PKEY_CTX_£t_dh_kdf_md
(
˘x
, 
md
) \

283 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

284 
EVP_PKEY_OP_DERIVE
, \

285 
EVP_PKEY_CTRL_DH_KDF_MD
, 0, (*)(
md
))

	)

287 
	#EVP_PKEY_CTX_gë_dh_kdf_md
(
˘x
, 
pmd
) \

288 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

289 
EVP_PKEY_OP_DERIVE
, \

290 
EVP_PKEY_CTRL_GET_DH_KDF_MD
, 0, (*)(
pmd
))

	)

292 
	#EVP_PKEY_CTX_£t_dh_kdf_ouéí
(
˘x
, 
Àn
) \

293 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

294 
EVP_PKEY_OP_DERIVE
, \

295 
EVP_PKEY_CTRL_DH_KDF_OUTLEN
, 
Àn
, 
NULL
)

	)

297 
	#EVP_PKEY_CTX_gë_dh_kdf_ouéí
(
˘x
, 
∂í
) \

298 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

299 
EVP_PKEY_OP_DERIVE
, \

300 
EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN
, 0, (*)(
∂í
))

	)

302 
	#EVP_PKEY_CTX_£t0_dh_kdf_ukm
(
˘x
, 
p
, 
∂í
) \

303 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

304 
EVP_PKEY_OP_DERIVE
, \

305 
EVP_PKEY_CTRL_DH_KDF_UKM
, 
∂í
, (*)(
p
))

	)

307 
	#EVP_PKEY_CTX_gë0_dh_kdf_ukm
(
˘x
, 
p
) \

308 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

309 
EVP_PKEY_OP_DERIVE
, \

310 
EVP_PKEY_CTRL_GET_DH_KDF_UKM
, 0, (*)(
p
))

	)

312 
	#EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

313 
	#EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

314 
	#EVP_PKEY_CTRL_DH_RFC5114
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

315 
	#EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

316 
	#EVP_PKEY_CTRL_DH_PARAMGEN_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

317 
	#EVP_PKEY_CTRL_DH_KDF_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

318 
	#EVP_PKEY_CTRL_DH_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

319 
	#EVP_PKEY_CTRL_GET_DH_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

320 
	#EVP_PKEY_CTRL_DH_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

321 
	#EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

322 
	#EVP_PKEY_CTRL_DH_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 11)

	)

323 
	#EVP_PKEY_CTRL_GET_DH_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 12)

	)

324 
	#EVP_PKEY_CTRL_DH_KDF_OID
 (
EVP_PKEY_ALG_CTRL
 + 13)

	)

325 
	#EVP_PKEY_CTRL_GET_DH_KDF_OID
 (
EVP_PKEY_ALG_CTRL
 + 14)

	)

326 
	#EVP_PKEY_CTRL_DH_NID
 (
EVP_PKEY_ALG_CTRL
 + 15)

	)

327 
	#EVP_PKEY_CTRL_DH_PAD
 (
EVP_PKEY_ALG_CTRL
 + 16)

	)

330 
	#EVP_PKEY_DH_KDF_NONE
 1

	)

331 #i‚de‡
OPENSSL_NO_CMS


332 
	#EVP_PKEY_DH_KDF_X9_42
 2

	)

336 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dsa.h

10 #i‚de‡
HEADER_DSA_H


11 
	#HEADER_DSA_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_DSA


16 #ifde‡ 
__˝lu•lus


19 
	~<›ís¶/e_os2.h
>

20 
	~<›ís¶/bio.h
>

21 
	~<›ís¶/¸y±o.h
>

22 
	~<›ís¶/os¶_typ.h
>

23 
	~<›ís¶/bn.h
>

24 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

25 
	~<›ís¶/dh.h
>

27 
	~<›ís¶/dßîr.h
>

29 #i‚de‡
OPENSSL_DSA_MAX_MODULUS_BITS


30 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

33 
	#OPENSSL_DSA_FIPS_MIN_MODULUS_BITS
 1024

	)

35 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

36 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

40 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x00

	)

50 
	#DSA_FLAG_FIPS_METHOD
 0x0400

	)

58 
	#DSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

59 
	#DSA_FLAG_FIPS_CHECKED
 0x0800

	)

65 
DSA_SIG_°
 
	tDSA_SIG
;

67 
	#d2i_DSA∑øms_Â
(
Â
,
x
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())
DSA_√w
, \

68 (*(*)())
d2i_DSA∑øms
,(
Â
),(**)(
x
))

	)

69 
	#i2d_DSA∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DSA∑øms
,(fp), \

70 (*)(
x
))

	)

71 
	#d2i_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DSA
,
DSA_√w
,
d2i_DSA∑øms
,bp,x)

	)

72 
	#i2d_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,bp,x)

	)

74 
DSA
 *
DSA∑øms_dup
(DSA *
x
);

75 
DSA_SIG
 *
DSA_SIG_√w
();

76 
DSA_SIG_‰ì
(
DSA_SIG
 *
a
);

77 
i2d_DSA_SIG
(c⁄° 
DSA_SIG
 *
a
, **
µ
);

78 
DSA_SIG
 *
d2i_DSA_SIG
(DSA_SIG **
v
, c⁄° **
µ
, 
Àngth
);

79 
DSA_SIG_gë0
(c⁄° 
DSA_SIG
 *
sig
, c⁄° 
BIGNUM
 **
¥
, c⁄° BIGNUM **
ps
);

80 
DSA_SIG_£t0
(
DSA_SIG
 *
sig
, 
BIGNUM
 *
r
, BIGNUM *
s
);

82 
DSA_SIG
 *
DSA_do_sign
(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

83 
DSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

84 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

86 c⁄° 
DSA_METHOD
 *
DSA_O≥nSSL
();

88 
DSA_£t_deÁu…_mëhod
(c⁄° 
DSA_METHOD
 *);

89 c⁄° 
DSA_METHOD
 *
DSA_gë_deÁu…_mëhod
();

90 
DSA_£t_mëhod
(
DSA
 *
dß
, c⁄° 
DSA_METHOD
 *);

91 c⁄° 
DSA_METHOD
 *
DSA_gë_mëhod
(
DSA
 *
d
);

93 
DSA
 *
DSA_√w
();

94 
DSA
 *
DSA_√w_mëhod
(
ENGINE
 *
ígöe
);

95 
DSA_‰ì
(
DSA
 *
r
);

97 
DSA_up_ªf
(
DSA
 *
r
);

98 
DSA_size
(c⁄° 
DSA
 *);

99 
DSA_bôs
(c⁄° 
DSA
 *
d
);

100 
DSA_£curôy_bôs
(c⁄° 
DSA
 *
d
);

102 
DEPRECATEDIN_1_2_0
(
DSA_sign_£tup
(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
, BIGNUM **
Ω
))

103 
DSA_sign
(
ty≥
, c⁄° *
dg°
, 
dÀn
,

104 *
sig
, *
sigÀn
, 
DSA
 *
dß
);

105 
DSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°_Àn
,

106 c⁄° *
sigbuf
, 
sigÀn
, 
DSA
 *
dß
);

107 
	#DSA_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

108 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_DSA
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

109 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
¨g
);

110 *
DSA_gë_ex_d©a
(
DSA
 *
d
, 
idx
);

112 
DSA
 *
d2i_DSAPublicKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

113 
DSA
 *
d2i_DSAPriv©eKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

114 
DSA
 *
d2i_DSA∑øms
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

117 
DEPRECATEDIN_0_9_8
(
DSA
 *
DSA_gíî©e_∑ømëîs
(
bôs
,

118 *
£ed
,

119 
£ed_Àn
,

120 *
cou¡î_ªt
,

121 *
h_ªt
, 

122 (*
ˇŒback
) (, ,

124 *
cb_¨g
))

127 
DSA_gíî©e_∑ømëîs_ex
(
DSA
 *
dß
, 
bôs
,

128 c⁄° *
£ed
, 
£ed_Àn
,

129 *
cou¡î_ªt
, *
h_ªt
,

130 
BN_GENCB
 *
cb
);

132 
DSA_gíî©e_key
(
DSA
 *
a
);

133 
i2d_DSAPublicKey
(c⁄° 
DSA
 *
a
, **
µ
);

134 
i2d_DSAPriv©eKey
(c⁄° 
DSA
 *
a
, **
µ
);

135 
i2d_DSA∑øms
(c⁄° 
DSA
 *
a
, **
µ
);

137 
DSA∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
);

138 
DSA_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

139 #i‚de‡
OPENSSL_NO_STDIO


140 
DSA∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
x
);

141 
DSA_¥öt_Â
(
FILE
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

144 
	#DSS_¥ime_checks
 64

	)

151 
	#DSA_is_¥ime
(
n
, 
ˇŒback
, 
cb_¨g
) \

152 
	`BN_is_¥ime
(
n
, 
DSS_¥ime_checks
, 
ˇŒback
, 
NULL
, 
cb_¨g
)

	)

154 #i‚de‡
OPENSSL_NO_DH


159 
DH
 *
DSA_dup_DH
(c⁄° 
DSA
 *
r
);

162 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_bôs
(
˘x
, 
nbôs
) \

163 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

164 
EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
, 
nbôs
, 
NULL
)

	)

165 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_q_bôs
(
˘x
, 
qbôs
) \

166 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

167 
EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
, 
qbôs
, 
NULL
)

	)

168 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_md
(
˘x
, 
md
) \

169 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

170 
EVP_PKEY_CTRL_DSA_PARAMGEN_MD
, 0, (*)(
md
))

	)

172 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

173 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

174 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_MD
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

176 
DSA_gë0_pqg
(c⁄° 
DSA
 *
d
,

177 c⁄° 
BIGNUM
 **
p
, c⁄° BIGNUM **
q
, c⁄° BIGNUM **
g
);

178 
DSA_£t0_pqg
(
DSA
 *
d
, 
BIGNUM
 *
p
, BIGNUM *
q
, BIGNUM *
g
);

179 
DSA_gë0_key
(c⁄° 
DSA
 *
d
,

180 c⁄° 
BIGNUM
 **
pub_key
, c⁄° BIGNUM **
¥iv_key
);

181 
DSA_£t0_key
(
DSA
 *
d
, 
BIGNUM
 *
pub_key
, BIGNUM *
¥iv_key
);

182 c⁄° 
BIGNUM
 *
DSA_gë0_p
(c⁄° 
DSA
 *
d
);

183 c⁄° 
BIGNUM
 *
DSA_gë0_q
(c⁄° 
DSA
 *
d
);

184 c⁄° 
BIGNUM
 *
DSA_gë0_g
(c⁄° 
DSA
 *
d
);

185 c⁄° 
BIGNUM
 *
DSA_gë0_pub_key
(c⁄° 
DSA
 *
d
);

186 c⁄° 
BIGNUM
 *
DSA_gë0_¥iv_key
(c⁄° 
DSA
 *
d
);

187 
DSA_˛ór_Êags
(
DSA
 *
d
, 
Êags
);

188 
DSA_ã°_Êags
(c⁄° 
DSA
 *
d
, 
Êags
);

189 
DSA_£t_Êags
(
DSA
 *
d
, 
Êags
);

190 
ENGINE
 *
DSA_gë0_ígöe
(
DSA
 *
d
);

192 
DSA_METHOD
 *
DSA_mëh_√w
(c⁄° *
«me
, 
Êags
);

193 
DSA_mëh_‰ì
(
DSA_METHOD
 *
dßm
);

194 
DSA_METHOD
 *
DSA_mëh_dup
(c⁄° DSA_METHOD *
dßm
);

195 c⁄° *
DSA_mëh_gë0_«me
(c⁄° 
DSA_METHOD
 *
dßm
);

196 
DSA_mëh_£t1_«me
(
DSA_METHOD
 *
dßm
, c⁄° *
«me
);

197 
DSA_mëh_gë_Êags
(c⁄° 
DSA_METHOD
 *
dßm
);

198 
DSA_mëh_£t_Êags
(
DSA_METHOD
 *
dßm
, 
Êags
);

199 *
DSA_mëh_gë0_≠p_d©a
(c⁄° 
DSA_METHOD
 *
dßm
);

200 
DSA_mëh_£t0_≠p_d©a
(
DSA_METHOD
 *
dßm
, *
≠p_d©a
);

201 
DSA_SIG
 *(*
DSA_mëh_gë_sign
(c⁄° 
DSA_METHOD
 *
dßm
))

202 (c⁄° *, , 
DSA
 *);

203 
DSA_mëh_£t_sign
(
DSA_METHOD
 *
dßm
,

204 
DSA_SIG
 *(*
sign
Ë(c⁄° *, , 
DSA
 *));

205 (*
DSA_mëh_gë_sign_£tup
(c⁄° 
DSA_METHOD
 *
dßm
))

206 (
DSA
 *, 
BN_CTX
 *, 
BIGNUM
 **, BIGNUM **);

207 
DSA_mëh_£t_sign_£tup
(
DSA_METHOD
 *
dßm
,

208 (*
sign_£tup
Ë(
DSA
 *, 
BN_CTX
 *, 
BIGNUM
 **, BIGNUM **));

209 (*
DSA_mëh_gë_vîify
(c⁄° 
DSA_METHOD
 *
dßm
))

210 (c⁄° *, , 
DSA_SIG
 *, 
DSA
 *);

211 
DSA_mëh_£t_vîify
(
DSA_METHOD
 *
dßm
,

212 (*
vîify
Ë(c⁄° *, , 
DSA_SIG
 *, 
DSA
 *));

213 (*
DSA_mëh_gë_mod_exp
(c⁄° 
DSA_METHOD
 *
dßm
))

214 (
DSA
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *, const BIGNUM *,

215 c⁄° 
BIGNUM
 *, c⁄° BIGNUM *, 
BN_CTX
 *, 
BN_MONT_CTX
 *);

216 
DSA_mëh_£t_mod_exp
(
DSA_METHOD
 *
dßm
,

217 (*
mod_exp
Ë(
DSA
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *,

218 c⁄° 
BIGNUM
 *, c⁄° BIGNUM *, c⁄° BIGNUM *, 
BN_CTX
 *,

219 
BN_MONT_CTX
 *));

220 (*
DSA_mëh_gë_bn_mod_exp
(c⁄° 
DSA_METHOD
 *
dßm
))

221 (
DSA
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *, const BIGNUM *,

222 
BN_CTX
 *, 
BN_MONT_CTX
 *);

223 
DSA_mëh_£t_bn_mod_exp
(
DSA_METHOD
 *
dßm
,

224 (*
bn_mod_exp
Ë(
DSA
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *,

225 c⁄° 
BIGNUM
 *, 
BN_CTX
 *, 
BN_MONT_CTX
 *));

226 (*
DSA_mëh_gë_öô
(c⁄° 
DSA_METHOD
 *
dßm
))(
DSA
 *);

227 
DSA_mëh_£t_öô
(
DSA_METHOD
 *
dßm
, (*
öô
)(
DSA
 *));

228 (*
DSA_mëh_gë_föish
(c⁄° 
DSA_METHOD
 *
dßm
)Ë(
DSA
 *);

229 
DSA_mëh_£t_föish
(
DSA_METHOD
 *
dßm
, (*
föish
Ë(
DSA
 *));

230 (*
DSA_mëh_gë_∑ømgí
(c⁄° 
DSA_METHOD
 *
dßm
))

231 (
DSA
 *, , const *, , *, *,

232 
BN_GENCB
 *);

233 
DSA_mëh_£t_∑ømgí
(
DSA_METHOD
 *
dßm
,

234 (*
∑ømgí
Ë(
DSA
 *, , const *, , *,

235 *, 
BN_GENCB
 *));

236 (*
DSA_mëh_gë_keygí
(c⁄° 
DSA_METHOD
 *
dßm
)Ë(
DSA
 *);

237 
DSA_mëh_£t_keygí
(
DSA_METHOD
 *
dßm
, (*
keygí
Ë(
DSA
 *));

240 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dtls1.h

10 #i‚de‡
HEADER_DTLS1_H


11 
	#HEADER_DTLS1_H


	)

13 #ifde‡ 
__˝lu•lus


17 
	#DTLS1_VERSION
 0xFEFF

	)

18 
	#DTLS1_2_VERSION
 0xFEFD

	)

19 
	#DTLS_MIN_VERSION
 
DTLS1_VERSION


	)

20 
	#DTLS_MAX_VERSION
 
DTLS1_2_VERSION


	)

21 
	#DTLS1_VERSION_MAJOR
 0xFE

	)

23 
	#DTLS1_BAD_VER
 0x0100

	)

26 
	#DTLS_ANY_VERSION
 0x1FFFF

	)

33 
	#DTLS1_COOKIE_LENGTH
 256

	)

35 
	#DTLS1_RT_HEADER_LENGTH
 13

	)

37 
	#DTLS1_HM_HEADER_LENGTH
 12

	)

39 
	#DTLS1_HM_BAD_FRAGMENT
 -2

	)

40 
	#DTLS1_HM_FRAGMENT_RETRY
 -3

	)

42 
	#DTLS1_CCS_HEADER_LENGTH
 1

	)

44 
	#DTLS1_AL_HEADER_LENGTH
 2

	)

47 
	#DTLS1_TMO_READ_COUNT
 2

	)

48 
	#DTLS1_TMO_WRITE_COUNT
 2

	)

50 
	#DTLS1_TMO_ALERT_COUNT
 12

	)

52 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/e_os2.h

10 #i‚de‡
HEADER_E_OS2_H


11 
	#HEADER_E_OS2_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #ifde‡ 
__˝lu•lus


25 
	#OPENSSL_SYS_UNIX


	)

33 #i‡
deföed
(
OPENSSL_SYS_MSDOS
)

34 #unde‡
OPENSSL_SYS_UNIX


45 #i‡
deföed
(
OPENSSL_SYS_UEFI
)

46 #unde‡
OPENSSL_SYS_UNIX


47 #ñi‡
deföed
(
OPENSSL_SYS_UWIN
)

48 #unde‡
OPENSSL_SYS_UNIX


49 
	#OPENSSL_SYS_WIN32_UWIN


	)

51 #i‡
deföed
(
__CYGWIN__
Ë|| deföed(
OPENSSL_SYS_CYGWIN
)

52 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

54 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYS_WIN32
)

55 #unde‡
OPENSSL_SYS_UNIX


56 #i‡!
deföed
(
OPENSSL_SYS_WIN32
)

57 
	#OPENSSL_SYS_WIN32


	)

60 #i‡
deföed
(
_WIN64
Ë|| deföed(
OPENSSL_SYS_WIN64
)

61 #unde‡
OPENSSL_SYS_UNIX


62 #i‡!
deföed
(
OPENSSL_SYS_WIN64
)

63 
	#OPENSSL_SYS_WIN64


	)

66 #i‡
deföed
(
OPENSSL_SYS_WINNT
)

67 #unde‡
OPENSSL_SYS_UNIX


69 #i‡
deföed
(
OPENSSL_SYS_WINCE
)

70 #unde‡
OPENSSL_SYS_UNIX


76 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WIN64
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

77 #unde‡
OPENSSL_SYS_UNIX


78 
	#OPENSSL_SYS_WINDOWS


	)

79 #i‚de‡
OPENSSL_SYS_MSDOS


80 
	#OPENSSL_SYS_MSDOS


	)

89 #ifde‡
OPENSSL_SYS_WINDOWS


90 #i‚de‡
OPENSSL_OPT_WINDLL


91 #i‡
deföed
(
_WINDLL
)

93 
	#OPENSSL_OPT_WINDLL


	)

99 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYS_VMS
)

100 #i‡!
deföed
(
OPENSSL_SYS_VMS
)

101 #unde‡
OPENSSL_SYS_UNIX


103 
	#OPENSSL_SYS_VMS


	)

104 #i‡
deföed
(
__DECC
)

105 
	#OPENSSL_SYS_VMS_DECC


	)

106 #ñi‡
deföed
(
__DECCXX
)

107 
	#OPENSSL_SYS_VMS_DECC


	)

108 
	#OPENSSL_SYS_VMS_DECCXX


	)

110 
	#OPENSSL_SYS_VMS_NODECC


	)

115 #ifde‡
OPENSSL_SYS_UNIX


116 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë&& !deföed(
OPENSSL_SYS_LINUX
)

117 
	#OPENSSL_SYS_LINUX


	)

119 #i‡
deföed
(
_AIX
Ë&& !deföed(
OPENSSL_SYS_AIX
)

120 
	#OPENSSL_SYS_AIX


	)

125 #i‡
deföed
(
__VOS__
Ë&& !deföed(
OPENSSL_SYS_VOS
)

126 
	#OPENSSL_SYS_VOS


	)

127 #ifde‡
__HPPA__


128 
	#OPENSSL_SYS_VOS_HPPA


	)

130 #ifde‡
__IA32__


131 
	#OPENSSL_SYS_VOS_IA32


	)

140 #ifde‡
OPENSSL_SYS_MSDOS


141 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

142 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

144 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

145 
	#OPENSSL_DECLARE_EXIT


	)

167 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

168 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

169 
	#OPENSSL_EXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

171 
	#OPENSSL_EXPORT
 

	)

172 
	#OPENSSL_EXTERN
 

	)

186 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


187 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

188 
ty≥
 *
_shadow_
##
	`«me
() \

189 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

190 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

191 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

193 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ëty≥ 
_shadow_
##«me=vÆue;

	)

194 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

195 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

198 #ifde‡
_WIN32


199 #ifde‡
_WIN64


200 
	#os¶_ssize_t
 
__öt64


	)

201 
	#OSSL_SSIZE_MAX
 
_I64_MAX


	)

203 
	#os¶_ssize_t
 

	)

204 
	#OSSL_SSIZE_MAX
 
INT_MAX


	)

208 #i‡
deföed
(
OPENSSL_SYS_UEFI
Ë&& !deföed(
os¶_ssize_t
)

209 
	#os¶_ssize_t
 
INTN


	)

210 
	#OSSL_SSIZE_MAX
 
MAX_INTN


	)

213 #i‚de‡
os¶_ssize_t


214 
	#os¶_ssize_t
 
ssize_t


	)

215 #i‡
deföed
(
SSIZE_MAX
)

216 
	#OSSL_SSIZE_MAX
 
SSIZE_MAX


	)

217 #ñi‡
deföed
(
_POSIX_SSIZE_MAX
)

218 
	#OSSL_SSIZE_MAX
 
_POSIX_SSIZE_MAX


	)

220 
	#OSSL_SSIZE_MAX
 ((
ssize_t
)(
SIZE_MAX
>>1))

	)

224 #ifde‡
DEBUG_UNUSED


225 
	#__owur
 
	`__©åibuã__
((
__w¨n_unu£d_ªsu…__
))

	)

227 
	#__owur


	)

231 #i‡
deföed
(
OPENSSL_SYS_UEFI
)

232 
INT8
 
	töt8_t
;

233 
UINT8
 
	tuöt8_t
;

234 
INT16
 
	töt16_t
;

235 
UINT16
 
	tuöt16_t
;

236 
INT32
 
	töt32_t
;

237 
UINT32
 
	tuöt32_t
;

238 
INT64
 
	töt64_t
;

239 
UINT64
 
	tuöt64_t
;

240 #ñi‡(
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L) || \

241 
deföed
(
__osf__
Ë|| deföed(
__sgi
Ë|| deföed(
__hpux
) || \

242 
deföed
(
OPENSSL_SYS_VMS
Ë|| deföed (
__O≥nBSD__
)

243 
	~<öây≥s.h
>

244 #ñi‡
deföed
(
_MSC_VER
) && _MSC_VER<1600

249 sig√d 
	töt8_t
;

250 
	tuöt8_t
;

251 
	töt16_t
;

252 
	tuöt16_t
;

253 
	töt32_t
;

254 
	tuöt32_t
;

255 
__öt64
 
	töt64_t
;

256 
	t__öt64
 
	tuöt64_t
;

258 
	~<°döt.h
>

262 #i‡!
deföed
(
ölöe
Ë&& !deföed(
__˝lu•lus
)

263 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__>=199901L

265 
	#os¶_ölöe
 
ölöe


	)

266 #ñi‡
deföed
(
__GNUC__
) && __GNUC__>=2

267 
	#os¶_ölöe
 
__ölöe__


	)

268 #ñi‡
deföed
(
_MSC_VER
)

274 
	#os¶_ölöe
 
__ölöe


	)

276 
	#os¶_ölöe


	)

279 
	#os¶_ölöe
 
ölöe


	)

282 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 201112L && \

283 !
deföed
(
__˝lu•lus
)

284 
	#os¶_n‹ëu∫
 
_N‹ëu∫


	)

285 #ñi‡
deföed
(
__GNUC__
) && __GNUC__ >= 2

286 
	#os¶_n‹ëu∫
 
	`__©åibuã__
((
n‹ëu∫
))

	)

288 
	#os¶_n‹ëu∫


	)

292 #i‡
deföed
(
__GNUC__
)

293 
	#os¶_unu£d
 
	`__©åibuã__
((
unu£d
))

	)

295 
	#os¶_unu£d


	)

298 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ec.h

11 #i‚de‡
HEADER_EC_H


12 
	#HEADER_EC_H


	)

14 
	~<›ís¶/›ís¶c⁄f.h
>

16 #i‚de‡
OPENSSL_NO_EC


17 
	~<›ís¶/a¢1.h
>

18 
	~<›ís¶/symhacks.h
>

19 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

20 
	~<›ís¶/bn.h
>

22 
	~<›ís¶/e˚º.h
>

23 #ifde‡ 
__˝lu•lus


27 #i‚de‡
OPENSSL_ECC_MAX_FIELD_BITS


28 
	#OPENSSL_ECC_MAX_FIELD_BITS
 661

	)

36 
POINT_CONVERSION_COMPRESSED
 = 2,

38 
POINT_CONVERSION_UNCOMPRESSED
 = 4,

41 
POINT_CONVERSION_HYBRID
 = 6

42 } 
	tpoöt_c⁄vîsi⁄_f‹m_t
;

44 
ec_mëhod_°
 
	tEC_METHOD
;

45 
ec_group_°
 
	tEC_GROUP
;

46 
ec_poöt_°
 
	tEC_POINT
;

47 
e˝k_∑ømëîs_°
 
	tECPKPARAMETERS
;

48 
ec_∑ømëîs_°
 
	tECPARAMETERS
;

58 c⁄° 
EC_METHOD
 *
EC_GFp_sim∂e_mëhod
();

63 c⁄° 
EC_METHOD
 *
EC_GFp_m⁄t_mëhod
();

68 c⁄° 
EC_METHOD
 *
EC_GFp_ni°_mëhod
();

70 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


74 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p224_mëhod
();

79 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p256_mëhod
();

84 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p521_mëhod
();

87 #i‚de‡
OPENSSL_NO_EC2M


95 c⁄° 
EC_METHOD
 *
EC_GF2m_sim∂e_mëhod
();

107 
EC_GROUP
 *
EC_GROUP_√w
(c⁄° 
EC_METHOD
 *
mëh
);

112 
EC_GROUP_‰ì
(
EC_GROUP
 *
group
);

117 
EC_GROUP_˛ór_‰ì
(
EC_GROUP
 *
group
);

124 
EC_GROUP_c›y
(
EC_GROUP
 *
d°
, c⁄° EC_GROUP *
§c
);

131 
EC_GROUP
 *
EC_GROUP_dup
(c⁄° EC_GROUP *
§c
);

137 c⁄° 
EC_METHOD
 *
EC_GROUP_mëhod_of
(c⁄° 
EC_GROUP
 *
group
);

143 
EC_METHOD_gë_fõld_ty≥
(c⁄° 
EC_METHOD
 *
mëh
);

153 
EC_GROUP_£t_gíî©‹
(
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
gíî©‹
,

154 c⁄° 
BIGNUM
 *
‹dî
, c⁄° BIGNUM *
coÁ˘‹
);

160 c⁄° 
EC_POINT
 *
EC_GROUP_gë0_gíî©‹
(c⁄° 
EC_GROUP
 *
group
);

166 
BN_MONT_CTX
 *
EC_GROUP_gë_m⁄t_d©a
(c⁄° 
EC_GROUP
 *
group
);

174 
EC_GROUP_gë_‹dî
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
‹dî
, 
BN_CTX
 *
˘x
);

180 c⁄° 
BIGNUM
 *
EC_GROUP_gë0_‹dî
(c⁄° 
EC_GROUP
 *
group
);

186 
EC_GROUP_‹dî_bôs
(c⁄° 
EC_GROUP
 *
group
);

194 
EC_GROUP_gë_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
coÁ˘‹
,

195 
BN_CTX
 *
˘x
);

201 c⁄° 
BIGNUM
 *
EC_GROUP_gë0_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
);

207 
EC_GROUP_£t_curve_«me
(
EC_GROUP
 *
group
, 
nid
);

213 
EC_GROUP_gë_curve_«me
(c⁄° 
EC_GROUP
 *
group
);

215 
EC_GROUP_£t_a¢1_Êag
(
EC_GROUP
 *
group
, 
Êag
);

216 
EC_GROUP_gë_a¢1_Êag
(c⁄° 
EC_GROUP
 *
group
);

218 
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
(
EC_GROUP
 *
group
,

219 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
);

220 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
(c⁄° 
EC_GROUP
 *);

222 *
EC_GROUP_gë0_£ed
(c⁄° 
EC_GROUP
 *
x
);

223 
size_t
 
EC_GROUP_gë_£ed_Àn
(c⁄° 
EC_GROUP
 *);

224 
size_t
 
EC_GROUP_£t_£ed
(
EC_GROUP
 *, c⁄° *, size_à
Àn
);

236 
EC_GROUP_£t_curve
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

237 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

249 
EC_GROUP_gë_curve
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
,

250 
BN_CTX
 *
˘x
);

261 
DEPRECATEDIN_1_2_0
(
EC_GROUP_£t_curve_GFp
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
,

262 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
,

263 
BN_CTX
 *
˘x
))

274 
DEPRECATEDIN_1_2_0
(
EC_GROUP_gë_curve_GFp
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
,

275 
BIGNUM
 *
a
, BIGNUM *
b
,

276 
BN_CTX
 *
˘x
))

278 #i‚de‡
OPENSSL_NO_EC2M


288 
DEPRECATEDIN_1_2_0
(
EC_GROUP_£t_curve_GF2m
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
,

289 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
,

290 
BN_CTX
 *
˘x
))

301 
DEPRECATEDIN_1_2_0
(
EC_GROUP_gë_curve_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
,

302 
BIGNUM
 *
a
, BIGNUM *
b
,

303 
BN_CTX
 *
˘x
))

309 
EC_GROUP_gë_degªe
(c⁄° 
EC_GROUP
 *
group
);

316 
EC_GROUP_check
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

323 
EC_GROUP_check_dis¸imö™t
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

331 
EC_GROUP_cmp
(c⁄° 
EC_GROUP
 *
a
, c⁄° EC_GROUP *
b
, 
BN_CTX
 *
˘x
);

346 
EC_GROUP
 *
EC_GROUP_√w_curve_GFp
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

347 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

348 #i‚de‡
OPENSSL_NO_EC2M


357 
EC_GROUP
 *
EC_GROUP_√w_curve_GF2m
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

358 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

366 
EC_GROUP
 *
EC_GROUP_√w_by_curve_«me
(
nid
);

373 
EC_GROUP
 *
EC_GROUP_√w_‰om_e˝¨amëîs
(c⁄° 
ECPARAMETERS
 *
∑øms
);

381 
ECPARAMETERS
 *
EC_GROUP_gë_e˝¨amëîs
(c⁄° 
EC_GROUP
 *
group
,

382 
ECPARAMETERS
 *
∑øms
);

389 
EC_GROUP
 *
EC_GROUP_√w_‰om_e˝k∑ømëîs
(c⁄° 
ECPKPARAMETERS
 *
∑øms
);

397 
ECPKPARAMETERS
 *
EC_GROUP_gë_e˝k∑ømëîs
(c⁄° 
EC_GROUP
 *
group
,

398 
ECPKPARAMETERS
 *
∑øms
);

405 
nid
;

406 c⁄° *
commít
;

407 } 
	tEC_buûtö_curve
;

415 
size_t
 
EC_gë_buûtö_curves
(
EC_buûtö_curve
 *
r
, size_à
nôems
);

417 c⁄° *
EC_curve_nid2ni°
(
nid
);

418 
EC_curve_ni°2nid
(c⁄° *
«me
);

428 
EC_POINT
 *
EC_POINT_√w
(c⁄° 
EC_GROUP
 *
group
);

433 
EC_POINT_‰ì
(
EC_POINT
 *
poöt
);

438 
EC_POINT_˛ór_‰ì
(
EC_POINT
 *
poöt
);

445 
EC_POINT_c›y
(
EC_POINT
 *
d°
, c⁄° EC_POINT *
§c
);

453 
EC_POINT
 *
EC_POINT_dup
(c⁄° EC_POINT *
§c
, c⁄° 
EC_GROUP
 *
group
);

459 c⁄° 
EC_METHOD
 *
EC_POINT_mëhod_of
(c⁄° 
EC_POINT
 *
poöt
);

466 
EC_POINT_£t_to_öföôy
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
);

477 
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

478 
EC_POINT
 *
p
, c⁄° 
BIGNUM
 *
x
,

479 c⁄° 
BIGNUM
 *
y
, c⁄° BIGNUM *
z
,

480 
BN_CTX
 *
˘x
);

491 
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

492 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
,

493 
BIGNUM
 *
y
, BIGNUM *
z
,

494 
BN_CTX
 *
˘x
);

504 
EC_POINT_£t_afföe_co‹dö©es
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

505 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
,

506 
BN_CTX
 *
˘x
);

516 
EC_POINT_gë_afföe_co‹dö©es
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

517 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

528 
DEPRECATEDIN_1_2_0
(
EC_POINT_£t_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

529 
EC_POINT
 *
p
,

530 c⁄° 
BIGNUM
 *
x
,

531 c⁄° 
BIGNUM
 *
y
,

532 
BN_CTX
 *
˘x
))

543 
DEPRECATEDIN_1_2_0
(
EC_POINT_gë_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

544 c⁄° 
EC_POINT
 *
p
,

545 
BIGNUM
 *
x
,

546 
BIGNUM
 *
y
,

547 
BN_CTX
 *
˘x
))

557 
EC_POINT_£t_com¥es£d_co‹dö©es
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

558 c⁄° 
BIGNUM
 *
x
, 
y_bô
,

559 
BN_CTX
 *
˘x
);

570 
DEPRECATEDIN_1_2_0
(
EC_POINT_£t_com¥es£d_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

571 
EC_POINT
 *
p
,

572 c⁄° 
BIGNUM
 *
x
,

573 
y_bô
,

574 
BN_CTX
 *
˘x
))

575 #i‚de‡
OPENSSL_NO_EC2M


585 
DEPRECATEDIN_1_2_0
(
EC_POINT_£t_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

586 
EC_POINT
 *
p
,

587 c⁄° 
BIGNUM
 *
x
,

588 c⁄° 
BIGNUM
 *
y
,

589 
BN_CTX
 *
˘x
))

600 
DEPRECATEDIN_1_2_0
(
EC_POINT_gë_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

601 c⁄° 
EC_POINT
 *
p
,

602 
BIGNUM
 *
x
,

603 
BIGNUM
 *
y
,

604 
BN_CTX
 *
˘x
))

615 
DEPRECATEDIN_1_2_0
(
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

616 
EC_POINT
 *
p
,

617 c⁄° 
BIGNUM
 *
x
,

618 
y_bô
,

619 
BN_CTX
 *
˘x
))

631 
size_t
 
EC_POINT_poöt2o˘
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

632 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

633 *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

643 
EC_POINT_o˘2poöt
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

644 c⁄° *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

654 
size_t
 
EC_POINT_poöt2buf
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
,

655 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

656 **
pbuf
, 
BN_CTX
 *
˘x
);

659 
BIGNUM
 *
EC_POINT_poöt2bn
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

660 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BIGNUM
 *, 
BN_CTX
 *);

661 
EC_POINT
 *
EC_POINT_bn2poöt
(c⁄° 
EC_GROUP
 *, c⁄° 
BIGNUM
 *,

662 
EC_POINT
 *, 
BN_CTX
 *);

663 *
EC_POINT_poöt2hex
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

664 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BN_CTX
 *);

665 
EC_POINT
 *
EC_POINT_hex2poöt
(c⁄° 
EC_GROUP
 *, const *,

666 
EC_POINT
 *, 
BN_CTX
 *);

680 
EC_POINT_add
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
,

681 c⁄° 
EC_POINT
 *
b
, 
BN_CTX
 *
˘x
);

690 
EC_POINT_dbl
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
,

691 
BN_CTX
 *
˘x
);

699 
EC_POINT_övît
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
a
, 
BN_CTX
 *
˘x
);

706 
EC_POINT_is_©_öföôy
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
);

714 
EC_POINT_is_⁄_curve
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
,

715 
BN_CTX
 *
˘x
);

724 
EC_POINT_cmp
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
a
, c⁄° EC_POINT *
b
,

725 
BN_CTX
 *
˘x
);

727 
EC_POINT_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
, 
BN_CTX
 *
˘x
);

728 
EC_POINTs_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
size_t
 
num
,

729 
EC_POINT
 *
poöts
[], 
BN_CTX
 *
˘x
);

741 
EC_POINTs_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
,

742 
size_t
 
num
, c⁄° 
EC_POINT
 *
p
[], c⁄° 
BIGNUM
 *
m
[],

743 
BN_CTX
 *
˘x
);

754 
EC_POINT_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
,

755 c⁄° 
EC_POINT
 *
q
, c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

762 
EC_GROUP_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

768 
EC_GROUP_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

774 
DECLARE_ASN1_ITEM
(
ECPKPARAMETERS
)

775 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
ECPKPARAMETERS
)

776 
DECLARE_ASN1_ITEM
(
ECPARAMETERS
)

777 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
ECPARAMETERS
)

783 
EC_GROUP_gë_basis_ty≥
(c⁄° 
EC_GROUP
 *);

784 #i‚de‡
OPENSSL_NO_EC2M


785 
EC_GROUP_gë_åöomül_basis
(c⁄° 
EC_GROUP
 *, *
k
);

786 
EC_GROUP_gë_≥¡™omül_basis
(c⁄° 
EC_GROUP
 *, *
k1
,

787 *
k2
, *
k3
);

790 
	#OPENSSL_EC_EXPLICIT_CURVE
 0x000

	)

791 
	#OPENSSL_EC_NAMED_CURVE
 0x001

	)

793 
EC_GROUP
 *
d2i_ECPKP¨amëîs
(EC_GROUP **, c⁄° **
ö
, 
Àn
);

794 
i2d_ECPKP¨amëîs
(c⁄° 
EC_GROUP
 *, **
out
);

796 
	#d2i_ECPKP¨amëîs_bio
(
bp
,
x
) \

797 
	`ASN1_d2i_bio_of
(
EC_GROUP
, 
NULL
, 
d2i_ECPKP¨amëîs
, 
bp
, 
x
)

	)

798 
	#i2d_ECPKP¨amëîs_bio
(
bp
,
x
) \

799 
	`ASN1_i2d_bio_of_c⁄°
(
EC_GROUP
, 
i2d_ECPKP¨amëîs
, 
bp
, 
x
)

	)

800 
	#d2i_ECPKP¨amëîs_Â
(
Â
,
x
) \

801 (
EC_GROUP
 *)
	`ASN1_d2i_Â
(
NULL
, (
d2i_of_void
 *)
d2i_ECPKP¨amëîs
, (
Â
), \

802 (**)(
x
))

	)

803 
	#i2d_ECPKP¨amëîs_Â
(
Â
,
x
) \

804 
	`ASN1_i2d_Â
((
i2d_of_void
 *)
i2d_ECPKP¨amëîs
, (
Â
), (*)(
x
))

	)

806 
ECPKP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_GROUP
 *
x
, 
off
);

807 #i‚de‡
OPENSSL_NO_STDIO


808 
ECPKP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_GROUP
 *
x
, 
off
);

816 
	#EC_PKEY_NO_PARAMETERS
 0x001

	)

817 
	#EC_PKEY_NO_PUBKEY
 0x002

	)

820 
	#EC_FLAG_NON_FIPS_ALLOW
 0x1

	)

821 
	#EC_FLAG_FIPS_CHECKED
 0x2

	)

822 
	#EC_FLAG_COFACTOR_ECDH
 0x1000

	)

827 
EC_KEY
 *
EC_KEY_√w
();

829 
EC_KEY_gë_Êags
(c⁄° 
EC_KEY
 *
key
);

831 
EC_KEY_£t_Êags
(
EC_KEY
 *
key
, 
Êags
);

833 
EC_KEY_˛ór_Êags
(
EC_KEY
 *
key
, 
Êags
);

835 
EC_KEY_decoded_‰om_ex∂icô_∑øms
(c⁄° 
EC_KEY
 *
key
);

842 
EC_KEY
 *
EC_KEY_√w_by_curve_«me
(
nid
);

847 
EC_KEY_‰ì
(
EC_KEY
 *
key
);

854 
EC_KEY
 *
EC_KEY_c›y
(EC_KEY *
d°
, c⁄° EC_KEY *
§c
);

860 
EC_KEY
 *
EC_KEY_dup
(c⁄° EC_KEY *
§c
);

866 
EC_KEY_up_ªf
(
EC_KEY
 *
key
);

872 
ENGINE
 *
EC_KEY_gë0_ígöe
(c⁄° 
EC_KEY
 *
eckey
);

878 c⁄° 
EC_GROUP
 *
EC_KEY_gë0_group
(c⁄° 
EC_KEY
 *
key
);

886 
EC_KEY_£t_group
(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
group
);

892 c⁄° 
BIGNUM
 *
EC_KEY_gë0_¥iv©e_key
(c⁄° 
EC_KEY
 *
key
);

900 
EC_KEY_£t_¥iv©e_key
(
EC_KEY
 *
key
, c⁄° 
BIGNUM
 *
¥v
);

906 c⁄° 
EC_POINT
 *
EC_KEY_gë0_public_key
(c⁄° 
EC_KEY
 *
key
);

914 
EC_KEY_£t_public_key
(
EC_KEY
 *
key
, c⁄° 
EC_POINT
 *
pub
);

916 
EC_KEY_gë_íc_Êags
(c⁄° 
EC_KEY
 *
key
);

917 
EC_KEY_£t_íc_Êags
(
EC_KEY
 *
eckey
, 
Êags
);

918 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_KEY_gë_c⁄v_f‹m
(c⁄° 
EC_KEY
 *
key
);

919 
EC_KEY_£t_c⁄v_f‹m
(
EC_KEY
 *
eckey
, 
poöt_c⁄vîsi⁄_f‹m_t
 
cf‹m
);

921 
	#EC_KEY_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

922 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_EC_KEY
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

923 
EC_KEY_£t_ex_d©a
(
EC_KEY
 *
key
, 
idx
, *
¨g
);

924 *
EC_KEY_gë_ex_d©a
(c⁄° 
EC_KEY
 *
key
, 
idx
);

927 
EC_KEY_£t_a¢1_Êag
(
EC_KEY
 *
eckey
, 
a¢1_Êag
);

935 
EC_KEY_¥ecompuã_mu…
(
EC_KEY
 *
key
, 
BN_CTX
 *
˘x
);

941 
EC_KEY_gíî©e_key
(
EC_KEY
 *
key
);

947 
EC_KEY_check_key
(c⁄° 
EC_KEY
 *
key
);

953 
EC_KEY_ˇn_sign
(c⁄° 
EC_KEY
 *
eckey
);

962 
EC_KEY_£t_public_key_afföe_co‹dö©es
(
EC_KEY
 *
key
, 
BIGNUM
 *
x
,

963 
BIGNUM
 *
y
);

972 
size_t
 
EC_KEY_key2buf
(c⁄° 
EC_KEY
 *
key
, 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

973 **
pbuf
, 
BN_CTX
 *
˘x
);

983 
EC_KEY_o˘2key
(
EC_KEY
 *
key
, c⁄° *
buf
, 
size_t
 
Àn
,

984 
BN_CTX
 *
˘x
);

993 
EC_KEY_o˘2¥iv
(
EC_KEY
 *
key
, c⁄° *
buf
, 
size_t
 
Àn
);

1003 
size_t
 
EC_KEY_¥iv2o˘
(c⁄° 
EC_KEY
 *
key
, *
buf
, size_à
Àn
);

1010 
size_t
 
EC_KEY_¥iv2buf
(c⁄° 
EC_KEY
 *
eckey
, **
pbuf
);

1022 
EC_KEY
 *
d2i_ECPriv©eKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

1030 
i2d_ECPriv©eKey
(
EC_KEY
 *
key
, **
out
);

1043 
EC_KEY
 *
d2i_ECP¨amëîs
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

1051 
i2d_ECP¨amëîs
(
EC_KEY
 *
key
, **
out
);

1065 
EC_KEY
 *
o2i_ECPublicKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

1073 
i2o_ECPublicKey
(c⁄° 
EC_KEY
 *
key
, **
out
);

1080 
ECP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
);

1088 
EC_KEY_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
, 
off
);

1090 #i‚de‡
OPENSSL_NO_STDIO


1096 
ECP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
);

1104 
EC_KEY_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
, 
off
);

1108 c⁄° 
EC_KEY_METHOD
 *
EC_KEY_O≥nSSL
();

1109 c⁄° 
EC_KEY_METHOD
 *
EC_KEY_gë_deÁu…_mëhod
();

1110 
EC_KEY_£t_deÁu…_mëhod
(c⁄° 
EC_KEY_METHOD
 *
mëh
);

1111 c⁄° 
EC_KEY_METHOD
 *
EC_KEY_gë_mëhod
(c⁄° 
EC_KEY
 *
key
);

1112 
EC_KEY_£t_mëhod
(
EC_KEY
 *
key
, c⁄° 
EC_KEY_METHOD
 *
mëh
);

1113 
EC_KEY
 *
EC_KEY_√w_mëhod
(
ENGINE
 *
ígöe
);

1120 
ECDH_KDF_X9_62
(*
out
, 
size_t
 
ouéí
,

1121 c⁄° *
Z
, 
size_t
 
ZÀn
,

1122 c⁄° *
söfo
, 
size_t
 
söfﬁí
,

1123 c⁄° 
EVP_MD
 *
md
);

1125 
ECDH_compuã_key
(*
out
, 
size_t
 
ouéí
, c⁄° 
EC_POINT
 *
pub_key
,

1126 c⁄° 
EC_KEY
 *
ecdh
,

1127 *(*
KDF
Ë(c⁄° *
ö
, 
size_t
 
öÀn
,

1128 *
out
, 
size_t
 *
ouéí
));

1130 
ECDSA_SIG_°
 
	tECDSA_SIG
;

1135 
ECDSA_SIG
 *
ECDSA_SIG_√w
();

1140 
ECDSA_SIG_‰ì
(
ECDSA_SIG
 *
sig
);

1149 
i2d_ECDSA_SIG
(c⁄° 
ECDSA_SIG
 *
sig
, **
µ
);

1158 
ECDSA_SIG
 *
d2i_ECDSA_SIG
(ECDSA_SIG **
sig
, c⁄° **
µ
, 
Àn
);

1165 
ECDSA_SIG_gë0
(c⁄° 
ECDSA_SIG
 *
sig
, c⁄° 
BIGNUM
 **
¥
, c⁄° BIGNUM **
ps
);

1170 c⁄° 
BIGNUM
 *
ECDSA_SIG_gë0_r
(c⁄° 
ECDSA_SIG
 *
sig
);

1175 c⁄° 
BIGNUM
 *
ECDSA_SIG_gë0_s
(c⁄° 
ECDSA_SIG
 *
sig
);

1182 
ECDSA_SIG_£t0
(
ECDSA_SIG
 *
sig
, 
BIGNUM
 *
r
, BIGNUM *
s
);

1191 
ECDSA_SIG
 *
ECDSA_do_sign
(c⁄° *
dg°
, 
dg°_Àn
,

1192 
EC_KEY
 *
eckey
);

1204 
ECDSA_SIG
 *
ECDSA_do_sign_ex
(c⁄° *
dg°
, 
dg°Àn
,

1205 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
,

1206 
EC_KEY
 *
eckey
);

1217 
ECDSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

1218 c⁄° 
ECDSA_SIG
 *
sig
, 
EC_KEY
 *
eckey
);

1227 
ECDSA_sign_£tup
(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x
, 
BIGNUM
 **
köv
, BIGNUM **
Ω
);

1239 
ECDSA_sign
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

1240 *
sig
, *
sigÀn
, 
EC_KEY
 *
eckey
);

1255 
ECDSA_sign_ex
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

1256 *
sig
, *
sigÀn
,

1257 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
, 
EC_KEY
 *
eckey
);

1270 
ECDSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

1271 c⁄° *
sig
, 
sigÀn
, 
EC_KEY
 *
eckey
);

1277 
ECDSA_size
(c⁄° 
EC_KEY
 *
eckey
);

1283 
EC_KEY_METHOD
 *
EC_KEY_METHOD_√w
(c⁄° EC_KEY_METHOD *
mëh
);

1284 
EC_KEY_METHOD_‰ì
(
EC_KEY_METHOD
 *
mëh
);

1285 
EC_KEY_METHOD_£t_öô
(
EC_KEY_METHOD
 *
mëh
,

1286 (*
öô
)(
EC_KEY
 *
key
),

1287 (*
föish
)(
EC_KEY
 *
key
),

1288 (*
c›y
)(
EC_KEY
 *
de°
, c⁄° EC_KEY *
§c
),

1289 (*
£t_group
)(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
gΩ
),

1290 (*
£t_¥iv©e
)(
EC_KEY
 *
key
,

1291 c⁄° 
BIGNUM
 *
¥iv_key
),

1292 (*
£t_public
)(
EC_KEY
 *
key
,

1293 c⁄° 
EC_POINT
 *
pub_key
));

1295 
EC_KEY_METHOD_£t_keygí
(
EC_KEY_METHOD
 *
mëh
,

1296 (*
keygí
)(
EC_KEY
 *
key
));

1298 
EC_KEY_METHOD_£t_compuã_key
(
EC_KEY_METHOD
 *
mëh
,

1299 (*
ckey
)(**
p£c
,

1300 
size_t
 *
p£˛í
,

1301 c⁄° 
EC_POINT
 *
pub_key
,

1302 c⁄° 
EC_KEY
 *
ecdh
));

1304 
EC_KEY_METHOD_£t_sign
(
EC_KEY_METHOD
 *
mëh
,

1305 (*
sign
)(
ty≥
, c⁄° *
dg°
,

1306 
dÀn
, *
sig
,

1307 *
sigÀn
,

1308 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
r
,

1309 
EC_KEY
 *
eckey
),

1310 (*
sign_£tup
)(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x_ö
,

1311 
BIGNUM
 **
kövp
, BIGNUM **
Ω
),

1312 
ECDSA_SIG
 *(*
sign_sig
)(c⁄° *
dg°
,

1313 
dg°_Àn
,

1314 c⁄° 
BIGNUM
 *
ö_köv
,

1315 c⁄° 
BIGNUM
 *
ö_r
,

1316 
EC_KEY
 *
eckey
));

1318 
EC_KEY_METHOD_£t_vîify
(
EC_KEY_METHOD
 *
mëh
,

1319 (*
vîify
)(
ty≥
, const 

1320 *
dg°
, 
dg°_Àn
,

1321 c⁄° *
sigbuf
,

1322 
sig_Àn
, 
EC_KEY
 *
eckey
),

1323 (*
vîify_sig
)(c⁄° *
dg°
,

1324 
dg°_Àn
,

1325 c⁄° 
ECDSA_SIG
 *
sig
,

1326 
EC_KEY
 *
eckey
));

1328 
EC_KEY_METHOD_gë_öô
(c⁄° 
EC_KEY_METHOD
 *
mëh
,

1329 (**
pöô
)(
EC_KEY
 *
key
),

1330 (**
pföish
)(
EC_KEY
 *
key
),

1331 (**
pc›y
)(
EC_KEY
 *
de°
, c⁄° EC_KEY *
§c
),

1332 (**
p£t_group
)(
EC_KEY
 *
key
,

1333 c⁄° 
EC_GROUP
 *
gΩ
),

1334 (**
p£t_¥iv©e
)(
EC_KEY
 *
key
,

1335 c⁄° 
BIGNUM
 *
¥iv_key
),

1336 (**
p£t_public
)(
EC_KEY
 *
key
,

1337 c⁄° 
EC_POINT
 *
pub_key
));

1339 
EC_KEY_METHOD_gë_keygí
(c⁄° 
EC_KEY_METHOD
 *
mëh
,

1340 (**
pkeygí
)(
EC_KEY
 *
key
));

1342 
EC_KEY_METHOD_gë_compuã_key
(c⁄° 
EC_KEY_METHOD
 *
mëh
,

1343 (**
pck
)(**
p£c
,

1344 
size_t
 *
p£˛í
,

1345 c⁄° 
EC_POINT
 *
pub_key
,

1346 c⁄° 
EC_KEY
 *
ecdh
));

1348 
EC_KEY_METHOD_gë_sign
(c⁄° 
EC_KEY_METHOD
 *
mëh
,

1349 (**
psign
)(
ty≥
, c⁄° *
dg°
,

1350 
dÀn
, *
sig
,

1351 *
sigÀn
,

1352 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
r
,

1353 
EC_KEY
 *
eckey
),

1354 (**
psign_£tup
)(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x_ö
,

1355 
BIGNUM
 **
kövp
, BIGNUM **
Ω
),

1356 
ECDSA_SIG
 *(**
psign_sig
)(c⁄° *
dg°
,

1357 
dg°_Àn
,

1358 c⁄° 
BIGNUM
 *
ö_köv
,

1359 c⁄° 
BIGNUM
 *
ö_r
,

1360 
EC_KEY
 *
eckey
));

1362 
EC_KEY_METHOD_gë_vîify
(c⁄° 
EC_KEY_METHOD
 *
mëh
,

1363 (**
pvîify
)(
ty≥
, const 

1364 *
dg°
, 
dg°_Àn
,

1365 c⁄° *
sigbuf
,

1366 
sig_Àn
, 
EC_KEY
 *
eckey
),

1367 (**
pvîify_sig
)(c⁄° *
dg°
,

1368 
dg°_Àn
,

1369 c⁄° 
ECDSA_SIG
 *
sig
,

1370 
EC_KEY
 *
eckey
));

1372 
	#ECP¨amëîs_dup
(
x
Ë
	`ASN1_dup_of
(
EC_KEY
,
i2d_ECP¨amëîs
,
d2i_ECP¨amëîs
,x)

	)

1374 #i‚de‡
__˝lu•lus


1375 #i‡
deföed
(
__SUNPRO_C
)

1376 #i‡
__SUNPRO_C
 >= 0x520

1377 #¥agm®
îr‹_mesßges
 (,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

1382 
	#EVP_PKEY_CTX_£t_ec_∑ømgí_curve_nid
(
˘x
, 
nid
) \

1383 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1384 
EVP_PKEY_OP_PARAMGEN
|
EVP_PKEY_OP_KEYGEN
, \

1385 
EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
, 
nid
, 
NULL
)

	)

1387 
	#EVP_PKEY_CTX_£t_ec_∑øm_íc
(
˘x
, 
Êag
) \

1388 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1389 
EVP_PKEY_OP_PARAMGEN
|
EVP_PKEY_OP_KEYGEN
, \

1390 
EVP_PKEY_CTRL_EC_PARAM_ENC
, 
Êag
, 
NULL
)

	)

1392 
	#EVP_PKEY_CTX_£t_ecdh_coÁ˘‹_mode
(
˘x
, 
Êag
) \

1393 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1394 
EVP_PKEY_OP_DERIVE
, \

1395 
EVP_PKEY_CTRL_EC_ECDH_COFACTOR
, 
Êag
, 
NULL
)

	)

1397 
	#EVP_PKEY_CTX_gë_ecdh_coÁ˘‹_mode
(
˘x
) \

1398 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1399 
EVP_PKEY_OP_DERIVE
, \

1400 
EVP_PKEY_CTRL_EC_ECDH_COFACTOR
, -2, 
NULL
)

	)

1402 
	#EVP_PKEY_CTX_£t_ecdh_kdf_ty≥
(
˘x
, 
kdf
) \

1403 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1404 
EVP_PKEY_OP_DERIVE
, \

1405 
EVP_PKEY_CTRL_EC_KDF_TYPE
, 
kdf
, 
NULL
)

	)

1407 
	#EVP_PKEY_CTX_gë_ecdh_kdf_ty≥
(
˘x
) \

1408 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1409 
EVP_PKEY_OP_DERIVE
, \

1410 
EVP_PKEY_CTRL_EC_KDF_TYPE
, -2, 
NULL
)

	)

1412 
	#EVP_PKEY_CTX_£t_ecdh_kdf_md
(
˘x
, 
md
) \

1413 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1414 
EVP_PKEY_OP_DERIVE
, \

1415 
EVP_PKEY_CTRL_EC_KDF_MD
, 0, (*)(
md
))

	)

1417 
	#EVP_PKEY_CTX_gë_ecdh_kdf_md
(
˘x
, 
pmd
) \

1418 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1419 
EVP_PKEY_OP_DERIVE
, \

1420 
EVP_PKEY_CTRL_GET_EC_KDF_MD
, 0, (*)(
pmd
))

	)

1422 
	#EVP_PKEY_CTX_£t_ecdh_kdf_ouéí
(
˘x
, 
Àn
) \

1423 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1424 
EVP_PKEY_OP_DERIVE
, \

1425 
EVP_PKEY_CTRL_EC_KDF_OUTLEN
, 
Àn
, 
NULL
)

	)

1427 
	#EVP_PKEY_CTX_gë_ecdh_kdf_ouéí
(
˘x
, 
∂í
) \

1428 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1429 
EVP_PKEY_OP_DERIVE
, \

1430 
EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN
, 0, \

1431 (*)(
∂í
))

	)

1433 
	#EVP_PKEY_CTX_£t0_ecdh_kdf_ukm
(
˘x
, 
p
, 
∂í
) \

1434 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1435 
EVP_PKEY_OP_DERIVE
, \

1436 
EVP_PKEY_CTRL_EC_KDF_UKM
, 
∂í
, (*)(
p
))

	)

1438 
	#EVP_PKEY_CTX_gë0_ecdh_kdf_ukm
(
˘x
, 
p
) \

1439 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1440 
EVP_PKEY_OP_DERIVE
, \

1441 
EVP_PKEY_CTRL_GET_EC_KDF_UKM
, 0, (*)(
p
))

	)

1444 
	#EVP_PKEY_CTX_£t1_id
(
˘x
, 
id
, 
id_Àn
) \

1445 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, -1, \

1446 
EVP_PKEY_CTRL_SET1_ID
, ()
id_Àn
, (*)(
id
))

	)

1448 
	#EVP_PKEY_CTX_gë1_id
(
˘x
, 
id
) \

1449 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, -1, \

1450 
EVP_PKEY_CTRL_GET1_ID
, 0, (*)(
id
))

	)

1452 
	#EVP_PKEY_CTX_gë1_id_Àn
(
˘x
, 
id_Àn
) \

1453 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, -1, \

1454 
EVP_PKEY_CTRL_GET1_ID_LEN
, 0, (*)(
id_Àn
))

	)

1456 
	#EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

1457 
	#EVP_PKEY_CTRL_EC_PARAM_ENC
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

1458 
	#EVP_PKEY_CTRL_EC_ECDH_COFACTOR
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

1459 
	#EVP_PKEY_CTRL_EC_KDF_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

1460 
	#EVP_PKEY_CTRL_EC_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

1461 
	#EVP_PKEY_CTRL_GET_EC_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

1462 
	#EVP_PKEY_CTRL_EC_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

1463 
	#EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

1464 
	#EVP_PKEY_CTRL_EC_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

1465 
	#EVP_PKEY_CTRL_GET_EC_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

1466 
	#EVP_PKEY_CTRL_SET1_ID
 (
EVP_PKEY_ALG_CTRL
 + 11)

	)

1467 
	#EVP_PKEY_CTRL_GET1_ID
 (
EVP_PKEY_ALG_CTRL
 + 12)

	)

1468 
	#EVP_PKEY_CTRL_GET1_ID_LEN
 (
EVP_PKEY_ALG_CTRL
 + 13)

	)

1470 
	#EVP_PKEY_ECDH_KDF_NONE
 1

	)

1471 
	#EVP_PKEY_ECDH_KDF_X9_63
 2

	)

1477 
	#EVP_PKEY_ECDH_KDF_X9_62
 
EVP_PKEY_ECDH_KDF_X9_63


	)

1480 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/engineerr.h

11 #i‚de‡
HEADER_ENGINEERR_H


12 
	#HEADER_ENGINEERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 
	~<›ís¶/›ís¶c⁄f.h
>

20 #i‚de‡
OPENSSL_NO_ENGINE


22 #ifde‡ 
__˝lu•lus


25 
ERR_lﬂd_ENGINE_°rögs
();

30 
	#ENGINE_F_DIGEST_UPDATE
 198

	)

31 
	#ENGINE_F_DYNAMIC_CTRL
 180

	)

32 
	#ENGINE_F_DYNAMIC_GET_DATA_CTX
 181

	)

33 
	#ENGINE_F_DYNAMIC_LOAD
 182

	)

34 
	#ENGINE_F_DYNAMIC_SET_DATA_CTX
 183

	)

35 
	#ENGINE_F_ENGINE_ADD
 105

	)

36 
	#ENGINE_F_ENGINE_BY_ID
 106

	)

37 
	#ENGINE_F_ENGINE_CMD_IS_EXECUTABLE
 170

	)

38 
	#ENGINE_F_ENGINE_CTRL
 142

	)

39 
	#ENGINE_F_ENGINE_CTRL_CMD
 178

	)

40 
	#ENGINE_F_ENGINE_CTRL_CMD_STRING
 171

	)

41 
	#ENGINE_F_ENGINE_FINISH
 107

	)

42 
	#ENGINE_F_ENGINE_GET_CIPHER
 185

	)

43 
	#ENGINE_F_ENGINE_GET_DIGEST
 186

	)

44 
	#ENGINE_F_ENGINE_GET_FIRST
 195

	)

45 
	#ENGINE_F_ENGINE_GET_LAST
 196

	)

46 
	#ENGINE_F_ENGINE_GET_NEXT
 115

	)

47 
	#ENGINE_F_ENGINE_GET_PKEY_ASN1_METH
 193

	)

48 
	#ENGINE_F_ENGINE_GET_PKEY_METH
 192

	)

49 
	#ENGINE_F_ENGINE_GET_PREV
 116

	)

50 
	#ENGINE_F_ENGINE_INIT
 119

	)

51 
	#ENGINE_F_ENGINE_LIST_ADD
 120

	)

52 
	#ENGINE_F_ENGINE_LIST_REMOVE
 121

	)

53 
	#ENGINE_F_ENGINE_LOAD_PRIVATE_KEY
 150

	)

54 
	#ENGINE_F_ENGINE_LOAD_PUBLIC_KEY
 151

	)

55 
	#ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT
 194

	)

56 
	#ENGINE_F_ENGINE_NEW
 122

	)

57 
	#ENGINE_F_ENGINE_PKEY_ASN1_FIND_STR
 197

	)

58 
	#ENGINE_F_ENGINE_REMOVE
 123

	)

59 
	#ENGINE_F_ENGINE_SET_DEFAULT_STRING
 189

	)

60 
	#ENGINE_F_ENGINE_SET_ID
 129

	)

61 
	#ENGINE_F_ENGINE_SET_NAME
 130

	)

62 
	#ENGINE_F_ENGINE_TABLE_REGISTER
 184

	)

63 
	#ENGINE_F_ENGINE_UNLOCKED_FINISH
 191

	)

64 
	#ENGINE_F_ENGINE_UP_REF
 190

	)

65 
	#ENGINE_F_INT_CLEANUP_ITEM
 199

	)

66 
	#ENGINE_F_INT_CTRL_HELPER
 172

	)

67 
	#ENGINE_F_INT_ENGINE_CONFIGURE
 188

	)

68 
	#ENGINE_F_INT_ENGINE_MODULE_INIT
 187

	)

69 
	#ENGINE_F_OSSL_HMAC_INIT
 200

	)

74 
	#ENGINE_R_ALREADY_LOADED
 100

	)

75 
	#ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER
 133

	)

76 
	#ENGINE_R_CMD_NOT_EXECUTABLE
 134

	)

77 
	#ENGINE_R_COMMAND_TAKES_INPUT
 135

	)

78 
	#ENGINE_R_COMMAND_TAKES_NO_INPUT
 136

	)

79 
	#ENGINE_R_CONFLICTING_ENGINE_ID
 103

	)

80 
	#ENGINE_R_CTRL_COMMAND_NOT_IMPLEMENTED
 119

	)

81 
	#ENGINE_R_DSO_FAILURE
 104

	)

82 
	#ENGINE_R_DSO_NOT_FOUND
 132

	)

83 
	#ENGINE_R_ENGINES_SECTION_ERROR
 148

	)

84 
	#ENGINE_R_ENGINE_CONFIGURATION_ERROR
 102

	)

85 
	#ENGINE_R_ENGINE_IS_NOT_IN_LIST
 105

	)

86 
	#ENGINE_R_ENGINE_SECTION_ERROR
 149

	)

87 
	#ENGINE_R_FAILED_LOADING_PRIVATE_KEY
 128

	)

88 
	#ENGINE_R_FAILED_LOADING_PUBLIC_KEY
 129

	)

89 
	#ENGINE_R_FINISH_FAILED
 106

	)

90 
	#ENGINE_R_ID_OR_NAME_MISSING
 108

	)

91 
	#ENGINE_R_INIT_FAILED
 109

	)

92 
	#ENGINE_R_INTERNAL_LIST_ERROR
 110

	)

93 
	#ENGINE_R_INVALID_ARGUMENT
 143

	)

94 
	#ENGINE_R_INVALID_CMD_NAME
 137

	)

95 
	#ENGINE_R_INVALID_CMD_NUMBER
 138

	)

96 
	#ENGINE_R_INVALID_INIT_VALUE
 151

	)

97 
	#ENGINE_R_INVALID_STRING
 150

	)

98 
	#ENGINE_R_NOT_INITIALISED
 117

	)

99 
	#ENGINE_R_NOT_LOADED
 112

	)

100 
	#ENGINE_R_NO_CONTROL_FUNCTION
 120

	)

101 
	#ENGINE_R_NO_INDEX
 144

	)

102 
	#ENGINE_R_NO_LOAD_FUNCTION
 125

	)

103 
	#ENGINE_R_NO_REFERENCE
 130

	)

104 
	#ENGINE_R_NO_SUCH_ENGINE
 116

	)

105 
	#ENGINE_R_UNIMPLEMENTED_CIPHER
 146

	)

106 
	#ENGINE_R_UNIMPLEMENTED_DIGEST
 147

	)

107 
	#ENGINE_R_UNIMPLEMENTED_PUBLIC_KEY_METHOD
 101

	)

108 
	#ENGINE_R_VERSION_INCOMPATIBILITY
 145

	)

	@/usr/include/openssl/evperr.h

11 #i‚de‡
HEADER_EVPERR_H


12 
	#HEADER_EVPERR_H


	)

14 
	~<›ís¶/symhacks.h
>

16 #ifde‡ 
__˝lu•lus


19 
ERR_lﬂd_EVP_°rögs
();

24 
	#EVP_F_AESNI_INIT_KEY
 165

	)

25 
	#EVP_F_AESNI_XTS_INIT_KEY
 207

	)

26 
	#EVP_F_AES_GCM_CTRL
 196

	)

27 
	#EVP_F_AES_INIT_KEY
 133

	)

28 
	#EVP_F_AES_OCB_CIPHER
 169

	)

29 
	#EVP_F_AES_T4_INIT_KEY
 178

	)

30 
	#EVP_F_AES_T4_XTS_INIT_KEY
 208

	)

31 
	#EVP_F_AES_WRAP_CIPHER
 170

	)

32 
	#EVP_F_AES_XTS_INIT_KEY
 209

	)

33 
	#EVP_F_ALG_MODULE_INIT
 177

	)

34 
	#EVP_F_ARIA_CCM_INIT_KEY
 175

	)

35 
	#EVP_F_ARIA_GCM_CTRL
 197

	)

36 
	#EVP_F_ARIA_GCM_INIT_KEY
 176

	)

37 
	#EVP_F_ARIA_INIT_KEY
 185

	)

38 
	#EVP_F_B64_NEW
 198

	)

39 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

40 
	#EVP_F_CHACHA20_POLY1305_CTRL
 182

	)

41 
	#EVP_F_CMLL_T4_INIT_KEY
 179

	)

42 
	#EVP_F_DES_EDE3_WRAP_CIPHER
 171

	)

43 
	#EVP_F_DO_SIGVER_INIT
 161

	)

44 
	#EVP_F_ENC_NEW
 199

	)

45 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

46 
	#EVP_F_EVP_CIPHER_ASN1_TO_PARAM
 204

	)

47 
	#EVP_F_EVP_CIPHER_CTX_COPY
 163

	)

48 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

49 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

50 
	#EVP_F_EVP_CIPHER_PARAM_TO_ASN1
 205

	)

51 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

52 
	#EVP_F_EVP_DECRYPTUPDATE
 166

	)

53 
	#EVP_F_EVP_DIGESTFINALXOF
 174

	)

54 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

55 
	#EVP_F_EVP_ENCRYPTDECRYPTUPDATE
 219

	)

56 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

57 
	#EVP_F_EVP_ENCRYPTUPDATE
 167

	)

58 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

59 
	#EVP_F_EVP_MD_SIZE
 162

	)

60 
	#EVP_F_EVP_OPENINIT
 102

	)

61 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

62 
	#EVP_F_EVP_PBE_ALG_ADD_TYPE
 160

	)

63 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

64 
	#EVP_F_EVP_PBE_SCRYPT
 181

	)

65 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

66 
	#EVP_F_EVP_PKEY2PKCS8
 113

	)

67 
	#EVP_F_EVP_PKEY_ASN1_ADD0
 188

	)

68 
	#EVP_F_EVP_PKEY_CHECK
 186

	)

69 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

70 
	#EVP_F_EVP_PKEY_CTX_CTRL
 137

	)

71 
	#EVP_F_EVP_PKEY_CTX_CTRL_STR
 150

	)

72 
	#EVP_F_EVP_PKEY_CTX_DUP
 156

	)

73 
	#EVP_F_EVP_PKEY_CTX_MD
 168

	)

74 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

75 
	#EVP_F_EVP_PKEY_DECRYPT_INIT
 138

	)

76 
	#EVP_F_EVP_PKEY_DECRYPT_OLD
 151

	)

77 
	#EVP_F_EVP_PKEY_DERIVE
 153

	)

78 
	#EVP_F_EVP_PKEY_DERIVE_INIT
 154

	)

79 
	#EVP_F_EVP_PKEY_DERIVE_SET_PEER
 155

	)

80 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

81 
	#EVP_F_EVP_PKEY_ENCRYPT_INIT
 139

	)

82 
	#EVP_F_EVP_PKEY_ENCRYPT_OLD
 152

	)

83 
	#EVP_F_EVP_PKEY_GET0_DH
 119

	)

84 
	#EVP_F_EVP_PKEY_GET0_DSA
 120

	)

85 
	#EVP_F_EVP_PKEY_GET0_EC_KEY
 131

	)

86 
	#EVP_F_EVP_PKEY_GET0_HMAC
 183

	)

87 
	#EVP_F_EVP_PKEY_GET0_POLY1305
 184

	)

88 
	#EVP_F_EVP_PKEY_GET0_RSA
 121

	)

89 
	#EVP_F_EVP_PKEY_GET0_SIPHASH
 172

	)

90 
	#EVP_F_EVP_PKEY_GET_RAW_PRIVATE_KEY
 202

	)

91 
	#EVP_F_EVP_PKEY_GET_RAW_PUBLIC_KEY
 203

	)

92 
	#EVP_F_EVP_PKEY_KEYGEN
 146

	)

93 
	#EVP_F_EVP_PKEY_KEYGEN_INIT
 147

	)

94 
	#EVP_F_EVP_PKEY_METH_ADD0
 194

	)

95 
	#EVP_F_EVP_PKEY_METH_NEW
 195

	)

96 
	#EVP_F_EVP_PKEY_NEW
 106

	)

97 
	#EVP_F_EVP_PKEY_NEW_CMAC_KEY
 193

	)

98 
	#EVP_F_EVP_PKEY_NEW_RAW_PRIVATE_KEY
 191

	)

99 
	#EVP_F_EVP_PKEY_NEW_RAW_PUBLIC_KEY
 192

	)

100 
	#EVP_F_EVP_PKEY_PARAMGEN
 148

	)

101 
	#EVP_F_EVP_PKEY_PARAMGEN_INIT
 149

	)

102 
	#EVP_F_EVP_PKEY_PARAM_CHECK
 189

	)

103 
	#EVP_F_EVP_PKEY_PUBLIC_CHECK
 190

	)

104 
	#EVP_F_EVP_PKEY_SET1_ENGINE
 187

	)

105 
	#EVP_F_EVP_PKEY_SET_ALIAS_TYPE
 206

	)

106 
	#EVP_F_EVP_PKEY_SIGN
 140

	)

107 
	#EVP_F_EVP_PKEY_SIGN_INIT
 141

	)

108 
	#EVP_F_EVP_PKEY_VERIFY
 142

	)

109 
	#EVP_F_EVP_PKEY_VERIFY_INIT
 143

	)

110 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER
 144

	)

111 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT
 145

	)

112 
	#EVP_F_EVP_SIGNFINAL
 107

	)

113 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

114 
	#EVP_F_INT_CTX_NEW
 157

	)

115 
	#EVP_F_OK_NEW
 200

	)

116 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

117 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

118 
	#EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN
 164

	)

119 
	#EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN
 180

	)

120 
	#EVP_F_PKEY_SET_TYPE
 158

	)

121 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

122 
	#EVP_F_RC5_CTRL
 125

	)

123 
	#EVP_F_R_32_12_16_INIT_KEY
 242

	)

124 
	#EVP_F_S390X_AES_GCM_CTRL
 201

	)

125 
	#EVP_F_UPDATE
 173

	)

130 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

131 
	#EVP_R_ARIA_KEY_SETUP_FAILED
 176

	)

132 
	#EVP_R_BAD_DECRYPT
 100

	)

133 
	#EVP_R_BAD_KEY_LENGTH
 195

	)

134 
	#EVP_R_BUFFER_TOO_SMALL
 155

	)

135 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

136 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

137 
	#EVP_R_COMMAND_NOT_SUPPORTED
 147

	)

138 
	#EVP_R_COPY_ERROR
 173

	)

139 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

140 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

141 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

142 
	#EVP_R_DECODE_ERROR
 114

	)

143 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

144 
	#EVP_R_DIFFERENT_PARAMETERS
 153

	)

145 
	#EVP_R_ERROR_LOADING_SECTION
 165

	)

146 
	#EVP_R_ERROR_SETTING_FIPS_MODE
 166

	)

147 
	#EVP_R_EXPECTING_AN_HMAC_KEY
 174

	)

148 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

149 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

150 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

151 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

152 
	#EVP_R_EXPECTING_A_POLY1305_KEY
 164

	)

153 
	#EVP_R_EXPECTING_A_SIPHASH_KEY
 175

	)

154 
	#EVP_R_FIPS_MODE_NOT_SUPPORTED
 167

	)

155 
	#EVP_R_GET_RAW_KEY_FAILED
 182

	)

156 
	#EVP_R_ILLEGAL_SCRYPT_PARAMETERS
 171

	)

157 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

158 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

159 
	#EVP_R_INVALID_DIGEST
 152

	)

160 
	#EVP_R_INVALID_FIPS_MODE
 168

	)

161 
	#EVP_R_INVALID_IV_LENGTH
 194

	)

162 
	#EVP_R_INVALID_KEY
 163

	)

163 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

164 
	#EVP_R_INVALID_OPERATION
 148

	)

165 
	#EVP_R_KEYGEN_FAILURE
 120

	)

166 
	#EVP_R_KEY_SETUP_FAILED
 180

	)

167 
	#EVP_R_MEMORY_LIMIT_EXCEEDED
 172

	)

168 
	#EVP_R_MESSAGE_DIGEST_IS_NULL
 159

	)

169 
	#EVP_R_METHOD_NOT_SUPPORTED
 144

	)

170 
	#EVP_R_MISSING_PARAMETERS
 103

	)

171 
	#EVP_R_NOT_XOF_OR_INVALID_LENGTH
 178

	)

172 
	#EVP_R_NO_CIPHER_SET
 131

	)

173 
	#EVP_R_NO_DEFAULT_DIGEST
 158

	)

174 
	#EVP_R_NO_DIGEST_SET
 139

	)

175 
	#EVP_R_NO_KEY_SET
 154

	)

176 
	#EVP_R_NO_OPERATION_SET
 149

	)

177 
	#EVP_R_ONLY_ONESHOT_SUPPORTED
 177

	)

178 
	#EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 150

	)

179 
	#EVP_R_OPERATON_NOT_INITIALIZED
 151

	)

180 
	#EVP_R_OUTPUT_WOULD_OVERFLOW
 184

	)

181 
	#EVP_R_PARTIALLY_OVERLAPPING
 162

	)

182 
	#EVP_R_PBKDF2_ERROR
 181

	)

183 
	#EVP_R_PKEY_APPLICATION_ASN1_METHOD_ALREADY_REGISTERED
 179

	)

184 
	#EVP_R_PRIVATE_KEY_DECODE_ERROR
 145

	)

185 
	#EVP_R_PRIVATE_KEY_ENCODE_ERROR
 146

	)

186 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

187 
	#EVP_R_UNKNOWN_CIPHER
 160

	)

188 
	#EVP_R_UNKNOWN_DIGEST
 161

	)

189 
	#EVP_R_UNKNOWN_OPTION
 169

	)

190 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

191 
	#EVP_R_UNSUPPORTED_ALGORITHM
 156

	)

192 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

193 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

194 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

195 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

196 
	#EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS
 135

	)

197 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

198 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

199 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

200 
	#EVP_R_WRAP_MODE_NOT_ALLOWED
 170

	)

201 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

202 
	#EVP_R_XTS_DUPLICATED_KEYS
 183

	)

	@/usr/include/openssl/hmac.h

10 #i‚de‡
HEADER_HMAC_H


11 
	#HEADER_HMAC_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 
	~<›ís¶/evp.h
>

17 #i‡
OPENSSL_API_COMPAT
 < 0x10200000L

18 
	#HMAC_MAX_MD_CBLOCK
 128

	)

21 #ifde‡ 
__˝lu•lus


25 
size_t
 
HMAC_size
(c⁄° 
HMAC_CTX
 *
e
);

26 
HMAC_CTX
 *
HMAC_CTX_√w
();

27 
HMAC_CTX_ª£t
(
HMAC_CTX
 *
˘x
);

28 
HMAC_CTX_‰ì
(
HMAC_CTX
 *
˘x
);

30 
DEPRECATEDIN_1_1_0
(
__owur
 
HMAC_Inô
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

31 c⁄° 
EVP_MD
 *
md
))

33  
HMAC_Inô_ex
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

34 c⁄° 
EVP_MD
 *
md
, 
ENGINE
 *
im∂
);

35  
HMAC_Upd©e
(
HMAC_CTX
 *
˘x
, c⁄° *
d©a
,

36 
size_t
 
Àn
);

37  
HMAC_FöÆ
(
HMAC_CTX
 *
˘x
, *
md
,

38 *
Àn
);

39 *
HMAC
(c⁄° 
EVP_MD
 *
evp_md
, c⁄° *
key
, 
key_Àn
,

40 c⁄° *
d
, 
size_t
 
n
, *
md
,

41 *
md_Àn
);

42 
__owur
 
HMAC_CTX_c›y
(
HMAC_CTX
 *
d˘x
, HMAC_CTX *
s˘x
);

44 
HMAC_CTX_£t_Êags
(
HMAC_CTX
 *
˘x
, 
Êags
);

45 c⁄° 
EVP_MD
 *
HMAC_CTX_gë_md
(c⁄° 
HMAC_CTX
 *
˘x
);

47 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/lhash.h

14 #i‚de‡
HEADER_LHASH_H


15 
	#HEADER_LHASH_H


	)

17 
	~<›ís¶/e_os2.h
>

18 
	~<›ís¶/bio.h
>

20 #ifde‡ 
__˝lu•lus


24 
lhash_node_°
 
	tOPENSSL_LH_NODE
;

25 (*
OPENSSL_LH_COMPFUNC
) (const *, const *);

26 (*
	tOPENSSL_LH_HASHFUNC
) (const *);

27 (*
OPENSSL_LH_DOALL_FUNC
) (*);

28 (*
OPENSSL_LH_DOALL_FUNCARG
) (*, *);

29 
lhash_°
 
	tOPENSSL_LHASH
;

41 
	#DECLARE_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

42 
«me
##
	`_LHASH_HASH
(c⁄° *);

	)

43 
	#IMPLEMENT_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

44 
«me
##
	`_LHASH_HASH
(c⁄° *
¨g
) { \

45 c⁄° 
o_ty≥
 *
a
 = 
¨g
; \

46  
«me
##
	`_hash
(
a
); }

	)

47 
	#LHASH_HASH_FN
(
«me
Ë«me##
_LHASH_HASH


	)

50 
	#DECLARE_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

51 
«me
##
	`_LHASH_COMP
(c⁄° *, c⁄° *);

	)

52 
	#IMPLEMENT_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

53 
«me
##
	`_LHASH_COMP
(c⁄° *
¨g1
, c⁄° *
¨g2
) { \

54 c⁄° 
o_ty≥
 *
a
 = 
¨g1
; \

55 c⁄° 
o_ty≥
 *
b
 = 
¨g2
; \

56  
«me
##
	`_cmp
(
a
,
b
); }

	)

57 
	#LHASH_COMP_FN
(
«me
Ë«me##
_LHASH_COMP


	)

60 
	#DECLARE_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

61 
«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

62 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

63 
«me
##
	`_LHASH_DOALL_ARG
(*
¨g1
, *
¨g2
) { \

64 
o_ty≥
 *
a
 = 
¨g1
; \

65 
a_ty≥
 *
b
 = 
¨g2
; \

66 
«me
##
	`_dﬂŒ_¨g
(
a
, 
b
); }

	)

67 
	#LHASH_DOALL_ARG_FN
(
«me
Ë«me##
_LHASH_DOALL_ARG


	)

70 
	#LH_LOAD_MULT
 256

	)

72 
OPENSSL_LH_îr‹
(
OPENSSL_LHASH
 *
lh
);

73 
OPENSSL_LHASH
 *
OPENSSL_LH_√w
(
OPENSSL_LH_HASHFUNC
 
h
, 
OPENSSL_LH_COMPFUNC
 
c
);

74 
OPENSSL_LH_‰ì
(
OPENSSL_LHASH
 *
lh
);

75 *
OPENSSL_LH_ö£π
(
OPENSSL_LHASH
 *
lh
, *
d©a
);

76 *
OPENSSL_LH_dñëe
(
OPENSSL_LHASH
 *
lh
, c⁄° *
d©a
);

77 *
OPENSSL_LH_ªåõve
(
OPENSSL_LHASH
 *
lh
, c⁄° *
d©a
);

78 
OPENSSL_LH_dﬂŒ
(
OPENSSL_LHASH
 *
lh
, 
OPENSSL_LH_DOALL_FUNC
 
func
);

79 
OPENSSL_LH_dﬂŒ_¨g
(
OPENSSL_LHASH
 *
lh
, 
OPENSSL_LH_DOALL_FUNCARG
 
func
, *
¨g
);

80 
OPENSSL_LH_°rhash
(c⁄° *
c
);

81 
OPENSSL_LH_num_ôems
(c⁄° 
OPENSSL_LHASH
 *
lh
);

82 
OPENSSL_LH_gë_down_lﬂd
(c⁄° 
OPENSSL_LHASH
 *
lh
);

83 
OPENSSL_LH_£t_down_lﬂd
(
OPENSSL_LHASH
 *
lh
, 
down_lﬂd
);

85 #i‚de‡
OPENSSL_NO_STDIO


86 
OPENSSL_LH_°©s
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
FILE
 *
Â
);

87 
OPENSSL_LH_node_°©s
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
FILE
 *
Â
);

88 
OPENSSL_LH_node_ußge_°©s
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
FILE
 *
Â
);

90 
OPENSSL_LH_°©s_bio
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
BIO
 *
out
);

91 
OPENSSL_LH_node_°©s_bio
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
BIO
 *
out
);

92 
OPENSSL_LH_node_ußge_°©s_bio
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
BIO
 *
out
);

94 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

95 
	#_LHASH
 
OPENSSL_LHASH


	)

96 
	#LHASH_NODE
 
OPENSSL_LH_NODE


	)

97 
	#lh_îr‹
 
OPENSSL_LH_îr‹


	)

98 
	#lh_√w
 
OPENSSL_LH_√w


	)

99 
	#lh_‰ì
 
OPENSSL_LH_‰ì


	)

100 
	#lh_ö£π
 
OPENSSL_LH_ö£π


	)

101 
	#lh_dñëe
 
OPENSSL_LH_dñëe


	)

102 
	#lh_ªåõve
 
OPENSSL_LH_ªåõve


	)

103 
	#lh_dﬂŒ
 
OPENSSL_LH_dﬂŒ


	)

104 
	#lh_dﬂŒ_¨g
 
OPENSSL_LH_dﬂŒ_¨g


	)

105 
	#lh_°rhash
 
OPENSSL_LH_°rhash


	)

106 
	#lh_num_ôems
 
OPENSSL_LH_num_ôems


	)

107 #i‚de‡
OPENSSL_NO_STDIO


108 
	#lh_°©s
 
OPENSSL_LH_°©s


	)

109 
	#lh_node_°©s
 
OPENSSL_LH_node_°©s


	)

110 
	#lh_node_ußge_°©s
 
OPENSSL_LH_node_ußge_°©s


	)

112 
	#lh_°©s_bio
 
OPENSSL_LH_°©s_bio


	)

113 
	#lh_node_°©s_bio
 
OPENSSL_LH_node_°©s_bio


	)

114 
	#lh_node_ußge_°©s_bio
 
OPENSSL_LH_node_ußge_°©s_bio


	)

119 
	#LHASH_OF
(
ty≥
Ë
lhash_°_
##
	)
type

121 
	#DEFINE_LHASH_OF
(
ty≥
) \

122 
	`LHASH_OF
(
ty≥
Ë{ 
lh_
##ty≥##
_dummy
 { * 
d1
; 
d2
; 
d3
; } 
dummy
; }; \

123 
os¶_unu£d
 
os¶_ölöe
 
	`LHASH_OF
(
ty≥
Ë*
lh_
##ty≥##
	`_√w
((*
h‚
)(constÅype *), \

124 (*
c‚
)(c⁄° 
ty≥
 *, constÅype *)) \

126  (
	`LHASH_OF
(
ty≥
) *) \

127 
	`OPENSSL_LH_√w
((
OPENSSL_LH_HASHFUNC
)
h‚
, (
OPENSSL_LH_COMPFUNC
)
c‚
); \

129 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_‰ì
(
	`LHASH_OF
—y≥Ë*
lh
) \

131 
	`OPENSSL_LH_‰ì
((
OPENSSL_LHASH
 *)
lh
); \

133 
os¶_unu£d
 
os¶_ölöe
 
ty≥
 *
lh_
##ty≥##
	`_ö£π
(
	`LHASH_OF
—y≥Ë*
lh
,Åy≥ *
d
) \

135  (
ty≥
 *)
	`OPENSSL_LH_ö£π
((
OPENSSL_LHASH
 *)
lh
, 
d
); \

137 
os¶_unu£d
 
os¶_ölöe
 
ty≥
 *
lh_
##ty≥##
	`_dñëe
(
	`LHASH_OF
—y≥Ë*
lh
, c⁄°Åy≥ *
d
) \

139  (
ty≥
 *)
	`OPENSSL_LH_dñëe
((
OPENSSL_LHASH
 *)
lh
, 
d
); \

141 
os¶_unu£d
 
os¶_ölöe
 
ty≥
 *
lh_
##ty≥##
	`_ªåõve
(
	`LHASH_OF
—y≥Ë*
lh
, c⁄°Åy≥ *
d
) \

143  (
ty≥
 *)
	`OPENSSL_LH_ªåõve
((
OPENSSL_LHASH
 *)
lh
, 
d
); \

145 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_îr‹
(
	`LHASH_OF
—y≥Ë*
lh
) \

147  
	`OPENSSL_LH_îr‹
((
OPENSSL_LHASH
 *)
lh
); \

149 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_num_ôems
(
	`LHASH_OF
—y≥Ë*
lh
) \

151  
	`OPENSSL_LH_num_ôems
((
OPENSSL_LHASH
 *)
lh
); \

153 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_node_°©s_bio
(c⁄° 
	`LHASH_OF
—y≥Ë*
lh
, 
BIO
 *
out
) \

155 
	`OPENSSL_LH_node_°©s_bio
((c⁄° 
OPENSSL_LHASH
 *)
lh
, 
out
); \

157 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_node_ußge_°©s_bio
(c⁄° 
	`LHASH_OF
—y≥Ë*
lh
, 
BIO
 *
out
) \

159 
	`OPENSSL_LH_node_ußge_°©s_bio
((c⁄° 
OPENSSL_LHASH
 *)
lh
, 
out
); \

161 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_°©s_bio
(c⁄° 
	`LHASH_OF
—y≥Ë*
lh
, 
BIO
 *
out
) \

163 
	`OPENSSL_LH_°©s_bio
((c⁄° 
OPENSSL_LHASH
 *)
lh
, 
out
); \

165 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_gë_down_lﬂd
(
	`LHASH_OF
—y≥Ë*
lh
) \

167  
	`OPENSSL_LH_gë_down_lﬂd
((
OPENSSL_LHASH
 *)
lh
); \

169 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_£t_down_lﬂd
(
	`LHASH_OF
—y≥Ë*
lh
, 
dl
) \

171 
	`OPENSSL_LH_£t_down_lﬂd
((
OPENSSL_LHASH
 *)
lh
, 
dl
); \

173 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_dﬂŒ
(
	`LHASH_OF
—y≥Ë*
lh
, \

174 (*
dﬂŒ
)(
ty≥
 *)) \

176 
	`OPENSSL_LH_dﬂŒ
((
OPENSSL_LHASH
 *)
lh
, (
OPENSSL_LH_DOALL_FUNC
)
dﬂŒ
); \

178 
	`LHASH_OF
(
ty≥
)

	)

180 
	#IMPLEMENT_LHASH_DOALL_ARG_CONST
(
ty≥
, 
¨gty≥
) \

181 
	`öt_im∂emít_lhash_dﬂŒ
(
ty≥
, 
¨gty≥
, c⁄°Åy≥)

	)

183 
	#IMPLEMENT_LHASH_DOALL_ARG
(
ty≥
, 
¨gty≥
) \

184 
	`öt_im∂emít_lhash_dﬂŒ
(
ty≥
, 
¨gty≥
,Åy≥)

	)

186 
	#öt_im∂emít_lhash_dﬂŒ
(
ty≥
, 
¨gty≥
, 
cb¨gty≥
) \

187 
os¶_unu£d
 
os¶_ölöe
 \

188 
lh_
##
ty≥
##
_dﬂŒ_
##
	`¨gty≥
(
	`LHASH_OF
—y≥Ë*
lh
, \

189 (*
‚
)(
cb¨gty≥
 *, 
¨gty≥
 *), \

190 
¨gty≥
 *
¨g
) \

192 
	`OPENSSL_LH_dﬂŒ_¨g
((
OPENSSL_LHASH
 *)
lh
, (
OPENSSL_LH_DOALL_FUNCARG
)
‚
, (*)
¨g
); \

194 
	`LHASH_OF
(
ty≥
)

	)

196 
DEFINE_LHASH_OF
(
OPENSSL_STRING
);

197 #ifde‡
_MSC_VER


202 #¥agm®
w¨nög
 (
push
)

203 #¥agm®
w¨nög
 (
dißbÀ
: 4090)

206 
DEFINE_LHASH_OF
(
OPENSSL_CSTRING
);

208 #ifde‡
_MSC_VER


209 #¥agm®
w¨nög
 (
p›
)

220 #ifde‡
__SUNPRO_C


221 #¥agm®
wók
 
OPENSSL_LH_√w


222 #¥agm®
wók
 
OPENSSL_LH_‰ì


223 #¥agm®
wók
 
OPENSSL_LH_ö£π


224 #¥agm®
wók
 
OPENSSL_LH_dñëe


225 #¥agm®
wók
 
OPENSSL_LH_ªåõve


226 #¥agm®
wók
 
OPENSSL_LH_îr‹


227 #¥agm®
wók
 
OPENSSL_LH_num_ôems


228 #¥agm®
wók
 
OPENSSL_LH_node_°©s_bio


229 #¥agm®
wók
 
OPENSSL_LH_node_ußge_°©s_bio


230 #¥agm®
wók
 
OPENSSL_LH_°©s_bio


231 #¥agm®
wók
 
OPENSSL_LH_gë_down_lﬂd


232 #¥agm®
wók
 
OPENSSL_LH_£t_down_lﬂd


233 #¥agm®
wók
 
OPENSSL_LH_dﬂŒ


234 #¥agm®
wók
 
OPENSSL_LH_dﬂŒ_¨g


237 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/objects.h

10 #i‚de‡
HEADER_OBJECTS_H


11 
	#HEADER_OBJECTS_H


	)

13 
	~<›ís¶/obj_mac.h
>

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/a¢1.h
>

16 
	~<›ís¶/obje˘£º.h
>

18 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

19 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

20 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

21 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

22 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

23 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

25 
	#OBJ_NAME_ALIAS
 0x8000

	)

27 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

28 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

31 #ifde‡ 
__˝lu•lus


35 
	sobj_«me_°
 {

36 
ty≥
;

37 
Æüs
;

38 c⁄° *
«me
;

39 c⁄° *
d©a
;

40 } 
	tOBJ_NAME
;

42 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

44 
OBJ_NAME_öô
();

45 
OBJ_NAME_√w_ödex
((*
hash_func
) (const *),

46 (*
cmp_func
) (const *, const *),

47 (*
‰ì_func
) (const *, , const *));

48 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
, 
ty≥
);

49 
OBJ_NAME_add
(c⁄° *
«me
, 
ty≥
, c⁄° *
d©a
);

50 
OBJ_NAME_ªmove
(c⁄° *
«me
, 
ty≥
);

51 
OBJ_NAME_˛ónup
(
ty≥
);

52 
OBJ_NAME_do_Æl
(
ty≥
, (*
‚
Ë(c⁄° 
OBJ_NAME
 *, *
¨g
),

53 *
¨g
);

54 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,

55 (*
‚
Ë(c⁄° 
OBJ_NAME
 *, *
¨g
),

56 *
¨g
);

58 
ASN1_OBJECT
 *
OBJ_dup
(c⁄° ASN1_OBJECT *
o
);

59 
ASN1_OBJECT
 *
OBJ_nid2obj
(
n
);

60 c⁄° *
OBJ_nid2 
(
n
);

61 c⁄° *
OBJ_nid2¢
(
n
);

62 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

63 
ASN1_OBJECT
 *
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

64 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

65 
OBJ_txt2nid
(c⁄° *
s
);

66 
OBJ_ 2nid
(c⁄° *
s
);

67 
OBJ_¢2nid
(c⁄° *
s
);

68 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
, c⁄° ASN1_OBJECT *
b
);

69 c⁄° *
OBJ_b£¨ch_
(c⁄° *
key
, c⁄° *
ba£
, 
num
, 
size
,

70 (*
cmp
) (const *, const *));

71 c⁄° *
OBJ_b£¨ch_ex_
(c⁄° *
key
, c⁄° *
ba£
, 
num
,

72 
size
,

73 (*
cmp
) (const *, const *),

74 
Êags
);

76 
	#_DECLARE_OBJ_BSEARCH_CMP_FN
(
sc›e
, 
ty≥1
, 
ty≥2
, 
nm
) \

77 
nm
##
	`_cmp_BSEARCH_CMP_FN
(const *, const *); \

78 
nm
##
	`_cmp
(
ty≥1
 c⁄° *, 
ty≥2
 const *); \

79 
sc›e
 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

81 
	#DECLARE_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
cmp
) \

82 
	`_DECLARE_OBJ_BSEARCH_CMP_FN
(, 
ty≥1
, 
ty≥2
, 
cmp
)

	)

83 
	#DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

84 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

113 
	#IMPLEMENT_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

114 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

116 
ty≥1
 c⁄° *
a
 = 
a_
; \

117 
ty≥2
 c⁄° *
b
 = 
b_
; \

118  
nm
##
	`_cmp
(
a
,
b
); \

120 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

122  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

123 
nm
##
_cmp_BSEARCH_CMP_FN
); \

125 
	`dummy_¥ŸŸy≥
()

	)

127 
	#IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

128 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

130 
ty≥1
 c⁄° *
a
 = 
a_
; \

131 
ty≥2
 c⁄° *
b
 = 
b_
; \

132  
nm
##
	`_cmp
(
a
,
b
); \

134 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

136  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

137 
nm
##
_cmp_BSEARCH_CMP_FN
); \

139 
	`dummy_¥ŸŸy≥
()

	)

141 
	#OBJ_b£¨ch
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
) \

142 ((
ty≥2
 *)
	`OBJ_b£¨ch_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

143 
num
,(
ty≥2
), \

144 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

145 ()
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

146 
cmp
##
_BSEARCH_CMP_FN
)))

	)

148 
	#OBJ_b£¨ch_ex
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
,
Êags
) \

149 ((
ty≥2
 *)
	`OBJ_b£¨ch_ex_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

150 
num
,(
ty≥2
), \

151 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

152 ()
ty≥_2
=
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

153 
cmp
##
_BSEARCH_CMP_FN
)),
Êags
)

	)

155 
OBJ_√w_nid
(
num
);

156 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

157 
OBJ_¸óã
(c⁄° *
oid
, c⁄° *
¢
, c⁄° *
 
);

158 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

159 
	#OBJ_˛ónup
(Ë0Ë

	)

161 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

163 
size_t
 
OBJ_Àngth
(c⁄° 
ASN1_OBJECT
 *
obj
);

164 c⁄° *
OBJ_gë0_d©a
(c⁄° 
ASN1_OBJECT
 *
obj
);

166 
OBJ_föd_sigid_Ægs
(
signid
, *
pdig_nid
, *
µkey_nid
);

167 
OBJ_föd_sigid_by_Ægs
(*
psignid
, 
dig_nid
, 
pkey_nid
);

168 
OBJ_add_sigid
(
signid
, 
dig_id
, 
pkey_id
);

169 
OBJ_sigid_‰ì
();

172 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ocsperr.h

11 #i‚de‡
HEADER_OCSPERR_H


12 
	#HEADER_OCSPERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 
	~<›ís¶/›ís¶c⁄f.h
>

20 #i‚de‡
OPENSSL_NO_OCSP


22 #ifde‡ 
__˝lu•lus


25 
ERR_lﬂd_OCSP_°rögs
();

30 
	#OCSP_F_D2I_OCSP_NONCE
 102

	)

31 
	#OCSP_F_OCSP_BASIC_ADD1_STATUS
 103

	)

32 
	#OCSP_F_OCSP_BASIC_SIGN
 104

	)

33 
	#OCSP_F_OCSP_BASIC_SIGN_CTX
 119

	)

34 
	#OCSP_F_OCSP_BASIC_VERIFY
 105

	)

35 
	#OCSP_F_OCSP_CERT_ID_NEW
 101

	)

36 
	#OCSP_F_OCSP_CHECK_DELEGATED
 106

	)

37 
	#OCSP_F_OCSP_CHECK_IDS
 107

	)

38 
	#OCSP_F_OCSP_CHECK_ISSUER
 108

	)

39 
	#OCSP_F_OCSP_CHECK_VALIDITY
 115

	)

40 
	#OCSP_F_OCSP_MATCH_ISSUERID
 109

	)

41 
	#OCSP_F_OCSP_PARSE_URL
 114

	)

42 
	#OCSP_F_OCSP_REQUEST_SIGN
 110

	)

43 
	#OCSP_F_OCSP_REQUEST_VERIFY
 116

	)

44 
	#OCSP_F_OCSP_RESPONSE_GET1_BASIC
 111

	)

45 
	#OCSP_F_PARSE_HTTP_LINE1
 118

	)

50 
	#OCSP_R_CERTIFICATE_VERIFY_ERROR
 101

	)

51 
	#OCSP_R_DIGEST_ERR
 102

	)

52 
	#OCSP_R_ERROR_IN_NEXTUPDATE_FIELD
 122

	)

53 
	#OCSP_R_ERROR_IN_THISUPDATE_FIELD
 123

	)

54 
	#OCSP_R_ERROR_PARSING_URL
 121

	)

55 
	#OCSP_R_MISSING_OCSPSIGNING_USAGE
 103

	)

56 
	#OCSP_R_NEXTUPDATE_BEFORE_THISUPDATE
 124

	)

57 
	#OCSP_R_NOT_BASIC_RESPONSE
 104

	)

58 
	#OCSP_R_NO_CERTIFICATES_IN_CHAIN
 105

	)

59 
	#OCSP_R_NO_RESPONSE_DATA
 108

	)

60 
	#OCSP_R_NO_REVOKED_TIME
 109

	)

61 
	#OCSP_R_NO_SIGNER_KEY
 130

	)

62 
	#OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 110

	)

63 
	#OCSP_R_REQUEST_NOT_SIGNED
 128

	)

64 
	#OCSP_R_RESPONSE_CONTAINS_NO_REVOCATION_DATA
 111

	)

65 
	#OCSP_R_ROOT_CA_NOT_TRUSTED
 112

	)

66 
	#OCSP_R_SERVER_RESPONSE_ERROR
 114

	)

67 
	#OCSP_R_SERVER_RESPONSE_PARSE_ERROR
 115

	)

68 
	#OCSP_R_SIGNATURE_FAILURE
 117

	)

69 
	#OCSP_R_SIGNER_CERTIFICATE_NOT_FOUND
 118

	)

70 
	#OCSP_R_STATUS_EXPIRED
 125

	)

71 
	#OCSP_R_STATUS_NOT_YET_VALID
 126

	)

72 
	#OCSP_R_STATUS_TOO_OLD
 127

	)

73 
	#OCSP_R_UNKNOWN_MESSAGE_DIGEST
 119

	)

74 
	#OCSP_R_UNKNOWN_NID
 120

	)

75 
	#OCSP_R_UNSUPPORTED_REQUESTORNAME_TYPE
 129

	)

	@/usr/include/openssl/ossl_typ.h

10 #i‚de‡
HEADER_OPENSSL_TYPES_H


11 
	#HEADER_OPENSSL_TYPES_H


	)

13 
	~<limôs.h
>

15 #ifde‡ 
__˝lu•lus


19 
	~<›ís¶/e_os2.h
>

21 #ifde‡
NO_ASN1_TYPEDEFS


22 
	#ASN1_INTEGER
 
ASN1_STRING


	)

23 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

24 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

25 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

26 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

27 
	#ASN1_T61STRING
 
ASN1_STRING


	)

28 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

29 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

30 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

31 
	#ASN1_TIME
 
ASN1_STRING


	)

32 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

33 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

34 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

35 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

36 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

37 
	#ASN1_BOOLEAN
 

	)

38 
	#ASN1_NULL
 

	)

40 
a¢1_°rög_°
 
	tASN1_INTEGER
;

41 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

42 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

43 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

44 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

45 
a¢1_°rög_°
 
	tASN1_T61STRING
;

46 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

47 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

48 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

49 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

50 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

51 
a¢1_°rög_°
 
	tASN1_TIME
;

52 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

53 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

54 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

55 
a¢1_°rög_°
 
	tASN1_STRING
;

56 
	tASN1_BOOLEAN
;

57 
	tASN1_NULL
;

60 
a¢1_obje˘_°
 
	tASN1_OBJECT
;

62 
ASN1_ITEM_°
 
	tASN1_ITEM
;

63 
a¢1_p˘x_°
 
	tASN1_PCTX
;

64 
a¢1_s˘x_°
 
	tASN1_SCTX
;

66 #ifde‡
_WIN32


67 #unde‡
X509_NAME


68 #unde‡
X509_EXTENSIONS


69 #unde‡
PKCS7_ISSUER_AND_SERIAL


70 #unde‡
PKCS7_SIGNER_INFO


71 #unde‡
OCSP_REQUEST


72 #unde‡
OCSP_RESPONSE


75 #ifde‡
BIGNUM


76 #unde‡
BIGNUM


78 
d™e_°
;

79 
bio_°
 
	tBIO
;

80 
bignum_°
 
	tBIGNUM
;

81 
bignum_˘x
 
	tBN_CTX
;

82 
bn_blödög_°
 
	tBN_BLINDING
;

83 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

84 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

85 
bn_gícb_°
 
	tBN_GENCB
;

87 
buf_mem_°
 
	tBUF_MEM
;

89 
evp_cùhî_°
 
	tEVP_CIPHER
;

90 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

91 
evp_md_°
 
	tEVP_MD
;

92 
evp_md_˘x_°
 
	tEVP_MD_CTX
;

93 
evp_pkey_°
 
	tEVP_PKEY
;

95 
evp_pkey_a¢1_mëhod_°
 
	tEVP_PKEY_ASN1_METHOD
;

97 
evp_pkey_mëhod_°
 
	tEVP_PKEY_METHOD
;

98 
evp_pkey_˘x_°
 
	tEVP_PKEY_CTX
;

100 
evp_Encode_Ctx_°
 
	tEVP_ENCODE_CTX
;

102 
hmac_˘x_°
 
	tHMAC_CTX
;

104 
dh_°
 
	tDH
;

105 
dh_mëhod
 
	tDH_METHOD
;

107 
dß_°
 
	tDSA
;

108 
dß_mëhod
 
	tDSA_METHOD
;

110 
rß_°
 
	tRSA
;

111 
rß_mëh_°
 
	tRSA_METHOD
;

112 
rß_pss_∑øms_°
 
	tRSA_PSS_PARAMS
;

114 
ec_key_°
 
	tEC_KEY
;

115 
ec_key_mëhod_°
 
	tEC_KEY_METHOD
;

117 
ønd_mëh_°
 
	tRAND_METHOD
;

118 
ønd_drbg_°
 
	tRAND_DRBG
;

120 
s¶_d™e_°
 
	tSSL_DANE
;

121 
x509_°
 
	tX509
;

122 
X509_Æg‹_°
 
	tX509_ALGOR
;

123 
X509_¸l_°
 
	tX509_CRL
;

124 
x509_¸l_mëhod_°
 
	tX509_CRL_METHOD
;

125 
x509_ªvoked_°
 
	tX509_REVOKED
;

126 
X509_«me_°
 
	tX509_NAME
;

127 
X509_pubkey_°
 
	tX509_PUBKEY
;

128 
x509_°‹e_°
 
	tX509_STORE
;

129 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

131 
x509_obje˘_°
 
	tX509_OBJECT
;

132 
x509_lookup_°
 
	tX509_LOOKUP
;

133 
x509_lookup_mëhod_°
 
	tX509_LOOKUP_METHOD
;

134 
X509_VERIFY_PARAM_°
 
	tX509_VERIFY_PARAM
;

136 
x509_sig_öfo_°
 
	tX509_SIG_INFO
;

138 
pkcs8_¥iv_key_öfo_°
 
	tPKCS8_PRIV_KEY_INFO
;

140 
v3_ext_˘x
 
	tX509V3_CTX
;

141 
c⁄f_°
 
	tCONF
;

142 
os¶_öô_£âögs_°
 
	tOPENSSL_INIT_SETTINGS
;

144 
ui_°
 
	tUI
;

145 
ui_mëhod_°
 
	tUI_METHOD
;

147 
ígöe_°
 
	tENGINE
;

148 
s¶_°
 
	tSSL
;

149 
s¶_˘x_°
 
	tSSL_CTX
;

151 
comp_˘x_°
 
	tCOMP_CTX
;

152 
comp_mëhod_°
 
	tCOMP_METHOD
;

154 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

155 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

156 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

157 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

159 
AUTHORITY_KEYID_°
 
	tAUTHORITY_KEYID
;

160 
DIST_POINT_°
 
	tDIST_POINT
;

161 
ISSUING_DIST_POINT_°
 
	tISSUING_DIST_POINT
;

162 
NAME_CONSTRAINTS_°
 
	tNAME_CONSTRAINTS
;

164 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

166 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

167 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

168 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

170 
s˘_°
 
	tSCT
;

171 
s˘_˘x_°
 
	tSCT_CTX
;

172 
˘log_°
 
	tCTLOG
;

173 
˘log_°‹e_°
 
	tCTLOG_STORE
;

174 
˘_pﬁicy_evÆ_˘x_°
 
	tCT_POLICY_EVAL_CTX
;

176 
os¶_°‹e_öfo_°
 
	tOSSL_STORE_INFO
;

177 
os¶_°‹e_£¨ch_°
 
	tOSSL_STORE_SEARCH
;

179 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L && \

180 
deföed
(
INTMAX_MAX
Ë&& deföed(
UINTMAX_MAX
)

181 
ötmax_t
 
	tos¶_ötmax_t
;

182 
uötmax_t
 
	tos¶_uötmax_t
;

190 
	tos¶_ötmax_t
;

191 
	tos¶_uötmax_t
;

194 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pem.h

10 #i‚de‡
HEADER_PEM_H


11 
	#HEADER_PEM_H


	)

13 
	~<›ís¶/e_os2.h
>

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/ß„°ack.h
>

16 
	~<›ís¶/evp.h
>

17 
	~<›ís¶/x509.h
>

18 
	~<›ís¶/≥mîr.h
>

20 #ifde‡ 
__˝lu•lus


24 
	#PEM_BUFSIZE
 1024

	)

26 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

27 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

28 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

29 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

30 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

31 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

32 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

33 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

34 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

35 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

36 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

37 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

38 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

39 
	#PEM_STRING_PKCS7_SIGNED
 "PKCS #7 SIGNED DATA"

	)

40 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

41 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

42 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

43 
	#PEM_STRING_DHXPARAMS
 "X9.42 DH PARAMETERS"

	)

44 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

45 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

46 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

47 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

48 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

49 
	#PEM_STRING_PARAMETERS
 "PARAMETERS"

	)

50 
	#PEM_STRING_CMS
 "CMS"

	)

52 
	#PEM_TYPE_ENCRYPTED
 10

	)

53 
	#PEM_TYPE_MIC_ONLY
 20

	)

54 
	#PEM_TYPE_MIC_CLEAR
 30

	)

55 
	#PEM_TYPE_CLEAR
 40

	)

63 #ifde‡
OPENSSL_NO_STDIO


65 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

66 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

67 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

68 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

69 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

72 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

73 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

75  
	`PEM_ASN1_ªad
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
Â
,(**)
x
,
cb
,
u
); \

76 }

	)

78 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

79 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
) \

81  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
NULL
,NULL,0,NULL,NULL); \

82 }

	)

84 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

85 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
) \

87  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

88 }

	)

90 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

91 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

92 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

93 *
u
) \

95  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

96 }

	)

98 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

99 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

100 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

101 *
u
) \

103  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

104 }

	)

108 
	#IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

109 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

111  
	`PEM_ASN1_ªad_bio
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
bp
,(**)
x
,
cb
,
u
); \

112 }

	)

114 
	#IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

115 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
) \

117  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL); \

118 }

	)

120 
	#IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

121 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
) \

123  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

124 }

	)

126 
	#IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

127 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

128 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

130  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

131 }

	)

133 
	#IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

134 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

135 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

137  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

138 }

	)

140 
	#IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

141 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

142 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

144 
	#IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

145 
	`IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

146 
	`IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

148 
	#IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

149 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

150 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

152 
	#IMPLEMENT_PEM_wrôe_cb_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

153 
	`IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

154 
	`IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

156 
	#IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

157 
	`IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

158 
	`IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

160 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

161 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

162 
	`IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

164 
	#IMPLEMENT_PEM_rw_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

165 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

166 
	`IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

168 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

169 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

170 
	`IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

174 #i‡
deföed
(
OPENSSL_NO_STDIO
)

176 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
Ë

	)

177 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
Ë

	)

178 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
Ë

	)

179 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
Ë

	)

182 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
) \

183 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

185 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
) \

186 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
);

	)

188 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
) \

189 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
);

	)

191 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
) \

192 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

193 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

197 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

198 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

200 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

201 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
);

	)

203 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

204 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
);

	)

206 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

207 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

208 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

210 
	#DECLARE_PEM_wrôe
(
«me
, 
ty≥
) \

211 
	`DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

212 
	`DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
)

	)

213 
	#DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
) \

214 
	`DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

215 
	`DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
)

	)

216 
	#DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
) \

217 
	`DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

218 
	`DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
)

	)

219 
	#DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

220 
	`DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

221 
	`DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
)

	)

222 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

223 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

224 
	`DECLARE_PEM_wrôe
(
«me
, 
ty≥
)

	)

225 
	#DECLARE_PEM_rw_c⁄°
(
«me
, 
ty≥
) \

226 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

227 
	`DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
)

	)

228 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

229 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

230 
	`DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
)

	)

231 
	t≥m_∑ssw‹d_cb
 (*
	tbuf
, 
	tsize
, 
	trwÊag
, *
	tu£rd©a
);

233 
PEM_gë_EVP_CIPHER_INFO
(*
hódî
, 
EVP_CIPHER_INFO
 *
cùhî
);

234 
PEM_do_hódî
(
EVP_CIPHER_INFO
 *
cùhî
, *
d©a
, *
Àn
,

235 
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

237 
PEM_ªad_bio
(
BIO
 *
bp
, **
«me
, **
hódî
,

238 **
d©a
, *
Àn
);

239 
	#PEM_FLAG_SECURE
 0x1

	)

240 
	#PEM_FLAG_EAY_COMPATIBLE
 0x2

	)

241 
	#PEM_FLAG_ONLY_B64
 0x4

	)

242 
PEM_ªad_bio_ex
(
BIO
 *
bp
, **
«me
, **
hódî
,

243 **
d©a
, *
Àn
, 
Êags
);

244 
PEM_byãs_ªad_bio_£cmem
(**
pd©a
, *
∂í
, **
≤m
,

245 c⁄° *
«me
, 
BIO
 *
bp
, 
≥m_∑ssw‹d_cb
 *
cb
,

246 *
u
);

247 
PEM_wrôe_bio
(
BIO
 *
bp
, c⁄° *
«me
, c⁄° *
hdr
,

248 c⁄° *
d©a
, 
Àn
);

249 
PEM_byãs_ªad_bio
(**
pd©a
, *
∂í
, **
≤m
,

250 c⁄° *
«me
, 
BIO
 *
bp
, 
≥m_∑ssw‹d_cb
 *
cb
,

251 *
u
);

252 *
PEM_ASN1_ªad_bio
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
BIO
 *
bp
, **
x
,

253 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

254 
PEM_ASN1_wrôe_bio
(
i2d_of_void
 *
i2d
, c⁄° *
«me
, 
BIO
 *
bp
, *
x
,

255 c⁄° 
EVP_CIPHER
 *
íc
, *
k°r
, 
kÀn
,

256 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

258 
STACK_OF
(
X509_INFO
Ë*
PEM_X509_INFO_ªad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOË*
sk
,

259 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

260 
PEM_X509_INFO_wrôe_bio
(
BIO
 *
bp
, 
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
íc
,

261 *
k°r
, 
kÀn
,

262 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

264 #i‚de‡
OPENSSL_NO_STDIO


265 
PEM_ªad
(
FILE
 *
Â
, **
«me
, **
hódî
,

266 **
d©a
, *
Àn
);

267 
PEM_wrôe
(
FILE
 *
Â
, c⁄° *
«me
, c⁄° *
hdr
,

268 c⁄° *
d©a
, 
Àn
);

269 *
PEM_ASN1_ªad
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
FILE
 *
Â
, **
x
,

270 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

271 
PEM_ASN1_wrôe
(
i2d_of_void
 *
i2d
, c⁄° *
«me
, 
FILE
 *
Â
,

272 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, *
k°r
,

273 
kÀn
, 
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

274 
STACK_OF
(
X509_INFO
Ë*
PEM_X509_INFO_ªad
(
FILE
 *
Â
, STACK_OF(X509_INFOË*
sk
,

275 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

278 
PEM_SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_MD
 *
ty≥
);

279 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
˘x
, *
d
, 
˙t
);

280 
PEM_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

281 *
sigÀn
, 
EVP_PKEY
 *
pkey
);

284 
PEM_def_ˇŒback
(*
buf
, 
num
, 
rwÊag
, *
u£rd©a
);

285 
PEM_¥oc_ty≥
(*
buf
, 
ty≥
);

286 
PEM_dek_öfo
(*
buf
, c⁄° *
ty≥
, 
Àn
, *
°r
);

288 
	~<›ís¶/symhacks.h
>

290 
DECLARE_PEM_rw
(
X509
, X509)

291 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

292 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

293 
DECLARE_PEM_wrôe
(
X509_REQ_NEW
, 
X509_REQ
)

294 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

295 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

296 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

297 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

298 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

299 #i‚de‡
OPENSSL_NO_RSA


300 
DECLARE_PEM_rw_cb
(
RSAPriv©eKey
, 
RSA
)

301 
DECLARE_PEM_rw_c⁄°
(
RSAPublicKey
, 
RSA
)

302 
DECLARE_PEM_rw
(
RSA_PUBKEY
, 
RSA
)

304 #i‚de‡
OPENSSL_NO_DSA


305 
DECLARE_PEM_rw_cb
(
DSAPriv©eKey
, 
DSA
)

306 
DECLARE_PEM_rw
(
DSA_PUBKEY
, 
DSA
)

307 
DECLARE_PEM_rw_c⁄°
(
DSA∑øms
, 
DSA
)

309 #i‚de‡
OPENSSL_NO_EC


310 
DECLARE_PEM_rw_c⁄°
(
ECPKP¨amëîs
, 
EC_GROUP
)

311 
DECLARE_PEM_rw_cb
(
ECPriv©eKey
, 
EC_KEY
)

312 
DECLARE_PEM_rw
(
EC_PUBKEY
, 
EC_KEY
)

314 #i‚de‡
OPENSSL_NO_DH


315 
DECLARE_PEM_rw_c⁄°
(
DH∑øms
, 
DH
)

316 
DECLARE_PEM_wrôe_c⁄°
(
DHx∑øms
, 
DH
)

318 
DECLARE_PEM_rw_cb
(
Priv©eKey
, 
EVP_PKEY
)

319 
DECLARE_PEM_rw
(
PUBKEY
, 
EVP_PKEY
)

321 
PEM_wrôe_bio_Priv©eKey_åadôi⁄Æ
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
,

322 c⁄° 
EVP_CIPHER
 *
íc
,

323 *
k°r
, 
kÀn
,

324 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

326 
PEM_wrôe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

327 *
k°r
, 
kÀn
,

328 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

329 
PEM_wrôe_bio_PKCS8Priv©eKey
(
BIO
 *, 
EVP_PKEY
 *, c⁄° 
EVP_CIPHER
 *,

330 *, , 
≥m_∑ssw‹d_cb
 *, *);

331 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

332 *
k°r
, 
kÀn
,

333 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

334 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

335 *
k°r
, 
kÀn
,

336 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

337 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
,

338 *
u
);

340 #i‚de‡
OPENSSL_NO_STDIO


341 
i2d_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

342 *
k°r
, 
kÀn
,

343 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

344 
i2d_PKCS8Priv©eKey_nid_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

345 *
k°r
, 
kÀn
,

346 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

347 
PEM_wrôe_PKCS8Priv©eKey_nid
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

348 *
k°r
, 
kÀn
,

349 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

351 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
,

352 *
u
);

354 
PEM_wrôe_PKCS8Priv©eKey
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

355 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
,

356 *
u
);

358 
EVP_PKEY
 *
PEM_ªad_bio_P¨amëîs
(
BIO
 *
bp
, EVP_PKEY **
x
);

359 
PEM_wrôe_bio_P¨amëîs
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
);

361 #i‚de‡
OPENSSL_NO_DSA


362 
EVP_PKEY
 *
b2i_Priv©eKey
(c⁄° **
ö
, 
Àngth
);

363 
EVP_PKEY
 *
b2i_PublicKey
(c⁄° **
ö
, 
Àngth
);

364 
EVP_PKEY
 *
b2i_Priv©eKey_bio
(
BIO
 *
ö
);

365 
EVP_PKEY
 *
b2i_PublicKey_bio
(
BIO
 *
ö
);

366 
i2b_Priv©eKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

367 
i2b_PublicKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

368 #i‚de‡
OPENSSL_NO_RC4


369 
EVP_PKEY
 *
b2i_PVK_bio
(
BIO
 *
ö
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

370 
i2b_PVK_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
, 
í˛evñ
,

371 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

375 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/randerr.h

11 #i‚de‡
HEADER_RANDERR_H


12 
	#HEADER_RANDERR_H


	)

14 
	~<›ís¶/symhacks.h
>

16 #ifde‡ 
__˝lu•lus


19 
ERR_lﬂd_RAND_°rögs
();

24 
	#RAND_F_DATA_COLLECT_METHOD
 127

	)

25 
	#RAND_F_DRBG_BYTES
 101

	)

26 
	#RAND_F_DRBG_GET_ENTROPY
 105

	)

27 
	#RAND_F_DRBG_SETUP
 117

	)

28 
	#RAND_F_GET_ENTROPY
 106

	)

29 
	#RAND_F_RAND_BYTES
 100

	)

30 
	#RAND_F_RAND_DRBG_ENABLE_LOCKING
 119

	)

31 
	#RAND_F_RAND_DRBG_GENERATE
 107

	)

32 
	#RAND_F_RAND_DRBG_GET_ENTROPY
 120

	)

33 
	#RAND_F_RAND_DRBG_GET_NONCE
 123

	)

34 
	#RAND_F_RAND_DRBG_INSTANTIATE
 108

	)

35 
	#RAND_F_RAND_DRBG_NEW
 109

	)

36 
	#RAND_F_RAND_DRBG_RESEED
 110

	)

37 
	#RAND_F_RAND_DRBG_RESTART
 102

	)

38 
	#RAND_F_RAND_DRBG_SET
 104

	)

39 
	#RAND_F_RAND_DRBG_SET_DEFAULTS
 121

	)

40 
	#RAND_F_RAND_DRBG_UNINSTANTIATE
 118

	)

41 
	#RAND_F_RAND_LOAD_FILE
 111

	)

42 
	#RAND_F_RAND_POOL_ACQUIRE_ENTROPY
 122

	)

43 
	#RAND_F_RAND_POOL_ADD
 103

	)

44 
	#RAND_F_RAND_POOL_ADD_BEGIN
 113

	)

45 
	#RAND_F_RAND_POOL_ADD_END
 114

	)

46 
	#RAND_F_RAND_POOL_ATTACH
 124

	)

47 
	#RAND_F_RAND_POOL_BYTES_NEEDED
 115

	)

48 
	#RAND_F_RAND_POOL_GROW
 125

	)

49 
	#RAND_F_RAND_POOL_NEW
 116

	)

50 
	#RAND_F_RAND_PSEUDO_BYTES
 126

	)

51 
	#RAND_F_RAND_WRITE_FILE
 112

	)

56 
	#RAND_R_ADDITIONAL_INPUT_TOO_LONG
 102

	)

57 
	#RAND_R_ALREADY_INSTANTIATED
 103

	)

58 
	#RAND_R_ARGUMENT_OUT_OF_RANGE
 105

	)

59 
	#RAND_R_CANNOT_OPEN_FILE
 121

	)

60 
	#RAND_R_DRBG_ALREADY_INITIALIZED
 129

	)

61 
	#RAND_R_DRBG_NOT_INITIALISED
 104

	)

62 
	#RAND_R_ENTROPY_INPUT_TOO_LONG
 106

	)

63 
	#RAND_R_ENTROPY_OUT_OF_RANGE
 124

	)

64 
	#RAND_R_ERROR_ENTROPY_POOL_WAS_IGNORED
 127

	)

65 
	#RAND_R_ERROR_INITIALISING_DRBG
 107

	)

66 
	#RAND_R_ERROR_INSTANTIATING_DRBG
 108

	)

67 
	#RAND_R_ERROR_RETRIEVING_ADDITIONAL_INPUT
 109

	)

68 
	#RAND_R_ERROR_RETRIEVING_ENTROPY
 110

	)

69 
	#RAND_R_ERROR_RETRIEVING_NONCE
 111

	)

70 
	#RAND_R_FAILED_TO_CREATE_LOCK
 126

	)

71 
	#RAND_R_FUNC_NOT_IMPLEMENTED
 101

	)

72 
	#RAND_R_FWRITE_ERROR
 123

	)

73 
	#RAND_R_GENERATE_ERROR
 112

	)

74 
	#RAND_R_INTERNAL_ERROR
 113

	)

75 
	#RAND_R_IN_ERROR_STATE
 114

	)

76 
	#RAND_R_NOT_A_REGULAR_FILE
 122

	)

77 
	#RAND_R_NOT_INSTANTIATED
 115

	)

78 
	#RAND_R_NO_DRBG_IMPLEMENTATION_SELECTED
 128

	)

79 
	#RAND_R_PARENT_LOCKING_NOT_ENABLED
 130

	)

80 
	#RAND_R_PARENT_STRENGTH_TOO_WEAK
 131

	)

81 
	#RAND_R_PERSONALISATION_STRING_TOO_LONG
 116

	)

82 
	#RAND_R_PREDICTION_RESISTANCE_NOT_SUPPORTED
 133

	)

83 
	#RAND_R_PRNG_NOT_SEEDED
 100

	)

84 
	#RAND_R_RANDOM_POOL_OVERFLOW
 125

	)

85 
	#RAND_R_RANDOM_POOL_UNDERFLOW
 134

	)

86 
	#RAND_R_REQUEST_TOO_LARGE_FOR_DRBG
 117

	)

87 
	#RAND_R_RESEED_ERROR
 118

	)

88 
	#RAND_R_SELFTEST_FAILURE
 119

	)

89 
	#RAND_R_TOO_LITTLE_NONCE_REQUESTED
 135

	)

90 
	#RAND_R_TOO_MUCH_NONCE_REQUESTED
 136

	)

91 
	#RAND_R_UNSUPPORTED_DRBG_FLAGS
 132

	)

92 
	#RAND_R_UNSUPPORTED_DRBG_TYPE
 120

	)

	@/usr/include/openssl/rsa.h

10 #i‚de‡
HEADER_RSA_H


11 
	#HEADER_RSA_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_RSA


16 
	~<›ís¶/a¢1.h
>

17 
	~<›ís¶/bio.h
>

18 
	~<›ís¶/¸y±o.h
>

19 
	~<›ís¶/os¶_typ.h
>

20 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

21 
	~<›ís¶/bn.h
>

23 
	~<›ís¶/rßîr.h
>

24 #ifde‡ 
__˝lu•lus


30 #i‚de‡
OPENSSL_RSA_MAX_MODULUS_BITS


31 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

34 
	#OPENSSL_RSA_FIPS_MIN_MODULUS_BITS
 1024

	)

36 #i‚de‡
OPENSSL_RSA_SMALL_MODULUS_BITS


37 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

39 #i‚de‡
OPENSSL_RSA_MAX_PUBEXP_BITS


42 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

45 
	#RSA_3
 0x3L

	)

46 
	#RSA_F4
 0x10001L

	)

49 
	#RSA_ASN1_VERSION_DEFAULT
 0

	)

50 
	#RSA_ASN1_VERSION_MULTI
 1

	)

52 
	#RSA_DEFAULT_PRIME_NUM
 2

	)

54 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

57 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

58 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

59 
	#RSA_FLAG_BLINDING
 0x0008

	)

60 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

67 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

75 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

76 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

80 
	#RSA_FLAG_NO_CONSTTIME
 0x0000

	)

82 #i‡
OPENSSL_API_COMPAT
 < 0x00908000L

92 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

95 
	#EVP_PKEY_CTX_£t_rß_∑ddög
(
˘x
, 
∑d
) \

96 
	`RSA_pkey_˘x_˘æ
(
˘x
, -1, 
EVP_PKEY_CTRL_RSA_PADDING
, 
∑d
, 
NULL
)

	)

98 
	#EVP_PKEY_CTX_gë_rß_∑ddög
(
˘x
, 
µad
) \

99 
	`RSA_pkey_˘x_˘æ
(
˘x
, -1, 
EVP_PKEY_CTRL_GET_RSA_PADDING
, 0, 
µad
)

	)

101 
	#EVP_PKEY_CTX_£t_rß_pss_ß…Àn
(
˘x
, 
Àn
) \

102 
	`RSA_pkey_˘x_˘æ
(
˘x
, (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

103 
EVP_PKEY_CTRL_RSA_PSS_SALTLEN
, 
Àn
, 
NULL
)

	)

105 
	#RSA_PSS_SALTLEN_DIGEST
 -1

	)

107 
	#RSA_PSS_SALTLEN_AUTO
 -2

	)

109 
	#RSA_PSS_SALTLEN_MAX
 -3

	)

111 
	#RSA_PSS_SALTLEN_MAX_SIGN
 -2

	)

113 
	#EVP_PKEY_CTX_£t_rß_pss_keygí_ß…Àn
(
˘x
, 
Àn
) \

114 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA_PSS
, 
EVP_PKEY_OP_KEYGEN
, \

115 
EVP_PKEY_CTRL_RSA_PSS_SALTLEN
, 
Àn
, 
NULL
)

	)

117 
	#EVP_PKEY_CTX_gë_rß_pss_ß…Àn
(
˘x
, 
∂í
) \

118 
	`RSA_pkey_˘x_˘æ
(
˘x
, (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

119 
EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
, 0, 
∂í
)

	)

121 
	#EVP_PKEY_CTX_£t_rß_keygí_bôs
(
˘x
, 
bôs
) \

122 
	`RSA_pkey_˘x_˘æ
(
˘x
, 
EVP_PKEY_OP_KEYGEN
, \

123 
EVP_PKEY_CTRL_RSA_KEYGEN_BITS
, 
bôs
, 
NULL
)

	)

125 
	#EVP_PKEY_CTX_£t_rß_keygí_pubexp
(
˘x
, 
pubexp
) \

126 
	`RSA_pkey_˘x_˘æ
(
˘x
, 
EVP_PKEY_OP_KEYGEN
, \

127 
EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
, 0, 
pubexp
)

	)

129 
	#EVP_PKEY_CTX_£t_rß_keygí_¥imes
(
˘x
, 
¥imes
) \

130 
	`RSA_pkey_˘x_˘æ
(
˘x
, 
EVP_PKEY_OP_KEYGEN
, \

131 
EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES
, 
¥imes
, 
NULL
)

	)

133 
	#EVP_PKEY_CTX_£t_rß_mgf1_md
(
˘x
, 
md
) \

134 
	`RSA_pkey_˘x_˘æ
(
˘x
, 
EVP_PKEY_OP_TYPE_SIG
 | 
EVP_PKEY_OP_TYPE_CRYPT
, \

135 
EVP_PKEY_CTRL_RSA_MGF1_MD
, 0, (*)(
md
))

	)

137 
	#EVP_PKEY_CTX_£t_rß_pss_keygí_mgf1_md
(
˘x
, 
md
) \

138 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA_PSS
, 
EVP_PKEY_OP_KEYGEN
, \

139 
EVP_PKEY_CTRL_RSA_MGF1_MD
, 0, (*)(
md
))

	)

141 
	#EVP_PKEY_CTX_£t_rß_ﬂï_md
(
˘x
, 
md
) \

142 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

143 
EVP_PKEY_CTRL_RSA_OAEP_MD
, 0, (*)(
md
))

	)

145 
	#EVP_PKEY_CTX_gë_rß_mgf1_md
(
˘x
, 
pmd
) \

146 
	`RSA_pkey_˘x_˘æ
(
˘x
, 
EVP_PKEY_OP_TYPE_SIG
 | 
EVP_PKEY_OP_TYPE_CRYPT
, \

147 
EVP_PKEY_CTRL_GET_RSA_MGF1_MD
, 0, (*)(
pmd
))

	)

149 
	#EVP_PKEY_CTX_gë_rß_ﬂï_md
(
˘x
, 
pmd
) \

150 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

151 
EVP_PKEY_CTRL_GET_RSA_OAEP_MD
, 0, (*)(
pmd
))

	)

153 
	#EVP_PKEY_CTX_£t0_rß_ﬂï_œbñ
(
˘x
, 
l
, 
Œí
) \

154 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

155 
EVP_PKEY_CTRL_RSA_OAEP_LABEL
, 
Œí
, (*)(
l
))

	)

157 
	#EVP_PKEY_CTX_gë0_rß_ﬂï_œbñ
(
˘x
, 
l
) \

158 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

159 
EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL
, 0, (*)(
l
))

	)

161 
	#EVP_PKEY_CTX_£t_rß_pss_keygí_md
(
˘x
, 
md
) \

162 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA_PSS
, \

163 
EVP_PKEY_OP_KEYGEN
, 
EVP_PKEY_CTRL_MD
, \

164 0, (*)(
md
))

	)

166 
	#EVP_PKEY_CTRL_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

167 
	#EVP_PKEY_CTRL_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

169 
	#EVP_PKEY_CTRL_RSA_KEYGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

170 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

171 
	#EVP_PKEY_CTRL_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

173 
	#EVP_PKEY_CTRL_GET_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

174 
	#EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

175 
	#EVP_PKEY_CTRL_GET_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

177 
	#EVP_PKEY_CTRL_RSA_OAEP_MD
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

178 
	#EVP_PKEY_CTRL_RSA_OAEP_LABEL
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

180 
	#EVP_PKEY_CTRL_GET_RSA_OAEP_MD
 (
EVP_PKEY_ALG_CTRL
 + 11)

	)

181 
	#EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL
 (
EVP_PKEY_ALG_CTRL
 + 12)

	)

183 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES
 (
EVP_PKEY_ALG_CTRL
 + 13)

	)

185 
	#RSA_PKCS1_PADDING
 1

	)

186 
	#RSA_SSLV23_PADDING
 2

	)

187 
	#RSA_NO_PADDING
 3

	)

188 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

189 
	#RSA_X931_PADDING
 5

	)

191 
	#RSA_PKCS1_PSS_PADDING
 6

	)

193 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

195 
	#RSA_£t_≠p_d©a
(
s
,
¨g
Ë
	`RSA_£t_ex_d©a
(s,0,¨g)

	)

196 
	#RSA_gë_≠p_d©a
(
s
Ë
	`RSA_gë_ex_d©a
(s,0)

	)

198 
RSA
 *
RSA_√w
();

199 
RSA
 *
RSA_√w_mëhod
(
ENGINE
 *
ígöe
);

200 
RSA_bôs
(c⁄° 
RSA
 *
rß
);

201 
RSA_size
(c⁄° 
RSA
 *
rß
);

202 
RSA_£curôy_bôs
(c⁄° 
RSA
 *
rß
);

204 
RSA_£t0_key
(
RSA
 *
r
, 
BIGNUM
 *
n
, BIGNUM *
e
, BIGNUM *
d
);

205 
RSA_£t0_Á˘‹s
(
RSA
 *
r
, 
BIGNUM
 *
p
, BIGNUM *
q
);

206 
RSA_£t0_¸t_∑øms
(
RSA
 *
r
,
BIGNUM
 *
dmp1
, BIGNUM *
dmq1
, BIGNUM *
iqmp
);

207 
RSA_£t0_mu…i_¥ime_∑øms
(
RSA
 *
r
, 
BIGNUM
 *
¥imes
[], BIGNUM *
exps
[],

208 
BIGNUM
 *
c€ffs
[], 
≤um
);

209 
RSA_gë0_key
(c⁄° 
RSA
 *
r
,

210 c⁄° 
BIGNUM
 **
n
, c⁄° BIGNUM **
e
, c⁄° BIGNUM **
d
);

211 
RSA_gë0_Á˘‹s
(c⁄° 
RSA
 *
r
, c⁄° 
BIGNUM
 **
p
, c⁄° BIGNUM **
q
);

212 
RSA_gë_mu…i_¥ime_exåa_cou¡
(c⁄° 
RSA
 *
r
);

213 
RSA_gë0_mu…i_¥ime_Á˘‹s
(c⁄° 
RSA
 *
r
, c⁄° 
BIGNUM
 *
¥imes
[]);

214 
RSA_gë0_¸t_∑øms
(c⁄° 
RSA
 *
r
,

215 c⁄° 
BIGNUM
 **
dmp1
, c⁄° BIGNUM **
dmq1
,

216 c⁄° 
BIGNUM
 **
iqmp
);

217 
RSA_gë0_mu…i_¥ime_¸t_∑øms
(c⁄° 
RSA
 *
r
, c⁄° 
BIGNUM
 *
exps
[],

218 c⁄° 
BIGNUM
 *
c€ffs
[]);

219 c⁄° 
BIGNUM
 *
RSA_gë0_n
(c⁄° 
RSA
 *
d
);

220 c⁄° 
BIGNUM
 *
RSA_gë0_e
(c⁄° 
RSA
 *
d
);

221 c⁄° 
BIGNUM
 *
RSA_gë0_d
(c⁄° 
RSA
 *
d
);

222 c⁄° 
BIGNUM
 *
RSA_gë0_p
(c⁄° 
RSA
 *
d
);

223 c⁄° 
BIGNUM
 *
RSA_gë0_q
(c⁄° 
RSA
 *
d
);

224 c⁄° 
BIGNUM
 *
RSA_gë0_dmp1
(c⁄° 
RSA
 *
r
);

225 c⁄° 
BIGNUM
 *
RSA_gë0_dmq1
(c⁄° 
RSA
 *
r
);

226 c⁄° 
BIGNUM
 *
RSA_gë0_iqmp
(c⁄° 
RSA
 *
r
);

227 c⁄° 
RSA_PSS_PARAMS
 *
RSA_gë0_pss_∑øms
(c⁄° 
RSA
 *
r
);

228 
RSA_˛ór_Êags
(
RSA
 *
r
, 
Êags
);

229 
RSA_ã°_Êags
(c⁄° 
RSA
 *
r
, 
Êags
);

230 
RSA_£t_Êags
(
RSA
 *
r
, 
Êags
);

231 
RSA_gë_vîsi⁄
(
RSA
 *
r
);

232 
ENGINE
 *
RSA_gë0_ígöe
(c⁄° 
RSA
 *
r
);

235 
DEPRECATEDIN_0_9_8
(
RSA
 *
RSA_gíî©e_key
(
bôs
, 
e
, 

236 (*
ˇŒback
) (, , *),

237 *
cb_¨g
))

240 
RSA_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

242 
RSA_gíî©e_mu…i_¥ime_key
(
RSA
 *
rß
, 
bôs
, 
¥imes
,

243 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

245 
RSA_X931_dîive_ex
(
RSA
 *
rß
, 
BIGNUM
 *
p1
, BIGNUM *
p2
, BIGNUM *
q1
,

246 
BIGNUM
 *
q2
, c⁄° BIGNUM *
Xp1
, c⁄° BIGNUM *
Xp2
,

247 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xq1
, c⁄° BIGNUM *
Xq2
,

248 c⁄° 
BIGNUM
 *
Xq
, c⁄° BIGNUM *
e
, 
BN_GENCB
 *
cb
);

249 
RSA_X931_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, c⁄° 
BIGNUM
 *
e
,

250 
BN_GENCB
 *
cb
);

252 
RSA_check_key
(c⁄° 
RSA
 *);

253 
RSA_check_key_ex
(c⁄° 
RSA
 *, 
BN_GENCB
 *
cb
);

255 
RSA_public_í¸y±
(
Êí
, c⁄° *
‰om
,

256 *
to
, 
RSA
 *
rß
, 
∑ddög
);

257 
RSA_¥iv©e_í¸y±
(
Êí
, c⁄° *
‰om
,

258 *
to
, 
RSA
 *
rß
, 
∑ddög
);

259 
RSA_public_de¸y±
(
Êí
, c⁄° *
‰om
,

260 *
to
, 
RSA
 *
rß
, 
∑ddög
);

261 
RSA_¥iv©e_de¸y±
(
Êí
, c⁄° *
‰om
,

262 *
to
, 
RSA
 *
rß
, 
∑ddög
);

263 
RSA_‰ì
(
RSA
 *
r
);

265 
RSA_up_ªf
(
RSA
 *
r
);

267 
RSA_Êags
(c⁄° 
RSA
 *
r
);

269 
RSA_£t_deÁu…_mëhod
(c⁄° 
RSA_METHOD
 *
mëh
);

270 c⁄° 
RSA_METHOD
 *
RSA_gë_deÁu…_mëhod
();

271 c⁄° 
RSA_METHOD
 *
RSA_nuŒ_mëhod
();

272 c⁄° 
RSA_METHOD
 *
RSA_gë_mëhod
(c⁄° 
RSA
 *
rß
);

273 
RSA_£t_mëhod
(
RSA
 *
rß
, c⁄° 
RSA_METHOD
 *
mëh
);

276 c⁄° 
RSA_METHOD
 *
RSA_PKCS1_O≥nSSL
();

278 
RSA_pkey_˘x_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
›ty≥
, 
cmd
, 
p1
, *
p2
);

280 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPublicKey
)

281 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPriv©eKey
)

283 
	srß_pss_∑øms_°
 {

284 
X509_ALGOR
 *
hashAlg‹ôhm
;

285 
X509_ALGOR
 *
maskGíAlg‹ôhm
;

286 
ASN1_INTEGER
 *
ß…Lígth
;

287 
ASN1_INTEGER
 *
åaûîFõld
;

289 
X509_ALGOR
 *
maskHash
;

292 
DECLARE_ASN1_FUNCTIONS
(
RSA_PSS_PARAMS
)

294 
	srß_ﬂï_∑øms_°
 {

295 
X509_ALGOR
 *
hashFunc
;

296 
X509_ALGOR
 *
maskGíFunc
;

297 
X509_ALGOR
 *
pSour˚Func
;

299 
X509_ALGOR
 *
maskHash
;

300 } 
	tRSA_OAEP_PARAMS
;

302 
DECLARE_ASN1_FUNCTIONS
(
RSA_OAEP_PARAMS
)

304 #i‚de‡
OPENSSL_NO_STDIO


305 
RSA_¥öt_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
r
, 
off£t
);

308 
RSA_¥öt
(
BIO
 *
bp
, c⁄° 
RSA
 *
r
, 
off£t
);

314 
RSA_sign
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

315 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

316 
RSA_vîify
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

317 c⁄° *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

323 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

324 c⁄° *
m
, 
m_Àngth
,

325 *
sigªt
, *
sigÀn
,

326 
RSA
 *
rß
);

327 
RSA_vîify_ASN1_OCTET_STRING
(
ty≥
, c⁄° *
m
,

328 
m_Àngth
, *
sigbuf
,

329 
sigÀn
, 
RSA
 *
rß
);

331 
RSA_blödög_⁄
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

332 
RSA_blödög_off
(
RSA
 *
rß
);

333 
BN_BLINDING
 *
RSA_£tup_blödög
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

335 
RSA_∑ddög_add_PKCS1_ty≥_1
(*
to
, 
éí
,

336 c⁄° *
f
, 
Ê
);

337 
RSA_∑ddög_check_PKCS1_ty≥_1
(*
to
, 
éí
,

338 c⁄° *
f
, 
Ê
,

339 
rß_Àn
);

340 
RSA_∑ddög_add_PKCS1_ty≥_2
(*
to
, 
éí
,

341 c⁄° *
f
, 
Ê
);

342 
RSA_∑ddög_check_PKCS1_ty≥_2
(*
to
, 
éí
,

343 c⁄° *
f
, 
Ê
,

344 
rß_Àn
);

345 
PKCS1_MGF1
(*
mask
, 
Àn
, c⁄° *
£ed
,

346 
£edÀn
, c⁄° 
EVP_MD
 *
dg°
);

347 
RSA_∑ddög_add_PKCS1_OAEP
(*
to
, 
éí
,

348 c⁄° *
f
, 
Ê
,

349 c⁄° *
p
, 
∂
);

350 
RSA_∑ddög_check_PKCS1_OAEP
(*
to
, 
éí
,

351 c⁄° *
f
, 
Ê
, 
rß_Àn
,

352 c⁄° *
p
, 
∂
);

353 
RSA_∑ddög_add_PKCS1_OAEP_mgf1
(*
to
, 
éí
,

354 c⁄° *
‰om
, 
Êí
,

355 c⁄° *
∑øm
, 
∂í
,

356 c⁄° 
EVP_MD
 *
md
, c⁄° EVP_MD *
mgf1md
);

357 
RSA_∑ddög_check_PKCS1_OAEP_mgf1
(*
to
, 
éí
,

358 c⁄° *
‰om
, 
Êí
,

359 
num
, c⁄° *
∑øm
,

360 
∂í
, c⁄° 
EVP_MD
 *
md
,

361 c⁄° 
EVP_MD
 *
mgf1md
);

362 
RSA_∑ddög_add_SSLv23
(*
to
, 
éí
,

363 c⁄° *
f
, 
Ê
);

364 
RSA_∑ddög_check_SSLv23
(*
to
, 
éí
,

365 c⁄° *
f
, 
Ê
, 
rß_Àn
);

366 
RSA_∑ddög_add_n⁄e
(*
to
, 
éí
, c⁄° *
f
,

367 
Ê
);

368 
RSA_∑ddög_check_n⁄e
(*
to
, 
éí
,

369 c⁄° *
f
, 
Ê
, 
rß_Àn
);

370 
RSA_∑ddög_add_X931
(*
to
, 
éí
, c⁄° *
f
,

371 
Ê
);

372 
RSA_∑ddög_check_X931
(*
to
, 
éí
,

373 c⁄° *
f
, 
Ê
, 
rß_Àn
);

374 
RSA_X931_hash_id
(
nid
);

376 
RSA_vîify_PKCS1_PSS
(
RSA
 *
rß
, c⁄° *
mHash
,

377 c⁄° 
EVP_MD
 *
Hash
, c⁄° *
EM
,

378 
sLí
);

379 
RSA_∑ddög_add_PKCS1_PSS
(
RSA
 *
rß
, *
EM
,

380 c⁄° *
mHash
, c⁄° 
EVP_MD
 *
Hash
,

381 
sLí
);

383 
RSA_vîify_PKCS1_PSS_mgf1
(
RSA
 *
rß
, c⁄° *
mHash
,

384 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

385 c⁄° *
EM
, 
sLí
);

387 
RSA_∑ddög_add_PKCS1_PSS_mgf1
(
RSA
 *
rß
, *
EM
,

388 c⁄° *
mHash
,

389 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

390 
sLí
);

392 
	#RSA_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

393 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_RSA
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

394 
RSA_£t_ex_d©a
(
RSA
 *
r
, 
idx
, *
¨g
);

395 *
RSA_gë_ex_d©a
(c⁄° 
RSA
 *
r
, 
idx
);

397 
RSA
 *
RSAPublicKey_dup
(RSA *
rß
);

398 
RSA
 *
RSAPriv©eKey_dup
(RSA *
rß
);

407 
	#RSA_FLAG_FIPS_METHOD
 0x0400

	)

415 
	#RSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

420 
	#RSA_FLAG_CHECKED
 0x0800

	)

422 
RSA_METHOD
 *
RSA_mëh_√w
(c⁄° *
«me
, 
Êags
);

423 
RSA_mëh_‰ì
(
RSA_METHOD
 *
mëh
);

424 
RSA_METHOD
 *
RSA_mëh_dup
(c⁄° RSA_METHOD *
mëh
);

425 c⁄° *
RSA_mëh_gë0_«me
(c⁄° 
RSA_METHOD
 *
mëh
);

426 
RSA_mëh_£t1_«me
(
RSA_METHOD
 *
mëh
, c⁄° *
«me
);

427 
RSA_mëh_gë_Êags
(c⁄° 
RSA_METHOD
 *
mëh
);

428 
RSA_mëh_£t_Êags
(
RSA_METHOD
 *
mëh
, 
Êags
);

429 *
RSA_mëh_gë0_≠p_d©a
(c⁄° 
RSA_METHOD
 *
mëh
);

430 
RSA_mëh_£t0_≠p_d©a
(
RSA_METHOD
 *
mëh
, *
≠p_d©a
);

431 (*
RSA_mëh_gë_pub_íc
(c⁄° 
RSA_METHOD
 *
mëh
))

432 (
Êí
, c⁄° *
‰om
,

433 *
to
, 
RSA
 *
rß
, 
∑ddög
);

434 
RSA_mëh_£t_pub_íc
(
RSA_METHOD
 *
rß
,

435 (*
pub_íc
Ë(
Êí
, c⁄° *
‰om
,

436 *
to
, 
RSA
 *
rß
,

437 
∑ddög
));

438 (*
RSA_mëh_gë_pub_dec
(c⁄° 
RSA_METHOD
 *
mëh
))

439 (
Êí
, c⁄° *
‰om
,

440 *
to
, 
RSA
 *
rß
, 
∑ddög
);

441 
RSA_mëh_£t_pub_dec
(
RSA_METHOD
 *
rß
,

442 (*
pub_dec
Ë(
Êí
, c⁄° *
‰om
,

443 *
to
, 
RSA
 *
rß
,

444 
∑ddög
));

445 (*
RSA_mëh_gë_¥iv_íc
(c⁄° 
RSA_METHOD
 *
mëh
))

446 (
Êí
, c⁄° *
‰om
,

447 *
to
, 
RSA
 *
rß
, 
∑ddög
);

448 
RSA_mëh_£t_¥iv_íc
(
RSA_METHOD
 *
rß
,

449 (*
¥iv_íc
Ë(
Êí
, c⁄° *
‰om
,

450 *
to
, 
RSA
 *
rß
,

451 
∑ddög
));

452 (*
RSA_mëh_gë_¥iv_dec
(c⁄° 
RSA_METHOD
 *
mëh
))

453 (
Êí
, c⁄° *
‰om
,

454 *
to
, 
RSA
 *
rß
, 
∑ddög
);

455 
RSA_mëh_£t_¥iv_dec
(
RSA_METHOD
 *
rß
,

456 (*
¥iv_dec
Ë(
Êí
, c⁄° *
‰om
,

457 *
to
, 
RSA
 *
rß
,

458 
∑ddög
));

459 (*
RSA_mëh_gë_mod_exp
(c⁄° 
RSA_METHOD
 *
mëh
))

460 (
BIGNUM
 *
r0
, c⁄° BIGNUM *
i
, 
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

461 
RSA_mëh_£t_mod_exp
(
RSA_METHOD
 *
rß
,

462 (*
mod_exp
Ë(
BIGNUM
 *
r0
, c⁄° BIGNUM *
i
, 
RSA
 *
rß
,

463 
BN_CTX
 *
˘x
));

464 (*
RSA_mëh_gë_bn_mod_exp
(c⁄° 
RSA_METHOD
 *
mëh
))

465 (
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

466 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

467 
RSA_mëh_£t_bn_mod_exp
(
RSA_METHOD
 *
rß
,

468 (*
bn_mod_exp
Ë(
BIGNUM
 *
r
,

469 c⁄° 
BIGNUM
 *
a
,

470 c⁄° 
BIGNUM
 *
p
,

471 c⁄° 
BIGNUM
 *
m
,

472 
BN_CTX
 *
˘x
,

473 
BN_MONT_CTX
 *
m_˘x
));

474 (*
RSA_mëh_gë_öô
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
RSA
 *
rß
);

475 
RSA_mëh_£t_öô
(
RSA_METHOD
 *
rß
, (*
öô
Ë(
RSA
 *rsa));

476 (*
RSA_mëh_gë_föish
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
RSA
 *
rß
);

477 
RSA_mëh_£t_föish
(
RSA_METHOD
 *
rß
, (*
föish
Ë(
RSA
 *rsa));

478 (*
RSA_mëh_gë_sign
(c⁄° 
RSA_METHOD
 *
mëh
))

479 (
ty≥
,

480 c⁄° *
m
, 
m_Àngth
,

481 *
sigªt
, *
sigÀn
,

482 c⁄° 
RSA
 *
rß
);

483 
RSA_mëh_£t_sign
(
RSA_METHOD
 *
rß
,

484 (*
sign
Ë(
ty≥
, c⁄° *
m
,

485 
m_Àngth
,

486 *
sigªt
, *
sigÀn
,

487 c⁄° 
RSA
 *
rß
));

488 (*
RSA_mëh_gë_vîify
(c⁄° 
RSA_METHOD
 *
mëh
))

489 (
dty≥
, c⁄° *
m
,

490 
m_Àngth
, c⁄° *
sigbuf
,

491 
sigÀn
, c⁄° 
RSA
 *
rß
);

492 
RSA_mëh_£t_vîify
(
RSA_METHOD
 *
rß
,

493 (*
vîify
Ë(
dty≥
, c⁄° *
m
,

494 
m_Àngth
,

495 c⁄° *
sigbuf
,

496 
sigÀn
, c⁄° 
RSA
 *
rß
));

497 (*
RSA_mëh_gë_keygí
(c⁄° 
RSA_METHOD
 *
mëh
))

498 (
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

499 
RSA_mëh_£t_keygí
(
RSA_METHOD
 *
rß
,

500 (*
keygí
Ë(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
,

501 
BN_GENCB
 *
cb
));

502 (*
RSA_mëh_gë_mu…i_¥ime_keygí
(c⁄° 
RSA_METHOD
 *
mëh
))

503 (
RSA
 *
rß
, 
bôs
, 
¥imes
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

504 
RSA_mëh_£t_mu…i_¥ime_keygí
(
RSA_METHOD
 *
mëh
,

505 (*
keygí
Ë(
RSA
 *
rß
, 
bôs
,

506 
¥imes
, 
BIGNUM
 *
e
,

507 
BN_GENCB
 *
cb
));

509 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/srtp.h

16 #i‚de‡
HEADER_D1_SRTP_H


17 
	#HEADER_D1_SRTP_H


	)

19 
	~<›ís¶/s¶.h
>

21 #ifde‡ 
__˝lu•lus


25 
	#SRTP_AES128_CM_SHA1_80
 0x0001

	)

26 
	#SRTP_AES128_CM_SHA1_32
 0x0002

	)

27 
	#SRTP_AES128_F8_SHA1_80
 0x0003

	)

28 
	#SRTP_AES128_F8_SHA1_32
 0x0004

	)

29 
	#SRTP_NULL_SHA1_80
 0x0005

	)

30 
	#SRTP_NULL_SHA1_32
 0x0006

	)

33 
	#SRTP_AEAD_AES_128_GCM
 0x0007

	)

34 
	#SRTP_AEAD_AES_256_GCM
 0x0008

	)

36 #i‚de‡
OPENSSL_NO_SRTP


38 
__owur
 
SSL_CTX_£t_é£xt_u£_§ç
(
SSL_CTX
 *
˘x
, c⁄° *
¥ofûes
);

39 
__owur
 
SSL_£t_é£xt_u£_§ç
(
SSL
 *
s¶
, c⁄° *
¥ofûes
);

41 
__owur
 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
SSL_gë_§ç_¥ofûes
(
SSL
 *
s¶
);

42 
__owur
 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

46 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl2.h

10 #i‚de‡
HEADER_SSL2_H


11 
	#HEADER_SSL2_H


	)

13 #ifde‡ 
__˝lu•lus


17 
	#SSL2_VERSION
 0x0002

	)

19 
	#SSL2_MT_CLIENT_HELLO
 1

	)

21 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl3.h

11 #i‚de‡
HEADER_SSL3_H


12 
	#HEADER_SSL3_H


	)

14 
	~<›ís¶/comp.h
>

15 
	~<›ís¶/buf„r.h
>

16 
	~<›ís¶/evp.h
>

17 
	~<›ís¶/s¶.h
>

19 #ifde‡ 
__˝lu•lus


27 
	#SSL3_CK_SCSV
 0x030000FF

	)

33 
	#SSL3_CK_FALLBACK_SCSV
 0x03005600

	)

35 
	#SSL3_CK_RSA_NULL_MD5
 0x03000001

	)

36 
	#SSL3_CK_RSA_NULL_SHA
 0x03000002

	)

37 
	#SSL3_CK_RSA_RC4_40_MD5
 0x03000003

	)

38 
	#SSL3_CK_RSA_RC4_128_MD5
 0x03000004

	)

39 
	#SSL3_CK_RSA_RC4_128_SHA
 0x03000005

	)

40 
	#SSL3_CK_RSA_RC2_40_MD5
 0x03000006

	)

41 
	#SSL3_CK_RSA_IDEA_128_SHA
 0x03000007

	)

42 
	#SSL3_CK_RSA_DES_40_CBC_SHA
 0x03000008

	)

43 
	#SSL3_CK_RSA_DES_64_CBC_SHA
 0x03000009

	)

44 
	#SSL3_CK_RSA_DES_192_CBC3_SHA
 0x0300000A

	)

46 
	#SSL3_CK_DH_DSS_DES_40_CBC_SHA
 0x0300000B

	)

47 
	#SSL3_CK_DH_DSS_DES_64_CBC_SHA
 0x0300000C

	)

48 
	#SSL3_CK_DH_DSS_DES_192_CBC3_SHA
 0x0300000D

	)

49 
	#SSL3_CK_DH_RSA_DES_40_CBC_SHA
 0x0300000E

	)

50 
	#SSL3_CK_DH_RSA_DES_64_CBC_SHA
 0x0300000F

	)

51 
	#SSL3_CK_DH_RSA_DES_192_CBC3_SHA
 0x03000010

	)

53 
	#SSL3_CK_DHE_DSS_DES_40_CBC_SHA
 0x03000011

	)

54 
	#SSL3_CK_EDH_DSS_DES_40_CBC_SHA
 
SSL3_CK_DHE_DSS_DES_40_CBC_SHA


	)

55 
	#SSL3_CK_DHE_DSS_DES_64_CBC_SHA
 0x03000012

	)

56 
	#SSL3_CK_EDH_DSS_DES_64_CBC_SHA
 
SSL3_CK_DHE_DSS_DES_64_CBC_SHA


	)

57 
	#SSL3_CK_DHE_DSS_DES_192_CBC3_SHA
 0x03000013

	)

58 
	#SSL3_CK_EDH_DSS_DES_192_CBC3_SHA
 
SSL3_CK_DHE_DSS_DES_192_CBC3_SHA


	)

59 
	#SSL3_CK_DHE_RSA_DES_40_CBC_SHA
 0x03000014

	)

60 
	#SSL3_CK_EDH_RSA_DES_40_CBC_SHA
 
SSL3_CK_DHE_RSA_DES_40_CBC_SHA


	)

61 
	#SSL3_CK_DHE_RSA_DES_64_CBC_SHA
 0x03000015

	)

62 
	#SSL3_CK_EDH_RSA_DES_64_CBC_SHA
 
SSL3_CK_DHE_RSA_DES_64_CBC_SHA


	)

63 
	#SSL3_CK_DHE_RSA_DES_192_CBC3_SHA
 0x03000016

	)

64 
	#SSL3_CK_EDH_RSA_DES_192_CBC3_SHA
 
SSL3_CK_DHE_RSA_DES_192_CBC3_SHA


	)

66 
	#SSL3_CK_ADH_RC4_40_MD5
 0x03000017

	)

67 
	#SSL3_CK_ADH_RC4_128_MD5
 0x03000018

	)

68 
	#SSL3_CK_ADH_DES_40_CBC_SHA
 0x03000019

	)

69 
	#SSL3_CK_ADH_DES_64_CBC_SHA
 0x0300001A

	)

70 
	#SSL3_CK_ADH_DES_192_CBC_SHA
 0x0300001B

	)

73 
	#SSL3_RFC_RSA_NULL_MD5
 "TLS_RSA_WITH_NULL_MD5"

	)

74 
	#SSL3_RFC_RSA_NULL_SHA
 "TLS_RSA_WITH_NULL_SHA"

	)

75 
	#SSL3_RFC_RSA_DES_192_CBC3_SHA
 "TLS_RSA_WITH_3DES_EDE_CBC_SHA"

	)

76 
	#SSL3_RFC_DHE_DSS_DES_192_CBC3_SHA
 "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA"

	)

77 
	#SSL3_RFC_DHE_RSA_DES_192_CBC3_SHA
 "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA"

	)

78 
	#SSL3_RFC_ADH_DES_192_CBC_SHA
 "TLS_DH_™⁄_WITH_3DES_EDE_CBC_SHA"

	)

79 
	#SSL3_RFC_RSA_IDEA_128_SHA
 "TLS_RSA_WITH_IDEA_CBC_SHA"

	)

80 
	#SSL3_RFC_RSA_RC4_128_MD5
 "TLS_RSA_WITH_RC4_128_MD5"

	)

81 
	#SSL3_RFC_RSA_RC4_128_SHA
 "TLS_RSA_WITH_RC4_128_SHA"

	)

82 
	#SSL3_RFC_ADH_RC4_128_MD5
 "TLS_DH_™⁄_WITH_RC4_128_MD5"

	)

84 
	#SSL3_TXT_RSA_NULL_MD5
 "NULL-MD5"

	)

85 
	#SSL3_TXT_RSA_NULL_SHA
 "NULL-SHA"

	)

86 
	#SSL3_TXT_RSA_RC4_40_MD5
 "EXP-RC4-MD5"

	)

87 
	#SSL3_TXT_RSA_RC4_128_MD5
 "RC4-MD5"

	)

88 
	#SSL3_TXT_RSA_RC4_128_SHA
 "RC4-SHA"

	)

89 
	#SSL3_TXT_RSA_RC2_40_MD5
 "EXP-RC2-CBC-MD5"

	)

90 
	#SSL3_TXT_RSA_IDEA_128_SHA
 "IDEA-CBC-SHA"

	)

91 
	#SSL3_TXT_RSA_DES_40_CBC_SHA
 "EXP-DES-CBC-SHA"

	)

92 
	#SSL3_TXT_RSA_DES_64_CBC_SHA
 "DES-CBC-SHA"

	)

93 
	#SSL3_TXT_RSA_DES_192_CBC3_SHA
 "DES-CBC3-SHA"

	)

95 
	#SSL3_TXT_DH_DSS_DES_40_CBC_SHA
 "EXP-DH-DSS-DES-CBC-SHA"

	)

96 
	#SSL3_TXT_DH_DSS_DES_64_CBC_SHA
 "DH-DSS-DES-CBC-SHA"

	)

97 
	#SSL3_TXT_DH_DSS_DES_192_CBC3_SHA
 "DH-DSS-DES-CBC3-SHA"

	)

98 
	#SSL3_TXT_DH_RSA_DES_40_CBC_SHA
 "EXP-DH-RSA-DES-CBC-SHA"

	)

99 
	#SSL3_TXT_DH_RSA_DES_64_CBC_SHA
 "DH-RSA-DES-CBC-SHA"

	)

100 
	#SSL3_TXT_DH_RSA_DES_192_CBC3_SHA
 "DH-RSA-DES-CBC3-SHA"

	)

102 
	#SSL3_TXT_DHE_DSS_DES_40_CBC_SHA
 "EXP-DHE-DSS-DES-CBC-SHA"

	)

103 
	#SSL3_TXT_DHE_DSS_DES_64_CBC_SHA
 "DHE-DSS-DES-CBC-SHA"

	)

104 
	#SSL3_TXT_DHE_DSS_DES_192_CBC3_SHA
 "DHE-DSS-DES-CBC3-SHA"

	)

105 
	#SSL3_TXT_DHE_RSA_DES_40_CBC_SHA
 "EXP-DHE-RSA-DES-CBC-SHA"

	)

106 
	#SSL3_TXT_DHE_RSA_DES_64_CBC_SHA
 "DHE-RSA-DES-CBC-SHA"

	)

107 
	#SSL3_TXT_DHE_RSA_DES_192_CBC3_SHA
 "DHE-RSA-DES-CBC3-SHA"

	)

114 
	#SSL3_TXT_EDH_DSS_DES_40_CBC_SHA
 "EXP-EDH-DSS-DES-CBC-SHA"

	)

115 
	#SSL3_TXT_EDH_DSS_DES_64_CBC_SHA
 "EDH-DSS-DES-CBC-SHA"

	)

116 
	#SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA
 "EDH-DSS-DES-CBC3-SHA"

	)

117 
	#SSL3_TXT_EDH_RSA_DES_40_CBC_SHA
 "EXP-EDH-RSA-DES-CBC-SHA"

	)

118 
	#SSL3_TXT_EDH_RSA_DES_64_CBC_SHA
 "EDH-RSA-DES-CBC-SHA"

	)

119 
	#SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA
 "EDH-RSA-DES-CBC3-SHA"

	)

121 
	#SSL3_TXT_ADH_RC4_40_MD5
 "EXP-ADH-RC4-MD5"

	)

122 
	#SSL3_TXT_ADH_RC4_128_MD5
 "ADH-RC4-MD5"

	)

123 
	#SSL3_TXT_ADH_DES_40_CBC_SHA
 "EXP-ADH-DES-CBC-SHA"

	)

124 
	#SSL3_TXT_ADH_DES_64_CBC_SHA
 "ADH-DES-CBC-SHA"

	)

125 
	#SSL3_TXT_ADH_DES_192_CBC_SHA
 "ADH-DES-CBC3-SHA"

	)

127 
	#SSL3_SSL_SESSION_ID_LENGTH
 32

	)

128 
	#SSL3_MAX_SSL_SESSION_ID_LENGTH
 32

	)

130 
	#SSL3_MASTER_SECRET_SIZE
 48

	)

131 
	#SSL3_RANDOM_SIZE
 32

	)

132 
	#SSL3_SESSION_ID_SIZE
 32

	)

133 
	#SSL3_RT_HEADER_LENGTH
 5

	)

135 
	#SSL3_HM_HEADER_LENGTH
 4

	)

137 #i‚de‡
SSL3_ALIGN_PAYLOAD


146 
	#SSL3_ALIGN_PAYLOAD
 8

	)

148 #i‡(
SSL3_ALIGN_PAYLOAD
&(SSL3_ALIGN_PAYLOAD-1))!=0

150 #unde‡
SSL3_ALIGN_PAYLOAD


160 
	#SSL3_RT_MAX_MD_SIZE
 64

	)

166 
	#SSL_RT_MAX_CIPHER_BLOCK_SIZE
 16

	)

168 
	#SSL3_RT_MAX_EXTRA
 (16384)

	)

171 
	#SSL3_RT_MAX_PLAIN_LENGTH
 16384

	)

173 
	#SSL3_RT_MAX_COMPRESSED_OVERHEAD
 1024

	)

180 
	#SSL3_RT_MAX_ENCRYPTED_OVERHEAD
 (256 + 
SSL3_RT_MAX_MD_SIZE
)

	)

181 
	#SSL3_RT_MAX_TLS13_ENCRYPTED_OVERHEAD
 256

	)

188 
	#SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD
 \

189 (
SSL_RT_MAX_CIPHER_BLOCK_SIZE
 + 
SSL3_RT_MAX_MD_SIZE
)

	)

193 #ifde‡
OPENSSL_NO_COMP


194 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 
SSL3_RT_MAX_PLAIN_LENGTH


	)

196 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 \

197 (
SSL3_RT_MAX_PLAIN_LENGTH
+
SSL3_RT_MAX_COMPRESSED_OVERHEAD
)

	)

199 
	#SSL3_RT_MAX_ENCRYPTED_LENGTH
 \

200 (
SSL3_RT_MAX_ENCRYPTED_OVERHEAD
+
SSL3_RT_MAX_COMPRESSED_LENGTH
)

	)

201 
	#SSL3_RT_MAX_TLS13_ENCRYPTED_LENGTH
 \

202 (
SSL3_RT_MAX_PLAIN_LENGTH
 + 
SSL3_RT_MAX_TLS13_ENCRYPTED_OVERHEAD
)

	)

203 
	#SSL3_RT_MAX_PACKET_SIZE
 \

204 (
SSL3_RT_MAX_ENCRYPTED_LENGTH
+
SSL3_RT_HEADER_LENGTH
)

	)

206 
	#SSL3_MD_CLIENT_FINISHED_CONST
 "\x43\x4C\x4E\x54"

	)

207 
	#SSL3_MD_SERVER_FINISHED_CONST
 "\x53\x52\x56\x52"

	)

209 
	#SSL3_VERSION
 0x0300

	)

210 
	#SSL3_VERSION_MAJOR
 0x03

	)

211 
	#SSL3_VERSION_MINOR
 0x00

	)

213 
	#SSL3_RT_CHANGE_CIPHER_SPEC
 20

	)

214 
	#SSL3_RT_ALERT
 21

	)

215 
	#SSL3_RT_HANDSHAKE
 22

	)

216 
	#SSL3_RT_APPLICATION_DATA
 23

	)

217 
	#DTLS1_RT_HEARTBEAT
 24

	)

220 
	#TLS1_RT_CRYPTO
 0x1000

	)

221 
	#TLS1_RT_CRYPTO_PREMASTER
 (
TLS1_RT_CRYPTO
 | 0x1)

	)

222 
	#TLS1_RT_CRYPTO_CLIENT_RANDOM
 (
TLS1_RT_CRYPTO
 | 0x2)

	)

223 
	#TLS1_RT_CRYPTO_SERVER_RANDOM
 (
TLS1_RT_CRYPTO
 | 0x3)

	)

224 
	#TLS1_RT_CRYPTO_MASTER
 (
TLS1_RT_CRYPTO
 | 0x4)

	)

226 
	#TLS1_RT_CRYPTO_READ
 0x0000

	)

227 
	#TLS1_RT_CRYPTO_WRITE
 0x0100

	)

228 
	#TLS1_RT_CRYPTO_MAC
 (
TLS1_RT_CRYPTO
 | 0x5)

	)

229 
	#TLS1_RT_CRYPTO_KEY
 (
TLS1_RT_CRYPTO
 | 0x6)

	)

230 
	#TLS1_RT_CRYPTO_IV
 (
TLS1_RT_CRYPTO
 | 0x7)

	)

231 
	#TLS1_RT_CRYPTO_FIXED_IV
 (
TLS1_RT_CRYPTO
 | 0x8)

	)

234 
	#SSL3_RT_HEADER
 0x100

	)

235 
	#SSL3_RT_INNER_CONTENT_TYPE
 0x101

	)

237 
	#SSL3_AL_WARNING
 1

	)

238 
	#SSL3_AL_FATAL
 2

	)

240 
	#SSL3_AD_CLOSE_NOTIFY
 0

	)

241 
	#SSL3_AD_UNEXPECTED_MESSAGE
 10

	)

242 
	#SSL3_AD_BAD_RECORD_MAC
 20

	)

243 
	#SSL3_AD_DECOMPRESSION_FAILURE
 30

	)

244 
	#SSL3_AD_HANDSHAKE_FAILURE
 40

	)

245 
	#SSL3_AD_NO_CERTIFICATE
 41

	)

246 
	#SSL3_AD_BAD_CERTIFICATE
 42

	)

247 
	#SSL3_AD_UNSUPPORTED_CERTIFICATE
 43

	)

248 
	#SSL3_AD_CERTIFICATE_REVOKED
 44

	)

249 
	#SSL3_AD_CERTIFICATE_EXPIRED
 45

	)

250 
	#SSL3_AD_CERTIFICATE_UNKNOWN
 46

	)

251 
	#SSL3_AD_ILLEGAL_PARAMETER
 47

	)

253 
	#TLS1_HB_REQUEST
 1

	)

254 
	#TLS1_HB_RESPONSE
 2

	)

257 
	#SSL3_CT_RSA_SIGN
 1

	)

258 
	#SSL3_CT_DSS_SIGN
 2

	)

259 
	#SSL3_CT_RSA_FIXED_DH
 3

	)

260 
	#SSL3_CT_DSS_FIXED_DH
 4

	)

261 
	#SSL3_CT_RSA_EPHEMERAL_DH
 5

	)

262 
	#SSL3_CT_DSS_EPHEMERAL_DH
 6

	)

263 
	#SSL3_CT_FORTEZZA_DMS
 20

	)

268 
	#SSL3_CT_NUMBER
 10

	)

270 #i‡
deföed
(
TLS_CT_NUMBER
)

271 #i‡
TLS_CT_NUMBER
 !
SSL3_CT_NUMBER


277 
	#SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
 0x0001

	)

280 
	#TLS1_FLAGS_TLS_PADDING_BUG
 0x0

	)

282 
	#TLS1_FLAGS_SKIP_CERT_VERIFY
 0x0010

	)

285 
	#TLS1_FLAGS_ENCRYPT_THEN_MAC_READ
 0x0100

	)

286 
	#TLS1_FLAGS_ENCRYPT_THEN_MAC
 
TLS1_FLAGS_ENCRYPT_THEN_MAC_READ


	)

289 
	#TLS1_FLAGS_RECEIVED_EXTMS
 0x0200

	)

291 
	#TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE
 0x0400

	)

293 
	#TLS1_FLAGS_STATELESS
 0x0800

	)

296 
	#TLS1_FLAGS_REQUIRED_EXTMS
 0x1000

	)

298 
	#SSL3_MT_HELLO_REQUEST
 0

	)

299 
	#SSL3_MT_CLIENT_HELLO
 1

	)

300 
	#SSL3_MT_SERVER_HELLO
 2

	)

301 
	#SSL3_MT_NEWSESSION_TICKET
 4

	)

302 
	#SSL3_MT_END_OF_EARLY_DATA
 5

	)

303 
	#SSL3_MT_ENCRYPTED_EXTENSIONS
 8

	)

304 
	#SSL3_MT_CERTIFICATE
 11

	)

305 
	#SSL3_MT_SERVER_KEY_EXCHANGE
 12

	)

306 
	#SSL3_MT_CERTIFICATE_REQUEST
 13

	)

307 
	#SSL3_MT_SERVER_DONE
 14

	)

308 
	#SSL3_MT_CERTIFICATE_VERIFY
 15

	)

309 
	#SSL3_MT_CLIENT_KEY_EXCHANGE
 16

	)

310 
	#SSL3_MT_FINISHED
 20

	)

311 
	#SSL3_MT_CERTIFICATE_URL
 21

	)

312 
	#SSL3_MT_CERTIFICATE_STATUS
 22

	)

313 
	#SSL3_MT_SUPPLEMENTAL_DATA
 23

	)

314 
	#SSL3_MT_KEY_UPDATE
 24

	)

315 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


316 
	#SSL3_MT_NEXT_PROTO
 67

	)

318 
	#SSL3_MT_MESSAGE_HASH
 254

	)

319 
	#DTLS1_MT_HELLO_VERIFY_REQUEST
 3

	)

322 
	#SSL3_MT_CHANGE_CIPHER_SPEC
 0x0101

	)

324 
	#SSL3_MT_CCS
 1

	)

327 
	#SSL3_CC_READ
 0x001

	)

328 
	#SSL3_CC_WRITE
 0x002

	)

329 
	#SSL3_CC_CLIENT
 0x010

	)

330 
	#SSL3_CC_SERVER
 0x020

	)

331 
	#SSL3_CC_EARLY
 0x040

	)

332 
	#SSL3_CC_HANDSHAKE
 0x080

	)

333 
	#SSL3_CC_APPLICATION
 0x100

	)

334 
	#SSL3_CHANGE_CIPHER_CLIENT_WRITE
 (
SSL3_CC_CLIENT
|
SSL3_CC_WRITE
)

	)

335 
	#SSL3_CHANGE_CIPHER_SERVER_READ
 (
SSL3_CC_SERVER
|
SSL3_CC_READ
)

	)

336 
	#SSL3_CHANGE_CIPHER_CLIENT_READ
 (
SSL3_CC_CLIENT
|
SSL3_CC_READ
)

	)

337 
	#SSL3_CHANGE_CIPHER_SERVER_WRITE
 (
SSL3_CC_SERVER
|
SSL3_CC_WRITE
)

	)

339 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/sslerr.h

11 #i‚de‡
HEADER_SSLERR_H


12 
	#HEADER_SSLERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_SSL_°rögs
();

26 
	#SSL_F_ADD_CLIENT_KEY_SHARE_EXT
 438

	)

27 
	#SSL_F_ADD_KEY_SHARE
 512

	)

28 
	#SSL_F_BYTES_TO_CIPHER_LIST
 519

	)

29 
	#SSL_F_CHECK_SUITEB_CIPHER_LIST
 331

	)

30 
	#SSL_F_CIPHERSUITE_CB
 622

	)

31 
	#SSL_F_CONSTRUCT_CA_NAMES
 552

	)

32 
	#SSL_F_CONSTRUCT_KEY_EXCHANGE_TBS
 553

	)

33 
	#SSL_F_CONSTRUCT_STATEFUL_TICKET
 636

	)

34 
	#SSL_F_CONSTRUCT_STATELESS_TICKET
 637

	)

35 
	#SSL_F_CREATE_SYNTHETIC_MESSAGE_HASH
 539

	)

36 
	#SSL_F_CREATE_TICKET_PREQUEL
 638

	)

37 
	#SSL_F_CT_MOVE_SCTS
 345

	)

38 
	#SSL_F_CT_STRICT
 349

	)

39 
	#SSL_F_CUSTOM_EXT_ADD
 554

	)

40 
	#SSL_F_CUSTOM_EXT_PARSE
 555

	)

41 
	#SSL_F_D2I_SSL_SESSION
 103

	)

42 
	#SSL_F_DANE_CTX_ENABLE
 347

	)

43 
	#SSL_F_DANE_MTYPE_SET
 393

	)

44 
	#SSL_F_DANE_TLSA_ADD
 394

	)

45 
	#SSL_F_DERIVE_SECRET_KEY_AND_IV
 514

	)

46 
	#SSL_F_DO_DTLS1_WRITE
 245

	)

47 
	#SSL_F_DO_SSL3_WRITE
 104

	)

48 
	#SSL_F_DTLS1_BUFFER_RECORD
 247

	)

49 
	#SSL_F_DTLS1_CHECK_TIMEOUT_NUM
 318

	)

50 
	#SSL_F_DTLS1_HEARTBEAT
 305

	)

51 
	#SSL_F_DTLS1_HM_FRAGMENT_NEW
 623

	)

52 
	#SSL_F_DTLS1_PREPROCESS_FRAGMENT
 288

	)

53 
	#SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS
 424

	)

54 
	#SSL_F_DTLS1_PROCESS_RECORD
 257

	)

55 
	#SSL_F_DTLS1_READ_BYTES
 258

	)

56 
	#SSL_F_DTLS1_READ_FAILED
 339

	)

57 
	#SSL_F_DTLS1_RETRANSMIT_MESSAGE
 390

	)

58 
	#SSL_F_DTLS1_WRITE_APP_DATA_BYTES
 268

	)

59 
	#SSL_F_DTLS1_WRITE_BYTES
 545

	)

60 
	#SSL_F_DTLSV1_LISTEN
 350

	)

61 
	#SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC
 371

	)

62 
	#SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST
 385

	)

63 
	#SSL_F_DTLS_GET_REASSEMBLED_MESSAGE
 370

	)

64 
	#SSL_F_DTLS_PROCESS_HELLO_VERIFY
 386

	)

65 
	#SSL_F_DTLS_RECORD_LAYER_NEW
 635

	)

66 
	#SSL_F_DTLS_WAIT_FOR_DRY
 592

	)

67 
	#SSL_F_EARLY_DATA_COUNT_OK
 532

	)

68 
	#SSL_F_FINAL_EARLY_DATA
 556

	)

69 
	#SSL_F_FINAL_EC_PT_FORMATS
 485

	)

70 
	#SSL_F_FINAL_EMS
 486

	)

71 
	#SSL_F_FINAL_KEY_SHARE
 503

	)

72 
	#SSL_F_FINAL_MAXFRAGMENTLEN
 557

	)

73 
	#SSL_F_FINAL_PSK
 639

	)

74 
	#SSL_F_FINAL_RENEGOTIATE
 483

	)

75 
	#SSL_F_FINAL_SERVER_NAME
 558

	)

76 
	#SSL_F_FINAL_SIG_ALGS
 497

	)

77 
	#SSL_F_GET_CERT_VERIFY_TBS_DATA
 588

	)

78 
	#SSL_F_NSS_KEYLOG_INT
 500

	)

79 
	#SSL_F_OPENSSL_INIT_SSL
 342

	)

80 
	#SSL_F_OSSL_STATEM_CLIENT13_READ_TRANSITION
 436

	)

81 
	#SSL_F_OSSL_STATEM_CLIENT13_WRITE_TRANSITION
 598

	)

82 
	#SSL_F_OSSL_STATEM_CLIENT_CONSTRUCT_MESSAGE
 430

	)

83 
	#SSL_F_OSSL_STATEM_CLIENT_POST_PROCESS_MESSAGE
 593

	)

84 
	#SSL_F_OSSL_STATEM_CLIENT_PROCESS_MESSAGE
 594

	)

85 
	#SSL_F_OSSL_STATEM_CLIENT_READ_TRANSITION
 417

	)

86 
	#SSL_F_OSSL_STATEM_CLIENT_WRITE_TRANSITION
 599

	)

87 
	#SSL_F_OSSL_STATEM_SERVER13_READ_TRANSITION
 437

	)

88 
	#SSL_F_OSSL_STATEM_SERVER13_WRITE_TRANSITION
 600

	)

89 
	#SSL_F_OSSL_STATEM_SERVER_CONSTRUCT_MESSAGE
 431

	)

90 
	#SSL_F_OSSL_STATEM_SERVER_POST_PROCESS_MESSAGE
 601

	)

91 
	#SSL_F_OSSL_STATEM_SERVER_POST_WORK
 602

	)

92 
	#SSL_F_OSSL_STATEM_SERVER_PRE_WORK
 640

	)

93 
	#SSL_F_OSSL_STATEM_SERVER_PROCESS_MESSAGE
 603

	)

94 
	#SSL_F_OSSL_STATEM_SERVER_READ_TRANSITION
 418

	)

95 
	#SSL_F_OSSL_STATEM_SERVER_WRITE_TRANSITION
 604

	)

96 
	#SSL_F_PARSE_CA_NAMES
 541

	)

97 
	#SSL_F_PITEM_NEW
 624

	)

98 
	#SSL_F_PQUEUE_NEW
 625

	)

99 
	#SSL_F_PROCESS_KEY_SHARE_EXT
 439

	)

100 
	#SSL_F_READ_STATE_MACHINE
 352

	)

101 
	#SSL_F_SET_CLIENT_CIPHERSUITE
 540

	)

102 
	#SSL_F_SRP_GENERATE_CLIENT_MASTER_SECRET
 595

	)

103 
	#SSL_F_SRP_GENERATE_SERVER_MASTER_SECRET
 589

	)

104 
	#SSL_F_SRP_VERIFY_SERVER_PARAM
 596

	)

105 
	#SSL_F_SSL3_CHANGE_CIPHER_STATE
 129

	)

106 
	#SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM
 130

	)

107 
	#SSL_F_SSL3_CTRL
 213

	)

108 
	#SSL_F_SSL3_CTX_CTRL
 133

	)

109 
	#SSL_F_SSL3_DIGEST_CACHED_RECORDS
 293

	)

110 
	#SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC
 292

	)

111 
	#SSL_F_SSL3_ENC
 608

	)

112 
	#SSL_F_SSL3_FINAL_FINISH_MAC
 285

	)

113 
	#SSL_F_SSL3_FINISH_MAC
 587

	)

114 
	#SSL_F_SSL3_GENERATE_KEY_BLOCK
 238

	)

115 
	#SSL_F_SSL3_GENERATE_MASTER_SECRET
 388

	)

116 
	#SSL_F_SSL3_GET_RECORD
 143

	)

117 
	#SSL_F_SSL3_INIT_FINISHED_MAC
 397

	)

118 
	#SSL_F_SSL3_OUTPUT_CERT_CHAIN
 147

	)

119 
	#SSL_F_SSL3_READ_BYTES
 148

	)

120 
	#SSL_F_SSL3_READ_N
 149

	)

121 
	#SSL_F_SSL3_SETUP_KEY_BLOCK
 157

	)

122 
	#SSL_F_SSL3_SETUP_READ_BUFFER
 156

	)

123 
	#SSL_F_SSL3_SETUP_WRITE_BUFFER
 291

	)

124 
	#SSL_F_SSL3_WRITE_BYTES
 158

	)

125 
	#SSL_F_SSL3_WRITE_PENDING
 159

	)

126 
	#SSL_F_SSL_ADD_CERT_CHAIN
 316

	)

127 
	#SSL_F_SSL_ADD_CERT_TO_BUF
 319

	)

128 
	#SSL_F_SSL_ADD_CERT_TO_WPACKET
 493

	)

129 
	#SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT
 298

	)

130 
	#SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT
 277

	)

131 
	#SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT
 307

	)

132 
	#SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK
 215

	)

133 
	#SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK
 216

	)

134 
	#SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT
 299

	)

135 
	#SSL_F_SSL_ADD_SERVERHELLO_TLSEXT
 278

	)

136 
	#SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT
 308

	)

137 
	#SSL_F_SSL_BAD_METHOD
 160

	)

138 
	#SSL_F_SSL_BUILD_CERT_CHAIN
 332

	)

139 
	#SSL_F_SSL_BYTES_TO_CIPHER_LIST
 161

	)

140 
	#SSL_F_SSL_CACHE_CIPHERLIST
 520

	)

141 
	#SSL_F_SSL_CERT_ADD0_CHAIN_CERT
 346

	)

142 
	#SSL_F_SSL_CERT_DUP
 221

	)

143 
	#SSL_F_SSL_CERT_NEW
 162

	)

144 
	#SSL_F_SSL_CERT_SET0_CHAIN
 340

	)

145 
	#SSL_F_SSL_CHECK_PRIVATE_KEY
 163

	)

146 
	#SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT
 280

	)

147 
	#SSL_F_SSL_CHECK_SRP_EXT_CLIENTHELLO
 606

	)

148 
	#SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG
 279

	)

149 
	#SSL_F_SSL_CHOOSE_CLIENT_VERSION
 607

	)

150 
	#SSL_F_SSL_CIPHER_DESCRIPTION
 626

	)

151 
	#SSL_F_SSL_CIPHER_LIST_TO_BYTES
 425

	)

152 
	#SSL_F_SSL_CIPHER_PROCESS_RULESTR
 230

	)

153 
	#SSL_F_SSL_CIPHER_STRENGTH_SORT
 231

	)

154 
	#SSL_F_SSL_CLEAR
 164

	)

155 
	#SSL_F_SSL_CLIENT_HELLO_GET1_EXTENSIONS_PRESENT
 627

	)

156 
	#SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD
 165

	)

157 
	#SSL_F_SSL_CONF_CMD
 334

	)

158 
	#SSL_F_SSL_CREATE_CIPHER_LIST
 166

	)

159 
	#SSL_F_SSL_CTRL
 232

	)

160 
	#SSL_F_SSL_CTX_CHECK_PRIVATE_KEY
 168

	)

161 
	#SSL_F_SSL_CTX_ENABLE_CT
 398

	)

162 
	#SSL_F_SSL_CTX_MAKE_PROFILES
 309

	)

163 
	#SSL_F_SSL_CTX_NEW
 169

	)

164 
	#SSL_F_SSL_CTX_SET_ALPN_PROTOS
 343

	)

165 
	#SSL_F_SSL_CTX_SET_CIPHER_LIST
 269

	)

166 
	#SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE
 290

	)

167 
	#SSL_F_SSL_CTX_SET_CT_VALIDATION_CALLBACK
 396

	)

168 
	#SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT
 219

	)

169 
	#SSL_F_SSL_CTX_SET_SSL_VERSION
 170

	)

170 
	#SSL_F_SSL_CTX_SET_TLSEXT_MAX_FRAGMENT_LENGTH
 551

	)

171 
	#SSL_F_SSL_CTX_USE_CERTIFICATE
 171

	)

172 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1
 172

	)

173 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_FILE
 173

	)

174 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY
 174

	)

175 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1
 175

	)

176 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE
 176

	)

177 
	#SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT
 272

	)

178 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY
 177

	)

179 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1
 178

	)

180 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE
 179

	)

181 
	#SSL_F_SSL_CTX_USE_SERVERINFO
 336

	)

182 
	#SSL_F_SSL_CTX_USE_SERVERINFO_EX
 543

	)

183 
	#SSL_F_SSL_CTX_USE_SERVERINFO_FILE
 337

	)

184 
	#SSL_F_SSL_DANE_DUP
 403

	)

185 
	#SSL_F_SSL_DANE_ENABLE
 395

	)

186 
	#SSL_F_SSL_DERIVE
 590

	)

187 
	#SSL_F_SSL_DO_CONFIG
 391

	)

188 
	#SSL_F_SSL_DO_HANDSHAKE
 180

	)

189 
	#SSL_F_SSL_DUP_CA_LIST
 408

	)

190 
	#SSL_F_SSL_ENABLE_CT
 402

	)

191 
	#SSL_F_SSL_GENERATE_PKEY_GROUP
 559

	)

192 
	#SSL_F_SSL_GENERATE_SESSION_ID
 547

	)

193 
	#SSL_F_SSL_GET_NEW_SESSION
 181

	)

194 
	#SSL_F_SSL_GET_PREV_SESSION
 217

	)

195 
	#SSL_F_SSL_GET_SERVER_CERT_INDEX
 322

	)

196 
	#SSL_F_SSL_GET_SIGN_PKEY
 183

	)

197 
	#SSL_F_SSL_HANDSHAKE_HASH
 560

	)

198 
	#SSL_F_SSL_INIT_WBIO_BUFFER
 184

	)

199 
	#SSL_F_SSL_KEY_UPDATE
 515

	)

200 
	#SSL_F_SSL_LOAD_CLIENT_CA_FILE
 185

	)

201 
	#SSL_F_SSL_LOG_MASTER_SECRET
 498

	)

202 
	#SSL_F_SSL_LOG_RSA_CLIENT_KEY_EXCHANGE
 499

	)

203 
	#SSL_F_SSL_MODULE_INIT
 392

	)

204 
	#SSL_F_SSL_NEW
 186

	)

205 
	#SSL_F_SSL_NEXT_PROTO_VALIDATE
 565

	)

206 
	#SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT
 300

	)

207 
	#SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT
 302

	)

208 
	#SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT
 310

	)

209 
	#SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT
 301

	)

210 
	#SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT
 303

	)

211 
	#SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT
 311

	)

212 
	#SSL_F_SSL_PEEK
 270

	)

213 
	#SSL_F_SSL_PEEK_EX
 432

	)

214 
	#SSL_F_SSL_PEEK_INTERNAL
 522

	)

215 
	#SSL_F_SSL_READ
 223

	)

216 
	#SSL_F_SSL_READ_EARLY_DATA
 529

	)

217 
	#SSL_F_SSL_READ_EX
 434

	)

218 
	#SSL_F_SSL_READ_INTERNAL
 523

	)

219 
	#SSL_F_SSL_RENEGOTIATE
 516

	)

220 
	#SSL_F_SSL_RENEGOTIATE_ABBREVIATED
 546

	)

221 
	#SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT
 320

	)

222 
	#SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT
 321

	)

223 
	#SSL_F_SSL_SESSION_DUP
 348

	)

224 
	#SSL_F_SSL_SESSION_NEW
 189

	)

225 
	#SSL_F_SSL_SESSION_PRINT_FP
 190

	)

226 
	#SSL_F_SSL_SESSION_SET1_ID
 423

	)

227 
	#SSL_F_SSL_SESSION_SET1_ID_CONTEXT
 312

	)

228 
	#SSL_F_SSL_SET_ALPN_PROTOS
 344

	)

229 
	#SSL_F_SSL_SET_CERT
 191

	)

230 
	#SSL_F_SSL_SET_CERT_AND_KEY
 621

	)

231 
	#SSL_F_SSL_SET_CIPHER_LIST
 271

	)

232 
	#SSL_F_SSL_SET_CT_VALIDATION_CALLBACK
 399

	)

233 
	#SSL_F_SSL_SET_FD
 192

	)

234 
	#SSL_F_SSL_SET_PKEY
 193

	)

235 
	#SSL_F_SSL_SET_RFD
 194

	)

236 
	#SSL_F_SSL_SET_SESSION
 195

	)

237 
	#SSL_F_SSL_SET_SESSION_ID_CONTEXT
 218

	)

238 
	#SSL_F_SSL_SET_SESSION_TICKET_EXT
 294

	)

239 
	#SSL_F_SSL_SET_TLSEXT_MAX_FRAGMENT_LENGTH
 550

	)

240 
	#SSL_F_SSL_SET_WFD
 196

	)

241 
	#SSL_F_SSL_SHUTDOWN
 224

	)

242 
	#SSL_F_SSL_SRP_CTX_INIT
 313

	)

243 
	#SSL_F_SSL_START_ASYNC_JOB
 389

	)

244 
	#SSL_F_SSL_UNDEFINED_FUNCTION
 197

	)

245 
	#SSL_F_SSL_UNDEFINED_VOID_FUNCTION
 244

	)

246 
	#SSL_F_SSL_USE_CERTIFICATE
 198

	)

247 
	#SSL_F_SSL_USE_CERTIFICATE_ASN1
 199

	)

248 
	#SSL_F_SSL_USE_CERTIFICATE_FILE
 200

	)

249 
	#SSL_F_SSL_USE_PRIVATEKEY
 201

	)

250 
	#SSL_F_SSL_USE_PRIVATEKEY_ASN1
 202

	)

251 
	#SSL_F_SSL_USE_PRIVATEKEY_FILE
 203

	)

252 
	#SSL_F_SSL_USE_PSK_IDENTITY_HINT
 273

	)

253 
	#SSL_F_SSL_USE_RSAPRIVATEKEY
 204

	)

254 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1
 205

	)

255 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_FILE
 206

	)

256 
	#SSL_F_SSL_VALIDATE_CT
 400

	)

257 
	#SSL_F_SSL_VERIFY_CERT_CHAIN
 207

	)

258 
	#SSL_F_SSL_VERIFY_CLIENT_POST_HANDSHAKE
 616

	)

259 
	#SSL_F_SSL_WRITE
 208

	)

260 
	#SSL_F_SSL_WRITE_EARLY_DATA
 526

	)

261 
	#SSL_F_SSL_WRITE_EARLY_FINISH
 527

	)

262 
	#SSL_F_SSL_WRITE_EX
 433

	)

263 
	#SSL_F_SSL_WRITE_INTERNAL
 524

	)

264 
	#SSL_F_STATE_MACHINE
 353

	)

265 
	#SSL_F_TLS12_CHECK_PEER_SIGALG
 333

	)

266 
	#SSL_F_TLS12_COPY_SIGALGS
 533

	)

267 
	#SSL_F_TLS13_CHANGE_CIPHER_STATE
 440

	)

268 
	#SSL_F_TLS13_ENC
 609

	)

269 
	#SSL_F_TLS13_FINAL_FINISH_MAC
 605

	)

270 
	#SSL_F_TLS13_GENERATE_SECRET
 591

	)

271 
	#SSL_F_TLS13_HKDF_EXPAND
 561

	)

272 
	#SSL_F_TLS13_RESTORE_HANDSHAKE_DIGEST_FOR_PHA
 617

	)

273 
	#SSL_F_TLS13_SAVE_HANDSHAKE_DIGEST_FOR_PHA
 618

	)

274 
	#SSL_F_TLS13_SETUP_KEY_BLOCK
 441

	)

275 
	#SSL_F_TLS1_CHANGE_CIPHER_STATE
 209

	)

276 
	#SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS
 341

	)

277 
	#SSL_F_TLS1_ENC
 401

	)

278 
	#SSL_F_TLS1_EXPORT_KEYING_MATERIAL
 314

	)

279 
	#SSL_F_TLS1_GET_CURVELIST
 338

	)

280 
	#SSL_F_TLS1_PRF
 284

	)

281 
	#SSL_F_TLS1_SAVE_U16
 628

	)

282 
	#SSL_F_TLS1_SETUP_KEY_BLOCK
 211

	)

283 
	#SSL_F_TLS1_SET_GROUPS
 629

	)

284 
	#SSL_F_TLS1_SET_RAW_SIGALGS
 630

	)

285 
	#SSL_F_TLS1_SET_SERVER_SIGALGS
 335

	)

286 
	#SSL_F_TLS1_SET_SHARED_SIGALGS
 631

	)

287 
	#SSL_F_TLS1_SET_SIGALGS
 632

	)

288 
	#SSL_F_TLS_CHOOSE_SIGALG
 513

	)

289 
	#SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK
 354

	)

290 
	#SSL_F_TLS_COLLECT_EXTENSIONS
 435

	)

291 
	#SSL_F_TLS_CONSTRUCT_CERTIFICATE_AUTHORITIES
 542

	)

292 
	#SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST
 372

	)

293 
	#SSL_F_TLS_CONSTRUCT_CERT_STATUS
 429

	)

294 
	#SSL_F_TLS_CONSTRUCT_CERT_STATUS_BODY
 494

	)

295 
	#SSL_F_TLS_CONSTRUCT_CERT_VERIFY
 496

	)

296 
	#SSL_F_TLS_CONSTRUCT_CHANGE_CIPHER_SPEC
 427

	)

297 
	#SSL_F_TLS_CONSTRUCT_CKE_DHE
 404

	)

298 
	#SSL_F_TLS_CONSTRUCT_CKE_ECDHE
 405

	)

299 
	#SSL_F_TLS_CONSTRUCT_CKE_GOST
 406

	)

300 
	#SSL_F_TLS_CONSTRUCT_CKE_PSK_PREAMBLE
 407

	)

301 
	#SSL_F_TLS_CONSTRUCT_CKE_RSA
 409

	)

302 
	#SSL_F_TLS_CONSTRUCT_CKE_SRP
 410

	)

303 
	#SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE
 484

	)

304 
	#SSL_F_TLS_CONSTRUCT_CLIENT_HELLO
 487

	)

305 
	#SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE
 488

	)

306 
	#SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY
 489

	)

307 
	#SSL_F_TLS_CONSTRUCT_CTOS_ALPN
 466

	)

308 
	#SSL_F_TLS_CONSTRUCT_CTOS_CERTIFICATE
 355

	)

309 
	#SSL_F_TLS_CONSTRUCT_CTOS_COOKIE
 535

	)

310 
	#SSL_F_TLS_CONSTRUCT_CTOS_EARLY_DATA
 530

	)

311 
	#SSL_F_TLS_CONSTRUCT_CTOS_EC_PT_FORMATS
 467

	)

312 
	#SSL_F_TLS_CONSTRUCT_CTOS_EMS
 468

	)

313 
	#SSL_F_TLS_CONSTRUCT_CTOS_ETM
 469

	)

314 
	#SSL_F_TLS_CONSTRUCT_CTOS_HELLO
 356

	)

315 
	#SSL_F_TLS_CONSTRUCT_CTOS_KEY_EXCHANGE
 357

	)

316 
	#SSL_F_TLS_CONSTRUCT_CTOS_KEY_SHARE
 470

	)

317 
	#SSL_F_TLS_CONSTRUCT_CTOS_MAXFRAGMENTLEN
 549

	)

318 
	#SSL_F_TLS_CONSTRUCT_CTOS_NPN
 471

	)

319 
	#SSL_F_TLS_CONSTRUCT_CTOS_PADDING
 472

	)

320 
	#SSL_F_TLS_CONSTRUCT_CTOS_POST_HANDSHAKE_AUTH
 619

	)

321 
	#SSL_F_TLS_CONSTRUCT_CTOS_PSK
 501

	)

322 
	#SSL_F_TLS_CONSTRUCT_CTOS_PSK_KEX_MODES
 509

	)

323 
	#SSL_F_TLS_CONSTRUCT_CTOS_RENEGOTIATE
 473

	)

324 
	#SSL_F_TLS_CONSTRUCT_CTOS_SCT
 474

	)

325 
	#SSL_F_TLS_CONSTRUCT_CTOS_SERVER_NAME
 475

	)

326 
	#SSL_F_TLS_CONSTRUCT_CTOS_SESSION_TICKET
 476

	)

327 
	#SSL_F_TLS_CONSTRUCT_CTOS_SIG_ALGS
 477

	)

328 
	#SSL_F_TLS_CONSTRUCT_CTOS_SRP
 478

	)

329 
	#SSL_F_TLS_CONSTRUCT_CTOS_STATUS_REQUEST
 479

	)

330 
	#SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_GROUPS
 480

	)

331 
	#SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_VERSIONS
 481

	)

332 
	#SSL_F_TLS_CONSTRUCT_CTOS_USE_SRTP
 482

	)

333 
	#SSL_F_TLS_CONSTRUCT_CTOS_VERIFY
 358

	)

334 
	#SSL_F_TLS_CONSTRUCT_ENCRYPTED_EXTENSIONS
 443

	)

335 
	#SSL_F_TLS_CONSTRUCT_END_OF_EARLY_DATA
 536

	)

336 
	#SSL_F_TLS_CONSTRUCT_EXTENSIONS
 447

	)

337 
	#SSL_F_TLS_CONSTRUCT_FINISHED
 359

	)

338 
	#SSL_F_TLS_CONSTRUCT_HELLO_REQUEST
 373

	)

339 
	#SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST
 510

	)

340 
	#SSL_F_TLS_CONSTRUCT_KEY_UPDATE
 517

	)

341 
	#SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET
 428

	)

342 
	#SSL_F_TLS_CONSTRUCT_NEXT_PROTO
 426

	)

343 
	#SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE
 490

	)

344 
	#SSL_F_TLS_CONSTRUCT_SERVER_HELLO
 491

	)

345 
	#SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE
 492

	)

346 
	#SSL_F_TLS_CONSTRUCT_STOC_ALPN
 451

	)

347 
	#SSL_F_TLS_CONSTRUCT_STOC_CERTIFICATE
 374

	)

348 
	#SSL_F_TLS_CONSTRUCT_STOC_COOKIE
 613

	)

349 
	#SSL_F_TLS_CONSTRUCT_STOC_CRYPTOPRO_BUG
 452

	)

350 
	#SSL_F_TLS_CONSTRUCT_STOC_DONE
 375

	)

351 
	#SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA
 531

	)

352 
	#SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA_INFO
 525

	)

353 
	#SSL_F_TLS_CONSTRUCT_STOC_EC_PT_FORMATS
 453

	)

354 
	#SSL_F_TLS_CONSTRUCT_STOC_EMS
 454

	)

355 
	#SSL_F_TLS_CONSTRUCT_STOC_ETM
 455

	)

356 
	#SSL_F_TLS_CONSTRUCT_STOC_HELLO
 376

	)

357 
	#SSL_F_TLS_CONSTRUCT_STOC_KEY_EXCHANGE
 377

	)

358 
	#SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE
 456

	)

359 
	#SSL_F_TLS_CONSTRUCT_STOC_MAXFRAGMENTLEN
 548

	)

360 
	#SSL_F_TLS_CONSTRUCT_STOC_NEXT_PROTO_NEG
 457

	)

361 
	#SSL_F_TLS_CONSTRUCT_STOC_PSK
 504

	)

362 
	#SSL_F_TLS_CONSTRUCT_STOC_RENEGOTIATE
 458

	)

363 
	#SSL_F_TLS_CONSTRUCT_STOC_SERVER_NAME
 459

	)

364 
	#SSL_F_TLS_CONSTRUCT_STOC_SESSION_TICKET
 460

	)

365 
	#SSL_F_TLS_CONSTRUCT_STOC_STATUS_REQUEST
 461

	)

366 
	#SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_GROUPS
 544

	)

367 
	#SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_VERSIONS
 611

	)

368 
	#SSL_F_TLS_CONSTRUCT_STOC_USE_SRTP
 462

	)

369 
	#SSL_F_TLS_EARLY_POST_PROCESS_CLIENT_HELLO
 521

	)

370 
	#SSL_F_TLS_FINISH_HANDSHAKE
 597

	)

371 
	#SSL_F_TLS_GET_MESSAGE_BODY
 351

	)

372 
	#SSL_F_TLS_GET_MESSAGE_HEADER
 387

	)

373 
	#SSL_F_TLS_HANDLE_ALPN
 562

	)

374 
	#SSL_F_TLS_HANDLE_STATUS_REQUEST
 563

	)

375 
	#SSL_F_TLS_PARSE_CERTIFICATE_AUTHORITIES
 566

	)

376 
	#SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT
 449

	)

377 
	#SSL_F_TLS_PARSE_CTOS_ALPN
 567

	)

378 
	#SSL_F_TLS_PARSE_CTOS_COOKIE
 614

	)

379 
	#SSL_F_TLS_PARSE_CTOS_EARLY_DATA
 568

	)

380 
	#SSL_F_TLS_PARSE_CTOS_EC_PT_FORMATS
 569

	)

381 
	#SSL_F_TLS_PARSE_CTOS_EMS
 570

	)

382 
	#SSL_F_TLS_PARSE_CTOS_KEY_SHARE
 463

	)

383 
	#SSL_F_TLS_PARSE_CTOS_MAXFRAGMENTLEN
 571

	)

384 
	#SSL_F_TLS_PARSE_CTOS_POST_HANDSHAKE_AUTH
 620

	)

385 
	#SSL_F_TLS_PARSE_CTOS_PSK
 505

	)

386 
	#SSL_F_TLS_PARSE_CTOS_PSK_KEX_MODES
 572

	)

387 
	#SSL_F_TLS_PARSE_CTOS_RENEGOTIATE
 464

	)

388 
	#SSL_F_TLS_PARSE_CTOS_SERVER_NAME
 573

	)

389 
	#SSL_F_TLS_PARSE_CTOS_SESSION_TICKET
 574

	)

390 
	#SSL_F_TLS_PARSE_CTOS_SIG_ALGS
 575

	)

391 
	#SSL_F_TLS_PARSE_CTOS_SIG_ALGS_CERT
 615

	)

392 
	#SSL_F_TLS_PARSE_CTOS_SRP
 576

	)

393 
	#SSL_F_TLS_PARSE_CTOS_STATUS_REQUEST
 577

	)

394 
	#SSL_F_TLS_PARSE_CTOS_SUPPORTED_GROUPS
 578

	)

395 
	#SSL_F_TLS_PARSE_CTOS_USE_SRTP
 465

	)

396 
	#SSL_F_TLS_PARSE_STOC_ALPN
 579

	)

397 
	#SSL_F_TLS_PARSE_STOC_COOKIE
 534

	)

398 
	#SSL_F_TLS_PARSE_STOC_EARLY_DATA
 538

	)

399 
	#SSL_F_TLS_PARSE_STOC_EARLY_DATA_INFO
 528

	)

400 
	#SSL_F_TLS_PARSE_STOC_EC_PT_FORMATS
 580

	)

401 
	#SSL_F_TLS_PARSE_STOC_KEY_SHARE
 445

	)

402 
	#SSL_F_TLS_PARSE_STOC_MAXFRAGMENTLEN
 581

	)

403 
	#SSL_F_TLS_PARSE_STOC_NPN
 582

	)

404 
	#SSL_F_TLS_PARSE_STOC_PSK
 502

	)

405 
	#SSL_F_TLS_PARSE_STOC_RENEGOTIATE
 448

	)

406 
	#SSL_F_TLS_PARSE_STOC_SCT
 564

	)

407 
	#SSL_F_TLS_PARSE_STOC_SERVER_NAME
 583

	)

408 
	#SSL_F_TLS_PARSE_STOC_SESSION_TICKET
 584

	)

409 
	#SSL_F_TLS_PARSE_STOC_STATUS_REQUEST
 585

	)

410 
	#SSL_F_TLS_PARSE_STOC_SUPPORTED_VERSIONS
 612

	)

411 
	#SSL_F_TLS_PARSE_STOC_USE_SRTP
 446

	)

412 
	#SSL_F_TLS_POST_PROCESS_CLIENT_HELLO
 378

	)

413 
	#SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE
 384

	)

414 
	#SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE
 360

	)

415 
	#SSL_F_TLS_PROCESS_AS_HELLO_RETRY_REQUEST
 610

	)

416 
	#SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST
 361

	)

417 
	#SSL_F_TLS_PROCESS_CERT_STATUS
 362

	)

418 
	#SSL_F_TLS_PROCESS_CERT_STATUS_BODY
 495

	)

419 
	#SSL_F_TLS_PROCESS_CERT_VERIFY
 379

	)

420 
	#SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC
 363

	)

421 
	#SSL_F_TLS_PROCESS_CKE_DHE
 411

	)

422 
	#SSL_F_TLS_PROCESS_CKE_ECDHE
 412

	)

423 
	#SSL_F_TLS_PROCESS_CKE_GOST
 413

	)

424 
	#SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE
 414

	)

425 
	#SSL_F_TLS_PROCESS_CKE_RSA
 415

	)

426 
	#SSL_F_TLS_PROCESS_CKE_SRP
 416

	)

427 
	#SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE
 380

	)

428 
	#SSL_F_TLS_PROCESS_CLIENT_HELLO
 381

	)

429 
	#SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE
 382

	)

430 
	#SSL_F_TLS_PROCESS_ENCRYPTED_EXTENSIONS
 444

	)

431 
	#SSL_F_TLS_PROCESS_END_OF_EARLY_DATA
 537

	)

432 
	#SSL_F_TLS_PROCESS_FINISHED
 364

	)

433 
	#SSL_F_TLS_PROCESS_HELLO_REQ
 507

	)

434 
	#SSL_F_TLS_PROCESS_HELLO_RETRY_REQUEST
 511

	)

435 
	#SSL_F_TLS_PROCESS_INITIAL_SERVER_FLIGHT
 442

	)

436 
	#SSL_F_TLS_PROCESS_KEY_EXCHANGE
 365

	)

437 
	#SSL_F_TLS_PROCESS_KEY_UPDATE
 518

	)

438 
	#SSL_F_TLS_PROCESS_NEW_SESSION_TICKET
 366

	)

439 
	#SSL_F_TLS_PROCESS_NEXT_PROTO
 383

	)

440 
	#SSL_F_TLS_PROCESS_SERVER_CERTIFICATE
 367

	)

441 
	#SSL_F_TLS_PROCESS_SERVER_DONE
 368

	)

442 
	#SSL_F_TLS_PROCESS_SERVER_HELLO
 369

	)

443 
	#SSL_F_TLS_PROCESS_SKE_DHE
 419

	)

444 
	#SSL_F_TLS_PROCESS_SKE_ECDHE
 420

	)

445 
	#SSL_F_TLS_PROCESS_SKE_PSK_PREAMBLE
 421

	)

446 
	#SSL_F_TLS_PROCESS_SKE_SRP
 422

	)

447 
	#SSL_F_TLS_PSK_DO_BINDER
 506

	)

448 
	#SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT
 450

	)

449 
	#SSL_F_TLS_SETUP_HANDSHAKE
 508

	)

450 
	#SSL_F_USE_CERTIFICATE_CHAIN_FILE
 220

	)

451 
	#SSL_F_WPACKET_INTERN_INIT_LEN
 633

	)

452 
	#SSL_F_WPACKET_START_SUB_PACKET_LEN__
 634

	)

453 
	#SSL_F_WRITE_STATE_MACHINE
 586

	)

458 
	#SSL_R_APPLICATION_DATA_AFTER_CLOSE_NOTIFY
 291

	)

459 
	#SSL_R_APP_DATA_IN_HANDSHAKE
 100

	)

460 
	#SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT
 272

	)

461 
	#SSL_R_AT_LEAST_TLS_1_0_NEEDED_IN_FIPS_MODE
 143

	)

462 
	#SSL_R_AT_LEAST_TLS_1_2_NEEDED_IN_SUITEB_MODE
 158

	)

463 
	#SSL_R_BAD_CHANGE_CIPHER_SPEC
 103

	)

464 
	#SSL_R_BAD_CIPHER
 186

	)

465 
	#SSL_R_BAD_DATA
 390

	)

466 
	#SSL_R_BAD_DATA_RETURNED_BY_CALLBACK
 106

	)

467 
	#SSL_R_BAD_DECOMPRESSION
 107

	)

468 
	#SSL_R_BAD_DH_VALUE
 102

	)

469 
	#SSL_R_BAD_DIGEST_LENGTH
 111

	)

470 
	#SSL_R_BAD_EARLY_DATA
 233

	)

471 
	#SSL_R_BAD_ECC_CERT
 304

	)

472 
	#SSL_R_BAD_ECPOINT
 306

	)

473 
	#SSL_R_BAD_EXTENSION
 110

	)

474 
	#SSL_R_BAD_HANDSHAKE_LENGTH
 332

	)

475 
	#SSL_R_BAD_HANDSHAKE_STATE
 236

	)

476 
	#SSL_R_BAD_HELLO_REQUEST
 105

	)

477 
	#SSL_R_BAD_HRR_VERSION
 263

	)

478 
	#SSL_R_BAD_KEY_SHARE
 108

	)

479 
	#SSL_R_BAD_KEY_UPDATE
 122

	)

480 
	#SSL_R_BAD_LEGACY_VERSION
 292

	)

481 
	#SSL_R_BAD_LENGTH
 271

	)

482 
	#SSL_R_BAD_PACKET
 240

	)

483 
	#SSL_R_BAD_PACKET_LENGTH
 115

	)

484 
	#SSL_R_BAD_PROTOCOL_VERSION_NUMBER
 116

	)

485 
	#SSL_R_BAD_PSK
 219

	)

486 
	#SSL_R_BAD_PSK_IDENTITY
 114

	)

487 
	#SSL_R_BAD_RECORD_TYPE
 443

	)

488 
	#SSL_R_BAD_RSA_ENCRYPT
 119

	)

489 
	#SSL_R_BAD_SIGNATURE
 123

	)

490 
	#SSL_R_BAD_SRP_A_LENGTH
 347

	)

491 
	#SSL_R_BAD_SRP_PARAMETERS
 371

	)

492 
	#SSL_R_BAD_SRTP_MKI_VALUE
 352

	)

493 
	#SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST
 353

	)

494 
	#SSL_R_BAD_SSL_FILETYPE
 124

	)

495 
	#SSL_R_BAD_VALUE
 384

	)

496 
	#SSL_R_BAD_WRITE_RETRY
 127

	)

497 
	#SSL_R_BINDER_DOES_NOT_VERIFY
 253

	)

498 
	#SSL_R_BIO_NOT_SET
 128

	)

499 
	#SSL_R_BLOCK_CIPHER_PAD_IS_WRONG
 129

	)

500 
	#SSL_R_BN_LIB
 130

	)

501 
	#SSL_R_CALLBACK_FAILED
 234

	)

502 
	#SSL_R_CANNOT_CHANGE_CIPHER
 109

	)

503 
	#SSL_R_CA_DN_LENGTH_MISMATCH
 131

	)

504 
	#SSL_R_CA_KEY_TOO_SMALL
 397

	)

505 
	#SSL_R_CA_MD_TOO_WEAK
 398

	)

506 
	#SSL_R_CCS_RECEIVED_EARLY
 133

	)

507 
	#SSL_R_CERTIFICATE_VERIFY_FAILED
 134

	)

508 
	#SSL_R_CERT_CB_ERROR
 377

	)

509 
	#SSL_R_CERT_LENGTH_MISMATCH
 135

	)

510 
	#SSL_R_CIPHERSUITE_DIGEST_HAS_CHANGED
 218

	)

511 
	#SSL_R_CIPHER_CODE_WRONG_LENGTH
 137

	)

512 
	#SSL_R_CIPHER_OR_HASH_UNAVAILABLE
 138

	)

513 
	#SSL_R_CLIENTHELLO_TLSEXT
 226

	)

514 
	#SSL_R_COMPRESSED_LENGTH_TOO_LONG
 140

	)

515 
	#SSL_R_COMPRESSION_DISABLED
 343

	)

516 
	#SSL_R_COMPRESSION_FAILURE
 141

	)

517 
	#SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE
 307

	)

518 
	#SSL_R_COMPRESSION_LIBRARY_ERROR
 142

	)

519 
	#SSL_R_CONNECTION_TYPE_NOT_SET
 144

	)

520 
	#SSL_R_CONTEXT_NOT_DANE_ENABLED
 167

	)

521 
	#SSL_R_COOKIE_GEN_CALLBACK_FAILURE
 400

	)

522 
	#SSL_R_COOKIE_MISMATCH
 308

	)

523 
	#SSL_R_CUSTOM_EXT_HANDLER_ALREADY_INSTALLED
 206

	)

524 
	#SSL_R_DANE_ALREADY_ENABLED
 172

	)

525 
	#SSL_R_DANE_CANNOT_OVERRIDE_MTYPE_FULL
 173

	)

526 
	#SSL_R_DANE_NOT_ENABLED
 175

	)

527 
	#SSL_R_DANE_TLSA_BAD_CERTIFICATE
 180

	)

528 
	#SSL_R_DANE_TLSA_BAD_CERTIFICATE_USAGE
 184

	)

529 
	#SSL_R_DANE_TLSA_BAD_DATA_LENGTH
 189

	)

530 
	#SSL_R_DANE_TLSA_BAD_DIGEST_LENGTH
 192

	)

531 
	#SSL_R_DANE_TLSA_BAD_MATCHING_TYPE
 200

	)

532 
	#SSL_R_DANE_TLSA_BAD_PUBLIC_KEY
 201

	)

533 
	#SSL_R_DANE_TLSA_BAD_SELECTOR
 202

	)

534 
	#SSL_R_DANE_TLSA_NULL_DATA
 203

	)

535 
	#SSL_R_DATA_BETWEEN_CCS_AND_FINISHED
 145

	)

536 
	#SSL_R_DATA_LENGTH_TOO_LONG
 146

	)

537 
	#SSL_R_DECRYPTION_FAILED
 147

	)

538 
	#SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC
 281

	)

539 
	#SSL_R_DH_KEY_TOO_SMALL
 394

	)

540 
	#SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG
 148

	)

541 
	#SSL_R_DIGEST_CHECK_FAILED
 149

	)

542 
	#SSL_R_DTLS_MESSAGE_TOO_BIG
 334

	)

543 
	#SSL_R_DUPLICATE_COMPRESSION_ID
 309

	)

544 
	#SSL_R_ECC_CERT_NOT_FOR_SIGNING
 318

	)

545 
	#SSL_R_ECDH_REQUIRED_FOR_SUITEB_MODE
 374

	)

546 
	#SSL_R_EE_KEY_TOO_SMALL
 399

	)

547 
	#SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST
 354

	)

548 
	#SSL_R_ENCRYPTED_LENGTH_TOO_LONG
 150

	)

549 
	#SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST
 151

	)

550 
	#SSL_R_ERROR_SETTING_TLSA_BASE_DOMAIN
 204

	)

551 
	#SSL_R_EXCEEDS_MAX_FRAGMENT_SIZE
 194

	)

552 
	#SSL_R_EXCESSIVE_MESSAGE_SIZE
 152

	)

553 
	#SSL_R_EXTENSION_NOT_RECEIVED
 279

	)

554 
	#SSL_R_EXTRA_DATA_IN_MESSAGE
 153

	)

555 
	#SSL_R_EXT_LENGTH_MISMATCH
 163

	)

556 
	#SSL_R_FAILED_TO_INIT_ASYNC
 405

	)

557 
	#SSL_R_FRAGMENTED_CLIENT_HELLO
 401

	)

558 
	#SSL_R_GOT_A_FIN_BEFORE_A_CCS
 154

	)

559 
	#SSL_R_HTTPS_PROXY_REQUEST
 155

	)

560 
	#SSL_R_HTTP_REQUEST
 156

	)

561 
	#SSL_R_ILLEGAL_POINT_COMPRESSION
 162

	)

562 
	#SSL_R_ILLEGAL_SUITEB_DIGEST
 380

	)

563 
	#SSL_R_INAPPROPRIATE_FALLBACK
 373

	)

564 
	#SSL_R_INCONSISTENT_COMPRESSION
 340

	)

565 
	#SSL_R_INCONSISTENT_EARLY_DATA_ALPN
 222

	)

566 
	#SSL_R_INCONSISTENT_EARLY_DATA_SNI
 231

	)

567 
	#SSL_R_INCONSISTENT_EXTMS
 104

	)

568 
	#SSL_R_INSUFFICIENT_SECURITY
 241

	)

569 
	#SSL_R_INVALID_ALERT
 205

	)

570 
	#SSL_R_INVALID_CCS_MESSAGE
 260

	)

571 
	#SSL_R_INVALID_CERTIFICATE_OR_ALG
 238

	)

572 
	#SSL_R_INVALID_COMMAND
 280

	)

573 
	#SSL_R_INVALID_COMPRESSION_ALGORITHM
 341

	)

574 
	#SSL_R_INVALID_CONFIG
 283

	)

575 
	#SSL_R_INVALID_CONFIGURATION_NAME
 113

	)

576 
	#SSL_R_INVALID_CONTEXT
 282

	)

577 
	#SSL_R_INVALID_CT_VALIDATION_TYPE
 212

	)

578 
	#SSL_R_INVALID_KEY_UPDATE_TYPE
 120

	)

579 
	#SSL_R_INVALID_MAX_EARLY_DATA
 174

	)

580 
	#SSL_R_INVALID_NULL_CMD_NAME
 385

	)

581 
	#SSL_R_INVALID_SEQUENCE_NUMBER
 402

	)

582 
	#SSL_R_INVALID_SERVERINFO_DATA
 388

	)

583 
	#SSL_R_INVALID_SESSION_ID
 999

	)

584 
	#SSL_R_INVALID_SRP_USERNAME
 357

	)

585 
	#SSL_R_INVALID_STATUS_RESPONSE
 328

	)

586 
	#SSL_R_INVALID_TICKET_KEYS_LENGTH
 325

	)

587 
	#SSL_R_LENGTH_MISMATCH
 159

	)

588 
	#SSL_R_LENGTH_TOO_LONG
 404

	)

589 
	#SSL_R_LENGTH_TOO_SHORT
 160

	)

590 
	#SSL_R_LIBRARY_BUG
 274

	)

591 
	#SSL_R_LIBRARY_HAS_NO_CIPHERS
 161

	)

592 
	#SSL_R_MISSING_DSA_SIGNING_CERT
 165

	)

593 
	#SSL_R_MISSING_ECDSA_SIGNING_CERT
 381

	)

594 
	#SSL_R_MISSING_FATAL
 256

	)

595 
	#SSL_R_MISSING_PARAMETERS
 290

	)

596 
	#SSL_R_MISSING_PSK_KEX_MODES_EXTENSION
 310

	)

597 
	#SSL_R_MISSING_RSA_CERTIFICATE
 168

	)

598 
	#SSL_R_MISSING_RSA_ENCRYPTING_CERT
 169

	)

599 
	#SSL_R_MISSING_RSA_SIGNING_CERT
 170

	)

600 
	#SSL_R_MISSING_SIGALGS_EXTENSION
 112

	)

601 
	#SSL_R_MISSING_SIGNING_CERT
 221

	)

602 
	#SSL_R_MISSING_SRP_PARAM
 358

	)

603 
	#SSL_R_MISSING_SUPPORTED_GROUPS_EXTENSION
 209

	)

604 
	#SSL_R_MISSING_TMP_DH_KEY
 171

	)

605 
	#SSL_R_MISSING_TMP_ECDH_KEY
 311

	)

606 
	#SSL_R_MIXED_HANDSHAKE_AND_NON_HANDSHAKE_DATA
 293

	)

607 
	#SSL_R_NOT_ON_RECORD_BOUNDARY
 182

	)

608 
	#SSL_R_NOT_REPLACING_CERTIFICATE
 289

	)

609 
	#SSL_R_NOT_SERVER
 284

	)

610 
	#SSL_R_NO_APPLICATION_PROTOCOL
 235

	)

611 
	#SSL_R_NO_CERTIFICATES_RETURNED
 176

	)

612 
	#SSL_R_NO_CERTIFICATE_ASSIGNED
 177

	)

613 
	#SSL_R_NO_CERTIFICATE_SET
 179

	)

614 
	#SSL_R_NO_CHANGE_FOLLOWING_HRR
 214

	)

615 
	#SSL_R_NO_CIPHERS_AVAILABLE
 181

	)

616 
	#SSL_R_NO_CIPHERS_SPECIFIED
 183

	)

617 
	#SSL_R_NO_CIPHER_MATCH
 185

	)

618 
	#SSL_R_NO_CLIENT_CERT_METHOD
 331

	)

619 
	#SSL_R_NO_COMPRESSION_SPECIFIED
 187

	)

620 
	#SSL_R_NO_COOKIE_CALLBACK_SET
 287

	)

621 
	#SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER
 330

	)

622 
	#SSL_R_NO_METHOD_SPECIFIED
 188

	)

623 
	#SSL_R_NO_PEM_EXTENSIONS
 389

	)

624 
	#SSL_R_NO_PRIVATE_KEY_ASSIGNED
 190

	)

625 
	#SSL_R_NO_PROTOCOLS_AVAILABLE
 191

	)

626 
	#SSL_R_NO_RENEGOTIATION
 339

	)

627 
	#SSL_R_NO_REQUIRED_DIGEST
 324

	)

628 
	#SSL_R_NO_SHARED_CIPHER
 193

	)

629 
	#SSL_R_NO_SHARED_GROUPS
 410

	)

630 
	#SSL_R_NO_SHARED_SIGNATURE_ALGORITHMS
 376

	)

631 
	#SSL_R_NO_SRTP_PROFILES
 359

	)

632 
	#SSL_R_NO_SUITABLE_KEY_SHARE
 101

	)

633 
	#SSL_R_NO_SUITABLE_SIGNATURE_ALGORITHM
 118

	)

634 
	#SSL_R_NO_VALID_SCTS
 216

	)

635 
	#SSL_R_NO_VERIFY_COOKIE_CALLBACK
 403

	)

636 
	#SSL_R_NULL_SSL_CTX
 195

	)

637 
	#SSL_R_NULL_SSL_METHOD_PASSED
 196

	)

638 
	#SSL_R_OCSP_CALLBACK_FAILURE
 294

	)

639 
	#SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED
 197

	)

640 
	#SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED
 344

	)

641 
	#SSL_R_OVERFLOW_ERROR
 237

	)

642 
	#SSL_R_PACKET_LENGTH_TOO_LONG
 198

	)

643 
	#SSL_R_PARSE_TLSEXT
 227

	)

644 
	#SSL_R_PATH_TOO_LONG
 270

	)

645 
	#SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE
 199

	)

646 
	#SSL_R_PEM_NAME_BAD_PREFIX
 391

	)

647 
	#SSL_R_PEM_NAME_TOO_SHORT
 392

	)

648 
	#SSL_R_PIPELINE_FAILURE
 406

	)

649 
	#SSL_R_POST_HANDSHAKE_AUTH_ENCODING_ERR
 278

	)

650 
	#SSL_R_PRIVATE_KEY_MISMATCH
 288

	)

651 
	#SSL_R_PROTOCOL_IS_SHUTDOWN
 207

	)

652 
	#SSL_R_PSK_IDENTITY_NOT_FOUND
 223

	)

653 
	#SSL_R_PSK_NO_CLIENT_CB
 224

	)

654 
	#SSL_R_PSK_NO_SERVER_CB
 225

	)

655 
	#SSL_R_READ_BIO_NOT_SET
 211

	)

656 
	#SSL_R_READ_TIMEOUT_EXPIRED
 312

	)

657 
	#SSL_R_RECORD_LENGTH_MISMATCH
 213

	)

658 
	#SSL_R_RECORD_TOO_SMALL
 298

	)

659 
	#SSL_R_RENEGOTIATE_EXT_TOO_LONG
 335

	)

660 
	#SSL_R_RENEGOTIATION_ENCODING_ERR
 336

	)

661 
	#SSL_R_RENEGOTIATION_MISMATCH
 337

	)

662 
	#SSL_R_REQUEST_PENDING
 285

	)

663 
	#SSL_R_REQUEST_SENT
 286

	)

664 
	#SSL_R_REQUIRED_CIPHER_MISSING
 215

	)

665 
	#SSL_R_REQUIRED_COMPRESSION_ALGORITHM_MISSING
 342

	)

666 
	#SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING
 345

	)

667 
	#SSL_R_SCT_VERIFICATION_FAILED
 208

	)

668 
	#SSL_R_SERVERHELLO_TLSEXT
 275

	)

669 
	#SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED
 277

	)

670 
	#SSL_R_SHUTDOWN_WHILE_IN_INIT
 407

	)

671 
	#SSL_R_SIGNATURE_ALGORITHMS_ERROR
 360

	)

672 
	#SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE
 220

	)

673 
	#SSL_R_SRP_A_CALC
 361

	)

674 
	#SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES
 362

	)

675 
	#SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG
 363

	)

676 
	#SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE
 364

	)

677 
	#SSL_R_SSL3_EXT_INVALID_MAX_FRAGMENT_LENGTH
 232

	)

678 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME
 319

	)

679 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE
 320

	)

680 
	#SSL_R_SSL3_SESSION_ID_TOO_LONG
 300

	)

681 
	#SSL_R_SSLV3_ALERT_BAD_CERTIFICATE
 1042

	)

682 
	#SSL_R_SSLV3_ALERT_BAD_RECORD_MAC
 1020

	)

683 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED
 1045

	)

684 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED
 1044

	)

685 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN
 1046

	)

686 
	#SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE
 1030

	)

687 
	#SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE
 1040

	)

688 
	#SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER
 1047

	)

689 
	#SSL_R_SSLV3_ALERT_NO_CERTIFICATE
 1041

	)

690 
	#SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE
 1010

	)

691 
	#SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE
 1043

	)

692 
	#SSL_R_SSL_COMMAND_SECTION_EMPTY
 117

	)

693 
	#SSL_R_SSL_COMMAND_SECTION_NOT_FOUND
 125

	)

694 
	#SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION
 228

	)

695 
	#SSL_R_SSL_HANDSHAKE_FAILURE
 229

	)

696 
	#SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS
 230

	)

697 
	#SSL_R_SSL_NEGATIVE_LENGTH
 372

	)

698 
	#SSL_R_SSL_SECTION_EMPTY
 126

	)

699 
	#SSL_R_SSL_SECTION_NOT_FOUND
 136

	)

700 
	#SSL_R_SSL_SESSION_ID_CALLBACK_FAILED
 301

	)

701 
	#SSL_R_SSL_SESSION_ID_CONFLICT
 302

	)

702 
	#SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG
 273

	)

703 
	#SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH
 303

	)

704 
	#SSL_R_SSL_SESSION_ID_TOO_LONG
 408

	)

705 
	#SSL_R_SSL_SESSION_VERSION_MISMATCH
 210

	)

706 
	#SSL_R_STILL_IN_INIT
 121

	)

707 
	#SSL_R_TLSV13_ALERT_CERTIFICATE_REQUIRED
 1116

	)

708 
	#SSL_R_TLSV13_ALERT_MISSING_EXTENSION
 1109

	)

709 
	#SSL_R_TLSV1_ALERT_ACCESS_DENIED
 1049

	)

710 
	#SSL_R_TLSV1_ALERT_DECODE_ERROR
 1050

	)

711 
	#SSL_R_TLSV1_ALERT_DECRYPTION_FAILED
 1021

	)

712 
	#SSL_R_TLSV1_ALERT_DECRYPT_ERROR
 1051

	)

713 
	#SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION
 1060

	)

714 
	#SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK
 1086

	)

715 
	#SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY
 1071

	)

716 
	#SSL_R_TLSV1_ALERT_INTERNAL_ERROR
 1080

	)

717 
	#SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
 1100

	)

718 
	#SSL_R_TLSV1_ALERT_PROTOCOL_VERSION
 1070

	)

719 
	#SSL_R_TLSV1_ALERT_RECORD_OVERFLOW
 1022

	)

720 
	#SSL_R_TLSV1_ALERT_UNKNOWN_CA
 1048

	)

721 
	#SSL_R_TLSV1_ALERT_USER_CANCELLED
 1090

	)

722 
	#SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE
 1114

	)

723 
	#SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE
 1113

	)

724 
	#SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE
 1111

	)

725 
	#SSL_R_TLSV1_UNRECOGNIZED_NAME
 1112

	)

726 
	#SSL_R_TLSV1_UNSUPPORTED_EXTENSION
 1110

	)

727 
	#SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT
 365

	)

728 
	#SSL_R_TLS_HEARTBEAT_PENDING
 366

	)

729 
	#SSL_R_TLS_ILLEGAL_EXPORTER_LABEL
 367

	)

730 
	#SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST
 157

	)

731 
	#SSL_R_TOO_MANY_KEY_UPDATES
 132

	)

732 
	#SSL_R_TOO_MANY_WARN_ALERTS
 409

	)

733 
	#SSL_R_TOO_MUCH_EARLY_DATA
 164

	)

734 
	#SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS
 314

	)

735 
	#SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS
 239

	)

736 
	#SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES
 242

	)

737 
	#SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES
 243

	)

738 
	#SSL_R_UNEXPECTED_CCS_MESSAGE
 262

	)

739 
	#SSL_R_UNEXPECTED_END_OF_EARLY_DATA
 178

	)

740 
	#SSL_R_UNEXPECTED_MESSAGE
 244

	)

741 
	#SSL_R_UNEXPECTED_RECORD
 245

	)

742 
	#SSL_R_UNINITIALIZED
 276

	)

743 
	#SSL_R_UNKNOWN_ALERT_TYPE
 246

	)

744 
	#SSL_R_UNKNOWN_CERTIFICATE_TYPE
 247

	)

745 
	#SSL_R_UNKNOWN_CIPHER_RETURNED
 248

	)

746 
	#SSL_R_UNKNOWN_CIPHER_TYPE
 249

	)

747 
	#SSL_R_UNKNOWN_CMD_NAME
 386

	)

748 
	#SSL_R_UNKNOWN_COMMAND
 139

	)

749 
	#SSL_R_UNKNOWN_DIGEST
 368

	)

750 
	#SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE
 250

	)

751 
	#SSL_R_UNKNOWN_PKEY_TYPE
 251

	)

752 
	#SSL_R_UNKNOWN_PROTOCOL
 252

	)

753 
	#SSL_R_UNKNOWN_SSL_VERSION
 254

	)

754 
	#SSL_R_UNKNOWN_STATE
 255

	)

755 
	#SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED
 338

	)

756 
	#SSL_R_UNSOLICITED_EXTENSION
 217

	)

757 
	#SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM
 257

	)

758 
	#SSL_R_UNSUPPORTED_ELLIPTIC_CURVE
 315

	)

759 
	#SSL_R_UNSUPPORTED_PROTOCOL
 258

	)

760 
	#SSL_R_UNSUPPORTED_SSL_VERSION
 259

	)

761 
	#SSL_R_UNSUPPORTED_STATUS_TYPE
 329

	)

762 
	#SSL_R_USE_SRTP_NOT_NEGOTIATED
 369

	)

763 
	#SSL_R_VERSION_TOO_HIGH
 166

	)

764 
	#SSL_R_VERSION_TOO_LOW
 396

	)

765 
	#SSL_R_WRONG_CERTIFICATE_TYPE
 383

	)

766 
	#SSL_R_WRONG_CIPHER_RETURNED
 261

	)

767 
	#SSL_R_WRONG_CURVE
 378

	)

768 
	#SSL_R_WRONG_SIGNATURE_LENGTH
 264

	)

769 
	#SSL_R_WRONG_SIGNATURE_SIZE
 265

	)

770 
	#SSL_R_WRONG_SIGNATURE_TYPE
 370

	)

771 
	#SSL_R_WRONG_SSL_VERSION
 266

	)

772 
	#SSL_R_WRONG_VERSION_NUMBER
 267

	)

773 
	#SSL_R_X509_LIB
 268

	)

774 
	#SSL_R_X509_VERIFICATION_SETUP_PROBLEMS
 269

	)

	@/usr/include/openssl/stack.h

10 #i‚de‡
HEADER_STACK_H


11 
	#HEADER_STACK_H


	)

13 #ifde‡ 
__˝lu•lus


17 
°ack_°
 
	tOPENSSL_STACK
;

19 (*
OPENSSL_sk_compfunc
)(const *, const *);

20 (*
OPENSSL_sk_‰ìfunc
)(*);

21 *(*
	tOPENSSL_sk_c›yfunc
)(const *);

23 
OPENSSL_sk_num
(c⁄° 
OPENSSL_STACK
 *);

24 *
OPENSSL_sk_vÆue
(c⁄° 
OPENSSL_STACK
 *, );

26 *
OPENSSL_sk_£t
(
OPENSSL_STACK
 *
°
, 
i
, c⁄° *
d©a
);

28 
OPENSSL_STACK
 *
OPENSSL_sk_√w
(
OPENSSL_sk_compfunc
 
cmp
);

29 
OPENSSL_STACK
 *
OPENSSL_sk_√w_nuŒ
();

30 
OPENSSL_STACK
 *
OPENSSL_sk_√w_ª£rve
(
OPENSSL_sk_compfunc
 
c
, 
n
);

31 
OPENSSL_sk_ª£rve
(
OPENSSL_STACK
 *
°
, 
n
);

32 
OPENSSL_sk_‰ì
(
OPENSSL_STACK
 *);

33 
OPENSSL_sk_p›_‰ì
(
OPENSSL_STACK
 *
°
, (*
func
) (*));

34 
OPENSSL_STACK
 *
OPENSSL_sk_dìp_c›y
(const OPENSSL_STACK *,

35 
OPENSSL_sk_c›yfunc
 
c
,

36 
OPENSSL_sk_‰ìfunc
 
f
);

37 
OPENSSL_sk_ö£π
(
OPENSSL_STACK
 *
sk
, c⁄° *
d©a
, 
whîe
);

38 *
OPENSSL_sk_dñëe
(
OPENSSL_STACK
 *
°
, 
loc
);

39 *
OPENSSL_sk_dñëe_±r
(
OPENSSL_STACK
 *
°
, c⁄° *
p
);

40 
OPENSSL_sk_föd
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

41 
OPENSSL_sk_föd_ex
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

42 
OPENSSL_sk_push
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

43 
OPENSSL_sk_unshi·
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

44 *
OPENSSL_sk_shi·
(
OPENSSL_STACK
 *
°
);

45 *
OPENSSL_sk_p›
(
OPENSSL_STACK
 *
°
);

46 
OPENSSL_sk_zîo
(
OPENSSL_STACK
 *
°
);

47 
OPENSSL_sk_compfunc
 
OPENSSL_sk_£t_cmp_func
(
OPENSSL_STACK
 *
sk
,

48 
OPENSSL_sk_compfunc
 
cmp
);

49 
OPENSSL_STACK
 *
OPENSSL_sk_dup
(c⁄° OPENSSL_STACK *
°
);

50 
OPENSSL_sk_s‹t
(
OPENSSL_STACK
 *
°
);

51 
OPENSSL_sk_is_s‹ãd
(c⁄° 
OPENSSL_STACK
 *
°
);

53 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

54 
	#_STACK
 
OPENSSL_STACK


	)

55 
	#sk_num
 
OPENSSL_sk_num


	)

56 
	#sk_vÆue
 
OPENSSL_sk_vÆue


	)

57 
	#sk_£t
 
OPENSSL_sk_£t


	)

58 
	#sk_√w
 
OPENSSL_sk_√w


	)

59 
	#sk_√w_nuŒ
 
OPENSSL_sk_√w_nuŒ


	)

60 
	#sk_‰ì
 
OPENSSL_sk_‰ì


	)

61 
	#sk_p›_‰ì
 
OPENSSL_sk_p›_‰ì


	)

62 
	#sk_dìp_c›y
 
OPENSSL_sk_dìp_c›y


	)

63 
	#sk_ö£π
 
OPENSSL_sk_ö£π


	)

64 
	#sk_dñëe
 
OPENSSL_sk_dñëe


	)

65 
	#sk_dñëe_±r
 
OPENSSL_sk_dñëe_±r


	)

66 
	#sk_föd
 
OPENSSL_sk_föd


	)

67 
	#sk_föd_ex
 
OPENSSL_sk_föd_ex


	)

68 
	#sk_push
 
OPENSSL_sk_push


	)

69 
	#sk_unshi·
 
OPENSSL_sk_unshi·


	)

70 
	#sk_shi·
 
OPENSSL_sk_shi·


	)

71 
	#sk_p›
 
OPENSSL_sk_p›


	)

72 
	#sk_zîo
 
OPENSSL_sk_zîo


	)

73 
	#sk_£t_cmp_func
 
OPENSSL_sk_£t_cmp_func


	)

74 
	#sk_dup
 
OPENSSL_sk_dup


	)

75 
	#sk_s‹t
 
OPENSSL_sk_s‹t


	)

76 
	#sk_is_s‹ãd
 
OPENSSL_sk_is_s‹ãd


	)

79 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/symhacks.h

10 #i‚de‡
HEADER_SYMHACKS_H


11 
	#HEADER_SYMHACKS_H


	)

13 
	~<›ís¶/e_os2.h
>

16 #i‡
deföed
(
OPENSSL_SYS_VMS
)

17 #unde‡
ERR_lﬂd_CRYPTO_°rögs


18 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

19 #unde‡
OCSP_¸lID_√w


20 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

22 #unde‡
d2i_ECPARAMETERS


23 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

24 #unde‡
i2d_ECPARAMETERS


25 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

26 #unde‡
d2i_ECPKPARAMETERS


27 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

28 #unde‡
i2d_ECPKPARAMETERS


29 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

32 #unde‡
cms_D©a_¸óã


33 
	#cms_D©a_¸óã
 
¥iv_cms_D©a_¸óã


	)

	@/usr/include/openssl/uierr.h

11 #i‚de‡
HEADER_UIERR_H


12 
	#HEADER_UIERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_UI_°rögs
();

26 
	#UI_F_CLOSE_CONSOLE
 115

	)

27 
	#UI_F_ECHO_CONSOLE
 116

	)

28 
	#UI_F_GENERAL_ALLOCATE_BOOLEAN
 108

	)

29 
	#UI_F_GENERAL_ALLOCATE_PROMPT
 109

	)

30 
	#UI_F_NOECHO_CONSOLE
 117

	)

31 
	#UI_F_OPEN_CONSOLE
 114

	)

32 
	#UI_F_UI_CONSTRUCT_PROMPT
 121

	)

33 
	#UI_F_UI_CREATE_METHOD
 112

	)

34 
	#UI_F_UI_CTRL
 111

	)

35 
	#UI_F_UI_DUP_ERROR_STRING
 101

	)

36 
	#UI_F_UI_DUP_INFO_STRING
 102

	)

37 
	#UI_F_UI_DUP_INPUT_BOOLEAN
 110

	)

38 
	#UI_F_UI_DUP_INPUT_STRING
 103

	)

39 
	#UI_F_UI_DUP_USER_DATA
 118

	)

40 
	#UI_F_UI_DUP_VERIFY_STRING
 106

	)

41 
	#UI_F_UI_GET0_RESULT
 107

	)

42 
	#UI_F_UI_GET_RESULT_LENGTH
 119

	)

43 
	#UI_F_UI_NEW_METHOD
 104

	)

44 
	#UI_F_UI_PROCESS
 113

	)

45 
	#UI_F_UI_SET_RESULT
 105

	)

46 
	#UI_F_UI_SET_RESULT_EX
 120

	)

51 
	#UI_R_COMMON_OK_AND_CANCEL_CHARACTERS
 104

	)

52 
	#UI_R_INDEX_TOO_LARGE
 102

	)

53 
	#UI_R_INDEX_TOO_SMALL
 103

	)

54 
	#UI_R_NO_RESULT_BUFFER
 105

	)

55 
	#UI_R_PROCESSING_ERROR
 107

	)

56 
	#UI_R_RESULT_TOO_LARGE
 100

	)

57 
	#UI_R_RESULT_TOO_SMALL
 101

	)

58 
	#UI_R_SYSASSIGN_ERROR
 109

	)

59 
	#UI_R_SYSDASSGN_ERROR
 110

	)

60 
	#UI_R_SYSQIOW_ERROR
 111

	)

61 
	#UI_R_UNKNOWN_CONTROL_COMMAND
 106

	)

62 
	#UI_R_UNKNOWN_TTYGET_ERRNO_VALUE
 108

	)

63 
	#UI_R_USER_DATA_DUPLICATION_UNSUPPORTED
 112

	)

	@/usr/include/openssl/x509.h

11 #i‚de‡
HEADER_X509_H


12 
	#HEADER_X509_H


	)

14 
	~<›ís¶/e_os2.h
>

15 
	~<›ís¶/os¶_typ.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/buf„r.h
>

18 
	~<›ís¶/evp.h
>

19 
	~<›ís¶/bio.h
>

20 
	~<›ís¶/a¢1.h
>

21 
	~<›ís¶/ß„°ack.h
>

22 
	~<›ís¶/ec.h
>

24 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

25 
	~<›ís¶/rß.h
>

26 
	~<›ís¶/dß.h
>

27 
	~<›ís¶/dh.h
>

30 
	~<›ís¶/sha.h
>

31 
	~<›ís¶/x509îr.h
>

33 #ifde‡ 
__˝lu•lus


40 
	#X509_SIG_INFO_VALID
 0x1

	)

42 
	#X509_SIG_INFO_TLS
 0x2

	)

44 
	#X509_FILETYPE_PEM
 1

	)

45 
	#X509_FILETYPE_ASN1
 2

	)

46 
	#X509_FILETYPE_DEFAULT
 3

	)

48 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

49 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

50 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

51 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

52 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

53 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

54 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

55 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

56 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

57 
	#X509v3_KU_UNDEF
 0xffff

	)

59 
	sX509_Æg‹_°
 {

60 
ASN1_OBJECT
 *
Æg‹ôhm
;

61 
ASN1_TYPE
 *
∑ømëî
;

64 
STACK_OF
(
	tX509_ALGOR
Ë
	tX509_ALGORS
;

66 
	sX509_vÆ_°
 {

67 
ASN1_TIME
 *
nŸBef‹e
;

68 
ASN1_TIME
 *
nŸA·î
;

69 } 
	tX509_VAL
;

71 
X509_sig_°
 
	tX509_SIG
;

73 
X509_«me_íåy_°
 
	tX509_NAME_ENTRY
;

75 
DEFINE_STACK_OF
(
X509_NAME_ENTRY
)

77 
DEFINE_STACK_OF
(
X509_NAME
)

79 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

80 
	#X509_EX_V_INIT
 0x0001

	)

81 
X509_exãnsi⁄_°
 
	tX509_EXTENSION
;

83 
STACK_OF
(
	tX509_EXTENSION
Ë
	tX509_EXTENSIONS
;

85 
DEFINE_STACK_OF
(
X509_EXTENSION
)

87 
x509_©åibuãs_°
 
	tX509_ATTRIBUTE
;

89 
DEFINE_STACK_OF
(
X509_ATTRIBUTE
)

91 
X509_ªq_öfo_°
 
	tX509_REQ_INFO
;

93 
X509_ªq_°
 
	tX509_REQ
;

95 
x509_˚π_aux_°
 
	tX509_CERT_AUX
;

97 
x509_cöf_°
 
	tX509_CINF
;

99 
DEFINE_STACK_OF
(
X509
)

103 
	sx509_åu°_°
 {

104 
åu°
;

105 
Êags
;

106 (*
check_åu°
Ë(
x509_åu°_°
 *, 
X509
 *, );

107 *
«me
;

108 
¨g1
;

109 *
¨g2
;

110 } 
	tX509_TRUST
;

112 
DEFINE_STACK_OF
(
X509_TRUST
)

116 
	#X509_TRUST_DEFAULT
 0

	)

118 
	#X509_TRUST_COMPAT
 1

	)

119 
	#X509_TRUST_SSL_CLIENT
 2

	)

120 
	#X509_TRUST_SSL_SERVER
 3

	)

121 
	#X509_TRUST_EMAIL
 4

	)

122 
	#X509_TRUST_OBJECT_SIGN
 5

	)

123 
	#X509_TRUST_OCSP_SIGN
 6

	)

124 
	#X509_TRUST_OCSP_REQUEST
 7

	)

125 
	#X509_TRUST_TSA
 8

	)

128 
	#X509_TRUST_MIN
 1

	)

129 
	#X509_TRUST_MAX
 8

	)

132 
	#X509_TRUST_DYNAMIC
 (1U << 0)

	)

133 
	#X509_TRUST_DYNAMIC_NAME
 (1U << 1)

	)

135 
	#X509_TRUST_NO_SS_COMPAT
 (1U << 2)

	)

137 
	#X509_TRUST_DO_SS_COMPAT
 (1U << 3)

	)

139 
	#X509_TRUST_OK_ANY_EKU
 (1U << 4)

	)

143 
	#X509_TRUST_TRUSTED
 1

	)

144 
	#X509_TRUST_REJECTED
 2

	)

145 
	#X509_TRUST_UNTRUSTED
 3

	)

149 
	#X509_FLAG_COMPAT
 0

	)

150 
	#X509_FLAG_NO_HEADER
 1L

	)

151 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

152 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

153 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

154 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

155 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

156 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

157 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

158 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

159 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

160 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

161 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

162 
	#X509_FLAG_NO_IDS
 (1L << 12)

	)

168 
	#XN_FLAG_SEP_MASK
 (0x‡<< 16)

	)

170 
	#XN_FLAG_COMPAT
 0

	)

171 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16)

	)

172 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16)

	)

173 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16)

	)

174 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16)

	)

176 
	#XN_FLAG_DN_REV
 (1 << 20)

	)

180 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

182 
	#XN_FLAG_FN_SN
 0

	)

183 
	#XN_FLAG_FN_LN
 (1 << 21)

	)

184 
	#XN_FLAG_FN_OID
 (2 << 21)

	)

185 
	#XN_FLAG_FN_NONE
 (3 << 21)

	)

187 
	#XN_FLAG_SPC_EQ
 (1 << 23)

	)

194 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

196 
	#XN_FLAG_FN_ALIGN
 (1 << 25)

	)

201 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

202 
XN_FLAG_SEP_COMMA_PLUS
 | \

203 
XN_FLAG_DN_REV
 | \

204 
XN_FLAG_FN_SN
 | \

205 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

209 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

210 
ASN1_STRFLGS_ESC_QUOTE
 | \

211 
XN_FLAG_SEP_CPLUS_SPC
 | \

212 
XN_FLAG_SPC_EQ
 | \

213 
XN_FLAG_FN_SN
)

	)

217 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

218 
ASN1_STRFLGS_ESC_MSB
 | \

219 
XN_FLAG_SEP_MULTILINE
 | \

220 
XN_FLAG_SPC_EQ
 | \

221 
XN_FLAG_FN_LN
 | \

222 
XN_FLAG_FN_ALIGN
)

	)

224 
DEFINE_STACK_OF
(
X509_REVOKED
)

226 
X509_¸l_öfo_°
 
	tX509_CRL_INFO
;

228 
DEFINE_STACK_OF
(
X509_CRL
)

230 
	s¥iv©e_key_°
 {

231 
vîsi⁄
;

233 
X509_ALGOR
 *
íc_Æg‹
;

234 
ASN1_OCTET_STRING
 *
íc_pkey
;

236 
EVP_PKEY
 *
dec_pkey
;

238 
key_Àngth
;

239 *
key_d©a
;

240 
key_‰ì
;

242 
EVP_CIPHER_INFO
 
cùhî
;

243 } 
	tX509_PKEY
;

245 
	sX509_öfo_°
 {

246 
X509
 *
x509
;

247 
X509_CRL
 *
¸l
;

248 
X509_PKEY
 *
x_pkey
;

249 
EVP_CIPHER_INFO
 
íc_cùhî
;

250 
íc_Àn
;

251 *
íc_d©a
;

252 } 
	tX509_INFO
;

254 
DEFINE_STACK_OF
(
X509_INFO
)

260 
	sNësˇ≥_•kac_°
 {

261 
X509_PUBKEY
 *
pubkey
;

262 
ASN1_IA5STRING
 *
chÆÀnge
;

263 } 
	tNETSCAPE_SPKAC
;

265 
	sNësˇ≥_•ki_°
 {

266 
NETSCAPE_SPKAC
 *
•kac
;

267 
X509_ALGOR
 
sig_Æg‹
;

268 
ASN1_BIT_STRING
 *
sig«tuª
;

269 } 
	tNETSCAPE_SPKI
;

272 
	sNësˇ≥_˚πifiˇã_£quí˚
 {

273 
ASN1_OBJECT
 *
ty≥
;

274 
STACK_OF
(
X509
Ë*
˚πs
;

275 } 
	tNETSCAPE_CERT_SEQUENCE
;

286 
	sPBEPARAM_°
 {

287 
ASN1_OCTET_STRING
 *
ß…
;

288 
ASN1_INTEGER
 *
ôî
;

289 } 
	tPBEPARAM
;

293 
	sPBE2PARAM_°
 {

294 
X509_ALGOR
 *
keyfunc
;

295 
X509_ALGOR
 *
í¸y±i⁄
;

296 } 
	tPBE2PARAM
;

298 
	sPBKDF2PARAM_°
 {

300 
ASN1_TYPE
 *
ß…
;

301 
ASN1_INTEGER
 *
ôî
;

302 
ASN1_INTEGER
 *
keyÀngth
;

303 
X509_ALGOR
 *
¥f
;

304 } 
	tPBKDF2PARAM
;

306 #i‚de‡
OPENSSL_NO_SCRYPT


307 
	sSCRYPT_PARAMS_°
 {

308 
ASN1_OCTET_STRING
 *
ß…
;

309 
ASN1_INTEGER
 *
co°P¨amëî
;

310 
ASN1_INTEGER
 *
blockSize
;

311 
ASN1_INTEGER
 *
∑øŒñiz©i⁄P¨amëî
;

312 
ASN1_INTEGER
 *
keyLígth
;

313 } 
	tSCRYPT_PARAMS
;

316 #ifde‡ 
__˝lu•lus


320 
	~<›ís¶/x509_vfy.h
>

321 
	~<›ís¶/pkcs7.h
>

323 #ifde‡ 
__˝lu•lus


327 
	#X509_EXT_PACK_UNKNOWN
 1

	)

328 
	#X509_EXT_PACK_STRING
 2

	)

330 
	#X509_exåa˘_key
(
x
Ë
	`X509_gë_pubkey
(x)

	)

331 
	#X509_REQ_exåa˘_key
(
a
Ë
	`X509_REQ_gë_pubkey
◊)

	)

332 
	#X509_«me_cmp
(
a
,
b
Ë
	`X509_NAME_cmp
(◊),(b))

	)

334 
X509_CRL_£t_deÁu…_mëhod
(c⁄° 
X509_CRL_METHOD
 *
mëh
);

335 
X509_CRL_METHOD
 *
X509_CRL_METHOD_√w
((*
¸l_öô
Ë(
X509_CRL
 *
¸l
),

336 (*
¸l_‰ì
Ë(
X509_CRL
 *
¸l
),

337 (*
¸l_lookup
Ë(
X509_CRL
 *
¸l
,

338 
X509_REVOKED
 **
ªt
,

339 
ASN1_INTEGER
 *
£r
,

340 
X509_NAME
 *
issuî
),

341 (*
¸l_vîify
Ë(
X509_CRL
 *
¸l
,

342 
EVP_PKEY
 *
pk
));

343 
X509_CRL_METHOD_‰ì
(
X509_CRL_METHOD
 *
m
);

345 
X509_CRL_£t_mëh_d©a
(
X509_CRL
 *
¸l
, *
d©
);

346 *
X509_CRL_gë_mëh_d©a
(
X509_CRL
 *
¸l
);

348 c⁄° *
X509_vîify_˚π_îr‹_°rög
(
n
);

350 
X509_vîify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

352 
X509_REQ_vîify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

353 
X509_CRL_vîify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

354 
NETSCAPE_SPKI_vîify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

356 
NETSCAPE_SPKI
 *
NETSCAPE_SPKI_b64_decode
(c⁄° *
°r
, 
Àn
);

357 *
NETSCAPE_SPKI_b64_ícode
(
NETSCAPE_SPKI
 *
x
);

358 
EVP_PKEY
 *
NETSCAPE_SPKI_gë_pubkey
(
NETSCAPE_SPKI
 *
x
);

359 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

361 
NETSCAPE_SPKI_¥öt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

363 
X509_sig«tuª_dump
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
sig
, 
ödít
);

364 
X509_sig«tuª_¥öt
(
BIO
 *
bp
, c⁄° 
X509_ALGOR
 *
Æg
,

365 c⁄° 
ASN1_STRING
 *
sig
);

367 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

368 
X509_sign_˘x
(
X509
 *
x
, 
EVP_MD_CTX
 *
˘x
);

369 #i‚de‡
OPENSSL_NO_OCSP


370 
X509_hâp_nbio
(
OCSP_REQ_CTX
 *
r˘x
, 
X509
 **
p˚π
);

372 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

373 
X509_REQ_sign_˘x
(
X509_REQ
 *
x
, 
EVP_MD_CTX
 *
˘x
);

374 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

375 
X509_CRL_sign_˘x
(
X509_CRL
 *
x
, 
EVP_MD_CTX
 *
˘x
);

376 #i‚de‡
OPENSSL_NO_OCSP


377 
X509_CRL_hâp_nbio
(
OCSP_REQ_CTX
 *
r˘x
, 
X509_CRL
 **
p¸l
);

379 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

381 
X509_pubkey_dige°
(c⁄° 
X509
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

382 *
md
, *
Àn
);

383 
X509_dige°
(c⁄° 
X509
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

384 *
md
, *
Àn
);

385 
X509_CRL_dige°
(c⁄° 
X509_CRL
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

386 *
md
, *
Àn
);

387 
X509_REQ_dige°
(c⁄° 
X509_REQ
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

388 *
md
, *
Àn
);

389 
X509_NAME_dige°
(c⁄° 
X509_NAME
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

390 *
md
, *
Àn
);

392 #i‚de‡
OPENSSL_NO_STDIO


393 
X509
 *
d2i_X509_Â
(
FILE
 *
Â
, X509 **
x509
);

394 
i2d_X509_Â
(
FILE
 *
Â
, 
X509
 *
x509
);

395 
X509_CRL
 *
d2i_X509_CRL_Â
(
FILE
 *
Â
, X509_CRL **
¸l
);

396 
i2d_X509_CRL_Â
(
FILE
 *
Â
, 
X509_CRL
 *
¸l
);

397 
X509_REQ
 *
d2i_X509_REQ_Â
(
FILE
 *
Â
, X509_REQ **
ªq
);

398 
i2d_X509_REQ_Â
(
FILE
 *
Â
, 
X509_REQ
 *
ªq
);

399 #i‚de‡
OPENSSL_NO_RSA


400 
RSA
 *
d2i_RSAPriv©eKey_Â
(
FILE
 *
Â
, RSA **
rß
);

401 
i2d_RSAPriv©eKey_Â
(
FILE
 *
Â
, 
RSA
 *
rß
);

402 
RSA
 *
d2i_RSAPublicKey_Â
(
FILE
 *
Â
, RSA **
rß
);

403 
i2d_RSAPublicKey_Â
(
FILE
 *
Â
, 
RSA
 *
rß
);

404 
RSA
 *
d2i_RSA_PUBKEY_Â
(
FILE
 *
Â
, RSA **
rß
);

405 
i2d_RSA_PUBKEY_Â
(
FILE
 *
Â
, 
RSA
 *
rß
);

407 #i‚de‡
OPENSSL_NO_DSA


408 
DSA
 *
d2i_DSA_PUBKEY_Â
(
FILE
 *
Â
, DSA **
dß
);

409 
i2d_DSA_PUBKEY_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

410 
DSA
 *
d2i_DSAPriv©eKey_Â
(
FILE
 *
Â
, DSA **
dß
);

411 
i2d_DSAPriv©eKey_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

413 #i‚de‡
OPENSSL_NO_EC


414 
EC_KEY
 *
d2i_EC_PUBKEY_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

415 
i2d_EC_PUBKEY_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

416 
EC_KEY
 *
d2i_ECPriv©eKey_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

417 
i2d_ECPriv©eKey_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

419 
X509_SIG
 *
d2i_PKCS8_Â
(
FILE
 *
Â
, X509_SIG **
p8
);

420 
i2d_PKCS8_Â
(
FILE
 *
Â
, 
X509_SIG
 *
p8
);

421 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,

422 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

423 
i2d_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

424 
i2d_PKCS8Priv©eKeyInfo_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
key
);

425 
i2d_Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

426 
EVP_PKEY
 *
d2i_Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

427 
i2d_PUBKEY_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

428 
EVP_PKEY
 *
d2i_PUBKEY_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

431 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
, X509 **
x509
);

432 
i2d_X509_bio
(
BIO
 *
bp
, 
X509
 *
x509
);

433 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
, X509_CRL **
¸l
);

434 
i2d_X509_CRL_bio
(
BIO
 *
bp
, 
X509_CRL
 *
¸l
);

435 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
, X509_REQ **
ªq
);

436 
i2d_X509_REQ_bio
(
BIO
 *
bp
, 
X509_REQ
 *
ªq
);

437 #i‚de‡
OPENSSL_NO_RSA


438 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
, RSA **
rß
);

439 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
, 
RSA
 *
rß
);

440 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
, RSA **
rß
);

441 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
, 
RSA
 *
rß
);

442 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
, RSA **
rß
);

443 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
, 
RSA
 *
rß
);

445 #i‚de‡
OPENSSL_NO_DSA


446 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dß
);

447 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

448 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dß
);

449 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

451 #i‚de‡
OPENSSL_NO_EC


452 
EC_KEY
 *
d2i_EC_PUBKEY_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

453 
i2d_EC_PUBKEY_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

454 
EC_KEY
 *
d2i_ECPriv©eKey_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

455 
i2d_ECPriv©eKey_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

457 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
, X509_SIG **
p8
);

458 
i2d_PKCS8_bio
(
BIO
 *
bp
, 
X509_SIG
 *
p8
);

459 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

460 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

461 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

462 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
key
);

463 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

464 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

465 
i2d_PUBKEY_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

466 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

468 
X509
 *
X509_dup
(X509 *
x509
);

469 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_dup
(X509_ATTRIBUTE *
xa
);

470 
X509_EXTENSION
 *
X509_EXTENSION_dup
(X509_EXTENSION *
ex
);

471 
X509_CRL
 *
X509_CRL_dup
(X509_CRL *
¸l
);

472 
X509_REVOKED
 *
X509_REVOKED_dup
(X509_REVOKED *
ªv
);

473 
X509_REQ
 *
X509_REQ_dup
(X509_REQ *
ªq
);

474 
X509_ALGOR
 *
X509_ALGOR_dup
(X509_ALGOR *
xn
);

475 
X509_ALGOR_£t0
(
X509_ALGOR
 *
Æg
, 
ASN1_OBJECT
 *
aobj
, 
±y≥
,

476 *
pvÆ
);

477 
X509_ALGOR_gë0
(c⁄° 
ASN1_OBJECT
 **
∑obj
, *
µty≥
,

478 c⁄° **
µvÆ
, c⁄° 
X509_ALGOR
 *
Æg‹
);

479 
X509_ALGOR_£t_md
(
X509_ALGOR
 *
Æg
, c⁄° 
EVP_MD
 *
md
);

480 
X509_ALGOR_cmp
(c⁄° 
X509_ALGOR
 *
a
, c⁄° X509_ALGOR *
b
);

481 
X509_ALGOR_c›y
(
X509_ALGOR
 *
de°
, c⁄° X509_ALGOR *
§c
);

483 
X509_NAME
 *
X509_NAME_dup
(X509_NAME *
xn
);

484 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_dup
(X509_NAME_ENTRY *
√
);

486 
X509_cmp_time
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 *
t
);

487 
X509_cmp_cuºít_time
(c⁄° 
ASN1_TIME
 *
s
);

488 
ASN1_TIME
 *
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

489 
ASN1_TIME
 *
X509_time_adj_ex
(ASN1_TIME *
s
,

490 
off£t_day
, 
off£t_£c
, 
time_t
 *
t
);

491 
ASN1_TIME
 *
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

493 c⁄° *
X509_gë_deÁu…_˚π_¨ó
();

494 c⁄° *
X509_gë_deÁu…_˚π_dú
();

495 c⁄° *
X509_gë_deÁu…_˚π_fûe
();

496 c⁄° *
X509_gë_deÁu…_˚π_dú_ív
();

497 c⁄° *
X509_gë_deÁu…_˚π_fûe_ív
();

498 c⁄° *
X509_gë_deÁu…_¥iv©e_dú
();

500 
X509_REQ
 *
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

501 
X509
 *
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
, 
EVP_PKEY
 *
pkey
);

503 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

504 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_ALGORS
, X509_ALGORS, X509_ALGORS)

505 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

507 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

509 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

510 
EVP_PKEY
 *
X509_PUBKEY_gë0
(
X509_PUBKEY
 *
key
);

511 
EVP_PKEY
 *
X509_PUBKEY_gë
(
X509_PUBKEY
 *
key
);

512 
X509_gë_pubkey_∑ømëîs
(
EVP_PKEY
 *
pkey
, 
STACK_OF
(
X509
Ë*
chaö
);

513 
X509_gë_∑thÀn
(
X509
 *
x
);

514 
i2d_PUBKEY
(
EVP_PKEY
 *
a
, **
µ
);

515 
EVP_PKEY
 *
d2i_PUBKEY
(EVP_PKEY **
a
, c⁄° **
µ
, 
Àngth
);

516 #i‚de‡
OPENSSL_NO_RSA


517 
i2d_RSA_PUBKEY
(
RSA
 *
a
, **
µ
);

518 
RSA
 *
d2i_RSA_PUBKEY
(RSA **
a
, c⁄° **
µ
, 
Àngth
);

520 #i‚de‡
OPENSSL_NO_DSA


521 
i2d_DSA_PUBKEY
(
DSA
 *
a
, **
µ
);

522 
DSA
 *
d2i_DSA_PUBKEY
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

524 #i‚de‡
OPENSSL_NO_EC


525 
i2d_EC_PUBKEY
(
EC_KEY
 *
a
, **
µ
);

526 
EC_KEY
 *
d2i_EC_PUBKEY
(EC_KEY **
a
, c⁄° **
µ
, 
Àngth
);

529 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

530 
X509_SIG_gë0
(c⁄° 
X509_SIG
 *
sig
, c⁄° 
X509_ALGOR
 **
∑lg
,

531 c⁄° 
ASN1_OCTET_STRING
 **
pdige°
);

532 
X509_SIG_gëm
(
X509_SIG
 *
sig
, 
X509_ALGOR
 **
∑lg
,

533 
ASN1_OCTET_STRING
 **
pdige°
);

535 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

536 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

538 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

539 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã
(
nid
, 
©πy≥
, *
vÆue
);

541 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

542 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_EXTENSIONS
, X509_EXTENSIONS, X509_EXTENSIONS)

544 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

546 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

548 
X509_NAME_£t
(
X509_NAME
 **
xn
, X509_NAME *
«me
);

550 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

552 
DECLARE_ASN1_FUNCTIONS
(
X509
)

553 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

555 
	#X509_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

556 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_X509
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

557 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
¨g
);

558 *
X509_gë_ex_d©a
(
X509
 *
r
, 
idx
);

559 
i2d_X509_AUX
(
X509
 *
a
, **
µ
);

560 
X509
 *
d2i_X509_AUX
(X509 **
a
, c⁄° **
µ
, 
Àngth
);

562 
i2d_ª_X509_tbs
(
X509
 *
x
, **
µ
);

564 
X509_SIG_INFO_gë
(c⁄° 
X509_SIG_INFO
 *
sigöf
, *
mdnid
, *
pknid
,

565 *
£cbôs
, 
uöt32_t
 *
Êags
);

566 
X509_SIG_INFO_£t
(
X509_SIG_INFO
 *
sigöf
, 
mdnid
, 
pknid
,

567 
£cbôs
, 
uöt32_t
 
Êags
);

569 
X509_gë_sig«tuª_öfo
(
X509
 *
x
, *
mdnid
, *
pknid
, *
£cbôs
,

570 
uöt32_t
 *
Êags
);

572 
X509_gë0_sig«tuª
(c⁄° 
ASN1_BIT_STRING
 **
psig
,

573 c⁄° 
X509_ALGOR
 **
∑lg
, c⁄° 
X509
 *
x
);

574 
X509_gë_sig«tuª_nid
(c⁄° 
X509
 *
x
);

576 
X509_åu°ed
(c⁄° 
X509
 *
x
);

577 
X509_Æüs_£t1
(
X509
 *
x
, c⁄° *
«me
, 
Àn
);

578 
X509_keyid_£t1
(
X509
 *
x
, c⁄° *
id
, 
Àn
);

579 *
X509_Æüs_gë0
(
X509
 *
x
, *
Àn
);

580 *
X509_keyid_gë0
(
X509
 *
x
, *
Àn
);

581 (*
X509_TRUST_£t_deÁu…
((*
åu°
Ë(, 
X509
 *, ))) (, X509 *,

583 
X509_TRUST_£t
(*
t
, 
åu°
);

584 
X509_add1_åu°_obje˘
(
X509
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
);

585 
X509_add1_ªje˘_obje˘
(
X509
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
);

586 
X509_åu°_˛ór
(
X509
 *
x
);

587 
X509_ªje˘_˛ór
(
X509
 *
x
);

589 
STACK_OF
(
ASN1_OBJECT
Ë*
X509_gë0_åu°_obje˘s
(
X509
 *
x
);

590 
STACK_OF
(
ASN1_OBJECT
Ë*
X509_gë0_ªje˘_obje˘s
(
X509
 *
x
);

592 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

593 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

594 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

596 
X509_CRL_add0_ªvoked
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 *
ªv
);

597 
X509_CRL_gë0_by_£rül
(
X509_CRL
 *
¸l
,

598 
X509_REVOKED
 **
ªt
, 
ASN1_INTEGER
 *
£rül
);

599 
X509_CRL_gë0_by_˚π
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
, 
X509
 *
x
);

601 
X509_PKEY
 *
X509_PKEY_√w
();

602 
X509_PKEY_‰ì
(
X509_PKEY
 *
a
);

604 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

605 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

606 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

608 
X509_INFO
 *
X509_INFO_√w
();

609 
X509_INFO_‰ì
(
X509_INFO
 *
a
);

610 *
X509_NAME_⁄ñöe
(c⁄° 
X509_NAME
 *
a
, *
buf
, 
size
);

612 
ASN1_vîify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

613 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
, 
EVP_PKEY
 *
pkey
);

615 
ASN1_dige°
(
i2d_of_void
 *
i2d
, c⁄° 
EVP_MD
 *
ty≥
, *
d©a
,

616 *
md
, *
Àn
);

618 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

619 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

620 *
d©a
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

622 
ASN1_ôem_dige°
(c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
EVP_MD
 *
ty≥
, *
d©a
,

623 *
md
, *
Àn
);

625 
ASN1_ôem_vîify
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

626 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
, 
EVP_PKEY
 *
pkey
);

628 
ASN1_ôem_sign
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

629 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
,

630 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

631 
ASN1_ôem_sign_˘x
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

632 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

633 *
a¢
, 
EVP_MD_CTX
 *
˘x
);

635 
X509_gë_vîsi⁄
(c⁄° 
X509
 *
x
);

636 
X509_£t_vîsi⁄
(
X509
 *
x
, 
vîsi⁄
);

637 
X509_£t_£rülNumbî
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rül
);

638 
ASN1_INTEGER
 *
X509_gë_£rülNumbî
(
X509
 *
x
);

639 c⁄° 
ASN1_INTEGER
 *
X509_gë0_£rülNumbî
(c⁄° 
X509
 *
x
);

640 
X509_£t_issuî_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

641 
X509_NAME
 *
X509_gë_issuî_«me
(c⁄° 
X509
 *
a
);

642 
X509_£t_subje˘_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

643 
X509_NAME
 *
X509_gë_subje˘_«me
(c⁄° 
X509
 *
a
);

644 c⁄° 
ASN1_TIME
 * 
X509_gë0_nŸBef‹e
(c⁄° 
X509
 *
x
);

645 
ASN1_TIME
 *
X509_gëm_nŸBef‹e
(c⁄° 
X509
 *
x
);

646 
X509_£t1_nŸBef‹e
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

647 c⁄° 
ASN1_TIME
 *
X509_gë0_nŸA·î
(c⁄° 
X509
 *
x
);

648 
ASN1_TIME
 *
X509_gëm_nŸA·î
(c⁄° 
X509
 *
x
);

649 
X509_£t1_nŸA·î
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

650 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

651 
X509_up_ªf
(
X509
 *
x
);

652 
X509_gë_sig«tuª_ty≥
(c⁄° 
X509
 *
x
);

654 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

655 
	#X509_gë_nŸBef‹e
 
X509_gëm_nŸBef‹e


	)

656 
	#X509_gë_nŸA·î
 
X509_gëm_nŸA·î


	)

657 
	#X509_£t_nŸBef‹e
 
X509_£t1_nŸBef‹e


	)

658 
	#X509_£t_nŸA·î
 
X509_£t1_nŸA·î


	)

666 
X509_PUBKEY
 *
X509_gë_X509_PUBKEY
(c⁄° 
X509
 *
x
);

667 c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
X509_gë0_exãnsi⁄s
(c⁄° 
X509
 *
x
);

668 
X509_gë0_uids
(c⁄° 
X509
 *
x
, c⁄° 
ASN1_BIT_STRING
 **
piuid
,

669 c⁄° 
ASN1_BIT_STRING
 **
psuid
);

670 c⁄° 
X509_ALGOR
 *
X509_gë0_tbs_sigÆg
(c⁄° 
X509
 *
x
);

672 
EVP_PKEY
 *
X509_gë0_pubkey
(c⁄° 
X509
 *
x
);

673 
EVP_PKEY
 *
X509_gë_pubkey
(
X509
 *
x
);

674 
ASN1_BIT_STRING
 *
X509_gë0_pubkey_bô°r
(c⁄° 
X509
 *
x
);

675 
X509_˚πifiˇã_ty≥
(c⁄° 
X509
 *
x
, c⁄° 
EVP_PKEY
 *
pubkey
);

677 
X509_REQ_gë_vîsi⁄
(c⁄° 
X509_REQ
 *
ªq
);

678 
X509_REQ_£t_vîsi⁄
(
X509_REQ
 *
x
, 
vîsi⁄
);

679 
X509_NAME
 *
X509_REQ_gë_subje˘_«me
(c⁄° 
X509_REQ
 *
ªq
);

680 
X509_REQ_£t_subje˘_«me
(
X509_REQ
 *
ªq
, 
X509_NAME
 *
«me
);

681 
X509_REQ_gë0_sig«tuª
(c⁄° 
X509_REQ
 *
ªq
, c⁄° 
ASN1_BIT_STRING
 **
psig
,

682 c⁄° 
X509_ALGOR
 **
∑lg
);

683 
X509_REQ_£t0_sig«tuª
(
X509_REQ
 *
ªq
, 
ASN1_BIT_STRING
 *
psig
);

684 
X509_REQ_£t1_sig«tuª_Ægo
(
X509_REQ
 *
ªq
, 
X509_ALGOR
 *
∑lg
);

685 
X509_REQ_gë_sig«tuª_nid
(c⁄° 
X509_REQ
 *
ªq
);

686 
i2d_ª_X509_REQ_tbs
(
X509_REQ
 *
ªq
, **
µ
);

687 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

688 
EVP_PKEY
 *
X509_REQ_gë_pubkey
(
X509_REQ
 *
ªq
);

689 
EVP_PKEY
 *
X509_REQ_gë0_pubkey
(
X509_REQ
 *
ªq
);

690 
X509_PUBKEY
 *
X509_REQ_gë_X509_PUBKEY
(
X509_REQ
 *
ªq
);

691 
X509_REQ_exãnsi⁄_nid
(
nid
);

692 *
X509_REQ_gë_exãnsi⁄_nids
();

693 
X509_REQ_£t_exãnsi⁄_nids
(*
nids
);

694 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REQ_gë_exãnsi⁄s
(
X509_REQ
 *
ªq
);

695 
X509_REQ_add_exãnsi⁄s_nid
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

696 
nid
);

697 
X509_REQ_add_exãnsi⁄s
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
);

698 
X509_REQ_gë_©å_cou¡
(c⁄° 
X509_REQ
 *
ªq
);

699 
X509_REQ_gë_©å_by_NID
(c⁄° 
X509_REQ
 *
ªq
, 
nid
, 
œ°pos
);

700 
X509_REQ_gë_©å_by_OBJ
(c⁄° 
X509_REQ
 *
ªq
, c⁄° 
ASN1_OBJECT
 *
obj
,

701 
œ°pos
);

702 
X509_ATTRIBUTE
 *
X509_REQ_gë_©å
(c⁄° 
X509_REQ
 *
ªq
, 
loc
);

703 
X509_ATTRIBUTE
 *
X509_REQ_dñëe_©å
(
X509_REQ
 *
ªq
, 
loc
);

704 
X509_REQ_add1_©å
(
X509_REQ
 *
ªq
, 
X509_ATTRIBUTE
 *
©å
);

705 
X509_REQ_add1_©å_by_OBJ
(
X509_REQ
 *
ªq
,

706 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

707 c⁄° *
byãs
, 
Àn
);

708 
X509_REQ_add1_©å_by_NID
(
X509_REQ
 *
ªq
,

709 
nid
, 
ty≥
,

710 c⁄° *
byãs
, 
Àn
);

711 
X509_REQ_add1_©å_by_txt
(
X509_REQ
 *
ªq
,

712 c⁄° *
©å«me
, 
ty≥
,

713 c⁄° *
byãs
, 
Àn
);

715 
X509_CRL_£t_vîsi⁄
(
X509_CRL
 *
x
, 
vîsi⁄
);

716 
X509_CRL_£t_issuî_«me
(
X509_CRL
 *
x
, 
X509_NAME
 *
«me
);

717 
X509_CRL_£t1_œ°Upd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

718 
X509_CRL_£t1_√xtUpd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

719 
X509_CRL_s‹t
(
X509_CRL
 *
¸l
);

720 
X509_CRL_up_ªf
(
X509_CRL
 *
¸l
);

722 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

723 
	#X509_CRL_£t_œ°Upd©e
 
X509_CRL_£t1_œ°Upd©e


	)

724 
	#X509_CRL_£t_√xtUpd©e
 
X509_CRL_£t1_√xtUpd©e


	)

727 
X509_CRL_gë_vîsi⁄
(c⁄° 
X509_CRL
 *
¸l
);

728 c⁄° 
ASN1_TIME
 *
X509_CRL_gë0_œ°Upd©e
(c⁄° 
X509_CRL
 *
¸l
);

729 c⁄° 
ASN1_TIME
 *
X509_CRL_gë0_√xtUpd©e
(c⁄° 
X509_CRL
 *
¸l
);

730 
DEPRECATEDIN_1_1_0
(
ASN1_TIME
 *
X509_CRL_gë_œ°Upd©e
(
X509_CRL
 *
¸l
))

731 
DEPRECATEDIN_1_1_0
(
ASN1_TIME
 *
X509_CRL_gë_√xtUpd©e
(
X509_CRL
 *
¸l
))

732 
X509_NAME
 *
X509_CRL_gë_issuî
(c⁄° 
X509_CRL
 *
¸l
);

733 c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
X509_CRL_gë0_exãnsi⁄s
(c⁄° 
X509_CRL
 *
¸l
);

734 
STACK_OF
(
X509_REVOKED
Ë*
X509_CRL_gë_REVOKED
(
X509_CRL
 *
¸l
);

735 
X509_CRL_gë0_sig«tuª
(c⁄° 
X509_CRL
 *
¸l
, c⁄° 
ASN1_BIT_STRING
 **
psig
,

736 c⁄° 
X509_ALGOR
 **
∑lg
);

737 
X509_CRL_gë_sig«tuª_nid
(c⁄° 
X509_CRL
 *
¸l
);

738 
i2d_ª_X509_CRL_tbs
(
X509_CRL
 *
ªq
, **
µ
);

740 c⁄° 
ASN1_INTEGER
 *
X509_REVOKED_gë0_£rülNumbî
(c⁄° 
X509_REVOKED
 *
x
);

741 
X509_REVOKED_£t_£rülNumbî
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rül
);

742 c⁄° 
ASN1_TIME
 *
X509_REVOKED_gë0_ªvoˇti⁄D©e
(c⁄° 
X509_REVOKED
 *
x
);

743 
X509_REVOKED_£t_ªvoˇti⁄D©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

744 c⁄° 
STACK_OF
(
X509_EXTENSION
) *

745 
X509_REVOKED_gë0_exãnsi⁄s
(c⁄° 
X509_REVOKED
 *
r
);

747 
X509_CRL
 *
X509_CRL_diff
(X509_CRL *
ba£
, X509_CRL *
√wî
,

748 
EVP_PKEY
 *
skey
, c⁄° 
EVP_MD
 *
md
, 
Êags
);

750 
X509_REQ_check_¥iv©e_key
(
X509_REQ
 *
x509
, 
EVP_PKEY
 *
pkey
);

752 
X509_check_¥iv©e_key
(c⁄° 
X509
 *
x509
, c⁄° 
EVP_PKEY
 *
pkey
);

753 
X509_chaö_check_suôeb
(*
≥º‹_dïth
,

754 
X509
 *
x
, 
STACK_OF
(X509Ë*
chaö
,

755 
Êags
);

756 
X509_CRL_check_suôeb
(
X509_CRL
 *
¸l
, 
EVP_PKEY
 *
pk
, 
Êags
);

757 
STACK_OF
(
X509
Ë*
X509_chaö_up_ªf
(STACK_OF(X509Ë*
chaö
);

759 
X509_issuî_™d_£rül_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

760 
X509_issuî_™d_£rül_hash
(
X509
 *
a
);

762 
X509_issuî_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

763 
X509_issuî_«me_hash
(
X509
 *
a
);

765 
X509_subje˘_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

766 
X509_subje˘_«me_hash
(
X509
 *
x
);

768 #i‚de‡
OPENSSL_NO_MD5


769 
X509_issuî_«me_hash_ﬁd
(
X509
 *
a
);

770 
X509_subje˘_«me_hash_ﬁd
(
X509
 *
x
);

773 
X509_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

774 
X509_NAME_cmp
(c⁄° 
X509_NAME
 *
a
, c⁄° X509_NAME *
b
);

775 
X509_NAME_hash
(
X509_NAME
 *
x
);

776 
X509_NAME_hash_ﬁd
(
X509_NAME
 *
x
);

778 
X509_CRL_cmp
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

779 
X509_CRL_m©ch
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

780 
X509_aux_¥öt
(
BIO
 *
out
, 
X509
 *
x
, 
ödít
);

781 #i‚de‡
OPENSSL_NO_STDIO


782 
X509_¥öt_ex_Â
(
FILE
 *
bp
, 
X509
 *
x
, 
nmÊag
,

783 
cÊag
);

784 
X509_¥öt_Â
(
FILE
 *
bp
, 
X509
 *
x
);

785 
X509_CRL_¥öt_Â
(
FILE
 *
bp
, 
X509_CRL
 *
x
);

786 
X509_REQ_¥öt_Â
(
FILE
 *
bp
, 
X509_REQ
 *
ªq
);

787 
X509_NAME_¥öt_ex_Â
(
FILE
 *
Â
, c⁄° 
X509_NAME
 *
nm
, 
ödít
,

788 
Êags
);

791 
X509_NAME_¥öt
(
BIO
 *
bp
, c⁄° 
X509_NAME
 *
«me
, 
oba£
);

792 
X509_NAME_¥öt_ex
(
BIO
 *
out
, c⁄° 
X509_NAME
 *
nm
, 
ödít
,

793 
Êags
);

794 
X509_¥öt_ex
(
BIO
 *
bp
, 
X509
 *
x
, 
nmÊag
,

795 
cÊag
);

796 
X509_¥öt
(
BIO
 *
bp
, 
X509
 *
x
);

797 
X509_oc•id_¥öt
(
BIO
 *
bp
, 
X509
 *
x
);

798 
X509_CRL_¥öt_ex
(
BIO
 *
out
, 
X509_CRL
 *
x
, 
nmÊag
);

799 
X509_CRL_¥öt
(
BIO
 *
bp
, 
X509_CRL
 *
x
);

800 
X509_REQ_¥öt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmÊag
,

801 
cÊag
);

802 
X509_REQ_¥öt
(
BIO
 *
bp
, 
X509_REQ
 *
ªq
);

804 
X509_NAME_íåy_cou¡
(c⁄° 
X509_NAME
 *
«me
);

805 
X509_NAME_gë_ãxt_by_NID
(
X509_NAME
 *
«me
, 
nid
, *
buf
, 
Àn
);

806 
X509_NAME_gë_ãxt_by_OBJ
(
X509_NAME
 *
«me
, c⁄° 
ASN1_OBJECT
 *
obj
,

807 *
buf
, 
Àn
);

813 
X509_NAME_gë_ödex_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
œ°pos
);

814 
X509_NAME_gë_ödex_by_OBJ
(
X509_NAME
 *
«me
, c⁄° 
ASN1_OBJECT
 *
obj
,

815 
œ°pos
);

816 
X509_NAME_ENTRY
 *
X509_NAME_gë_íåy
(c⁄° 
X509_NAME
 *
«me
, 
loc
);

817 
X509_NAME_ENTRY
 *
X509_NAME_dñëe_íåy
(
X509_NAME
 *
«me
, 
loc
);

818 
X509_NAME_add_íåy
(
X509_NAME
 *
«me
, c⁄° 
X509_NAME_ENTRY
 *
√
,

819 
loc
, 
£t
);

820 
X509_NAME_add_íåy_by_OBJ
(
X509_NAME
 *
«me
, c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

821 c⁄° *
byãs
, 
Àn
, 
loc
,

822 
£t
);

823 
X509_NAME_add_íåy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

824 c⁄° *
byãs
, 
Àn
, 
loc
,

825 
£t
);

826 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_txt
(X509_NAME_ENTRY **
√
,

827 c⁄° *
fõld
, 
ty≥
,

828 c⁄° *
byãs
,

829 
Àn
);

830 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

831 
ty≥
,

832 c⁄° *
byãs
,

833 
Àn
);

834 
X509_NAME_add_íåy_by_txt
(
X509_NAME
 *
«me
, c⁄° *
fõld
, 
ty≥
,

835 c⁄° *
byãs
, 
Àn
, 
loc
,

836 
£t
);

837 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_OBJ
(X509_NAME_ENTRY **
√
,

838 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

839 c⁄° *
byãs
,

840 
Àn
);

841 
X509_NAME_ENTRY_£t_obje˘
(
X509_NAME_ENTRY
 *
√
, c⁄° 
ASN1_OBJECT
 *
obj
);

842 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

843 c⁄° *
byãs
, 
Àn
);

844 
ASN1_OBJECT
 *
X509_NAME_ENTRY_gë_obje˘
(c⁄° 
X509_NAME_ENTRY
 *
√
);

845 
ASN1_STRING
 * 
X509_NAME_ENTRY_gë_d©a
(c⁄° 
X509_NAME_ENTRY
 *
√
);

846 
X509_NAME_ENTRY_£t
(c⁄° 
X509_NAME_ENTRY
 *
√
);

848 
X509_NAME_gë0_dî
(
X509_NAME
 *
nm
, c⁄° **
pdî
,

849 
size_t
 *
pdîÀn
);

851 
X509v3_gë_ext_cou¡
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
);

852 
X509v3_gë_ext_by_NID
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

853 
nid
, 
œ°pos
);

854 
X509v3_gë_ext_by_OBJ
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

855 c⁄° 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

856 
X509v3_gë_ext_by_¸ôiˇl
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

857 
¸ô
, 
œ°pos
);

858 
X509_EXTENSION
 *
X509v3_gë_ext
(c⁄° 
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

859 
X509_EXTENSION
 *
X509v3_dñëe_ext
(
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

860 
STACK_OF
(
X509_EXTENSION
Ë*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONË**
x
,

861 
X509_EXTENSION
 *
ex
, 
loc
);

863 
X509_gë_ext_cou¡
(c⁄° 
X509
 *
x
);

864 
X509_gë_ext_by_NID
(c⁄° 
X509
 *
x
, 
nid
, 
œ°pos
);

865 
X509_gë_ext_by_OBJ
(c⁄° 
X509
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

866 
X509_gë_ext_by_¸ôiˇl
(c⁄° 
X509
 *
x
, 
¸ô
, 
œ°pos
);

867 
X509_EXTENSION
 *
X509_gë_ext
(c⁄° 
X509
 *
x
, 
loc
);

868 
X509_EXTENSION
 *
X509_dñëe_ext
(
X509
 *
x
, 
loc
);

869 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

870 *
X509_gë_ext_d2i
(c⁄° 
X509
 *
x
, 
nid
, *
¸ô
, *
idx
);

871 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

872 
Êags
);

874 
X509_CRL_gë_ext_cou¡
(c⁄° 
X509_CRL
 *
x
);

875 
X509_CRL_gë_ext_by_NID
(c⁄° 
X509_CRL
 *
x
, 
nid
, 
œ°pos
);

876 
X509_CRL_gë_ext_by_OBJ
(c⁄° 
X509_CRL
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

877 
œ°pos
);

878 
X509_CRL_gë_ext_by_¸ôiˇl
(c⁄° 
X509_CRL
 *
x
, 
¸ô
, 
œ°pos
);

879 
X509_EXTENSION
 *
X509_CRL_gë_ext
(c⁄° 
X509_CRL
 *
x
, 
loc
);

880 
X509_EXTENSION
 *
X509_CRL_dñëe_ext
(
X509_CRL
 *
x
, 
loc
);

881 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

882 *
X509_CRL_gë_ext_d2i
(c⁄° 
X509_CRL
 *
x
, 
nid
, *
¸ô
, *
idx
);

883 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

884 
Êags
);

886 
X509_REVOKED_gë_ext_cou¡
(c⁄° 
X509_REVOKED
 *
x
);

887 
X509_REVOKED_gë_ext_by_NID
(c⁄° 
X509_REVOKED
 *
x
, 
nid
, 
œ°pos
);

888 
X509_REVOKED_gë_ext_by_OBJ
(c⁄° 
X509_REVOKED
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

889 
œ°pos
);

890 
X509_REVOKED_gë_ext_by_¸ôiˇl
(c⁄° 
X509_REVOKED
 *
x
, 
¸ô
,

891 
œ°pos
);

892 
X509_EXTENSION
 *
X509_REVOKED_gë_ext
(c⁄° 
X509_REVOKED
 *
x
, 
loc
);

893 
X509_EXTENSION
 *
X509_REVOKED_dñëe_ext
(
X509_REVOKED
 *
x
, 
loc
);

894 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

895 *
X509_REVOKED_gë_ext_d2i
(c⁄° 
X509_REVOKED
 *
x
, 
nid
, *
¸ô
,

896 *
idx
);

897 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

898 
Êags
);

900 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_NID
(X509_EXTENSION **
ex
,

901 
nid
, 
¸ô
,

902 
ASN1_OCTET_STRING
 *
d©a
);

903 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_OBJ
(X509_EXTENSION **
ex
,

904 c⁄° 
ASN1_OBJECT
 *
obj
, 
¸ô
,

905 
ASN1_OCTET_STRING
 *
d©a
);

906 
X509_EXTENSION_£t_obje˘
(
X509_EXTENSION
 *
ex
, c⁄° 
ASN1_OBJECT
 *
obj
);

907 
X509_EXTENSION_£t_¸ôiˇl
(
X509_EXTENSION
 *
ex
, 
¸ô
);

908 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
, 
ASN1_OCTET_STRING
 *
d©a
);

909 
ASN1_OBJECT
 *
X509_EXTENSION_gë_obje˘
(
X509_EXTENSION
 *
ex
);

910 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gë_d©a
(
X509_EXTENSION
 *
√
);

911 
X509_EXTENSION_gë_¸ôiˇl
(c⁄° 
X509_EXTENSION
 *
ex
);

913 
X509©_gë_©å_cou¡
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
);

914 
X509©_gë_©å_by_NID
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
nid
,

915 
œ°pos
);

916 
X509©_gë_©å_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
,

917 c⁄° 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

918 
X509_ATTRIBUTE
 *
X509©_gë_©å
(c⁄° 
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

919 
X509_ATTRIBUTE
 *
X509©_dñëe_©å
(
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

920 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å
(STACK_OF(X509_ATTRIBUTEË**
x
,

921 
X509_ATTRIBUTE
 *
©å
);

922 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_OBJ
(STACK_OF(X509_ATTRIBUTE)

923 **
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

924 
ty≥
,

925 c⁄° *
byãs
,

926 
Àn
);

927 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_NID
(STACK_OF(X509_ATTRIBUTE)

928 **
x
, 
nid
, 
ty≥
,

929 c⁄° *
byãs
,

930 
Àn
);

931 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_txt
(STACK_OF(X509_ATTRIBUTE)

932 **
x
, c⁄° *
©å«me
,

933 
ty≥
,

934 c⁄° *
byãs
,

935 
Àn
);

936 *
X509©_gë0_d©a_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
,

937 c⁄° 
ASN1_OBJECT
 *
obj
, 
œ°pos
, 
ty≥
);

938 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_NID
(X509_ATTRIBUTE **
©å
, 
nid
,

939 
©πy≥
, c⁄° *
d©a
,

940 
Àn
);

941 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_OBJ
(X509_ATTRIBUTE **
©å
,

942 c⁄° 
ASN1_OBJECT
 *
obj
,

943 
©πy≥
, c⁄° *
d©a
,

944 
Àn
);

945 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_txt
(X509_ATTRIBUTE **
©å
,

946 c⁄° *
©∫ame
, 
ty≥
,

947 c⁄° *
byãs
,

948 
Àn
);

949 
X509_ATTRIBUTE_£t1_obje˘
(
X509_ATTRIBUTE
 *
©å
, c⁄° 
ASN1_OBJECT
 *
obj
);

950 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©å
, 
©åty≥
,

951 c⁄° *
d©a
, 
Àn
);

952 *
X509_ATTRIBUTE_gë0_d©a
(
X509_ATTRIBUTE
 *
©å
, 
idx
, 
©πy≥
,

953 *
d©a
);

954 
X509_ATTRIBUTE_cou¡
(c⁄° 
X509_ATTRIBUTE
 *
©å
);

955 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gë0_obje˘
(
X509_ATTRIBUTE
 *
©å
);

956 
ASN1_TYPE
 *
X509_ATTRIBUTE_gë0_ty≥
(
X509_ATTRIBUTE
 *
©å
, 
idx
);

958 
EVP_PKEY_gë_©å_cou¡
(c⁄° 
EVP_PKEY
 *
key
);

959 
EVP_PKEY_gë_©å_by_NID
(c⁄° 
EVP_PKEY
 *
key
, 
nid
, 
œ°pos
);

960 
EVP_PKEY_gë_©å_by_OBJ
(c⁄° 
EVP_PKEY
 *
key
, c⁄° 
ASN1_OBJECT
 *
obj
,

961 
œ°pos
);

962 
X509_ATTRIBUTE
 *
EVP_PKEY_gë_©å
(c⁄° 
EVP_PKEY
 *
key
, 
loc
);

963 
X509_ATTRIBUTE
 *
EVP_PKEY_dñëe_©å
(
EVP_PKEY
 *
key
, 
loc
);

964 
EVP_PKEY_add1_©å
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©å
);

965 
EVP_PKEY_add1_©å_by_OBJ
(
EVP_PKEY
 *
key
,

966 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

967 c⁄° *
byãs
, 
Àn
);

968 
EVP_PKEY_add1_©å_by_NID
(
EVP_PKEY
 *
key
,

969 
nid
, 
ty≥
,

970 c⁄° *
byãs
, 
Àn
);

971 
EVP_PKEY_add1_©å_by_txt
(
EVP_PKEY
 *
key
,

972 c⁄° *
©å«me
, 
ty≥
,

973 c⁄° *
byãs
, 
Àn
);

975 
X509_vîify_˚π
(
X509_STORE_CTX
 *
˘x
);

978 
X509
 *
X509_föd_by_issuî_™d_£rül
(
STACK_OF
(X509Ë*
sk
, 
X509_NAME
 *
«me
,

979 
ASN1_INTEGER
 *
£rül
);

980 
X509
 *
X509_föd_by_subje˘
(
STACK_OF
(X509Ë*
sk
, 
X509_NAME
 *
«me
);

982 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

983 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

984 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

985 #i‚de‡
OPENSSL_NO_SCRYPT


986 
DECLARE_ASN1_FUNCTIONS
(
SCRYPT_PARAMS
)

989 
PKCS5_pbe_£t0_Æg‹
(
X509_ALGOR
 *
Æg‹
, 
Æg
, 
ôî
,

990 c⁄° *
ß…
, 
ß…Àn
);

992 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Æg
, 
ôî
,

993 c⁄° *
ß…
, 
ß…Àn
);

994 
X509_ALGOR
 *
PKCS5_pbe2_£t
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

995 *
ß…
, 
ß…Àn
);

996 
X509_ALGOR
 *
PKCS5_pbe2_£t_iv
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

997 *
ß…
, 
ß…Àn
,

998 *
aiv
, 
¥f_nid
);

1000 #i‚de‡
OPENSSL_NO_SCRYPT


1001 
X509_ALGOR
 *
PKCS5_pbe2_£t_s¸y±
(c⁄° 
EVP_CIPHER
 *
cùhî
,

1002 c⁄° *
ß…
, 
ß…Àn
,

1003 *
aiv
, 
uöt64_t
 
N
, uöt64_à
r
,

1004 
uöt64_t
 
p
);

1007 
X509_ALGOR
 *
PKCS5_pbkdf2_£t
(
ôî
, *
ß…
, 
ß…Àn
,

1008 
¥f_nid
, 
keyÀn
);

1012 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

1014 
EVP_PKEY
 *
EVP_PKCS82PKEY
(c⁄° 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1015 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(
EVP_PKEY
 *
pkey
);

1017 
PKCS8_pkey_£t0
(
PKCS8_PRIV_KEY_INFO
 *
¥iv
, 
ASN1_OBJECT
 *
aobj
,

1018 
vîsi⁄
, 
±y≥
, *
pvÆ
,

1019 *
≥nc
, 
≥n˛í
);

1020 
PKCS8_pkey_gë0
(c⁄° 
ASN1_OBJECT
 **
µkÆg
,

1021 c⁄° **
pk
, *
µkÀn
,

1022 c⁄° 
X509_ALGOR
 **
∑
, c⁄° 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1024 c⁄° 
STACK_OF
(
X509_ATTRIBUTE
) *

1025 
PKCS8_pkey_gë0_©ås
(c⁄° 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1026 
PKCS8_pkey_add1_©å_by_NID
(
PKCS8_PRIV_KEY_INFO
 *
p8
, 
nid
, 
ty≥
,

1027 c⁄° *
byãs
, 
Àn
);

1029 
X509_PUBKEY_£t0_∑øm
(
X509_PUBKEY
 *
pub
, 
ASN1_OBJECT
 *
aobj
,

1030 
±y≥
, *
pvÆ
,

1031 *
≥nc
, 
≥n˛í
);

1032 
X509_PUBKEY_gë0_∑øm
(
ASN1_OBJECT
 **
µkÆg
,

1033 c⁄° **
pk
, *
µkÀn
,

1034 
X509_ALGOR
 **
∑
, 
X509_PUBKEY
 *
pub
);

1036 
X509_check_åu°
(
X509
 *
x
, 
id
, 
Êags
);

1037 
X509_TRUST_gë_cou¡
();

1038 
X509_TRUST
 *
X509_TRUST_gë0
(
idx
);

1039 
X509_TRUST_gë_by_id
(
id
);

1040 
X509_TRUST_add
(
id
, 
Êags
, (*
ck
Ë(
X509_TRUST
 *, 
X509
 *, ),

1041 c⁄° *
«me
, 
¨g1
, *
¨g2
);

1042 
X509_TRUST_˛ónup
();

1043 
X509_TRUST_gë_Êags
(c⁄° 
X509_TRUST
 *
xp
);

1044 *
X509_TRUST_gë0_«me
(c⁄° 
X509_TRUST
 *
xp
);

1045 
X509_TRUST_gë_åu°
(c⁄° 
X509_TRUST
 *
xp
);

1047 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509v3err.h

11 #i‚de‡
HEADER_X509V3ERR_H


12 
	#HEADER_X509V3ERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_X509V3_°rögs
();

26 
	#X509V3_F_A2I_GENERAL_NAME
 164

	)

27 
	#X509V3_F_ADDR_VALIDATE_PATH_INTERNAL
 166

	)

28 
	#X509V3_F_ASIDENTIFIERCHOICE_CANONIZE
 161

	)

29 
	#X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL
 162

	)

30 
	#X509V3_F_BIGNUM_TO_STRING
 167

	)

31 
	#X509V3_F_COPY_EMAIL
 122

	)

32 
	#X509V3_F_COPY_ISSUER
 123

	)

33 
	#X509V3_F_DO_DIRNAME
 144

	)

34 
	#X509V3_F_DO_EXT_I2D
 135

	)

35 
	#X509V3_F_DO_EXT_NCONF
 151

	)

36 
	#X509V3_F_GNAMES_FROM_SECTNAME
 156

	)

37 
	#X509V3_F_I2S_ASN1_ENUMERATED
 121

	)

38 
	#X509V3_F_I2S_ASN1_IA5STRING
 149

	)

39 
	#X509V3_F_I2S_ASN1_INTEGER
 120

	)

40 
	#X509V3_F_I2V_AUTHORITY_INFO_ACCESS
 138

	)

41 
	#X509V3_F_I2V_AUTHORITY_KEYID
 173

	)

42 
	#X509V3_F_LEVEL_ADD_NODE
 168

	)

43 
	#X509V3_F_NOTICE_SECTION
 132

	)

44 
	#X509V3_F_NREF_NOS
 133

	)

45 
	#X509V3_F_POLICY_CACHE_CREATE
 169

	)

46 
	#X509V3_F_POLICY_CACHE_NEW
 170

	)

47 
	#X509V3_F_POLICY_DATA_NEW
 171

	)

48 
	#X509V3_F_POLICY_SECTION
 131

	)

49 
	#X509V3_F_PROCESS_PCI_VALUE
 150

	)

50 
	#X509V3_F_R2I_CERTPOL
 130

	)

51 
	#X509V3_F_R2I_PCI
 155

	)

52 
	#X509V3_F_S2I_ASN1_IA5STRING
 100

	)

53 
	#X509V3_F_S2I_ASN1_INTEGER
 108

	)

54 
	#X509V3_F_S2I_ASN1_OCTET_STRING
 112

	)

55 
	#X509V3_F_S2I_SKEY_ID
 115

	)

56 
	#X509V3_F_SET_DIST_POINT_NAME
 158

	)

57 
	#X509V3_F_SXNET_ADD_ID_ASC
 125

	)

58 
	#X509V3_F_SXNET_ADD_ID_INTEGER
 126

	)

59 
	#X509V3_F_SXNET_ADD_ID_ULONG
 127

	)

60 
	#X509V3_F_SXNET_GET_ID_ASC
 128

	)

61 
	#X509V3_F_SXNET_GET_ID_ULONG
 129

	)

62 
	#X509V3_F_TREE_INIT
 172

	)

63 
	#X509V3_F_V2I_ASIDENTIFIERS
 163

	)

64 
	#X509V3_F_V2I_ASN1_BIT_STRING
 101

	)

65 
	#X509V3_F_V2I_AUTHORITY_INFO_ACCESS
 139

	)

66 
	#X509V3_F_V2I_AUTHORITY_KEYID
 119

	)

67 
	#X509V3_F_V2I_BASIC_CONSTRAINTS
 102

	)

68 
	#X509V3_F_V2I_CRLD
 134

	)

69 
	#X509V3_F_V2I_EXTENDED_KEY_USAGE
 103

	)

70 
	#X509V3_F_V2I_GENERAL_NAMES
 118

	)

71 
	#X509V3_F_V2I_GENERAL_NAME_EX
 117

	)

72 
	#X509V3_F_V2I_IDP
 157

	)

73 
	#X509V3_F_V2I_IPADDRBLOCKS
 159

	)

74 
	#X509V3_F_V2I_ISSUER_ALT
 153

	)

75 
	#X509V3_F_V2I_NAME_CONSTRAINTS
 147

	)

76 
	#X509V3_F_V2I_POLICY_CONSTRAINTS
 146

	)

77 
	#X509V3_F_V2I_POLICY_MAPPINGS
 145

	)

78 
	#X509V3_F_V2I_SUBJECT_ALT
 154

	)

79 
	#X509V3_F_V2I_TLS_FEATURE
 165

	)

80 
	#X509V3_F_V3_GENERIC_EXTENSION
 116

	)

81 
	#X509V3_F_X509V3_ADD1_I2D
 140

	)

82 
	#X509V3_F_X509V3_ADD_LEN_VALUE
 174

	)

83 
	#X509V3_F_X509V3_ADD_VALUE
 105

	)

84 
	#X509V3_F_X509V3_EXT_ADD
 104

	)

85 
	#X509V3_F_X509V3_EXT_ADD_ALIAS
 106

	)

86 
	#X509V3_F_X509V3_EXT_I2D
 136

	)

87 
	#X509V3_F_X509V3_EXT_NCONF
 152

	)

88 
	#X509V3_F_X509V3_GET_SECTION
 142

	)

89 
	#X509V3_F_X509V3_GET_STRING
 143

	)

90 
	#X509V3_F_X509V3_GET_VALUE_BOOL
 110

	)

91 
	#X509V3_F_X509V3_PARSE_LIST
 109

	)

92 
	#X509V3_F_X509_PURPOSE_ADD
 137

	)

93 
	#X509V3_F_X509_PURPOSE_SET
 141

	)

98 
	#X509V3_R_BAD_IP_ADDRESS
 118

	)

99 
	#X509V3_R_BAD_OBJECT
 119

	)

100 
	#X509V3_R_BN_DEC2BN_ERROR
 100

	)

101 
	#X509V3_R_BN_TO_ASN1_INTEGER_ERROR
 101

	)

102 
	#X509V3_R_DIRNAME_ERROR
 149

	)

103 
	#X509V3_R_DISTPOINT_ALREADY_SET
 160

	)

104 
	#X509V3_R_DUPLICATE_ZONE_ID
 133

	)

105 
	#X509V3_R_ERROR_CONVERTING_ZONE
 131

	)

106 
	#X509V3_R_ERROR_CREATING_EXTENSION
 144

	)

107 
	#X509V3_R_ERROR_IN_EXTENSION
 128

	)

108 
	#X509V3_R_EXPECTED_A_SECTION_NAME
 137

	)

109 
	#X509V3_R_EXTENSION_EXISTS
 145

	)

110 
	#X509V3_R_EXTENSION_NAME_ERROR
 115

	)

111 
	#X509V3_R_EXTENSION_NOT_FOUND
 102

	)

112 
	#X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED
 103

	)

113 
	#X509V3_R_EXTENSION_VALUE_ERROR
 116

	)

114 
	#X509V3_R_ILLEGAL_EMPTY_EXTENSION
 151

	)

115 
	#X509V3_R_INCORRECT_POLICY_SYNTAX_TAG
 152

	)

116 
	#X509V3_R_INVALID_ASNUMBER
 162

	)

117 
	#X509V3_R_INVALID_ASRANGE
 163

	)

118 
	#X509V3_R_INVALID_BOOLEAN_STRING
 104

	)

119 
	#X509V3_R_INVALID_EXTENSION_STRING
 105

	)

120 
	#X509V3_R_INVALID_INHERITANCE
 165

	)

121 
	#X509V3_R_INVALID_IPADDRESS
 166

	)

122 
	#X509V3_R_INVALID_MULTIPLE_RDNS
 161

	)

123 
	#X509V3_R_INVALID_NAME
 106

	)

124 
	#X509V3_R_INVALID_NULL_ARGUMENT
 107

	)

125 
	#X509V3_R_INVALID_NULL_NAME
 108

	)

126 
	#X509V3_R_INVALID_NULL_VALUE
 109

	)

127 
	#X509V3_R_INVALID_NUMBER
 140

	)

128 
	#X509V3_R_INVALID_NUMBERS
 141

	)

129 
	#X509V3_R_INVALID_OBJECT_IDENTIFIER
 110

	)

130 
	#X509V3_R_INVALID_OPTION
 138

	)

131 
	#X509V3_R_INVALID_POLICY_IDENTIFIER
 134

	)

132 
	#X509V3_R_INVALID_PROXY_POLICY_SETTING
 153

	)

133 
	#X509V3_R_INVALID_PURPOSE
 146

	)

134 
	#X509V3_R_INVALID_SAFI
 164

	)

135 
	#X509V3_R_INVALID_SECTION
 135

	)

136 
	#X509V3_R_INVALID_SYNTAX
 143

	)

137 
	#X509V3_R_ISSUER_DECODE_ERROR
 126

	)

138 
	#X509V3_R_MISSING_VALUE
 124

	)

139 
	#X509V3_R_NEED_ORGANIZATION_AND_NUMBERS
 142

	)

140 
	#X509V3_R_NO_CONFIG_DATABASE
 136

	)

141 
	#X509V3_R_NO_ISSUER_CERTIFICATE
 121

	)

142 
	#X509V3_R_NO_ISSUER_DETAILS
 127

	)

143 
	#X509V3_R_NO_POLICY_IDENTIFIER
 139

	)

144 
	#X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED
 154

	)

145 
	#X509V3_R_NO_PUBLIC_KEY
 114

	)

146 
	#X509V3_R_NO_SUBJECT_DETAILS
 125

	)

147 
	#X509V3_R_OPERATION_NOT_DEFINED
 148

	)

148 
	#X509V3_R_OTHERNAME_ERROR
 147

	)

149 
	#X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED
 155

	)

150 
	#X509V3_R_POLICY_PATH_LENGTH
 156

	)

151 
	#X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED
 157

	)

152 
	#X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY
 159

	)

153 
	#X509V3_R_SECTION_NOT_FOUND
 150

	)

154 
	#X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS
 122

	)

155 
	#X509V3_R_UNABLE_TO_GET_ISSUER_KEYID
 123

	)

156 
	#X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT
 111

	)

157 
	#X509V3_R_UNKNOWN_EXTENSION
 129

	)

158 
	#X509V3_R_UNKNOWN_EXTENSION_NAME
 130

	)

159 
	#X509V3_R_UNKNOWN_OPTION
 120

	)

160 
	#X509V3_R_UNSUPPORTED_OPTION
 117

	)

161 
	#X509V3_R_UNSUPPORTED_TYPE
 167

	)

162 
	#X509V3_R_USER_TOO_LONG
 132

	)

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

44 
	~<bôs/˝u-£t.h
>

47 
	#sched_¥i‹ôy
 
sched_¥i‹ôy


	)

48 
	#__sched_¥i‹ôy
 
sched_¥i‹ôy


	)

51 
__BEGIN_DECLS


54 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

55 
__THROW
;

58 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

62 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

65 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

68 
	$sched_yõld
 (Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

77 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

80 #ifde‡
__USE_GNU


82 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

83 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

86 
˝u£ç
)

	)

87 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

88 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

90 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

91 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

92 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

93 
˝u£ç
)

	)

94 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

95 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

97 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

98 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

100 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

102 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

104 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

106 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

108 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

110 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

111 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

112 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

113 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

115 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

116 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

117 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

121 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

126 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

129 
__END_DECLS


	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/openssl/asn1.h

10 #i‚de‡
HEADER_ASN1_H


11 
	#HEADER_ASN1_H


	)

13 
	~<time.h
>

14 
	~<›ís¶/e_os2.h
>

15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/bio.h
>

17 
	~<›ís¶/ß„°ack.h
>

18 
	~<›ís¶/a¢1îr.h
>

19 
	~<›ís¶/symhacks.h
>

21 
	~<›ís¶/os¶_typ.h
>

22 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

23 
	~<›ís¶/bn.h
>

26 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


27 #unde‡
OPENSSL_EXTERN


28 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

31 #ifde‡ 
__˝lu•lus


35 
	#V_ASN1_UNIVERSAL
 0x00

	)

36 
	#V_ASN1_APPLICATION
 0x40

	)

37 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

38 
	#V_ASN1_PRIVATE
 0xc0

	)

40 
	#V_ASN1_CONSTRUCTED
 0x20

	)

41 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

42 
	#V_ASN1_PRIMATIVE_TAG
 
V_ASN1_PRIMITIVE_TAG


	)

44 
	#V_ASN1_APP_CHOOSE
 -2

	)

45 
	#V_ASN1_OTHER
 -3

	)

46 
	#V_ASN1_ANY
 -4

	)

48 
	#V_ASN1_UNDEF
 -1

	)

50 
	#V_ASN1_EOC
 0

	)

51 
	#V_ASN1_BOOLEAN
 1

	)

52 
	#V_ASN1_INTEGER
 2

	)

53 
	#V_ASN1_BIT_STRING
 3

	)

54 
	#V_ASN1_OCTET_STRING
 4

	)

55 
	#V_ASN1_NULL
 5

	)

56 
	#V_ASN1_OBJECT
 6

	)

57 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

58 
	#V_ASN1_EXTERNAL
 8

	)

59 
	#V_ASN1_REAL
 9

	)

60 
	#V_ASN1_ENUMERATED
 10

	)

61 
	#V_ASN1_UTF8STRING
 12

	)

62 
	#V_ASN1_SEQUENCE
 16

	)

63 
	#V_ASN1_SET
 17

	)

64 
	#V_ASN1_NUMERICSTRING
 18

	)

65 
	#V_ASN1_PRINTABLESTRING
 19

	)

66 
	#V_ASN1_T61STRING
 20

	)

67 
	#V_ASN1_TELETEXSTRING
 20

	)

68 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

69 
	#V_ASN1_IA5STRING
 22

	)

70 
	#V_ASN1_UTCTIME
 23

	)

71 
	#V_ASN1_GENERALIZEDTIME
 24

	)

72 
	#V_ASN1_GRAPHICSTRING
 25

	)

73 
	#V_ASN1_ISO64STRING
 26

	)

74 
	#V_ASN1_VISIBLESTRING
 26

	)

75 
	#V_ASN1_GENERALSTRING
 27

	)

76 
	#V_ASN1_UNIVERSALSTRING
 28

	)

77 
	#V_ASN1_BMPSTRING
 30

	)

85 
	#V_ASN1_NEG
 0x100

	)

86 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

87 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

90 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

91 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

92 
	#B_ASN1_T61STRING
 0x0004

	)

93 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

94 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

95 
	#B_ASN1_IA5STRING
 0x0010

	)

96 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

97 
	#B_ASN1_ISO64STRING
 0x0040

	)

98 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

99 
	#B_ASN1_GENERALSTRING
 0x0080

	)

100 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

101 
	#B_ASN1_OCTET_STRING
 0x0200

	)

102 
	#B_ASN1_BIT_STRING
 0x0400

	)

103 
	#B_ASN1_BMPSTRING
 0x0800

	)

104 
	#B_ASN1_UNKNOWN
 0x1000

	)

105 
	#B_ASN1_UTF8STRING
 0x2000

	)

106 
	#B_ASN1_UTCTIME
 0x4000

	)

107 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

108 
	#B_ASN1_SEQUENCE
 0x10000

	)

110 
	#MBSTRING_FLAG
 0x1000

	)

111 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

112 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

113 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

114 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

115 
	#SMIME_OLDMIME
 0x400

	)

116 
	#SMIME_CRLFEOL
 0x800

	)

117 
	#SMIME_STREAM
 0x1000

	)

118 
X509_Æg‹_°
;

119 
DEFINE_STACK_OF
(
X509_ALGOR
)

121 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

127 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

135 
	#ASN1_STRING_FLAG_CONT
 0x020

	)

140 
	#ASN1_STRING_FLAG_MSTRING
 0x040

	)

142 
	#ASN1_STRING_FLAG_EMBED
 0x080

	)

144 
	#ASN1_STRING_FLAG_X509_TIME
 0x100

	)

146 
	sa¢1_°rög_°
 {

147 
Àngth
;

148 
ty≥
;

149 *
d©a
;

155 
Êags
;

164 
	sASN1_ENCODING_°
 {

165 *
íc
;

166 
Àn
;

167 
modifõd
;

168 } 
	tASN1_ENCODING
;

171 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

173 
	#STABLE_FLAGS_MALLOC
 0x01

	)

180 
	#STABLE_FLAGS_CLEAR
 
STABLE_FLAGS_MALLOC


	)

181 
	#STABLE_NO_MASK
 0x02

	)

182 
	#DIRSTRING_TYPE
 \

183 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

184 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

186 
	sa¢1_°rög_èbÀ_°
 {

187 
nid
;

188 
mösize
;

189 
maxsize
;

190 
mask
;

191 
Êags
;

192 } 
	tASN1_STRING_TABLE
;

194 
DEFINE_STACK_OF
(
ASN1_STRING_TABLE
)

198 
	#ub_«me
 32768

	)

199 
	#ub_comm⁄_«me
 64

	)

200 
	#ub_loˇlôy_«me
 128

	)

201 
	#ub_°©e_«me
 128

	)

202 
	#ub_‹g™iz©i⁄_«me
 64

	)

203 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

204 
	#ub_tôÀ
 64

	)

205 
	#ub_emaû_addªss
 128

	)

210 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

211 
ASN1_TLC_°
 
	tASN1_TLC
;

213 
ASN1_VALUE_°
 
	tASN1_VALUE
;

217 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Åy≥)

	)

219 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

220 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Åy≥)

	)

222 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

223 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

224 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Çame)

	)

226 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

227 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

228 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

230 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

231 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

232 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

233 
	`DECLARE_ASN1_ITEM
(
ô«me
)

	)

235 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

236 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

237 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
); \

238 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

240 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

241 
i2d_
##
«me
##
	`_NDEF
“amê*
a
, **
out
);

	)

243 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
«me
) \

244 
	`DECLARE_ASN1_ALLOC_FUNCTIONS
(
«me
) \

245 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
«me
,Çame)

	)

247 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

248 
ty≥
 *
«me
##
	`_√w
(); \

249 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

251 
	#DECLARE_ASN1_PRINT_FUNCTION
(
°«me
) \

252 
	`DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, säame)

	)

254 
	#DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, 
‚ame
) \

255 
‚ame
##
	`_¥öt_˘x
(
BIO
 *
out
, 
°«me
 *
x
, 
ödít
, \

256 c⁄° 
ASN1_PCTX
 *
p˘x
);

	)

258 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

259 
	#I2D_OF
(
ty≥
Ë(*)—y≥ *,**)

	)

260 
	#I2D_OF_c⁄°
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

262 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

263 ((
d2i_of_void
*Ë(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

264 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

265 ((
i2d_of_void
*Ë(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

266 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

267 ((*(*)()Ë(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

268 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

269 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

270 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

271 ((**Ë(1 ? 
p
 : (
ty≥
**)0))

	)

273 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

274 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥—y≥ *,**)

	)

275 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

277 
TYPEDEF_D2I2D_OF
();

315 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


318 c⁄° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

321 
	#ASN1_ITEM_±r
(
ùå
Ë(ùå)

	)

324 
	#ASN1_ITEM_ªf
(
ùå
Ë(&(ùå##
_ô
))

	)

326 
	#ASN1_ITEM_Ωå
(
ªf
Ë(&‘ef##
_ô
))

	)

328 
	#DECLARE_ASN1_ITEM
(
«me
) \

329 
OPENSSL_EXTERN
 c⁄° 
ASN1_ITEM
 
«me
##
_ô
;

	)

339 c⁄° 
	tASN1_ITEM
 *
	tASN1_ITEM_EXP
 ();

342 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

345 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

347 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

349 
	#DECLARE_ASN1_ITEM
(
«me
) \

350 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

361 
	#ASN1_STRFLGS_ESC_2253
 1

	)

362 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

363 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

370 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

375 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

377 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

379 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

390 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

398 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

401 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

411 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

412 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

419 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

424 
	#ASN1_STRFLGS_ESC_2254
 0x400

	)

431 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

432 
ASN1_STRFLGS_ESC_CTRL
 | \

433 
ASN1_STRFLGS_ESC_MSB
 | \

434 
ASN1_STRFLGS_UTF8_CONVERT
 | \

435 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

436 
ASN1_STRFLGS_DUMP_DER
)

	)

438 
DEFINE_STACK_OF
(
ASN1_INTEGER
)

440 
DEFINE_STACK_OF
(
ASN1_GENERALSTRING
)

442 
DEFINE_STACK_OF
(
ASN1_UTF8STRING
)

444 
	sa¢1_ty≥_°
 {

445 
ty≥
;

447 *
±r
;

448 
ASN1_BOOLEAN
 
boﬁón
;

449 
ASN1_STRING
 *
a¢1_°rög
;

450 
ASN1_OBJECT
 *
obje˘
;

451 
ASN1_INTEGER
 *
öãgî
;

452 
ASN1_ENUMERATED
 *
íumî©ed
;

453 
ASN1_BIT_STRING
 *
bô_°rög
;

454 
ASN1_OCTET_STRING
 *
o˘ë_°rög
;

455 
ASN1_PRINTABLESTRING
 *
¥öèbÀ°rög
;

456 
ASN1_T61STRING
 *
t61°rög
;

457 
ASN1_IA5STRING
 *
ü5°rög
;

458 
ASN1_GENERALSTRING
 *
gíîÆ°rög
;

459 
ASN1_BMPSTRING
 *
bmp°rög
;

460 
ASN1_UNIVERSALSTRING
 *
univîßl°rög
;

461 
ASN1_UTCTIME
 *
ut˘ime
;

462 
ASN1_GENERALIZEDTIME
 *
gíîÆizedtime
;

463 
ASN1_VISIBLESTRING
 *
visibÀ°rög
;

464 
ASN1_UTF8STRING
 *
utf8°rög
;

469 
ASN1_STRING
 *
£t
;

470 
ASN1_STRING
 *
£quí˚
;

471 
ASN1_VALUE
 *
a¢1_vÆue
;

472 } 
vÆue
;

473 } 
	tASN1_TYPE
;

475 
DEFINE_STACK_OF
(
ASN1_TYPE
)

477 
STACK_OF
(
	tASN1_TYPE
Ë
	tASN1_SEQUENCE_ANY
;

479 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, ASN1_SEQUENCE_ANY)

480 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, 
ASN1_SET_ANY
)

483 
	sBIT_STRING_BITNAME_°
 {

484 
bônum
;

485 c⁄° *
 ame
;

486 c⁄° *
¢ame
;

487 } 
	tBIT_STRING_BITNAME
;

489 
	#B_ASN1_TIME
 \

490 
B_ASN1_UTCTIME
 | \

491 
B_ASN1_GENERALIZEDTIME


	)

493 
	#B_ASN1_PRINTABLE
 \

494 
B_ASN1_NUMERICSTRING
| \

495 
B_ASN1_PRINTABLESTRING
| \

496 
B_ASN1_T61STRING
| \

497 
B_ASN1_IA5STRING
| \

498 
B_ASN1_BIT_STRING
| \

499 
B_ASN1_UNIVERSALSTRING
|\

500 
B_ASN1_BMPSTRING
|\

501 
B_ASN1_UTF8STRING
|\

502 
B_ASN1_SEQUENCE
|\

503 
B_ASN1_UNKNOWN


	)

505 
	#B_ASN1_DIRECTORYSTRING
 \

506 
B_ASN1_PRINTABLESTRING
| \

507 
B_ASN1_TELETEXSTRING
|\

508 
B_ASN1_BMPSTRING
|\

509 
B_ASN1_UNIVERSALSTRING
|\

510 
B_ASN1_UTF8STRING


	)

512 
	#B_ASN1_DISPLAYTEXT
 \

513 
B_ASN1_IA5STRING
| \

514 
B_ASN1_VISIBLESTRING
| \

515 
B_ASN1_BMPSTRING
|\

516 
B_ASN1_UTF8STRING


	)

518 
DECLARE_ASN1_FUNCTIONS_‚ame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

520 
ASN1_TYPE_gë
(c⁄° 
ASN1_TYPE
 *
a
);

521 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

522 
ASN1_TYPE_£t1
(
ASN1_TYPE
 *
a
, 
ty≥
, c⁄° *
vÆue
);

523 
ASN1_TYPE_cmp
(c⁄° 
ASN1_TYPE
 *
a
, c⁄° ASN1_TYPE *
b
);

525 
ASN1_TYPE
 *
ASN1_TYPE_∑ck_£quí˚
(c⁄° 
ASN1_ITEM
 *
ô
, *
s
, ASN1_TYPE **
t
);

526 *
ASN1_TYPE_u≈ack_£quí˚
(c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_TYPE
 *
t
);

528 
ASN1_OBJECT
 *
ASN1_OBJECT_√w
();

529 
ASN1_OBJECT_‰ì
(
ASN1_OBJECT
 *
a
);

530 
i2d_ASN1_OBJECT
(c⁄° 
ASN1_OBJECT
 *
a
, **
µ
);

531 
ASN1_OBJECT
 *
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
, c⁄° **
µ
,

532 
Àngth
);

534 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

536 
DEFINE_STACK_OF
(
ASN1_OBJECT
)

538 
ASN1_STRING
 *
ASN1_STRING_√w
();

539 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

540 
ASN1_STRING_˛ór_‰ì
(
ASN1_STRING
 *
a
);

541 
ASN1_STRING_c›y
(
ASN1_STRING
 *
d°
, c⁄° ASN1_STRING *
°r
);

542 
ASN1_STRING
 *
ASN1_STRING_dup
(c⁄° ASN1_STRING *
a
);

543 
ASN1_STRING
 *
ASN1_STRING_ty≥_√w
(
ty≥
);

544 
ASN1_STRING_cmp
(c⁄° 
ASN1_STRING
 *
a
, c⁄° ASN1_STRING *
b
);

549 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

550 
ASN1_STRING_£t0
(
ASN1_STRING
 *
°r
, *
d©a
, 
Àn
);

551 
ASN1_STRING_Àngth
(c⁄° 
ASN1_STRING
 *
x
);

552 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

553 
ASN1_STRING_ty≥
(c⁄° 
ASN1_STRING
 *
x
);

554 
DEPRECATEDIN_1_1_0
(*
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
))

555 c⁄° *
ASN1_STRING_gë0_d©a
(c⁄° 
ASN1_STRING
 *
x
);

557 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

558 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
, 
Àngth
);

559 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

560 
ASN1_BIT_STRING_gë_bô
(c⁄° 
ASN1_BIT_STRING
 *
a
, 
n
);

561 
ASN1_BIT_STRING_check
(c⁄° 
ASN1_BIT_STRING
 *
a
,

562 c⁄° *
Êags
, 
Êags_Àn
);

564 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

565 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

566 
ASN1_BIT_STRING_num_asc
(c⁄° *
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

567 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, c⁄° *
«me
, 
vÆue
,

568 
BIT_STRING_BITNAME
 *
tbl
);

570 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

571 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
, c⁄° **
µ
,

572 
Àngth
);

573 
ASN1_INTEGER
 *
ASN1_INTEGER_dup
(c⁄° ASN1_INTEGER *
x
);

574 
ASN1_INTEGER_cmp
(c⁄° 
ASN1_INTEGER
 *
x
, c⁄° ASN1_INTEGER *
y
);

576 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

578 
ASN1_UTCTIME_check
(c⁄° 
ASN1_UTCTIME
 *
a
);

579 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
, 
time_t
 
t
);

580 
ASN1_UTCTIME
 *
ASN1_UTCTIME_adj
(ASN1_UTCTIME *
s
, 
time_t
 
t
,

581 
off£t_day
, 
off£t_£c
);

582 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

583 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

585 
ASN1_GENERALIZEDTIME_check
(c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

586 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,

587 
time_t
 
t
);

588 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_adj
(ASN1_GENERALIZEDTIME *
s
,

589 
time_t
 
t
, 
off£t_day
,

590 
off£t_£c
);

591 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

593 
ASN1_TIME_diff
(*
pday
, *
p£c
,

594 c⁄° 
ASN1_TIME
 *
‰om
, c⁄° ASN1_TIME *
to
);

596 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

597 
ASN1_OCTET_STRING
 *
ASN1_OCTET_STRING_dup
(c⁄° ASN1_OCTET_STRING *
a
);

598 
ASN1_OCTET_STRING_cmp
(c⁄° 
ASN1_OCTET_STRING
 *
a
,

599 c⁄° 
ASN1_OCTET_STRING
 *
b
);

600 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
,

601 
Àn
);

603 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

604 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

605 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

606 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

607 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

609 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

610 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

612 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

614 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

615 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

616 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

617 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

618 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

619 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

620 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

621 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

622 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

624 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

626 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
, 
time_t
 
t
);

627 
ASN1_TIME
 *
ASN1_TIME_adj
(ASN1_TIME *
s
, 
time_t
 
t
,

628 
off£t_day
, 
off£t_£c
);

629 
ASN1_TIME_check
(c⁄° 
ASN1_TIME
 *
t
);

630 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(c⁄° 
ASN1_TIME
 *
t
,

631 
ASN1_GENERALIZEDTIME
 **
out
);

632 
ASN1_TIME_£t_°rög
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

633 
ASN1_TIME_£t_°rög_X509
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

634 
ASN1_TIME_to_tm
(c⁄° 
ASN1_TIME
 *
s
, 
tm
 *tm);

635 
ASN1_TIME_n‹mÆize
(
ASN1_TIME
 *
s
);

636 
ASN1_TIME_cmp_time_t
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 
t
);

637 
ASN1_TIME_com∑ª
(c⁄° 
ASN1_TIME
 *
a
, c⁄° ASN1_TIME *
b
);

639 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, c⁄° 
ASN1_INTEGER
 *
a
);

640 
a2i_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
bs
, *
buf
, 
size
);

641 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, c⁄° 
ASN1_ENUMERATED
 *
a
);

642 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
bs
, *
buf
, 
size
);

643 
i2a_ASN1_OBJECT
(
BIO
 *
bp
, c⁄° 
ASN1_OBJECT
 *
a
);

644 
a2i_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
bs
, *
buf
, 
size
);

645 
i2a_ASN1_STRING
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
a
, 
ty≥
);

646 
i2t_ASN1_OBJECT
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
);

648 
a2d_ASN1_OBJECT
(*
out
, 
ﬁí
, c⁄° *
buf
, 
num
);

649 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
, 
Àn
,

650 c⁄° *
¢
, c⁄° *
 
);

652 
ASN1_INTEGER_gë_öt64
(
öt64_t
 *
¥
, c⁄° 
ASN1_INTEGER
 *
a
);

653 
ASN1_INTEGER_£t_öt64
(
ASN1_INTEGER
 *
a
, 
öt64_t
 
r
);

654 
ASN1_INTEGER_gë_uöt64
(
uöt64_t
 *
¥
, c⁄° 
ASN1_INTEGER
 *
a
);

655 
ASN1_INTEGER_£t_uöt64
(
ASN1_INTEGER
 *
a
, 
uöt64_t
 
r
);

657 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

658 
ASN1_INTEGER_gë
(c⁄° 
ASN1_INTEGER
 *
a
);

659 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(c⁄° 
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

660 
BIGNUM
 *
ASN1_INTEGER_to_BN
(c⁄° 
ASN1_INTEGER
 *
ai
, BIGNUM *
bn
);

662 
ASN1_ENUMERATED_gë_öt64
(
öt64_t
 *
¥
, c⁄° 
ASN1_ENUMERATED
 *
a
);

663 
ASN1_ENUMERATED_£t_öt64
(
ASN1_ENUMERATED
 *
a
, 
öt64_t
 
r
);

666 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

667 
ASN1_ENUMERATED_gë
(c⁄° 
ASN1_ENUMERATED
 *
a
);

668 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(c⁄° 
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

669 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(c⁄° 
ASN1_ENUMERATED
 *
ai
, BIGNUM *
bn
);

673 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

675 
ASN1_èg2bô
(
èg
);

678 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

679 *
p˛ass
, 
omax
);

680 
ASN1_check_öföôe_íd
(**
p
, 
Àn
);

681 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
, 
Àn
);

682 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

683 
èg
, 
x˛ass
);

684 
ASN1_put_eoc
(**
µ
);

685 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

688 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

690 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

691 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

692 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

693 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

695 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
) \

696 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
(c⁄°Åy≥, 
i2d
), \

697 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

698 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

700 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, *
x
);

704 
	#M_ASN1_√w_of
(
ty≥
Ë—y≥ *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
—y≥))

	)

705 
	#M_ASN1_‰ì_of
(
x
, 
ty≥
) \

706 
	`ASN1_ôem_‰ì
(
	`CHECKED_PTR_OF
(
ty≥
, 
x
), 
	`ASN1_ITEM_Ωå
—y≥))

	)

708 #i‚de‡
OPENSSL_NO_STDIO


709 *
ASN1_d2i_Â
(*(*
x√w
Ë(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

711 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

712 ((
ty≥
*)
	`ASN1_d2i_Â
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

713 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

714 
ö
, \

715 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

717 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

718 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
, 
FILE
 *
out
, *
x
);

720 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

721 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

722 
out
, \

723 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

725 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

726 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

727 
out
, \

728 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

730 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, *
x
);

731 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, c⁄° 
ASN1_STRING
 *
°r
, 
Êags
);

734 
ASN1_STRING_to_UTF8
(**
out
, c⁄° 
ASN1_STRING
 *
ö
);

736 *
ASN1_d2i_bio
(*(*
x√w
Ë(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

738 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

739 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

740 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

741 
ö
, \

742 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

744 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
x
);

745 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
, 
BIO
 *
out
, *
x
);

747 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

748 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

749 
out
, \

750 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

752 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

753 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

754 
out
, \

755 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

757 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, *
x
);

758 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_UTCTIME
 *
a
);

759 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

760 
ASN1_TIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_TIME
 *
a
);

761 
ASN1_STRING_¥öt
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
v
);

762 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, c⁄° 
ASN1_STRING
 *
°r
, 
Êags
);

763 
ASN1_buf_¥öt
(
BIO
 *
bp
, c⁄° *
buf
, 
size_t
 
buÊí
, 
off
);

764 
ASN1_bn_¥öt
(
BIO
 *
bp
, c⁄° *
numbî
, c⁄° 
BIGNUM
 *
num
,

765 *
buf
, 
off
);

766 
ASN1_∑r£
(
BIO
 *
bp
, c⁄° *
µ
, 
Àn
, 
ödít
);

767 
ASN1_∑r£_dump
(
BIO
 *
bp
, c⁄° *
µ
, 
Àn
, 
ödít
,

768 
dump
);

769 c⁄° *
ASN1_èg2°r
(
èg
);

773 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

775 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
, *
d©a
, 
Àn
);

776 
ASN1_TYPE_gë_o˘ë°rög
(c⁄° 
ASN1_TYPE
 *
a
, *
d©a
, 
max_Àn
);

777 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

778 *
d©a
, 
Àn
);

779 
ASN1_TYPE_gë_öt_o˘ë°rög
(c⁄° 
ASN1_TYPE
 *
a
, *
num
,

780 *
d©a
, 
max_Àn
);

782 *
ASN1_ôem_u≈ack
(c⁄° 
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

784 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
,

785 
ASN1_OCTET_STRING
 **
o˘
);

787 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

788 
ASN1_STRING_£t_deÁu…_mask_asc
(c⁄° *
p
);

789 
ASN1_STRING_gë_deÁu…_mask
();

790 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

791 
öf‹m
, 
mask
);

792 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

793 
öf‹m
, 
mask
,

794 
mösize
, 
maxsize
);

796 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

797 c⁄° *
ö
, 
öÀn
,

798 
öf‹m
, 
nid
);

799 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

800 
ASN1_STRING_TABLE_add
(, , , , );

801 
ASN1_STRING_TABLE_˛ónup
();

806 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

807 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

808 
ASN1_VALUE
 *
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
,

809 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

810 
ASN1_ôem_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

811 
ASN1_ôem_ndef_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
,

812 c⁄° 
ASN1_ITEM
 *
ô
);

814 
ASN1_add_oid_moduÀ
();

815 
ASN1_add_°abÀ_moduÀ
();

817 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(c⁄° *
°r
, 
CONF
 *
nc⁄f
);

818 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(c⁄° *
°r
, 
X509V3_CTX
 *
˙f
);

819 
ASN1_°r2mask
(c⁄° *
°r
, *
pmask
);

824 
	#ASN1_PCTX_FLAGS_SHOW_ABSENT
 0x001

	)

826 
	#ASN1_PCTX_FLAGS_SHOW_SEQUENCE
 0x002

	)

828 
	#ASN1_PCTX_FLAGS_SHOW_SSOF
 0x004

	)

830 
	#ASN1_PCTX_FLAGS_SHOW_TYPE
 0x008

	)

832 
	#ASN1_PCTX_FLAGS_NO_ANY_TYPE
 0x010

	)

834 
	#ASN1_PCTX_FLAGS_NO_MSTRING_TYPE
 0x020

	)

836 
	#ASN1_PCTX_FLAGS_NO_FIELD_NAME
 0x040

	)

838 
	#ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME
 0x080

	)

840 
	#ASN1_PCTX_FLAGS_NO_STRUCT_NAME
 0x100

	)

842 
ASN1_ôem_¥öt
(
BIO
 *
out
, 
ASN1_VALUE
 *
iÊd
, 
ödít
,

843 c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_PCTX
 *
p˘x
);

844 
ASN1_PCTX
 *
ASN1_PCTX_√w
();

845 
ASN1_PCTX_‰ì
(
ASN1_PCTX
 *
p
);

846 
ASN1_PCTX_gë_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

847 
ASN1_PCTX_£t_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

848 
ASN1_PCTX_gë_nm_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

849 
ASN1_PCTX_£t_nm_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

850 
ASN1_PCTX_gë_˚π_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

851 
ASN1_PCTX_£t_˚π_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

852 
ASN1_PCTX_gë_oid_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

853 
ASN1_PCTX_£t_oid_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

854 
ASN1_PCTX_gë_°r_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

855 
ASN1_PCTX_£t_°r_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

857 
ASN1_SCTX
 *
ASN1_SCTX_√w
((*
sˇn_cb
Ë(ASN1_SCTX *
˘x
));

858 
ASN1_SCTX_‰ì
(
ASN1_SCTX
 *
p
);

859 c⁄° 
ASN1_ITEM
 *
ASN1_SCTX_gë_ôem
(
ASN1_SCTX
 *
p
);

860 c⁄° 
ASN1_TEMPLATE
 *
ASN1_SCTX_gë_ãm∂©e
(
ASN1_SCTX
 *
p
);

861 
ASN1_SCTX_gë_Êags
(
ASN1_SCTX
 *
p
);

862 
ASN1_SCTX_£t_≠p_d©a
(
ASN1_SCTX
 *
p
, *
d©a
);

863 *
ASN1_SCTX_gë_≠p_d©a
(
ASN1_SCTX
 *
p
);

865 c⁄° 
BIO_METHOD
 *
BIO_f_a¢1
();

867 
BIO
 *
BIO_√w_NDEF
(BIO *
out
, 
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

869 
i2d_ASN1_bio_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

870 c⁄° 
ASN1_ITEM
 *
ô
);

871 
PEM_wrôe_bio_ASN1_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

872 c⁄° *
hdr
, c⁄° 
ASN1_ITEM
 *
ô
);

873 
SMIME_wrôe_ASN1
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

874 
˘y≥_nid
, 
ec⁄t_nid
,

875 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
, c⁄° 
ASN1_ITEM
 *
ô
);

876 
ASN1_VALUE
 *
SMIME_ªad_ASN1
(
BIO
 *
bio
, BIO **
bc⁄t
, c⁄° 
ASN1_ITEM
 *
ô
);

877 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

878 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

880 c⁄° 
ASN1_ITEM
 *
ASN1_ITEM_lookup
(c⁄° *
«me
);

881 c⁄° 
ASN1_ITEM
 *
ASN1_ITEM_gë
(
size_t
 
i
);

883 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/asyncerr.h

11 #i‚de‡
HEADER_ASYNCERR_H


12 
	#HEADER_ASYNCERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_ASYNC_°rögs
();

26 
	#ASYNC_F_ASYNC_CTX_NEW
 100

	)

27 
	#ASYNC_F_ASYNC_INIT_THREAD
 101

	)

28 
	#ASYNC_F_ASYNC_JOB_NEW
 102

	)

29 
	#ASYNC_F_ASYNC_PAUSE_JOB
 103

	)

30 
	#ASYNC_F_ASYNC_START_FUNC
 104

	)

31 
	#ASYNC_F_ASYNC_START_JOB
 105

	)

32 
	#ASYNC_F_ASYNC_WAIT_CTX_SET_WAIT_FD
 106

	)

37 
	#ASYNC_R_FAILED_TO_SET_POOL
 101

	)

38 
	#ASYNC_R_FAILED_TO_SWAP_CONTEXT
 102

	)

39 
	#ASYNC_R_INIT_FAILED
 105

	)

40 
	#ASYNC_R_INVALID_POOL_SIZE
 103

	)

	@/usr/include/openssl/comperr.h

11 #i‚de‡
HEADER_COMPERR_H


12 
	#HEADER_COMPERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 
	~<›ís¶/›ís¶c⁄f.h
>

20 #i‚de‡
OPENSSL_NO_COMP


22 #ifde‡ 
__˝lu•lus


25 
ERR_lﬂd_COMP_°rögs
();

30 
	#COMP_F_BIO_ZLIB_FLUSH
 99

	)

31 
	#COMP_F_BIO_ZLIB_NEW
 100

	)

32 
	#COMP_F_BIO_ZLIB_READ
 101

	)

33 
	#COMP_F_BIO_ZLIB_WRITE
 102

	)

34 
	#COMP_F_COMP_CTX_NEW
 103

	)

39 
	#COMP_R_ZLIB_DEFLATE_ERROR
 99

	)

40 
	#COMP_R_ZLIB_INFLATE_ERROR
 100

	)

41 
	#COMP_R_ZLIB_NOT_SUPPORTED
 101

	)

	@/usr/include/openssl/cryptoerr.h

11 #i‚de‡
HEADER_CRYPTOERR_H


12 
	#HEADER_CRYPTOERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_CRYPTO_°rögs
();

26 
	#CRYPTO_F_CMAC_CTX_NEW
 120

	)

27 
	#CRYPTO_F_CRYPTO_DUP_EX_DATA
 110

	)

28 
	#CRYPTO_F_CRYPTO_FREE_EX_DATA
 111

	)

29 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

30 
	#CRYPTO_F_CRYPTO_MEMDUP
 115

	)

31 
	#CRYPTO_F_CRYPTO_NEW_EX_DATA
 112

	)

32 
	#CRYPTO_F_CRYPTO_OCB128_COPY_CTX
 121

	)

33 
	#CRYPTO_F_CRYPTO_OCB128_INIT
 122

	)

34 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

35 
	#CRYPTO_F_FIPS_MODE_SET
 109

	)

36 
	#CRYPTO_F_GET_AND_LOCK
 113

	)

37 
	#CRYPTO_F_OPENSSL_ATEXIT
 114

	)

38 
	#CRYPTO_F_OPENSSL_BUF2HEXSTR
 117

	)

39 
	#CRYPTO_F_OPENSSL_FOPEN
 119

	)

40 
	#CRYPTO_F_OPENSSL_HEXSTR2BUF
 118

	)

41 
	#CRYPTO_F_OPENSSL_INIT_CRYPTO
 116

	)

42 
	#CRYPTO_F_OPENSSL_LH_NEW
 126

	)

43 
	#CRYPTO_F_OPENSSL_SK_DEEP_COPY
 127

	)

44 
	#CRYPTO_F_OPENSSL_SK_DUP
 128

	)

45 
	#CRYPTO_F_PKEY_HMAC_INIT
 123

	)

46 
	#CRYPTO_F_PKEY_POLY1305_INIT
 124

	)

47 
	#CRYPTO_F_PKEY_SIPHASH_INIT
 125

	)

48 
	#CRYPTO_F_SK_RESERVE
 129

	)

53 
	#CRYPTO_R_FIPS_MODE_NOT_SUPPORTED
 101

	)

54 
	#CRYPTO_R_ILLEGAL_HEX_DIGIT
 102

	)

55 
	#CRYPTO_R_ODD_NUMBER_OF_DIGITS
 103

	)

	@/usr/include/openssl/cterr.h

11 #i‚de‡
HEADER_CTERR_H


12 
	#HEADER_CTERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 
	~<›ís¶/›ís¶c⁄f.h
>

20 #i‚de‡
OPENSSL_NO_CT


22 #ifde‡ 
__˝lu•lus


25 
ERR_lﬂd_CT_°rögs
();

30 
	#CT_F_CTLOG_NEW
 117

	)

31 
	#CT_F_CTLOG_NEW_FROM_BASE64
 118

	)

32 
	#CT_F_CTLOG_NEW_FROM_CONF
 119

	)

33 
	#CT_F_CTLOG_STORE_LOAD_CTX_NEW
 122

	)

34 
	#CT_F_CTLOG_STORE_LOAD_FILE
 123

	)

35 
	#CT_F_CTLOG_STORE_LOAD_LOG
 130

	)

36 
	#CT_F_CTLOG_STORE_NEW
 131

	)

37 
	#CT_F_CT_BASE64_DECODE
 124

	)

38 
	#CT_F_CT_POLICY_EVAL_CTX_NEW
 133

	)

39 
	#CT_F_CT_V1_LOG_ID_FROM_PKEY
 125

	)

40 
	#CT_F_I2O_SCT
 107

	)

41 
	#CT_F_I2O_SCT_LIST
 108

	)

42 
	#CT_F_I2O_SCT_SIGNATURE
 109

	)

43 
	#CT_F_O2I_SCT
 110

	)

44 
	#CT_F_O2I_SCT_LIST
 111

	)

45 
	#CT_F_O2I_SCT_SIGNATURE
 112

	)

46 
	#CT_F_SCT_CTX_NEW
 126

	)

47 
	#CT_F_SCT_CTX_VERIFY
 128

	)

48 
	#CT_F_SCT_NEW
 100

	)

49 
	#CT_F_SCT_NEW_FROM_BASE64
 127

	)

50 
	#CT_F_SCT_SET0_LOG_ID
 101

	)

51 
	#CT_F_SCT_SET1_EXTENSIONS
 114

	)

52 
	#CT_F_SCT_SET1_LOG_ID
 115

	)

53 
	#CT_F_SCT_SET1_SIGNATURE
 116

	)

54 
	#CT_F_SCT_SET_LOG_ENTRY_TYPE
 102

	)

55 
	#CT_F_SCT_SET_SIGNATURE_NID
 103

	)

56 
	#CT_F_SCT_SET_VERSION
 104

	)

61 
	#CT_R_BASE64_DECODE_ERROR
 108

	)

62 
	#CT_R_INVALID_LOG_ID_LENGTH
 100

	)

63 
	#CT_R_LOG_CONF_INVALID
 109

	)

64 
	#CT_R_LOG_CONF_INVALID_KEY
 110

	)

65 
	#CT_R_LOG_CONF_MISSING_DESCRIPTION
 111

	)

66 
	#CT_R_LOG_CONF_MISSING_KEY
 112

	)

67 
	#CT_R_LOG_KEY_INVALID
 113

	)

68 
	#CT_R_SCT_FUTURE_TIMESTAMP
 116

	)

69 
	#CT_R_SCT_INVALID
 104

	)

70 
	#CT_R_SCT_INVALID_SIGNATURE
 107

	)

71 
	#CT_R_SCT_LIST_INVALID
 105

	)

72 
	#CT_R_SCT_LOG_ID_MISMATCH
 114

	)

73 
	#CT_R_SCT_NOT_SET
 106

	)

74 
	#CT_R_SCT_UNSUPPORTED_VERSION
 115

	)

75 
	#CT_R_UNRECOGNIZED_SIGNATURE_NID
 101

	)

76 
	#CT_R_UNSUPPORTED_ENTRY_TYPE
 102

	)

77 
	#CT_R_UNSUPPORTED_VERSION
 103

	)

	@/usr/include/openssl/dherr.h

11 #i‚de‡
HEADER_DHERR_H


12 
	#HEADER_DHERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 
	~<›ís¶/›ís¶c⁄f.h
>

20 #i‚de‡
OPENSSL_NO_DH


22 #ifde‡ 
__˝lu•lus


25 
ERR_lﬂd_DH_°rögs
();

30 
	#DH_F_COMPUTE_KEY
 102

	)

31 
	#DH_F_DHPARAMS_PRINT_FP
 101

	)

32 
	#DH_F_DH_BUILTIN_GENPARAMS
 106

	)

33 
	#DH_F_DH_CHECK_EX
 121

	)

34 
	#DH_F_DH_CHECK_PARAMS_EX
 122

	)

35 
	#DH_F_DH_CHECK_PUB_KEY_EX
 123

	)

36 
	#DH_F_DH_CMS_DECRYPT
 114

	)

37 
	#DH_F_DH_CMS_SET_PEERKEY
 115

	)

38 
	#DH_F_DH_CMS_SET_SHARED_INFO
 116

	)

39 
	#DH_F_DH_METH_DUP
 117

	)

40 
	#DH_F_DH_METH_NEW
 118

	)

41 
	#DH_F_DH_METH_SET1_NAME
 119

	)

42 
	#DH_F_DH_NEW_BY_NID
 104

	)

43 
	#DH_F_DH_NEW_METHOD
 105

	)

44 
	#DH_F_DH_PARAM_DECODE
 107

	)

45 
	#DH_F_DH_PKEY_PUBLIC_CHECK
 124

	)

46 
	#DH_F_DH_PRIV_DECODE
 110

	)

47 
	#DH_F_DH_PRIV_ENCODE
 111

	)

48 
	#DH_F_DH_PUB_DECODE
 108

	)

49 
	#DH_F_DH_PUB_ENCODE
 109

	)

50 
	#DH_F_DO_DH_PRINT
 100

	)

51 
	#DH_F_GENERATE_KEY
 103

	)

52 
	#DH_F_PKEY_DH_CTRL_STR
 120

	)

53 
	#DH_F_PKEY_DH_DERIVE
 112

	)

54 
	#DH_F_PKEY_DH_INIT
 125

	)

55 
	#DH_F_PKEY_DH_KEYGEN
 113

	)

60 
	#DH_R_BAD_GENERATOR
 101

	)

61 
	#DH_R_BN_DECODE_ERROR
 109

	)

62 
	#DH_R_BN_ERROR
 106

	)

63 
	#DH_R_CHECK_INVALID_J_VALUE
 115

	)

64 
	#DH_R_CHECK_INVALID_Q_VALUE
 116

	)

65 
	#DH_R_CHECK_PUBKEY_INVALID
 122

	)

66 
	#DH_R_CHECK_PUBKEY_TOO_LARGE
 123

	)

67 
	#DH_R_CHECK_PUBKEY_TOO_SMALL
 124

	)

68 
	#DH_R_CHECK_P_NOT_PRIME
 117

	)

69 
	#DH_R_CHECK_P_NOT_SAFE_PRIME
 118

	)

70 
	#DH_R_CHECK_Q_NOT_PRIME
 119

	)

71 
	#DH_R_DECODE_ERROR
 104

	)

72 
	#DH_R_INVALID_PARAMETER_NAME
 110

	)

73 
	#DH_R_INVALID_PARAMETER_NID
 114

	)

74 
	#DH_R_INVALID_PUBKEY
 102

	)

75 
	#DH_R_KDF_PARAMETER_ERROR
 112

	)

76 
	#DH_R_KEYS_NOT_SET
 108

	)

77 
	#DH_R_MISSING_PUBKEY
 125

	)

78 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

79 
	#DH_R_NOT_SUITABLE_GENERATOR
 120

	)

80 
	#DH_R_NO_PARAMETERS_SET
 107

	)

81 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

82 
	#DH_R_PARAMETER_ENCODING_ERROR
 105

	)

83 
	#DH_R_PEER_KEY_ERROR
 111

	)

84 
	#DH_R_SHARED_INFO_ERROR
 113

	)

85 
	#DH_R_UNABLE_TO_CHECK_GENERATOR
 121

	)

	@/usr/include/openssl/dsaerr.h

11 #i‚de‡
HEADER_DSAERR_H


12 
	#HEADER_DSAERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 
	~<›ís¶/›ís¶c⁄f.h
>

20 #i‚de‡
OPENSSL_NO_DSA


22 #ifde‡ 
__˝lu•lus


25 
ERR_lﬂd_DSA_°rögs
();

30 
	#DSA_F_DSAPARAMS_PRINT
 100

	)

31 
	#DSA_F_DSAPARAMS_PRINT_FP
 101

	)

32 
	#DSA_F_DSA_BUILTIN_PARAMGEN
 125

	)

33 
	#DSA_F_DSA_BUILTIN_PARAMGEN2
 126

	)

34 
	#DSA_F_DSA_DO_SIGN
 112

	)

35 
	#DSA_F_DSA_DO_VERIFY
 113

	)

36 
	#DSA_F_DSA_METH_DUP
 127

	)

37 
	#DSA_F_DSA_METH_NEW
 128

	)

38 
	#DSA_F_DSA_METH_SET1_NAME
 129

	)

39 
	#DSA_F_DSA_NEW_METHOD
 103

	)

40 
	#DSA_F_DSA_PARAM_DECODE
 119

	)

41 
	#DSA_F_DSA_PRINT_FP
 105

	)

42 
	#DSA_F_DSA_PRIV_DECODE
 115

	)

43 
	#DSA_F_DSA_PRIV_ENCODE
 116

	)

44 
	#DSA_F_DSA_PUB_DECODE
 117

	)

45 
	#DSA_F_DSA_PUB_ENCODE
 118

	)

46 
	#DSA_F_DSA_SIGN
 106

	)

47 
	#DSA_F_DSA_SIGN_SETUP
 107

	)

48 
	#DSA_F_DSA_SIG_NEW
 102

	)

49 
	#DSA_F_OLD_DSA_PRIV_DECODE
 122

	)

50 
	#DSA_F_PKEY_DSA_CTRL
 120

	)

51 
	#DSA_F_PKEY_DSA_CTRL_STR
 104

	)

52 
	#DSA_F_PKEY_DSA_KEYGEN
 121

	)

57 
	#DSA_R_BAD_Q_VALUE
 102

	)

58 
	#DSA_R_BN_DECODE_ERROR
 108

	)

59 
	#DSA_R_BN_ERROR
 109

	)

60 
	#DSA_R_DECODE_ERROR
 104

	)

61 
	#DSA_R_INVALID_DIGEST_TYPE
 106

	)

62 
	#DSA_R_INVALID_PARAMETERS
 112

	)

63 
	#DSA_R_MISSING_PARAMETERS
 101

	)

64 
	#DSA_R_MISSING_PRIVATE_KEY
 111

	)

65 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

66 
	#DSA_R_NO_PARAMETERS_SET
 107

	)

67 
	#DSA_R_PARAMETER_ENCODING_ERROR
 105

	)

68 
	#DSA_R_Q_NOT_PRIME
 113

	)

69 
	#DSA_R_SEED_LEN_SMALL
 110

	)

	@/usr/include/openssl/ebcdic.h

10 #i‚de‡
HEADER_EBCDIC_H


11 
	#HEADER_EBCDIC_H


	)

13 
	~<°dlib.h
>

15 #ifde‡ 
__˝lu•lus


20 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

21 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

22 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

23 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

25 c⁄° 
os_tﬂscii
[256];

26 c⁄° 
os_t€bcdic
[256];

27 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

28 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

30 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecerr.h

11 #i‚de‡
HEADER_ECERR_H


12 
	#HEADER_ECERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 
	~<›ís¶/›ís¶c⁄f.h
>

20 #i‚de‡
OPENSSL_NO_EC


22 #ifde‡ 
__˝lu•lus


25 
ERR_lﬂd_EC_°rögs
();

30 
	#EC_F_BN_TO_FELEM
 224

	)

31 
	#EC_F_D2I_ECPARAMETERS
 144

	)

32 
	#EC_F_D2I_ECPKPARAMETERS
 145

	)

33 
	#EC_F_D2I_ECPRIVATEKEY
 146

	)

34 
	#EC_F_DO_EC_KEY_PRINT
 221

	)

35 
	#EC_F_ECDH_CMS_DECRYPT
 238

	)

36 
	#EC_F_ECDH_CMS_SET_SHARED_INFO
 239

	)

37 
	#EC_F_ECDH_COMPUTE_KEY
 246

	)

38 
	#EC_F_ECDH_SIMPLE_COMPUTE_KEY
 257

	)

39 
	#EC_F_ECDSA_DO_SIGN_EX
 251

	)

40 
	#EC_F_ECDSA_DO_VERIFY
 252

	)

41 
	#EC_F_ECDSA_SIGN_EX
 254

	)

42 
	#EC_F_ECDSA_SIGN_SETUP
 248

	)

43 
	#EC_F_ECDSA_SIG_NEW
 265

	)

44 
	#EC_F_ECDSA_VERIFY
 253

	)

45 
	#EC_F_ECD_ITEM_VERIFY
 270

	)

46 
	#EC_F_ECKEY_PARAM2TYPE
 223

	)

47 
	#EC_F_ECKEY_PARAM_DECODE
 212

	)

48 
	#EC_F_ECKEY_PRIV_DECODE
 213

	)

49 
	#EC_F_ECKEY_PRIV_ENCODE
 214

	)

50 
	#EC_F_ECKEY_PUB_DECODE
 215

	)

51 
	#EC_F_ECKEY_PUB_ENCODE
 216

	)

52 
	#EC_F_ECKEY_TYPE2PARAM
 220

	)

53 
	#EC_F_ECPARAMETERS_PRINT
 147

	)

54 
	#EC_F_ECPARAMETERS_PRINT_FP
 148

	)

55 
	#EC_F_ECPKPARAMETERS_PRINT
 149

	)

56 
	#EC_F_ECPKPARAMETERS_PRINT_FP
 150

	)

57 
	#EC_F_ECP_NISTZ256_GET_AFFINE
 240

	)

58 
	#EC_F_ECP_NISTZ256_INV_MOD_ORD
 275

	)

59 
	#EC_F_ECP_NISTZ256_MULT_PRECOMPUTE
 243

	)

60 
	#EC_F_ECP_NISTZ256_POINTS_MUL
 241

	)

61 
	#EC_F_ECP_NISTZ256_PRE_COMP_NEW
 244

	)

62 
	#EC_F_ECP_NISTZ256_WINDOWED_MUL
 242

	)

63 
	#EC_F_ECX_KEY_OP
 266

	)

64 
	#EC_F_ECX_PRIV_ENCODE
 267

	)

65 
	#EC_F_ECX_PUB_ENCODE
 268

	)

66 
	#EC_F_EC_ASN1_GROUP2CURVE
 153

	)

67 
	#EC_F_EC_ASN1_GROUP2FIELDID
 154

	)

68 
	#EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY
 208

	)

69 
	#EC_F_EC_GF2M_SIMPLE_FIELD_INV
 296

	)

70 
	#EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT
 159

	)

71 
	#EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE
 195

	)

72 
	#EC_F_EC_GF2M_SIMPLE_LADDER_POST
 285

	)

73 
	#EC_F_EC_GF2M_SIMPLE_LADDER_PRE
 288

	)

74 
	#EC_F_EC_GF2M_SIMPLE_OCT2POINT
 160

	)

75 
	#EC_F_EC_GF2M_SIMPLE_POINT2OCT
 161

	)

76 
	#EC_F_EC_GF2M_SIMPLE_POINTS_MUL
 289

	)

77 
	#EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES
 162

	)

78 
	#EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES
 163

	)

79 
	#EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES
 164

	)

80 
	#EC_F_EC_GFP_MONT_FIELD_DECODE
 133

	)

81 
	#EC_F_EC_GFP_MONT_FIELD_ENCODE
 134

	)

82 
	#EC_F_EC_GFP_MONT_FIELD_INV
 297

	)

83 
	#EC_F_EC_GFP_MONT_FIELD_MUL
 131

	)

84 
	#EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE
 209

	)

85 
	#EC_F_EC_GFP_MONT_FIELD_SQR
 132

	)

86 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE
 189

	)

87 
	#EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE
 225

	)

88 
	#EC_F_EC_GFP_NISTP224_POINTS_MUL
 228

	)

89 
	#EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES
 226

	)

90 
	#EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE
 230

	)

91 
	#EC_F_EC_GFP_NISTP256_POINTS_MUL
 231

	)

92 
	#EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES
 232

	)

93 
	#EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE
 233

	)

94 
	#EC_F_EC_GFP_NISTP521_POINTS_MUL
 234

	)

95 
	#EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES
 235

	)

96 
	#EC_F_EC_GFP_NIST_FIELD_MUL
 200

	)

97 
	#EC_F_EC_GFP_NIST_FIELD_SQR
 201

	)

98 
	#EC_F_EC_GFP_NIST_GROUP_SET_CURVE
 202

	)

99 
	#EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES
 287

	)

100 
	#EC_F_EC_GFP_SIMPLE_FIELD_INV
 298

	)

101 
	#EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT
 165

	)

102 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE
 166

	)

103 
	#EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
 102

	)

104 
	#EC_F_EC_GFP_SIMPLE_OCT2POINT
 103

	)

105 
	#EC_F_EC_GFP_SIMPLE_POINT2OCT
 104

	)

106 
	#EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
 137

	)

107 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES
 167

	)

108 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES
 168

	)

109 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES
 169

	)

110 
	#EC_F_EC_GROUP_CHECK
 170

	)

111 
	#EC_F_EC_GROUP_CHECK_DISCRIMINANT
 171

	)

112 
	#EC_F_EC_GROUP_COPY
 106

	)

113 
	#EC_F_EC_GROUP_GET_CURVE
 291

	)

114 
	#EC_F_EC_GROUP_GET_CURVE_GF2M
 172

	)

115 
	#EC_F_EC_GROUP_GET_CURVE_GFP
 130

	)

116 
	#EC_F_EC_GROUP_GET_DEGREE
 173

	)

117 
	#EC_F_EC_GROUP_GET_ECPARAMETERS
 261

	)

118 
	#EC_F_EC_GROUP_GET_ECPKPARAMETERS
 262

	)

119 
	#EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS
 193

	)

120 
	#EC_F_EC_GROUP_GET_TRINOMIAL_BASIS
 194

	)

121 
	#EC_F_EC_GROUP_NEW
 108

	)

122 
	#EC_F_EC_GROUP_NEW_BY_CURVE_NAME
 174

	)

123 
	#EC_F_EC_GROUP_NEW_FROM_DATA
 175

	)

124 
	#EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS
 263

	)

125 
	#EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS
 264

	)

126 
	#EC_F_EC_GROUP_SET_CURVE
 292

	)

127 
	#EC_F_EC_GROUP_SET_CURVE_GF2M
 176

	)

128 
	#EC_F_EC_GROUP_SET_CURVE_GFP
 109

	)

129 
	#EC_F_EC_GROUP_SET_GENERATOR
 111

	)

130 
	#EC_F_EC_GROUP_SET_SEED
 286

	)

131 
	#EC_F_EC_KEY_CHECK_KEY
 177

	)

132 
	#EC_F_EC_KEY_COPY
 178

	)

133 
	#EC_F_EC_KEY_GENERATE_KEY
 179

	)

134 
	#EC_F_EC_KEY_NEW
 182

	)

135 
	#EC_F_EC_KEY_NEW_METHOD
 245

	)

136 
	#EC_F_EC_KEY_OCT2PRIV
 255

	)

137 
	#EC_F_EC_KEY_PRINT
 180

	)

138 
	#EC_F_EC_KEY_PRINT_FP
 181

	)

139 
	#EC_F_EC_KEY_PRIV2BUF
 279

	)

140 
	#EC_F_EC_KEY_PRIV2OCT
 256

	)

141 
	#EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES
 229

	)

142 
	#EC_F_EC_KEY_SIMPLE_CHECK_KEY
 258

	)

143 
	#EC_F_EC_KEY_SIMPLE_OCT2PRIV
 259

	)

144 
	#EC_F_EC_KEY_SIMPLE_PRIV2OCT
 260

	)

145 
	#EC_F_EC_PKEY_CHECK
 273

	)

146 
	#EC_F_EC_PKEY_PARAM_CHECK
 274

	)

147 
	#EC_F_EC_POINTS_MAKE_AFFINE
 136

	)

148 
	#EC_F_EC_POINTS_MUL
 290

	)

149 
	#EC_F_EC_POINT_ADD
 112

	)

150 
	#EC_F_EC_POINT_BN2POINT
 280

	)

151 
	#EC_F_EC_POINT_CMP
 113

	)

152 
	#EC_F_EC_POINT_COPY
 114

	)

153 
	#EC_F_EC_POINT_DBL
 115

	)

154 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES
 293

	)

155 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M
 183

	)

156 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
 116

	)

157 
	#EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
 117

	)

158 
	#EC_F_EC_POINT_INVERT
 210

	)

159 
	#EC_F_EC_POINT_IS_AT_INFINITY
 118

	)

160 
	#EC_F_EC_POINT_IS_ON_CURVE
 119

	)

161 
	#EC_F_EC_POINT_MAKE_AFFINE
 120

	)

162 
	#EC_F_EC_POINT_NEW
 121

	)

163 
	#EC_F_EC_POINT_OCT2POINT
 122

	)

164 
	#EC_F_EC_POINT_POINT2BUF
 281

	)

165 
	#EC_F_EC_POINT_POINT2OCT
 123

	)

166 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES
 294

	)

167 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M
 185

	)

168 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
 124

	)

169 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES
 295

	)

170 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M
 186

	)

171 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
 125

	)

172 
	#EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
 126

	)

173 
	#EC_F_EC_POINT_SET_TO_INFINITY
 127

	)

174 
	#EC_F_EC_PRE_COMP_NEW
 196

	)

175 
	#EC_F_EC_SCALAR_MUL_LADDER
 284

	)

176 
	#EC_F_EC_WNAF_MUL
 187

	)

177 
	#EC_F_EC_WNAF_PRECOMPUTE_MULT
 188

	)

178 
	#EC_F_I2D_ECPARAMETERS
 190

	)

179 
	#EC_F_I2D_ECPKPARAMETERS
 191

	)

180 
	#EC_F_I2D_ECPRIVATEKEY
 192

	)

181 
	#EC_F_I2O_ECPUBLICKEY
 151

	)

182 
	#EC_F_NISTP224_PRE_COMP_NEW
 227

	)

183 
	#EC_F_NISTP256_PRE_COMP_NEW
 236

	)

184 
	#EC_F_NISTP521_PRE_COMP_NEW
 237

	)

185 
	#EC_F_O2I_ECPUBLICKEY
 152

	)

186 
	#EC_F_OLD_EC_PRIV_DECODE
 222

	)

187 
	#EC_F_OSSL_ECDH_COMPUTE_KEY
 247

	)

188 
	#EC_F_OSSL_ECDSA_SIGN_SIG
 249

	)

189 
	#EC_F_OSSL_ECDSA_VERIFY_SIG
 250

	)

190 
	#EC_F_PKEY_ECD_CTRL
 271

	)

191 
	#EC_F_PKEY_ECD_DIGESTSIGN
 272

	)

192 
	#EC_F_PKEY_ECD_DIGESTSIGN25519
 276

	)

193 
	#EC_F_PKEY_ECD_DIGESTSIGN448
 277

	)

194 
	#EC_F_PKEY_ECX_DERIVE
 269

	)

195 
	#EC_F_PKEY_EC_CTRL
 197

	)

196 
	#EC_F_PKEY_EC_CTRL_STR
 198

	)

197 
	#EC_F_PKEY_EC_DERIVE
 217

	)

198 
	#EC_F_PKEY_EC_INIT
 282

	)

199 
	#EC_F_PKEY_EC_KDF_DERIVE
 283

	)

200 
	#EC_F_PKEY_EC_KEYGEN
 199

	)

201 
	#EC_F_PKEY_EC_PARAMGEN
 219

	)

202 
	#EC_F_PKEY_EC_SIGN
 218

	)

203 
	#EC_F_VALIDATE_ECX_DERIVE
 278

	)

208 
	#EC_R_ASN1_ERROR
 115

	)

209 
	#EC_R_BAD_SIGNATURE
 156

	)

210 
	#EC_R_BIGNUM_OUT_OF_RANGE
 144

	)

211 
	#EC_R_BUFFER_TOO_SMALL
 100

	)

212 
	#EC_R_CANNOT_INVERT
 165

	)

213 
	#EC_R_COORDINATES_OUT_OF_RANGE
 146

	)

214 
	#EC_R_CURVE_DOES_NOT_SUPPORT_ECDH
 160

	)

215 
	#EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING
 159

	)

216 
	#EC_R_D2I_ECPKPARAMETERS_FAILURE
 117

	)

217 
	#EC_R_DECODE_ERROR
 142

	)

218 
	#EC_R_DISCRIMINANT_IS_ZERO
 118

	)

219 
	#EC_R_EC_GROUP_NEW_BY_NAME_FAILURE
 119

	)

220 
	#EC_R_FIELD_TOO_LARGE
 143

	)

221 
	#EC_R_GF2M_NOT_SUPPORTED
 147

	)

222 
	#EC_R_GROUP2PKPARAMETERS_FAILURE
 120

	)

223 
	#EC_R_I2D_ECPKPARAMETERS_FAILURE
 121

	)

224 
	#EC_R_INCOMPATIBLE_OBJECTS
 101

	)

225 
	#EC_R_INVALID_ARGUMENT
 112

	)

226 
	#EC_R_INVALID_COMPRESSED_POINT
 110

	)

227 
	#EC_R_INVALID_COMPRESSION_BIT
 109

	)

228 
	#EC_R_INVALID_CURVE
 141

	)

229 
	#EC_R_INVALID_DIGEST
 151

	)

230 
	#EC_R_INVALID_DIGEST_TYPE
 138

	)

231 
	#EC_R_INVALID_ENCODING
 102

	)

232 
	#EC_R_INVALID_FIELD
 103

	)

233 
	#EC_R_INVALID_FORM
 104

	)

234 
	#EC_R_INVALID_GROUP_ORDER
 122

	)

235 
	#EC_R_INVALID_KEY
 116

	)

236 
	#EC_R_INVALID_OUTPUT_LENGTH
 161

	)

237 
	#EC_R_INVALID_PEER_KEY
 133

	)

238 
	#EC_R_INVALID_PENTANOMIAL_BASIS
 132

	)

239 
	#EC_R_INVALID_PRIVATE_KEY
 123

	)

240 
	#EC_R_INVALID_TRINOMIAL_BASIS
 137

	)

241 
	#EC_R_KDF_PARAMETER_ERROR
 148

	)

242 
	#EC_R_KEYS_NOT_SET
 140

	)

243 
	#EC_R_LADDER_POST_FAILURE
 136

	)

244 
	#EC_R_LADDER_PRE_FAILURE
 153

	)

245 
	#EC_R_LADDER_STEP_FAILURE
 162

	)

246 
	#EC_R_MISSING_OID
 167

	)

247 
	#EC_R_MISSING_PARAMETERS
 124

	)

248 
	#EC_R_MISSING_PRIVATE_KEY
 125

	)

249 
	#EC_R_NEED_NEW_SETUP_VALUES
 157

	)

250 
	#EC_R_NOT_A_NIST_PRIME
 135

	)

251 
	#EC_R_NOT_IMPLEMENTED
 126

	)

252 
	#EC_R_NOT_INITIALIZED
 111

	)

253 
	#EC_R_NO_PARAMETERS_SET
 139

	)

254 
	#EC_R_NO_PRIVATE_VALUE
 154

	)

255 
	#EC_R_OPERATION_NOT_SUPPORTED
 152

	)

256 
	#EC_R_PASSED_NULL_PARAMETER
 134

	)

257 
	#EC_R_PEER_KEY_ERROR
 149

	)

258 
	#EC_R_PKPARAMETERS2GROUP_FAILURE
 127

	)

259 
	#EC_R_POINT_ARITHMETIC_FAILURE
 155

	)

260 
	#EC_R_POINT_AT_INFINITY
 106

	)

261 
	#EC_R_POINT_COORDINATES_BLIND_FAILURE
 163

	)

262 
	#EC_R_POINT_IS_NOT_ON_CURVE
 107

	)

263 
	#EC_R_RANDOM_NUMBER_GENERATION_FAILED
 158

	)

264 
	#EC_R_SHARED_INFO_ERROR
 150

	)

265 
	#EC_R_SLOT_FULL
 108

	)

266 
	#EC_R_UNDEFINED_GENERATOR
 113

	)

267 
	#EC_R_UNDEFINED_ORDER
 128

	)

268 
	#EC_R_UNKNOWN_COFACTOR
 164

	)

269 
	#EC_R_UNKNOWN_GROUP
 129

	)

270 
	#EC_R_UNKNOWN_ORDER
 114

	)

271 
	#EC_R_UNSUPPORTED_FIELD
 131

	)

272 
	#EC_R_WRONG_CURVE_PARAMETERS
 145

	)

273 
	#EC_R_WRONG_ORDER
 130

	)

	@/usr/include/openssl/obj_mac.h

12 
	#SN_undef
 "UNDEF"

	)

13 
	#LN_undef
 "undeföed"

	)

14 
	#NID_undef
 0

	)

15 
	#OBJ_undef
 0L

	)

17 
	#SN_ôu_t
 "ITU-T"

	)

18 
	#LN_ôu_t
 "ôu-t"

	)

19 
	#NID_ôu_t
 645

	)

20 
	#OBJ_ôu_t
 0L

	)

22 
	#NID_ccôt
 404

	)

23 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

25 
	#SN_iso
 "ISO"

	)

26 
	#LN_iso
 "iso"

	)

27 
	#NID_iso
 181

	)

28 
	#OBJ_iso
 1L

	)

30 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

31 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

32 
	#NID_joöt_iso_ôu_t
 646

	)

33 
	#OBJ_joöt_iso_ôu_t
 2L

	)

35 
	#NID_joöt_iso_ccôt
 393

	)

36 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

38 
	#SN_membî_body
 "membî-body"

	)

39 
	#LN_membî_body
 "ISO Membî Body"

	)

40 
	#NID_membî_body
 182

	)

41 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

43 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

44 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

45 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

47 
	#SN_hmac_md5
 "HMAC-MD5"

	)

48 
	#LN_hmac_md5
 "hmac-md5"

	)

49 
	#NID_hmac_md5
 780

	)

50 
	#OBJ_hmac_md5
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,1L

	)

52 
	#SN_hmac_sha1
 "HMAC-SHA1"

	)

53 
	#LN_hmac_sha1
 "hmac-sha1"

	)

54 
	#NID_hmac_sha1
 781

	)

55 
	#OBJ_hmac_sha1
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,2L

	)

57 
	#SN_x509ExtAdmissi⁄
 "x509ExtAdmissi⁄"

	)

58 
	#LN_x509ExtAdmissi⁄
 "Pro„ssi⁄Æ Inf‹m©i⁄ o∏basi†f‹ Admissi⁄"

	)

59 
	#NID_x509ExtAdmissi⁄
 1093

	)

60 
	#OBJ_x509ExtAdmissi⁄
 
OBJ_idítifõd_‹g™iz©i⁄
,36L,8L,3L,3L

	)

62 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

63 
	#NID_˚πicom_¨c
 677

	)

64 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

66 
	#SN_õì
 "õì"

	)

67 
	#NID_õì
 1170

	)

68 
	#OBJ_õì
 
OBJ_idítifõd_‹g™iz©i⁄
,111L

	)

70 
	#SN_õì_siswg
 "õì-siswg"

	)

71 
	#LN_õì_siswg
 "IEEE Securôy i¿St‹agêW‹kög Group"

	)

72 
	#NID_õì_siswg
 1171

	)

73 
	#OBJ_õì_siswg
 
OBJ_õì
,2L,1619L

	)

75 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

76 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

77 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

78 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

80 
	#SN_w≠
 "w≠"

	)

81 
	#NID_w≠
 678

	)

82 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

84 
	#SN_w≠_wsg
 "w≠-wsg"

	)

85 
	#NID_w≠_wsg
 679

	)

86 
	#OBJ_w≠_wsg
 
OBJ_w≠
,1L

	)

88 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

89 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

90 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

91 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

93 
	#SN_˛óøn˚
 "˛óøn˚"

	)

94 
	#NID_˛óøn˚
 395

	)

95 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

97 
	#SN_ISO_US
 "ISO-US"

	)

98 
	#LN_ISO_US
 "ISO US Membî Body"

	)

99 
	#NID_ISO_US
 183

	)

100 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

102 
	#SN_X9_57
 "X9-57"

	)

103 
	#LN_X9_57
 "X9.57"

	)

104 
	#NID_X9_57
 184

	)

105 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

107 
	#SN_X9cm
 "X9cm"

	)

108 
	#LN_X9cm
 "X9.57 CM ?"

	)

109 
	#NID_X9cm
 185

	)

110 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

112 
	#SN_ISO_CN
 "ISO-CN"

	)

113 
	#LN_ISO_CN
 "ISO CN Membî Body"

	)

114 
	#NID_ISO_CN
 1140

	)

115 
	#OBJ_ISO_CN
 
OBJ_membî_body
,156L

	)

117 
	#SN_oscˇ
 "oscˇ"

	)

118 
	#NID_oscˇ
 1141

	)

119 
	#OBJ_oscˇ
 
OBJ_ISO_CN
,10197L

	)

121 
	#SN_sm_scheme
 "sm-scheme"

	)

122 
	#NID_sm_scheme
 1142

	)

123 
	#OBJ_sm_scheme
 
OBJ_oscˇ
,1L

	)

125 
	#SN_dß
 "DSA"

	)

126 
	#LN_dß
 "dßEn¸y±i⁄"

	)

127 
	#NID_dß
 116

	)

128 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

130 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

131 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

132 
	#NID_dßWôhSHA1
 113

	)

133 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

135 
	#SN_™si_X9_62
 "™si-X9-62"

	)

136 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

137 
	#NID_™si_X9_62
 405

	)

138 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

140 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

142 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

143 
	#NID_X9_62_¥ime_fõld
 406

	)

144 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

146 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

147 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

148 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

150 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

151 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

152 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

154 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

155 
	#NID_X9_62_⁄Basis
 681

	)

156 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

158 
	#SN_X9_62_çBasis
 "çBasis"

	)

159 
	#NID_X9_62_çBasis
 682

	)

160 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

162 
	#SN_X9_62_µBasis
 "µBasis"

	)

163 
	#NID_X9_62_µBasis
 683

	)

164 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

166 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

168 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

169 
	#NID_X9_62_id_ecPublicKey
 408

	)

170 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

172 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

174 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

176 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

177 
	#NID_X9_62_c2≤b163v1
 684

	)

178 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

180 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

181 
	#NID_X9_62_c2≤b163v2
 685

	)

182 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

184 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

185 
	#NID_X9_62_c2≤b163v3
 686

	)

186 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

188 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

189 
	#NID_X9_62_c2≤b176v1
 687

	)

190 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

192 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

193 
	#NID_X9_62_c2äb191v1
 688

	)

194 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

196 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

197 
	#NID_X9_62_c2äb191v2
 689

	)

198 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

200 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

201 
	#NID_X9_62_c2äb191v3
 690

	)

202 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

204 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

205 
	#NID_X9_62_c2⁄b191v4
 691

	)

206 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

208 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

209 
	#NID_X9_62_c2⁄b191v5
 692

	)

210 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

212 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

213 
	#NID_X9_62_c2≤b208w1
 693

	)

214 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

216 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

217 
	#NID_X9_62_c2äb239v1
 694

	)

218 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

220 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

221 
	#NID_X9_62_c2äb239v2
 695

	)

222 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

224 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

225 
	#NID_X9_62_c2äb239v3
 696

	)

226 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

228 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

229 
	#NID_X9_62_c2⁄b239v4
 697

	)

230 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

232 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

233 
	#NID_X9_62_c2⁄b239v5
 698

	)

234 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

236 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

237 
	#NID_X9_62_c2≤b272w1
 699

	)

238 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

240 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

241 
	#NID_X9_62_c2≤b304w1
 700

	)

242 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

244 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

245 
	#NID_X9_62_c2äb359v1
 701

	)

246 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

248 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

249 
	#NID_X9_62_c2≤b368w1
 702

	)

250 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

252 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

253 
	#NID_X9_62_c2äb431r1
 703

	)

254 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

256 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

258 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

259 
	#NID_X9_62_¥ime192v1
 409

	)

260 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

262 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

263 
	#NID_X9_62_¥ime192v2
 410

	)

264 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

266 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

267 
	#NID_X9_62_¥ime192v3
 411

	)

268 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

270 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

271 
	#NID_X9_62_¥ime239v1
 412

	)

272 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

274 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

275 
	#NID_X9_62_¥ime239v2
 413

	)

276 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

278 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

279 
	#NID_X9_62_¥ime239v3
 414

	)

280 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

282 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

283 
	#NID_X9_62_¥ime256v1
 415

	)

284 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

286 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

288 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

289 
	#NID_ecdß_wôh_SHA1
 416

	)

290 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

292 
	#SN_ecdß_wôh_Recommíded
 "ecdß-wôh-Recommíded"

	)

293 
	#NID_ecdß_wôh_Recommíded
 791

	)

294 
	#OBJ_ecdß_wôh_Recommíded
 
OBJ_X9_62_id_ecSigTy≥
,2L

	)

296 
	#SN_ecdß_wôh_S≥cifõd
 "ecdß-wôh-S≥cifõd"

	)

297 
	#NID_ecdß_wôh_S≥cifõd
 792

	)

298 
	#OBJ_ecdß_wôh_S≥cifõd
 
OBJ_X9_62_id_ecSigTy≥
,3L

	)

300 
	#SN_ecdß_wôh_SHA224
 "ecdß-wôh-SHA224"

	)

301 
	#NID_ecdß_wôh_SHA224
 793

	)

302 
	#OBJ_ecdß_wôh_SHA224
 
OBJ_ecdß_wôh_S≥cifõd
,1L

	)

304 
	#SN_ecdß_wôh_SHA256
 "ecdß-wôh-SHA256"

	)

305 
	#NID_ecdß_wôh_SHA256
 794

	)

306 
	#OBJ_ecdß_wôh_SHA256
 
OBJ_ecdß_wôh_S≥cifõd
,2L

	)

308 
	#SN_ecdß_wôh_SHA384
 "ecdß-wôh-SHA384"

	)

309 
	#NID_ecdß_wôh_SHA384
 795

	)

310 
	#OBJ_ecdß_wôh_SHA384
 
OBJ_ecdß_wôh_S≥cifõd
,3L

	)

312 
	#SN_ecdß_wôh_SHA512
 "ecdß-wôh-SHA512"

	)

313 
	#NID_ecdß_wôh_SHA512
 796

	)

314 
	#OBJ_ecdß_wôh_SHA512
 
OBJ_ecdß_wôh_S≥cifõd
,4L

	)

316 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

318 
	#SN_£˝112r1
 "£˝112r1"

	)

319 
	#NID_£˝112r1
 704

	)

320 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

322 
	#SN_£˝112r2
 "£˝112r2"

	)

323 
	#NID_£˝112r2
 705

	)

324 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

326 
	#SN_£˝128r1
 "£˝128r1"

	)

327 
	#NID_£˝128r1
 706

	)

328 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

330 
	#SN_£˝128r2
 "£˝128r2"

	)

331 
	#NID_£˝128r2
 707

	)

332 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

334 
	#SN_£˝160k1
 "£˝160k1"

	)

335 
	#NID_£˝160k1
 708

	)

336 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

338 
	#SN_£˝160r1
 "£˝160r1"

	)

339 
	#NID_£˝160r1
 709

	)

340 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

342 
	#SN_£˝160r2
 "£˝160r2"

	)

343 
	#NID_£˝160r2
 710

	)

344 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

346 
	#SN_£˝192k1
 "£˝192k1"

	)

347 
	#NID_£˝192k1
 711

	)

348 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

350 
	#SN_£˝224k1
 "£˝224k1"

	)

351 
	#NID_£˝224k1
 712

	)

352 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

354 
	#SN_£˝224r1
 "£˝224r1"

	)

355 
	#NID_£˝224r1
 713

	)

356 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

358 
	#SN_£˝256k1
 "£˝256k1"

	)

359 
	#NID_£˝256k1
 714

	)

360 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

362 
	#SN_£˝384r1
 "£˝384r1"

	)

363 
	#NID_£˝384r1
 715

	)

364 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

366 
	#SN_£˝521r1
 "£˝521r1"

	)

367 
	#NID_£˝521r1
 716

	)

368 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

370 
	#SN_£˘113r1
 "£˘113r1"

	)

371 
	#NID_£˘113r1
 717

	)

372 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

374 
	#SN_£˘113r2
 "£˘113r2"

	)

375 
	#NID_£˘113r2
 718

	)

376 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

378 
	#SN_£˘131r1
 "£˘131r1"

	)

379 
	#NID_£˘131r1
 719

	)

380 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

382 
	#SN_£˘131r2
 "£˘131r2"

	)

383 
	#NID_£˘131r2
 720

	)

384 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

386 
	#SN_£˘163k1
 "£˘163k1"

	)

387 
	#NID_£˘163k1
 721

	)

388 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

390 
	#SN_£˘163r1
 "£˘163r1"

	)

391 
	#NID_£˘163r1
 722

	)

392 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

394 
	#SN_£˘163r2
 "£˘163r2"

	)

395 
	#NID_£˘163r2
 723

	)

396 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

398 
	#SN_£˘193r1
 "£˘193r1"

	)

399 
	#NID_£˘193r1
 724

	)

400 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

402 
	#SN_£˘193r2
 "£˘193r2"

	)

403 
	#NID_£˘193r2
 725

	)

404 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

406 
	#SN_£˘233k1
 "£˘233k1"

	)

407 
	#NID_£˘233k1
 726

	)

408 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

410 
	#SN_£˘233r1
 "£˘233r1"

	)

411 
	#NID_£˘233r1
 727

	)

412 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

414 
	#SN_£˘239k1
 "£˘239k1"

	)

415 
	#NID_£˘239k1
 728

	)

416 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

418 
	#SN_£˘283k1
 "£˘283k1"

	)

419 
	#NID_£˘283k1
 729

	)

420 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

422 
	#SN_£˘283r1
 "£˘283r1"

	)

423 
	#NID_£˘283r1
 730

	)

424 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

426 
	#SN_£˘409k1
 "£˘409k1"

	)

427 
	#NID_£˘409k1
 731

	)

428 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

430 
	#SN_£˘409r1
 "£˘409r1"

	)

431 
	#NID_£˘409r1
 732

	)

432 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

434 
	#SN_£˘571k1
 "£˘571k1"

	)

435 
	#NID_£˘571k1
 733

	)

436 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

438 
	#SN_£˘571r1
 "£˘571r1"

	)

439 
	#NID_£˘571r1
 734

	)

440 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

442 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

444 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

445 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

446 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

448 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

449 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

450 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

452 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

453 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

454 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

456 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

457 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

458 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

460 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

461 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

462 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

464 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

465 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

466 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

468 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

469 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

470 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

472 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

473 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

474 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

476 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

477 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

478 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

480 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

481 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

482 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

484 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

485 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

486 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

488 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

489 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

490 
	#NID_ˇ°5_cbc
 108

	)

491 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

493 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

494 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

495 
	#NID_ˇ°5_ecb
 109

	)

497 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

498 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

499 
	#NID_ˇ°5_cfb64
 110

	)

501 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

502 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

503 
	#NID_ˇ°5_ofb64
 111

	)

505 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

506 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

507 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

509 
	#SN_id_Passw‹dBa£dMAC
 "id-Passw‹dBa£dMAC"

	)

510 
	#LN_id_Passw‹dBa£dMAC
 "∑ssw‹d ba£d MAC"

	)

511 
	#NID_id_Passw‹dBa£dMAC
 782

	)

512 
	#OBJ_id_Passw‹dBa£dMAC
 
OBJ_ISO_US
,113533L,7L,66L,13L

	)

514 
	#SN_id_DHBa£dMac
 "id-DHBa£dMac"

	)

515 
	#LN_id_DHBa£dMac
 "Diffõ-Hñlm™ ba£d MAC"

	)

516 
	#NID_id_DHBa£dMac
 783

	)

517 
	#OBJ_id_DHBa£dMac
 
OBJ_ISO_US
,113533L,7L,66L,30L

	)

519 
	#SN_rßdsi
 "rßdsi"

	)

520 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

521 
	#NID_rßdsi
 1

	)

522 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

524 
	#SN_pkcs
 "pkcs"

	)

525 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

526 
	#NID_pkcs
 2

	)

527 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

529 
	#SN_pkcs1
 "pkcs1"

	)

530 
	#NID_pkcs1
 186

	)

531 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

533 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

534 
	#NID_rßEn¸y±i⁄
 6

	)

535 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

537 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

538 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

539 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

540 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

542 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

543 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

544 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

545 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

547 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

548 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

549 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

550 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

552 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

553 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

554 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

555 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

557 
	#SN_rßesO´p
 "RSAES-OAEP"

	)

558 
	#LN_rßesO´p
 "rßesO´p"

	)

559 
	#NID_rßesO´p
 919

	)

560 
	#OBJ_rßesO´p
 
OBJ_pkcs1
,7L

	)

562 
	#SN_mgf1
 "MGF1"

	)

563 
	#LN_mgf1
 "mgf1"

	)

564 
	#NID_mgf1
 911

	)

565 
	#OBJ_mgf1
 
OBJ_pkcs1
,8L

	)

567 
	#SN_pS≥cifõd
 "PSPECIFIED"

	)

568 
	#LN_pS≥cifõd
 "pS≥cifõd"

	)

569 
	#NID_pS≥cifõd
 935

	)

570 
	#OBJ_pS≥cifõd
 
OBJ_pkcs1
,9L

	)

572 
	#SN_rßsßPss
 "RSASSA-PSS"

	)

573 
	#LN_rßsßPss
 "rßsßPss"

	)

574 
	#NID_rßsßPss
 912

	)

575 
	#OBJ_rßsßPss
 
OBJ_pkcs1
,10L

	)

577 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

578 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

579 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

580 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

582 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

583 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

584 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

585 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

587 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

588 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

589 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

590 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

592 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

593 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

594 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

595 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

597 
	#SN_sha512_224WôhRSAEn¸y±i⁄
 "RSA-SHA512/224"

	)

598 
	#LN_sha512_224WôhRSAEn¸y±i⁄
 "sha512-224WôhRSAEn¸y±i⁄"

	)

599 
	#NID_sha512_224WôhRSAEn¸y±i⁄
 1145

	)

600 
	#OBJ_sha512_224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,15L

	)

602 
	#SN_sha512_256WôhRSAEn¸y±i⁄
 "RSA-SHA512/256"

	)

603 
	#LN_sha512_256WôhRSAEn¸y±i⁄
 "sha512-256WôhRSAEn¸y±i⁄"

	)

604 
	#NID_sha512_256WôhRSAEn¸y±i⁄
 1146

	)

605 
	#OBJ_sha512_256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,16L

	)

607 
	#SN_pkcs3
 "pkcs3"

	)

608 
	#NID_pkcs3
 27

	)

609 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

611 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

612 
	#NID_dhKeyAgªemít
 28

	)

613 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

615 
	#SN_pkcs5
 "pkcs5"

	)

616 
	#NID_pkcs5
 187

	)

617 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

619 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

620 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

621 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

622 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

624 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

625 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

626 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

627 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

629 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

630 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

631 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

632 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

634 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

635 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

636 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

637 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

639 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

640 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

641 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

642 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

644 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

645 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

646 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

647 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

649 
	#LN_id_pbkdf2
 "PBKDF2"

	)

650 
	#NID_id_pbkdf2
 69

	)

651 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

653 
	#LN_pbes2
 "PBES2"

	)

654 
	#NID_pbes2
 161

	)

655 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

657 
	#LN_pbmac1
 "PBMAC1"

	)

658 
	#NID_pbmac1
 162

	)

659 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

661 
	#SN_pkcs7
 "pkcs7"

	)

662 
	#NID_pkcs7
 20

	)

663 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

665 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

666 
	#NID_pkcs7_d©a
 21

	)

667 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

669 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

670 
	#NID_pkcs7_sig√d
 22

	)

671 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

673 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

674 
	#NID_pkcs7_ívñ›ed
 23

	)

675 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

677 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

678 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

679 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

681 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

682 
	#NID_pkcs7_dige°
 25

	)

683 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

685 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

686 
	#NID_pkcs7_í¸y±ed
 26

	)

687 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

689 
	#SN_pkcs9
 "pkcs9"

	)

690 
	#NID_pkcs9
 47

	)

691 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

693 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

694 
	#NID_pkcs9_emaûAddªss
 48

	)

695 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

697 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

698 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

699 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

701 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

702 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

703 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

705 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

706 
	#NID_pkcs9_mesßgeDige°
 51

	)

707 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

709 
	#LN_pkcs9_signögTime
 "signögTime"

	)

710 
	#NID_pkcs9_signögTime
 52

	)

711 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

713 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

714 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

715 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

717 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

718 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

719 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

721 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

722 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

723 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

725 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

726 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

727 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

729 
	#SN_ext_ªq
 "extReq"

	)

730 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

731 
	#NID_ext_ªq
 172

	)

732 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

734 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

735 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

736 
	#NID_SMIMEC≠abûôõs
 167

	)

737 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

739 
	#SN_SMIME
 "SMIME"

	)

740 
	#LN_SMIME
 "S/MIME"

	)

741 
	#NID_SMIME
 188

	)

742 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

744 
	#SN_id_smime_mod
 "id-smime-mod"

	)

745 
	#NID_id_smime_mod
 189

	)

746 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

748 
	#SN_id_smime_˘
 "id-smime-˘"

	)

749 
	#NID_id_smime_˘
 190

	)

750 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

752 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

753 
	#NID_id_smime_Ø
 191

	)

754 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

756 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

757 
	#NID_id_smime_Æg
 192

	)

758 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

760 
	#SN_id_smime_cd
 "id-smime-cd"

	)

761 
	#NID_id_smime_cd
 193

	)

762 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

764 
	#SN_id_smime_•q
 "id-smime-•q"

	)

765 
	#NID_id_smime_•q
 194

	)

766 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

768 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

769 
	#NID_id_smime_˘i
 195

	)

770 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

772 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

773 
	#NID_id_smime_mod_cms
 196

	)

774 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

776 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

777 
	#NID_id_smime_mod_ess
 197

	)

778 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

780 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

781 
	#NID_id_smime_mod_oid
 198

	)

782 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

784 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

785 
	#NID_id_smime_mod_msg_v3
 199

	)

786 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

788 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

789 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

790 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

792 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

793 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

794 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

796 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

797 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

798 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

800 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

801 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

802 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

804 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

805 
	#NID_id_smime_˘_ª˚ùt
 204

	)

806 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

808 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

809 
	#NID_id_smime_˘_authD©a
 205

	)

810 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

812 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

813 
	#NID_id_smime_˘_publishCît
 206

	)

814 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

816 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

817 
	#NID_id_smime_˘_TSTInfo
 207

	)

818 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

820 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

821 
	#NID_id_smime_˘_TDTInfo
 208

	)

822 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

824 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

825 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

826 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

828 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

829 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

830 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

832 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

833 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

834 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

836 
	#SN_id_smime_˘_com¥es£dD©a
 "id-smime-˘-com¥es£dD©a"

	)

837 
	#NID_id_smime_˘_com¥es£dD©a
 786

	)

838 
	#OBJ_id_smime_˘_com¥es£dD©a
 
OBJ_id_smime_˘
,9L

	)

840 
	#SN_id_smime_˘_c⁄ã¡CﬁÀ˘i⁄
 "id-smime-˘-c⁄ã¡CﬁÀ˘i⁄"

	)

841 
	#NID_id_smime_˘_c⁄ã¡CﬁÀ˘i⁄
 1058

	)

842 
	#OBJ_id_smime_˘_c⁄ã¡CﬁÀ˘i⁄
 
OBJ_id_smime_˘
,19L

	)

844 
	#SN_id_smime_˘_authEnvñ›edD©a
 "id-smime-˘-authEnvñ›edD©a"

	)

845 
	#NID_id_smime_˘_authEnvñ›edD©a
 1059

	)

846 
	#OBJ_id_smime_˘_authEnvñ›edD©a
 
OBJ_id_smime_˘
,23L

	)

848 
	#SN_id_˘_asciiTextWôhCRLF
 "id-˘-asciiTextWôhCRLF"

	)

849 
	#NID_id_˘_asciiTextWôhCRLF
 787

	)

850 
	#OBJ_id_˘_asciiTextWôhCRLF
 
OBJ_id_smime_˘
,27L

	)

852 
	#SN_id_˘_xml
 "id-˘-xml"

	)

853 
	#NID_id_˘_xml
 1060

	)

854 
	#OBJ_id_˘_xml
 
OBJ_id_smime_˘
,28L

	)

856 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

857 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

858 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

860 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

861 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

862 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

864 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

865 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

866 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

868 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

869 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

870 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

872 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

873 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

874 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

876 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

877 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

878 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

880 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

881 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

882 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

884 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

885 
	#NID_id_smime_Ø_macVÆue
 219

	)

886 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

888 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

889 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

890 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

892 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

893 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

894 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

896 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

897 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

898 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

900 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

901 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

902 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

904 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

905 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

906 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

908 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

909 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

910 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

912 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

913 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

914 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

916 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

917 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

918 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

920 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

921 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

922 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

924 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

925 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

926 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

928 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

929 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

930 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

932 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

933 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

934 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

936 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

937 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

938 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

940 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

941 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

942 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

944 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

945 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

946 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

948 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

949 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

950 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

952 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

953 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

954 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

956 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

957 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

958 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

960 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

961 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

962 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

964 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

965 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

966 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

968 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

969 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

970 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

972 
	#SN_id_smime_Ø_signögCîtifiˇãV2
 "id-smime-Ø-signögCîtifiˇãV2"

	)

973 
	#NID_id_smime_Ø_signögCîtifiˇãV2
 1086

	)

974 
	#OBJ_id_smime_Ø_signögCîtifiˇãV2
 
OBJ_id_smime_Ø
,47L

	)

976 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

977 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

978 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

980 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

981 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

982 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

984 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

985 
	#NID_id_smime_Æg_3DESwøp
 243

	)

986 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

988 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

989 
	#NID_id_smime_Æg_RC2wøp
 244

	)

990 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

992 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

993 
	#NID_id_smime_Æg_ESDH
 245

	)

994 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

996 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

997 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

998 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

1000 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

1001 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

1002 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

1004 
	#SN_id_Æg_PWRI_KEK
 "id-Æg-PWRI-KEK"

	)

1005 
	#NID_id_Æg_PWRI_KEK
 893

	)

1006 
	#OBJ_id_Æg_PWRI_KEK
 
OBJ_id_smime_Æg
,9L

	)

1008 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

1009 
	#NID_id_smime_cd_ld≠
 248

	)

1010 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

1012 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

1013 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

1014 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

1016 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

1017 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

1018 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

1020 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

1021 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

1022 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

1024 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

1025 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

1026 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

1028 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

1029 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

1030 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

1032 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

1033 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

1034 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

1036 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

1037 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

1038 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

1040 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

1041 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

1042 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

1044 
	#LN_‰õndlyName
 "‰õndlyName"

	)

1045 
	#NID_‰õndlyName
 156

	)

1046 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

1048 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

1049 
	#NID_loˇlKeyID
 157

	)

1050 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

1052 
	#SN_ms_c•_«me
 "CSPName"

	)

1053 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

1054 
	#NID_ms_c•_«me
 417

	)

1055 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

1057 
	#SN_LoˇlKeySë
 "LoˇlKeySë"

	)

1058 
	#LN_LoˇlKeySë
 "Mi¸oso· Loˇ»Key së"

	)

1059 
	#NID_LoˇlKeySë
 856

	)

1060 
	#OBJ_LoˇlKeySë
 1L,3L,6L,1L,4L,1L,311L,17L,2L

	)

1062 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

1064 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

1065 
	#NID_x509Cîtifiˇã
 158

	)

1066 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

1068 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

1069 
	#NID_sdsiCîtifiˇã
 159

	)

1070 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

1072 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

1074 
	#LN_x509Cæ
 "x509Cæ"

	)

1075 
	#NID_x509Cæ
 160

	)

1076 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

1078 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

1080 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1082 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1083 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1084 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1085 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1087 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1088 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1089 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1090 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1092 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1093 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1094 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1095 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1097 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1098 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1099 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1100 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1102 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1103 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1104 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1105 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1107 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1108 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1109 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1110 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1112 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1114 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1116 
	#LN_keyBag
 "keyBag"

	)

1117 
	#NID_keyBag
 150

	)

1118 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1120 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1121 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1122 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1124 
	#LN_˚πBag
 "˚πBag"

	)

1125 
	#NID_˚πBag
 152

	)

1126 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1128 
	#LN_¸lBag
 "¸lBag"

	)

1129 
	#NID_¸lBag
 153

	)

1130 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1132 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1133 
	#NID_£¸ëBag
 154

	)

1134 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1136 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1137 
	#NID_ß„C⁄ã¡sBag
 155

	)

1138 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1140 
	#SN_md2
 "MD2"

	)

1141 
	#LN_md2
 "md2"

	)

1142 
	#NID_md2
 3

	)

1143 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1145 
	#SN_md4
 "MD4"

	)

1146 
	#LN_md4
 "md4"

	)

1147 
	#NID_md4
 257

	)

1148 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1150 
	#SN_md5
 "MD5"

	)

1151 
	#LN_md5
 "md5"

	)

1152 
	#NID_md5
 4

	)

1153 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1155 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1156 
	#LN_md5_sha1
 "md5-sha1"

	)

1157 
	#NID_md5_sha1
 114

	)

1159 
	#LN_hmacWôhMD5
 "hmacWôhMD5"

	)

1160 
	#NID_hmacWôhMD5
 797

	)

1161 
	#OBJ_hmacWôhMD5
 
OBJ_rßdsi
,2L,6L

	)

1163 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1164 
	#NID_hmacWôhSHA1
 163

	)

1165 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1167 
	#SN_sm2
 "SM2"

	)

1168 
	#LN_sm2
 "sm2"

	)

1169 
	#NID_sm2
 1172

	)

1170 
	#OBJ_sm2
 
OBJ_sm_scheme
,301L

	)

1172 
	#SN_sm3
 "SM3"

	)

1173 
	#LN_sm3
 "sm3"

	)

1174 
	#NID_sm3
 1143

	)

1175 
	#OBJ_sm3
 
OBJ_sm_scheme
,401L

	)

1177 
	#SN_sm3WôhRSAEn¸y±i⁄
 "RSA-SM3"

	)

1178 
	#LN_sm3WôhRSAEn¸y±i⁄
 "sm3WôhRSAEn¸y±i⁄"

	)

1179 
	#NID_sm3WôhRSAEn¸y±i⁄
 1144

	)

1180 
	#OBJ_sm3WôhRSAEn¸y±i⁄
 
OBJ_sm_scheme
,504L

	)

1182 
	#LN_hmacWôhSHA224
 "hmacWôhSHA224"

	)

1183 
	#NID_hmacWôhSHA224
 798

	)

1184 
	#OBJ_hmacWôhSHA224
 
OBJ_rßdsi
,2L,8L

	)

1186 
	#LN_hmacWôhSHA256
 "hmacWôhSHA256"

	)

1187 
	#NID_hmacWôhSHA256
 799

	)

1188 
	#OBJ_hmacWôhSHA256
 
OBJ_rßdsi
,2L,9L

	)

1190 
	#LN_hmacWôhSHA384
 "hmacWôhSHA384"

	)

1191 
	#NID_hmacWôhSHA384
 800

	)

1192 
	#OBJ_hmacWôhSHA384
 
OBJ_rßdsi
,2L,10L

	)

1194 
	#LN_hmacWôhSHA512
 "hmacWôhSHA512"

	)

1195 
	#NID_hmacWôhSHA512
 801

	)

1196 
	#OBJ_hmacWôhSHA512
 
OBJ_rßdsi
,2L,11L

	)

1198 
	#LN_hmacWôhSHA512_224
 "hmacWôhSHA512-224"

	)

1199 
	#NID_hmacWôhSHA512_224
 1193

	)

1200 
	#OBJ_hmacWôhSHA512_224
 
OBJ_rßdsi
,2L,12L

	)

1202 
	#LN_hmacWôhSHA512_256
 "hmacWôhSHA512-256"

	)

1203 
	#NID_hmacWôhSHA512_256
 1194

	)

1204 
	#OBJ_hmacWôhSHA512_256
 
OBJ_rßdsi
,2L,13L

	)

1206 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1207 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1208 
	#NID_rc2_cbc
 37

	)

1209 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1211 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1212 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1213 
	#NID_rc2_ecb
 38

	)

1215 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1216 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1217 
	#NID_rc2_cfb64
 39

	)

1219 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1220 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1221 
	#NID_rc2_ofb64
 40

	)

1223 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1224 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1225 
	#NID_rc2_40_cbc
 98

	)

1227 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1228 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1229 
	#NID_rc2_64_cbc
 166

	)

1231 
	#SN_rc4
 "RC4"

	)

1232 
	#LN_rc4
 "rc4"

	)

1233 
	#NID_rc4
 5

	)

1234 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1236 
	#SN_rc4_40
 "RC4-40"

	)

1237 
	#LN_rc4_40
 "rc4-40"

	)

1238 
	#NID_rc4_40
 97

	)

1240 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1241 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1242 
	#NID_des_ede3_cbc
 44

	)

1243 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1245 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1246 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1247 
	#NID_rc5_cbc
 120

	)

1248 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1250 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1251 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1252 
	#NID_rc5_ecb
 121

	)

1254 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1255 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1256 
	#NID_rc5_cfb64
 122

	)

1258 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1259 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1260 
	#NID_rc5_ofb64
 123

	)

1262 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1263 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1264 
	#NID_ms_ext_ªq
 171

	)

1265 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1267 
	#SN_ms_code_öd
 "msCodeInd"

	)

1268 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1269 
	#NID_ms_code_öd
 134

	)

1270 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1272 
	#SN_ms_code_com
 "msCodeCom"

	)

1273 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1274 
	#NID_ms_code_com
 135

	)

1275 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1277 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1278 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1279 
	#NID_ms_˘l_sign
 136

	)

1280 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1282 
	#SN_ms_sgc
 "msSGC"

	)

1283 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1284 
	#NID_ms_sgc
 137

	)

1285 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1287 
	#SN_ms_efs
 "msEFS"

	)

1288 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1289 
	#NID_ms_efs
 138

	)

1290 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1292 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1293 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrd Logö"

	)

1294 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1295 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1297 
	#SN_ms_u≤
 "msUPN"

	)

1298 
	#LN_ms_u≤
 "Mi¸oso· U£∏PröcùÆ Name"

	)

1299 
	#NID_ms_u≤
 649

	)

1300 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1302 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1303 
	#LN_idó_cbc
 "idó-cbc"

	)

1304 
	#NID_idó_cbc
 34

	)

1305 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1307 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1308 
	#LN_idó_ecb
 "idó-ecb"

	)

1309 
	#NID_idó_ecb
 36

	)

1311 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1312 
	#LN_idó_cfb64
 "idó-cfb"

	)

1313 
	#NID_idó_cfb64
 35

	)

1315 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1316 
	#LN_idó_ofb64
 "idó-ofb"

	)

1317 
	#NID_idó_ofb64
 46

	)

1319 
	#SN_bf_cbc
 "BF-CBC"

	)

1320 
	#LN_bf_cbc
 "bf-cbc"

	)

1321 
	#NID_bf_cbc
 91

	)

1322 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1324 
	#SN_bf_ecb
 "BF-ECB"

	)

1325 
	#LN_bf_ecb
 "bf-ecb"

	)

1326 
	#NID_bf_ecb
 92

	)

1328 
	#SN_bf_cfb64
 "BF-CFB"

	)

1329 
	#LN_bf_cfb64
 "bf-cfb"

	)

1330 
	#NID_bf_cfb64
 93

	)

1332 
	#SN_bf_ofb64
 "BF-OFB"

	)

1333 
	#LN_bf_ofb64
 "bf-ofb"

	)

1334 
	#NID_bf_ofb64
 94

	)

1336 
	#SN_id_pkix
 "PKIX"

	)

1337 
	#NID_id_pkix
 127

	)

1338 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1340 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1341 
	#NID_id_pkix_mod
 258

	)

1342 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1344 
	#SN_id_≥
 "id-≥"

	)

1345 
	#NID_id_≥
 175

	)

1346 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1348 
	#SN_id_qt
 "id-qt"

	)

1349 
	#NID_id_qt
 259

	)

1350 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1352 
	#SN_id_kp
 "id-kp"

	)

1353 
	#NID_id_kp
 128

	)

1354 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1356 
	#SN_id_ô
 "id-ô"

	)

1357 
	#NID_id_ô
 260

	)

1358 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1360 
	#SN_id_pkù
 "id-pkù"

	)

1361 
	#NID_id_pkù
 261

	)

1362 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1364 
	#SN_id_Æg
 "id-Æg"

	)

1365 
	#NID_id_Æg
 262

	)

1366 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1368 
	#SN_id_cmc
 "id-cmc"

	)

1369 
	#NID_id_cmc
 263

	)

1370 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1372 
	#SN_id_⁄
 "id-⁄"

	)

1373 
	#NID_id_⁄
 264

	)

1374 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1376 
	#SN_id_pda
 "id-pda"

	)

1377 
	#NID_id_pda
 265

	)

1378 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1380 
	#SN_id_aˇ
 "id-aˇ"

	)

1381 
	#NID_id_aˇ
 266

	)

1382 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1384 
	#SN_id_qcs
 "id-qcs"

	)

1385 
	#NID_id_qcs
 267

	)

1386 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1388 
	#SN_id_c˘
 "id-c˘"

	)

1389 
	#NID_id_c˘
 268

	)

1390 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1392 
	#SN_id_µl
 "id-µl"

	)

1393 
	#NID_id_µl
 662

	)

1394 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1396 
	#SN_id_ad
 "id-ad"

	)

1397 
	#NID_id_ad
 176

	)

1398 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1400 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1401 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1402 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1404 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1405 
	#NID_id_pkix1_im∂icô_88
 270

	)

1406 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1408 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1409 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1410 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1412 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1413 
	#NID_id_pkix1_im∂icô_93
 272

	)

1414 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1416 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1417 
	#NID_id_mod_¸mf
 273

	)

1418 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1420 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1421 
	#NID_id_mod_cmc
 274

	)

1422 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1424 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1425 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1426 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1428 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1429 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1430 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1432 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1433 
	#NID_id_mod_cmp
 277

	)

1434 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1436 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1437 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1438 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1440 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1441 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1442 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1444 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1445 
	#NID_id_mod_©åibuã_˚π
 280

	)

1446 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1448 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1449 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1450 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1452 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1453 
	#NID_id_mod_oc•
 282

	)

1454 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1456 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1457 
	#NID_id_mod_dvcs
 283

	)

1458 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1460 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1461 
	#NID_id_mod_cmp2000
 284

	)

1462 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1464 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1465 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1466 
	#NID_öfo_ac˚ss
 177

	)

1467 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1469 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1470 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1471 
	#NID_biomëricInfo
 285

	)

1472 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1474 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1475 
	#NID_qcSèãmíts
 286

	)

1476 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1478 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1479 
	#NID_ac_audôE¡ôy
 287

	)

1480 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1482 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1483 
	#NID_ac_èrgëög
 288

	)

1484 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1486 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1487 
	#NID_ØC⁄åﬁs
 289

	)

1488 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1490 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1491 
	#NID_sbgp_ùAddrBlock
 290

	)

1492 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1494 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1495 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1496 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1498 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1499 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1500 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1502 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1503 
	#NID_ac_¥oxyög
 397

	)

1504 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1506 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1507 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1508 
	#NID_söfo_ac˚ss
 398

	)

1509 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1511 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1512 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1513 
	#NID_¥oxyCîtInfo
 663

	)

1514 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1516 
	#SN_és„©uª
 "és„©uª"

	)

1517 
	#LN_és„©uª
 "TLS Fótuª"

	)

1518 
	#NID_és„©uª
 1020

	)

1519 
	#OBJ_és„©uª
 
OBJ_id_≥
,24L

	)

1521 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1522 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1523 
	#NID_id_qt_˝s
 164

	)

1524 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1526 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1527 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1528 
	#NID_id_qt_unŸi˚
 165

	)

1529 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1531 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1532 
	#NID_ãxtNŸi˚
 293

	)

1533 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1535 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1536 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1537 
	#NID_£rvî_auth
 129

	)

1538 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1540 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1541 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1542 
	#NID_˛õ¡_auth
 130

	)

1543 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1545 
	#SN_code_sign
 "codeSignög"

	)

1546 
	#LN_code_sign
 "CodêSignög"

	)

1547 
	#NID_code_sign
 131

	)

1548 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1550 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1551 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1552 
	#NID_emaû_¥Ÿe˘
 132

	)

1553 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1555 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1556 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1557 
	#NID_ù£cEndSy°em
 294

	)

1558 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1560 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1561 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1562 
	#NID_ù£cTu¬ñ
 295

	)

1563 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1565 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1566 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1567 
	#NID_ù£cU£r
 296

	)

1568 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1570 
	#SN_time_°amp
 "timeSèmpög"

	)

1571 
	#LN_time_°amp
 "TimêSèmpög"

	)

1572 
	#NID_time_°amp
 133

	)

1573 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1575 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1576 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1577 
	#NID_OCSP_sign
 180

	)

1578 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1580 
	#SN_dvcs
 "DVCS"

	)

1581 
	#LN_dvcs
 "dvcs"

	)

1582 
	#NID_dvcs
 297

	)

1583 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1585 
	#SN_ù£c_IKE
 "ù£cIKE"

	)

1586 
	#LN_ù£c_IKE
 "ù£¯I¡î√àKey Exch™ge"

	)

1587 
	#NID_ù£c_IKE
 1022

	)

1588 
	#OBJ_ù£c_IKE
 
OBJ_id_kp
,17L

	)

1590 
	#SN_ˇpw≠AC
 "ˇpw≠AC"

	)

1591 
	#LN_ˇpw≠AC
 "Cål/¥ovisi⁄ WAP Ac˚ss"

	)

1592 
	#NID_ˇpw≠AC
 1023

	)

1593 
	#OBJ_ˇpw≠AC
 
OBJ_id_kp
,18L

	)

1595 
	#SN_ˇpw≠WTP
 "ˇpw≠WTP"

	)

1596 
	#LN_ˇpw≠WTP
 "Cål/Provisi⁄ WAP Tîmö©i⁄"

	)

1597 
	#NID_ˇpw≠WTP
 1024

	)

1598 
	#OBJ_ˇpw≠WTP
 
OBJ_id_kp
,19L

	)

1600 
	#SN_sshClõ¡
 "£cuªShñlClõ¡"

	)

1601 
	#LN_sshClõ¡
 "SSH Clõ¡"

	)

1602 
	#NID_sshClõ¡
 1025

	)

1603 
	#OBJ_sshClõ¡
 
OBJ_id_kp
,21L

	)

1605 
	#SN_sshSîvî
 "£cuªShñlSîvî"

	)

1606 
	#LN_sshSîvî
 "SSH Sîvî"

	)

1607 
	#NID_sshSîvî
 1026

	)

1608 
	#OBJ_sshSîvî
 
OBJ_id_kp
,22L

	)

1610 
	#SN_£ndRouãr
 "£ndRouãr"

	)

1611 
	#LN_£ndRouãr
 "Síd Rouãr"

	)

1612 
	#NID_£ndRouãr
 1027

	)

1613 
	#OBJ_£ndRouãr
 
OBJ_id_kp
,23L

	)

1615 
	#SN_£ndProxõdRouãr
 "£ndProxõdRouãr"

	)

1616 
	#LN_£ndProxõdRouãr
 "Síd Proxõd Rouãr"

	)

1617 
	#NID_£ndProxõdRouãr
 1028

	)

1618 
	#OBJ_£ndProxõdRouãr
 
OBJ_id_kp
,24L

	)

1620 
	#SN_£ndOw√r
 "£ndOw√r"

	)

1621 
	#LN_£ndOw√r
 "Síd Ow√r"

	)

1622 
	#NID_£ndOw√r
 1029

	)

1623 
	#OBJ_£ndOw√r
 
OBJ_id_kp
,25L

	)

1625 
	#SN_£ndProxõdOw√r
 "£ndProxõdOw√r"

	)

1626 
	#LN_£ndProxõdOw√r
 "Síd Proxõd Ow√r"

	)

1627 
	#NID_£ndProxõdOw√r
 1030

	)

1628 
	#OBJ_£ndProxõdOw√r
 
OBJ_id_kp
,26L

	)

1630 
	#SN_cmcCA
 "cmcCA"

	)

1631 
	#LN_cmcCA
 "CMC Cîtifiˇã Auth‹ôy"

	)

1632 
	#NID_cmcCA
 1131

	)

1633 
	#OBJ_cmcCA
 
OBJ_id_kp
,27L

	)

1635 
	#SN_cmcRA
 "cmcRA"

	)

1636 
	#LN_cmcRA
 "CMC Regi°øti⁄ Auth‹ôy"

	)

1637 
	#NID_cmcRA
 1132

	)

1638 
	#OBJ_cmcRA
 
OBJ_id_kp
,28L

	)

1640 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1641 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1642 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1644 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1645 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1646 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1648 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1649 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1650 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1652 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1653 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1654 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1656 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1657 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1658 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1660 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1661 
	#NID_id_ô_cuºítCRL
 303

	)

1662 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1664 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1665 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1666 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1668 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1669 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1670 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1672 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1673 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1674 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1676 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1677 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1678 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1680 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1681 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1682 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1684 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1685 
	#NID_id_ô_ªvPas•hø£
 309

	)

1686 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1688 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1689 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1690 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1692 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1693 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1694 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1696 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1697 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1698 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1700 
	#SN_id_ô_suµL™gTags
 "id-ô-suµL™gTags"

	)

1701 
	#NID_id_ô_suµL™gTags
 784

	)

1702 
	#OBJ_id_ô_suµL™gTags
 
OBJ_id_ô
,16L

	)

1704 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1705 
	#NID_id_ªgCål
 313

	)

1706 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1708 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1709 
	#NID_id_ªgInfo
 314

	)

1710 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1712 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1713 
	#NID_id_ªgCål_ªgTokí
 315

	)

1714 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1716 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1717 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1718 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1720 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1721 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1722 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1724 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1725 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1726 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1728 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1729 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1730 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1732 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1733 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1734 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1736 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1737 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1738 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1740 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1741 
	#NID_id_ªgInfo_˚πReq
 322

	)

1742 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1744 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1745 
	#NID_id_Æg_des40
 323

	)

1746 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1748 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1749 
	#NID_id_Æg_noSig«tuª
 324

	)

1750 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1752 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1753 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1754 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1756 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1757 
	#NID_id_Æg_dh_p›
 326

	)

1758 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1760 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1761 
	#NID_id_cmc_°©usInfo
 327

	)

1762 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1764 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1765 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1766 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1768 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1769 
	#NID_id_cmc_idítôyProof
 329

	)

1770 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1772 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1773 
	#NID_id_cmc_d©aRëu∫
 330

	)

1774 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1776 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1777 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1778 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1780 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1781 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1782 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1784 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1785 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1786 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1788 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1789 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1790 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1792 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1793 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1794 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1796 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1797 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1798 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1800 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1801 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1802 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1804 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1805 
	#NID_id_cmc_gëCît
 338

	)

1806 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1808 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1809 
	#NID_id_cmc_gëCRL
 339

	)

1810 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1812 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1813 
	#NID_id_cmc_ªvokeReque°
 340

	)

1814 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1816 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1817 
	#NID_id_cmc_ªgInfo
 341

	)

1818 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1820 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1821 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1822 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1824 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1825 
	#NID_id_cmc_quîyPídög
 343

	)

1826 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1828 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1829 
	#NID_id_cmc_p›LökR™dom
 344

	)

1830 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1832 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1833 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1834 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1836 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1837 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1838 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1840 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1841 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1842 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1844 
	#SN_id_⁄_≥rm™ítIdítifõr
 "id-⁄-≥rm™ítIdítifõr"

	)

1845 
	#LN_id_⁄_≥rm™ítIdítifõr
 "Pîm™íàIdítifõr"

	)

1846 
	#NID_id_⁄_≥rm™ítIdítifõr
 858

	)

1847 
	#OBJ_id_⁄_≥rm™ítIdítifõr
 
OBJ_id_⁄
,3L

	)

1849 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1850 
	#NID_id_pda_d©eOfBúth
 348

	)

1851 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1853 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1854 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1855 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1857 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1858 
	#NID_id_pda_gídî
 351

	)

1859 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1861 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1862 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1863 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1865 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1866 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1867 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1869 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1870 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1871 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1873 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1874 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1875 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1877 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1878 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1879 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1881 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1882 
	#NID_id_aˇ_group
 357

	)

1883 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1885 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1886 
	#NID_id_aˇ_rﬁe
 358

	)

1887 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1889 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1890 
	#NID_id_aˇ_ícAârs
 399

	)

1891 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1893 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1894 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1895 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1897 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

1898 
	#NID_id_c˘_¸s
 360

	)

1899 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

1901 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

1902 
	#NID_id_c˘_PKID©a
 361

	)

1903 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

1905 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

1906 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

1907 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

1909 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1910 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

1911 
	#NID_id_µl_™yL™guage
 664

	)

1912 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1914 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

1915 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

1916 
	#NID_id_µl_öhîôAŒ
 665

	)

1917 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

1919 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

1920 
	#LN_Indïídít
 "Indïídít"

	)

1921 
	#NID_Indïídít
 667

	)

1922 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

1924 
	#SN_ad_OCSP
 "OCSP"

	)

1925 
	#LN_ad_OCSP
 "OCSP"

	)

1926 
	#NID_ad_OCSP
 178

	)

1927 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1929 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

1930 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

1931 
	#NID_ad_ˇ_issuîs
 179

	)

1932 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

1934 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

1935 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

1936 
	#NID_ad_timeSèmpög
 363

	)

1937 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

1939 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1940 
	#LN_ad_dvcs
 "ad dvcs"

	)

1941 
	#NID_ad_dvcs
 364

	)

1942 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1944 
	#SN_ˇRïosô‹y
 "ˇRïosô‹y"

	)

1945 
	#LN_ˇRïosô‹y
 "CA Rïosô‹y"

	)

1946 
	#NID_ˇRïosô‹y
 785

	)

1947 
	#OBJ_ˇRïosô‹y
 
OBJ_id_ad
,5L

	)

1949 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1951 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

1952 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

1953 
	#NID_id_pkix_OCSP_basic
 365

	)

1954 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1956 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

1957 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

1958 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

1959 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

1961 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

1962 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

1963 
	#NID_id_pkix_OCSP_CæID
 367

	)

1964 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

1966 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

1967 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

1968 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

1969 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

1971 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1972 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

1973 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1974 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1976 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

1977 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

1978 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

1979 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1981 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

1982 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

1983 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

1984 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

1986 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

1987 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

1988 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

1989 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

1991 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

1992 
	#NID_id_pkix_OCSP_vÆid
 373

	)

1993 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

1995 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

1996 
	#NID_id_pkix_OCSP_∑th
 374

	)

1997 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

1999 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

2000 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

2001 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

2002 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

2004 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

2005 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

2006 
	#NID_Æg‹ôhm
 376

	)

2007 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

2009 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

2010 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

2011 
	#NID_md5WôhRSA
 104

	)

2012 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

2014 
	#SN_des_ecb
 "DES-ECB"

	)

2015 
	#LN_des_ecb
 "des-ecb"

	)

2016 
	#NID_des_ecb
 29

	)

2017 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

2019 
	#SN_des_cbc
 "DES-CBC"

	)

2020 
	#LN_des_cbc
 "des-cbc"

	)

2021 
	#NID_des_cbc
 31

	)

2022 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

2024 
	#SN_des_ofb64
 "DES-OFB"

	)

2025 
	#LN_des_ofb64
 "des-ofb"

	)

2026 
	#NID_des_ofb64
 45

	)

2027 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

2029 
	#SN_des_cfb64
 "DES-CFB"

	)

2030 
	#LN_des_cfb64
 "des-cfb"

	)

2031 
	#NID_des_cfb64
 30

	)

2032 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

2034 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

2035 
	#NID_rßSig«tuª
 377

	)

2036 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

2038 
	#SN_dß_2
 "DSA-ﬁd"

	)

2039 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

2040 
	#NID_dß_2
 67

	)

2041 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

2043 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

2044 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

2045 
	#NID_dßWôhSHA
 66

	)

2046 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

2048 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

2049 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

2050 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

2051 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

2053 
	#SN_des_ede_ecb
 "DES-EDE"

	)

2054 
	#LN_des_ede_ecb
 "des-ede"

	)

2055 
	#NID_des_ede_ecb
 32

	)

2056 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

2058 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

2059 
	#LN_des_ede3_ecb
 "des-ede3"

	)

2060 
	#NID_des_ede3_ecb
 33

	)

2062 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

2063 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

2064 
	#NID_des_ede_cbc
 43

	)

2066 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

2067 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

2068 
	#NID_des_ede_cfb64
 60

	)

2070 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

2071 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

2072 
	#NID_des_ede3_cfb64
 61

	)

2074 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

2075 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

2076 
	#NID_des_ede_ofb64
 62

	)

2078 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

2079 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

2080 
	#NID_des_ede3_ofb64
 63

	)

2082 
	#SN_desx_cbc
 "DESX-CBC"

	)

2083 
	#LN_desx_cbc
 "desx-cbc"

	)

2084 
	#NID_desx_cbc
 80

	)

2086 
	#SN_sha
 "SHA"

	)

2087 
	#LN_sha
 "sha"

	)

2088 
	#NID_sha
 41

	)

2089 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

2091 
	#SN_sha1
 "SHA1"

	)

2092 
	#LN_sha1
 "sha1"

	)

2093 
	#NID_sha1
 64

	)

2094 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

2096 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

2097 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

2098 
	#NID_dßWôhSHA1_2
 70

	)

2099 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

2101 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

2102 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

2103 
	#NID_sha1WôhRSA
 115

	)

2104 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

2106 
	#SN_rùemd160
 "RIPEMD160"

	)

2107 
	#LN_rùemd160
 "rùemd160"

	)

2108 
	#NID_rùemd160
 117

	)

2109 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

2111 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

2112 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

2113 
	#NID_rùemd160WôhRSA
 119

	)

2114 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

2116 
	#SN_bœke2b512
 "BLAKE2b512"

	)

2117 
	#LN_bœke2b512
 "bœke2b512"

	)

2118 
	#NID_bœke2b512
 1056

	)

2119 
	#OBJ_bœke2b512
 1L,3L,6L,1L,4L,1L,1722L,12L,2L,1L,16L

	)

2121 
	#SN_bœke2s256
 "BLAKE2s256"

	)

2122 
	#LN_bœke2s256
 "bœke2s256"

	)

2123 
	#NID_bœke2s256
 1057

	)

2124 
	#OBJ_bœke2s256
 1L,3L,6L,1L,4L,1L,1722L,12L,2L,2L,8L

	)

2126 
	#SN_sx√t
 "SXNëID"

	)

2127 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

2128 
	#NID_sx√t
 143

	)

2129 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

2131 
	#SN_X500
 "X500"

	)

2132 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

2133 
	#NID_X500
 11

	)

2134 
	#OBJ_X500
 2L,5L

	)

2136 
	#SN_X509
 "X509"

	)

2137 
	#NID_X509
 12

	)

2138 
	#OBJ_X509
 
OBJ_X500
,4L

	)

2140 
	#SN_comm⁄Name
 "CN"

	)

2141 
	#LN_comm⁄Name
 "comm⁄Name"

	)

2142 
	#NID_comm⁄Name
 13

	)

2143 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

2145 
	#SN_su∫ame
 "SN"

	)

2146 
	#LN_su∫ame
 "su∫ame"

	)

2147 
	#NID_su∫ame
 100

	)

2148 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

2150 
	#LN_£rülNumbî
 "£rülNumbî"

	)

2151 
	#NID_£rülNumbî
 105

	)

2152 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

2154 
	#SN_cou¡ryName
 "C"

	)

2155 
	#LN_cou¡ryName
 "cou¡ryName"

	)

2156 
	#NID_cou¡ryName
 14

	)

2157 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

2159 
	#SN_loˇlôyName
 "L"

	)

2160 
	#LN_loˇlôyName
 "loˇlôyName"

	)

2161 
	#NID_loˇlôyName
 15

	)

2162 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

2164 
	#SN_°©eOrProvö˚Name
 "ST"

	)

2165 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

2166 
	#NID_°©eOrProvö˚Name
 16

	)

2167 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

2169 
	#SN_°ªëAddªss
 "°ªë"

	)

2170 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

2171 
	#NID_°ªëAddªss
 660

	)

2172 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

2174 
	#SN_‹g™iz©i⁄Name
 "O"

	)

2175 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

2176 
	#NID_‹g™iz©i⁄Name
 17

	)

2177 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

2179 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

2180 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

2181 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

2182 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

2184 
	#SN_tôÀ
 "tôÀ"

	)

2185 
	#LN_tôÀ
 "tôÀ"

	)

2186 
	#NID_tôÀ
 106

	)

2187 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

2189 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

2190 
	#NID_des¸ùti⁄
 107

	)

2191 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

2193 
	#LN_£¨chGuide
 "£¨chGuide"

	)

2194 
	#NID_£¨chGuide
 859

	)

2195 
	#OBJ_£¨chGuide
 
OBJ_X509
,14L

	)

2197 
	#LN_busöessC©eg‹y
 "busöessC©eg‹y"

	)

2198 
	#NID_busöessC©eg‹y
 860

	)

2199 
	#OBJ_busöessC©eg‹y
 
OBJ_X509
,15L

	)

2201 
	#LN_po°ÆAddªss
 "po°ÆAddªss"

	)

2202 
	#NID_po°ÆAddªss
 861

	)

2203 
	#OBJ_po°ÆAddªss
 
OBJ_X509
,16L

	)

2205 
	#LN_po°ÆCode
 "po°ÆCode"

	)

2206 
	#NID_po°ÆCode
 661

	)

2207 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

2209 
	#LN_po°Offi˚Box
 "po°Offi˚Box"

	)

2210 
	#NID_po°Offi˚Box
 862

	)

2211 
	#OBJ_po°Offi˚Box
 
OBJ_X509
,18L

	)

2213 
	#LN_physiˇlDñivîyOffi˚Name
 "physiˇlDñivîyOffi˚Name"

	)

2214 
	#NID_physiˇlDñivîyOffi˚Name
 863

	)

2215 
	#OBJ_physiˇlDñivîyOffi˚Name
 
OBJ_X509
,19L

	)

2217 
	#LN_ãÀph⁄eNumbî
 "ãÀph⁄eNumbî"

	)

2218 
	#NID_ãÀph⁄eNumbî
 864

	)

2219 
	#OBJ_ãÀph⁄eNumbî
 
OBJ_X509
,20L

	)

2221 
	#LN_ãÀxNumbî
 "ãÀxNumbî"

	)

2222 
	#NID_ãÀxNumbî
 865

	)

2223 
	#OBJ_ãÀxNumbî
 
OBJ_X509
,21L

	)

2225 
	#LN_ãÀãxTîmöÆIdítifõr
 "ãÀãxTîmöÆIdítifõr"

	)

2226 
	#NID_ãÀãxTîmöÆIdítifõr
 866

	)

2227 
	#OBJ_ãÀãxTîmöÆIdítifõr
 
OBJ_X509
,22L

	)

2229 
	#LN_ÁcsimûeTñïh⁄eNumbî
 "ÁcsimûeTñïh⁄eNumbî"

	)

2230 
	#NID_ÁcsimûeTñïh⁄eNumbî
 867

	)

2231 
	#OBJ_ÁcsimûeTñïh⁄eNumbî
 
OBJ_X509
,23L

	)

2233 
	#LN_x121Addªss
 "x121Addªss"

	)

2234 
	#NID_x121Addªss
 868

	)

2235 
	#OBJ_x121Addªss
 
OBJ_X509
,24L

	)

2237 
	#LN_öã∫©i⁄ÆiSDNNumbî
 "öã∫©i⁄ÆiSDNNumbî"

	)

2238 
	#NID_öã∫©i⁄ÆiSDNNumbî
 869

	)

2239 
	#OBJ_öã∫©i⁄ÆiSDNNumbî
 
OBJ_X509
,25L

	)

2241 
	#LN_ªgi°îedAddªss
 "ªgi°îedAddªss"

	)

2242 
	#NID_ªgi°îedAddªss
 870

	)

2243 
	#OBJ_ªgi°îedAddªss
 
OBJ_X509
,26L

	)

2245 
	#LN_de°ö©i⁄Indiˇt‹
 "de°ö©i⁄Indiˇt‹"

	)

2246 
	#NID_de°ö©i⁄Indiˇt‹
 871

	)

2247 
	#OBJ_de°ö©i⁄Indiˇt‹
 
OBJ_X509
,27L

	)

2249 
	#LN_¥e„ºedDñivîyMëhod
 "¥e„ºedDñivîyMëhod"

	)

2250 
	#NID_¥e„ºedDñivîyMëhod
 872

	)

2251 
	#OBJ_¥e„ºedDñivîyMëhod
 
OBJ_X509
,28L

	)

2253 
	#LN_¥e£¡©i⁄Addªss
 "¥e£¡©i⁄Addªss"

	)

2254 
	#NID_¥e£¡©i⁄Addªss
 873

	)

2255 
	#OBJ_¥e£¡©i⁄Addªss
 
OBJ_X509
,29L

	)

2257 
	#LN_suµ‹ãdAµliˇti⁄C⁄ãxt
 "suµ‹ãdAµliˇti⁄C⁄ãxt"

	)

2258 
	#NID_suµ‹ãdAµliˇti⁄C⁄ãxt
 874

	)

2259 
	#OBJ_suµ‹ãdAµliˇti⁄C⁄ãxt
 
OBJ_X509
,30L

	)

2261 
	#SN_membî
 "membî"

	)

2262 
	#NID_membî
 875

	)

2263 
	#OBJ_membî
 
OBJ_X509
,31L

	)

2265 
	#SN_ow√r
 "ow√r"

	)

2266 
	#NID_ow√r
 876

	)

2267 
	#OBJ_ow√r
 
OBJ_X509
,32L

	)

2269 
	#LN_rﬁeOccu∑¡
 "rﬁeOccu∑¡"

	)

2270 
	#NID_rﬁeOccu∑¡
 877

	)

2271 
	#OBJ_rﬁeOccu∑¡
 
OBJ_X509
,33L

	)

2273 
	#SN_£eAlso
 "£eAlso"

	)

2274 
	#NID_£eAlso
 878

	)

2275 
	#OBJ_£eAlso
 
OBJ_X509
,34L

	)

2277 
	#LN_u£rPassw‹d
 "u£rPassw‹d"

	)

2278 
	#NID_u£rPassw‹d
 879

	)

2279 
	#OBJ_u£rPassw‹d
 
OBJ_X509
,35L

	)

2281 
	#LN_u£rCîtifiˇã
 "u£rCîtifiˇã"

	)

2282 
	#NID_u£rCîtifiˇã
 880

	)

2283 
	#OBJ_u£rCîtifiˇã
 
OBJ_X509
,36L

	)

2285 
	#LN_cACîtifiˇã
 "cACîtifiˇã"

	)

2286 
	#NID_cACîtifiˇã
 881

	)

2287 
	#OBJ_cACîtifiˇã
 
OBJ_X509
,37L

	)

2289 
	#LN_auth‹ôyRevoˇti⁄Li°
 "auth‹ôyRevoˇti⁄Li°"

	)

2290 
	#NID_auth‹ôyRevoˇti⁄Li°
 882

	)

2291 
	#OBJ_auth‹ôyRevoˇti⁄Li°
 
OBJ_X509
,38L

	)

2293 
	#LN_˚πifiˇãRevoˇti⁄Li°
 "˚πifiˇãRevoˇti⁄Li°"

	)

2294 
	#NID_˚πifiˇãRevoˇti⁄Li°
 883

	)

2295 
	#OBJ_˚πifiˇãRevoˇti⁄Li°
 
OBJ_X509
,39L

	)

2297 
	#LN_¸ossCîtifiˇãPaú
 "¸ossCîtifiˇãPaú"

	)

2298 
	#NID_¸ossCîtifiˇãPaú
 884

	)

2299 
	#OBJ_¸ossCîtifiˇãPaú
 
OBJ_X509
,40L

	)

2301 
	#SN_«me
 "«me"

	)

2302 
	#LN_«me
 "«me"

	)

2303 
	#NID_«me
 173

	)

2304 
	#OBJ_«me
 
OBJ_X509
,41L

	)

2306 
	#SN_givíName
 "GN"

	)

2307 
	#LN_givíName
 "givíName"

	)

2308 
	#NID_givíName
 99

	)

2309 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

2311 
	#SN_öôüls
 "öôüls"

	)

2312 
	#LN_öôüls
 "öôüls"

	)

2313 
	#NID_öôüls
 101

	)

2314 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2316 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2317 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2318 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2320 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2321 
	#NID_x500UniqueIdítifõr
 503

	)

2322 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2324 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2325 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2326 
	#NID_dnQuÆifõr
 174

	)

2327 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2329 
	#LN_íh™˚dSórchGuide
 "íh™˚dSórchGuide"

	)

2330 
	#NID_íh™˚dSórchGuide
 885

	)

2331 
	#OBJ_íh™˚dSórchGuide
 
OBJ_X509
,47L

	)

2333 
	#LN_¥ŸocﬁInf‹m©i⁄
 "¥ŸocﬁInf‹m©i⁄"

	)

2334 
	#NID_¥ŸocﬁInf‹m©i⁄
 886

	)

2335 
	#OBJ_¥ŸocﬁInf‹m©i⁄
 
OBJ_X509
,48L

	)

2337 
	#LN_di°öguishedName
 "di°öguishedName"

	)

2338 
	#NID_di°öguishedName
 887

	)

2339 
	#OBJ_di°öguishedName
 
OBJ_X509
,49L

	)

2341 
	#LN_uniqueMembî
 "uniqueMembî"

	)

2342 
	#NID_uniqueMembî
 888

	)

2343 
	#OBJ_uniqueMembî
 
OBJ_X509
,50L

	)

2345 
	#LN_hou£Idítifõr
 "hou£Idítifõr"

	)

2346 
	#NID_hou£Idítifõr
 889

	)

2347 
	#OBJ_hou£Idítifõr
 
OBJ_X509
,51L

	)

2349 
	#LN_suµ‹ãdAlg‹ôhms
 "suµ‹ãdAlg‹ôhms"

	)

2350 
	#NID_suµ‹ãdAlg‹ôhms
 890

	)

2351 
	#OBJ_suµ‹ãdAlg‹ôhms
 
OBJ_X509
,52L

	)

2353 
	#LN_dñèRevoˇti⁄Li°
 "dñèRevoˇti⁄Li°"

	)

2354 
	#NID_dñèRevoˇti⁄Li°
 891

	)

2355 
	#OBJ_dñèRevoˇti⁄Li°
 
OBJ_X509
,53L

	)

2357 
	#SN_dmdName
 "dmdName"

	)

2358 
	#NID_dmdName
 892

	)

2359 
	#OBJ_dmdName
 
OBJ_X509
,54L

	)

2361 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2362 
	#NID_p£ud⁄ym
 510

	)

2363 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2365 
	#SN_rﬁe
 "rﬁe"

	)

2366 
	#LN_rﬁe
 "rﬁe"

	)

2367 
	#NID_rﬁe
 400

	)

2368 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2370 
	#LN_‹g™iz©i⁄Idítifõr
 "‹g™iz©i⁄Idítifõr"

	)

2371 
	#NID_‹g™iz©i⁄Idítifõr
 1089

	)

2372 
	#OBJ_‹g™iz©i⁄Idítifõr
 
OBJ_X509
,97L

	)

2374 
	#SN_cou¡ryCode3c
 "c3"

	)

2375 
	#LN_cou¡ryCode3c
 "cou¡ryCode3c"

	)

2376 
	#NID_cou¡ryCode3c
 1090

	)

2377 
	#OBJ_cou¡ryCode3c
 
OBJ_X509
,98L

	)

2379 
	#SN_cou¡ryCode3n
 "n3"

	)

2380 
	#LN_cou¡ryCode3n
 "cou¡ryCode3n"

	)

2381 
	#NID_cou¡ryCode3n
 1091

	)

2382 
	#OBJ_cou¡ryCode3n
 
OBJ_X509
,99L

	)

2384 
	#LN_dnsName
 "dnsName"

	)

2385 
	#NID_dnsName
 1092

	)

2386 
	#OBJ_dnsName
 
OBJ_X509
,100L

	)

2388 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2389 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2390 
	#NID_X500Æg‹ôhms
 378

	)

2391 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2393 
	#SN_rß
 "RSA"

	)

2394 
	#LN_rß
 "rß"

	)

2395 
	#NID_rß
 19

	)

2396 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2398 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2399 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2400 
	#NID_mdc2WôhRSA
 96

	)

2401 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2403 
	#SN_mdc2
 "MDC2"

	)

2404 
	#LN_mdc2
 "mdc2"

	)

2405 
	#NID_mdc2
 95

	)

2406 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2408 
	#SN_id_˚
 "id-˚"

	)

2409 
	#NID_id_˚
 81

	)

2410 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2412 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2413 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2414 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2415 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2417 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2418 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2419 
	#NID_subje˘_key_idítifõr
 82

	)

2420 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2422 
	#SN_key_ußge
 "keyUßge"

	)

2423 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2424 
	#NID_key_ußge
 83

	)

2425 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2427 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2428 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2429 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2430 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2432 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2433 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2434 
	#NID_subje˘_Æt_«me
 85

	)

2435 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2437 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2438 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2439 
	#NID_issuî_Æt_«me
 86

	)

2440 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2442 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2443 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2444 
	#NID_basic_c⁄°øöts
 87

	)

2445 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2447 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2448 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2449 
	#NID_¸l_numbî
 88

	)

2450 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2452 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2453 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2454 
	#NID_¸l_ªas⁄
 141

	)

2455 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2457 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2458 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2459 
	#NID_övÆidôy_d©e
 142

	)

2460 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2462 
	#SN_dñè_¸l
 "dñèCRL"

	)

2463 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2464 
	#NID_dñè_¸l
 140

	)

2465 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2467 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2468 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°ributi⁄ Poöt"

	)

2469 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2470 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2472 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2473 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2474 
	#NID_˚πifiˇã_issuî
 771

	)

2475 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2477 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2478 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2479 
	#NID_«me_c⁄°øöts
 666

	)

2480 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2482 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2483 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2484 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2485 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2487 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2488 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2489 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2490 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2492 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2493 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2494 
	#NID_™y_pﬁicy
 746

	)

2495 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2497 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2498 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2499 
	#NID_pﬁicy_m≠pögs
 747

	)

2500 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2502 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2503 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2504 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2505 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2507 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2508 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2509 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2510 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2512 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2513 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2514 
	#NID_ext_key_ußge
 126

	)

2515 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2517 
	#SN_‰eshe°_¸l
 "‰eshe°CRL"

	)

2518 
	#LN_‰eshe°_¸l
 "X509v3 Fªshe° CRL"

	)

2519 
	#NID_‰eshe°_¸l
 857

	)

2520 
	#OBJ_‰eshe°_¸l
 
OBJ_id_˚
,46L

	)

2522 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2523 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2524 
	#NID_öhibô_™y_pﬁicy
 748

	)

2525 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2527 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2528 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2529 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2530 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2532 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2533 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2534 
	#NID_no_ªv_avaû
 403

	)

2535 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2537 
	#SN_™yExãndedKeyUßge
 "™yExãndedKeyUßge"

	)

2538 
	#LN_™yExãndedKeyUßge
 "Any Exãnded Key Ußge"

	)

2539 
	#NID_™yExãndedKeyUßge
 910

	)

2540 
	#OBJ_™yExãndedKeyUßge
 
OBJ_ext_key_ußge
,0L

	)

2542 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2543 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2544 
	#NID_√tsˇ≥
 57

	)

2545 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2547 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2548 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2549 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2550 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2552 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2553 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2554 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2555 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2557 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2558 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2559 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2560 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2562 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2563 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2564 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2565 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2567 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2568 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2569 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2570 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2572 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2573 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2574 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2575 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2577 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2578 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2579 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2580 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2582 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2583 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2584 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2585 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2587 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2588 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2589 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2590 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2592 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2593 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2594 
	#NID_√tsˇ≥_commít
 78

	)

2595 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2597 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2598 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2599 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2600 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2602 
	#SN_ns_sgc
 "nsSGC"

	)

2603 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2604 
	#NID_ns_sgc
 139

	)

2605 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2607 
	#SN_‹g
 "ORG"

	)

2608 
	#LN_‹g
 "‹g"

	)

2609 
	#NID_‹g
 379

	)

2610 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2612 
	#SN_dod
 "DOD"

	)

2613 
	#LN_dod
 "dod"

	)

2614 
	#NID_dod
 380

	)

2615 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2617 
	#SN_ü«
 "IANA"

	)

2618 
	#LN_ü«
 "ü«"

	)

2619 
	#NID_ü«
 381

	)

2620 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2622 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2624 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2625 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2626 
	#NID_Dúe˘‹y
 382

	)

2627 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2629 
	#SN_M™agemít
 "mgmt"

	)

2630 
	#LN_M™agemít
 "M™agemít"

	)

2631 
	#NID_M™agemít
 383

	)

2632 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2634 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2635 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2636 
	#NID_Ex≥rimíèl
 384

	)

2637 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2639 
	#SN_Priv©e
 "¥iv©e"

	)

2640 
	#LN_Priv©e
 "Priv©e"

	)

2641 
	#NID_Priv©e
 385

	)

2642 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2644 
	#SN_Securôy
 "£curôy"

	)

2645 
	#LN_Securôy
 "Securôy"

	)

2646 
	#NID_Securôy
 386

	)

2647 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2649 
	#SN_SNMPv2
 "¢mpv2"

	)

2650 
	#LN_SNMPv2
 "SNMPv2"

	)

2651 
	#NID_SNMPv2
 387

	)

2652 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2654 
	#LN_Maû
 "Maû"

	)

2655 
	#NID_Maû
 388

	)

2656 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2658 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2659 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2660 
	#NID_E¡î¥i£s
 389

	)

2661 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2663 
	#SN_dcObje˘
 "dcobje˘"

	)

2664 
	#LN_dcObje˘
 "dcObje˘"

	)

2665 
	#NID_dcObje˘
 390

	)

2666 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2668 
	#SN_mime_mhs
 "mime-mhs"

	)

2669 
	#LN_mime_mhs
 "MIME MHS"

	)

2670 
	#NID_mime_mhs
 504

	)

2671 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2673 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2674 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2675 
	#NID_mime_mhs_hódögs
 505

	)

2676 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2678 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2679 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2680 
	#NID_mime_mhs_bodõs
 506

	)

2681 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2683 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2684 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2685 
	#NID_id_hex_∑πül_mesßge
 507

	)

2686 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2688 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2689 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2690 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2691 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2693 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2694 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2695 
	#NID_zlib_com¥essi⁄
 125

	)

2696 
	#OBJ_zlib_com¥essi⁄
 
OBJ_id_smime_Æg
,8L

	)

2698 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2700 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2702 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2704 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2705 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2706 
	#NID_´s_128_ecb
 418

	)

2707 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2709 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2710 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2711 
	#NID_´s_128_cbc
 419

	)

2712 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2714 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2715 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2716 
	#NID_´s_128_ofb128
 420

	)

2717 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2719 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2720 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2721 
	#NID_´s_128_cfb128
 421

	)

2722 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2724 
	#SN_id_´s128_wøp
 "id-´s128-wøp"

	)

2725 
	#NID_id_´s128_wøp
 788

	)

2726 
	#OBJ_id_´s128_wøp
 
OBJ_´s
,5L

	)

2728 
	#SN_´s_128_gcm
 "id-´s128-GCM"

	)

2729 
	#LN_´s_128_gcm
 "´s-128-gcm"

	)

2730 
	#NID_´s_128_gcm
 895

	)

2731 
	#OBJ_´s_128_gcm
 
OBJ_´s
,6L

	)

2733 
	#SN_´s_128_ccm
 "id-´s128-CCM"

	)

2734 
	#LN_´s_128_ccm
 "´s-128-ccm"

	)

2735 
	#NID_´s_128_ccm
 896

	)

2736 
	#OBJ_´s_128_ccm
 
OBJ_´s
,7L

	)

2738 
	#SN_id_´s128_wøp_∑d
 "id-´s128-wøp-∑d"

	)

2739 
	#NID_id_´s128_wøp_∑d
 897

	)

2740 
	#OBJ_id_´s128_wøp_∑d
 
OBJ_´s
,8L

	)

2742 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2743 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2744 
	#NID_´s_192_ecb
 422

	)

2745 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2747 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2748 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2749 
	#NID_´s_192_cbc
 423

	)

2750 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2752 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2753 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2754 
	#NID_´s_192_ofb128
 424

	)

2755 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2757 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2758 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2759 
	#NID_´s_192_cfb128
 425

	)

2760 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2762 
	#SN_id_´s192_wøp
 "id-´s192-wøp"

	)

2763 
	#NID_id_´s192_wøp
 789

	)

2764 
	#OBJ_id_´s192_wøp
 
OBJ_´s
,25L

	)

2766 
	#SN_´s_192_gcm
 "id-´s192-GCM"

	)

2767 
	#LN_´s_192_gcm
 "´s-192-gcm"

	)

2768 
	#NID_´s_192_gcm
 898

	)

2769 
	#OBJ_´s_192_gcm
 
OBJ_´s
,26L

	)

2771 
	#SN_´s_192_ccm
 "id-´s192-CCM"

	)

2772 
	#LN_´s_192_ccm
 "´s-192-ccm"

	)

2773 
	#NID_´s_192_ccm
 899

	)

2774 
	#OBJ_´s_192_ccm
 
OBJ_´s
,27L

	)

2776 
	#SN_id_´s192_wøp_∑d
 "id-´s192-wøp-∑d"

	)

2777 
	#NID_id_´s192_wøp_∑d
 900

	)

2778 
	#OBJ_id_´s192_wøp_∑d
 
OBJ_´s
,28L

	)

2780 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2781 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2782 
	#NID_´s_256_ecb
 426

	)

2783 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2785 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2786 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2787 
	#NID_´s_256_cbc
 427

	)

2788 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2790 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2791 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2792 
	#NID_´s_256_ofb128
 428

	)

2793 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2795 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2796 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2797 
	#NID_´s_256_cfb128
 429

	)

2798 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2800 
	#SN_id_´s256_wøp
 "id-´s256-wøp"

	)

2801 
	#NID_id_´s256_wøp
 790

	)

2802 
	#OBJ_id_´s256_wøp
 
OBJ_´s
,45L

	)

2804 
	#SN_´s_256_gcm
 "id-´s256-GCM"

	)

2805 
	#LN_´s_256_gcm
 "´s-256-gcm"

	)

2806 
	#NID_´s_256_gcm
 901

	)

2807 
	#OBJ_´s_256_gcm
 
OBJ_´s
,46L

	)

2809 
	#SN_´s_256_ccm
 "id-´s256-CCM"

	)

2810 
	#LN_´s_256_ccm
 "´s-256-ccm"

	)

2811 
	#NID_´s_256_ccm
 902

	)

2812 
	#OBJ_´s_256_ccm
 
OBJ_´s
,47L

	)

2814 
	#SN_id_´s256_wøp_∑d
 "id-´s256-wøp-∑d"

	)

2815 
	#NID_id_´s256_wøp_∑d
 903

	)

2816 
	#OBJ_id_´s256_wøp_∑d
 
OBJ_´s
,48L

	)

2818 
	#SN_´s_128_xts
 "AES-128-XTS"

	)

2819 
	#LN_´s_128_xts
 "´s-128-xts"

	)

2820 
	#NID_´s_128_xts
 913

	)

2821 
	#OBJ_´s_128_xts
 
OBJ_õì_siswg
,0L,1L,1L

	)

2823 
	#SN_´s_256_xts
 "AES-256-XTS"

	)

2824 
	#LN_´s_256_xts
 "´s-256-xts"

	)

2825 
	#NID_´s_256_xts
 914

	)

2826 
	#OBJ_´s_256_xts
 
OBJ_õì_siswg
,0L,1L,2L

	)

2828 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2829 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2830 
	#NID_´s_128_cfb1
 650

	)

2832 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2833 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2834 
	#NID_´s_192_cfb1
 651

	)

2836 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2837 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2838 
	#NID_´s_256_cfb1
 652

	)

2840 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2841 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2842 
	#NID_´s_128_cfb8
 653

	)

2844 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2845 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2846 
	#NID_´s_192_cfb8
 654

	)

2848 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2849 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2850 
	#NID_´s_256_cfb8
 655

	)

2852 
	#SN_´s_128_˘r
 "AES-128-CTR"

	)

2853 
	#LN_´s_128_˘r
 "´s-128-˘r"

	)

2854 
	#NID_´s_128_˘r
 904

	)

2856 
	#SN_´s_192_˘r
 "AES-192-CTR"

	)

2857 
	#LN_´s_192_˘r
 "´s-192-˘r"

	)

2858 
	#NID_´s_192_˘r
 905

	)

2860 
	#SN_´s_256_˘r
 "AES-256-CTR"

	)

2861 
	#LN_´s_256_˘r
 "´s-256-˘r"

	)

2862 
	#NID_´s_256_˘r
 906

	)

2864 
	#SN_´s_128_ocb
 "AES-128-OCB"

	)

2865 
	#LN_´s_128_ocb
 "´s-128-ocb"

	)

2866 
	#NID_´s_128_ocb
 958

	)

2868 
	#SN_´s_192_ocb
 "AES-192-OCB"

	)

2869 
	#LN_´s_192_ocb
 "´s-192-ocb"

	)

2870 
	#NID_´s_192_ocb
 959

	)

2872 
	#SN_´s_256_ocb
 "AES-256-OCB"

	)

2873 
	#LN_´s_256_ocb
 "´s-256-ocb"

	)

2874 
	#NID_´s_256_ocb
 960

	)

2876 
	#SN_des_cfb1
 "DES-CFB1"

	)

2877 
	#LN_des_cfb1
 "des-cfb1"

	)

2878 
	#NID_des_cfb1
 656

	)

2880 
	#SN_des_cfb8
 "DES-CFB8"

	)

2881 
	#LN_des_cfb8
 "des-cfb8"

	)

2882 
	#NID_des_cfb8
 657

	)

2884 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2885 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2886 
	#NID_des_ede3_cfb1
 658

	)

2888 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2889 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2890 
	#NID_des_ede3_cfb8
 659

	)

2892 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

2894 
	#SN_sha256
 "SHA256"

	)

2895 
	#LN_sha256
 "sha256"

	)

2896 
	#NID_sha256
 672

	)

2897 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

2899 
	#SN_sha384
 "SHA384"

	)

2900 
	#LN_sha384
 "sha384"

	)

2901 
	#NID_sha384
 673

	)

2902 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

2904 
	#SN_sha512
 "SHA512"

	)

2905 
	#LN_sha512
 "sha512"

	)

2906 
	#NID_sha512
 674

	)

2907 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

2909 
	#SN_sha224
 "SHA224"

	)

2910 
	#LN_sha224
 "sha224"

	)

2911 
	#NID_sha224
 675

	)

2912 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

2914 
	#SN_sha512_224
 "SHA512-224"

	)

2915 
	#LN_sha512_224
 "sha512-224"

	)

2916 
	#NID_sha512_224
 1094

	)

2917 
	#OBJ_sha512_224
 
OBJ_ni°_hashÆgs
,5L

	)

2919 
	#SN_sha512_256
 "SHA512-256"

	)

2920 
	#LN_sha512_256
 "sha512-256"

	)

2921 
	#NID_sha512_256
 1095

	)

2922 
	#OBJ_sha512_256
 
OBJ_ni°_hashÆgs
,6L

	)

2924 
	#SN_sha3_224
 "SHA3-224"

	)

2925 
	#LN_sha3_224
 "sha3-224"

	)

2926 
	#NID_sha3_224
 1096

	)

2927 
	#OBJ_sha3_224
 
OBJ_ni°_hashÆgs
,7L

	)

2929 
	#SN_sha3_256
 "SHA3-256"

	)

2930 
	#LN_sha3_256
 "sha3-256"

	)

2931 
	#NID_sha3_256
 1097

	)

2932 
	#OBJ_sha3_256
 
OBJ_ni°_hashÆgs
,8L

	)

2934 
	#SN_sha3_384
 "SHA3-384"

	)

2935 
	#LN_sha3_384
 "sha3-384"

	)

2936 
	#NID_sha3_384
 1098

	)

2937 
	#OBJ_sha3_384
 
OBJ_ni°_hashÆgs
,9L

	)

2939 
	#SN_sha3_512
 "SHA3-512"

	)

2940 
	#LN_sha3_512
 "sha3-512"

	)

2941 
	#NID_sha3_512
 1099

	)

2942 
	#OBJ_sha3_512
 
OBJ_ni°_hashÆgs
,10L

	)

2944 
	#SN_shake128
 "SHAKE128"

	)

2945 
	#LN_shake128
 "shake128"

	)

2946 
	#NID_shake128
 1100

	)

2947 
	#OBJ_shake128
 
OBJ_ni°_hashÆgs
,11L

	)

2949 
	#SN_shake256
 "SHAKE256"

	)

2950 
	#LN_shake256
 "shake256"

	)

2951 
	#NID_shake256
 1101

	)

2952 
	#OBJ_shake256
 
OBJ_ni°_hashÆgs
,12L

	)

2954 
	#SN_hmac_sha3_224
 "id-hmacWôhSHA3-224"

	)

2955 
	#LN_hmac_sha3_224
 "hmac-sha3-224"

	)

2956 
	#NID_hmac_sha3_224
 1102

	)

2957 
	#OBJ_hmac_sha3_224
 
OBJ_ni°_hashÆgs
,13L

	)

2959 
	#SN_hmac_sha3_256
 "id-hmacWôhSHA3-256"

	)

2960 
	#LN_hmac_sha3_256
 "hmac-sha3-256"

	)

2961 
	#NID_hmac_sha3_256
 1103

	)

2962 
	#OBJ_hmac_sha3_256
 
OBJ_ni°_hashÆgs
,14L

	)

2964 
	#SN_hmac_sha3_384
 "id-hmacWôhSHA3-384"

	)

2965 
	#LN_hmac_sha3_384
 "hmac-sha3-384"

	)

2966 
	#NID_hmac_sha3_384
 1104

	)

2967 
	#OBJ_hmac_sha3_384
 
OBJ_ni°_hashÆgs
,15L

	)

2969 
	#SN_hmac_sha3_512
 "id-hmacWôhSHA3-512"

	)

2970 
	#LN_hmac_sha3_512
 "hmac-sha3-512"

	)

2971 
	#NID_hmac_sha3_512
 1105

	)

2972 
	#OBJ_hmac_sha3_512
 
OBJ_ni°_hashÆgs
,16L

	)

2974 
	#OBJ_dß_wôh_sha2
 
OBJ_ni°Alg‹ôhms
,3L

	)

2976 
	#SN_dß_wôh_SHA224
 "dß_wôh_SHA224"

	)

2977 
	#NID_dß_wôh_SHA224
 802

	)

2978 
	#OBJ_dß_wôh_SHA224
 
OBJ_dß_wôh_sha2
,1L

	)

2980 
	#SN_dß_wôh_SHA256
 "dß_wôh_SHA256"

	)

2981 
	#NID_dß_wôh_SHA256
 803

	)

2982 
	#OBJ_dß_wôh_SHA256
 
OBJ_dß_wôh_sha2
,2L

	)

2984 
	#OBJ_sigAlgs
 
OBJ_ni°Alg‹ôhms
,3L

	)

2986 
	#SN_dß_wôh_SHA384
 "id-dß-wôh-sha384"

	)

2987 
	#LN_dß_wôh_SHA384
 "dß_wôh_SHA384"

	)

2988 
	#NID_dß_wôh_SHA384
 1106

	)

2989 
	#OBJ_dß_wôh_SHA384
 
OBJ_sigAlgs
,3L

	)

2991 
	#SN_dß_wôh_SHA512
 "id-dß-wôh-sha512"

	)

2992 
	#LN_dß_wôh_SHA512
 "dß_wôh_SHA512"

	)

2993 
	#NID_dß_wôh_SHA512
 1107

	)

2994 
	#OBJ_dß_wôh_SHA512
 
OBJ_sigAlgs
,4L

	)

2996 
	#SN_dß_wôh_SHA3_224
 "id-dß-wôh-sha3-224"

	)

2997 
	#LN_dß_wôh_SHA3_224
 "dß_wôh_SHA3-224"

	)

2998 
	#NID_dß_wôh_SHA3_224
 1108

	)

2999 
	#OBJ_dß_wôh_SHA3_224
 
OBJ_sigAlgs
,5L

	)

3001 
	#SN_dß_wôh_SHA3_256
 "id-dß-wôh-sha3-256"

	)

3002 
	#LN_dß_wôh_SHA3_256
 "dß_wôh_SHA3-256"

	)

3003 
	#NID_dß_wôh_SHA3_256
 1109

	)

3004 
	#OBJ_dß_wôh_SHA3_256
 
OBJ_sigAlgs
,6L

	)

3006 
	#SN_dß_wôh_SHA3_384
 "id-dß-wôh-sha3-384"

	)

3007 
	#LN_dß_wôh_SHA3_384
 "dß_wôh_SHA3-384"

	)

3008 
	#NID_dß_wôh_SHA3_384
 1110

	)

3009 
	#OBJ_dß_wôh_SHA3_384
 
OBJ_sigAlgs
,7L

	)

3011 
	#SN_dß_wôh_SHA3_512
 "id-dß-wôh-sha3-512"

	)

3012 
	#LN_dß_wôh_SHA3_512
 "dß_wôh_SHA3-512"

	)

3013 
	#NID_dß_wôh_SHA3_512
 1111

	)

3014 
	#OBJ_dß_wôh_SHA3_512
 
OBJ_sigAlgs
,8L

	)

3016 
	#SN_ecdß_wôh_SHA3_224
 "id-ecdß-wôh-sha3-224"

	)

3017 
	#LN_ecdß_wôh_SHA3_224
 "ecdß_wôh_SHA3-224"

	)

3018 
	#NID_ecdß_wôh_SHA3_224
 1112

	)

3019 
	#OBJ_ecdß_wôh_SHA3_224
 
OBJ_sigAlgs
,9L

	)

3021 
	#SN_ecdß_wôh_SHA3_256
 "id-ecdß-wôh-sha3-256"

	)

3022 
	#LN_ecdß_wôh_SHA3_256
 "ecdß_wôh_SHA3-256"

	)

3023 
	#NID_ecdß_wôh_SHA3_256
 1113

	)

3024 
	#OBJ_ecdß_wôh_SHA3_256
 
OBJ_sigAlgs
,10L

	)

3026 
	#SN_ecdß_wôh_SHA3_384
 "id-ecdß-wôh-sha3-384"

	)

3027 
	#LN_ecdß_wôh_SHA3_384
 "ecdß_wôh_SHA3-384"

	)

3028 
	#NID_ecdß_wôh_SHA3_384
 1114

	)

3029 
	#OBJ_ecdß_wôh_SHA3_384
 
OBJ_sigAlgs
,11L

	)

3031 
	#SN_ecdß_wôh_SHA3_512
 "id-ecdß-wôh-sha3-512"

	)

3032 
	#LN_ecdß_wôh_SHA3_512
 "ecdß_wôh_SHA3-512"

	)

3033 
	#NID_ecdß_wôh_SHA3_512
 1115

	)

3034 
	#OBJ_ecdß_wôh_SHA3_512
 
OBJ_sigAlgs
,12L

	)

3036 
	#SN_RSA_SHA3_224
 "id-rßsß-pkcs1-v1_5-wôh-sha3-224"

	)

3037 
	#LN_RSA_SHA3_224
 "RSA-SHA3-224"

	)

3038 
	#NID_RSA_SHA3_224
 1116

	)

3039 
	#OBJ_RSA_SHA3_224
 
OBJ_sigAlgs
,13L

	)

3041 
	#SN_RSA_SHA3_256
 "id-rßsß-pkcs1-v1_5-wôh-sha3-256"

	)

3042 
	#LN_RSA_SHA3_256
 "RSA-SHA3-256"

	)

3043 
	#NID_RSA_SHA3_256
 1117

	)

3044 
	#OBJ_RSA_SHA3_256
 
OBJ_sigAlgs
,14L

	)

3046 
	#SN_RSA_SHA3_384
 "id-rßsß-pkcs1-v1_5-wôh-sha3-384"

	)

3047 
	#LN_RSA_SHA3_384
 "RSA-SHA3-384"

	)

3048 
	#NID_RSA_SHA3_384
 1118

	)

3049 
	#OBJ_RSA_SHA3_384
 
OBJ_sigAlgs
,15L

	)

3051 
	#SN_RSA_SHA3_512
 "id-rßsß-pkcs1-v1_5-wôh-sha3-512"

	)

3052 
	#LN_RSA_SHA3_512
 "RSA-SHA3-512"

	)

3053 
	#NID_RSA_SHA3_512
 1119

	)

3054 
	#OBJ_RSA_SHA3_512
 
OBJ_sigAlgs
,16L

	)

3056 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

3057 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

3058 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

3059 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

3061 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

3063 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

3064 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

3065 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

3066 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

3068 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

3069 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

3070 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

3071 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

3073 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

3074 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

3075 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

3076 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

3078 
	#SN_d©a
 "d©a"

	)

3079 
	#NID_d©a
 434

	)

3080 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

3082 
	#SN_pss
 "pss"

	)

3083 
	#NID_pss
 435

	)

3084 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

3086 
	#SN_u˛
 "u˛"

	)

3087 
	#NID_u˛
 436

	)

3088 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

3090 
	#SN_pûŸ
 "pûŸ"

	)

3091 
	#NID_pûŸ
 437

	)

3092 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

3094 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

3095 
	#NID_pûŸAâribuãTy≥
 438

	)

3096 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

3098 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

3099 
	#NID_pûŸAâribuãSy¡ax
 439

	)

3100 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

3102 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

3103 
	#NID_pûŸObje˘Cœss
 440

	)

3104 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

3106 
	#LN_pûŸGroups
 "pûŸGroups"

	)

3107 
	#NID_pûŸGroups
 441

	)

3108 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

3110 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

3111 
	#NID_iA5SåögSy¡ax
 442

	)

3112 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

3114 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

3115 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

3116 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

3118 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

3119 
	#NID_pûŸObje˘
 444

	)

3120 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

3122 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

3123 
	#NID_pûŸPîs⁄
 445

	)

3124 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

3126 
	#SN_accou¡
 "accou¡"

	)

3127 
	#NID_accou¡
 446

	)

3128 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

3130 
	#SN_documít
 "documít"

	)

3131 
	#NID_documít
 447

	)

3132 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

3134 
	#SN_room
 "room"

	)

3135 
	#NID_room
 448

	)

3136 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

3138 
	#LN_documítSîõs
 "documítSîõs"

	)

3139 
	#NID_documítSîõs
 449

	)

3140 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

3142 
	#SN_Domaö
 "domaö"

	)

3143 
	#LN_Domaö
 "Domaö"

	)

3144 
	#NID_Domaö
 392

	)

3145 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

3147 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

3148 
	#NID_rFC822loˇlP¨t
 450

	)

3149 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

3151 
	#LN_dNSDomaö
 "dNSDomaö"

	)

3152 
	#NID_dNSDomaö
 451

	)

3153 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

3155 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

3156 
	#NID_domaöRñ©edObje˘
 452

	)

3157 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

3159 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

3160 
	#NID_‰õndlyCou¡ry
 453

	)

3161 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

3163 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

3164 
	#NID_sim∂eSecurôyObje˘
 454

	)

3165 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

3167 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

3168 
	#NID_pûŸOrg™iz©i⁄
 455

	)

3169 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

3171 
	#LN_pûŸDSA
 "pûŸDSA"

	)

3172 
	#NID_pûŸDSA
 456

	)

3173 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

3175 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

3176 
	#NID_quÆôyLabñÀdD©a
 457

	)

3177 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

3179 
	#SN_u£rId
 "UID"

	)

3180 
	#LN_u£rId
 "u£rId"

	)

3181 
	#NID_u£rId
 458

	)

3182 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

3184 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

3185 
	#NID_ãxtEncodedORAddªss
 459

	)

3186 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

3188 
	#SN_rfc822Maûbox
 "maû"

	)

3189 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

3190 
	#NID_rfc822Maûbox
 460

	)

3191 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

3193 
	#SN_öfo
 "öfo"

	)

3194 
	#NID_öfo
 461

	)

3195 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

3197 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

3198 
	#NID_ÁvourôeDrök
 462

	)

3199 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

3201 
	#LN_roomNumbî
 "roomNumbî"

	)

3202 
	#NID_roomNumbî
 463

	)

3203 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

3205 
	#SN_phŸo
 "phŸo"

	)

3206 
	#NID_phŸo
 464

	)

3207 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

3209 
	#LN_u£rCœss
 "u£rCœss"

	)

3210 
	#NID_u£rCœss
 465

	)

3211 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

3213 
	#SN_ho°
 "ho°"

	)

3214 
	#NID_ho°
 466

	)

3215 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

3217 
	#SN_m™agî
 "m™agî"

	)

3218 
	#NID_m™agî
 467

	)

3219 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

3221 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

3222 
	#NID_documítIdítifõr
 468

	)

3223 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

3225 
	#LN_documítTôÀ
 "documítTôÀ"

	)

3226 
	#NID_documítTôÀ
 469

	)

3227 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

3229 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

3230 
	#NID_documítVîsi⁄
 470

	)

3231 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

3233 
	#LN_documítAuth‹
 "documítAuth‹"

	)

3234 
	#NID_documítAuth‹
 471

	)

3235 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

3237 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

3238 
	#NID_documítLoˇti⁄
 472

	)

3239 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

3241 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

3242 
	#NID_homeTñïh⁄eNumbî
 473

	)

3243 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

3245 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

3246 
	#NID_£¸ë¨y
 474

	)

3247 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

3249 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

3250 
	#NID_ŸhîMaûbox
 475

	)

3251 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

3253 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

3254 
	#NID_œ°ModifõdTime
 476

	)

3255 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

3257 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

3258 
	#NID_œ°ModifõdBy
 477

	)

3259 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

3261 
	#SN_domaöComp⁄ít
 "DC"

	)

3262 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

3263 
	#NID_domaöComp⁄ít
 391

	)

3264 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

3266 
	#LN_aRec‹d
 "aRec‹d"

	)

3267 
	#NID_aRec‹d
 478

	)

3268 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

3270 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

3271 
	#NID_pûŸAâribuãTy≥27
 479

	)

3272 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

3274 
	#LN_mXRec‹d
 "mXRec‹d"

	)

3275 
	#NID_mXRec‹d
 480

	)

3276 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

3278 
	#LN_nSRec‹d
 "nSRec‹d"

	)

3279 
	#NID_nSRec‹d
 481

	)

3280 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

3282 
	#LN_sOARec‹d
 "sOARec‹d"

	)

3283 
	#NID_sOARec‹d
 482

	)

3284 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

3286 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

3287 
	#NID_cNAMERec‹d
 483

	)

3288 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

3290 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

3291 
	#NID_assocüãdDomaö
 484

	)

3292 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

3294 
	#LN_assocüãdName
 "assocüãdName"

	)

3295 
	#NID_assocüãdName
 485

	)

3296 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

3298 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

3299 
	#NID_homePo°ÆAddªss
 486

	)

3300 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

3302 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

3303 
	#NID_≥rs⁄ÆTôÀ
 487

	)

3304 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

3306 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

3307 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

3308 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

3310 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

3311 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

3312 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

3314 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

3315 
	#NID_‰õndlyCou¡ryName
 490

	)

3316 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

3318 
	#SN_uniqueIdítifõr
 "uid"

	)

3319 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

3320 
	#NID_uniqueIdítifõr
 102

	)

3321 
	#OBJ_uniqueIdítifõr
 
OBJ_pûŸAâribuãTy≥
,44L

	)

3323 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

3324 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

3325 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

3327 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

3328 
	#NID_j™ëMaûbox
 492

	)

3329 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

3331 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

3332 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

3333 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

3335 
	#LN_buûdögName
 "buûdögName"

	)

3336 
	#NID_buûdögName
 494

	)

3337 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

3339 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

3340 
	#NID_dSAQuÆôy
 495

	)

3341 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

3343 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

3344 
	#NID_sögÀLevñQuÆôy
 496

	)

3345 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

3347 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

3348 
	#NID_subåìMöimumQuÆôy
 497

	)

3349 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

3351 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

3352 
	#NID_subåìMaximumQuÆôy
 498

	)

3353 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

3355 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

3356 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

3357 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

3359 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

3360 
	#NID_dITRedúe˘
 500

	)

3361 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

3363 
	#SN_audio
 "audio"

	)

3364 
	#NID_audio
 501

	)

3365 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

3367 
	#LN_documítPublishî
 "documítPublishî"

	)

3368 
	#NID_documítPublishî
 502

	)

3369 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

3371 
	#SN_id_£t
 "id-£t"

	)

3372 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

3373 
	#NID_id_£t
 512

	)

3374 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

3376 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

3377 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

3378 
	#NID_£t_˘y≥
 513

	)

3379 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

3381 
	#SN_£t_msgExt
 "£t-msgExt"

	)

3382 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

3383 
	#NID_£t_msgExt
 514

	)

3384 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

3386 
	#SN_£t_©å
 "£t-©å"

	)

3387 
	#NID_£t_©å
 515

	)

3388 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

3390 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

3391 
	#NID_£t_pﬁicy
 516

	)

3392 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

3394 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

3395 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

3396 
	#NID_£t_˚πExt
 517

	)

3397 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

3399 
	#SN_£t_bønd
 "£t-bønd"

	)

3400 
	#NID_£t_bønd
 518

	)

3401 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

3403 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

3404 
	#NID_£t˘_PAND©a
 519

	)

3405 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

3407 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

3408 
	#NID_£t˘_PANTokí
 520

	)

3409 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

3411 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

3412 
	#NID_£t˘_PANO∆y
 521

	)

3413 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

3415 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

3416 
	#NID_£t˘_OID©a
 522

	)

3417 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

3419 
	#SN_£t˘_PI
 "£t˘-PI"

	)

3420 
	#NID_£t˘_PI
 523

	)

3421 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

3423 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

3424 
	#NID_£t˘_PID©a
 524

	)

3425 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

3427 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

3428 
	#NID_£t˘_PID©aUnsig√d
 525

	)

3429 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

3431 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

3432 
	#NID_£t˘_HODI≈ut
 526

	)

3433 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

3435 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

3436 
	#NID_£t˘_AuthResBaggage
 527

	)

3437 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

3439 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

3440 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

3441 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

3443 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

3444 
	#NID_£t˘_AuthRevResBaggage
 529

	)

3445 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

3447 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

3448 
	#NID_£t˘_C≠TokíSeq
 530

	)

3449 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

3451 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

3452 
	#NID_£t˘_PInôResD©a
 531

	)

3453 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

3455 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

3456 
	#NID_£t˘_PI_TBS
 532

	)

3457 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

3459 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

3460 
	#NID_£t˘_PResD©a
 533

	)

3461 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

3463 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

3464 
	#NID_£t˘_AuthReqTBS
 534

	)

3465 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

3467 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

3468 
	#NID_£t˘_AuthResTBS
 535

	)

3469 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

3471 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

3472 
	#NID_£t˘_AuthResTBSX
 536

	)

3473 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

3475 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

3476 
	#NID_£t˘_AuthTokíTBS
 537

	)

3477 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

3479 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

3480 
	#NID_£t˘_C≠TokíD©a
 538

	)

3481 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

3483 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

3484 
	#NID_£t˘_C≠TokíTBS
 539

	)

3485 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

3487 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

3488 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

3489 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

3491 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

3492 
	#NID_£t˘_AuthRevReqTBS
 541

	)

3493 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

3495 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

3496 
	#NID_£t˘_AuthRevResD©a
 542

	)

3497 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

3499 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

3500 
	#NID_£t˘_AuthRevResTBS
 543

	)

3501 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

3503 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

3504 
	#NID_£t˘_C≠ReqTBS
 544

	)

3505 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

3507 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

3508 
	#NID_£t˘_C≠ReqTBSX
 545

	)

3509 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

3511 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

3512 
	#NID_£t˘_C≠ResD©a
 546

	)

3513 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

3515 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

3516 
	#NID_£t˘_C≠RevReqTBS
 547

	)

3517 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

3519 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

3520 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

3521 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

3523 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

3524 
	#NID_£t˘_C≠RevResD©a
 549

	)

3525 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

3527 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

3528 
	#NID_£t˘_CªdReqTBS
 550

	)

3529 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

3531 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

3532 
	#NID_£t˘_CªdReqTBSX
 551

	)

3533 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

3535 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

3536 
	#NID_£t˘_CªdResD©a
 552

	)

3537 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

3539 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

3540 
	#NID_£t˘_CªdRevReqTBS
 553

	)

3541 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

3543 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

3544 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

3545 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

3547 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

3548 
	#NID_£t˘_CªdRevResD©a
 555

	)

3549 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

3551 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

3552 
	#NID_£t˘_PCîtReqD©a
 556

	)

3553 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

3555 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

3556 
	#NID_£t˘_PCîtResTBS
 557

	)

3557 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

3559 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

3560 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

3561 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

3563 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

3564 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

3565 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

3567 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

3568 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

3569 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

3571 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

3572 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

3573 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

3575 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

3576 
	#NID_£t˘_RegF‹mResTBS
 562

	)

3577 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

3579 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

3580 
	#NID_£t˘_CîtReqD©a
 563

	)

3581 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

3583 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

3584 
	#NID_£t˘_CîtReqTBS
 564

	)

3585 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

3587 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

3588 
	#NID_£t˘_CîtResD©a
 565

	)

3589 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

3591 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

3592 
	#NID_£t˘_CîtInqReqTBS
 566

	)

3593 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

3595 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

3596 
	#NID_£t˘_Eº‹TBS
 567

	)

3597 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

3599 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

3600 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

3601 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

3603 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

3604 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3605 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3607 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3608 
	#NID_£t˘_AuthReqTBE
 570

	)

3609 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3611 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3612 
	#NID_£t˘_AuthResTBE
 571

	)

3613 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3615 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3616 
	#NID_£t˘_AuthResTBEX
 572

	)

3617 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3619 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3620 
	#NID_£t˘_AuthTokíTBE
 573

	)

3621 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3623 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3624 
	#NID_£t˘_C≠TokíTBE
 574

	)

3625 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3627 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3628 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3629 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3631 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3632 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3633 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3635 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3636 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3637 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3639 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3640 
	#NID_£t˘_AuthRevResTBE
 578

	)

3641 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3643 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3644 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3645 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3647 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3648 
	#NID_£t˘_C≠ReqTBE
 580

	)

3649 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3651 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3652 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3653 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3655 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3656 
	#NID_£t˘_C≠ResTBE
 582

	)

3657 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3659 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3660 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3661 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3663 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3664 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3665 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3667 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3668 
	#NID_£t˘_C≠RevResTBE
 585

	)

3669 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3671 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3672 
	#NID_£t˘_CªdReqTBE
 586

	)

3673 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3675 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3676 
	#NID_£t˘_CªdReqTBEX
 587

	)

3677 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3679 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3680 
	#NID_£t˘_CªdResTBE
 588

	)

3681 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3683 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3684 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3685 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3687 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3688 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3689 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3691 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3692 
	#NID_£t˘_CªdRevResTBE
 591

	)

3693 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3695 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3696 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3697 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3699 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3700 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3701 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3703 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3704 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3705 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3707 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3708 
	#NID_£t˘_CîtReqTBE
 595

	)

3709 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3711 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3712 
	#NID_£t˘_CîtReqTBEX
 596

	)

3713 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3715 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3716 
	#NID_£t˘_CîtResTBE
 597

	)

3717 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3719 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3720 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3721 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3723 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3724 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3725 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3727 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3728 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3729 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3731 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3732 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3733 
	#NID_£ãxt_gíCry±
 601

	)

3734 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3736 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3737 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3738 
	#NID_£ãxt_miAuth
 602

	)

3739 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3741 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3742 
	#NID_£ãxt_pöSecuª
 603

	)

3743 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3745 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3746 
	#NID_£ãxt_pöAny
 604

	)

3747 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3749 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3750 
	#NID_£ãxt_åack2
 605

	)

3751 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3753 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3754 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3755 
	#NID_£ãxt_cv
 606

	)

3756 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3758 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3759 
	#NID_£t_pﬁicy_roŸ
 607

	)

3760 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3762 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3763 
	#NID_£tCext_hashedRoŸ
 608

	)

3764 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3766 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3767 
	#NID_£tCext_˚πTy≥
 609

	)

3768 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3770 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3771 
	#NID_£tCext_mîchD©a
 610

	)

3772 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3774 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3775 
	#NID_£tCext_cCîtRequúed
 611

	)

3776 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3778 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3779 
	#NID_£tCext_tu¬ñög
 612

	)

3780 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3782 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3783 
	#NID_£tCext_£tExt
 613

	)

3784 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3786 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3787 
	#NID_£tCext_£tQuÆf
 614

	)

3788 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3790 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3791 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3792 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3794 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3795 
	#NID_£tCext_TokíIdítifõr
 616

	)

3796 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3798 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3799 
	#NID_£tCext_Tøck2D©a
 617

	)

3800 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3802 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3803 
	#NID_£tCext_TokíTy≥
 618

	)

3804 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3806 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3807 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3808 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3810 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3811 
	#NID_£tAâr_Cît
 620

	)

3812 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3814 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3815 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3816 
	#NID_£tAâr_PGWYˇp
 621

	)

3817 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3819 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3820 
	#NID_£tAâr_TokíTy≥
 622

	)

3821 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3823 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3824 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3825 
	#NID_£tAâr_IssC≠
 623

	)

3826 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3828 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3829 
	#NID_£t_roŸKeyThumb
 624

	)

3830 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3832 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3833 
	#NID_£t_addPﬁicy
 625

	)

3834 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3836 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3837 
	#NID_£tAâr_Tokí_EMV
 626

	)

3838 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3840 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3841 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3842 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3844 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3845 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3846 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3848 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3849 
	#NID_£tAâr_IssC≠_T2
 629

	)

3850 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3852 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3853 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3854 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

3856 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

3857 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

3858 
	#NID_£tAâr_GíCry±grm
 631

	)

3859 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

3861 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

3862 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

3863 
	#NID_£tAâr_T2Enc
 632

	)

3864 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

3866 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

3867 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

3868 
	#NID_£tAâr_T2˛óπxt
 633

	)

3869 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

3871 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

3872 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

3873 
	#NID_£tAâr_TokICCsig
 634

	)

3874 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

3876 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

3877 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

3878 
	#NID_£tAâr_SecDevSig
 635

	)

3879 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

3881 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

3882 
	#NID_£t_bønd_IATA_ATA
 636

	)

3883 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

3885 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

3886 
	#NID_£t_bønd_Döîs
 637

	)

3887 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

3889 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

3890 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

3891 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

3893 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

3894 
	#NID_£t_bønd_JCB
 639

	)

3895 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

3897 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

3898 
	#NID_£t_bønd_Viß
 640

	)

3899 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

3901 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

3902 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

3903 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

3905 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

3906 
	#NID_£t_bønd_Novus
 642

	)

3907 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

3909 
	#SN_des_cdmf
 "DES-CDMF"

	)

3910 
	#LN_des_cdmf
 "des-cdmf"

	)

3911 
	#NID_des_cdmf
 643

	)

3912 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

3914 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

3915 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

3916 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

3918 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

3919 
	#LN_ù£c3
 "ù£c3"

	)

3920 
	#NID_ù£c3
 749

	)

3922 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

3923 
	#LN_ù£c4
 "ù£c4"

	)

3924 
	#NID_ù£c4
 750

	)

3926 
	#SN_whúÕoﬁ
 "whúÕoﬁ"

	)

3927 
	#NID_whúÕoﬁ
 804

	)

3928 
	#OBJ_whúÕoﬁ
 
OBJ_iso
,0L,10118L,3L,0L,55L

	)

3930 
	#SN_¸y±›ro
 "¸y±›ro"

	)

3931 
	#NID_¸y±›ro
 805

	)

3932 
	#OBJ_¸y±›ro
 
OBJ_membî_body
,643L,2L,2L

	)

3934 
	#SN_¸y±ocom
 "¸y±ocom"

	)

3935 
	#NID_¸y±ocom
 806

	)

3936 
	#OBJ_¸y±ocom
 
OBJ_membî_body
,643L,2L,9L

	)

3938 
	#SN_id_tc26
 "id-tc26"

	)

3939 
	#NID_id_tc26
 974

	)

3940 
	#OBJ_id_tc26
 
OBJ_membî_body
,643L,7L,1L

	)

3942 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001
 "id-Go°R3411-94-wôh-Go°R3410-2001"

	)

3943 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001
 "GOST R 34.11-94 wôh GOST R 34.10-2001"

	)

3944 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001
 807

	)

3945 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001
 
OBJ_¸y±›ro
,3L

	)

3947 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94
 "id-Go°R3411-94-wôh-Go°R3410-94"

	)

3948 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94
 "GOST R 34.11-94 wôh GOST R 34.10-94"

	)

3949 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94
 808

	)

3950 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94
 
OBJ_¸y±›ro
,4L

	)

3952 
	#SN_id_Go°R3411_94
 "md_go°94"

	)

3953 
	#LN_id_Go°R3411_94
 "GOST R 34.11-94"

	)

3954 
	#NID_id_Go°R3411_94
 809

	)

3955 
	#OBJ_id_Go°R3411_94
 
OBJ_¸y±›ro
,9L

	)

3957 
	#SN_id_HMACGo°R3411_94
 "id-HMACGo°R3411-94"

	)

3958 
	#LN_id_HMACGo°R3411_94
 "HMAC GOST 34.11-94"

	)

3959 
	#NID_id_HMACGo°R3411_94
 810

	)

3960 
	#OBJ_id_HMACGo°R3411_94
 
OBJ_¸y±›ro
,10L

	)

3962 
	#SN_id_Go°R3410_2001
 "go°2001"

	)

3963 
	#LN_id_Go°R3410_2001
 "GOST R 34.10-2001"

	)

3964 
	#NID_id_Go°R3410_2001
 811

	)

3965 
	#OBJ_id_Go°R3410_2001
 
OBJ_¸y±›ro
,19L

	)

3967 
	#SN_id_Go°R3410_94
 "go°94"

	)

3968 
	#LN_id_Go°R3410_94
 "GOST R 34.10-94"

	)

3969 
	#NID_id_Go°R3410_94
 812

	)

3970 
	#OBJ_id_Go°R3410_94
 
OBJ_¸y±›ro
,20L

	)

3972 
	#SN_id_Go°28147_89
 "go°89"

	)

3973 
	#LN_id_Go°28147_89
 "GOST 28147-89"

	)

3974 
	#NID_id_Go°28147_89
 813

	)

3975 
	#OBJ_id_Go°28147_89
 
OBJ_¸y±›ro
,21L

	)

3977 
	#SN_go°89_˙t
 "go°89-˙t"

	)

3978 
	#NID_go°89_˙t
 814

	)

3980 
	#SN_go°89_˙t_12
 "go°89-˙t-12"

	)

3981 
	#NID_go°89_˙t_12
 975

	)

3983 
	#SN_go°89_cbc
 "go°89-cbc"

	)

3984 
	#NID_go°89_cbc
 1009

	)

3986 
	#SN_go°89_ecb
 "go°89-ecb"

	)

3987 
	#NID_go°89_ecb
 1010

	)

3989 
	#SN_go°89_˘r
 "go°89-˘r"

	)

3990 
	#NID_go°89_˘r
 1011

	)

3992 
	#SN_id_Go°28147_89_MAC
 "go°-mac"

	)

3993 
	#LN_id_Go°28147_89_MAC
 "GOST 28147-89 MAC"

	)

3994 
	#NID_id_Go°28147_89_MAC
 815

	)

3995 
	#OBJ_id_Go°28147_89_MAC
 
OBJ_¸y±›ro
,22L

	)

3997 
	#SN_go°_mac_12
 "go°-mac-12"

	)

3998 
	#NID_go°_mac_12
 976

	)

4000 
	#SN_id_Go°R3411_94_¥f
 "¥f-go°r3411-94"

	)

4001 
	#LN_id_Go°R3411_94_¥f
 "GOST R 34.11-94 PRF"

	)

4002 
	#NID_id_Go°R3411_94_¥f
 816

	)

4003 
	#OBJ_id_Go°R3411_94_¥f
 
OBJ_¸y±›ro
,23L

	)

4005 
	#SN_id_Go°R3410_2001DH
 "id-Go°R3410-2001DH"

	)

4006 
	#LN_id_Go°R3410_2001DH
 "GOST R 34.10-2001 DH"

	)

4007 
	#NID_id_Go°R3410_2001DH
 817

	)

4008 
	#OBJ_id_Go°R3410_2001DH
 
OBJ_¸y±›ro
,98L

	)

4010 
	#SN_id_Go°R3410_94DH
 "id-Go°R3410-94DH"

	)

4011 
	#LN_id_Go°R3410_94DH
 "GOST R 34.10-94 DH"

	)

4012 
	#NID_id_Go°R3410_94DH
 818

	)

4013 
	#OBJ_id_Go°R3410_94DH
 
OBJ_¸y±›ro
,99L

	)

4015 
	#SN_id_Go°28147_89_Cry±oPro_KeyMeshög
 "id-Go°28147-89-Cry±oPro-KeyMeshög"

	)

4016 
	#NID_id_Go°28147_89_Cry±oPro_KeyMeshög
 819

	)

4017 
	#OBJ_id_Go°28147_89_Cry±oPro_KeyMeshög
 
OBJ_¸y±›ro
,14L,1L

	)

4019 
	#SN_id_Go°28147_89_N⁄e_KeyMeshög
 "id-Go°28147-89-N⁄e-KeyMeshög"

	)

4020 
	#NID_id_Go°28147_89_N⁄e_KeyMeshög
 820

	)

4021 
	#OBJ_id_Go°28147_89_N⁄e_KeyMeshög
 
OBJ_¸y±›ro
,14L,0L

	)

4023 
	#SN_id_Go°R3411_94_Te°P¨amSë
 "id-Go°R3411-94-Te°P¨amSë"

	)

4024 
	#NID_id_Go°R3411_94_Te°P¨amSë
 821

	)

4025 
	#OBJ_id_Go°R3411_94_Te°P¨amSë
 
OBJ_¸y±›ro
,30L,0L

	)

4027 
	#SN_id_Go°R3411_94_Cry±oProP¨amSë
 "id-Go°R3411-94-Cry±oProP¨amSë"

	)

4028 
	#NID_id_Go°R3411_94_Cry±oProP¨amSë
 822

	)

4029 
	#OBJ_id_Go°R3411_94_Cry±oProP¨amSë
 
OBJ_¸y±›ro
,30L,1L

	)

4031 
	#SN_id_Go°28147_89_Te°P¨amSë
 "id-Go°28147-89-Te°P¨amSë"

	)

4032 
	#NID_id_Go°28147_89_Te°P¨amSë
 823

	)

4033 
	#OBJ_id_Go°28147_89_Te°P¨amSë
 
OBJ_¸y±›ro
,31L,0L

	)

4035 
	#SN_id_Go°28147_89_Cry±oPro_A_P¨amSë
 "id-Go°28147-89-Cry±oPro-A-P¨amSë"

	)

4036 
	#NID_id_Go°28147_89_Cry±oPro_A_P¨amSë
 824

	)

4037 
	#OBJ_id_Go°28147_89_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,31L,1L

	)

4039 
	#SN_id_Go°28147_89_Cry±oPro_B_P¨amSë
 "id-Go°28147-89-Cry±oPro-B-P¨amSë"

	)

4040 
	#NID_id_Go°28147_89_Cry±oPro_B_P¨amSë
 825

	)

4041 
	#OBJ_id_Go°28147_89_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,31L,2L

	)

4043 
	#SN_id_Go°28147_89_Cry±oPro_C_P¨amSë
 "id-Go°28147-89-Cry±oPro-C-P¨amSë"

	)

4044 
	#NID_id_Go°28147_89_Cry±oPro_C_P¨amSë
 826

	)

4045 
	#OBJ_id_Go°28147_89_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,31L,3L

	)

4047 
	#SN_id_Go°28147_89_Cry±oPro_D_P¨amSë
 "id-Go°28147-89-Cry±oPro-D-P¨amSë"

	)

4048 
	#NID_id_Go°28147_89_Cry±oPro_D_P¨amSë
 827

	)

4049 
	#OBJ_id_Go°28147_89_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,31L,4L

	)

4051 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-1-P¨amSë"

	)

4052 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 828

	)

4053 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 
OBJ_¸y±›ro
,31L,5L

	)

4055 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-0-P¨amSë"

	)

4056 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 829

	)

4057 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 
OBJ_¸y±›ro
,31L,6L

	)

4059 
	#SN_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-RIC-1-P¨amSë"

	)

4060 
	#NID_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 830

	)

4061 
	#OBJ_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 
OBJ_¸y±›ro
,31L,7L

	)

4063 
	#SN_id_Go°R3410_94_Te°P¨amSë
 "id-Go°R3410-94-Te°P¨amSë"

	)

4064 
	#NID_id_Go°R3410_94_Te°P¨amSë
 831

	)

4065 
	#OBJ_id_Go°R3410_94_Te°P¨amSë
 
OBJ_¸y±›ro
,32L,0L

	)

4067 
	#SN_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 "id-Go°R3410-94-Cry±oPro-A-P¨amSë"

	)

4068 
	#NID_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 832

	)

4069 
	#OBJ_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,32L,2L

	)

4071 
	#SN_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 "id-Go°R3410-94-Cry±oPro-B-P¨amSë"

	)

4072 
	#NID_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 833

	)

4073 
	#OBJ_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,32L,3L

	)

4075 
	#SN_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 "id-Go°R3410-94-Cry±oPro-C-P¨amSë"

	)

4076 
	#NID_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 834

	)

4077 
	#OBJ_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,32L,4L

	)

4079 
	#SN_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 "id-Go°R3410-94-Cry±oPro-D-P¨amSë"

	)

4080 
	#NID_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 835

	)

4081 
	#OBJ_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,32L,5L

	)

4083 
	#SN_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchA-P¨amSë"

	)

4084 
	#NID_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 836

	)

4085 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,33L,1L

	)

4087 
	#SN_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchB-P¨amSë"

	)

4088 
	#NID_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 837

	)

4089 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,33L,2L

	)

4091 
	#SN_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchC-P¨amSë"

	)

4092 
	#NID_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 838

	)

4093 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 
OBJ_¸y±›ro
,33L,3L

	)

4095 
	#SN_id_Go°R3410_2001_Te°P¨amSë
 "id-Go°R3410-2001-Te°P¨amSë"

	)

4096 
	#NID_id_Go°R3410_2001_Te°P¨amSë
 839

	)

4097 
	#OBJ_id_Go°R3410_2001_Te°P¨amSë
 
OBJ_¸y±›ro
,35L,0L

	)

4099 
	#SN_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-A-P¨amSë"

	)

4100 
	#NID_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 840

	)

4101 
	#OBJ_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,35L,1L

	)

4103 
	#SN_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-B-P¨amSë"

	)

4104 
	#NID_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 841

	)

4105 
	#OBJ_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,35L,2L

	)

4107 
	#SN_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-C-P¨amSë"

	)

4108 
	#NID_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 842

	)

4109 
	#OBJ_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,35L,3L

	)

4111 
	#SN_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchA-P¨amSë"

	)

4112 
	#NID_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 843

	)

4113 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,36L,0L

	)

4115 
	#SN_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchB-P¨amSë"

	)

4116 
	#NID_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 844

	)

4117 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,36L,1L

	)

4119 
	#SN_id_Go°R3410_94_a
 "id-Go°R3410-94-a"

	)

4120 
	#NID_id_Go°R3410_94_a
 845

	)

4121 
	#OBJ_id_Go°R3410_94_a
 
OBJ_id_Go°R3410_94
,1L

	)

4123 
	#SN_id_Go°R3410_94_aBis
 "id-Go°R3410-94-aBis"

	)

4124 
	#NID_id_Go°R3410_94_aBis
 846

	)

4125 
	#OBJ_id_Go°R3410_94_aBis
 
OBJ_id_Go°R3410_94
,2L

	)

4127 
	#SN_id_Go°R3410_94_b
 "id-Go°R3410-94-b"

	)

4128 
	#NID_id_Go°R3410_94_b
 847

	)

4129 
	#OBJ_id_Go°R3410_94_b
 
OBJ_id_Go°R3410_94
,3L

	)

4131 
	#SN_id_Go°R3410_94_bBis
 "id-Go°R3410-94-bBis"

	)

4132 
	#NID_id_Go°R3410_94_bBis
 848

	)

4133 
	#OBJ_id_Go°R3410_94_bBis
 
OBJ_id_Go°R3410_94
,4L

	)

4135 
	#SN_id_Go°28147_89_cc
 "id-Go°28147-89-cc"

	)

4136 
	#LN_id_Go°28147_89_cc
 "GOST 28147-89 Cry±ocom P¨amSë"

	)

4137 
	#NID_id_Go°28147_89_cc
 849

	)

4138 
	#OBJ_id_Go°28147_89_cc
 
OBJ_¸y±ocom
,1L,6L,1L

	)

4140 
	#SN_id_Go°R3410_94_cc
 "go°94cc"

	)

4141 
	#LN_id_Go°R3410_94_cc
 "GOST 34.10-94 Cry±ocom"

	)

4142 
	#NID_id_Go°R3410_94_cc
 850

	)

4143 
	#OBJ_id_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,5L,3L

	)

4145 
	#SN_id_Go°R3410_2001_cc
 "go°2001cc"

	)

4146 
	#LN_id_Go°R3410_2001_cc
 "GOST 34.10-2001 Cry±ocom"

	)

4147 
	#NID_id_Go°R3410_2001_cc
 851

	)

4148 
	#OBJ_id_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,5L,4L

	)

4150 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "id-Go°R3411-94-wôh-Go°R3410-94-cc"

	)

4151 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "GOST R 34.11-94 wôh GOST R 34.10-94 Cry±ocom"

	)

4152 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94_cc
 852

	)

4153 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,3L,3L

	)

4155 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "id-Go°R3411-94-wôh-Go°R3410-2001-cc"

	)

4156 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "GOST R 34.11-94 wôh GOST R 34.10-2001 Cry±ocom"

	)

4157 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 853

	)

4158 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,3L,4L

	)

4160 
	#SN_id_Go°R3410_2001_P¨amSë_cc
 "id-Go°R3410-2001-P¨amSë-cc"

	)

4161 
	#LN_id_Go°R3410_2001_P¨amSë_cc
 "GOST R 3410-2001 P¨amëî Së Cry±ocom"

	)

4162 
	#NID_id_Go°R3410_2001_P¨amSë_cc
 854

	)

4163 
	#OBJ_id_Go°R3410_2001_P¨amSë_cc
 
OBJ_¸y±ocom
,1L,8L,1L

	)

4165 
	#SN_id_tc26_Æg‹ôhms
 "id-tc26-Æg‹ôhms"

	)

4166 
	#NID_id_tc26_Æg‹ôhms
 977

	)

4167 
	#OBJ_id_tc26_Æg‹ôhms
 
OBJ_id_tc26
,1L

	)

4169 
	#SN_id_tc26_sign
 "id-tc26-sign"

	)

4170 
	#NID_id_tc26_sign
 978

	)

4171 
	#OBJ_id_tc26_sign
 
OBJ_id_tc26_Æg‹ôhms
,1L

	)

4173 
	#SN_id_Go°R3410_2012_256
 "go°2012_256"

	)

4174 
	#LN_id_Go°R3410_2012_256
 "GOST R 34.10-2012 wôh 256 bô modulus"

	)

4175 
	#NID_id_Go°R3410_2012_256
 979

	)

4176 
	#OBJ_id_Go°R3410_2012_256
 
OBJ_id_tc26_sign
,1L

	)

4178 
	#SN_id_Go°R3410_2012_512
 "go°2012_512"

	)

4179 
	#LN_id_Go°R3410_2012_512
 "GOST R 34.10-2012 wôh 512 bô modulus"

	)

4180 
	#NID_id_Go°R3410_2012_512
 980

	)

4181 
	#OBJ_id_Go°R3410_2012_512
 
OBJ_id_tc26_sign
,2L

	)

4183 
	#SN_id_tc26_dige°
 "id-tc26-dige°"

	)

4184 
	#NID_id_tc26_dige°
 981

	)

4185 
	#OBJ_id_tc26_dige°
 
OBJ_id_tc26_Æg‹ôhms
,2L

	)

4187 
	#SN_id_Go°R3411_2012_256
 "md_go°12_256"

	)

4188 
	#LN_id_Go°R3411_2012_256
 "GOST R 34.11-2012 wôh 256 bô hash"

	)

4189 
	#NID_id_Go°R3411_2012_256
 982

	)

4190 
	#OBJ_id_Go°R3411_2012_256
 
OBJ_id_tc26_dige°
,2L

	)

4192 
	#SN_id_Go°R3411_2012_512
 "md_go°12_512"

	)

4193 
	#LN_id_Go°R3411_2012_512
 "GOST R 34.11-2012 wôh 512 bô hash"

	)

4194 
	#NID_id_Go°R3411_2012_512
 983

	)

4195 
	#OBJ_id_Go°R3411_2012_512
 
OBJ_id_tc26_dige°
,3L

	)

4197 
	#SN_id_tc26_signwôhdige°
 "id-tc26-signwôhdige°"

	)

4198 
	#NID_id_tc26_signwôhdige°
 984

	)

4199 
	#OBJ_id_tc26_signwôhdige°
 
OBJ_id_tc26_Æg‹ôhms
,3L

	)

4201 
	#SN_id_tc26_signwôhdige°_go°3410_2012_256
 "id-tc26-signwôhdige°-go°3410-2012-256"

	)

4202 
	#LN_id_tc26_signwôhdige°_go°3410_2012_256
 "GOST R 34.10-2012 wôh GOST R 34.11-2012 (256 bô)"

	)

4203 
	#NID_id_tc26_signwôhdige°_go°3410_2012_256
 985

	)

4204 
	#OBJ_id_tc26_signwôhdige°_go°3410_2012_256
 
OBJ_id_tc26_signwôhdige°
,2L

	)

4206 
	#SN_id_tc26_signwôhdige°_go°3410_2012_512
 "id-tc26-signwôhdige°-go°3410-2012-512"

	)

4207 
	#LN_id_tc26_signwôhdige°_go°3410_2012_512
 "GOST R 34.10-2012 wôh GOST R 34.11-2012 (512 bô)"

	)

4208 
	#NID_id_tc26_signwôhdige°_go°3410_2012_512
 986

	)

4209 
	#OBJ_id_tc26_signwôhdige°_go°3410_2012_512
 
OBJ_id_tc26_signwôhdige°
,3L

	)

4211 
	#SN_id_tc26_mac
 "id-tc26-mac"

	)

4212 
	#NID_id_tc26_mac
 987

	)

4213 
	#OBJ_id_tc26_mac
 
OBJ_id_tc26_Æg‹ôhms
,4L

	)

4215 
	#SN_id_tc26_hmac_go°_3411_2012_256
 "id-tc26-hmac-go°-3411-2012-256"

	)

4216 
	#LN_id_tc26_hmac_go°_3411_2012_256
 "HMAC GOST 34.11-2012 256 bô"

	)

4217 
	#NID_id_tc26_hmac_go°_3411_2012_256
 988

	)

4218 
	#OBJ_id_tc26_hmac_go°_3411_2012_256
 
OBJ_id_tc26_mac
,1L

	)

4220 
	#SN_id_tc26_hmac_go°_3411_2012_512
 "id-tc26-hmac-go°-3411-2012-512"

	)

4221 
	#LN_id_tc26_hmac_go°_3411_2012_512
 "HMAC GOST 34.11-2012 512 bô"

	)

4222 
	#NID_id_tc26_hmac_go°_3411_2012_512
 989

	)

4223 
	#OBJ_id_tc26_hmac_go°_3411_2012_512
 
OBJ_id_tc26_mac
,2L

	)

4225 
	#SN_id_tc26_cùhî
 "id-tc26-cùhî"

	)

4226 
	#NID_id_tc26_cùhî
 990

	)

4227 
	#OBJ_id_tc26_cùhî
 
OBJ_id_tc26_Æg‹ôhms
,5L

	)

4229 
	#SN_id_tc26_cùhî_go°r3412_2015_magma
 "id-tc26-cùhî-go°r3412-2015-magma"

	)

4230 
	#NID_id_tc26_cùhî_go°r3412_2015_magma
 1173

	)

4231 
	#OBJ_id_tc26_cùhî_go°r3412_2015_magma
 
OBJ_id_tc26_cùhî
,1L

	)

4233 
	#SN_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km
 "id-tc26-cùhî-go°r3412-2015-magma-˘ø˝km"

	)

4234 
	#NID_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km
 1174

	)

4235 
	#OBJ_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km
 
OBJ_id_tc26_cùhî_go°r3412_2015_magma
,1L

	)

4237 
	#SN_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km_omac
 "id-tc26-cùhî-go°r3412-2015-magma-˘ø˝km-omac"

	)

4238 
	#NID_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km_omac
 1175

	)

4239 
	#OBJ_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km_omac
 
OBJ_id_tc26_cùhî_go°r3412_2015_magma
,2L

	)

4241 
	#SN_id_tc26_cùhî_go°r3412_2015_kuznyechik
 "id-tc26-cùhî-go°r3412-2015-kuznyechik"

	)

4242 
	#NID_id_tc26_cùhî_go°r3412_2015_kuznyechik
 1176

	)

4243 
	#OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik
 
OBJ_id_tc26_cùhî
,2L

	)

4245 
	#SN_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km
 "id-tc26-cùhî-go°r3412-2015-kuznyechik-˘ø˝km"

	)

4246 
	#NID_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km
 1177

	)

4247 
	#OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km
 
OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik
,1L

	)

4249 
	#SN_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km_omac
 "id-tc26-cùhî-go°r3412-2015-kuznyechik-˘ø˝km-omac"

	)

4250 
	#NID_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km_omac
 1178

	)

4251 
	#OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km_omac
 
OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik
,2L

	)

4253 
	#SN_id_tc26_agªemít
 "id-tc26-agªemít"

	)

4254 
	#NID_id_tc26_agªemít
 991

	)

4255 
	#OBJ_id_tc26_agªemít
 
OBJ_id_tc26_Æg‹ôhms
,6L

	)

4257 
	#SN_id_tc26_agªemít_go°_3410_2012_256
 "id-tc26-agªemít-go°-3410-2012-256"

	)

4258 
	#NID_id_tc26_agªemít_go°_3410_2012_256
 992

	)

4259 
	#OBJ_id_tc26_agªemít_go°_3410_2012_256
 
OBJ_id_tc26_agªemít
,1L

	)

4261 
	#SN_id_tc26_agªemít_go°_3410_2012_512
 "id-tc26-agªemít-go°-3410-2012-512"

	)

4262 
	#NID_id_tc26_agªemít_go°_3410_2012_512
 993

	)

4263 
	#OBJ_id_tc26_agªemít_go°_3410_2012_512
 
OBJ_id_tc26_agªemít
,2L

	)

4265 
	#SN_id_tc26_wøp
 "id-tc26-wøp"

	)

4266 
	#NID_id_tc26_wøp
 1179

	)

4267 
	#OBJ_id_tc26_wøp
 
OBJ_id_tc26_Æg‹ôhms
,7L

	)

4269 
	#SN_id_tc26_wøp_go°r3412_2015_magma
 "id-tc26-wøp-go°r3412-2015-magma"

	)

4270 
	#NID_id_tc26_wøp_go°r3412_2015_magma
 1180

	)

4271 
	#OBJ_id_tc26_wøp_go°r3412_2015_magma
 
OBJ_id_tc26_wøp
,1L

	)

4273 
	#SN_id_tc26_wøp_go°r3412_2015_magma_kexp15
 "id-tc26-wøp-go°r3412-2015-magma-kexp15"

	)

4274 
	#NID_id_tc26_wøp_go°r3412_2015_magma_kexp15
 1181

	)

4275 
	#OBJ_id_tc26_wøp_go°r3412_2015_magma_kexp15
 
OBJ_id_tc26_wøp_go°r3412_2015_magma
,1L

	)

4277 
	#SN_id_tc26_wøp_go°r3412_2015_kuznyechik
 "id-tc26-wøp-go°r3412-2015-kuznyechik"

	)

4278 
	#NID_id_tc26_wøp_go°r3412_2015_kuznyechik
 1182

	)

4279 
	#OBJ_id_tc26_wøp_go°r3412_2015_kuznyechik
 
OBJ_id_tc26_wøp
,2L

	)

4281 
	#SN_id_tc26_wøp_go°r3412_2015_kuznyechik_kexp15
 "id-tc26-wøp-go°r3412-2015-kuznyechik-kexp15"

	)

4282 
	#NID_id_tc26_wøp_go°r3412_2015_kuznyechik_kexp15
 1183

	)

4283 
	#OBJ_id_tc26_wøp_go°r3412_2015_kuznyechik_kexp15
 
OBJ_id_tc26_wøp_go°r3412_2015_kuznyechik
,1L

	)

4285 
	#SN_id_tc26_c⁄°™ts
 "id-tc26-c⁄°™ts"

	)

4286 
	#NID_id_tc26_c⁄°™ts
 994

	)

4287 
	#OBJ_id_tc26_c⁄°™ts
 
OBJ_id_tc26
,2L

	)

4289 
	#SN_id_tc26_sign_c⁄°™ts
 "id-tc26-sign-c⁄°™ts"

	)

4290 
	#NID_id_tc26_sign_c⁄°™ts
 995

	)

4291 
	#OBJ_id_tc26_sign_c⁄°™ts
 
OBJ_id_tc26_c⁄°™ts
,1L

	)

4293 
	#SN_id_tc26_go°_3410_2012_256_c⁄°™ts
 "id-tc26-go°-3410-2012-256-c⁄°™ts"

	)

4294 
	#NID_id_tc26_go°_3410_2012_256_c⁄°™ts
 1147

	)

4295 
	#OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
 
OBJ_id_tc26_sign_c⁄°™ts
,1L

	)

4297 
	#SN_id_tc26_go°_3410_2012_256_∑ømSëA
 "id-tc26-go°-3410-2012-256-∑ømSëA"

	)

4298 
	#LN_id_tc26_go°_3410_2012_256_∑ømSëA
 "GOST R 34.10-2012 (256 bôËP¨amSë A"

	)

4299 
	#NID_id_tc26_go°_3410_2012_256_∑ømSëA
 1148

	)

4300 
	#OBJ_id_tc26_go°_3410_2012_256_∑ømSëA
 
OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
,1L

	)

4302 
	#SN_id_tc26_go°_3410_2012_256_∑ømSëB
 "id-tc26-go°-3410-2012-256-∑ømSëB"

	)

4303 
	#LN_id_tc26_go°_3410_2012_256_∑ømSëB
 "GOST R 34.10-2012 (256 bôËP¨amSë B"

	)

4304 
	#NID_id_tc26_go°_3410_2012_256_∑ømSëB
 1184

	)

4305 
	#OBJ_id_tc26_go°_3410_2012_256_∑ømSëB
 
OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
,2L

	)

4307 
	#SN_id_tc26_go°_3410_2012_256_∑ømSëC
 "id-tc26-go°-3410-2012-256-∑ømSëC"

	)

4308 
	#LN_id_tc26_go°_3410_2012_256_∑ømSëC
 "GOST R 34.10-2012 (256 bôËP¨amSë C"

	)

4309 
	#NID_id_tc26_go°_3410_2012_256_∑ømSëC
 1185

	)

4310 
	#OBJ_id_tc26_go°_3410_2012_256_∑ømSëC
 
OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
,3L

	)

4312 
	#SN_id_tc26_go°_3410_2012_256_∑ømSëD
 "id-tc26-go°-3410-2012-256-∑ømSëD"

	)

4313 
	#LN_id_tc26_go°_3410_2012_256_∑ømSëD
 "GOST R 34.10-2012 (256 bôËP¨amSë D"

	)

4314 
	#NID_id_tc26_go°_3410_2012_256_∑ømSëD
 1186

	)

4315 
	#OBJ_id_tc26_go°_3410_2012_256_∑ømSëD
 
OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
,4L

	)

4317 
	#SN_id_tc26_go°_3410_2012_512_c⁄°™ts
 "id-tc26-go°-3410-2012-512-c⁄°™ts"

	)

4318 
	#NID_id_tc26_go°_3410_2012_512_c⁄°™ts
 996

	)

4319 
	#OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
 
OBJ_id_tc26_sign_c⁄°™ts
,2L

	)

4321 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëTe°
 "id-tc26-go°-3410-2012-512-∑ømSëTe°"

	)

4322 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëTe°
 "GOST R 34.10-2012 (512 bôËã°ögÖ¨amëî së"

	)

4323 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëTe°
 997

	)

4324 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëTe°
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,0L

	)

4326 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëA
 "id-tc26-go°-3410-2012-512-∑ømSëA"

	)

4327 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëA
 "GOST R 34.10-2012 (512 bôËP¨amSë A"

	)

4328 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëA
 998

	)

4329 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëA
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,1L

	)

4331 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëB
 "id-tc26-go°-3410-2012-512-∑ømSëB"

	)

4332 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëB
 "GOST R 34.10-2012 (512 bôËP¨amSë B"

	)

4333 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëB
 999

	)

4334 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëB
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,2L

	)

4336 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëC
 "id-tc26-go°-3410-2012-512-∑ømSëC"

	)

4337 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëC
 "GOST R 34.10-2012 (512 bôËP¨amSë C"

	)

4338 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëC
 1149

	)

4339 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëC
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,3L

	)

4341 
	#SN_id_tc26_dige°_c⁄°™ts
 "id-tc26-dige°-c⁄°™ts"

	)

4342 
	#NID_id_tc26_dige°_c⁄°™ts
 1000

	)

4343 
	#OBJ_id_tc26_dige°_c⁄°™ts
 
OBJ_id_tc26_c⁄°™ts
,2L

	)

4345 
	#SN_id_tc26_cùhî_c⁄°™ts
 "id-tc26-cùhî-c⁄°™ts"

	)

4346 
	#NID_id_tc26_cùhî_c⁄°™ts
 1001

	)

4347 
	#OBJ_id_tc26_cùhî_c⁄°™ts
 
OBJ_id_tc26_c⁄°™ts
,5L

	)

4349 
	#SN_id_tc26_go°_28147_c⁄°™ts
 "id-tc26-go°-28147-c⁄°™ts"

	)

4350 
	#NID_id_tc26_go°_28147_c⁄°™ts
 1002

	)

4351 
	#OBJ_id_tc26_go°_28147_c⁄°™ts
 
OBJ_id_tc26_cùhî_c⁄°™ts
,1L

	)

4353 
	#SN_id_tc26_go°_28147_∑øm_Z
 "id-tc26-go°-28147-∑øm-Z"

	)

4354 
	#LN_id_tc26_go°_28147_∑øm_Z
 "GOST 28147-89 TC26Ö¨amëî së"

	)

4355 
	#NID_id_tc26_go°_28147_∑øm_Z
 1003

	)

4356 
	#OBJ_id_tc26_go°_28147_∑øm_Z
 
OBJ_id_tc26_go°_28147_c⁄°™ts
,1L

	)

4358 
	#SN_INN
 "INN"

	)

4359 
	#LN_INN
 "INN"

	)

4360 
	#NID_INN
 1004

	)

4361 
	#OBJ_INN
 
OBJ_membî_body
,643L,3L,131L,1L,1L

	)

4363 
	#SN_OGRN
 "OGRN"

	)

4364 
	#LN_OGRN
 "OGRN"

	)

4365 
	#NID_OGRN
 1005

	)

4366 
	#OBJ_OGRN
 
OBJ_membî_body
,643L,100L,1L

	)

4368 
	#SN_SNILS
 "SNILS"

	)

4369 
	#LN_SNILS
 "SNILS"

	)

4370 
	#NID_SNILS
 1006

	)

4371 
	#OBJ_SNILS
 
OBJ_membî_body
,643L,100L,3L

	)

4373 
	#SN_subje˘SignToﬁ
 "subje˘SignToﬁ"

	)

4374 
	#LN_subje˘SignToﬁ
 "Signög Toﬁ o‡Subje˘"

	)

4375 
	#NID_subje˘SignToﬁ
 1007

	)

4376 
	#OBJ_subje˘SignToﬁ
 
OBJ_membî_body
,643L,100L,111L

	)

4378 
	#SN_issuîSignToﬁ
 "issuîSignToﬁ"

	)

4379 
	#LN_issuîSignToﬁ
 "Signög Toﬁ o‡Issuî"

	)

4380 
	#NID_issuîSignToﬁ
 1008

	)

4381 
	#OBJ_issuîSignToﬁ
 
OBJ_membî_body
,643L,100L,112L

	)

4383 
	#SN_gøssh›≥r_ecb
 "gøssh›≥r-ecb"

	)

4384 
	#NID_gøssh›≥r_ecb
 1012

	)

4386 
	#SN_gøssh›≥r_˘r
 "gøssh›≥r-˘r"

	)

4387 
	#NID_gøssh›≥r_˘r
 1013

	)

4389 
	#SN_gøssh›≥r_ofb
 "gøssh›≥r-ofb"

	)

4390 
	#NID_gøssh›≥r_ofb
 1014

	)

4392 
	#SN_gøssh›≥r_cbc
 "gøssh›≥r-cbc"

	)

4393 
	#NID_gøssh›≥r_cbc
 1015

	)

4395 
	#SN_gøssh›≥r_cfb
 "gøssh›≥r-cfb"

	)

4396 
	#NID_gøssh›≥r_cfb
 1016

	)

4398 
	#SN_gøssh›≥r_mac
 "gøssh›≥r-mac"

	)

4399 
	#NID_gøssh›≥r_mac
 1017

	)

4401 
	#SN_magma_ecb
 "magma-ecb"

	)

4402 
	#NID_magma_ecb
 1187

	)

4404 
	#SN_magma_˘r
 "magma-˘r"

	)

4405 
	#NID_magma_˘r
 1188

	)

4407 
	#SN_magma_ofb
 "magma-ofb"

	)

4408 
	#NID_magma_ofb
 1189

	)

4410 
	#SN_magma_cbc
 "magma-cbc"

	)

4411 
	#NID_magma_cbc
 1190

	)

4413 
	#SN_magma_cfb
 "magma-cfb"

	)

4414 
	#NID_magma_cfb
 1191

	)

4416 
	#SN_magma_mac
 "magma-mac"

	)

4417 
	#NID_magma_mac
 1192

	)

4419 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

4420 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

4421 
	#NID_ˇmñlü_128_cbc
 751

	)

4422 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

4424 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

4425 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

4426 
	#NID_ˇmñlü_192_cbc
 752

	)

4427 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

4429 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

4430 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

4431 
	#NID_ˇmñlü_256_cbc
 753

	)

4432 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

4434 
	#SN_id_ˇmñlü128_wøp
 "id-ˇmñlü128-wøp"

	)

4435 
	#NID_id_ˇmñlü128_wøp
 907

	)

4436 
	#OBJ_id_ˇmñlü128_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,2L

	)

4438 
	#SN_id_ˇmñlü192_wøp
 "id-ˇmñlü192-wøp"

	)

4439 
	#NID_id_ˇmñlü192_wøp
 908

	)

4440 
	#OBJ_id_ˇmñlü192_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,3L

	)

4442 
	#SN_id_ˇmñlü256_wøp
 "id-ˇmñlü256-wøp"

	)

4443 
	#NID_id_ˇmñlü256_wøp
 909

	)

4444 
	#OBJ_id_ˇmñlü256_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,4L

	)

4446 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

4448 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

4450 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

4451 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

4452 
	#NID_ˇmñlü_128_ecb
 754

	)

4453 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

4455 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

4456 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

4457 
	#NID_ˇmñlü_128_ofb128
 766

	)

4458 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

4460 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

4461 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

4462 
	#NID_ˇmñlü_128_cfb128
 757

	)

4463 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

4465 
	#SN_ˇmñlü_128_gcm
 "CAMELLIA-128-GCM"

	)

4466 
	#LN_ˇmñlü_128_gcm
 "ˇmñlü-128-gcm"

	)

4467 
	#NID_ˇmñlü_128_gcm
 961

	)

4468 
	#OBJ_ˇmñlü_128_gcm
 
OBJ_ˇmñlü
,6L

	)

4470 
	#SN_ˇmñlü_128_ccm
 "CAMELLIA-128-CCM"

	)

4471 
	#LN_ˇmñlü_128_ccm
 "ˇmñlü-128-ccm"

	)

4472 
	#NID_ˇmñlü_128_ccm
 962

	)

4473 
	#OBJ_ˇmñlü_128_ccm
 
OBJ_ˇmñlü
,7L

	)

4475 
	#SN_ˇmñlü_128_˘r
 "CAMELLIA-128-CTR"

	)

4476 
	#LN_ˇmñlü_128_˘r
 "ˇmñlü-128-˘r"

	)

4477 
	#NID_ˇmñlü_128_˘r
 963

	)

4478 
	#OBJ_ˇmñlü_128_˘r
 
OBJ_ˇmñlü
,9L

	)

4480 
	#SN_ˇmñlü_128_cmac
 "CAMELLIA-128-CMAC"

	)

4481 
	#LN_ˇmñlü_128_cmac
 "ˇmñlü-128-cmac"

	)

4482 
	#NID_ˇmñlü_128_cmac
 964

	)

4483 
	#OBJ_ˇmñlü_128_cmac
 
OBJ_ˇmñlü
,10L

	)

4485 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

4486 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

4487 
	#NID_ˇmñlü_192_ecb
 755

	)

4488 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

4490 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

4491 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

4492 
	#NID_ˇmñlü_192_ofb128
 767

	)

4493 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

4495 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

4496 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

4497 
	#NID_ˇmñlü_192_cfb128
 758

	)

4498 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

4500 
	#SN_ˇmñlü_192_gcm
 "CAMELLIA-192-GCM"

	)

4501 
	#LN_ˇmñlü_192_gcm
 "ˇmñlü-192-gcm"

	)

4502 
	#NID_ˇmñlü_192_gcm
 965

	)

4503 
	#OBJ_ˇmñlü_192_gcm
 
OBJ_ˇmñlü
,26L

	)

4505 
	#SN_ˇmñlü_192_ccm
 "CAMELLIA-192-CCM"

	)

4506 
	#LN_ˇmñlü_192_ccm
 "ˇmñlü-192-ccm"

	)

4507 
	#NID_ˇmñlü_192_ccm
 966

	)

4508 
	#OBJ_ˇmñlü_192_ccm
 
OBJ_ˇmñlü
,27L

	)

4510 
	#SN_ˇmñlü_192_˘r
 "CAMELLIA-192-CTR"

	)

4511 
	#LN_ˇmñlü_192_˘r
 "ˇmñlü-192-˘r"

	)

4512 
	#NID_ˇmñlü_192_˘r
 967

	)

4513 
	#OBJ_ˇmñlü_192_˘r
 
OBJ_ˇmñlü
,29L

	)

4515 
	#SN_ˇmñlü_192_cmac
 "CAMELLIA-192-CMAC"

	)

4516 
	#LN_ˇmñlü_192_cmac
 "ˇmñlü-192-cmac"

	)

4517 
	#NID_ˇmñlü_192_cmac
 968

	)

4518 
	#OBJ_ˇmñlü_192_cmac
 
OBJ_ˇmñlü
,30L

	)

4520 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

4521 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

4522 
	#NID_ˇmñlü_256_ecb
 756

	)

4523 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

4525 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

4526 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

4527 
	#NID_ˇmñlü_256_ofb128
 768

	)

4528 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

4530 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

4531 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

4532 
	#NID_ˇmñlü_256_cfb128
 759

	)

4533 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

4535 
	#SN_ˇmñlü_256_gcm
 "CAMELLIA-256-GCM"

	)

4536 
	#LN_ˇmñlü_256_gcm
 "ˇmñlü-256-gcm"

	)

4537 
	#NID_ˇmñlü_256_gcm
 969

	)

4538 
	#OBJ_ˇmñlü_256_gcm
 
OBJ_ˇmñlü
,46L

	)

4540 
	#SN_ˇmñlü_256_ccm
 "CAMELLIA-256-CCM"

	)

4541 
	#LN_ˇmñlü_256_ccm
 "ˇmñlü-256-ccm"

	)

4542 
	#NID_ˇmñlü_256_ccm
 970

	)

4543 
	#OBJ_ˇmñlü_256_ccm
 
OBJ_ˇmñlü
,47L

	)

4545 
	#SN_ˇmñlü_256_˘r
 "CAMELLIA-256-CTR"

	)

4546 
	#LN_ˇmñlü_256_˘r
 "ˇmñlü-256-˘r"

	)

4547 
	#NID_ˇmñlü_256_˘r
 971

	)

4548 
	#OBJ_ˇmñlü_256_˘r
 
OBJ_ˇmñlü
,49L

	)

4550 
	#SN_ˇmñlü_256_cmac
 "CAMELLIA-256-CMAC"

	)

4551 
	#LN_ˇmñlü_256_cmac
 "ˇmñlü-256-cmac"

	)

4552 
	#NID_ˇmñlü_256_cmac
 972

	)

4553 
	#OBJ_ˇmñlü_256_cmac
 
OBJ_ˇmñlü
,50L

	)

4555 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

4556 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

4557 
	#NID_ˇmñlü_128_cfb1
 760

	)

4559 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

4560 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

4561 
	#NID_ˇmñlü_192_cfb1
 761

	)

4563 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

4564 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

4565 
	#NID_ˇmñlü_256_cfb1
 762

	)

4567 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

4568 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

4569 
	#NID_ˇmñlü_128_cfb8
 763

	)

4571 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

4572 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

4573 
	#NID_ˇmñlü_192_cfb8
 764

	)

4575 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

4576 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

4577 
	#NID_ˇmñlü_256_cfb8
 765

	)

4579 
	#OBJ_¨ü
 1L,2L,410L,200046L,1L,1L

	)

4581 
	#SN_¨ü_128_ecb
 "ARIA-128-ECB"

	)

4582 
	#LN_¨ü_128_ecb
 "¨ü-128-ecb"

	)

4583 
	#NID_¨ü_128_ecb
 1065

	)

4584 
	#OBJ_¨ü_128_ecb
 
OBJ_¨ü
,1L

	)

4586 
	#SN_¨ü_128_cbc
 "ARIA-128-CBC"

	)

4587 
	#LN_¨ü_128_cbc
 "¨ü-128-cbc"

	)

4588 
	#NID_¨ü_128_cbc
 1066

	)

4589 
	#OBJ_¨ü_128_cbc
 
OBJ_¨ü
,2L

	)

4591 
	#SN_¨ü_128_cfb128
 "ARIA-128-CFB"

	)

4592 
	#LN_¨ü_128_cfb128
 "¨ü-128-cfb"

	)

4593 
	#NID_¨ü_128_cfb128
 1067

	)

4594 
	#OBJ_¨ü_128_cfb128
 
OBJ_¨ü
,3L

	)

4596 
	#SN_¨ü_128_ofb128
 "ARIA-128-OFB"

	)

4597 
	#LN_¨ü_128_ofb128
 "¨ü-128-ofb"

	)

4598 
	#NID_¨ü_128_ofb128
 1068

	)

4599 
	#OBJ_¨ü_128_ofb128
 
OBJ_¨ü
,4L

	)

4601 
	#SN_¨ü_128_˘r
 "ARIA-128-CTR"

	)

4602 
	#LN_¨ü_128_˘r
 "¨ü-128-˘r"

	)

4603 
	#NID_¨ü_128_˘r
 1069

	)

4604 
	#OBJ_¨ü_128_˘r
 
OBJ_¨ü
,5L

	)

4606 
	#SN_¨ü_192_ecb
 "ARIA-192-ECB"

	)

4607 
	#LN_¨ü_192_ecb
 "¨ü-192-ecb"

	)

4608 
	#NID_¨ü_192_ecb
 1070

	)

4609 
	#OBJ_¨ü_192_ecb
 
OBJ_¨ü
,6L

	)

4611 
	#SN_¨ü_192_cbc
 "ARIA-192-CBC"

	)

4612 
	#LN_¨ü_192_cbc
 "¨ü-192-cbc"

	)

4613 
	#NID_¨ü_192_cbc
 1071

	)

4614 
	#OBJ_¨ü_192_cbc
 
OBJ_¨ü
,7L

	)

4616 
	#SN_¨ü_192_cfb128
 "ARIA-192-CFB"

	)

4617 
	#LN_¨ü_192_cfb128
 "¨ü-192-cfb"

	)

4618 
	#NID_¨ü_192_cfb128
 1072

	)

4619 
	#OBJ_¨ü_192_cfb128
 
OBJ_¨ü
,8L

	)

4621 
	#SN_¨ü_192_ofb128
 "ARIA-192-OFB"

	)

4622 
	#LN_¨ü_192_ofb128
 "¨ü-192-ofb"

	)

4623 
	#NID_¨ü_192_ofb128
 1073

	)

4624 
	#OBJ_¨ü_192_ofb128
 
OBJ_¨ü
,9L

	)

4626 
	#SN_¨ü_192_˘r
 "ARIA-192-CTR"

	)

4627 
	#LN_¨ü_192_˘r
 "¨ü-192-˘r"

	)

4628 
	#NID_¨ü_192_˘r
 1074

	)

4629 
	#OBJ_¨ü_192_˘r
 
OBJ_¨ü
,10L

	)

4631 
	#SN_¨ü_256_ecb
 "ARIA-256-ECB"

	)

4632 
	#LN_¨ü_256_ecb
 "¨ü-256-ecb"

	)

4633 
	#NID_¨ü_256_ecb
 1075

	)

4634 
	#OBJ_¨ü_256_ecb
 
OBJ_¨ü
,11L

	)

4636 
	#SN_¨ü_256_cbc
 "ARIA-256-CBC"

	)

4637 
	#LN_¨ü_256_cbc
 "¨ü-256-cbc"

	)

4638 
	#NID_¨ü_256_cbc
 1076

	)

4639 
	#OBJ_¨ü_256_cbc
 
OBJ_¨ü
,12L

	)

4641 
	#SN_¨ü_256_cfb128
 "ARIA-256-CFB"

	)

4642 
	#LN_¨ü_256_cfb128
 "¨ü-256-cfb"

	)

4643 
	#NID_¨ü_256_cfb128
 1077

	)

4644 
	#OBJ_¨ü_256_cfb128
 
OBJ_¨ü
,13L

	)

4646 
	#SN_¨ü_256_ofb128
 "ARIA-256-OFB"

	)

4647 
	#LN_¨ü_256_ofb128
 "¨ü-256-ofb"

	)

4648 
	#NID_¨ü_256_ofb128
 1078

	)

4649 
	#OBJ_¨ü_256_ofb128
 
OBJ_¨ü
,14L

	)

4651 
	#SN_¨ü_256_˘r
 "ARIA-256-CTR"

	)

4652 
	#LN_¨ü_256_˘r
 "¨ü-256-˘r"

	)

4653 
	#NID_¨ü_256_˘r
 1079

	)

4654 
	#OBJ_¨ü_256_˘r
 
OBJ_¨ü
,15L

	)

4656 
	#SN_¨ü_128_cfb1
 "ARIA-128-CFB1"

	)

4657 
	#LN_¨ü_128_cfb1
 "¨ü-128-cfb1"

	)

4658 
	#NID_¨ü_128_cfb1
 1080

	)

4660 
	#SN_¨ü_192_cfb1
 "ARIA-192-CFB1"

	)

4661 
	#LN_¨ü_192_cfb1
 "¨ü-192-cfb1"

	)

4662 
	#NID_¨ü_192_cfb1
 1081

	)

4664 
	#SN_¨ü_256_cfb1
 "ARIA-256-CFB1"

	)

4665 
	#LN_¨ü_256_cfb1
 "¨ü-256-cfb1"

	)

4666 
	#NID_¨ü_256_cfb1
 1082

	)

4668 
	#SN_¨ü_128_cfb8
 "ARIA-128-CFB8"

	)

4669 
	#LN_¨ü_128_cfb8
 "¨ü-128-cfb8"

	)

4670 
	#NID_¨ü_128_cfb8
 1083

	)

4672 
	#SN_¨ü_192_cfb8
 "ARIA-192-CFB8"

	)

4673 
	#LN_¨ü_192_cfb8
 "¨ü-192-cfb8"

	)

4674 
	#NID_¨ü_192_cfb8
 1084

	)

4676 
	#SN_¨ü_256_cfb8
 "ARIA-256-CFB8"

	)

4677 
	#LN_¨ü_256_cfb8
 "¨ü-256-cfb8"

	)

4678 
	#NID_¨ü_256_cfb8
 1085

	)

4680 
	#SN_¨ü_128_ccm
 "ARIA-128-CCM"

	)

4681 
	#LN_¨ü_128_ccm
 "¨ü-128-ccm"

	)

4682 
	#NID_¨ü_128_ccm
 1120

	)

4683 
	#OBJ_¨ü_128_ccm
 
OBJ_¨ü
,37L

	)

4685 
	#SN_¨ü_192_ccm
 "ARIA-192-CCM"

	)

4686 
	#LN_¨ü_192_ccm
 "¨ü-192-ccm"

	)

4687 
	#NID_¨ü_192_ccm
 1121

	)

4688 
	#OBJ_¨ü_192_ccm
 
OBJ_¨ü
,38L

	)

4690 
	#SN_¨ü_256_ccm
 "ARIA-256-CCM"

	)

4691 
	#LN_¨ü_256_ccm
 "¨ü-256-ccm"

	)

4692 
	#NID_¨ü_256_ccm
 1122

	)

4693 
	#OBJ_¨ü_256_ccm
 
OBJ_¨ü
,39L

	)

4695 
	#SN_¨ü_128_gcm
 "ARIA-128-GCM"

	)

4696 
	#LN_¨ü_128_gcm
 "¨ü-128-gcm"

	)

4697 
	#NID_¨ü_128_gcm
 1123

	)

4698 
	#OBJ_¨ü_128_gcm
 
OBJ_¨ü
,34L

	)

4700 
	#SN_¨ü_192_gcm
 "ARIA-192-GCM"

	)

4701 
	#LN_¨ü_192_gcm
 "¨ü-192-gcm"

	)

4702 
	#NID_¨ü_192_gcm
 1124

	)

4703 
	#OBJ_¨ü_192_gcm
 
OBJ_¨ü
,35L

	)

4705 
	#SN_¨ü_256_gcm
 "ARIA-256-GCM"

	)

4706 
	#LN_¨ü_256_gcm
 "¨ü-256-gcm"

	)

4707 
	#NID_¨ü_256_gcm
 1125

	)

4708 
	#OBJ_¨ü_256_gcm
 
OBJ_¨ü
,36L

	)

4710 
	#SN_kiß
 "KISA"

	)

4711 
	#LN_kiß
 "kiß"

	)

4712 
	#NID_kiß
 773

	)

4713 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

4715 
	#SN_£ed_ecb
 "SEED-ECB"

	)

4716 
	#LN_£ed_ecb
 "£ed-ecb"

	)

4717 
	#NID_£ed_ecb
 776

	)

4718 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

4720 
	#SN_£ed_cbc
 "SEED-CBC"

	)

4721 
	#LN_£ed_cbc
 "£ed-cbc"

	)

4722 
	#NID_£ed_cbc
 777

	)

4723 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

4725 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

4726 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

4727 
	#NID_£ed_cfb128
 779

	)

4728 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

4730 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

4731 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

4732 
	#NID_£ed_ofb128
 778

	)

4733 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

4735 
	#SN_sm4_ecb
 "SM4-ECB"

	)

4736 
	#LN_sm4_ecb
 "sm4-ecb"

	)

4737 
	#NID_sm4_ecb
 1133

	)

4738 
	#OBJ_sm4_ecb
 
OBJ_sm_scheme
,104L,1L

	)

4740 
	#SN_sm4_cbc
 "SM4-CBC"

	)

4741 
	#LN_sm4_cbc
 "sm4-cbc"

	)

4742 
	#NID_sm4_cbc
 1134

	)

4743 
	#OBJ_sm4_cbc
 
OBJ_sm_scheme
,104L,2L

	)

4745 
	#SN_sm4_ofb128
 "SM4-OFB"

	)

4746 
	#LN_sm4_ofb128
 "sm4-ofb"

	)

4747 
	#NID_sm4_ofb128
 1135

	)

4748 
	#OBJ_sm4_ofb128
 
OBJ_sm_scheme
,104L,3L

	)

4750 
	#SN_sm4_cfb128
 "SM4-CFB"

	)

4751 
	#LN_sm4_cfb128
 "sm4-cfb"

	)

4752 
	#NID_sm4_cfb128
 1137

	)

4753 
	#OBJ_sm4_cfb128
 
OBJ_sm_scheme
,104L,4L

	)

4755 
	#SN_sm4_cfb1
 "SM4-CFB1"

	)

4756 
	#LN_sm4_cfb1
 "sm4-cfb1"

	)

4757 
	#NID_sm4_cfb1
 1136

	)

4758 
	#OBJ_sm4_cfb1
 
OBJ_sm_scheme
,104L,5L

	)

4760 
	#SN_sm4_cfb8
 "SM4-CFB8"

	)

4761 
	#LN_sm4_cfb8
 "sm4-cfb8"

	)

4762 
	#NID_sm4_cfb8
 1138

	)

4763 
	#OBJ_sm4_cfb8
 
OBJ_sm_scheme
,104L,6L

	)

4765 
	#SN_sm4_˘r
 "SM4-CTR"

	)

4766 
	#LN_sm4_˘r
 "sm4-˘r"

	)

4767 
	#NID_sm4_˘r
 1139

	)

4768 
	#OBJ_sm4_˘r
 
OBJ_sm_scheme
,104L,7L

	)

4770 
	#SN_hmac
 "HMAC"

	)

4771 
	#LN_hmac
 "hmac"

	)

4772 
	#NID_hmac
 855

	)

4774 
	#SN_cmac
 "CMAC"

	)

4775 
	#LN_cmac
 "cmac"

	)

4776 
	#NID_cmac
 894

	)

4778 
	#SN_rc4_hmac_md5
 "RC4-HMAC-MD5"

	)

4779 
	#LN_rc4_hmac_md5
 "rc4-hmac-md5"

	)

4780 
	#NID_rc4_hmac_md5
 915

	)

4782 
	#SN_´s_128_cbc_hmac_sha1
 "AES-128-CBC-HMAC-SHA1"

	)

4783 
	#LN_´s_128_cbc_hmac_sha1
 "´s-128-cbc-hmac-sha1"

	)

4784 
	#NID_´s_128_cbc_hmac_sha1
 916

	)

4786 
	#SN_´s_192_cbc_hmac_sha1
 "AES-192-CBC-HMAC-SHA1"

	)

4787 
	#LN_´s_192_cbc_hmac_sha1
 "´s-192-cbc-hmac-sha1"

	)

4788 
	#NID_´s_192_cbc_hmac_sha1
 917

	)

4790 
	#SN_´s_256_cbc_hmac_sha1
 "AES-256-CBC-HMAC-SHA1"

	)

4791 
	#LN_´s_256_cbc_hmac_sha1
 "´s-256-cbc-hmac-sha1"

	)

4792 
	#NID_´s_256_cbc_hmac_sha1
 918

	)

4794 
	#SN_´s_128_cbc_hmac_sha256
 "AES-128-CBC-HMAC-SHA256"

	)

4795 
	#LN_´s_128_cbc_hmac_sha256
 "´s-128-cbc-hmac-sha256"

	)

4796 
	#NID_´s_128_cbc_hmac_sha256
 948

	)

4798 
	#SN_´s_192_cbc_hmac_sha256
 "AES-192-CBC-HMAC-SHA256"

	)

4799 
	#LN_´s_192_cbc_hmac_sha256
 "´s-192-cbc-hmac-sha256"

	)

4800 
	#NID_´s_192_cbc_hmac_sha256
 949

	)

4802 
	#SN_´s_256_cbc_hmac_sha256
 "AES-256-CBC-HMAC-SHA256"

	)

4803 
	#LN_´s_256_cbc_hmac_sha256
 "´s-256-cbc-hmac-sha256"

	)

4804 
	#NID_´s_256_cbc_hmac_sha256
 950

	)

4806 
	#SN_chacha20_pﬁy1305
 "ChaCha20-Pﬁy1305"

	)

4807 
	#LN_chacha20_pﬁy1305
 "chacha20-pﬁy1305"

	)

4808 
	#NID_chacha20_pﬁy1305
 1018

	)

4810 
	#SN_chacha20
 "ChaCha20"

	)

4811 
	#LN_chacha20
 "chacha20"

	)

4812 
	#NID_chacha20
 1019

	)

4814 
	#SN_dhpubli˙umbî
 "dhpubli˙umbî"

	)

4815 
	#LN_dhpubli˙umbî
 "X9.42 DH"

	)

4816 
	#NID_dhpubli˙umbî
 920

	)

4817 
	#OBJ_dhpubli˙umbî
 
OBJ_ISO_US
,10046L,2L,1L

	)

4819 
	#SN_bøöpoﬁP160r1
 "bøöpoﬁP160r1"

	)

4820 
	#NID_bøöpoﬁP160r1
 921

	)

4821 
	#OBJ_bøöpoﬁP160r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,1L

	)

4823 
	#SN_bøöpoﬁP160t1
 "bøöpoﬁP160t1"

	)

4824 
	#NID_bøöpoﬁP160t1
 922

	)

4825 
	#OBJ_bøöpoﬁP160t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,2L

	)

4827 
	#SN_bøöpoﬁP192r1
 "bøöpoﬁP192r1"

	)

4828 
	#NID_bøöpoﬁP192r1
 923

	)

4829 
	#OBJ_bøöpoﬁP192r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,3L

	)

4831 
	#SN_bøöpoﬁP192t1
 "bøöpoﬁP192t1"

	)

4832 
	#NID_bøöpoﬁP192t1
 924

	)

4833 
	#OBJ_bøöpoﬁP192t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,4L

	)

4835 
	#SN_bøöpoﬁP224r1
 "bøöpoﬁP224r1"

	)

4836 
	#NID_bøöpoﬁP224r1
 925

	)

4837 
	#OBJ_bøöpoﬁP224r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,5L

	)

4839 
	#SN_bøöpoﬁP224t1
 "bøöpoﬁP224t1"

	)

4840 
	#NID_bøöpoﬁP224t1
 926

	)

4841 
	#OBJ_bøöpoﬁP224t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,6L

	)

4843 
	#SN_bøöpoﬁP256r1
 "bøöpoﬁP256r1"

	)

4844 
	#NID_bøöpoﬁP256r1
 927

	)

4845 
	#OBJ_bøöpoﬁP256r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,7L

	)

4847 
	#SN_bøöpoﬁP256t1
 "bøöpoﬁP256t1"

	)

4848 
	#NID_bøöpoﬁP256t1
 928

	)

4849 
	#OBJ_bøöpoﬁP256t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,8L

	)

4851 
	#SN_bøöpoﬁP320r1
 "bøöpoﬁP320r1"

	)

4852 
	#NID_bøöpoﬁP320r1
 929

	)

4853 
	#OBJ_bøöpoﬁP320r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,9L

	)

4855 
	#SN_bøöpoﬁP320t1
 "bøöpoﬁP320t1"

	)

4856 
	#NID_bøöpoﬁP320t1
 930

	)

4857 
	#OBJ_bøöpoﬁP320t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,10L

	)

4859 
	#SN_bøöpoﬁP384r1
 "bøöpoﬁP384r1"

	)

4860 
	#NID_bøöpoﬁP384r1
 931

	)

4861 
	#OBJ_bøöpoﬁP384r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,11L

	)

4863 
	#SN_bøöpoﬁP384t1
 "bøöpoﬁP384t1"

	)

4864 
	#NID_bøöpoﬁP384t1
 932

	)

4865 
	#OBJ_bøöpoﬁP384t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,12L

	)

4867 
	#SN_bøöpoﬁP512r1
 "bøöpoﬁP512r1"

	)

4868 
	#NID_bøöpoﬁP512r1
 933

	)

4869 
	#OBJ_bøöpoﬁP512r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,13L

	)

4871 
	#SN_bøöpoﬁP512t1
 "bøöpoﬁP512t1"

	)

4872 
	#NID_bøöpoﬁP512t1
 934

	)

4873 
	#OBJ_bøöpoﬁP512t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,14L

	)

4875 
	#OBJ_x9_63_scheme
 1L,3L,133L,16L,840L,63L,0L

	)

4877 
	#OBJ_£cg_scheme
 
OBJ_˚πicom_¨c
,1L

	)

4879 
	#SN_dhSögÀPass_°dDH_sha1kdf_scheme
 "dhSögÀPass-°dDH-sha1kdf-scheme"

	)

4880 
	#NID_dhSögÀPass_°dDH_sha1kdf_scheme
 936

	)

4881 
	#OBJ_dhSögÀPass_°dDH_sha1kdf_scheme
 
OBJ_x9_63_scheme
,2L

	)

4883 
	#SN_dhSögÀPass_°dDH_sha224kdf_scheme
 "dhSögÀPass-°dDH-sha224kdf-scheme"

	)

4884 
	#NID_dhSögÀPass_°dDH_sha224kdf_scheme
 937

	)

4885 
	#OBJ_dhSögÀPass_°dDH_sha224kdf_scheme
 
OBJ_£cg_scheme
,11L,0L

	)

4887 
	#SN_dhSögÀPass_°dDH_sha256kdf_scheme
 "dhSögÀPass-°dDH-sha256kdf-scheme"

	)

4888 
	#NID_dhSögÀPass_°dDH_sha256kdf_scheme
 938

	)

4889 
	#OBJ_dhSögÀPass_°dDH_sha256kdf_scheme
 
OBJ_£cg_scheme
,11L,1L

	)

4891 
	#SN_dhSögÀPass_°dDH_sha384kdf_scheme
 "dhSögÀPass-°dDH-sha384kdf-scheme"

	)

4892 
	#NID_dhSögÀPass_°dDH_sha384kdf_scheme
 939

	)

4893 
	#OBJ_dhSögÀPass_°dDH_sha384kdf_scheme
 
OBJ_£cg_scheme
,11L,2L

	)

4895 
	#SN_dhSögÀPass_°dDH_sha512kdf_scheme
 "dhSögÀPass-°dDH-sha512kdf-scheme"

	)

4896 
	#NID_dhSögÀPass_°dDH_sha512kdf_scheme
 940

	)

4897 
	#OBJ_dhSögÀPass_°dDH_sha512kdf_scheme
 
OBJ_£cg_scheme
,11L,3L

	)

4899 
	#SN_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha1kdf-scheme"

	)

4900 
	#NID_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 941

	)

4901 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 
OBJ_x9_63_scheme
,3L

	)

4903 
	#SN_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha224kdf-scheme"

	)

4904 
	#NID_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 942

	)

4905 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 
OBJ_£cg_scheme
,14L,0L

	)

4907 
	#SN_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha256kdf-scheme"

	)

4908 
	#NID_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 943

	)

4909 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 
OBJ_£cg_scheme
,14L,1L

	)

4911 
	#SN_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha384kdf-scheme"

	)

4912 
	#NID_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 944

	)

4913 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 
OBJ_£cg_scheme
,14L,2L

	)

4915 
	#SN_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha512kdf-scheme"

	)

4916 
	#NID_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 945

	)

4917 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 
OBJ_£cg_scheme
,14L,3L

	)

4919 
	#SN_dh_°d_kdf
 "dh-°d-kdf"

	)

4920 
	#NID_dh_°d_kdf
 946

	)

4922 
	#SN_dh_coÁ˘‹_kdf
 "dh-coÁ˘‹-kdf"

	)

4923 
	#NID_dh_coÁ˘‹_kdf
 947

	)

4925 
	#SN_˘_¥e˚π_s˘s
 "˘_¥e˚π_s˘s"

	)

4926 
	#LN_˘_¥e˚π_s˘s
 "CT Pª˚πifiˇã SCTs"

	)

4927 
	#NID_˘_¥e˚π_s˘s
 951

	)

4928 
	#OBJ_˘_¥e˚π_s˘s
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,2L

	)

4930 
	#SN_˘_¥e˚π_pois⁄
 "˘_¥e˚π_pois⁄"

	)

4931 
	#LN_˘_¥e˚π_pois⁄
 "CT Pª˚πifiˇã Pois⁄"

	)

4932 
	#NID_˘_¥e˚π_pois⁄
 952

	)

4933 
	#OBJ_˘_¥e˚π_pois⁄
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,3L

	)

4935 
	#SN_˘_¥e˚π_sig√r
 "˘_¥e˚π_sig√r"

	)

4936 
	#LN_˘_¥e˚π_sig√r
 "CT Pª˚πifiˇã Sig√r"

	)

4937 
	#NID_˘_¥e˚π_sig√r
 953

	)

4938 
	#OBJ_˘_¥e˚π_sig√r
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,4L

	)

4940 
	#SN_˘_˚π_s˘s
 "˘_˚π_s˘s"

	)

4941 
	#LN_˘_˚π_s˘s
 "CT Cîtifiˇã SCTs"

	)

4942 
	#NID_˘_˚π_s˘s
 954

	)

4943 
	#OBJ_˘_˚π_s˘s
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,5L

	)

4945 
	#SN_jurisdi˘i⁄LoˇlôyName
 "jurisdi˘i⁄L"

	)

4946 
	#LN_jurisdi˘i⁄LoˇlôyName
 "jurisdi˘i⁄LoˇlôyName"

	)

4947 
	#NID_jurisdi˘i⁄LoˇlôyName
 955

	)

4948 
	#OBJ_jurisdi˘i⁄LoˇlôyName
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,1L

	)

4950 
	#SN_jurisdi˘i⁄SèãOrProvö˚Name
 "jurisdi˘i⁄ST"

	)

4951 
	#LN_jurisdi˘i⁄SèãOrProvö˚Name
 "jurisdi˘i⁄SèãOrProvö˚Name"

	)

4952 
	#NID_jurisdi˘i⁄SèãOrProvö˚Name
 956

	)

4953 
	#OBJ_jurisdi˘i⁄SèãOrProvö˚Name
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,2L

	)

4955 
	#SN_jurisdi˘i⁄Cou¡ryName
 "jurisdi˘i⁄C"

	)

4956 
	#LN_jurisdi˘i⁄Cou¡ryName
 "jurisdi˘i⁄Cou¡ryName"

	)

4957 
	#NID_jurisdi˘i⁄Cou¡ryName
 957

	)

4958 
	#OBJ_jurisdi˘i⁄Cou¡ryName
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,3L

	)

4960 
	#SN_id_s¸y±
 "id-s¸y±"

	)

4961 
	#LN_id_s¸y±
 "s¸y±"

	)

4962 
	#NID_id_s¸y±
 973

	)

4963 
	#OBJ_id_s¸y±
 1L,3L,6L,1L,4L,1L,11591L,4L,11L

	)

4965 
	#SN_és1_¥f
 "TLS1-PRF"

	)

4966 
	#LN_és1_¥f
 "és1-¥f"

	)

4967 
	#NID_és1_¥f
 1021

	)

4969 
	#SN_hkdf
 "HKDF"

	)

4970 
	#LN_hkdf
 "hkdf"

	)

4971 
	#NID_hkdf
 1036

	)

4973 
	#SN_id_pköô
 "id-pköô"

	)

4974 
	#NID_id_pköô
 1031

	)

4975 
	#OBJ_id_pköô
 1L,3L,6L,1L,5L,2L,3L

	)

4977 
	#SN_pkInôClõ¡Auth
 "pkInôClõ¡Auth"

	)

4978 
	#LN_pkInôClõ¡Auth
 "PKINIT Clõ¡ Auth"

	)

4979 
	#NID_pkInôClõ¡Auth
 1032

	)

4980 
	#OBJ_pkInôClõ¡Auth
 
OBJ_id_pköô
,4L

	)

4982 
	#SN_pkInôKDC
 "pkInôKDC"

	)

4983 
	#LN_pkInôKDC
 "Signög KDC Re•⁄£"

	)

4984 
	#NID_pkInôKDC
 1033

	)

4985 
	#OBJ_pkInôKDC
 
OBJ_id_pköô
,5L

	)

4987 
	#SN_X25519
 "X25519"

	)

4988 
	#NID_X25519
 1034

	)

4989 
	#OBJ_X25519
 1L,3L,101L,110L

	)

4991 
	#SN_X448
 "X448"

	)

4992 
	#NID_X448
 1035

	)

4993 
	#OBJ_X448
 1L,3L,101L,111L

	)

4995 
	#SN_ED25519
 "ED25519"

	)

4996 
	#NID_ED25519
 1087

	)

4997 
	#OBJ_ED25519
 1L,3L,101L,112L

	)

4999 
	#SN_ED448
 "ED448"

	)

5000 
	#NID_ED448
 1088

	)

5001 
	#OBJ_ED448
 1L,3L,101L,113L

	)

5003 
	#SN_kx_rß
 "KxRSA"

	)

5004 
	#LN_kx_rß
 "kx-rß"

	)

5005 
	#NID_kx_rß
 1037

	)

5007 
	#SN_kx_ecdhe
 "KxECDHE"

	)

5008 
	#LN_kx_ecdhe
 "kx-ecdhe"

	)

5009 
	#NID_kx_ecdhe
 1038

	)

5011 
	#SN_kx_dhe
 "KxDHE"

	)

5012 
	#LN_kx_dhe
 "kx-dhe"

	)

5013 
	#NID_kx_dhe
 1039

	)

5015 
	#SN_kx_ecdhe_psk
 "KxECDHE-PSK"

	)

5016 
	#LN_kx_ecdhe_psk
 "kx-ecdhe-psk"

	)

5017 
	#NID_kx_ecdhe_psk
 1040

	)

5019 
	#SN_kx_dhe_psk
 "KxDHE-PSK"

	)

5020 
	#LN_kx_dhe_psk
 "kx-dhe-psk"

	)

5021 
	#NID_kx_dhe_psk
 1041

	)

5023 
	#SN_kx_rß_psk
 "KxRSA_PSK"

	)

5024 
	#LN_kx_rß_psk
 "kx-rß-psk"

	)

5025 
	#NID_kx_rß_psk
 1042

	)

5027 
	#SN_kx_psk
 "KxPSK"

	)

5028 
	#LN_kx_psk
 "kx-psk"

	)

5029 
	#NID_kx_psk
 1043

	)

5031 
	#SN_kx_§p
 "KxSRP"

	)

5032 
	#LN_kx_§p
 "kx-§p"

	)

5033 
	#NID_kx_§p
 1044

	)

5035 
	#SN_kx_go°
 "KxGOST"

	)

5036 
	#LN_kx_go°
 "kx-go°"

	)

5037 
	#NID_kx_go°
 1045

	)

5039 
	#SN_kx_™y
 "KxANY"

	)

5040 
	#LN_kx_™y
 "kx-™y"

	)

5041 
	#NID_kx_™y
 1063

	)

5043 
	#SN_auth_rß
 "AuthRSA"

	)

5044 
	#LN_auth_rß
 "auth-rß"

	)

5045 
	#NID_auth_rß
 1046

	)

5047 
	#SN_auth_ecdß
 "AuthECDSA"

	)

5048 
	#LN_auth_ecdß
 "auth-ecdß"

	)

5049 
	#NID_auth_ecdß
 1047

	)

5051 
	#SN_auth_psk
 "AuthPSK"

	)

5052 
	#LN_auth_psk
 "auth-psk"

	)

5053 
	#NID_auth_psk
 1048

	)

5055 
	#SN_auth_dss
 "AuthDSS"

	)

5056 
	#LN_auth_dss
 "auth-dss"

	)

5057 
	#NID_auth_dss
 1049

	)

5059 
	#SN_auth_go°01
 "AuthGOST01"

	)

5060 
	#LN_auth_go°01
 "auth-go°01"

	)

5061 
	#NID_auth_go°01
 1050

	)

5063 
	#SN_auth_go°12
 "AuthGOST12"

	)

5064 
	#LN_auth_go°12
 "auth-go°12"

	)

5065 
	#NID_auth_go°12
 1051

	)

5067 
	#SN_auth_§p
 "AuthSRP"

	)

5068 
	#LN_auth_§p
 "auth-§p"

	)

5069 
	#NID_auth_§p
 1052

	)

5071 
	#SN_auth_nuŒ
 "AuthNULL"

	)

5072 
	#LN_auth_nuŒ
 "auth-nuŒ"

	)

5073 
	#NID_auth_nuŒ
 1053

	)

5075 
	#SN_auth_™y
 "AuthANY"

	)

5076 
	#LN_auth_™y
 "auth-™y"

	)

5077 
	#NID_auth_™y
 1064

	)

5079 
	#SN_pﬁy1305
 "Pﬁy1305"

	)

5080 
	#LN_pﬁy1305
 "pﬁy1305"

	)

5081 
	#NID_pﬁy1305
 1061

	)

5083 
	#SN_sùhash
 "SùHash"

	)

5084 
	#LN_sùhash
 "sùhash"

	)

5085 
	#NID_sùhash
 1062

	)

5087 
	#SN_ffdhe2048
 "ffdhe2048"

	)

5088 
	#NID_ffdhe2048
 1126

	)

5090 
	#SN_ffdhe3072
 "ffdhe3072"

	)

5091 
	#NID_ffdhe3072
 1127

	)

5093 
	#SN_ffdhe4096
 "ffdhe4096"

	)

5094 
	#NID_ffdhe4096
 1128

	)

5096 
	#SN_ffdhe6144
 "ffdhe6144"

	)

5097 
	#NID_ffdhe6144
 1129

	)

5099 
	#SN_ffdhe8192
 "ffdhe8192"

	)

5100 
	#NID_ffdhe8192
 1130

	)

5102 
	#SN_ISO_UA
 "ISO-UA"

	)

5103 
	#NID_ISO_UA
 1150

	)

5104 
	#OBJ_ISO_UA
 
OBJ_membî_body
,804L

	)

5106 
	#SN_ua_pki
 "ua-pki"

	)

5107 
	#NID_ua_pki
 1151

	)

5108 
	#OBJ_ua_pki
 
OBJ_ISO_UA
,2L,1L,1L,1L

	)

5110 
	#SN_d°u28147
 "d°u28147"

	)

5111 
	#LN_d°u28147
 "DSTU Go° 28147-2009"

	)

5112 
	#NID_d°u28147
 1152

	)

5113 
	#OBJ_d°u28147
 
OBJ_ua_pki
,1L,1L,1L

	)

5115 
	#SN_d°u28147_ofb
 "d°u28147-ofb"

	)

5116 
	#LN_d°u28147_ofb
 "DSTU Go° 28147-2009 OFB mode"

	)

5117 
	#NID_d°u28147_ofb
 1153

	)

5118 
	#OBJ_d°u28147_ofb
 
OBJ_d°u28147
,2L

	)

5120 
	#SN_d°u28147_cfb
 "d°u28147-cfb"

	)

5121 
	#LN_d°u28147_cfb
 "DSTU Go° 28147-2009 CFB mode"

	)

5122 
	#NID_d°u28147_cfb
 1154

	)

5123 
	#OBJ_d°u28147_cfb
 
OBJ_d°u28147
,3L

	)

5125 
	#SN_d°u28147_wøp
 "d°u28147-wøp"

	)

5126 
	#LN_d°u28147_wøp
 "DSTU Go° 28147-2009 key wøp"

	)

5127 
	#NID_d°u28147_wøp
 1155

	)

5128 
	#OBJ_d°u28147_wøp
 
OBJ_d°u28147
,5L

	)

5130 
	#SN_hmacWôhD°u34311
 "hmacWôhD°u34311"

	)

5131 
	#LN_hmacWôhD°u34311
 "HMAC DSTU Go° 34311-95"

	)

5132 
	#NID_hmacWôhD°u34311
 1156

	)

5133 
	#OBJ_hmacWôhD°u34311
 
OBJ_ua_pki
,1L,1L,2L

	)

5135 
	#SN_d°u34311
 "d°u34311"

	)

5136 
	#LN_d°u34311
 "DSTU Go° 34311-95"

	)

5137 
	#NID_d°u34311
 1157

	)

5138 
	#OBJ_d°u34311
 
OBJ_ua_pki
,1L,2L,1L

	)

5140 
	#SN_d°u4145À
 "d°u4145À"

	)

5141 
	#LN_d°u4145À
 "DSTU 4145-2002Üôéêídün"

	)

5142 
	#NID_d°u4145À
 1158

	)

5143 
	#OBJ_d°u4145À
 
OBJ_ua_pki
,1L,3L,1L,1L

	)

5145 
	#SN_d°u4145be
 "d°u4145be"

	)

5146 
	#LN_d°u4145be
 "DSTU 4145-2002 bigÉndün"

	)

5147 
	#NID_d°u4145be
 1159

	)

5148 
	#OBJ_d°u4145be
 
OBJ_d°u4145À
,1L,1L

	)

5150 
	#SN_uacurve0
 "uacurve0"

	)

5151 
	#LN_uacurve0
 "DSTU curvê0"

	)

5152 
	#NID_uacurve0
 1160

	)

5153 
	#OBJ_uacurve0
 
OBJ_d°u4145À
,2L,0L

	)

5155 
	#SN_uacurve1
 "uacurve1"

	)

5156 
	#LN_uacurve1
 "DSTU curvê1"

	)

5157 
	#NID_uacurve1
 1161

	)

5158 
	#OBJ_uacurve1
 
OBJ_d°u4145À
,2L,1L

	)

5160 
	#SN_uacurve2
 "uacurve2"

	)

5161 
	#LN_uacurve2
 "DSTU curvê2"

	)

5162 
	#NID_uacurve2
 1162

	)

5163 
	#OBJ_uacurve2
 
OBJ_d°u4145À
,2L,2L

	)

5165 
	#SN_uacurve3
 "uacurve3"

	)

5166 
	#LN_uacurve3
 "DSTU curvê3"

	)

5167 
	#NID_uacurve3
 1163

	)

5168 
	#OBJ_uacurve3
 
OBJ_d°u4145À
,2L,3L

	)

5170 
	#SN_uacurve4
 "uacurve4"

	)

5171 
	#LN_uacurve4
 "DSTU curvê4"

	)

5172 
	#NID_uacurve4
 1164

	)

5173 
	#OBJ_uacurve4
 
OBJ_d°u4145À
,2L,4L

	)

5175 
	#SN_uacurve5
 "uacurve5"

	)

5176 
	#LN_uacurve5
 "DSTU curvê5"

	)

5177 
	#NID_uacurve5
 1165

	)

5178 
	#OBJ_uacurve5
 
OBJ_d°u4145À
,2L,5L

	)

5180 
	#SN_uacurve6
 "uacurve6"

	)

5181 
	#LN_uacurve6
 "DSTU curvê6"

	)

5182 
	#NID_uacurve6
 1166

	)

5183 
	#OBJ_uacurve6
 
OBJ_d°u4145À
,2L,6L

	)

5185 
	#SN_uacurve7
 "uacurve7"

	)

5186 
	#LN_uacurve7
 "DSTU curvê7"

	)

5187 
	#NID_uacurve7
 1167

	)

5188 
	#OBJ_uacurve7
 
OBJ_d°u4145À
,2L,7L

	)

5190 
	#SN_uacurve8
 "uacurve8"

	)

5191 
	#LN_uacurve8
 "DSTU curvê8"

	)

5192 
	#NID_uacurve8
 1168

	)

5193 
	#OBJ_uacurve8
 
OBJ_d°u4145À
,2L,8L

	)

5195 
	#SN_uacurve9
 "uacurve9"

	)

5196 
	#LN_uacurve9
 "DSTU curvê9"

	)

5197 
	#NID_uacurve9
 1169

	)

5198 
	#OBJ_uacurve9
 
OBJ_d°u4145À
,2L,9L

	)

	@/usr/include/openssl/objectserr.h

11 #i‚de‡
HEADER_OBJERR_H


12 
	#HEADER_OBJERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_OBJ_°rögs
();

26 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

27 
	#OBJ_F_OBJ_ADD_SIGID
 107

	)

28 
	#OBJ_F_OBJ_CREATE
 100

	)

29 
	#OBJ_F_OBJ_DUP
 101

	)

30 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

31 
	#OBJ_F_OBJ_NID2LN
 102

	)

32 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

33 
	#OBJ_F_OBJ_NID2SN
 104

	)

34 
	#OBJ_F_OBJ_TXT2OBJ
 108

	)

39 
	#OBJ_R_OID_EXISTS
 102

	)

40 
	#OBJ_R_UNKNOWN_NID
 101

	)

	@/usr/include/openssl/pemerr.h

11 #i‚de‡
HEADER_PEMERR_H


12 
	#HEADER_PEMERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_PEM_°rögs
();

26 
	#PEM_F_B2I_DSS
 127

	)

27 
	#PEM_F_B2I_PVK_BIO
 128

	)

28 
	#PEM_F_B2I_RSA
 129

	)

29 
	#PEM_F_CHECK_BITLEN_DSA
 130

	)

30 
	#PEM_F_CHECK_BITLEN_RSA
 131

	)

31 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 120

	)

32 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 121

	)

33 
	#PEM_F_DO_B2I
 132

	)

34 
	#PEM_F_DO_B2I_BIO
 133

	)

35 
	#PEM_F_DO_BLOB_HEADER
 134

	)

36 
	#PEM_F_DO_I2B
 146

	)

37 
	#PEM_F_DO_PK8PKEY
 126

	)

38 
	#PEM_F_DO_PK8PKEY_FP
 125

	)

39 
	#PEM_F_DO_PVK_BODY
 135

	)

40 
	#PEM_F_DO_PVK_HEADER
 136

	)

41 
	#PEM_F_GET_HEADER_AND_DATA
 143

	)

42 
	#PEM_F_GET_NAME
 144

	)

43 
	#PEM_F_I2B_PVK
 137

	)

44 
	#PEM_F_I2B_PVK_BIO
 138

	)

45 
	#PEM_F_LOAD_IV
 101

	)

46 
	#PEM_F_PEM_ASN1_READ
 102

	)

47 
	#PEM_F_PEM_ASN1_READ_BIO
 103

	)

48 
	#PEM_F_PEM_ASN1_WRITE
 104

	)

49 
	#PEM_F_PEM_ASN1_WRITE_BIO
 105

	)

50 
	#PEM_F_PEM_DEF_CALLBACK
 100

	)

51 
	#PEM_F_PEM_DO_HEADER
 106

	)

52 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 107

	)

53 
	#PEM_F_PEM_READ
 108

	)

54 
	#PEM_F_PEM_READ_BIO
 109

	)

55 
	#PEM_F_PEM_READ_BIO_DHPARAMS
 141

	)

56 
	#PEM_F_PEM_READ_BIO_EX
 145

	)

57 
	#PEM_F_PEM_READ_BIO_PARAMETERS
 140

	)

58 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 123

	)

59 
	#PEM_F_PEM_READ_DHPARAMS
 142

	)

60 
	#PEM_F_PEM_READ_PRIVATEKEY
 124

	)

61 
	#PEM_F_PEM_SIGNFINAL
 112

	)

62 
	#PEM_F_PEM_WRITE
 113

	)

63 
	#PEM_F_PEM_WRITE_BIO
 114

	)

64 
	#PEM_F_PEM_WRITE_BIO_PRIVATEKEY_TRADITIONAL
 147

	)

65 
	#PEM_F_PEM_WRITE_PRIVATEKEY
 139

	)

66 
	#PEM_F_PEM_X509_INFO_READ
 115

	)

67 
	#PEM_F_PEM_X509_INFO_READ_BIO
 116

	)

68 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 117

	)

73 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

74 
	#PEM_R_BAD_DECRYPT
 101

	)

75 
	#PEM_R_BAD_END_LINE
 102

	)

76 
	#PEM_R_BAD_IV_CHARS
 103

	)

77 
	#PEM_R_BAD_MAGIC_NUMBER
 116

	)

78 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

79 
	#PEM_R_BAD_VERSION_NUMBER
 117

	)

80 
	#PEM_R_BIO_WRITE_FAILURE
 118

	)

81 
	#PEM_R_CIPHER_IS_NULL
 127

	)

82 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

83 
	#PEM_R_EXPECTING_PRIVATE_KEY_BLOB
 119

	)

84 
	#PEM_R_EXPECTING_PUBLIC_KEY_BLOB
 120

	)

85 
	#PEM_R_HEADER_TOO_LONG
 128

	)

86 
	#PEM_R_INCONSISTENT_HEADER
 121

	)

87 
	#PEM_R_KEYBLOB_HEADER_PARSE_ERROR
 122

	)

88 
	#PEM_R_KEYBLOB_TOO_SHORT
 123

	)

89 
	#PEM_R_MISSING_DEK_IV
 129

	)

90 
	#PEM_R_NOT_DEK_INFO
 105

	)

91 
	#PEM_R_NOT_ENCRYPTED
 106

	)

92 
	#PEM_R_NOT_PROC_TYPE
 107

	)

93 
	#PEM_R_NO_START_LINE
 108

	)

94 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

95 
	#PEM_R_PVK_DATA_TOO_SHORT
 124

	)

96 
	#PEM_R_PVK_TOO_SHORT
 125

	)

97 
	#PEM_R_READ_KEY
 111

	)

98 
	#PEM_R_SHORT_HEADER
 112

	)

99 
	#PEM_R_UNEXPECTED_DEK_IV
 130

	)

100 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

101 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

102 
	#PEM_R_UNSUPPORTED_KEY_COMPONENTS
 126

	)

103 
	#PEM_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 110

	)

	@/usr/include/openssl/pkcs7.h

10 #i‚de‡
HEADER_PKCS7_H


11 
	#HEADER_PKCS7_H


	)

13 
	~<›ís¶/a¢1.h
>

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/e_os2.h
>

17 
	~<›ís¶/symhacks.h
>

18 
	~<›ís¶/os¶_typ.h
>

19 
	~<›ís¶/pkcs7îr.h
>

21 #ifde‡ 
__˝lu•lus


32 
	spkcs7_issuî_™d_£rül_°
 {

33 
X509_NAME
 *
issuî
;

34 
ASN1_INTEGER
 *
£rül
;

35 } 
	tPKCS7_ISSUER_AND_SERIAL
;

37 
	spkcs7_sig√r_öfo_°
 {

38 
ASN1_INTEGER
 *
vîsi⁄
;

39 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

40 
X509_ALGOR
 *
dige°_Æg
;

41 
STACK_OF
(
X509_ATTRIBUTE
Ë*
auth_©å
;

42 
X509_ALGOR
 *
dige°_íc_Æg
;

43 
ASN1_OCTET_STRING
 *
íc_dige°
;

44 
STACK_OF
(
X509_ATTRIBUTE
Ë*
u«uth_©å
;

46 
EVP_PKEY
 *
pkey
;

47 } 
	tPKCS7_SIGNER_INFO
;

49 
DEFINE_STACK_OF
(
PKCS7_SIGNER_INFO
)

51 
	spkcs7_ªcù_öfo_°
 {

52 
ASN1_INTEGER
 *
vîsi⁄
;

53 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

54 
X509_ALGOR
 *
key_íc_Æg‹
;

55 
ASN1_OCTET_STRING
 *
íc_key
;

56 
X509
 *
˚π
;

57 } 
	tPKCS7_RECIP_INFO
;

59 
DEFINE_STACK_OF
(
PKCS7_RECIP_INFO
)

61 
	spkcs7_sig√d_°
 {

62 
ASN1_INTEGER
 *
vîsi⁄
;

63 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

64 
STACK_OF
(
X509
Ë*
˚π
;

65 
STACK_OF
(
X509_CRL
Ë*
¸l
;

66 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

67 
pkcs7_°
 *
c⁄ã¡s
;

68 } 
	tPKCS7_SIGNED
;

74 
	spkcs7_íc_c⁄ã¡_°
 {

75 
ASN1_OBJECT
 *
c⁄ã¡_ty≥
;

76 
X509_ALGOR
 *
Æg‹ôhm
;

77 
ASN1_OCTET_STRING
 *
íc_d©a
;

78 c⁄° 
EVP_CIPHER
 *
cùhî
;

79 } 
	tPKCS7_ENC_CONTENT
;

81 
	spkcs7_ívñ›ed_°
 {

82 
ASN1_INTEGER
 *
vîsi⁄
;

83 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

84 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

85 } 
	tPKCS7_ENVELOPE
;

87 
	spkcs7_sig√d™dívñ›ed_°
 {

88 
ASN1_INTEGER
 *
vîsi⁄
;

89 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

90 
STACK_OF
(
X509
Ë*
˚π
;

91 
STACK_OF
(
X509_CRL
Ë*
¸l
;

92 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

93 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

94 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

95 } 
	tPKCS7_SIGN_ENVELOPE
;

97 
	spkcs7_dige°_°
 {

98 
ASN1_INTEGER
 *
vîsi⁄
;

99 
X509_ALGOR
 *
md
;

100 
pkcs7_°
 *
c⁄ã¡s
;

101 
ASN1_OCTET_STRING
 *
dige°
;

102 } 
	tPKCS7_DIGEST
;

104 
	spkcs7_í¸y±ed_°
 {

105 
ASN1_INTEGER
 *
vîsi⁄
;

106 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

107 } 
	tPKCS7_ENCRYPT
;

109 
	spkcs7_°
 {

114 *
a¢1
;

115 
Àngth
;

116 
	#PKCS7_S_HEADER
 0

	)

117 
	#PKCS7_S_BODY
 1

	)

118 
	#PKCS7_S_TAIL
 2

	)

119 
°©e
;

120 
dëached
;

121 
ASN1_OBJECT
 *
ty≥
;

128 *
±r
;

130 
ASN1_OCTET_STRING
 *
d©a
;

132 
PKCS7_SIGNED
 *
sign
;

134 
PKCS7_ENVELOPE
 *
ívñ›ed
;

136 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ívñ›ed
;

138 
PKCS7_DIGEST
 *
dige°
;

140 
PKCS7_ENCRYPT
 *
í¸y±ed
;

142 
ASN1_TYPE
 *
Ÿhî
;

143 } 
d
;

144 } 
	tPKCS7
;

146 
DEFINE_STACK_OF
(
PKCS7
)

148 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

149 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

151 
	#PKCS7_gë_sig√d_©åibuãs
(
si
Ë((si)->
auth_©å
)

	)

152 
	#PKCS7_gë_©åibuãs
(
si
Ë((si)->
u«uth_©å
)

	)

154 
	#PKCS7_ty≥_is_sig√d
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_sig√d
)

	)

155 
	#PKCS7_ty≥_is_í¸y±ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

156 
	#PKCS7_ty≥_is_ívñ›ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_ívñ›ed
)

	)

157 
	#PKCS7_ty≥_is_sig√dAndEnvñ›ed
(
a
) \

158 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_sig√dAndEnvñ›ed
)

	)

159 
	#PKCS7_ty≥_is_d©a
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_d©a
)

	)

160 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

162 
	#PKCS7_£t_dëached
(
p
,
v
) \

163 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

164 
	#PKCS7_gë_dëached
(
p
) \

165 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

167 
	#PKCS7_is_dëached
(
p7
Ë(
	`PKCS7_ty≥_is_sig√d
’7Ë&& 
	`PKCS7_gë_dëached
’7))

	)

171 
	#PKCS7_TEXT
 0x1

	)

172 
	#PKCS7_NOCERTS
 0x2

	)

173 
	#PKCS7_NOSIGS
 0x4

	)

174 
	#PKCS7_NOCHAIN
 0x8

	)

175 
	#PKCS7_NOINTERN
 0x10

	)

176 
	#PKCS7_NOVERIFY
 0x20

	)

177 
	#PKCS7_DETACHED
 0x40

	)

178 
	#PKCS7_BINARY
 0x80

	)

179 
	#PKCS7_NOATTR
 0x100

	)

180 
	#PKCS7_NOSMIMECAP
 0x200

	)

181 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

182 
	#PKCS7_CRLFEOL
 0x800

	)

183 
	#PKCS7_STREAM
 0x1000

	)

184 
	#PKCS7_NOCRL
 0x2000

	)

185 
	#PKCS7_PARTIAL
 0x4000

	)

186 
	#PKCS7_REUSE_DIGEST
 0x8000

	)

187 
	#PKCS7_NO_DUAL_CONTENT
 0x10000

	)

191 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

192 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

193 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

194 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

195 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

196 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

197 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

198 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

199 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

202 
	#SMIME_ASCIICRLF
 0x80000

	)

204 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

206 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,

207 c⁄° 
EVP_MD
 *
ty≥
, *
md
,

208 *
Àn
);

209 #i‚de‡
OPENSSL_NO_STDIO


210 
PKCS7
 *
d2i_PKCS7_Â
(
FILE
 *
Â
, PKCS7 **
p7
);

211 
i2d_PKCS7_Â
(
FILE
 *
Â
, 
PKCS7
 *
p7
);

213 
PKCS7
 *
PKCS7_dup
(PKCS7 *
p7
);

214 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
, PKCS7 **
p7
);

215 
i2d_PKCS7_bio
(
BIO
 *
bp
, 
PKCS7
 *
p7
);

216 
i2d_PKCS7_bio_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

217 
PEM_wrôe_bio_PKCS7_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

219 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

220 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

221 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

222 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

223 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

224 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

225 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

226 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

227 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

229 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

230 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

232 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

233 
DECLARE_ASN1_PRINT_FUNCTION
(
PKCS7
)

235 
PKCS7_˘æ
(
PKCS7
 *
p7
, 
cmd
, 
œrg
, *
∑rg
);

237 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

238 
PKCS7_£t0_ty≥_Ÿhî
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
Ÿhî
);

239 
PKCS7_£t_c⁄ã¡
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

240 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

241 c⁄° 
EVP_MD
 *
dg°
);

242 
PKCS7_SIGNER_INFO_sign
(
PKCS7_SIGNER_INFO
 *
si
);

243 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

244 
PKCS7_add_˚πifiˇã
(
PKCS7
 *
p7
, 
X509
 *
x509
);

245 
PKCS7_add_¸l
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

246 
PKCS7_c⁄ã¡_√w
(
PKCS7
 *
p7
, 
nid
);

247 
PKCS7_d©aVîify
(
X509_STORE
 *
˚π_°‹e
, 
X509_STORE_CTX
 *
˘x
,

248 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

249 
PKCS7_sig«tuªVîify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

250 
X509
 *
x509
);

252 
BIO
 *
PKCS7_d©aInô
(
PKCS7
 *
p7
, BIO *
bio
);

253 
PKCS7_d©aFöÆ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

254 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
ö_bio
, 
X509
 *
p˚π
);

256 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuª
(
PKCS7
 *
p7
, 
X509
 *
x509
,

257 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
dg°
);

258 
X509
 *
PKCS7_˚π_‰om_sig√r_öfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

259 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, c⁄° 
EVP_MD
 *
md
);

260 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
PKCS7_gë_sig√r_öfo
(
PKCS7
 *
p7
);

262 
PKCS7_RECIP_INFO
 *
PKCS7_add_ªcùõ¡
(
PKCS7
 *
p7
, 
X509
 *
x509
);

263 
PKCS7_SIGNER_INFO_gë0_Ægs
(
PKCS7_SIGNER_INFO
 *
si
, 
EVP_PKEY
 **
pk
,

264 
X509_ALGOR
 **
pdig
, X509_ALGOR **
psig
);

265 
PKCS7_RECIP_INFO_gë0_Æg
(
PKCS7_RECIP_INFO
 *
ri
, 
X509_ALGOR
 **
≥nc
);

266 
PKCS7_add_ªcùõ¡_öfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

267 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

268 
PKCS7_£t_cùhî
(
PKCS7
 *
p7
, c⁄° 
EVP_CIPHER
 *
cùhî
);

269 
PKCS7_°ªam
(***
bound¨y
, 
PKCS7
 *
p7
);

271 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gë_issuî_™d_£rül
(
PKCS7
 *
p7
, 
idx
);

272 
ASN1_OCTET_STRING
 *
PKCS7_dige°_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

273 
PKCS7_add_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
ty≥
,

274 *
d©a
);

275 
PKCS7_add_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©πy≥
,

276 *
vÆue
);

277 
ASN1_TYPE
 *
PKCS7_gë_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

278 
ASN1_TYPE
 *
PKCS7_gë_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

279 
PKCS7_£t_sig√d_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

280 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

281 
PKCS7_£t_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

282 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

284 
PKCS7
 *
PKCS7_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

285 
BIO
 *
d©a
, 
Êags
);

287 
PKCS7_SIGNER_INFO
 *
PKCS7_sign_add_sig√r
(
PKCS7
 *
p7
,

288 
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
,

289 c⁄° 
EVP_MD
 *
md
, 
Êags
);

291 
PKCS7_föÆ
(
PKCS7
 *
p7
, 
BIO
 *
d©a
, 
Êags
);

292 
PKCS7_vîify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
,

293 
BIO
 *
öd©a
, BIO *
out
, 
Êags
);

294 
STACK_OF
(
X509
Ë*
PKCS7_gë0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509Ë*
˚πs
,

295 
Êags
);

296 
PKCS7
 *
PKCS7_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

297 
Êags
);

298 
PKCS7_de¸y±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
, 
BIO
 *
d©a
,

299 
Êags
);

301 
PKCS7_add_©åib_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
,

302 
STACK_OF
(
X509_ALGOR
Ë*
ˇp
);

303 
STACK_OF
(
X509_ALGOR
Ë*
PKCS7_gë_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
);

304 
PKCS7_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë*
sk
, 
nid
, 
¨g
);

306 
PKCS7_add_©åib_c⁄ã¡_ty≥
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_OBJECT
 *
coid
);

307 
PKCS7_add0_©åib_signög_time
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_TIME
 *
t
);

308 
PKCS7_add1_©åib_dige°
(
PKCS7_SIGNER_INFO
 *
si
,

309 c⁄° *
md
, 
mdÀn
);

311 
SMIME_wrôe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
Êags
);

312 
PKCS7
 *
SMIME_ªad_PKCS7
(
BIO
 *
bio
, BIO **
bc⁄t
);

314 
BIO
 *
BIO_√w_PKCS7
(BIO *
out
, 
PKCS7
 *
p7
);

316 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rsaerr.h

11 #i‚de‡
HEADER_RSAERR_H


12 
	#HEADER_RSAERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_RSA_°rögs
();

26 
	#RSA_F_CHECK_PADDING_MD
 140

	)

27 
	#RSA_F_ENCODE_PKCS1
 146

	)

28 
	#RSA_F_INT_RSA_VERIFY
 145

	)

29 
	#RSA_F_OLD_RSA_PRIV_DECODE
 147

	)

30 
	#RSA_F_PKEY_PSS_INIT
 165

	)

31 
	#RSA_F_PKEY_RSA_CTRL
 143

	)

32 
	#RSA_F_PKEY_RSA_CTRL_STR
 144

	)

33 
	#RSA_F_PKEY_RSA_SIGN
 142

	)

34 
	#RSA_F_PKEY_RSA_VERIFY
 149

	)

35 
	#RSA_F_PKEY_RSA_VERIFYRECOVER
 141

	)

36 
	#RSA_F_RSA_ALGOR_TO_MD
 156

	)

37 
	#RSA_F_RSA_BUILTIN_KEYGEN
 129

	)

38 
	#RSA_F_RSA_CHECK_KEY
 123

	)

39 
	#RSA_F_RSA_CHECK_KEY_EX
 160

	)

40 
	#RSA_F_RSA_CMS_DECRYPT
 159

	)

41 
	#RSA_F_RSA_CMS_VERIFY
 158

	)

42 
	#RSA_F_RSA_ITEM_VERIFY
 148

	)

43 
	#RSA_F_RSA_METH_DUP
 161

	)

44 
	#RSA_F_RSA_METH_NEW
 162

	)

45 
	#RSA_F_RSA_METH_SET1_NAME
 163

	)

46 
	#RSA_F_RSA_MGF1_TO_MD
 157

	)

47 
	#RSA_F_RSA_MULTIP_INFO_NEW
 166

	)

48 
	#RSA_F_RSA_NEW_METHOD
 106

	)

49 
	#RSA_F_RSA_NULL
 124

	)

50 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 132

	)

51 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 133

	)

52 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 134

	)

53 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 135

	)

54 
	#RSA_F_RSA_OSSL_PRIVATE_DECRYPT
 101

	)

55 
	#RSA_F_RSA_OSSL_PRIVATE_ENCRYPT
 102

	)

56 
	#RSA_F_RSA_OSSL_PUBLIC_DECRYPT
 103

	)

57 
	#RSA_F_RSA_OSSL_PUBLIC_ENCRYPT
 104

	)

58 
	#RSA_F_RSA_PADDING_ADD_NONE
 107

	)

59 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 121

	)

60 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1
 154

	)

61 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 125

	)

62 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1
 152

	)

63 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 108

	)

64 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 109

	)

65 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 110

	)

66 
	#RSA_F_RSA_PADDING_ADD_X931
 127

	)

67 
	#RSA_F_RSA_PADDING_CHECK_NONE
 111

	)

68 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 122

	)

69 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1
 153

	)

70 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 112

	)

71 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 113

	)

72 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 114

	)

73 
	#RSA_F_RSA_PADDING_CHECK_X931
 128

	)

74 
	#RSA_F_RSA_PARAM_DECODE
 164

	)

75 
	#RSA_F_RSA_PRINT
 115

	)

76 
	#RSA_F_RSA_PRINT_FP
 116

	)

77 
	#RSA_F_RSA_PRIV_DECODE
 150

	)

78 
	#RSA_F_RSA_PRIV_ENCODE
 138

	)

79 
	#RSA_F_RSA_PSS_GET_PARAM
 151

	)

80 
	#RSA_F_RSA_PSS_TO_CTX
 155

	)

81 
	#RSA_F_RSA_PUB_DECODE
 139

	)

82 
	#RSA_F_RSA_SETUP_BLINDING
 136

	)

83 
	#RSA_F_RSA_SIGN
 117

	)

84 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 118

	)

85 
	#RSA_F_RSA_VERIFY
 119

	)

86 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 120

	)

87 
	#RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1
 126

	)

88 
	#RSA_F_SETUP_TBUF
 167

	)

93 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

94 
	#RSA_R_BAD_E_VALUE
 101

	)

95 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

96 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

97 
	#RSA_R_BAD_SIGNATURE
 104

	)

98 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

99 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

100 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

101 
	#RSA_R_DATA_TOO_LARGE
 109

	)

102 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

103 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

104 
	#RSA_R_DATA_TOO_SMALL
 111

	)

105 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

106 
	#RSA_R_DIGEST_DOES_NOT_MATCH
 158

	)

107 
	#RSA_R_DIGEST_NOT_ALLOWED
 145

	)

108 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

109 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

110 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

111 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

112 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

113 
	#RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE
 144

	)

114 
	#RSA_R_INVALID_DIGEST
 157

	)

115 
	#RSA_R_INVALID_DIGEST_LENGTH
 143

	)

116 
	#RSA_R_INVALID_HEADER
 137

	)

117 
	#RSA_R_INVALID_LABEL
 160

	)

118 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

119 
	#RSA_R_INVALID_MGF1_MD
 156

	)

120 
	#RSA_R_INVALID_MULTI_PRIME_KEY
 167

	)

121 
	#RSA_R_INVALID_OAEP_PARAMETERS
 161

	)

122 
	#RSA_R_INVALID_PADDING
 138

	)

123 
	#RSA_R_INVALID_PADDING_MODE
 141

	)

124 
	#RSA_R_INVALID_PSS_PARAMETERS
 149

	)

125 
	#RSA_R_INVALID_PSS_SALTLEN
 146

	)

126 
	#RSA_R_INVALID_SALT_LENGTH
 150

	)

127 
	#RSA_R_INVALID_TRAILER
 139

	)

128 
	#RSA_R_INVALID_X931_DIGEST
 142

	)

129 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

130 
	#RSA_R_KEY_PRIME_NUM_INVALID
 165

	)

131 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

132 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

133 
	#RSA_R_MISSING_PRIVATE_KEY
 179

	)

134 
	#RSA_R_MGF1_DIGEST_NOT_ALLOWED
 152

	)

135 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

136 
	#RSA_R_MP_COEFFICIENT_NOT_INVERSE_OF_R
 168

	)

137 
	#RSA_R_MP_EXPONENT_NOT_CONGRUENT_TO_D
 169

	)

138 
	#RSA_R_MP_R_NOT_PRIME
 170

	)

139 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

140 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

141 
	#RSA_R_N_DOES_NOT_EQUAL_PRODUCT_OF_PRIMES
 172

	)

142 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

143 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

144 
	#RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 148

	)

145 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

146 
	#RSA_R_PKCS_DECODING_ERROR
 159

	)

147 
	#RSA_R_PSS_SALTLEN_TOO_SMALL
 164

	)

148 
	#RSA_R_P_NOT_PRIME
 128

	)

149 
	#RSA_R_Q_NOT_PRIME
 129

	)

150 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

151 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

152 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

153 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

154 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

155 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

156 
	#RSA_R_UNKNOWN_DIGEST
 166

	)

157 
	#RSA_R_UNKNOWN_MASK_DIGEST
 151

	)

158 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

159 
	#RSA_R_UNSUPPORTED_ENCRYPTION_TYPE
 162

	)

160 
	#RSA_R_UNSUPPORTED_LABEL_SOURCE
 163

	)

161 
	#RSA_R_UNSUPPORTED_MASK_ALGORITHM
 153

	)

162 
	#RSA_R_UNSUPPORTED_MASK_PARAMETER
 154

	)

163 
	#RSA_R_UNSUPPORTED_SIGNATURE_TYPE
 155

	)

164 
	#RSA_R_VALUE_MISSING
 147

	)

165 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

	@/usr/include/openssl/sha.h

10 #i‚de‡
HEADER_SHA_H


11 
	#HEADER_SHA_H


	)

13 
	~<›ís¶/e_os2.h
>

14 
	~<°ddef.h
>

16 #ifde‡ 
__˝lu•lus


25 
	#SHA_LONG
 

	)

27 
	#SHA_LBLOCK
 16

	)

28 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4)

	)

31 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

32 
	#SHA_DIGEST_LENGTH
 20

	)

34 
	sSHA°©e_°
 {

35 
SHA_LONG
 
h0
, 
h1
, 
h2
, 
h3
, 
h4
;

36 
SHA_LONG
 
Nl
, 
Nh
;

37 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

38 
num
;

39 } 
	tSHA_CTX
;

41 
SHA1_Inô
(
SHA_CTX
 *
c
);

42 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

43 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

44 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

45 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

47 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4)

	)

51 
	sSHA256°©e_°
 {

52 
SHA_LONG
 
h
[8];

53 
SHA_LONG
 
Nl
, 
Nh
;

54 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

55 
num
, 
md_Àn
;

56 } 
	tSHA256_CTX
;

58 
SHA224_Inô
(
SHA256_CTX
 *
c
);

59 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

60 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

61 *
SHA224
(c⁄° *
d
, 
size_t
 
n
, *
md
);

62 
SHA256_Inô
(
SHA256_CTX
 *
c
);

63 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

64 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

65 *
SHA256
(c⁄° *
d
, 
size_t
 
n
, *
md
);

66 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
, c⁄° *
d©a
);

68 
	#SHA224_DIGEST_LENGTH
 28

	)

69 
	#SHA256_DIGEST_LENGTH
 32

	)

70 
	#SHA384_DIGEST_LENGTH
 48

	)

71 
	#SHA512_DIGEST_LENGTH
 64

	)

83 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8)

	)

84 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

85 
	#SHA_LONG64
 
__öt64


	)

86 
	#U64
(
C
ËC##
UI64


	)

87 #ñi‡
deföed
(
__¨ch64__
)

88 
	#SHA_LONG64
 

	)

89 
	#U64
(
C
ËC##
UL


	)

91 
	#SHA_LONG64
 

	)

92 
	#U64
(
C
ËC##
ULL


	)

95 
	sSHA512°©e_°
 {

96 
SHA_LONG64
 
h
[8];

97 
SHA_LONG64
 
Nl
, 
Nh
;

99 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

100 
p
[
SHA512_CBLOCK
];

101 } 
u
;

102 
num
, 
md_Àn
;

103 } 
	tSHA512_CTX
;

105 
SHA384_Inô
(
SHA512_CTX
 *
c
);

106 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

107 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

108 *
SHA384
(c⁄° *
d
, 
size_t
 
n
, *
md
);

109 
SHA512_Inô
(
SHA512_CTX
 *
c
);

110 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

111 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

112 *
SHA512
(c⁄° *
d
, 
size_t
 
n
, *
md
);

113 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
, c⁄° *
d©a
);

115 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509_vfy.h

10 #i‚de‡
HEADER_X509_VFY_H


11 
	#HEADER_X509_VFY_H


	)

16 #i‚de‡
HEADER_X509_H


17 
	~<›ís¶/x509.h
>

20 
	~<›ís¶/›ís¶c⁄f.h
>

21 
	~<›ís¶/lhash.h
>

22 
	~<›ís¶/bio.h
>

23 
	~<›ís¶/¸y±o.h
>

24 
	~<›ís¶/symhacks.h
>

26 #ifde‡ 
__˝lu•lus


48 
X509_LU_NONE
 = 0,

49 
X509_LU_X509
, 
X509_LU_CRL


50 } 
	tX509_LOOKUP_TYPE
;

52 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

53 
	#X509_LU_RETRY
 -1

	)

54 
	#X509_LU_FAIL
 0

	)

57 
DEFINE_STACK_OF
(
X509_LOOKUP
)

58 
DEFINE_STACK_OF
(
X509_OBJECT
)

59 
DEFINE_STACK_OF
(
X509_VERIFY_PARAM
)

61 
X509_STORE_£t_dïth
(
X509_STORE
 *
°‹e
, 
dïth
);

63 (*
X509_STORE_CTX_vîify_cb
)(, 
	tX509_STORE_CTX
 *);

64 (*
X509_STORE_CTX_vîify_‚
)(
	tX509_STORE_CTX
 *);

65 (*
X509_STORE_CTX_gë_issuî_‚
)(
	tX509
 **
	tissuî
,

66 
	tX509_STORE_CTX
 *
	t˘x
, 
	tX509
 *
	tx
);

67 (*
X509_STORE_CTX_check_issued_‚
)(
	tX509_STORE_CTX
 *
	t˘x
,

68 
	tX509
 *
	tx
, X509 *
	tissuî
);

69 (*
X509_STORE_CTX_check_ªvoˇti⁄_‚
)(
	tX509_STORE_CTX
 *
	t˘x
);

70 (*
X509_STORE_CTX_gë_¸l_‚
)(
	tX509_STORE_CTX
 *
	t˘x
,

71 
	tX509_CRL
 **
	t¸l
, 
	tX509
 *
	tx
);

72 (*
X509_STORE_CTX_check_¸l_‚
)(
	tX509_STORE_CTX
 *
	t˘x
, 
	tX509_CRL
 *
	t¸l
);

73 (*
X509_STORE_CTX_˚π_¸l_‚
)(
	tX509_STORE_CTX
 *
	t˘x
,

74 
	tX509_CRL
 *
	t¸l
, 
	tX509
 *
	tx
);

75 (*
X509_STORE_CTX_check_pﬁicy_‚
)(
	tX509_STORE_CTX
 *
	t˘x
);

76 
STACK_OF
(
	tX509
Ë*(*
	tX509_STORE_CTX_lookup_˚πs_‚
)(
	tX509_STORE_CTX
 *
	t˘x
,

77 
	tX509_NAME
 *
	tnm
);

78 
STACK_OF
(
	tX509_CRL
Ë*(*
	tX509_STORE_CTX_lookup_¸ls_‚
)(
	tX509_STORE_CTX
 *
	t˘x
,

79 
	tX509_NAME
 *
	tnm
);

80 (*
X509_STORE_CTX_˛ónup_‚
)(
	tX509_STORE_CTX
 *
	t˘x
);

83 
X509_STORE_CTX_£t_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

85 
	#X509_STORE_CTX_£t_≠p_d©a
(
˘x
,
d©a
) \

86 
	`X509_STORE_CTX_£t_ex_d©a
(
˘x
,0,
d©a
)

	)

87 
	#X509_STORE_CTX_gë_≠p_d©a
(
˘x
) \

88 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,0)

	)

90 
	#X509_L_FILE_LOAD
 1

	)

91 
	#X509_L_ADD_DIR
 2

	)

93 
	#X509_LOOKUP_lﬂd_fûe
(
x
,
«me
,
ty≥
) \

94 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

96 
	#X509_LOOKUP_add_dú
(
x
,
«me
,
ty≥
) \

97 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

99 
	#X509_V_OK
 0

	)

100 
	#X509_V_ERR_UNSPECIFIED
 1

	)

101 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

102 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

103 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

104 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

105 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

106 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

107 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

108 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

109 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

110 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

111 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

112 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

113 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

114 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

115 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

116 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

117 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

118 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

119 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

120 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

121 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

122 
	#X509_V_ERR_CERT_REVOKED
 23

	)

123 
	#X509_V_ERR_INVALID_CA
 24

	)

124 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

125 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

126 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

127 
	#X509_V_ERR_CERT_REJECTED
 28

	)

129 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

130 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

131 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

132 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

133 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

134 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

135 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

136 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

137 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

138 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

139 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

140 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

141 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

142 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

143 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

144 
	#X509_V_ERR_DIFFERENT_CRL_SCOPE
 44

	)

145 
	#X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE
 45

	)

146 
	#X509_V_ERR_UNNESTED_RESOURCE
 46

	)

147 
	#X509_V_ERR_PERMITTED_VIOLATION
 47

	)

148 
	#X509_V_ERR_EXCLUDED_VIOLATION
 48

	)

149 
	#X509_V_ERR_SUBTREE_MINMAX
 49

	)

151 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

152 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE
 51

	)

153 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX
 52

	)

154 
	#X509_V_ERR_UNSUPPORTED_NAME_SYNTAX
 53

	)

155 
	#X509_V_ERR_CRL_PATH_VALIDATION_ERROR
 54

	)

157 
	#X509_V_ERR_PATH_LOOP
 55

	)

159 
	#X509_V_ERR_SUITE_B_INVALID_VERSION
 56

	)

160 
	#X509_V_ERR_SUITE_B_INVALID_ALGORITHM
 57

	)

161 
	#X509_V_ERR_SUITE_B_INVALID_CURVE
 58

	)

162 
	#X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM
 59

	)

163 
	#X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED
 60

	)

164 
	#X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256
 61

	)

166 
	#X509_V_ERR_HOSTNAME_MISMATCH
 62

	)

167 
	#X509_V_ERR_EMAIL_MISMATCH
 63

	)

168 
	#X509_V_ERR_IP_ADDRESS_MISMATCH
 64

	)

170 
	#X509_V_ERR_DANE_NO_MATCH
 65

	)

172 
	#X509_V_ERR_EE_KEY_TOO_SMALL
 66

	)

173 
	#X509_V_ERR_CA_KEY_TOO_SMALL
 67

	)

174 
	#X509_V_ERR_CA_MD_TOO_WEAK
 68

	)

176 
	#X509_V_ERR_INVALID_CALL
 69

	)

178 
	#X509_V_ERR_STORE_LOOKUP
 70

	)

180 
	#X509_V_ERR_NO_VALID_SCTS
 71

	)

182 
	#X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION
 72

	)

184 
	#X509_V_ERR_OCSP_VERIFY_NEEDED
 73

	)

185 
	#X509_V_ERR_OCSP_VERIFY_FAILED
 74

	)

186 
	#X509_V_ERR_OCSP_CERT_UNKNOWN
 75

	)

187 
	#X509_V_ERR_SIGNATURE_ALGORITHM_MISMATCH
 76

	)

188 
	#X509_V_ERR_NO_ISSUER_PUBLIC_KEY
 77

	)

189 
	#X509_V_ERR_UNSUPPORTED_SIGNATURE_ALGORITHM
 78

	)

190 
	#X509_V_ERR_EC_KEY_EXPLICIT_PARAMS
 79

	)

194 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

195 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x0

	)

198 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

200 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

202 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

204 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

206 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

208 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

210 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

212 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

214 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

216 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

218 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

220 
	#X509_V_FLAG_EXTENDED_CRL_SUPPORT
 0x1000

	)

222 
	#X509_V_FLAG_USE_DELTAS
 0x2000

	)

224 
	#X509_V_FLAG_CHECK_SS_SIGNATURE
 0x4000

	)

226 
	#X509_V_FLAG_TRUSTED_FIRST
 0x8000

	)

228 
	#X509_V_FLAG_SUITEB_128_LOS_ONLY
 0x10000

	)

230 
	#X509_V_FLAG_SUITEB_192_LOS
 0x20000

	)

232 
	#X509_V_FLAG_SUITEB_128_LOS
 0x30000

	)

234 
	#X509_V_FLAG_PARTIAL_CHAIN
 0x80000

	)

240 
	#X509_V_FLAG_NO_ALT_CHAINS
 0x100000

	)

242 
	#X509_V_FLAG_NO_CHECK_TIME
 0x200000

	)

244 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

245 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

246 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

247 
	#X509_VP_FLAG_LOCKED
 0x8

	)

248 
	#X509_VP_FLAG_ONCE
 0x10

	)

251 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

252 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

253 | 
X509_V_FLAG_INHIBIT_ANY
 \

254 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

256 
X509_OBJECT_idx_by_subje˘
(
STACK_OF
(
X509_OBJECT
Ë*
h
, 
X509_LOOKUP_TYPE
 
ty≥
,

257 
X509_NAME
 *
«me
);

258 
X509_OBJECT
 *
X509_OBJECT_ªåõve_by_subje˘
(
STACK_OF
(X509_OBJECTË*
h
,

259 
X509_LOOKUP_TYPE
 
ty≥
,

260 
X509_NAME
 *
«me
);

261 
X509_OBJECT
 *
X509_OBJECT_ªåõve_m©ch
(
STACK_OF
(X509_OBJECTË*
h
,

262 
X509_OBJECT
 *
x
);

263 
X509_OBJECT_up_ªf_cou¡
(
X509_OBJECT
 *
a
);

264 
X509_OBJECT
 *
X509_OBJECT_√w
();

265 
X509_OBJECT_‰ì
(
X509_OBJECT
 *
a
);

266 
X509_LOOKUP_TYPE
 
X509_OBJECT_gë_ty≥
(c⁄° 
X509_OBJECT
 *
a
);

267 
X509
 *
X509_OBJECT_gë0_X509
(c⁄° 
X509_OBJECT
 *
a
);

268 
X509_OBJECT_£t1_X509
(
X509_OBJECT
 *
a
, 
X509
 *
obj
);

269 
X509_CRL
 *
X509_OBJECT_gë0_X509_CRL
(
X509_OBJECT
 *
a
);

270 
X509_OBJECT_£t1_X509_CRL
(
X509_OBJECT
 *
a
, 
X509_CRL
 *
obj
);

271 
X509_STORE
 *
X509_STORE_√w
();

272 
X509_STORE_‰ì
(
X509_STORE
 *
v
);

273 
X509_STORE_lock
(
X509_STORE
 *
˘x
);

274 
X509_STORE_u∆ock
(
X509_STORE
 *
˘x
);

275 
X509_STORE_up_ªf
(
X509_STORE
 *
v
);

276 
STACK_OF
(
X509_OBJECT
Ë*
X509_STORE_gë0_obje˘s
(
X509_STORE
 *
v
);

278 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_˚πs
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

279 
STACK_OF
(
X509_CRL
Ë*
X509_STORE_CTX_gë1_¸ls
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

280 
X509_STORE_£t_Êags
(
X509_STORE
 *
˘x
, 
Êags
);

281 
X509_STORE_£t_puΩo£
(
X509_STORE
 *
˘x
, 
puΩo£
);

282 
X509_STORE_£t_åu°
(
X509_STORE
 *
˘x
, 
åu°
);

283 
X509_STORE_£t1_∑øm
(
X509_STORE
 *
˘x
, 
X509_VERIFY_PARAM
 *
pm
);

284 
X509_VERIFY_PARAM
 *
X509_STORE_gë0_∑øm
(
X509_STORE
 *
˘x
);

286 
X509_STORE_£t_vîify
(
X509_STORE
 *
˘x
, 
X509_STORE_CTX_vîify_‚
 
vîify
);

287 
	#X509_STORE_£t_vîify_func
(
˘x
, 
func
) \

288 
	`X509_STORE_£t_vîify
((
˘x
),(
func
))

	)

289 
X509_STORE_CTX_£t_vîify
(
X509_STORE_CTX
 *
˘x
,

290 
X509_STORE_CTX_vîify_‚
 
vîify
);

291 
X509_STORE_CTX_vîify_‚
 
X509_STORE_gë_vîify
(
X509_STORE
 *
˘x
);

292 
X509_STORE_£t_vîify_cb
(
X509_STORE
 *
˘x
,

293 
X509_STORE_CTX_vîify_cb
 
vîify_cb
);

294 
	#X509_STORE_£t_vîify_cb_func
(
˘x
,
func
) \

295 
	`X509_STORE_£t_vîify_cb
((
˘x
),(
func
))

	)

296 
X509_STORE_CTX_vîify_cb
 
X509_STORE_gë_vîify_cb
(
X509_STORE
 *
˘x
);

297 
X509_STORE_£t_gë_issuî
(
X509_STORE
 *
˘x
,

298 
X509_STORE_CTX_gë_issuî_‚
 
gë_issuî
);

299 
X509_STORE_CTX_gë_issuî_‚
 
X509_STORE_gë_gë_issuî
(
X509_STORE
 *
˘x
);

300 
X509_STORE_£t_check_issued
(
X509_STORE
 *
˘x
,

301 
X509_STORE_CTX_check_issued_‚
 
check_issued
);

302 
X509_STORE_CTX_check_issued_‚
 
X509_STORE_gë_check_issued
(
X509_STORE
 *
˘x
);

303 
X509_STORE_£t_check_ªvoˇti⁄
(
X509_STORE
 *
˘x
,

304 
X509_STORE_CTX_check_ªvoˇti⁄_‚
 
check_ªvoˇti⁄
);

305 
X509_STORE_CTX_check_ªvoˇti⁄_‚
 
X509_STORE_gë_check_ªvoˇti⁄
(
X509_STORE
 *
˘x
);

306 
X509_STORE_£t_gë_¸l
(
X509_STORE
 *
˘x
,

307 
X509_STORE_CTX_gë_¸l_‚
 
gë_¸l
);

308 
X509_STORE_CTX_gë_¸l_‚
 
X509_STORE_gë_gë_¸l
(
X509_STORE
 *
˘x
);

309 
X509_STORE_£t_check_¸l
(
X509_STORE
 *
˘x
,

310 
X509_STORE_CTX_check_¸l_‚
 
check_¸l
);

311 
X509_STORE_CTX_check_¸l_‚
 
X509_STORE_gë_check_¸l
(
X509_STORE
 *
˘x
);

312 
X509_STORE_£t_˚π_¸l
(
X509_STORE
 *
˘x
,

313 
X509_STORE_CTX_˚π_¸l_‚
 
˚π_¸l
);

314 
X509_STORE_CTX_˚π_¸l_‚
 
X509_STORE_gë_˚π_¸l
(
X509_STORE
 *
˘x
);

315 
X509_STORE_£t_check_pﬁicy
(
X509_STORE
 *
˘x
,

316 
X509_STORE_CTX_check_pﬁicy_‚
 
check_pﬁicy
);

317 
X509_STORE_CTX_check_pﬁicy_‚
 
X509_STORE_gë_check_pﬁicy
(
X509_STORE
 *
˘x
);

318 
X509_STORE_£t_lookup_˚πs
(
X509_STORE
 *
˘x
,

319 
X509_STORE_CTX_lookup_˚πs_‚
 
lookup_˚πs
);

320 
X509_STORE_CTX_lookup_˚πs_‚
 
X509_STORE_gë_lookup_˚πs
(
X509_STORE
 *
˘x
);

321 
X509_STORE_£t_lookup_¸ls
(
X509_STORE
 *
˘x
,

322 
X509_STORE_CTX_lookup_¸ls_‚
 
lookup_¸ls
);

323 
	#X509_STORE_£t_lookup_¸ls_cb
(
˘x
, 
func
) \

324 
	`X509_STORE_£t_lookup_¸ls
((
˘x
), (
func
))

	)

325 
X509_STORE_CTX_lookup_¸ls_‚
 
X509_STORE_gë_lookup_¸ls
(
X509_STORE
 *
˘x
);

326 
X509_STORE_£t_˛ónup
(
X509_STORE
 *
˘x
,

327 
X509_STORE_CTX_˛ónup_‚
 
˛ónup
);

328 
X509_STORE_CTX_˛ónup_‚
 
X509_STORE_gë_˛ónup
(
X509_STORE
 *
˘x
);

330 
	#X509_STORE_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

331 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_X509_STORE
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

332 
X509_STORE_£t_ex_d©a
(
X509_STORE
 *
˘x
, 
idx
, *
d©a
);

333 *
X509_STORE_gë_ex_d©a
(
X509_STORE
 *
˘x
, 
idx
);

335 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

337 
X509_STORE_CTX_gë1_issuî
(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

339 
X509_STORE_CTX_‰ì
(
X509_STORE_CTX
 *
˘x
);

340 
X509_STORE_CTX_öô
(
X509_STORE_CTX
 *
˘x
, 
X509_STORE
 *
°‹e
,

341 
X509
 *
x509
, 
STACK_OF
(X509Ë*
chaö
);

342 
X509_STORE_CTX_£t0_åu°ed_°ack
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

343 
X509_STORE_CTX_˛ónup
(
X509_STORE_CTX
 *
˘x
);

345 
X509_STORE
 *
X509_STORE_CTX_gë0_°‹e
(
X509_STORE_CTX
 *
˘x
);

346 
X509
 *
X509_STORE_CTX_gë0_˚π
(
X509_STORE_CTX
 *
˘x
);

347 
STACK_OF
(
X509
)* 
X509_STORE_CTX_gë0_u¡ru°ed
(
X509_STORE_CTX
 *
˘x
);

348 
X509_STORE_CTX_£t0_u¡ru°ed
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

349 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

350 
X509_STORE_CTX_vîify_cb
 
vîify
);

351 
X509_STORE_CTX_vîify_cb
 
X509_STORE_CTX_gë_vîify_cb
(
X509_STORE_CTX
 *
˘x
);

352 
X509_STORE_CTX_vîify_‚
 
X509_STORE_CTX_gë_vîify
(
X509_STORE_CTX
 *
˘x
);

353 
X509_STORE_CTX_gë_issuî_‚
 
X509_STORE_CTX_gë_gë_issuî
(
X509_STORE_CTX
 *
˘x
);

354 
X509_STORE_CTX_check_issued_‚
 
X509_STORE_CTX_gë_check_issued
(
X509_STORE_CTX
 *
˘x
);

355 
X509_STORE_CTX_check_ªvoˇti⁄_‚
 
X509_STORE_CTX_gë_check_ªvoˇti⁄
(
X509_STORE_CTX
 *
˘x
);

356 
X509_STORE_CTX_gë_¸l_‚
 
X509_STORE_CTX_gë_gë_¸l
(
X509_STORE_CTX
 *
˘x
);

357 
X509_STORE_CTX_check_¸l_‚
 
X509_STORE_CTX_gë_check_¸l
(
X509_STORE_CTX
 *
˘x
);

358 
X509_STORE_CTX_˚π_¸l_‚
 
X509_STORE_CTX_gë_˚π_¸l
(
X509_STORE_CTX
 *
˘x
);

359 
X509_STORE_CTX_check_pﬁicy_‚
 
X509_STORE_CTX_gë_check_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

360 
X509_STORE_CTX_lookup_˚πs_‚
 
X509_STORE_CTX_gë_lookup_˚πs
(
X509_STORE_CTX
 *
˘x
);

361 
X509_STORE_CTX_lookup_¸ls_‚
 
X509_STORE_CTX_gë_lookup_¸ls
(
X509_STORE_CTX
 *
˘x
);

362 
X509_STORE_CTX_˛ónup_‚
 
X509_STORE_CTX_gë_˛ónup
(
X509_STORE_CTX
 *
˘x
);

364 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

365 
	#X509_STORE_CTX_gë_chaö
 
X509_STORE_CTX_gë0_chaö


	)

366 
	#X509_STORE_CTX_£t_chaö
 
X509_STORE_CTX_£t0_u¡ru°ed


	)

367 
	#X509_STORE_CTX_åu°ed_°ack
 
X509_STORE_CTX_£t0_åu°ed_°ack


	)

368 
	#X509_STORE_gë_by_subje˘
 
X509_STORE_CTX_gë_by_subje˘


	)

369 
	#X509_STORE_gë1_˚πs
 
X509_STORE_CTX_gë1_˚πs


	)

370 
	#X509_STORE_gë1_¸ls
 
X509_STORE_CTX_gë1_¸ls


	)

372 
	#X509_STORE_gë1_˚π
 
X509_STORE_CTX_gë1_˚πs


	)

374 
	#X509_STORE_gë1_¸l
 
X509_STORE_CTX_gë1_¸ls


	)

377 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

378 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dú
();

379 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fûe
();

381 (*
X509_LOOKUP_˘æ_‚
)(
	tX509_LOOKUP
 *
	t˘x
, 
	tcmd
, c⁄° *
	t¨gc
,

382 
	t¨gl
, **
	tªt
);

383 (*
X509_LOOKUP_gë_by_subje˘_‚
)(
	tX509_LOOKUP
 *
	t˘x
,

384 
	tX509_LOOKUP_TYPE
 
	tty≥
,

385 
	tX509_NAME
 *
	t«me
,

386 
	tX509_OBJECT
 *
	tªt
);

387 (*
X509_LOOKUP_gë_by_issuî_£rül_‚
)(
	tX509_LOOKUP
 *
	t˘x
,

388 
	tX509_LOOKUP_TYPE
 
	tty≥
,

389 
	tX509_NAME
 *
	t«me
,

390 
	tASN1_INTEGER
 *
	t£rül
,

391 
	tX509_OBJECT
 *
	tªt
);

392 (*
X509_LOOKUP_gë_by_fögî¥öt_‚
)(
	tX509_LOOKUP
 *
	t˘x
,

393 
	tX509_LOOKUP_TYPE
 
	tty≥
,

394 c⁄° * 
	tbyãs
,

395 
	tÀn
,

396 
	tX509_OBJECT
 *
	tªt
);

397 (*
X509_LOOKUP_gë_by_Æüs_‚
)(
	tX509_LOOKUP
 *
	t˘x
,

398 
	tX509_LOOKUP_TYPE
 
	tty≥
,

399 c⁄° *
	t°r
,

400 
	tÀn
,

401 
	tX509_OBJECT
 *
	tªt
);

403 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_mëh_√w
(c⁄° *
«me
);

404 
X509_LOOKUP_mëh_‰ì
(
X509_LOOKUP_METHOD
 *
mëhod
);

406 
X509_LOOKUP_mëh_£t_√w_ôem
(
X509_LOOKUP_METHOD
 *
mëhod
,

407 (*
√w_ôem
Ë(
X509_LOOKUP
 *
˘x
));

408 (*
X509_LOOKUP_mëh_gë_√w_ôem
(c⁄° 
X509_LOOKUP_METHOD
* 
mëhod
))

409 (
X509_LOOKUP
 *
˘x
);

411 
X509_LOOKUP_mëh_£t_‰ì
(
X509_LOOKUP_METHOD
 *
mëhod
,

412 (*
‰ì_‚
Ë(
X509_LOOKUP
 *
˘x
));

413 (*
X509_LOOKUP_mëh_gë_‰ì
(c⁄° 
X509_LOOKUP_METHOD
* 
mëhod
))

414 (
X509_LOOKUP
 *
˘x
);

416 
X509_LOOKUP_mëh_£t_öô
(
X509_LOOKUP_METHOD
 *
mëhod
,

417 (*
öô
Ë(
X509_LOOKUP
 *
˘x
));

418 (*
X509_LOOKUP_mëh_gë_öô
(c⁄° 
X509_LOOKUP_METHOD
* 
mëhod
))

419 (
X509_LOOKUP
 *
˘x
);

421 
X509_LOOKUP_mëh_£t_shutdown
(
X509_LOOKUP_METHOD
 *
mëhod
,

422 (*
shutdown
Ë(
X509_LOOKUP
 *
˘x
));

423 (*
X509_LOOKUP_mëh_gë_shutdown
(c⁄° 
X509_LOOKUP_METHOD
* 
mëhod
))

424 (
X509_LOOKUP
 *
˘x
);

426 
X509_LOOKUP_mëh_£t_˘æ
(
X509_LOOKUP_METHOD
 *
mëhod
,

427 
X509_LOOKUP_˘æ_‚
 
˘æ_‚
);

428 
X509_LOOKUP_˘æ_‚
 
X509_LOOKUP_mëh_gë_˘æ
(c⁄° 
X509_LOOKUP_METHOD
 *
mëhod
);

430 
X509_LOOKUP_mëh_£t_gë_by_subje˘
(
X509_LOOKUP_METHOD
 *
mëhod
,

431 
X509_LOOKUP_gë_by_subje˘_‚
 
‚
);

432 
X509_LOOKUP_gë_by_subje˘_‚
 
X509_LOOKUP_mëh_gë_gë_by_subje˘
(

433 c⁄° 
X509_LOOKUP_METHOD
 *
mëhod
);

435 
X509_LOOKUP_mëh_£t_gë_by_issuî_£rül
(
X509_LOOKUP_METHOD
 *
mëhod
,

436 
X509_LOOKUP_gë_by_issuî_£rül_‚
 
‚
);

437 
X509_LOOKUP_gë_by_issuî_£rül_‚
 
X509_LOOKUP_mëh_gë_gë_by_issuî_£rül
(

438 c⁄° 
X509_LOOKUP_METHOD
 *
mëhod
);

440 
X509_LOOKUP_mëh_£t_gë_by_fögî¥öt
(
X509_LOOKUP_METHOD
 *
mëhod
,

441 
X509_LOOKUP_gë_by_fögî¥öt_‚
 
‚
);

442 
X509_LOOKUP_gë_by_fögî¥öt_‚
 
X509_LOOKUP_mëh_gë_gë_by_fögî¥öt
(

443 c⁄° 
X509_LOOKUP_METHOD
 *
mëhod
);

445 
X509_LOOKUP_mëh_£t_gë_by_Æüs
(
X509_LOOKUP_METHOD
 *
mëhod
,

446 
X509_LOOKUP_gë_by_Æüs_‚
 
‚
);

447 
X509_LOOKUP_gë_by_Æüs_‚
 
X509_LOOKUP_mëh_gë_gë_by_Æüs
(

448 c⁄° 
X509_LOOKUP_METHOD
 *
mëhod
);

451 
X509_STORE_add_˚π
(
X509_STORE
 *
˘x
, 
X509
 *
x
);

452 
X509_STORE_add_¸l
(
X509_STORE
 *
˘x
, 
X509_CRL
 *
x
);

454 
X509_STORE_CTX_gë_by_subje˘
(
X509_STORE_CTX
 *
vs
, 
X509_LOOKUP_TYPE
 
ty≥
,

455 
X509_NAME
 *
«me
, 
X509_OBJECT
 *
ªt
);

456 
X509_OBJECT
 *
X509_STORE_CTX_gë_obj_by_subje˘
(
X509_STORE_CTX
 *
vs
,

457 
X509_LOOKUP_TYPE
 
ty≥
,

458 
X509_NAME
 *
«me
);

460 
X509_LOOKUP_˘æ
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
,

461 
¨gl
, **
ªt
);

463 
X509_lﬂd_˚π_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

464 
X509_lﬂd_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

465 
X509_lﬂd_˚π_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

467 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mëhod
);

468 
X509_LOOKUP_‰ì
(
X509_LOOKUP
 *
˘x
);

469 
X509_LOOKUP_öô
(
X509_LOOKUP
 *
˘x
);

470 
X509_LOOKUP_by_subje˘
(
X509_LOOKUP
 *
˘x
, 
X509_LOOKUP_TYPE
 
ty≥
,

471 
X509_NAME
 *
«me
, 
X509_OBJECT
 *
ªt
);

472 
X509_LOOKUP_by_issuî_£rül
(
X509_LOOKUP
 *
˘x
, 
X509_LOOKUP_TYPE
 
ty≥
,

473 
X509_NAME
 *
«me
, 
ASN1_INTEGER
 *
£rül
,

474 
X509_OBJECT
 *
ªt
);

475 
X509_LOOKUP_by_fögî¥öt
(
X509_LOOKUP
 *
˘x
, 
X509_LOOKUP_TYPE
 
ty≥
,

476 c⁄° *
byãs
, 
Àn
,

477 
X509_OBJECT
 *
ªt
);

478 
X509_LOOKUP_by_Æüs
(
X509_LOOKUP
 *
˘x
, 
X509_LOOKUP_TYPE
 
ty≥
,

479 c⁄° *
°r
, 
Àn
, 
X509_OBJECT
 *
ªt
);

480 
X509_LOOKUP_£t_mëhod_d©a
(
X509_LOOKUP
 *
˘x
, *
d©a
);

481 *
X509_LOOKUP_gë_mëhod_d©a
(c⁄° 
X509_LOOKUP
 *
˘x
);

482 
X509_STORE
 *
X509_LOOKUP_gë_°‹e
(c⁄° 
X509_LOOKUP
 *
˘x
);

483 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
˘x
);

485 
X509_STORE_lﬂd_loˇti⁄s
(
X509_STORE
 *
˘x
,

486 c⁄° *
fûe
, c⁄° *
dú
);

487 
X509_STORE_£t_deÁu…_∑ths
(
X509_STORE
 *
˘x
);

489 
	#X509_STORE_CTX_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

490 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_X509_STORE_CTX
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

491 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
˘x
, 
idx
, *
d©a
);

492 *
X509_STORE_CTX_gë_ex_d©a
(
X509_STORE_CTX
 *
˘x
, 
idx
);

493 
X509_STORE_CTX_gë_îr‹
(
X509_STORE_CTX
 *
˘x
);

494 
X509_STORE_CTX_£t_îr‹
(
X509_STORE_CTX
 *
˘x
, 
s
);

495 
X509_STORE_CTX_gë_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
);

496 
X509_STORE_CTX_£t_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

497 
X509
 *
X509_STORE_CTX_gë_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
);

498 
X509_STORE_CTX_£t_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
, 
X509
 *
x
);

499 
X509
 *
X509_STORE_CTX_gë0_cuºít_issuî
(
X509_STORE_CTX
 *
˘x
);

500 
X509_CRL
 *
X509_STORE_CTX_gë0_cuºít_¸l
(
X509_STORE_CTX
 *
˘x
);

501 
X509_STORE_CTX
 *
X509_STORE_CTX_gë0_∑ª¡_˘x
(X509_STORE_CTX *
˘x
);

502 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë0_chaö
(
X509_STORE_CTX
 *
˘x
);

503 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_chaö
(
X509_STORE_CTX
 *
˘x
);

504 
X509_STORE_CTX_£t_˚π
(
X509_STORE_CTX
 *
c
, 
X509
 *
x
);

505 
X509_STORE_CTX_£t0_vîifõd_chaö
(
X509_STORE_CTX
 *
c
, 
STACK_OF
(
X509
Ë*
sk
);

506 
X509_STORE_CTX_£t0_¸ls
(
X509_STORE_CTX
 *
c
, 
STACK_OF
(
X509_CRL
Ë*
sk
);

507 
X509_STORE_CTX_£t_puΩo£
(
X509_STORE_CTX
 *
˘x
, 
puΩo£
);

508 
X509_STORE_CTX_£t_åu°
(
X509_STORE_CTX
 *
˘x
, 
åu°
);

509 
X509_STORE_CTX_puΩo£_öhîô
(
X509_STORE_CTX
 *
˘x
, 
def_puΩo£
,

510 
puΩo£
, 
åu°
);

511 
X509_STORE_CTX_£t_Êags
(
X509_STORE_CTX
 *
˘x
, 
Êags
);

512 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
˘x
, 
Êags
,

513 
time_t
 
t
);

515 
X509_POLICY_TREE
 *
X509_STORE_CTX_gë0_pﬁicy_åì
(
X509_STORE_CTX
 *
˘x
);

516 
X509_STORE_CTX_gë_ex∂icô_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

517 
X509_STORE_CTX_gë_num_u¡ru°ed
(
X509_STORE_CTX
 *
˘x
);

519 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gë0_∑øm
(
X509_STORE_CTX
 *
˘x
);

520 
X509_STORE_CTX_£t0_∑øm
(
X509_STORE_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
∑øm
);

521 
X509_STORE_CTX_£t_deÁu…
(
X509_STORE_CTX
 *
˘x
, c⁄° *
«me
);

527 
X509_STORE_CTX_£t0_d™e
(
X509_STORE_CTX
 *
˘x
, 
SSL_DANE
 *
d™e
);

528 
	#DANE_FLAG_NO_DANE_EE_NAMECHECKS
 (1L << 0)

	)

532 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

533 
X509_VERIFY_PARAM_‰ì
(
X509_VERIFY_PARAM
 *
∑øm
);

534 
X509_VERIFY_PARAM_öhîô
(
X509_VERIFY_PARAM
 *
to
,

535 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

536 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

537 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

538 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
∑øm
, c⁄° *
«me
);

539 
X509_VERIFY_PARAM_£t_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

540 
Êags
);

541 
X509_VERIFY_PARAM_˛ór_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

542 
Êags
);

543 
X509_VERIFY_PARAM_gë_Êags
(
X509_VERIFY_PARAM
 *
∑øm
);

544 
X509_VERIFY_PARAM_£t_puΩo£
(
X509_VERIFY_PARAM
 *
∑øm
, 
puΩo£
);

545 
X509_VERIFY_PARAM_£t_åu°
(
X509_VERIFY_PARAM
 *
∑øm
, 
åu°
);

546 
X509_VERIFY_PARAM_£t_dïth
(
X509_VERIFY_PARAM
 *
∑øm
, 
dïth
);

547 
X509_VERIFY_PARAM_£t_auth_Àvñ
(
X509_VERIFY_PARAM
 *
∑øm
, 
auth_Àvñ
);

548 
time_t
 
X509_VERIFY_PARAM_gë_time
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

549 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
∑øm
, 
time_t
 
t
);

550 
X509_VERIFY_PARAM_add0_pﬁicy
(
X509_VERIFY_PARAM
 *
∑øm
,

551 
ASN1_OBJECT
 *
pﬁicy
);

552 
X509_VERIFY_PARAM_£t1_pﬁicõs
(
X509_VERIFY_PARAM
 *
∑øm
,

553 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
);

555 
X509_VERIFY_PARAM_£t_öh_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

556 
uöt32_t
 
Êags
);

557 
uöt32_t
 
X509_VERIFY_PARAM_gë_öh_Êags
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

559 
X509_VERIFY_PARAM_£t1_ho°
(
X509_VERIFY_PARAM
 *
∑øm
,

560 c⁄° *
«me
, 
size_t
 
«mñí
);

561 
X509_VERIFY_PARAM_add1_ho°
(
X509_VERIFY_PARAM
 *
∑øm
,

562 c⁄° *
«me
, 
size_t
 
«mñí
);

563 
X509_VERIFY_PARAM_£t_ho°Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

564 
Êags
);

565 
X509_VERIFY_PARAM_gë_ho°Êags
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

566 *
X509_VERIFY_PARAM_gë0_≥î«me
(
X509_VERIFY_PARAM
 *);

567 
X509_VERIFY_PARAM_move_≥î«me
(
X509_VERIFY_PARAM
 *, X509_VERIFY_PARAM *);

568 
X509_VERIFY_PARAM_£t1_emaû
(
X509_VERIFY_PARAM
 *
∑øm
,

569 c⁄° *
emaû
, 
size_t
 
emaûÀn
);

570 
X509_VERIFY_PARAM_£t1_ù
(
X509_VERIFY_PARAM
 *
∑øm
,

571 c⁄° *
ù
, 
size_t
 
ùÀn
);

572 
X509_VERIFY_PARAM_£t1_ù_asc
(
X509_VERIFY_PARAM
 *
∑øm
,

573 c⁄° *
ùasc
);

575 
X509_VERIFY_PARAM_gë_dïth
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

576 
X509_VERIFY_PARAM_gë_auth_Àvñ
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

577 c⁄° *
X509_VERIFY_PARAM_gë0_«me
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

579 
X509_VERIFY_PARAM_add0_èbÀ
(
X509_VERIFY_PARAM
 *
∑øm
);

580 
X509_VERIFY_PARAM_gë_cou¡
();

581 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_gë0
(
id
);

582 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(c⁄° *
«me
);

583 
X509_VERIFY_PARAM_èbÀ_˛ónup
();

586 
	#X509_PCY_TREE_FAILURE
 -2

	)

587 
	#X509_PCY_TREE_INVALID
 -1

	)

588 
	#X509_PCY_TREE_INTERNAL
 0

	)

594 
	#X509_PCY_TREE_VALID
 1

	)

595 
	#X509_PCY_TREE_EMPTY
 2

	)

596 
	#X509_PCY_TREE_EXPLICIT
 4

	)

598 
X509_pﬁicy_check
(
X509_POLICY_TREE
 **
±ªe
, *
≥x∂icô_pﬁicy
,

599 
STACK_OF
(
X509
Ë*
˚πs
,

600 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicy_oids
, 
Êags
);

602 
X509_pﬁicy_åì_‰ì
(
X509_POLICY_TREE
 *
åì
);

604 
X509_pﬁicy_åì_Àvñ_cou¡
(c⁄° 
X509_POLICY_TREE
 *
åì
);

605 
X509_POLICY_LEVEL
 *
X509_pﬁicy_åì_gë0_Àvñ
(c⁄° 
X509_POLICY_TREE
 *
åì
,

606 
i
);

608 
STACK_OF
(
X509_POLICY_NODE
Ë*
X509_pﬁicy_åì_gë0_pﬁicõs
(const

609 
X509_POLICY_TREE


610 *
åì
);

612 
STACK_OF
(
X509_POLICY_NODE
Ë*
X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(const

613 
X509_POLICY_TREE


614 *
åì
);

616 
X509_pﬁicy_Àvñ_node_cou¡
(
X509_POLICY_LEVEL
 *
Àvñ
);

618 
X509_POLICY_NODE
 *
X509_pﬁicy_Àvñ_gë0_node
(
X509_POLICY_LEVEL
 *
Àvñ
,

619 
i
);

621 c⁄° 
ASN1_OBJECT
 *
X509_pﬁicy_node_gë0_pﬁicy
(c⁄° 
X509_POLICY_NODE
 *
node
);

623 
STACK_OF
(
POLICYQUALINFO
Ë*
X509_pﬁicy_node_gë0_quÆifõrs
(const

624 
X509_POLICY_NODE


625 *
node
);

626 c⁄° 
X509_POLICY_NODE
 *
X509_pﬁicy_node_gë0_∑ª¡
(const X509_POLICY_NODE

627 *
node
);

629 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509err.h

11 #i‚de‡
HEADER_X509ERR_H


12 
	#HEADER_X509ERR_H


	)

14 
	~<›ís¶/symhacks.h
>

16 #ifde‡ 
__˝lu•lus


19 
ERR_lﬂd_X509_°rögs
();

24 
	#X509_F_ADD_CERT_DIR
 100

	)

25 
	#X509_F_BUILD_CHAIN
 106

	)

26 
	#X509_F_BY_FILE_CTRL
 101

	)

27 
	#X509_F_CHECK_NAME_CONSTRAINTS
 149

	)

28 
	#X509_F_CHECK_POLICY
 145

	)

29 
	#X509_F_DANE_I2D
 107

	)

30 
	#X509_F_DIR_CTRL
 102

	)

31 
	#X509_F_GET_CERT_BY_SUBJECT
 103

	)

32 
	#X509_F_I2D_X509_AUX
 151

	)

33 
	#X509_F_LOOKUP_CERTS_SK
 152

	)

34 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 129

	)

35 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 130

	)

36 
	#X509_F_NEW_DIR
 153

	)

37 
	#X509_F_X509AT_ADD1_ATTR
 135

	)

38 
	#X509_F_X509V3_ADD_EXT
 104

	)

39 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 136

	)

40 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 137

	)

41 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 140

	)

42 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 139

	)

43 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 138

	)

44 
	#X509_F_X509_CHECK_PRIVATE_KEY
 128

	)

45 
	#X509_F_X509_CRL_DIFF
 105

	)

46 
	#X509_F_X509_CRL_METHOD_NEW
 154

	)

47 
	#X509_F_X509_CRL_PRINT_FP
 147

	)

48 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 108

	)

49 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 109

	)

50 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 110

	)

51 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 132

	)

52 
	#X509_F_X509_LOAD_CERT_FILE
 111

	)

53 
	#X509_F_X509_LOAD_CRL_FILE
 112

	)

54 
	#X509_F_X509_LOOKUP_METH_NEW
 160

	)

55 
	#X509_F_X509_LOOKUP_NEW
 155

	)

56 
	#X509_F_X509_NAME_ADD_ENTRY
 113

	)

57 
	#X509_F_X509_NAME_CANON
 156

	)

58 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 114

	)

59 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 131

	)

60 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 115

	)

61 
	#X509_F_X509_NAME_ONELINE
 116

	)

62 
	#X509_F_X509_NAME_PRINT
 117

	)

63 
	#X509_F_X509_OBJECT_NEW
 150

	)

64 
	#X509_F_X509_PRINT_EX_FP
 118

	)

65 
	#X509_F_X509_PUBKEY_DECODE
 148

	)

66 
	#X509_F_X509_PUBKEY_GET
 161

	)

67 
	#X509_F_X509_PUBKEY_GET0
 119

	)

68 
	#X509_F_X509_PUBKEY_SET
 120

	)

69 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 144

	)

70 
	#X509_F_X509_REQ_PRINT_EX
 121

	)

71 
	#X509_F_X509_REQ_PRINT_FP
 122

	)

72 
	#X509_F_X509_REQ_TO_X509
 123

	)

73 
	#X509_F_X509_STORE_ADD_CERT
 124

	)

74 
	#X509_F_X509_STORE_ADD_CRL
 125

	)

75 
	#X509_F_X509_STORE_ADD_LOOKUP
 157

	)

76 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 146

	)

77 
	#X509_F_X509_STORE_CTX_INIT
 143

	)

78 
	#X509_F_X509_STORE_CTX_NEW
 142

	)

79 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 134

	)

80 
	#X509_F_X509_STORE_NEW
 158

	)

81 
	#X509_F_X509_TO_X509_REQ
 126

	)

82 
	#X509_F_X509_TRUST_ADD
 133

	)

83 
	#X509_F_X509_TRUST_SET
 141

	)

84 
	#X509_F_X509_VERIFY_CERT
 127

	)

85 
	#X509_F_X509_VERIFY_PARAM_NEW
 159

	)

90 
	#X509_R_AKID_MISMATCH
 110

	)

91 
	#X509_R_BAD_SELECTOR
 133

	)

92 
	#X509_R_BAD_X509_FILETYPE
 100

	)

93 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

94 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

95 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

96 
	#X509_R_CRL_ALREADY_DELTA
 127

	)

97 
	#X509_R_CRL_VERIFY_FAILURE
 131

	)

98 
	#X509_R_IDP_MISMATCH
 128

	)

99 
	#X509_R_INVALID_ATTRIBUTES
 138

	)

100 
	#X509_R_INVALID_DIRECTORY
 113

	)

101 
	#X509_R_INVALID_FIELD_NAME
 119

	)

102 
	#X509_R_INVALID_TRUST
 123

	)

103 
	#X509_R_ISSUER_MISMATCH
 129

	)

104 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

105 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

106 
	#X509_R_LOADING_CERT_DIR
 103

	)

107 
	#X509_R_LOADING_DEFAULTS
 104

	)

108 
	#X509_R_METHOD_NOT_SUPPORTED
 124

	)

109 
	#X509_R_NAME_TOO_LONG
 134

	)

110 
	#X509_R_NEWER_CRL_NOT_NEWER
 132

	)

111 
	#X509_R_NO_CERTIFICATE_FOUND
 135

	)

112 
	#X509_R_NO_CERTIFICATE_OR_CRL_FOUND
 136

	)

113 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

114 
	#X509_R_NO_CRL_FOUND
 137

	)

115 
	#X509_R_NO_CRL_NUMBER
 130

	)

116 
	#X509_R_PUBLIC_KEY_DECODE_ERROR
 125

	)

117 
	#X509_R_PUBLIC_KEY_ENCODE_ERROR
 126

	)

118 
	#X509_R_SHOULD_RETRY
 106

	)

119 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

120 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

121 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

122 
	#X509_R_UNKNOWN_NID
 109

	)

123 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

124 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

125 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

126 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

127 
	#X509_R_WRONG_TYPE
 122

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

	@/usr/include/linux/stddef.h

4 #i‚de‡
__Æways_ölöe


5 
	#__Æways_ölöe
 
__ölöe__


	)

	@/usr/include/openssl/asn1err.h

11 #i‚de‡
HEADER_ASN1ERR_H


12 
	#HEADER_ASN1ERR_H


	)

14 
	~<›ís¶/symhacks.h
>

16 #ifde‡ 
__˝lu•lus


19 
ERR_lﬂd_ASN1_°rögs
();

24 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

25 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

26 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

27 
	#ASN1_F_APPEND_EXP
 176

	)

28 
	#ASN1_F_ASN1_BIO_INIT
 113

	)

29 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

30 
	#ASN1_F_ASN1_CB
 177

	)

31 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

32 
	#ASN1_F_ASN1_COLLECT
 106

	)

33 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

34 
	#ASN1_F_ASN1_D2I_FP
 109

	)

35 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

36 
	#ASN1_F_ASN1_DIGEST
 184

	)

37 
	#ASN1_F_ASN1_DO_ADB
 110

	)

38 
	#ASN1_F_ASN1_DO_LOCK
 233

	)

39 
	#ASN1_F_ASN1_DUP
 111

	)

40 
	#ASN1_F_ASN1_ENC_SAVE
 115

	)

41 
	#ASN1_F_ASN1_EX_C2I
 204

	)

42 
	#ASN1_F_ASN1_FIND_END
 190

	)

43 
	#ASN1_F_ASN1_GENERALIZEDTIME_ADJ
 216

	)

44 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

45 
	#ASN1_F_ASN1_GET_INT64
 224

	)

46 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

47 
	#ASN1_F_ASN1_GET_UINT64
 225

	)

48 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

49 
	#ASN1_F_ASN1_I2D_FP
 117

	)

50 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

51 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

52 
	#ASN1_F_ASN1_ITEM_EMBED_D2I
 120

	)

53 
	#ASN1_F_ASN1_ITEM_EMBED_NEW
 121

	)

54 
	#ASN1_F_ASN1_ITEM_EX_I2D
 144

	)

55 
	#ASN1_F_ASN1_ITEM_FLAGS_I2D
 118

	)

56 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

57 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

58 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

59 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

60 
	#ASN1_F_ASN1_ITEM_SIGN_CTX
 220

	)

61 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

62 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

63 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

64 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

65 
	#ASN1_F_ASN1_OUTPUT_DATA
 214

	)

66 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

67 
	#ASN1_F_ASN1_PRIMITIVE_NEW
 119

	)

68 
	#ASN1_F_ASN1_SCTX_NEW
 221

	)

69 
	#ASN1_F_ASN1_SIGN
 128

	)

70 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

71 
	#ASN1_F_ASN1_STRING_GET_INT64
 227

	)

72 
	#ASN1_F_ASN1_STRING_GET_UINT64
 230

	)

73 
	#ASN1_F_ASN1_STRING_SET
 186

	)

74 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

75 
	#ASN1_F_ASN1_STRING_TO_BN
 228

	)

76 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

77 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

78 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

79 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

80 
	#ASN1_F_ASN1_TIME_ADJ
 217

	)

81 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

82 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

83 
	#ASN1_F_ASN1_UTCTIME_ADJ
 218

	)

84 
	#ASN1_F_ASN1_VERIFY
 137

	)

85 
	#ASN1_F_B64_READ_ASN1
 209

	)

86 
	#ASN1_F_B64_WRITE_ASN1
 210

	)

87 
	#ASN1_F_BIO_NEW_NDEF
 208

	)

88 
	#ASN1_F_BITSTR_CB
 180

	)

89 
	#ASN1_F_BN_TO_ASN1_STRING
 229

	)

90 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

91 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

92 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

93 
	#ASN1_F_C2I_IBUF
 226

	)

94 
	#ASN1_F_C2I_UINT64_INT
 101

	)

95 
	#ASN1_F_COLLECT_DATA
 140

	)

96 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

97 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

98 
	#ASN1_F_D2I_AUTOPRIVATEKEY
 207

	)

99 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

100 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

101 
	#ASN1_F_DO_BUF
 142

	)

102 
	#ASN1_F_DO_CREATE
 124

	)

103 
	#ASN1_F_DO_DUMP
 125

	)

104 
	#ASN1_F_DO_TCREATE
 222

	)

105 
	#ASN1_F_I2A_ASN1_OBJECT
 126

	)

106 
	#ASN1_F_I2D_ASN1_BIO_STREAM
 211

	)

107 
	#ASN1_F_I2D_ASN1_OBJECT
 143

	)

108 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

109 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

110 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

111 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

112 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

113 
	#ASN1_F_LONG_C2I
 166

	)

114 
	#ASN1_F_NDEF_PREFIX
 127

	)

115 
	#ASN1_F_NDEF_SUFFIX
 136

	)

116 
	#ASN1_F_OID_MODULE_INIT
 174

	)

117 
	#ASN1_F_PARSE_TAGGING
 182

	)

118 
	#ASN1_F_PKCS5_PBE2_SET_IV
 167

	)

119 
	#ASN1_F_PKCS5_PBE2_SET_SCRYPT
 231

	)

120 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

121 
	#ASN1_F_PKCS5_PBE_SET0_ALGOR
 215

	)

122 
	#ASN1_F_PKCS5_PBKDF2_SET
 219

	)

123 
	#ASN1_F_PKCS5_SCRYPT_SET
 232

	)

124 
	#ASN1_F_SMIME_READ_ASN1
 212

	)

125 
	#ASN1_F_SMIME_TEXT
 213

	)

126 
	#ASN1_F_STABLE_GET
 138

	)

127 
	#ASN1_F_STBL_MODULE_INIT
 223

	)

128 
	#ASN1_F_UINT32_C2I
 105

	)

129 
	#ASN1_F_UINT32_NEW
 139

	)

130 
	#ASN1_F_UINT64_C2I
 112

	)

131 
	#ASN1_F_UINT64_NEW
 141

	)

132 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

133 
	#ASN1_F_X509_INFO_NEW
 170

	)

134 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

135 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

136 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

137 
	#ASN1_F_X509_PKEY_NEW
 173

	)

142 
	#ASN1_R_ADDING_OBJECT
 171

	)

143 
	#ASN1_R_ASN1_PARSE_ERROR
 203

	)

144 
	#ASN1_R_ASN1_SIG_PARSE_ERROR
 204

	)

145 
	#ASN1_R_AUX_ERROR
 100

	)

146 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

147 
	#ASN1_R_BAD_TEMPLATE
 230

	)

148 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 214

	)

149 
	#ASN1_R_BN_LIB
 105

	)

150 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

151 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

152 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

153 
	#ASN1_R_CONTEXT_NOT_INITIALISED
 217

	)

154 
	#ASN1_R_DATA_IS_WRONG
 109

	)

155 
	#ASN1_R_DECODE_ERROR
 110

	)

156 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

157 
	#ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED
 198

	)

158 
	#ASN1_R_ENCODE_ERROR
 112

	)

159 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

160 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

161 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

162 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

163 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

164 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

165 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

166 
	#ASN1_R_FIELD_MISSING
 121

	)

167 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

168 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

169 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

170 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

171 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

172 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

173 
	#ASN1_R_ILLEGAL_HEX
 178

	)

174 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

175 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

176 
	#ASN1_R_ILLEGAL_NEGATIVE_VALUE
 226

	)

177 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

178 
	#ASN1_R_ILLEGAL_NULL
 125

	)

179 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

180 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

181 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

182 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

183 
	#ASN1_R_ILLEGAL_PADDING
 221

	)

184 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

185 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

186 
	#ASN1_R_ILLEGAL_ZERO_CONTENT
 222

	)

187 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

188 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

189 
	#ASN1_R_INVALID_BIT_STRING_BITS_LEFT
 220

	)

190 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

191 
	#ASN1_R_INVALID_DIGIT
 130

	)

192 
	#ASN1_R_INVALID_MIME_TYPE
 205

	)

193 
	#ASN1_R_INVALID_MODIFIER
 186

	)

194 
	#ASN1_R_INVALID_NUMBER
 187

	)

195 
	#ASN1_R_INVALID_OBJECT_ENCODING
 216

	)

196 
	#ASN1_R_INVALID_SCRYPT_PARAMETERS
 227

	)

197 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

198 
	#ASN1_R_INVALID_STRING_TABLE_VALUE
 218

	)

199 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

200 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

201 
	#ASN1_R_INVALID_VALUE
 219

	)

202 
	#ASN1_R_LIST_ERROR
 188

	)

203 
	#ASN1_R_MIME_NO_CONTENT_TYPE
 206

	)

204 
	#ASN1_R_MIME_PARSE_ERROR
 207

	)

205 
	#ASN1_R_MIME_SIG_PARSE_ERROR
 208

	)

206 
	#ASN1_R_MISSING_EOC
 137

	)

207 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

208 
	#ASN1_R_MISSING_VALUE
 189

	)

209 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

210 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

211 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

212 
	#ASN1_R_NESTED_TOO_DEEP
 201

	)

213 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

214 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

215 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

216 
	#ASN1_R_NO_CONTENT_TYPE
 209

	)

217 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

218 
	#ASN1_R_NO_MULTIPART_BODY_FAILURE
 210

	)

219 
	#ASN1_R_NO_MULTIPART_BOUNDARY
 211

	)

220 
	#ASN1_R_NO_SIG_CONTENT_TYPE
 212

	)

221 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

222 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

223 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

224 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

225 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

226 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

227 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

228 
	#ASN1_R_SHORT_LINE
 150

	)

229 
	#ASN1_R_SIG_INVALID_MIME_TYPE
 213

	)

230 
	#ASN1_R_STREAMING_NOT_SUPPORTED
 202

	)

231 
	#ASN1_R_STRING_TOO_LONG
 151

	)

232 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

233 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

234 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

235 
	#ASN1_R_TOO_LARGE
 223

	)

236 
	#ASN1_R_TOO_LONG
 155

	)

237 
	#ASN1_R_TOO_SMALL
 224

	)

238 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

239 
	#ASN1_R_TYPE_NOT_PRIMITIVE
 195

	)

240 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

241 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 215

	)

242 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

243 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

244 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

245 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

246 
	#ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM
 199

	)

247 
	#ASN1_R_UNKNOWN_TAG
 194

	)

248 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

249 
	#ASN1_R_UNSUPPORTED_CIPHER
 228

	)

250 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

251 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

252 
	#ASN1_R_WRONG_INTEGER_TYPE
 225

	)

253 
	#ASN1_R_WRONG_PUBLIC_KEY_TYPE
 200

	)

254 
	#ASN1_R_WRONG_TAG
 168

	)

	@/usr/include/openssl/pkcs7err.h

11 #i‚de‡
HEADER_PKCS7ERR_H


12 
	#HEADER_PKCS7ERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_PKCS7_°rögs
();

26 
	#PKCS7_F_DO_PKCS7_SIGNED_ATTRIB
 136

	)

27 
	#PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME
 135

	)

28 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 118

	)

29 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 100

	)

30 
	#PKCS7_F_PKCS7_ADD_CRL
 101

	)

31 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 102

	)

32 
	#PKCS7_F_PKCS7_ADD_SIGNATURE
 131

	)

33 
	#PKCS7_F_PKCS7_ADD_SIGNER
 103

	)

34 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 125

	)

35 
	#PKCS7_F_PKCS7_COPY_EXISTING_DIGEST
 138

	)

36 
	#PKCS7_F_PKCS7_CTRL
 104

	)

37 
	#PKCS7_F_PKCS7_DATADECODE
 112

	)

38 
	#PKCS7_F_PKCS7_DATAFINAL
 128

	)

39 
	#PKCS7_F_PKCS7_DATAINIT
 105

	)

40 
	#PKCS7_F_PKCS7_DATAVERIFY
 107

	)

41 
	#PKCS7_F_PKCS7_DECRYPT
 114

	)

42 
	#PKCS7_F_PKCS7_DECRYPT_RINFO
 133

	)

43 
	#PKCS7_F_PKCS7_ENCODE_RINFO
 132

	)

44 
	#PKCS7_F_PKCS7_ENCRYPT
 115

	)

45 
	#PKCS7_F_PKCS7_FINAL
 134

	)

46 
	#PKCS7_F_PKCS7_FIND_DIGEST
 127

	)

47 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 124

	)

48 
	#PKCS7_F_PKCS7_RECIP_INFO_SET
 130

	)

49 
	#PKCS7_F_PKCS7_SET_CIPHER
 108

	)

50 
	#PKCS7_F_PKCS7_SET_CONTENT
 109

	)

51 
	#PKCS7_F_PKCS7_SET_DIGEST
 126

	)

52 
	#PKCS7_F_PKCS7_SET_TYPE
 110

	)

53 
	#PKCS7_F_PKCS7_SIGN
 116

	)

54 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 113

	)

55 
	#PKCS7_F_PKCS7_SIGNER_INFO_SET
 129

	)

56 
	#PKCS7_F_PKCS7_SIGNER_INFO_SIGN
 139

	)

57 
	#PKCS7_F_PKCS7_SIGN_ADD_SIGNER
 137

	)

58 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 119

	)

59 
	#PKCS7_F_PKCS7_VERIFY
 117

	)

64 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

65 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

66 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

67 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

68 
	#PKCS7_R_CTRL_ERROR
 152

	)

69 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

70 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

71 
	#PKCS7_R_ENCRYPTION_CTRL_FAILURE
 149

	)

72 
	#PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 150

	)

73 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

74 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

75 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

76 
	#PKCS7_R_INVALID_SIGNED_DATA_TYPE
 155

	)

77 
	#PKCS7_R_NO_CONTENT
 122

	)

78 
	#PKCS7_R_NO_DEFAULT_DIGEST
 151

	)

79 
	#PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND
 154

	)

80 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

81 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

82 
	#PKCS7_R_NO_SIGNERS
 142

	)

83 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

84 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

85 
	#PKCS7_R_PKCS7_ADD_SIGNER_ERROR
 153

	)

86 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

87 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

88 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

89 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

90 
	#PKCS7_R_SIGNING_CTRL_FAILURE
 147

	)

91 
	#PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 148

	)

92 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

93 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

94 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

95 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

96 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

97 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

98 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

99 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

100 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

101 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

	@
1
.
1
/usr/include
532
32176
main.c
open_source_lib/cJSON/cJSON-1.7.15/cJSON.c
open_source_lib/cJSON/cJSON-1.7.15/cJSON.h
open_source_lib/cJSON/cJSON-1.7.15/cJSON_Utils.c
open_source_lib/cJSON/cJSON-1.7.15/cJSON_Utils.h
open_source_lib/cJSON/cJSON-1.7.15/fuzzing/afl.c
open_source_lib/cJSON/cJSON-1.7.15/fuzzing/cjson_read_fuzzer.c
open_source_lib/cJSON/cJSON-1.7.15/fuzzing/fuzz_main.c
open_source_lib/cJSON/cJSON-1.7.15/test.c
open_source_lib/cJSON/cJSON-1.7.15/tests/cjson_add.c
open_source_lib/cJSON/cJSON-1.7.15/tests/common.h
open_source_lib/cJSON/cJSON-1.7.15/tests/compare_tests.c
open_source_lib/cJSON/cJSON-1.7.15/tests/json_patch_tests.c
open_source_lib/cJSON/cJSON-1.7.15/tests/minify_tests.c
open_source_lib/cJSON/cJSON-1.7.15/tests/misc_tests.c
open_source_lib/cJSON/cJSON-1.7.15/tests/misc_utils_tests.c
open_source_lib/cJSON/cJSON-1.7.15/tests/old_utils_tests.c
open_source_lib/cJSON/cJSON-1.7.15/tests/parse_array.c
open_source_lib/cJSON/cJSON-1.7.15/tests/parse_examples.c
open_source_lib/cJSON/cJSON-1.7.15/tests/parse_hex4.c
open_source_lib/cJSON/cJSON-1.7.15/tests/parse_number.c
open_source_lib/cJSON/cJSON-1.7.15/tests/parse_object.c
open_source_lib/cJSON/cJSON-1.7.15/tests/parse_string.c
open_source_lib/cJSON/cJSON-1.7.15/tests/parse_value.c
open_source_lib/cJSON/cJSON-1.7.15/tests/parse_with_opts.c
open_source_lib/cJSON/cJSON-1.7.15/tests/print_array.c
open_source_lib/cJSON/cJSON-1.7.15/tests/print_number.c
open_source_lib/cJSON/cJSON-1.7.15/tests/print_object.c
open_source_lib/cJSON/cJSON-1.7.15/tests/print_string.c
open_source_lib/cJSON/cJSON-1.7.15/tests/print_value.c
open_source_lib/cJSON/cJSON-1.7.15/tests/readme_examples.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_1/src/ProductionCode.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_1/src/ProductionCode.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_1/src/ProductionCode2.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_1/src/ProductionCode2.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_1/test/TestProductionCode.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_1/test/TestProductionCode2.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_1/test/test_runners/TestProductionCode2_Runner.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_1/test/test_runners/TestProductionCode_Runner.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/src/ProductionCode.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/src/ProductionCode.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/src/ProductionCode2.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/src/ProductionCode2.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/test/TestProductionCode.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/test/TestProductionCode2.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/test/test_runners/TestProductionCode2_Runner.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/test/test_runners/TestProductionCode_Runner.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_2/test/test_runners/all_tests.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_3/helper/UnityHelper.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_3/helper/UnityHelper.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_3/src/ProductionCode.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_3/src/ProductionCode.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_3/src/ProductionCode2.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_3/src/ProductionCode2.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_3/test/TestProductionCode.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/example_3/test/TestProductionCode2.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/examples/unity_config.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/src/unity_fixture.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/src/unity_fixture.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/src/unity_fixture_internals.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/src/unity_fixture_malloc_overrides.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/test/main/AllTests.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/test/template_fixture_tests.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/test/unity_fixture_Test.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/test/unity_fixture_TestRunner.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/test/unity_output_Spy.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/extras/fixture/test/unity_output_Spy.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/src/unity.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/src/unity.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/src/unity_internals.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_cmd.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_def.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_head1.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_head1.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_cmd.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_def.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_head1.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_head1.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_new1.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_new2.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_param.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_run1.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_run2.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_mock_yaml.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_new1.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_new2.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_param.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_run1.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_run2.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/expectdata/testsample_yaml.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/testdata/CException.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/testdata/Defs.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/testdata/cmock.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/testdata/mockMock.h
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/testdata/testRunnerGenerator.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/testdata/testRunnerGeneratorSmall.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/testdata/testRunnerGeneratorWithMocks.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/tests/testparameterized.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity/test/tests/testunity.c
open_source_lib/cJSON/cJSON-1.7.15/tests/unity_setup.c
open_source_lib/mosquitto/mosquitto-2.0.15/apps/db_dump/db_dump.c
open_source_lib/mosquitto/mosquitto-2.0.15/apps/db_dump/db_dump.h
open_source_lib/mosquitto/mosquitto-2.0.15/apps/db_dump/print.c
open_source_lib/mosquitto/mosquitto-2.0.15/apps/db_dump/stubs.c
open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/client.c
open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/dynsec.c
open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/dynsec_client.c
open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/dynsec_group.c
open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/dynsec_role.c
open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/example.c
open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/mosquitto_ctrl.c
open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/mosquitto_ctrl.h
open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_ctrl/options.c
open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_passwd/get_password.c
open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_passwd/get_password.h
open_source_lib/mosquitto/mosquitto-2.0.15/apps/mosquitto_passwd/mosquitto_passwd.c
open_source_lib/mosquitto/mosquitto-2.0.15/client/client_props.c
open_source_lib/mosquitto/mosquitto-2.0.15/client/client_shared.c
open_source_lib/mosquitto/mosquitto-2.0.15/client/client_shared.h
open_source_lib/mosquitto/mosquitto-2.0.15/client/pub_client.c
open_source_lib/mosquitto/mosquitto-2.0.15/client/pub_shared.c
open_source_lib/mosquitto/mosquitto-2.0.15/client/pub_shared.h
open_source_lib/mosquitto/mosquitto-2.0.15/client/rr_client.c
open_source_lib/mosquitto/mosquitto-2.0.15/client/sub_client.c
open_source_lib/mosquitto/mosquitto-2.0.15/client/sub_client_output.c
open_source_lib/mosquitto/mosquitto-2.0.15/client/sub_client_output.h
open_source_lib/mosquitto/mosquitto-2.0.15/config.h
open_source_lib/mosquitto/mosquitto-2.0.15/deps/uthash.h
open_source_lib/mosquitto/mosquitto-2.0.15/deps/utlist.h
open_source_lib/mosquitto/mosquitto-2.0.15/examples/mysql_log/mysql_log.c
open_source_lib/mosquitto/mosquitto-2.0.15/examples/publish/basic-1.c
open_source_lib/mosquitto/mosquitto-2.0.15/examples/subscribe/basic-1.c
open_source_lib/mosquitto/mosquitto-2.0.15/examples/subscribe_simple/callback.c
open_source_lib/mosquitto/mosquitto-2.0.15/examples/subscribe_simple/multiple.c
open_source_lib/mosquitto/mosquitto-2.0.15/examples/subscribe_simple/single.c
open_source_lib/mosquitto/mosquitto-2.0.15/examples/temperature_conversion/main.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/examples/temperature_conversion/temperature_conversion.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/examples/temperature_conversion/temperature_conversion.h
open_source_lib/mosquitto/mosquitto-2.0.15/include/mosquitto.h
open_source_lib/mosquitto/mosquitto-2.0.15/include/mosquitto_broker.h
open_source_lib/mosquitto/mosquitto-2.0.15/include/mosquitto_plugin.h
open_source_lib/mosquitto/mosquitto-2.0.15/include/mqtt_protocol.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/actions.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/alias_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/alias_mosq.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/callbacks.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/connect.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/cpp/mosquittopp.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/lib/cpp/mosquittopp.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/dummypthread.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_auth.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_connack.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_disconnect.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_ping.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_pubackcomp.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_publish.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_pubrec.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_pubrel.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_suback.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/handle_unsuback.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/helpers.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/logging_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/logging_mosq.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/loop.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/memory_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/memory_mosq.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/messages_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/messages_mosq.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/misc_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/misc_mosq.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/mosquitto.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/mosquitto_internal.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/net_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/net_mosq.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/net_mosq_ocsp.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/options.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/packet_datatypes.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/packet_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/packet_mosq.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/property_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/property_mosq.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/read_handle.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/read_handle.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/send_connect.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/send_disconnect.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/send_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/send_mosq.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/send_publish.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/send_subscribe.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/send_unsubscribe.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/socks_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/socks_mosq.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/srv_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/strings_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/thread_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/time_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/time_mosq.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/tls_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/tls_mosq.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/utf8_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/util_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/util_mosq.h
open_source_lib/mosquitto/mosquitto-2.0.15/lib/util_topic.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/will_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/lib/will_mosq.h
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/auth-by-ip/mosquitto_auth_by_ip.c
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/deny-protocol-version/mosquitto_deny_protocol_version.c
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/acl.c
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/auth.c
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/clientlist.c
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/clients.c
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/dynamic_security.h
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/grouplist.c
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/groups.c
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/json_help.c
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/json_help.h
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/plugin.c
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/rolelist.c
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/roles.c
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/dynamic-security/sub_matches_sub.c
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/message-timestamp/mosquitto_message_timestamp.c
open_source_lib/mosquitto/mosquitto-2.0.15/plugins/payload-modification/mosquitto_payload_modification.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/bridge.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/bridge_topic.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/conf.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/conf_includedir.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/context.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/control.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/database.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/handle_auth.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/handle_connack.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/handle_connect.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/handle_disconnect.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/handle_publish.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/handle_subscribe.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/handle_unsubscribe.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/keepalive.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/lib_load.h
open_source_lib/mosquitto/mosquitto-2.0.15/src/logging.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/loop.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/memory_public.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/mosquitto.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/mosquitto_broker_internal.h
open_source_lib/mosquitto/mosquitto-2.0.15/src/mux.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/mux.h
open_source_lib/mosquitto/mosquitto-2.0.15/src/mux_epoll.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/mux_poll.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/net.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/password_mosq.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/password_mosq.h
open_source_lib/mosquitto/mosquitto-2.0.15/src/persist.h
open_source_lib/mosquitto/mosquitto-2.0.15/src/persist_read.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/persist_read_v234.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/persist_read_v5.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/persist_write.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/persist_write_v5.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/plugin.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/plugin_debug.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/plugin_defer.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/plugin_public.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/property_broker.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/read_handle.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/retain.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/security.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/security_default.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/send_auth.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/send_connack.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/send_suback.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/send_unsuback.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/service.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/session_expiry.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/signals.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/subs.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/sys_tree.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/sys_tree.h
open_source_lib/mosquitto/mosquitto-2.0.15/src/topic_tok.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/websockets.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/will_delay.c
open_source_lib/mosquitto/mosquitto-2.0.15/src/xtreport.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/08-tls-psk-bridge.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/08-tls-psk-pub.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_acl.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_acl_change.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_acl_sub_denied.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_context_params.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_extended_multiple.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_extended_reauth.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_extended_single.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_extended_single2.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_msg_params.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_publish.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_pwd.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_v2.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_v4.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_v5.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_v5_handle_message.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/auth_plugin_v5_handle_tick.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/mosquitto_plugin_v2.h
open_source_lib/mosquitto/mosquitto-2.0.15/test/broker/c/plugin_control.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/01-con-discon-success.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/01-keepalive-pingreq.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/01-no-clean-session.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/01-server-keepalive-pingreq.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/01-unpwd-set.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/01-will-set.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/01-will-unpwd-set.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/02-subscribe-qos0.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/02-subscribe-qos1-async1.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/02-subscribe-qos1-async2.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/02-subscribe-qos1.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/02-subscribe-qos2.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/02-unsubscribe-multiple-v5.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/02-unsubscribe-v5.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/02-unsubscribe.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-b2c-qos1-unexpected-puback.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-b2c-qos1.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-b2c-qos2-len.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-b2c-qos2-unexpected-pubcomp.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-b2c-qos2-unexpected-pubrel.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-b2c-qos2.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos1-disconnect.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos1-len.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos1-receive-maximum.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos2-disconnect.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos2-len.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos2-maximum-qos-0.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos2-maximum-qos-1.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos2-pubrec-error.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos2-receive-maximum-1.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos2-receive-maximum-2.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-c2b-qos2.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-qos0-no-payload.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-publish-qos0.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-request-response-1.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-request-response-2.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/03-request-response-correlation-1.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/04-retain-qos0.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/08-ssl-bad-cacert.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/08-ssl-connect-cert-auth-custom-ssl-ctx-default.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/08-ssl-connect-cert-auth-custom-ssl-ctx.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/08-ssl-connect-cert-auth-enc.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/08-ssl-connect-cert-auth.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/08-ssl-connect-no-auth.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/08-ssl-fake-cacert.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/09-util-topic-tokenise.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/11-prop-oversize-packet.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/11-prop-recv-qos0.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/11-prop-recv-qos1.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/11-prop-recv-qos2.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/11-prop-send-content-type.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/c/11-prop-send-payload-format.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/01-con-discon-success.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/01-keepalive-pingreq.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/01-no-clean-session.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/01-unpwd-set.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/01-will-set.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/01-will-unpwd-set.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/02-subscribe-qos0.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/02-subscribe-qos1.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/02-subscribe-qos2.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/02-unsubscribe.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/03-publish-b2c-qos1.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/03-publish-b2c-qos2.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/03-publish-c2b-qos1-disconnect.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/03-publish-c2b-qos2-disconnect.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/03-publish-c2b-qos2.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/03-publish-qos0-no-payload.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/03-publish-qos0.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/04-retain-qos0.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/08-ssl-bad-cacert.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/08-ssl-connect-cert-auth-enc.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/08-ssl-connect-cert-auth.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/08-ssl-connect-no-auth.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/08-ssl-fake-cacert.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/lib/cpp/09-util-topic-tokenise.cpp
open_source_lib/mosquitto/mosquitto-2.0.15/test/old/msgsps_common.h
open_source_lib/mosquitto/mosquitto-2.0.15/test/old/msgsps_pub.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/old/msgsps_sub.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/random/auth_plugin.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/bridge_topic_test.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/datatype_read.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/datatype_write.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/misc_trim_test.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/persist_read_stubs.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/persist_read_test.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/persist_write_stubs.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/persist_write_test.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/property_add.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/property_read.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/property_user_read.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/property_write.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/publish_test.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/stubs.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/subs_stubs.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/subs_test.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/test.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/utf8.c
open_source_lib/mosquitto/mosquitto-2.0.15/test/unit/util_topic_test.c
open_source_lib/mosquitto/mosquitto/include/mosquitto.h
open_source_lib/mosquitto/mosquitto/include/mosquitto_broker.h
open_source_lib/mosquitto/mosquitto/include/mosquitto_plugin.h
open_source_lib/mosquitto/mosquitto/include/mosquittopp.h
open_source_lib/mosquitto/mosquitto/include/mqtt_protocol.h
src/cJSON.c
src/cJSON.h
src/database.c
src/database.h
src/ds18b20.c
src/ds18b20.h
src/func.c
src/func.h
src/logger.c
src/logger.h
src/main.h
src/pack.c
src/pack.h
src/proc.c
src/proc.h
/usr/include/arpa/inet.h
/usr/include/arpa/nameser.h
/usr/include/assert.h
/usr/include/cjson/cJSON.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/grp.h
/usr/include/ifaddrs.h
/usr/include/inttypes.h
/usr/include/libgen.h
/usr/include/limits.h
/usr/include/linux/in.h
/usr/include/linux/in6.h
/usr/include/locale.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/openssl/bio.h
/usr/include/openssl/bn.h
/usr/include/openssl/buffer.h
/usr/include/openssl/conf.h
/usr/include/openssl/engine.h
/usr/include/openssl/err.h
/usr/include/openssl/evp.h
/usr/include/openssl/ocsp.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/rand.h
/usr/include/openssl/safestack.h
/usr/include/openssl/ssl.h
/usr/include/openssl/tls1.h
/usr/include/openssl/ui.h
/usr/include/openssl/x509v3.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/syslog.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/arpa/nameser_compat.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/linux/libc-compat.h
/usr/include/linux/socket.h
/usr/include/linux/types.h
/usr/include/openssl/async.h
/usr/include/openssl/bioerr.h
/usr/include/openssl/bnerr.h
/usr/include/openssl/buffererr.h
/usr/include/openssl/comp.h
/usr/include/openssl/conferr.h
/usr/include/openssl/crypto.h
/usr/include/openssl/ct.h
/usr/include/openssl/dh.h
/usr/include/openssl/dsa.h
/usr/include/openssl/dtls1.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/ec.h
/usr/include/openssl/engineerr.h
/usr/include/openssl/evperr.h
/usr/include/openssl/hmac.h
/usr/include/openssl/lhash.h
/usr/include/openssl/objects.h
/usr/include/openssl/ocsperr.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/pem.h
/usr/include/openssl/randerr.h
/usr/include/openssl/rsa.h
/usr/include/openssl/srtp.h
/usr/include/openssl/ssl2.h
/usr/include/openssl/ssl3.h
/usr/include/openssl/sslerr.h
/usr/include/openssl/stack.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/uierr.h
/usr/include/openssl/x509.h
/usr/include/openssl/x509v3err.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/linux/posix_types.h
/usr/include/openssl/asn1.h
/usr/include/openssl/asyncerr.h
/usr/include/openssl/comperr.h
/usr/include/openssl/cryptoerr.h
/usr/include/openssl/cterr.h
/usr/include/openssl/dherr.h
/usr/include/openssl/dsaerr.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/ecerr.h
/usr/include/openssl/obj_mac.h
/usr/include/openssl/objectserr.h
/usr/include/openssl/pemerr.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/rsaerr.h
/usr/include/openssl/sha.h
/usr/include/openssl/x509_vfy.h
/usr/include/openssl/x509err.h
/usr/include/stdc-predef.h
/usr/include/linux/stddef.h
/usr/include/openssl/asn1err.h
/usr/include/openssl/pkcs7err.h
